const casaVitini = {
    administracion: {
        reservas: {
            arranque: async () => {
                const main = document.querySelector("main")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const parametros = granuladoURL.parametros

                main.setAttribute("zonaCSS", "/administracion/reservas")
                const botones = document.querySelectorAll("[componente=botonAdministracion]")
                botones.forEach((boton) => {
                    boton.addEventListener("click", (boton) => {
                        boton.preventDefault()
                        const vista = boton.target.getAttribute("vista")
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    })
                })

                if (parametros.reserva_antiguo) {
                    main.innerHTML = null
                    main.setAttribute("zonaCSS", "administracion/reservas/detallesReserva")

                    casaVitini.administracion.reservas.detallesReserva.reservaUI.ui({
                        reservaUID: parametros.reserva
                    })
                }

                if (parametros.reserva) {
                    main.innerHTML = null
                    main.setAttribute("zonaCSS", "administracion/reservas/detallesReserva")

                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add(
                        "marcoElasticoRelativo"
                    )
                    main.appendChild(marcoElastico)


                    const reservaUID = parametros.reserva
                    const reservaUI = await casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.despliege({
                        reservaUID
                    })
                    marcoElastico.appendChild(reservaUI)

                    const zonaURL = parametros.zona

                    if (zonaURL) {
                        const categoriaGlobalIDV = casaVitini.utilidades.cadenas.snakeToCamel(zonaURL)
                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.ui.componentesUI.categoriasGlobalesUI.controladorCategorias({
                            origen: "url",
                            categoria: categoriaGlobalIDV
                        })
                    }

                }
            },
            buscador: {
                arranque: () => {
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")

                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    const directorios = granuladoURL.directorios

                    if (Object.keys(granuladoURL.parametros).length === 0) {

                        main.setAttribute("zonaCSS", "administracion/reservas/buscador")
                        casaVitini.administracion.reservas.buscador.buscadorUI()
                    } else if (Object.keys(granuladoURL.parametros).length > 0) {

                        main.setAttribute("zonaCSS", "administracion/reservas/buscador")
                        casaVitini.administracion.reservas.buscador.buscadorUI()


                        const parametrosFormatoURL = granuladoURL.parametros
                        const parametrosFormatoIDV = {}
                        Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                            const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                            let nombreColumnaIDV
                            if ((valorParametroURL)?.toLowerCase() === "reserva") {
                                nombreColumnaIDV = "reservaUID"
                            } else if ((valorParametroURL)?.toLowerCase() === "estado_reserva") {
                                nombreColumnaIDV = "estadoReservaIDV"
                            } else if (valorParametroURL) {
                                nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                            }
                            parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                            parametrosFormatoIDV.instanciaUID = instanciaUID
                        })
                        const buscadorUI = document.querySelector("[componente=navegacionZonaAdministracion]")

                        const estadoBusquedaUI = document.createElement("div")
                        estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                        estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                        estadoBusquedaUI.innerText = "Buscando..."
                        buscadorUI.parentNode.insertBefore(estadoBusquedaUI, buscadorUI.nextSibling);


                        casaVitini.administracion.reservas.buscador.mostrarReservasResueltas(parametrosFormatoIDV)
                    } else {
                        casaVitini.ui.componentes.urlDesconocida()
                    }
                },
                buscadorUI: (url) => {
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()

                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElasticoRelativo")
                    marcoElastico.setAttribute("componente", "marcoElastico")
                    const espacioReservas = document.createElement("div")
                    espacioReservas.setAttribute("componente", "espacioReservas")
                    espacioReservas.classList.add("administracion_reservas_espacioReservas")
                    const contenedorBotonesGlobales = document.createElement("div")
                    contenedorBotonesGlobales.classList.add(
                        "grid",
                        "grid3Columnas",
                        "borderRadius16",
                        "gap6"
                    )
                    const botonVerHoy = document.createElement("a")
                    botonVerHoy.classList.add("administracion_reservas_contenedorBotonesGlobales")
                    botonVerHoy.setAttribute("boton", "botonVerHoy")
                    botonVerHoy.addEventListener("click", casaVitini.administracion.reservas.buscador.verReservasHoy)
                    botonVerHoy.innerText = "Ver entradas hoy"
                    contenedorBotonesGlobales.appendChild(botonVerHoy)
                    const botonReservasPendientes = document.createElement("a")
                    botonReservasPendientes.classList.add("administracion_reservas_contenedorBotonesGlobales")
                    botonReservasPendientes.innerText = "Reservas pendientes de revisi√≥n"
                    botonReservasPendientes.setAttribute("vista", "/administracion/reservas/pendientes_de_revision")
                    botonReservasPendientes.setAttribute("href", "/administracion/reservas/pendientes_de_revision")
                    botonReservasPendientes.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotonesGlobales.appendChild(botonReservasPendientes)
                    const botonCrearReserva = document.createElement("a")
                    botonCrearReserva.classList.add("administracion_reservas_contenedorBotonesGlobales")
                    botonCrearReserva.innerText = "Crear una nueva reserva"
                    botonCrearReserva.setAttribute("vista", "/administracion/reservas/nueva")
                    botonCrearReserva.setAttribute("href", "/administracion/reservas/nueva")
                    botonCrearReserva.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotonesGlobales.appendChild(botonCrearReserva)
                    espacioReservas.appendChild(contenedorBotonesGlobales)
                    //Debera de ser un grid de dos uno para el boton y el otro para el resto
                    let buscadorUI = document.createElement("nav")
                    buscadorUI.classList.add("navegacionZonaAdministracion")
                    buscadorUI.setAttribute("componente", "navegacionZonaAdministracion")
                    let bloqueContenedor = document.createElement("div")
                    bloqueContenedor.classList.add("reservasBloqueContenedor")
                    const buscadorPorPalaba = document.createElement("input")
                    buscadorPorPalaba.classList.add("campoBuscadorIdReservas")
                    buscadorPorPalaba.setAttribute("componenteCampo", "buscadorPorId")
                    buscadorPorPalaba.setAttribute("origenBusqueda", "porTerminos")
                    buscadorPorPalaba.setAttribute("step", "any")
                    buscadorPorPalaba.setAttribute("placeholder", "Escribe para buscar reservas")
                    buscadorPorPalaba.addEventListener("input", casaVitini.administracion.reservas.buscador.buscadorReservas)
                    espacioReservas.appendChild(buscadorPorPalaba)
                    let buscadorReservasPorFecha = document.createElement("div")
                    buscadorReservasPorFecha.classList.add("adminsitracionReservasBuscador")
                    bloqueContenedor.appendChild(buscadorReservasPorFecha)
                    let bloqueFechas = document.createElement("div")
                    bloqueFechas.classList.add("adminsitracionBloqueSelecionDias")
                    bloqueFechas.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                    buscadorReservasPorFecha.appendChild(bloqueFechas)
                    let bloqueFechaEntrada = document.createElement("div")
                    bloqueFechaEntrada.classList.add("diaEntradaNuevoAdministracion")
                    bloqueFechaEntrada.classList.add("administracionFormatoBloqueDiaNuevo")
                    bloqueFechaEntrada.setAttribute("calendario", "entrada")
                    bloqueFechaEntrada.setAttribute("paralizadorevento", "ocultadorCalendarios")
                    //bloqueFechaEntrada.addEventListener("click", casaVitini.administracion.reservas.buscador.constructorCalendario)
                    bloqueFechaEntrada.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_entrada_perfilSimple",
                            contenedorOrigenIDV: "[calendario=entrada]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "inicioRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Seleciona una fecha de inicio de rango para la b√∫squeda"

                        })
                    })

                    bloqueFechaEntrada.setAttribute("componenteBuscador", "compartidoID")
                    bloqueFechas.appendChild(bloqueFechaEntrada)
                    let textoFechaEntrada = document.createElement("div")
                    textoFechaEntrada.classList.add("textoDiaNuevoAdministracion")
                    textoFechaEntrada.innerText = "Fecha de entrada"
                    bloqueFechaEntrada.appendChild(textoFechaEntrada)
                    let fechaEntradaElemento = document.createElement("div")
                    fechaEntradaElemento.classList.add("fechaNuevo")
                    fechaEntradaElemento.setAttribute("fechaUI", "fechaInicio")
                    fechaEntradaElemento.innerText = "(Seleccionar)"
                    bloqueFechaEntrada.appendChild(fechaEntradaElemento)
                    let bloqueFechaSalida = document.createElement("div")
                    bloqueFechaSalida.classList.add("diaEntradaNuevoAdministracion")
                    bloqueFechaSalida.classList.add("administracionFormatoBloqueDiaNuevo")
                    bloqueFechaSalida.setAttribute("calendario", "salida")
                    bloqueFechaSalida.setAttribute("componenteBuscador", "compartidoID")
                    //bloqueFechaSalida.addEventListener("click", casaVitini.administracion.reservas.buscador.constructorCalendario)
                    bloqueFechaSalida.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_salida_perfilSimple",
                            contenedorOrigenIDV: "[calendario=salida]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "finalRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Seleciona una fecha de fin de rango para la b√∫squeda"
                        })
                    })
                    bloqueFechaSalida.setAttribute("paralizadorevento", "ocultadorCalendarios")
                    bloqueFechas.appendChild(bloqueFechaSalida)
                    let textoFechaSalida = document.createElement("div")
                    textoFechaSalida.classList.add("textoDiaNuevoAdministracion")
                    textoFechaSalida.innerText = "Fecha de salida"
                    bloqueFechaSalida.appendChild(textoFechaSalida)
                    let fechaSalidaElemento = document.createElement("div")
                    fechaSalidaElemento.classList.add("fechaNuevo")
                    fechaSalidaElemento.setAttribute("fechaUI", "fechaFin")
                    fechaSalidaElemento.innerText = "(Seleccionar)"
                    bloqueFechaSalida.appendChild(fechaSalidaElemento)
                    let selectorRango = document.createElement("div")
                    selectorRango.classList.add("selectorRango")
                    let opcionRango = document.createElement("p")
                    opcionRango.classList.add("selectorRangoOpcion")
                    opcionRango.setAttribute("selectorRango", "cualquieraQueCoincida")
                    opcionRango.innerText = "Cualquiera que coincida"
                    opcionRango.addEventListener("click", () => {
                        casaVitini.administracion.reservas.buscador.seleccionarRango("cualquieraQueCoincida")
                    })
                    selectorRango.appendChild(opcionRango)
                    opcionRango = document.createElement("p")
                    opcionRango.classList.add("selectorRangoOpcion")
                    opcionRango.setAttribute("selectorRango", "soloDentroDelRango")
                    opcionRango.innerText = "Solo dentro del rango"
                    opcionRango.addEventListener("click", () => {
                        casaVitini.administracion.reservas.buscador.seleccionarRango("soloDentroDelRango")
                    })
                    selectorRango.appendChild(opcionRango)
                    opcionRango = document.createElement("p")
                    opcionRango.classList.add("selectorRangoOpcion")
                    opcionRango.setAttribute("selectorRango", "porFechaDeEntrada")
                    opcionRango.innerText = "Por fecha de entradas"
                    opcionRango.addEventListener("click", () => {
                        casaVitini.administracion.reservas.buscador.seleccionarRango("porFechaDeEntrada")
                    })
                    selectorRango.appendChild(opcionRango)
                    opcionRango = document.createElement("p")
                    opcionRango.classList.add("selectorRangoOpcion")
                    opcionRango.setAttribute("selectorRango", "porFechaDeSalida")
                    opcionRango.innerText = "Por fecha de salida"
                    opcionRango.addEventListener("click", () => {
                        casaVitini.administracion.reservas.buscador.seleccionarRango("porFechaDeSalida")
                    })
                    selectorRango.appendChild(opcionRango)
                    buscadorReservasPorFecha.appendChild(selectorRango)
                    let botonMostrarReservas = document.createElement(("div"))
                    botonMostrarReservas.classList.add("botonMostrarDisponibilidad")
                    botonMostrarReservas.setAttribute("boton", "mostrarReservas")
                    botonMostrarReservas.setAttribute("origenBusqueda", "porFecha")
                    botonMostrarReservas.addEventListener("click", casaVitini.administracion.reservas.buscador.mostrarReservasPorRango)
                    buscadorUI.appendChild(bloqueContenedor)
                    botonMostrarReservas.innerText = "Mostrar reservas"
                    buscadorReservasPorFecha.appendChild(botonMostrarReservas)
                    espacioReservas.appendChild(buscadorUI)


                    const contenedorResultados = document.createElement("div")
                    contenedorResultados.setAttribute("contenedor", "reservasEncontradas")
                    contenedorResultados.classList.add(
                        "flexVertical",
                    )
                    espacioReservas.appendChild(contenedorResultados)




                    marcoElastico.appendChild(espacioReservas)
                    const seccion = document.querySelector("main")
                    seccion.appendChild(marcoElastico)
                },
                seleccionarDia: (dia) => {
                    let diaSeleccionadoComoElemento = dia.target;
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    let diaSeleccionado = dia.target.getAttribute("dia")
                    diaSeleccionado = diaSeleccionado.padStart(2, "0")
                    diaSeleccionado = Number(diaSeleccionado)
                    let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                    anoSeleccionado = anoSeleccionado.padStart(4, "0")
                    anoSeleccionado = Number(anoSeleccionado)
                    let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                    mesSeleccionado = mesSeleccionado.padStart(2, "0")
                    mesSeleccionado = Number(mesSeleccionado)
                    const fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    const selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                    selectorDias.forEach((dia) => {
                        //dia.classList.remove("calendarioDiaDisponible")
                        dia.classList.remove("calendarioDiaReserva")
                        dia.classList.remove("calendarioDiaSeleccionado")
                    })
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        if (calendarioIO === "entrada") {
                            document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                            document.querySelector("#fechaEntrada").innerText = "Seleccionar"
                        }
                        if (calendarioIO === "salida") {
                            document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                            document.querySelector("#fechaSalida").innerText = "Seleccionar"
                        }
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                    }
                    const diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    diasDisponibles.forEach(diaDisponible => {
                        diaDisponible.removeAttribute("estadoDia")
                        diaDisponible.style.background = ""
                        diaDisponible.style.color = ""
                    })
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                    let fechaEntradaSeleccionada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    let datosFechaEntradaSeleccionada
                    if (fechaEntradaSeleccionada) {
                        const fechaEntradaSeleccionada_array = fechaEntradaSeleccionada.split("/")
                        diaSeleccionadoEntrada = fechaEntradaSeleccionada_array[0]
                        diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                        mesSeleccionadoEntrada = fechaEntradaSeleccionada_array[1]
                        mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                        anoSeleccionadoEntrada = fechaEntradaSeleccionada_array[2]
                        anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                        datosFechaEntradaSeleccionada = "existen"
                    }
                    let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    let datosFechaSalidaSeleccionada
                    if (fechaSalidaSelecionda) {
                        const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                        diaSeleccionadoSalida = fechaSalidaSelecionda_array[0]
                        diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                        mesSeleccionadoSalida = fechaSalidaSelecionda_array[1]
                        mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                        anoSeleccionadoSalida = fechaSalidaSelecionda_array[2]
                        anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                        datosFechaSalidaSeleccionada = "existen"
                    }
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("#fechaEntrada").innerText = fechaSeleccionadaUI
                        if (fechaSalidaSelecionda) {
                            if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {
                                        // dia.classList.remove("calendarioDiaDisponible")
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("#fechaSalida").innerText = fechaSeleccionadaUI
                        if (fechaEntradaSeleccionada) {
                            if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                    }
                },
                mostrarDetallesReserva: (transaccion) => {
                    transaccion.preventDefault()
                    transaccion.stopPropagation()
                    const reserva = transaccion.target.parentNode.getAttribute("reserva")
                    const vista = "/administracion/reservas/" + reserva
                    const navegacion = {
                        vista: vista,
                        tipoOrigen: "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(navegacion)
                },
                constructorCalendario: async (boton) => {
                    const botonID = boton.target.getAttribute("calendario")
                    const alturaDinamicaArriba = casaVitini.utilidades.observador.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton.target.closest("[calendario]")) + 20
                    const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorCalendario = document.querySelector("[contenedor=calendario]")
                    const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    let datosFechaEntradaSeleccionada
                    if (fechaEntradaVolatil_Humana) {
                        const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("/")
                        diaSeleccionadoEntrada = Number(fechaEntradaAarray[0])
                        mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                        anoSeleccionadoEntrada = Number(fechaEntradaAarray[2])
                    }
                    const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    let datosFechaSalidaSeleccionada
                    if (fechaSalidaVolatil_Humana) {
                        const fechaSaliraArray = fechaSalidaVolatil_Humana.split("/")
                        diaSeleccionadoSalida = Number(fechaSaliraArray[0])
                        mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                        anoSeleccionadoSalida = Number(fechaSaliraArray[2])
                    }
                    if (botonID === "entrada") {
                        if (selectorCalendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        }
                        if (selectorCalendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)

                        }
                        if (fechaEntradaVolatil_Humana) {
                            const calendario = {
                                tipo: "personalizado",
                                //
                                tipoFecha: "entrada",
                                diaSeleccionado: diaSeleccionadoEntrada,
                                mes: Number(mesSeleccionadoEntrada),
                                ano: Number(anoSeleccionadoEntrada)
                            }
                            const tipoFecha = {
                                tipoFecha: "entrada",
                                almacenamientoCalendarioID: "AdministracionCalendario",
                                perfilMes: "calendario_entrada_perfilSimple",
                                calendarioIO: "entrada",
                                mensajeInfo: "Selecciona una fecha de entrada para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.instanciaUID = instanciaUID
                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        } else {
                            const calendario = {
                                tipo: "actual",
                                //
                                tipoFecha: "entrada",
                                //"diaSeleccionado": almacenamientoAdministracion.Entrada.Dia,
                                //"mes": almacenamientoAdministracion.Entrada.Mes,
                                //"ano": almacenamientoAdministracion.Entrada.Ano
                            }
                            const tipoFecha = {
                                tipoFecha: "entrada",
                                almacenamientoCalendarioID: "administracionCalendario",
                                perfilMes: "calendario_entrada_perfilSimple",
                                calendarioIO: "entrada",
                                mensajeInfo: "Selecciona una fecha de entrada para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.instanciaUID = instanciaUID
                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        }
                    }
                    if (botonID === "salida") {
                        if (selectorCalendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)

                        }
                        if (selectorCalendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            //
                        }
                        if (!fechaEntradaVolatil_Humana && !fechaSalidaVolatil_Humana) {
                            const calendario = {
                                tipo: "actual",
                                // 
                                tipoFecha: "salida",
                            }
                            const tipoFecha = {
                                tipoFecha: "salida",
                                almacenamientoCalendarioID: "administracionCalendario",
                                perfilMes: "calendario_salida_perfilSimple",
                                calendarioIO: "salida",
                                mensajeInfo: "Selecciona una fecha de salida para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.instanciaUID = instanciaUID

                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        }
                        if (fechaEntradaVolatil_Humana && !fechaSalidaVolatil_Humana) {
                            const calendario = {
                                tipo: "personalizado",
                                //  
                                tipoFecha: "salida",
                                diaSeleccionado: diaSeleccionadoEntrada,
                                mes: Number(mesSeleccionadoEntrada),
                                ano: Number(anoSeleccionadoEntrada)
                            }
                            //let Dia_Entrada_Selecioando = Number(reservaLocal.Entrada.Dia)
                            const tipoFecha = {
                                tipoFecha: "salida",
                                almacenamientoCalendarioID: "administracionCalendario",
                                perfilMes: "calendario_salida_perfilSimple",
                                calendarioIO: "salida",
                                mensajeInfo: "Selecciona una fecha de salida para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.tiempo = "presente"
                            calendarioResuelto.instanciaUID = instanciaUID
                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        }
                        if (fechaSalidaVolatil_Humana) {
                            const calendario = {
                                tipo: "personalizado",
                                //  
                                tipoFecha: "salida",
                                diaSeleccionado: diaSeleccionadoSalida,
                                mes: Number(mesSeleccionadoSalida),
                                ano: Number(anoSeleccionadoSalida)
                            }
                            //let Dia_Entrada_Selecioando = Number(reservaLocal.Entrada.Dia)
                            const tipoFecha = {
                                tipoFecha: "salida",
                                almacenamientoCalendarioID: "administracionCalendario",
                                perfilMes: "calendario_salida_perfilSimple",
                                calendarioIO: "salida",
                                mensajeInfo: "Selecciona una fecha de salida para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.instanciaUID = instanciaUID
                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        }
                    }
                },
                seleccionarRango: (rangoIDV) => {
                    let rangos = document.querySelectorAll("[selectorRango]")
                    rangos.forEach((rango) => {
                        let rangoPorCiclo = rango.getAttribute("selectorRango")
                        if (rangoPorCiclo === rangoIDV) {
                            rango.style.background = "#0800ff"
                            rango.style.color = "white"
                            rango.setAttribute("estadoSelecion", "activado")
                        } else {
                            rango.style.removeProperty("background")
                            rango.style.removeProperty("color")
                            rango.removeAttribute("estadoSelecion")
                        }
                    })
                },
                mostrarReservasResueltas: async function (transaccion) {

                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacioReservas]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)
                    delete transaccion.instanciaUID
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const paginaTipo = transaccion.paginaTipo
                    delete transaccion.paginaTipo

                    const selectorAlmacen = document.querySelector("[areaGrid=gridBuscadorReservas]")?.getAttribute("almacen") || "{}"
                    const almacen = JSON.parse(selectorAlmacen)

                    let nombreColumnaURL
                    const nombreColumna = transaccion.nombreColumna
                    if ((nombreColumna)?.toLowerCase() === "reservauid") {
                        nombreColumnaURL = "reserva"
                    } else
                        if ((nombreColumna)?.toLowerCase() === "estadoreservaidv") {
                            nombreColumnaURL = "estado_reserva"
                        } else if (nombreColumna) {
                            nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                        }
                    transaccion.pagina = Number(transaccion?.pagina || 1)
                    const tipoConsulta_entrada = transaccion.tipoConsulta || almacen?.tipoConsulta
                    const peticion = {
                        zona: "administracion/reservas/buscador/listarReservas",
                        tipoConsulta: tipoConsulta_entrada
                    }
                    if (tipoConsulta_entrada === "porTerminos") {
                        peticion.termino = transaccion.termino || almacen?.termino
                        peticion.nombreColumna = transaccion.nombreColumna
                        peticion.sentidoColumna = transaccion.sentidoColumna
                        peticion.pagina = transaccion.pagina

                    }

                    if (tipoConsulta_entrada === "hoy") {
                        peticion.tipoCoincidencia = transaccion.tipoCoincidencia
                        peticion.pagina = transaccion.pagina

                    }

                    if (tipoConsulta_entrada === "rango") {
                        peticion.tipoCoincidencia = transaccion.tipoCoincidencia || almacen?.tipoCoincidencia
                        peticion.fechaEntrada = transaccion.fechaEntrada || almacen?.fechaEntrada
                        peticion.fechaSalida = transaccion.fechaSalida || almacen?.fechaSalida

                        peticion.nombreColumna = transaccion.nombreColumna
                        peticion.sentidoColumna = transaccion.sentidoColumna

                        peticion.pagina = transaccion.pagina
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(peticion)

                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }

                    if (respuestaServidor?.error) {
                        document.querySelector("[componente=estadoBusqueda]").innerText = respuestaServidor?.error
                        return
                    }
                    if (respuestaServidor?.totalReservas === 0) {
                        document.querySelector("[gridUID=gridReservas]")?.remove()
                        document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]").innerText = "No se han encontrado reservas"
                        return
                    }
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    const reservas = respuestaServidor.reservas
                    const paginasTotales = respuestaServidor.paginasTotales
                    const pagina = respuestaServidor.pagina
                    // const nombreColumna = respuestaServidor.nombreColumna
                    const sentidoColumna = respuestaServidor.sentidoColumna
                    const tipoConsulta = respuestaServidor.tipoConsulta
                    const tipoCoincidencia = respuestaServidor.tipoCoincidencia
                    const termino = respuestaServidor.termino
                    const fechaEntrada = respuestaServidor.fechaEntrada
                    const fechaSalida = respuestaServidor.fechaSalida

                    const columnasGrid = [
                        {
                            columnaUI: "Reserva",
                            columnaIDV: "reservaUID",
                        },
                        {
                            columnaUI: "Fecha de entrada",
                            columnaIDV: "fechaEntrada",
                        },
                        {
                            columnaUI: "Fecha de salida",
                            columnaIDV: "fechaSalida",
                        },
                        {
                            columnaUI: "Estado de la reserva",
                            columnaIDV: "estadoReservaIDV",
                        },
                        {
                            columnaUI: "Titular de la reserva",
                            columnaIDV: "nombreCompleto",
                        },
                        {
                            columnaUI: "Pasaporte del titular",
                            columnaIDV: "pasaporteTitular",
                        },
                        {
                            columnaUI: "Correo del titular",
                            columnaIDV: "mailTitular",
                        },
                        {
                            columnaUI: "Fecha de la reserva",
                            columnaIDV: "fechaCreacion",
                        },
                    ]

                    const parametrosFinales = {}

                    if (tipoConsulta === "porTerminos") {
                        parametrosFinales.tipo_consulta = "por_terminos"
                        parametrosFinales.termino = termino
                    }
                    if (tipoConsulta === "rango") {
                        parametrosFinales.tipo_consulta = "rango"
                        parametrosFinales.tipo_coincidencia = casaVitini.utilidades.cadenas.camelToSnake(tipoCoincidencia)

                        if (tipoCoincidencia === "cualquieraQueCoincida") {
                            parametrosFinales.fecha_entrada = fechaEntrada
                            parametrosFinales.fecha_salida = fechaSalida
                        } else if (tipoCoincidencia === "soloDentroDelRango") {
                            parametrosFinales.fecha_entrada = fechaEntrada
                            parametrosFinales.fecha_salida = fechaSalida
                        } else if (tipoCoincidencia === "porFechaDeEntrada") {
                            parametrosFinales.fecha_entrada = fechaEntrada
                        } else if (tipoCoincidencia === "porFechaDeSalida") {
                            parametrosFinales.fecha_salida = fechaSalida
                        }
                    }

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal
                    const constructorAlmacen = {
                        tipoConsulta
                    }
                    if (tipoConsulta === "porTerminos") {
                        constructorAlmacen.termino = termino
                    }
                    if (tipoConsulta === "rango") {
                        constructorAlmacen.tipoCoincidencia = tipoCoincidencia
                        constructorAlmacen.fechaEntrada = fechaEntrada
                        constructorAlmacen.fechaSalida = fechaSalida
                    }

                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.reservas.buscador.mostrarReservasResueltas",
                        configuracionGrid: {
                            filas: reservas,
                            almacen: constructorAlmacen,
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[contenedor=reservasEncontradas]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridBuscadorReservas",
                            mascaraURL: {
                                mascara: "/administracion/reservas/reserva:",
                                parametro: "reservaUID"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })

                    const titulo = ""
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "navegacionZonaAdministracion",
                        funcionPersonalizada: "administracion.reservas.buscador.mostrarReservasResueltas",
                        args: transaccion
                    }

                    // Aplica data
                    if (origen === "url" || origen === "botonMostrarReservas") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }

                    this.aplicadaDataBuscadorUI({
                        tipoConsulta: tipoConsulta,
                        termino: termino,
                        fechaEntrada: fechaEntrada,
                        fechaSalida: fechaSalida,
                        tipoCoincidencia: tipoCoincidencia

                    })
                },
                verReservasHoy: () => {
                    const instanciaUID = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")

                    const espacioReservas = document.querySelector("[contenedor=reservasEncontradas]")
                    const buscadorUI = document.querySelector("[componente=navegacionZonaAdministracion]")
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    document.querySelector("[gridUID=gridReservas]")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[contenedor=filtrosOrden]")?.remove()
                    espacioReservas.innerHTML = null
                    casaVitini.administracion.reservas.buscador.limpiarFormularioBusqueda()
                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.innerText = "Buscando..."
                    buscadorUI.parentNode.insertBefore(estadoBusquedaUI, buscadorUI.nextSibling);

                    const peticion = {
                        pagina: 1,
                        tipoConsulta: "hoy",
                        origen: "url",
                        instanciaUID: instanciaUID,
                        tipoCoincidencia: "porFechaEntrada"
                    }
                    casaVitini.administracion.reservas.buscador.mostrarReservasResueltas(peticion)
                },
                mostrarReservasPorRango: () => {
                    const fechaEntrada = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                    const fechaSalida = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")
                    const buscadorUI = document.querySelector("[componente=navegacionZonaAdministracion]")

                    const tipoRango = document.querySelector("[estadoSelecion=activado]")?.getAttribute("selectorRango")
                    document.querySelector("[gridUID=gridReservas]")?.remove()
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[contenedor=filtrosOrden]")?.remove()

                    const espacioReservas = document.querySelector("[contenedor=reservasEncontradas]")
                    espacioReservas.innerHTML = null

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.innerText = "Buscando..."
                    buscadorUI.parentNode.insertBefore(estadoBusquedaUI, buscadorUI.nextSibling);

                    const selectorCampoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
                    selectorCampoBuscador.value = null
                    const peticion = {
                        pagina: 1,
                        tipoConsulta: "rango",
                        tipoCoincidencia: tipoRango,
                        fechaEntrada: fechaEntrada,
                        fechaSalida: fechaSalida,
                        origen: "botonMostrarReservas",
                    }

                    casaVitini.administracion.reservas.buscador.mostrarReservasResueltas(peticion)
                },
                buscadorReservas: (reserva) => {

                    const espacioReservas = document.querySelector("[contenedor=reservasEncontradas]")
                    const buscadorUI = document.querySelector("[componente=navegacionZonaAdministracion]")
                    clearTimeout(casaVitini.componentes.temporizador);
                    document.querySelector("[componente=resultadosSinReservas]")?.remove()
                    document.querySelector("[gridUID=gridReservas")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    espacioReservas.innerHTML = null

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.innerText = "Buscando..."
                    buscadorUI.parentNode.insertBefore(estadoBusquedaUI, buscadorUI.nextSibling);

                    casaVitini.administracion.reservas.buscador.limpiarFormularioBusqueda()
                    const terminoBusqueda = reserva.target.value
                    if (terminoBusqueda.length === 0) {
                        clearTimeout(casaVitini.componentes.temporizador);
                        document.querySelector("[gridUID=gridReservas")?.remove()
                        document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        const vistaActual = document.querySelector("[componente=uiNavegacion]").getAttribute("vistaActual")
                        const resetUrl = "/administracion/reservas"
                        const titulo = "casavitini"
                        const estado = {
                            zona: vistaActual,
                            estadoInternoZona: "estado",
                            tipoCambio: "total"
                        }
                        window.history.replaceState(estado, titulo, resetUrl);
                        return
                    }
                    casaVitini.componentes.temporizador = setTimeout(() => {
                        const peticion = {
                            pagina: Number("1"),
                            tipoConsulta: "porTerminos",
                            termino: terminoBusqueda,
                            origen: "botonMostrarReservas",
                        }
                        casaVitini.administracion.reservas.buscador.mostrarReservasResueltas(peticion);
                    }, 1500);
                },
                limpiarFormularioBusqueda: () => {
                    const selectorCuadradoFechaEntrada = document.querySelector("[calendario=entrada]")
                    const selectorFechaEntradaUI = selectorCuadradoFechaEntrada.querySelector("[fechaUI=fechaInicio]")
                    const selectorCuadradoFechaSalida = document.querySelector("[calendario=salida]")
                    const selectorFechaSalidaUI = selectorCuadradoFechaSalida.querySelector("[fechaUI=fechaFin]")
                    selectorCuadradoFechaEntrada.removeAttribute("memoriaVolatil")
                    selectorFechaEntradaUI.innerText = "(Seleccionar)"
                    selectorCuadradoFechaSalida.removeAttribute("memoriaVolatil")
                    selectorFechaSalidaUI.innerText = "(Seleccionar)"
                    const selectorRangos = document.querySelectorAll(`[selectorRango]`)
                    selectorRangos.forEach((selectorRango) => {
                        selectorRango.removeAttribute("style")
                    })
                },
                aplicadaDataBuscadorUI: (data) => {

                    const campoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
                    const selectorRangos = document.querySelectorAll(`[selectorRango]`)

                    const selectorCuadradoFechaEntrada = document.querySelector("[calendario=entrada]")
                    const selectorFechaEntradaUI = selectorCuadradoFechaEntrada?.querySelector("[fechaUI=fechaInicio]")
                    const selectorCuadradoFechaSalida = document.querySelector("[calendario=salida]")
                    const selectorFechaSalidaUI = selectorCuadradoFechaSalida?.querySelector("[fechaUI=fechaFin]")

                    const tipoConsulta = data.tipoConsulta

                    if (tipoConsulta === "porTerminos") {
                        const selectorRangos = document.querySelectorAll(`[selectorRango]`)
                        selectorRangos.forEach((selectorRango) => {
                            selectorRango.removeAttribute("style")
                        })
                        selectorCuadradoFechaEntrada.removeAttribute("memoriaVolatil")
                        selectorFechaEntradaUI.innerText = "Seleccionar"
                        selectorCuadradoFechaSalida.removeAttribute("memoriaVolatil")
                        selectorFechaSalidaUI.innerText = "Seleccionar"

                        const termino = data.termino
                        campoBuscador.value = termino
                    } else if (tipoConsulta === "rango") {

                        const fechaEntrada = data.fechaEntrada
                        const fechaSalida = data.fechaSalida
                        const tipoCoincidencia = data.tipoCoincidencia

                        campoBuscador.value = ""
                        selectorRangos.forEach((selectorRango) => {
                            selectorRango.removeAttribute("style")
                        })


                        if (fechaEntrada) {


                            selectorCuadradoFechaEntrada.setAttribute("memoriaVolatil", fechaEntrada)
                            selectorFechaEntradaUI.innerText = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaEntrada)
                        }
                        if (fechaSalida) {
                            selectorCuadradoFechaSalida.setAttribute("memoriaVolatil", fechaSalida)
                            selectorFechaSalidaUI.innerText = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaSalida)
                        }

                        // Aplicacion 
                        const selectorRango = document.querySelector(`[selectorRango=${tipoCoincidencia}]`)
                        selectorRango.style.background = "rgb(8, 0, 255)"
                        selectorRango.style.color = "white"
                        selectorRango.setAttribute("estadoSelecion", "activado")

                    }

                }
            },
            nuevaReserva: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/reservas/nueva")
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()
                    casaVitini.administracion.reservas.nuevaReserva.controladorOfertasInicial()
                    const selectorRangoUI = main.querySelector("[contenedor=selectorRango]")
                    selectorRangoUI.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                    const selectorBotonEntrada = document.querySelector("[calendario=entrada]")
                    selectorBotonEntrada.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_entrada_perfilSimple",
                            contenedorOrigenIDV: "[calendario=entrada]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "inicioRango",
                            metodoSelectorDia: null,
                            seleccionableDiaLimite: "no"
                        })
                    })

                    const selectorBotonSalida = document.querySelector("[calendario=salida]")
                    selectorBotonSalida.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_salida_perfilSimple",
                            contenedorOrigenIDV: "[calendario=salida]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "finalRango",
                            metodoSelectorDia: null,
                            seleccionableDiaLimite: "no"
                        })
                    })

                    document.querySelector("[componente=botonBuscarAlojamiento]").addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.buscarAlojamiento)
                    document.querySelector("[componente=botonConfirmarReserva]").addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.confirmarReservaNueva)
                },
                constructorCalendario: async (boton) => {
                    const botonID = boton.target.closest("[calendario]").getAttribute("componente")
                    let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const alturaDinamicaArriba = casaVitini.utilidades.observador.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton.target.closest("[componente]"))
                    const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
                    const calendario = document.querySelector("[contenedor=calendario]")
                    if (botonID === "fechaEntrada") {
                        if (calendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)

                        }
                        if (calendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            //
                        }
                        let resolucionCalendario
                        if (fechaEntradaSelecionda) {
                            const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                            let mesEntradaSeleccionado = fechaEntradaSelecionda_array[1]
                            let anoEntradaSeleccionado = fechaEntradaSelecionda_array[2]
                            resolucionCalendario = {
                                tipo: "personalizado",
                                //
                                mes: Number(mesEntradaSeleccionado),
                                ano: Number(anoEntradaSeleccionado)
                            }
                        } else {
                            resolucionCalendario = {
                                tipo: "actual",
                                // comando: "construyeObjeto"
                            }
                        }
                        const metadatosCalendario = {
                            tipoFecha: "entrada",
                            almacenamientoCalendarioID: "administracionCalendario",
                            perfilMes: "calendario_entrada_perfilSimple",
                            calendarioIO: "entrada",
                            mensajeInfo: "Selecciona la fecha de entrada para esta reserva nueva",
                            alturaDinamica: alturaDinamicaArriba,
                            instanciaUID: instanciaUID,
                            metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                        }
                        casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(metadatosCalendario)
                        document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolucionCalendario)
                        calendarioResuelto.instanciaUID = instanciaUID
                        await casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                    }
                    if (botonID === "fechaSalida") {
                        if (calendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)

                        }
                        if (calendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            //
                        }
                        let resolucionCalendario
                        if (fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                            const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                            let mesEntradaSeleccionado = fechaEntradaSelecionda_array[1]
                            let anoEntradaSeleccionado = fechaEntradaSelecionda_array[2]
                            resolucionCalendario = {
                                tipo: "personalizado",
                                //  
                                mes: Number(mesEntradaSeleccionado),
                                ano: Number(anoEntradaSeleccionado)
                            }
                        }
                        if (fechaSalidaSelecionda) {
                            const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                            let mesSalidaSeleccionado = fechaSalidaSelecionda_array[1]
                            let anoSalidaSeleccionado = fechaSalidaSelecionda_array[2]
                            resolucionCalendario = {
                                tipo: "personalizado",

                                mes: Number(mesSalidaSeleccionado),
                                ano: Number(anoSalidaSeleccionado)
                            }
                        }
                        if (!fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                            resolucionCalendario = {
                                tipo: "actual",
                                comando: "construyeObjeto"
                            }
                        }
                        let metadatosCalendario = {
                            tipoFecha: "salida",
                            almacenamientoCalendarioID: "administracionCalendario",
                            perfilMes: "calendario_salida_perfilSimple",
                            calendarioIO: "salida",
                            mensajeInfo: "Selecciona la fecha de salida para esta reserva nueva",
                            alturaDinamica: alturaDinamicaArriba,
                            instanciaUID: instanciaUID,
                            metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                        }
                        casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(metadatosCalendario)
                        document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolucionCalendario)
                        calendarioResuelto.instanciaUID = instanciaUID
                        casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                    }
                },
                seleccionarDia: (dia) => {
                    let diaSeleccionadoComoElemento = dia.target;
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    let diaSeleccionado = dia.target.getAttribute("dia")
                    diaSeleccionado = diaSeleccionado.padStart(2, "0")
                    diaSeleccionado = Number(diaSeleccionado)
                    let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                    anoSeleccionado = anoSeleccionado.padStart(4, "0")
                    anoSeleccionado = Number(anoSeleccionado)
                    let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                    mesSeleccionado = mesSeleccionado.padStart(2, "0")
                    mesSeleccionado = Number(mesSeleccionado)
                    const fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    let selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                    selectorDias.forEach((dia) => {
                        //dia.classList.remove("calendarioDiaDisponible")
                        dia.classList.remove("calendarioDiaReserva")
                        dia.classList.remove("calendarioDiaSeleccionado")
                    })
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        if (calendarioIO === "entrada") {
                            document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                            document.querySelector("[dataReserva=fechaEntrada]").innerText = "Seleccionar fecha de entrada"
                        }
                        if (calendarioIO === "salida") {
                            document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                            document.querySelector("[dataReserva=fechaSalida]").innerText = "Seleccionar fecha de salida"
                        }
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                    }
                    let diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    diasDisponibles.forEach(diaDisponible => {
                        diaDisponible.removeAttribute("estadoDia")
                        diaDisponible.style.background = ""
                        diaDisponible.style.color = ""
                    })
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                    let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    if (fechaEntradaSelecionda) {
                        const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                        diaSeleccionadoEntrada = fechaEntradaSelecionda_array[0]
                        diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                        mesSeleccionadoEntrada = fechaEntradaSelecionda_array[1]
                        mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                        anoSeleccionadoEntrada = fechaEntradaSelecionda_array[2]
                        anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                        datosFechaEntradaSeleccionada = "existen"
                    }
                    let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    if (fechaSalidaSelecionda) {
                        const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                        diaSeleccionadoSalida = fechaSalidaSelecionda_array[0]
                        diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                        mesSeleccionadoSalida = fechaSalidaSelecionda_array[1]
                        mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                        anoSeleccionadoSalida = fechaSalidaSelecionda_array[2]
                        anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                        datosFechaSalidaSeleccionada = "existen"
                    }
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("[dataReserva=fechaEntrada]").innerText = fechaSeleccionadaUI
                        if (fechaSalidaSelecionda) {
                            if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {
                                        // dia.classList.remove("calendarioDiaDisponible")
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEachEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("[dataReserva=fechaSalida]").innerText = fechaSeleccionadaUI
                        if (fechaEntradaSelecionda) {
                            if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                    }
                },
                buscarAlojamiento: async () => {
                    try {
                        const fechaEntrada = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                        const fechaSalida = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")

                        document.querySelectorAll("[componente=advertenciaIntegrada]").forEach((advertenciaRenderizada) => {
                            advertenciaRenderizada.remove()
                        })

                        const selectorContenedorBoton = document.querySelector("[componente=espacioBotonConfirmarReserva]")
                        selectorContenedorBoton.classList.add("elementoOcultoInicialmente")
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const selectorBloqueEspacioApartamentos = document.querySelector("[componente=espacioApartamento]")
                        selectorBloqueEspacioApartamentos.classList.remove("elementoOcultoInicialmente")
                        selectorBloqueEspacioApartamentos.setAttribute("instanciaUID", instanciaUID)
                        selectorBloqueEspacioApartamentos.innerHTML = null
                        const advertenciaInmersivaUI = document.createElement("div")
                        advertenciaInmersivaUI.setAttribute("class", "advertenciaIntegrada")
                        advertenciaInmersivaUI.setAttribute("componente", "advertenciaIntegrada")
                        const marcoElastico = document.createElement("div")
                        marcoElastico.classList.add("marcoElasticoError")
                        const spinnerContainer = document.createElement("div");
                        spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                        spinnerContainer.classList.add("lds", "spinner");
                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement("div");
                            spinnerContainer.appendChild(div);
                        }

                        marcoElastico.appendChild(spinnerContainer)
                        const info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.innerText = "Buscando alojamiento..."
                        marcoElastico.appendChild(info)
                        const boton = document.createElement("div")
                        boton.setAttribute("class", "errorBoton")
                        boton.innerText = "Cancelar"
                        boton.addEventListener("click", (e) => {
                            selectorBloqueEspacioApartamentos.classList.add("elementoOcultoInicialmente")
                            selectorBloqueEspacioApartamentos.removeAttribute("instanciaUID")
                            e.target.closest("[componente=advertenciaIntegrada]").remove()
                        })
                        marcoElastico.appendChild(boton)
                        advertenciaInmersivaUI.appendChild(marcoElastico)
                        selectorBloqueEspacioApartamentos.appendChild(advertenciaInmersivaUI)

                        const transaccion = {
                            zona: "administracion/reservas/nuevaReserva/apartamentosDisponiblesAdministracion",
                            fechaEntrada: fechaEntrada,
                            fechaSalida: fechaSalida
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            instanciaRenderizada.querySelector("[componente=advertenciaIntegrada]").remove()
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const apartamenosDisponiblesArray = respuestaServidor?.ok.apartamentosDisponibles
                            const configuracionesAlojamiento = respuestaServidor.configuracionesAlojamiento

                            if (apartamenosDisponiblesArray.length === 0) {
                                const infoNoDisponibilidad = document.createElement("div")
                                infoNoDisponibilidad.classList.add("administracion_reservas_crearReserva_infoSinAlojamiento")
                                infoNoDisponibilidad.innerText = "No hay ning√∫n alojamiento disponible para las fechas seleccionadas.Eso es debido a reservas donde est√°n estos apartamentos, bloqueos en estas fechas o configuraciones no disponibles.Para tener una visi√≥n sobre esta situaci√≥n, puede ir al calendario, donde podr√° ver lo que ocurre.Para ver todos los eventos, selecciona la capa Global del calendario.Inicialmente, el calendario tiene esta capa predeterminadamente seleccionada."
                                document.querySelector(`[instanciaUID="${instanciaUID}"]`).innerHTML = null
                                document.querySelector(`[instanciaUID="${instanciaUID}"]`).appendChild(infoNoDisponibilidad)
                                return
                            }
                            const apartamentosDisponiblesUI = document.createElement("apartamentosDisponibles")
                            apartamentosDisponiblesUI.classList.add("espacioApartamentosDipsoniblesCrearReserva")
                            apartamentosDisponiblesUI.setAttribute("componente", "apartamentosDisponibles")
                            for (const [apartamentoIDV, configuracion] of Object.entries(configuracionesAlojamiento)) {
                                const apartamentoUI = configuracion.apartamentoUI
                                const habitaciones = configuracion.habitaciones
                                const bloqueApartamentoUI = document.createElement("div")
                                bloqueApartamentoUI.classList.add("bloqueApartamentoUI")
                                bloqueApartamentoUI.setAttribute("apartamentoIDV", apartamentoIDV)
                                const tituloApartamentoUI = document.createElement("p")
                                tituloApartamentoUI.classList.add("tituloApartamentoUI")
                                tituloApartamentoUI.innerText = apartamentoUI
                                bloqueApartamentoUI.appendChild(tituloApartamentoUI)
                                const bloqueHabiaciones = document.createElement("div")
                                bloqueHabiaciones.classList.add("bloqueHabiaciones")
                                bloqueApartamentoUI.appendChild(bloqueHabiaciones)
                                for (const [habitacionIDV, detallesHabitacion] of Object.entries(habitaciones)) {
                                    const tituloHabitacion = document.createElement("div")
                                    tituloHabitacion.classList.add("tituloHabitacion")
                                    tituloHabitacion.innerText = detallesHabitacion.habitacionUI
                                    bloqueHabiaciones.appendChild(tituloHabitacion)
                                }
                                const botonSeleccionarApartamento = document.createElement("div")
                                botonSeleccionarApartamento.classList.add("botonSeleccionarApartamento")
                                botonSeleccionarApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                botonSeleccionarApartamento.innerText = "Seleccionar " + apartamentoUI
                                botonSeleccionarApartamento.addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.seleccionarApartamento)
                                bloqueApartamentoUI.appendChild(botonSeleccionarApartamento)
                                apartamentosDisponiblesUI.appendChild(bloqueApartamentoUI)
                            }
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).innerHTML = null
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).appendChild(apartamentosDisponiblesUI)

                        }
                    } catch (errorCapturado) {
                        throw errorCapturado
                    }
                },
                controladorOfertasInicial: () => {

                    const controlEstados = (e) => {
                        const opcion = document.querySelectorAll("[configuracionOfertaIDV]")
                        const sel = e.target
                        const estadoActual = sel.getAttribute("estado")

                        opcion.forEach((o) => {
                            o.removeAttribute("style")
                            o.removeAttribute("estado")
                        })
                        if (estadoActual !== "s") {
                            sel.setAttribute("estado", "s")
                            sel.style.background = "blue"
                            sel.style.color = "white"
                        }

                    }
                    const selectorOpcion = document.querySelectorAll("[configuracionOfertaIDV]")
                    selectorOpcion.forEach((opcion) => {
                        opcion.addEventListener("click", controlEstados)
                    })


                },
                seleccionarApartamento: (apartamento) => {
                    const selectorEspacioBotonConfimrar = document.querySelector("[componente=espacioBotonConfirmarReserva]")
                    if (apartamento.target.getAttribute("estado")) {
                        apartamento.target.removeAttribute("style")
                        apartamento.target.removeAttribute("estado")
                        const contadorApartamentosSeleccionados = document.querySelectorAll("[estado=seleccionado]")
                        if (contadorApartamentosSeleccionados.length > 0) {
                            selectorEspacioBotonConfimrar.classList.remove("elementoOcultoInicialmente")
                        } else {
                            selectorEspacioBotonConfimrar.classList.add("elementoOcultoInicialmente")
                        }
                        return
                    }
                    apartamento.target.style.background = "blue"
                    apartamento.target.style.color = "white"
                    apartamento.target.setAttribute("estado", "seleccionado")
                    const contadorApartamentosSeleccionados = document.querySelectorAll("[estado=seleccionado]")
                    if (contadorApartamentosSeleccionados.length > 0) {
                        selectorEspacioBotonConfimrar.classList.remove("elementoOcultoInicialmente")
                    } else {
                        selectorEspacioBotonConfimrar.classList.add("elementoOcultoInicialmente")
                    }
                },
                confirmarReservaNueva: async () => {
                    const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    const estadoInicialIDV = document.querySelector("[selector=estadoInicialReserva]").value
                    const estadoIniciarOfertasIDV = document.querySelector("[configuracionOfertaIDV][estado=s]").getAttribute("configuracionOfertaIDV")


                    const apartamentos = []
                    document.querySelectorAll("[estado=seleccionado]").forEach((apartamentoSeleccionado) => {
                        const apartamentoIDV = apartamentoSeleccionado.getAttribute("apartamentoIDV")
                        apartamentos.push(apartamentoIDV)
                    })
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const metadatosPantallaCarga = {
                        mensaje: "Creando reserva...",
                        instanciaUID,
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                    const transaccion = {
                        zona: "administracion/reservas/nuevaReserva/crearReservaSimpleAdministrativa",
                        fechaEntrada: fechaEntrada,
                        fechaSalida: fechaSalida,
                        estadoInicialIDV: estadoInicialIDV,
                        estadoIniciarOfertasIDV: estadoIniciarOfertasIDV,
                        apartamentos: apartamentos
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (pantallaDeCargaRenderizada) {
                        if (respuestaServidor?.error) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vista = `/administracion/reservas/reserva:${respuestaServidor?.reservaUID}`
                            const navegacion = {
                                vista: vista,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                }
            },
            pendientes_de_revision: {
                arranque: async () => {
                    const sectionRenderizada = document.querySelector("main[instanciaUID]")
                    const instanciaUID = sectionRenderizada.getAttribute("instanciaUID")
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/reservas/pendientesDeRevision")
                    const espacioReservasPendientes = document.querySelector(`main[instanciaUID="${instanciaUID}"]`).querySelector("[componente=espacioReservasPendientesDeRevision]")
                    const info = document.createElement("div")
                    info.classList.add("info")
                    info.innerText = "No hay reservas pendientes de revisi√≥n"
                    const transaccion = {
                        zona: "administracion/reservas/pendientes_de_revision/obtener_reservas"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        if (espacioReservasPendientes) {
                            const reservasPendientes = respuestaServidor.reservas
                            if (reservasPendientes.length === 0) {
                                casaVitini.administracion.reservas.pendientes_de_revision.componentes.infoSinReservas(instanciaUID)
                            } else {
                                for (const rP of reservasPendientes) {
                                    const global = rP.global
                                    const contenedorFinanciero = rP.contenedorFinanciero
                                    const contenedorTitular = rP.titular

                                    const reservaUID = global.reservaUID
                                    const fechaEntrada = global.fechaEntrada
                                    const fechaSalida = global.fechaSalida
                                    const fechaCreacion_ISO = global.fechaCreacion
                                    const totalConImpuestos = contenedorFinanciero.desgloseFinanciero.global.totales.totalFinal

                                    const nombreTitular = contenedorTitular.nombreTitular
                                    const pasaporteTitular = contenedorTitular.pasaporteTitular
                                    const tipoTitularIDV = contenedorTitular.tipoTitularIDV

                                    const contenedorReserva = document.createElement("div")
                                    contenedorReserva.classList.add("contenedorReserva")
                                    contenedorReserva.setAttribute("reservaUID", reservaUID)
                                    const contenedorInformacion = document.createElement("div")
                                    contenedorInformacion.classList.add("contenedorInformacion")
                                    const contenedorDatos = document.createElement("div")
                                    contenedorDatos.classList.add("contenedorDatos")
                                    const tituloReserva = document.createElement("p")
                                    tituloReserva.classList.add("dato")
                                    tituloReserva.innerText = "Reserva:"
                                    contenedorDatos.appendChild(tituloReserva)
                                    const numeroReserva = document.createElement("p")
                                    numeroReserva.classList.add("dato")
                                    numeroReserva.classList.add("negrita")
                                    numeroReserva.innerText = reservaUID
                                    contenedorDatos.appendChild(numeroReserva)
                                    const tituloFechaReserva = document.createElement("p")
                                    tituloFechaReserva.classList.add("dato")
                                    tituloFechaReserva.innerText = "Fecha de realizaci√≥n UTC:"
                                    contenedorDatos.appendChild(tituloFechaReserva)
                                    const fechaReserva = document.createElement("p")
                                    fechaReserva.classList.add("dato")
                                    fechaReserva.classList.add("negrita")
                                    fechaReserva.innerText = fechaCreacion_ISO
                                    contenedorDatos.appendChild(fechaReserva)
                                    const tituloTotalReserva = document.createElement("p")
                                    tituloTotalReserva.classList.add("dato")
                                    tituloTotalReserva.innerText = "Total:"
                                    contenedorDatos.appendChild(tituloTotalReserva)
                                    const totalReserva = document.createElement("p")
                                    totalReserva.classList.add("negrita")
                                    totalReserva.classList.add("dato")
                                    totalReserva.innerText = totalConImpuestos
                                    contenedorDatos.appendChild(totalReserva)
                                    contenedorInformacion.appendChild(contenedorDatos)
                                    const contenedorFechas = document.createElement("div")
                                    contenedorFechas.classList.add("contenedorFechas")
                                    const contenedorFechaEntrada = document.createElement("div")
                                    contenedorFechaEntrada.classList.add("contenedorFechaEntrada")
                                    const tituloFechaEntrada = document.createElement("div")
                                    tituloFechaEntrada.classList.add("tituloFecha")
                                    tituloFechaEntrada.innerText = "Fecha de entrada"
                                    contenedorFechaEntrada.appendChild(tituloFechaEntrada)
                                    const fechaEntrada_div = document.createElement("div")
                                    fechaEntrada_div.classList.add("fechaEntrada")
                                    fechaEntrada_div.innerText = fechaEntrada
                                    contenedorFechaEntrada.appendChild(fechaEntrada_div)
                                    contenedorFechas.appendChild(contenedorFechaEntrada)
                                    const contenedorFechaSalida = document.createElement("div")
                                    contenedorFechaSalida.classList.add("contenedorFechaSalida")
                                    const tituloFechaSalida = document.createElement("div")
                                    tituloFechaSalida.classList.add("tituloFecha")
                                    tituloFechaSalida.innerText = "Fecha de salida"
                                    contenedorFechaSalida.appendChild(tituloFechaSalida)
                                    const fechaSalida_div = document.createElement("div")
                                    fechaSalida_div.classList.add("fechaSalida")
                                    fechaSalida_div.innerText = fechaSalida
                                    contenedorFechaSalida.appendChild(fechaSalida_div)
                                    contenedorFechas.appendChild(contenedorFechaSalida)
                                    contenedorInformacion.appendChild(contenedorFechas)


                                    const contenedorTitularUI = document.createElement("div")
                                    contenedorTitularUI.classList.add(
                                        "flexVertical",
                                        "padding14"
                                    )
                                    contenedorInformacion.appendChild(contenedorTitularUI)

                                    if (Object.keys(contenedorTitular).length === 0) {
                                        const info = document.createElement("div")
                                        info.innerText = "Reserva sin titular asignado"
                                        contenedorTitularUI.appendChild(info)
                                    } else {
                                        const nombreTitularUI = document.createElement("div")
                                        nombreTitularUI.classList.add(
                                            "negrita"
                                        )
                                        nombreTitularUI.innerText = nombreTitular
                                        contenedorTitularUI.appendChild(nombreTitularUI)

                                        const pasaporteTitularUI = document.createElement("div")
                                        pasaporteTitularUI.innerText = pasaporteTitular
                                        contenedorTitularUI.appendChild(pasaporteTitularUI)

                                        if (tipoTitularIDV === "titularPool") {
                                            const tipoTitularUI = document.createElement("div")
                                            tipoTitularUI.innerText = ">>> Pendiente de verificaci√≥n documental"
                                            contenedorTitularUI.appendChild(tipoTitularUI)

                                        }
                                    }



                                    contenedorReserva.appendChild(contenedorInformacion)
                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add("contenedorBotones")
                                    const botonInsertarPago = document.createElement("a")
                                    botonInsertarPago.classList.add("boton")
                                    botonInsertarPago.innerText = "Ir a la reserva"
                                    botonInsertarPago.setAttribute("href", `/administracion/reservas/reserva:${reservaUID}`)
                                    botonInsertarPago.setAttribute("vista", `/administracion/reservas/reserva:${reservaUID}`)
                                    botonInsertarPago.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contenedorBotones.appendChild(botonInsertarPago)
                                    contenedorReserva.appendChild(contenedorBotones)
                                    espacioReservasPendientes.appendChild(contenedorReserva)
                                }
                            }
                        }
                    }
                },
                componentes: {
                    infoSinReservas: (instanciaUID) => {
                        const espacioReservasPendientes = document.querySelector(`main[instanciaUID="${instanciaUID}"]`).querySelector("[componente=espacioReservasPendientesDeRevision]")
                        if (espacioReservasPendientes) {
                            const info = document.createElement("div")
                            info.classList.add("info")
                            info.innerText = "No hay reservas pendientes de revisi√≥n, actualiza la p√°gina para comprobar de nuevo."
                            espacioReservasPendientes.appendChild(info)
                        }
                    }
                }
            }
        },
        administracion: {
            arranque: () => {

                const html = document.querySelector("html")
                html.style.height = "100%"
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion")

                const menu = main.querySelector("[contenedor=menu]")
                menu.style.flex = "1"
                const botones = document.querySelectorAll("[componente=botonAdministracion]")
                botones.forEach((boton) => {
                    boton.addEventListener("click", (boton) => {
                        boton.preventDefault()
                        const vista = boton.target.getAttribute("vista")
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    })
                })
            },
        },
        situacion: {
            arranque: async function () {
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/situacion")

                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const parametros = granuladoURL.parametros
                const fechaHoyTZ = await this.portada.obtenerFecha()
                const dia = fechaHoyTZ.dia
                const mes = fechaHoyTZ.mes
                const ano = fechaHoyTZ.ano
                const hora = fechaHoyTZ.hora
                const minuto = String(fechaHoyTZ.minuto).padStart(2, "0")
                const fechaUI = `Hoy son las ${hora}:${minuto}, ${dia} del ${mes} del ${ano}`

                const contenedorFecha = document.createElement("div")
                contenedorFecha.classList.add("administracion_situacion_portada_contenedorFecha")
                contenedorFecha.innerText = fechaUI
                if (Object.keys(parametros).length === 0) {
                    return this.portada.arranque()
                } else if (parametros.alojamiento) {
                    const apartamentoIDV = parametros.alojamiento
                    return this.detallesApartamento.arranque(apartamentoIDV)
                }
            },
            portada: {
                arranque: async function () {

                    const marcoElastico = document.querySelector("[componente=marcoElastico]")

                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                    marcoElastico.appendChild(spinner)
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/situacion/obtenerSituacion"
                    })
                    const instanciaRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    spinner.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        const titulo = document.querySelector(".titulo")
                        titulo.innerText = respuestaServidor.error

                    }
                    if (respuestaServidor?.ok) {
                        const situacion = respuestaServidor?.ok

                        const horaEntrada = respuestaServidor.horaEntrada
                        const horaSalida = respuestaServidor.horaSalida
                        const espacioSituacion = document.createElement("div")
                        espacioSituacion.classList.add("espacioSituacion")
                        espacioSituacion.setAttribute("componente", "espacioSituacion")
                        for (const [apartamentoIDV, detallesApartamento] of Object.entries(situacion)) {
                            const reservas = detallesApartamento.reservas
                            detallesApartamento.apartamentoIDV = apartamentoIDV
                            const calendariosSincronizados = detallesApartamento?.calendariosSincronizados || {}

                            const apartamentoUI = casaVitini.administracion.situacion.componentesUI.tarjetaApartamentoUI(detallesApartamento)
                            for (const detallesReservas of reservas) {
                                detallesReservas.horaEntrada = horaEntrada
                                detallesReservas.horaSalida = horaSalida
                                const contenedorReserva = casaVitini.administracion.situacion.componentesUI.tarjetaReservaUI(detallesReservas)
                                apartamentoUI.appendChild(contenedorReserva)
                            }
                            if (calendariosSincronizados.airbnb) {
                                const eventosAirbnb = calendariosSincronizados.airbnb.eventos
                                for (const detallesDelEvento of eventosAirbnb) {
                                    const contenedorEvento = casaVitini.administracion.situacion.componentesUI.tarjetaEventoUI(detallesDelEvento)
                                    apartamentoUI.appendChild(contenedorEvento)
                                }
                            }
                            espacioSituacion.appendChild(apartamentoUI)
                        }
                        marcoElastico.appendChild(espacioSituacion)
                    }
                },
                obtenerFecha: async () => {
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "componentes/fechaLocal"
                    })
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor.fechaISO) {
                        return respuestaServidor
                    }
                },
            },
            detallesApartamento: {
                arranque: async function (apartamentoIDV) {

                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                    marcoElastico.appendChild(spinner)

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/situacion/detallesSituacionApartamento",
                        apartamentoIDV: apartamentoIDV
                    })
                    const instanciaRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    spinner.remove()
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe el identificador del apartamento",
                            descripcion: "Est√°s buscando la situaci√≥n de un apartamento que no existe o existe y no tiene una configuraci√≥n disponible."
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }
                    if (respuestaServidor?.ok) {
                        const detallesApartamento = respuestaServidor?.ok
                        const apartamentoIDV = detallesApartamento.apartamentoIDV
                        const reservas = detallesApartamento.reservas
                        const horaEntrada = detallesApartamento.horaEntrada
                        const horaSalida = detallesApartamento.horaSalida
                        detallesApartamento.apartamentoIDV = apartamentoIDV
                        const calendariosSincronizados = detallesApartamento?.calendariosSincronizados || {}
                        const apartamentoUI = casaVitini.administracion.situacion.componentesUI.tarjetaApartamentoUI(detallesApartamento)
                        const selectorTituloApartamentoUI = apartamentoUI.querySelector("[componente=titulo]")
                        selectorTituloApartamentoUI.classList.remove("comportamientoBoton")
                        selectorTituloApartamentoUI.removeEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        selectorTituloApartamentoUI.removeAttribute("vista")
                        selectorTituloApartamentoUI.removeAttribute("href")

                        marcoElastico.appendChild(apartamentoUI)

                        const espacioEventosAirbnb = document.createElement("div")
                        espacioEventosAirbnb.classList.add("espacioEventosAirbnb")
                        espacioEventosAirbnb.setAttribute("componente", "espacioEventosAirbnb")

                        for (const [reservaUID, detallesReservas] of Object.entries(reservas)) {

                            const pernoctantes = detallesReservas.pernoctantes
                            const habitaciones = detallesReservas.habitaciones
                            detallesReservas.reservaUID = reservaUID
                            detallesReservas.horaEntrada = horaEntrada
                            detallesReservas.horaSalida = horaSalida
                            const contenedorReserva = casaVitini.administracion.situacion.componentesUI.tarjetaReservaUI(detallesReservas)
                            marcoElastico.appendChild(contenedorReserva)

                            if (habitaciones.length > 0) {
                                const espacioHabitaciones = document.createElement("div")
                                espacioHabitaciones.classList.add(
                                    "gridHorizotnal2C",
                                    "gap6"
                                )
                                for (const detallesHabitacion of habitaciones) {
                                    const habitacionUI = detallesHabitacion.habitacionUI
                                    const habitacionUID = detallesHabitacion.componenteUID
                                    const habitacionBloque = casaVitini.administracion.situacion.componentesUI.tarjetaHabitacionUI({
                                        habitacionUI,
                                        habitacionUID
                                    })
                                    espacioHabitaciones.appendChild(habitacionBloque)
                                }
                                contenedorReserva.appendChild(espacioHabitaciones)
                            }
                            if (pernoctantes.length > 0) {
                                for (const pernoctante of pernoctantes) {

                                    const habitacionUID = pernoctante.habitacionUID
                                    const habitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                    if (!habitacionDestino) {
                                        continue
                                    }
                                    const pernoctanteUI = casaVitini.administracion.situacion.componentesUI.tarjetaPernotanteUI(pernoctante)
                                    habitacionDestino.appendChild(pernoctanteUI)
                                }
                            }
                        }
                        const eventosAirbnb = calendariosSincronizados.airbnb.eventos
                        for (const detallesDelEvento of eventosAirbnb) {
                            const contenedorEvento = casaVitini.administracion.situacion.componentesUI.tarjetaEventoUI(detallesDelEvento)
                            espacioEventosAirbnb.appendChild(contenedorEvento)
                        }
                        marcoElastico.appendChild(espacioEventosAirbnb)

                    }
                }
            },
            componentesUI: {
                tarjetaApartamentoUI: (data) => {
                    const apartamentoIDV = data.apartamentoIDV
                    const estadoPernoctacion = data.estadoPernoctacion
                    const estadoApartamento = data.estadoApartamento
                    const apartamentoUI = data.apartamentoUI
                    const zonaIDV = data.zonaIDV

                    const dic = {
                        estadoApartamento: {
                            disponible: "Disponible",
                            nodisponible: "No dispobile",

                        },
                        estadoPernoctacion: {
                            ocupado: "Ocupado",
                            libre: "Libre"
                        },
                        zona: {
                            privada: "Privada (Solo administraci√≥n)",
                            global: "Global (Todo)",
                            publica: "P√∫blica (Solo reserva p√∫blica)"
                        }
                    }

                    const apartamentoGUI = document.createElement("div")
                    apartamentoGUI.classList.add(
                        "flexVertical",
                        "padding6",
                        "gap6",
                        "backgroundWhite3",
                        "borderRadius20"
                    )

                    const apartamentoTitulo = document.createElement("a")
                    apartamentoTitulo.setAttribute("componente", "titulo")
                    apartamentoTitulo.classList.add(
                        "flexVertical",
                        "padding",
                        "borderRadius16",
                        "padding14",
                        "comportamientoBoton",
                        "negrita",
                        "ratonDefault"
                    )

                    apartamentoTitulo.innerText = apartamentoUI
                    apartamentoTitulo.setAttribute("vista", `/administracion/situacion/alojamiento:${apartamentoIDV}`)
                    apartamentoTitulo.setAttribute("href", `/administracion/situacion/alojamiento:${apartamentoIDV}`)
                    apartamentoTitulo.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    apartamentoGUI.appendChild(apartamentoTitulo)

                    const contenedorInfoGlobal = document.createElement("div")
                    contenedorInfoGlobal.classList.add(
                        "flexVertical",
                        "gap10",
                        "padding14",
                        "backgroundGrey1",
                        "borderRadius16"
                    )
                    apartamentoGUI.appendChild(contenedorInfoGlobal)

                    const contenedorEstadoPernoctacion = casaVitini.ui.componentes.widgetsUI.contenedorTituloDescripcionSimple({
                        titulo: "Estado pernoctativo",
                        dato: dic.estadoPernoctacion[estadoPernoctacion]
                    })
                    contenedorEstadoPernoctacion.querySelector("[data=dataUI]").style.fontWeight = "bold"
                    contenedorInfoGlobal.appendChild(contenedorEstadoPernoctacion)

                    const contenedorEstadoConfiguracionAlojamiento = casaVitini.ui.componentes.widgetsUI.contenedorTituloDescripcionSimple({
                        titulo: "Estado configurac√≠on de la alojamiento",
                        dato: dic.estadoApartamento[estadoApartamento]
                    })
                    contenedorEstadoConfiguracionAlojamiento.querySelector("[data=dataUI]").style.fontWeight = "bold"

                    contenedorInfoGlobal.appendChild(contenedorEstadoConfiguracionAlojamiento)

                    const contenedorZonaPublicacion = casaVitini.ui.componentes.widgetsUI.contenedorTituloDescripcionSimple({
                        titulo: "Zona de publicaci√≥n",
                        dato: dic.zona[zonaIDV]
                    })
                    contenedorZonaPublicacion.querySelector("[data=dataUI]").style.fontWeight = "bold"
                    contenedorInfoGlobal.appendChild(contenedorZonaPublicacion)
                    return apartamentoGUI
                },
                tarjetaReservaUI: (data) => {
                    const reservaUID = data.reservaUID
                    const diaLimite = data.diaLimite
                    const fechaEntrada = data.fechaEntrada
                    const fechaSalida = data.fechaSalida
                    const porcentajeTranscurrido = data.porcentajeTranscurrido
                    const tiempoRestante = data.tiempoRestante
                    const numeroDiasReserva = data.numeroDiasReserva
                    const horaEntrada = data.horaEntrada
                    const horaSalida = data.horaSalida

                    const contenedorReserva = document.createElement("div")
                    contenedorReserva.classList.add("administracion_situacion_portada_contenedorReserva")
                    let bloqueEntidad = document.createElement("a")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    bloqueEntidad.setAttribute("vista", `/administracion/reservas/reserva:${reservaUID}/zona:alojamiento`)
                    bloqueEntidad.setAttribute("href", `/administracion/reservas/reserva:${reservaUID}/zona:alojamiento`)
                    bloqueEntidad.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                    bloqueEntidad.classList.add("administracion_situacion_portada_contenedorSelecccionable")
                    let tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.innerText = "Reserva"
                    bloqueEntidad.appendChild(tituloEntidad)
                    let apartamentoReserva = document.createElement("a")
                    apartamentoReserva.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    apartamentoReserva.innerText = reservaUID
                    bloqueEntidad.appendChild(apartamentoReserva)
                    contenedorReserva.appendChild(bloqueEntidad)
                    if (diaLimite === "diaDeSalida") {
                        let bloqueEntidad = document.createElement("div")
                        bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                        const aviso = document.createElement("div")
                        aviso.classList.add("administracion_situacion_portada_tituloEntidad")
                        aviso.classList.add("negrita")
                        aviso.innerText = "<<< Dia de salida"
                        bloqueEntidad.appendChild(aviso)
                        const tituloEntidad = document.createElement("div")
                        tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                        tituloEntidad.innerText = "Hoy es el d√≠a final de la reserva y los pernoctantes deben de abandonar el alojamiento antes de las " + horaSalida
                        bloqueEntidad.appendChild(tituloEntidad)
                        const datoEntidad = document.createElement("div")
                        datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                        datoEntidad.innerText = tiempoRestante
                        //bloqueEntidad.appendChild(datoEntidad)
                        contenedorReserva.appendChild(bloqueEntidad)
                    }
                    if (diaLimite === "diaDeEntrada") {
                        let bloqueEntidad = document.createElement("div")
                        bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                        const aviso = document.createElement("div")
                        aviso.classList.add("administracion_situacion_portada_tituloEntidad")
                        aviso.classList.add("negrita")
                        aviso.innerText = ">>> Dia de entrada"
                        bloqueEntidad.appendChild(aviso)
                        const tituloEntidad = document.createElement("div")
                        tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                        tituloEntidad.innerText = "Hoy es el d√≠a de entrada de la reserva y el alojamiento debe de estar preparado antes de las " + horaEntrada + " para la llegada de los nuevos pernoctantes"
                        bloqueEntidad.appendChild(tituloEntidad)
                        const datoEntidad = document.createElement("div")
                        datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                        datoEntidad.innerText = tiempoRestante
                        //bloqueEntidad.appendChild(datoEntidad)
                        contenedorReserva.appendChild(bloqueEntidad)
                    }
                    const contenedorFechas = document.createElement("div")
                    contenedorFechas.classList.add("administracion_situacion_portada_contenedorFechas")
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.innerText = "Fecha de entrada"
                    bloqueEntidad.appendChild(tituloEntidad)
                    let apartamentoFechaEntrada = document.createElement("div")
                    apartamentoFechaEntrada.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    apartamentoFechaEntrada.innerText = fechaEntrada
                    bloqueEntidad.appendChild(apartamentoFechaEntrada)
                    contenedorFechas.appendChild(bloqueEntidad)
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    bloqueEntidad.classList.add("administracion_situacion_portada_fechaDeSalida")
                    tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.innerText = "Fecha de salida"
                    bloqueEntidad.appendChild(tituloEntidad)
                    let apartamentoFechaSalida = document.createElement("div")
                    apartamentoFechaSalida.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    apartamentoFechaSalida.innerText = fechaSalida
                    bloqueEntidad.appendChild(apartamentoFechaSalida)
                    contenedorFechas.appendChild(bloqueEntidad)
                    contenedorReserva.appendChild(contenedorFechas)
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    let apartamentoEstadoReserva = document.createElement("div")
                    apartamentoEstadoReserva.classList.add("situacionApartamentoEstadoReserva")



                    const nombreClaseDinamica = `barraProgresso-anchoDinamico-${reservaUID}`;
                    if (!document.querySelector(`.${nombreClaseDinamica}`)) {
                        // Si no existe, crea un nuevo estilo
                        const style = document.createElement('style');
                        style.innerHTML = `
                            .${nombreClaseDinamica} {
                                width: ${porcentajeTranscurrido}
                        `;
                        document.querySelector("main").appendChild(style);
                    }

                    let barraProgresso = document.createElement("div")
                    barraProgresso.classList.add(
                        "situacionBarraProgressoReserva",
                        nombreClaseDinamica
                    )
                    //barraProgresso.style.width = porcentajeTranscurrido
                    apartamentoEstadoReserva.appendChild(barraProgresso)
                    bloqueEntidad.appendChild(apartamentoEstadoReserva)
                    contenedorReserva.appendChild(bloqueEntidad)
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.innerText = "Duraci√≥n de la reserva"
                    bloqueEntidad.appendChild(tituloEntidad)
                    let datoEntidad = document.createElement("div")
                    datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    datoEntidad.innerText = numeroDiasReserva
                    bloqueEntidad.appendChild(datoEntidad)
                    contenedorReserva.appendChild(bloqueEntidad)
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.innerText = "Tiempo restante de la reserva"
                    bloqueEntidad.appendChild(tituloEntidad)
                    datoEntidad = document.createElement("div")
                    datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    datoEntidad.innerText = tiempoRestante
                    bloqueEntidad.appendChild(datoEntidad)
                    contenedorReserva.appendChild(bloqueEntidad)
                    return contenedorReserva
                },
                tarjetaEventoUI: (data) => {

                    const fechaInicio_ISO = data.fechaInicio
                    const fechaFinal_ISO = data.fechaFinal
                    const uid = data.uid
                    const descripcion = data?.descripcion || null
                    const nombreEvento = data.nombreEvento
                    const fechaInicioArray = fechaInicio_ISO.split("-")
                    const fechaInicio_Humano = `${fechaInicioArray[2]}/${fechaInicioArray[1]}/${fechaInicioArray[0]}`
                    const fechaFinalArray = fechaFinal_ISO.split("-")
                    const fechaFinal_Humano = `${fechaFinalArray[2]}/${fechaFinalArray[1]}/${fechaFinalArray[0]}`
                    let urlEvento
                    if (descripcion) {
                        const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                        const match = descripcion.match(regex);
                        urlEvento = match?.[1] ?? "No se encontr√≥ la URL en el texto proporcionado.";
                    }

                    const contenedorEvento = document.createElement("div")
                    contenedorEvento.classList.add(
                        "flexVertical",
                        "padding14",
                        "gap10",
                        "backgroundGrey1",
                        "borderRadius16"
                    )


                    const tituloPlataformaOrigen = document.createElement("p")
                    //tituloPlataformaOrigen.classList.add("tituloPlataformaOrigen")
                    tituloPlataformaOrigen.innerText = "Evento de Airbnb"
                    contenedorEvento.appendChild(tituloPlataformaOrigen)

                    const descripcionEvento = document.createElement("p")
                    //descripcionEvento.classList.add("descripcionEvento")
                    descripcionEvento.innerText = "Este evento proviene de un calendario sincronizado con Airbnb."
                    contenedorEvento.appendChild(descripcionEvento)

                    const contenedorFechas = document.createElement("div")
                    contenedorFechas.classList.add(
                        "gridHorizotnal2C",
                        "gap6",

                    )
                    contenedorEvento.appendChild(contenedorFechas)

                    const contenedorFechaInicio = document.createElement("div")
                    contenedorFechaInicio.classList.add(
                        "flexVertical",
                        "borderRadius16",
                        "backgroundWhite3",
                        "flextJustificacion_center",
                        "flexAHCentrad",
                        "padding10"
                    )
                    contenedorFechas.appendChild(contenedorFechaInicio)

                    const tituloFechaInicio = document.createElement("p")
                    tituloFechaInicio.classList.add("tituloFecha")
                    tituloFechaInicio.innerText = "Fecha de inicio"
                    contenedorFechaInicio.appendChild(tituloFechaInicio)

                    const fechaInicioUI = document.createElement("p")
                    fechaInicioUI.classList.add("fechaDatoUI")
                    fechaInicioUI.innerText = fechaInicio_Humano
                    contenedorFechaInicio.appendChild(fechaInicioUI)

                    const contenedorFechaFin = document.createElement("div")
                    contenedorFechaFin.classList.add(
                        "flexVertical",
                        "borderRadius16",
                        "backgroundWhite3",
                        "flextJustificacion_center",
                        "flexAHCentrad",
                        "padding10"
                    )
                    contenedorFechas.appendChild(contenedorFechaFin)

                    const tituloFechaFin = document.createElement("p")
                    tituloFechaFin.classList.add("tituloFecha")
                    tituloFechaFin.innerText = "Fecha fin"
                    contenedorFechaFin.appendChild(tituloFechaFin)

                    const fechaFinUI = document.createElement("p")
                    fechaFinUI.classList.add("fechaDatoUI")
                    fechaFinUI.innerText = fechaFinal_Humano
                    contenedorFechaFin.appendChild(fechaFinUI)


                    if (descripcion) {
                        const botonIrAlEvento = document.createElement("a")
                        botonIrAlEvento.classList.add("botonIrAlEvento")
                        botonIrAlEvento.href = urlEvento
                        botonIrAlEvento.innerText = "Abrir evento. (Se ira a la web de Airbnb)"
                        contenedorEvento.appendChild(botonIrAlEvento)
                    } else {
                        const botonIrAlEvento = document.createElement("div")
                        // botonIrAlEvento.classList.add("sinInfo")
                        botonIrAlEvento.innerText = "Airbnb no proporciona ninguna informaci√≥n sobre este evento.Probablemente, este evento sea de un calendario que Airbnb ha sincronizado con otra plataforma.Para ver m√°s informaci√≥n de este evento, por favor dir√≠jase a la web de Airbnb porque Airbnb no proporciona ninguna forma de enlazar este evento."
                        contenedorEvento.appendChild(botonIrAlEvento)
                    }
                    return contenedorEvento
                },
                tarjetaHabitacionUI: (data) => {
                    const habitacionUI = data.habitacionUI
                    const habitacionUID = data.habitacionUID

                    const contenedor = document.createElement("div")
                    contenedor.setAttribute("habitacionUID", habitacionUID)
                    contenedor.classList.add(
                        "flexVertical",
                        "gap6",
                        "borderGrey1",
                        "borderRadius12",
                        "padding6"
                    )
                    const tituloHabitacion = document.createElement("p")
                    tituloHabitacion.classList.add(
                        "negrita",
                        "padding10"
                    )
                    tituloHabitacion.innerText = habitacionUI
                    contenedor.appendChild(tituloHabitacion)
                    return contenedor
                },
                tarjetaPernotanteUI: (data) => {


                    const nombreCompleto = data.nombreCompleto
                    const tipoPernoctante = data.tipoPernoctante
                    const clienteUID = data.clienteUID
                    const habitacionUID = data.habitacionUID
                    const fechaCheckIn = data.fechaCheckIn
                    const fechaCheckOut = data.fechaCheckOut

                    const dic = {
                        cliente: "Cliente de Casa Vitini",
                        clientePool: "Cliente por veriricar"
                    }

                    const marcoPernoctante = document.createElement("a")
                    marcoPernoctante.classList.add(
                        "flexVertical",
                        "gap4",
                        "padding10",
                        "comportamientoBoton",
                        "borderRadius8",
                        "ratonDefault"
                    )
                    if (tipoPernoctante === "cliente") {
                        marcoPernoctante.setAttribute("vista", `/administracion/clientes/cliente:${clienteUID}`)
                        marcoPernoctante.setAttribute("href", `/administracion/clientes/cliente:${clienteUID}`)
                        marcoPernoctante.setAttribute("clienteUID", clienteUID)
                        marcoPernoctante.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    }
                    if (!fechaCheckIn) {
                        const tipoPernoctanteUI = document.createElement("div")
                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                        //tipoPernoctanteUI.classList.add("parpadea")
                        tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                        tipoPernoctanteUI.innerText = "Pendiente de checkin"
                        marcoPernoctante.appendChild(tipoPernoctanteUI)
                    } else {
                        const tipoPernoctanteUI = document.createElement("div")
                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                        //tipoPernoctanteUI.classList.add("parpadea")
                        tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                        tipoPernoctanteUI.innerText = "> " + fechaCheckIn
                        marcoPernoctante.appendChild(tipoPernoctanteUI)
                    }
                    if (fechaCheckOut) {
                        const tipoPernoctanteUI = document.createElement("div")
                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                        tipoPernoctanteUI.classList.add("letraRoja")
                        tipoPernoctanteUI.setAttribute("componente", "checkOutInfo")
                        tipoPernoctanteUI.innerText = "< " + fechaCheckOut
                        marcoPernoctante.appendChild(tipoPernoctanteUI)
                    }
                    if (tipoPernoctante === "clientePool") {
                        const tipoPernoctanteUI = document.createElement("div")
                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloPendienteComprobacion")
                        tipoPernoctanteUI.classList.add("parpadea")
                        tipoPernoctanteUI.setAttribute("componente", "pendienteComprobacion")
                        tipoPernoctanteUI.innerText = "Pendiente de comprobaci√≥n documental"
                        marcoPernoctante.appendChild(tipoPernoctanteUI)
                    }
                    const nombreCompletoPernoctante = document.createElement("div")
                    nombreCompletoPernoctante.classList.add("administracion_situacion_detallesApartamento_nombrePernoctante")
                    nombreCompletoPernoctante.innerText = nombreCompleto
                    marcoPernoctante.appendChild(nombreCompletoPernoctante)
                    const tipoClientePernoctante = document.createElement("div")
                    tipoClientePernoctante.classList.add("administracion_situacion_detallesApartamento_tipoCliente")
                    tipoClientePernoctante.innerText = dic[tipoPernoctante]
                    marcoPernoctante.appendChild(tipoClientePernoctante)
                    return marcoPernoctante
                }
            }
        },
        servicios: {
            arranque: function () {
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const main = document.querySelector("main")
                if (granuladoURL.parametros.servicio) {
                    this.detallesServicio.arranque(granuladoURL.parametros.servicio)
                } else if (comandoInicial === "servicios") {
                    this.portada.arranque()
                } else {
                    casaVitini.ui.componentes.urlDesconocida()
                }
            },
            portada: {
                arranque: function () {
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    this.contenedorBotones()

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "servicio") {
                            nombreColumnaIDV = "serviciosUID"
                        } else if ((valorParametroURL)?.toLowerCase() === "estado") {
                            nombreColumnaIDV = "estadoIDV"
                        } else if ((valorParametroURL)?.toLowerCase() === "zona") {
                            nombreColumnaIDV = "zonaIDV"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                        parametrosFormatoIDV.instanciaUID = instanciaUID
                    })
                    casaVitini.administracion.servicios.portada.mostrarServiciosResueltos(parametrosFormatoIDV)

                },
                contenedorBotones: () => {
                    const espacio = document.querySelector("[componente=espacio]")
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("contenedorBotonesGlobales")
                    contenedorBotones.setAttribute("componente", "contenedorBotonesServicios")
                    const boton = document.createElement("a")
                    boton.classList.add("botonNuevo")
                    boton.innerText = "Crear servicio"
                    boton.setAttribute("href", "/administracion/servicios/nuevo")
                    boton.setAttribute("vista", "/administracion/servicios/nuevo")
                    boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(boton)
                    espacio.appendChild(contenedorBotones)
                },
                mostrarServiciosResueltos: async function (listarServicios) {

                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacio]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)

                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const transaccion = {
                        zona: "administracion/servicios/listaServiciosPaginados",
                        origen: "url",
                        tipoConstruccionGrid: "total",
                        ...listarServicios
                    }

                    transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1

                    let nombreColumnaURL
                    const nombreColumna = transaccion.nombreColumna
                    if ((nombreColumna)?.toLowerCase() === "serviciouid") {
                        nombreColumnaURL = "servicio"
                    } else if ((nombreColumna)?.toLowerCase() === "estadoidv") {
                        nombreColumnaURL = "estado"
                    } else if ((nombreColumna)?.toLowerCase() === "zonaidv") {
                        nombreColumnaURL = "zona"
                    } else if (nombreColumna) {
                        nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                    }

                    if (transaccion.sentido_columna) {
                        transaccion.sentidoColumna = transaccion.sentido_columna
                        delete transaccion.sentido_columna
                    }
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const tipoConstruccionGrid = transaccion.tipoConstruccionGrid
                    delete transaccion.tipoConstruccionGrid
                    const peticion = {
                        zona: "administracion/servicios/listaServiciosPaginados",
                        pagina: transaccion.pagina,
                    }
                    if (transaccion.nombreColumna) {
                        peticion.nombreColumna = transaccion.nombreColumna
                    }
                    if (transaccion.sentidoColumna) {
                        peticion.sentidoColumna = transaccion.sentidoColumna
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(peticion)

                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.totalServicios === 0) {
                        const espacioClientes = document.querySelector("[componente=espacio]")
                        document.querySelector("[gridUID=gridServicios]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        const estadoBusquedaUI = document.createElement("div")
                        estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                        estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                        estadoBusquedaUI.innerText = "No hay servicios configurados"
                        espacioClientes.appendChild(estadoBusquedaUI)
                        return

                    }
                    const servicios = respuestaServidor.servicios

                    const dicccionario = {
                        estados: {
                            activado: "Activado",
                            desactivado: "Desactivado"
                        }
                    }

                    for (const detallesDelServicio of servicios) {
                        const estadoIDV = detallesDelServicio.estadoIDV
                        detallesDelServicio.estadoIDV = dicccionario.estados[estadoIDV]
                    }
                    const sentidoColumna = respuestaServidor.sentidoColumna
                    //const nombreColumna = respuestaServidor.nombreColumna
                    const pagina = respuestaServidor.pagina
                    const paginasTotales = respuestaServidor.paginasTotales
                    const columnasGrid = [
                        {
                            columnaUI: "UID",
                            columnaIDV: "servicioUID",
                        },
                        {
                            columnaUI: "Nombre",
                            columnaIDV: "nombre",
                        },
                        {
                            columnaUI: "Estado",
                            columnaIDV: "estadoIDV",
                        },
                        {
                            columnaUI: "Zona",
                            columnaIDV: "zonaIDV",
                        },
                    ]
                    const parametrosFinales = {}

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal
                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.servicios.portada.mostrarServiciosResueltos",
                        configuracionGrid: {
                            filas: servicios,
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[componente=espacio]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridServicios",
                            mascaraURL: {
                                mascara: "/administracion/servicios/servicio:",
                                parametro: "servicioUID"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })


                    const titulo = "Administrar reservas"
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "contenedorBotonesServicios",
                        funcionPersonalizada: "administracion.servicios.portada.mostrarServiciosResueltos",
                        args: transaccion
                    }
                    // Aplica data
                    if (origen === "url" || origen === "botonMostrarReservas") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }
                },
            },
            detallesServicio: {
                arranque: async function (servicioUID) {
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const transaccion = {
                        zona: "administracion/servicios/detallesServicio",
                        servicioUID: String(servicioUID)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe ning√∫na servicio con ese identificador",
                            descripcion: "Revisa el identificador porque este servicio que buscas no existe. Quiz√°s este identificador existi√≥ y borraste esta servicio.."
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    } else if (respuestaServidor?.ok) {
                        const servicio = respuestaServidor.ok
                        const servicioUID = servicio.servicioUID
                        const espacioServicios = document.querySelector("[componente=espacio]")
                        espacioServicios.setAttribute("instantanea", JSON.stringify(servicio))
                        espacioServicios.setAttribute("servicioUID", servicioUID)

                        espacioServicios.innerHTML = null
                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "/administracion/servicios/servicioUI")
                        const ofertaUI = casaVitini.administracion.servicios.componentesUI.detalleUI({
                            modoUI: "editar"
                        })
                        espacioServicios.appendChild(ofertaUI)
                        this.aplicaData({
                            servicio: servicio,
                            instanciaUID_destino: instanciaUID
                        })
                        const botonesModificacion = casaVitini.administracion.servicios.componentesUI.botonesDuranteModificacion()
                        ofertaUI.appendChild(botonesModificacion)
                    }






                },
                aplicaData: function (data) {

                    const servicio = data.servicio
                    const instanciaUID_destino = data.instanciaUID_destino
                    const servicioUID = servicio.servicioUID
                    const nombre = servicio.nombre
                    const zonaIDV = servicio.zonaIDV
                    const contenedor = servicio.contenedor
                    const estadoIDV = servicio.estadoIDV

                    const servicioUI = document.querySelector(`[instanciaUID="${instanciaUID_destino}"]`)
                    if (!servicioUI) { return }

                    servicioUI.querySelector("[componente=servicioUI]").setAttribute("servicioUID", servicioUID)

                    if (estadoIDV === "desactivado") {
                        servicioUI.querySelector("[componente=estadoServicio]").setAttribute("estadoServicio", estadoIDV)
                        servicioUI.querySelector("[componente=estadoServicio]").style.background = "#ff000091"
                        servicioUI.querySelector("[componente=estadoServicio]").innerHTML = "Oferta desactivada"
                    }
                    if (estadoIDV === "activado") {
                        servicioUI.querySelector("[componente=estadoServicio]").setAttribute("estadoServicio", estadoIDV)
                        servicioUI.querySelector("[componente=estadoServicio]").style.background = "#00ff006e"
                        servicioUI.querySelector("[componente=estadoServicio]").innerHTML = "Oferta activada"
                    }

                    const duracionIDV = contenedor.duracionIDV
                    const disponibilidadIDV = contenedor.disponibilidadIDV
                    // const cantidadIDV = contenedor.cantidadIDV
                    const tituloPublico = contenedor.tituloPublico
                    const definicion = contenedor.definicion
                    const precio = contenedor.precio
                    // const cantidadCampo = contenedor?.cantidadCampo
                    const fechaInicio = contenedor?.fechaInicio
                    const fechaFinal = contenedor?.fechaFinal

                    const selectorContenedorFechas = servicioUI.querySelector("[contenedor=fechas]")
                    // const selectorContenedorCantidad = servicioUI.querySelector("[contenedor=cantidad]")

                    if (duracionIDV === "rango") {
                        servicioUI.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaInicio)
                        servicioUI.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaFinal)

                        const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio)
                        const fechaFinal_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinal)
                        const fechaInicioUI = servicioUI.querySelector("[calendario=entrada]").querySelector("[fechaUI]")
                        fechaInicioUI.innerText = fechaInicio_humana

                        const fechaFinalUI = servicioUI.querySelector("[calendario=salida]").querySelector("[fechaUI]")
                        fechaFinalUI.innerText = fechaFinal_humana
                        selectorContenedorFechas.style.display = "flex"
                    } else if (duracionIDV === "permanente") {
                        selectorContenedorFechas.style.display = "none"
                    }

                    // if (cantidadIDV === "limitada") {
                    //     const cantidadCampo_UI = servicioUI.querySelector("[campo=cantidad]")
                    //     cantidadCampo_UI.value = cantidadCampo
                    //     selectorContenedorCantidad.style.display = "flex"
                    // } else if (cantidadIDV === "infinita") {
                    //     selectorContenedorCantidad.style.display = "none"
                    // }
                    const nombreServicioCampo = servicioUI.querySelector("[campo=nombreServicio]")
                    nombreServicioCampo.value = nombre

                    const zonaIDVSelector = servicioUI.querySelector("[campo=zonaIDV]")
                    zonaIDVSelector.value = zonaIDV

                    const duracionIDVSelector = servicioUI.querySelector("[campo=duracionIDV]")
                    duracionIDVSelector.value = duracionIDV

                    const disponibilidadIDVSelector = servicioUI.querySelector("[campo=disponibilidadIDV]")
                    disponibilidadIDVSelector.value = disponibilidadIDV

                    // const cantidadIDVSelector = servicioUI.querySelector("[campo=cantidadIDV]")
                    // cantidadIDVSelector.value = cantidadIDV

                    const tituloPublicoCampo = servicioUI.querySelector("[campo=tituloPublico]")
                    tituloPublicoCampo.value = tituloPublico

                    const definicionCampo = servicioUI.querySelector("[campo=definicion]")
                    definicionCampo.value = definicion

                    const precioCampo = servicioUI.querySelector("[campo=precio]")
                    precioCampo.value = precio
                },
                estadoUIControlador: async (estado) => {
                    const servicioUID = document.querySelector("[servicioUID]")?.getAttribute("servicioUID")
                    if (!servicioUID) {
                        const error = "No se puede cambiar el estado del servicio porque no tiene un identificador √∫nico de servicio (servicioUID).Esto puede deberse a que a√∫n no has creado la servicio o que la has borrado.Si est√°s creando una servicio, por favor aseg√∫rate de crearlo pulsando el bot√≥n 'Crear servicio' antes de activarla."
                        casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }
                    const selectorEstado = document.querySelector("[componente=estadoServicio]")

                    const estadoActualMemoriaVolatil = selectorEstado.innerText
                    selectorEstado.innerText = "Esperando al servidor...."
                    const estadoActual = estado.target.getAttribute("estadoServicio")
                    let estadoOfertaPropuesto
                    if (estadoActual === "desactivado") {
                        estadoOfertaPropuesto = "activado"
                    }
                    if (estadoActual === "activado") {
                        estadoOfertaPropuesto = "desactivado"
                    }
                    const transaccion = {
                        zona: "administracion/servicios/actualizarEstadoServicio",
                        servicioUID: String(servicioUID),
                        estadoIDV: estadoOfertaPropuesto
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        document.querySelector("[estadoServicio]").innerText = estadoActualMemoriaVolatil
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const estadoIDV = respuestaServidor?.estadoIDV
                        selectorEstado.setAttribute("estadoServicio", estadoIDV)
                        let estadoUI
                        if (estadoIDV === "activado") {
                            selectorEstado.style.background = "#00ff006e"
                            estadoUI = "Servicio activado"
                        }
                        if (estadoIDV === "desactivado") {
                            selectorEstado.style.background = "#ff000091"
                            estadoUI = "Servicio desactivado"
                        }
                        selectorEstado.innerText = estadoUI
                    }
                },
                guardarCambios: async function () {
                    const instanciaUID_pantallaEspera = casaVitini.utilidades.codigoFechaInstancia()
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    const servicioUID = main.querySelector("[componente=servicioUI]").getAttribute("servicioUID")

                    const mensaje = "Actualizando servicio..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID_pantallaEspera,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const servicio = casaVitini.administracion.servicios.utilidades.constructorObjeto()

                    const transaccion = {
                        zona: "administracion/servicios/actualizarServicio",
                        servicioUID: String(servicioUID),
                        ...servicio
                    }


                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    document.querySelector(`[instanciaUID="${instanciaUID_pantallaEspera}"]`)?.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const servicioActualizado = respuestaServidor.servicioActualizado

                        const servicioUI = document.querySelector("[componente=servicioUI]")
                        servicioUI.setAttribute("instantanea", JSON.stringify(servicioActualizado))

                        casaVitini.administracion.servicios.detallesServicio.aplicaData({
                            servicio: servicioActualizado,
                            instanciaUID_destino: instanciaUID
                        })
                    }
                },
                eliminarServicio: {
                    ui: () => {

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.innerText = "Confirmar eliminar el servicio"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.innerText = "Var a eliminar el servicio y su aplicacion sera inmediata, ¬øEstas de acuerdo ? "

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.innerText = "Comfirmar la eliminaci√≥n"
                        botonAceptar.addEventListener("click", casaVitini.administracion.servicios.detallesServicio.eliminarServicio.confirmar)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.innerText = "Cancelar la eliminaci√≥n"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    confirmar: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Eliminado el servicio..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const servicioUID = document.querySelector("[servicioUID]").getAttribute("servicioUID")
                        const transaccion = {
                            zona: "administracion/servicios/eliminarServicio",
                            servicioUID: String(servicioUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vista = `/administracion/servicios`
                            const navegacion = {
                                vista: vista,
                                //tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                }

            },
            componentesUI: {
                detalleUI: (data) => {
                    const modoUI = data.modoUI
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()

                    const ui = document.createElement("div");
                    ui.setAttribute("componente", "servicioUI");
                    ui.classList.add(
                        "servicioUI"
                    )

                    const contenedorNombreEstado = document.createElement("div");

                    if (modoUI === "editar") {
                        contenedorNombreEstado.classList.add("crearOfertaContenedorHorizontalV2");

                        const botonEstadoOferta = document.createElement("div")
                        botonEstadoOferta.classList.add("creatOfertaBotonEstado")
                        botonEstadoOferta.setAttribute("componente", "estadoServicio")
                        botonEstadoOferta.addEventListener("click", casaVitini.administracion.servicios.detallesServicio.estadoUIControlador)
                        botonEstadoOferta.innerText = "Servicio desactivado"
                        contenedorNombreEstado.appendChild(botonEstadoOferta)

                    }
                    if (modoUI === "crear") {
                        contenedorNombreEstado.classList.add("crearOfertaContenedorHorizontalModoCrear");
                    }
                    //Crear el input
                    const input = document.createElement("input");
                    input.setAttribute("type", "text");
                    input.classList.add(
                        "padding12",
                        "borderRadius10"
                    );
                    input.setAttribute("campo", "nombreServicio");
                    input.setAttribute("placeholder", "Escriba el nombre de nuevo servicio");
                    contenedorNombreEstado.appendChild(input)
                    ui.appendChild(contenedorNombreEstado)
                    // Selector duracion - permanente o rango
                    // Disponibildia -constante o limiteada
                    // catnida - indefinida - limitada
                    const contenedorSelectoresGlobales = document.createElement("div")
                    contenedorSelectoresGlobales.classList.add("contenedorSelectoresGlobales")

                    const selectorZona = () => {
                        const selector = document.createElement("select")
                        selector.classList.add(
                            "selector",
                            "textCentrado"
                        )
                        selector.setAttribute("campo", "zonaIDV")
                        const opcionPredeterminada = document.createElement("option")
                        opcionPredeterminada.selected = true
                        opcionPredeterminada.disabled = true;
                        opcionPredeterminada.value = ""
                        opcionPredeterminada.text = "Zona del servicio"
                        selector.appendChild(opcionPredeterminada)
                        const opciones = [
                            { value: "publica", text: "Zona p√∫blica" },
                            { value: "global", text: "Zona global" },
                            { value: "privada", text: "Zona privada" }
                        ]
                        for (const opcionData of opciones) {
                            const opcion = document.createElement("option");
                            opcion.value = opcionData.value;
                            opcion.text = opcionData.text;
                            selector.appendChild(opcion);
                        }
                        return selector
                    }
                    contenedorSelectoresGlobales.appendChild(selectorZona())

                    const selectorDuracion = () => {
                        const selector = document.createElement("select")
                        selector.classList.add(
                            "selector",
                            "textCentrado"
                        )
                        selector.setAttribute("campo", "duracionIDV")
                        selector.addEventListener("change", (e) => {
                            const sel = e.target.value
                            const selectorFechas = document.querySelector("[contenedor=fechas]")
                            if (sel === "permanente") {
                                selectorFechas.style.display = "none"
                            } else if (sel === "rango") {
                                selectorFechas.style.display = "flex"
                            }
                        })
                        const opcionPredeterminada = document.createElement("option")
                        opcionPredeterminada.selected = true
                        opcionPredeterminada.disabled = true;
                        opcionPredeterminada.value = ""
                        opcionPredeterminada.text = "Duraci√≥n"
                        selector.appendChild(opcionPredeterminada)
                        const opciones = [
                            { value: "permanente", text: "Permanente" },
                            { value: "rango", text: "Solo durante un rango" }
                        ]
                        for (const opcionData of opciones) {
                            const opcion = document.createElement("option");
                            opcion.value = opcionData.value;
                            opcion.text = opcionData.text;
                            selector.appendChild(opcion);
                        }
                        return selector
                    }
                    contenedorSelectoresGlobales.appendChild(selectorDuracion())


                    const selectorDisponibilidad = () => {
                        const selector = document.createElement("select")
                        selector.classList.add(
                            "selector",
                            "textCentrado"
                        )
                        selector.setAttribute("campo", "disponibilidadIDV")
                        const opcionPredeterminada = document.createElement("option")
                        opcionPredeterminada.selected = true
                        opcionPredeterminada.disabled = true;
                        opcionPredeterminada.value = ""
                        opcionPredeterminada.text = "Disponibilidad"
                        selector.appendChild(opcionPredeterminada)
                        const opciones = [
                            { value: "constante", text: "Constante" },
                            { value: "variable", text: "Variable" }
                        ]
                        for (const opcionData of opciones) {
                            const opcion = document.createElement("option");
                            opcion.value = opcionData.value;
                            opcion.text = opcionData.text;
                            selector.appendChild(opcion);
                        }
                        return selector
                    }
                    contenedorSelectoresGlobales.appendChild(selectorDisponibilidad())

                    ui.appendChild(contenedorSelectoresGlobales);

                    const divContenedor = document.createElement("div");
                    divContenedor.classList.add("administracion_ofertas_crearOfertas_contenedorFecha");
                    divContenedor.setAttribute("contenedor", "fechas")
                    divContenedor.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                    //Crear el primer div contenedor horizontal
                    const divContenedorHorizontal = document.createElement("div");
                    divContenedorHorizontal.classList.add("crearOfertaContenedorHorizontal");
                    //Crear el div contenedor de fecha de inicio
                    const divContenedorFechaInicio = document.createElement("div");
                    divContenedorFechaInicio.classList.add("contenedorFecha");
                    divContenedorFechaInicio.setAttribute("calendario", "entrada");
                    divContenedorFechaInicio.setAttribute("componente", "inicioOferta");
                    divContenedorFechaInicio.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                    divContenedorFechaInicio.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_entrada_perfilSimple",
                            contenedorOrigenIDV: "[calendario=entrada]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "inicioRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Seleciona una fehca de inicio de vigencia del servicio"
                        })
                    })

                    const pFechaInicio = document.createElement("p");
                    pFechaInicio.classList.add("tituloFecha");
                    pFechaInicio.textContent = "Fecha de inicio";

                    const pFechaInicioSeleccionada = document.createElement("p");
                    pFechaInicioSeleccionada.classList.add("fechaInicio");
                    pFechaInicioSeleccionada.setAttribute("fechaUI", "fechaInicio");
                    pFechaInicioSeleccionada.textContent = "(Seleccionar)";

                    divContenedorFechaInicio.appendChild(pFechaInicio);
                    divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);

                    const divContenedorFechaFin = document.createElement("div");
                    divContenedorFechaFin.classList.add("contenedorFecha");
                    divContenedorFechaFin.setAttribute("calendario", "salida");
                    divContenedorFechaFin.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                    divContenedorFechaFin.setAttribute("componente", "finOferta");

                    divContenedorFechaFin.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_salida_perfilSimple",
                            contenedorOrigenIDV: "[calendario=salida]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "finalRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Seleciona una fehca de fin de vigencia del servicio"

                        })
                    })

                    const pFechaFin = document.createElement("p");
                    pFechaFin.classList.add("tituloFecha");
                    pFechaFin.textContent = "Fecha fin";

                    const pFechaFinSeleccionada = document.createElement("p");
                    pFechaFinSeleccionada.classList.add("fechaFin");
                    pFechaFinSeleccionada.setAttribute("fechaUI", "fechaFin");
                    pFechaFinSeleccionada.textContent = "(Seleccionar)";

                    divContenedorFechaFin.appendChild(pFechaFin);
                    divContenedorFechaFin.appendChild(pFechaFinSeleccionada);

                    divContenedorHorizontal.appendChild(divContenedorFechaInicio);
                    divContenedorHorizontal.appendChild(divContenedorFechaFin);

                    divContenedor.appendChild(divContenedorHorizontal);

                    ui.appendChild(divContenedor);


                    const contenedorDefinicion = () => {
                        const contenedor = document.createElement("div")
                        contenedor.setAttribute("contenedor", "definicion")
                        contenedor.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding6",
                            "backgroundGrey1",
                            "borderRadius14"

                        )
                        const titulo = document.createElement("p")
                        titulo.classList.add(
                            "padding6"
                        )
                        titulo.innerText = "Define nombre p√∫blico para el servicio y una definici√≥n."
                        contenedor.appendChild(titulo)

                        const campo = document.createElement("input")
                        campo.setAttribute("campo", "tituloPublico")
                        campo.classList.add(
                            "padding10",
                            "borderRadius10"
                        )
                        campo.placeholder = "Titulo del servicio"
                        contenedor.appendChild(campo)


                        const definicion = document.createElement("textarea")
                        definicion.setAttribute("campo", "definicion")
                        definicion.classList.add(
                            "padding10",
                            "borderRadius10",
                            "resizeOnlyVertical",
                            "area300px",

                        )
                        definicion.placeholder = "Definicion del servicio"
                        contenedor.appendChild(definicion)

                        return contenedor
                    }

                    ui.appendChild(contenedorDefinicion())

                    const contenedorPrecio = () => {
                        const contenedor = document.createElement("div")
                        contenedor.setAttribute("contenedor", "cantidad")
                        contenedor.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding6",
                            "backgroundGrey1",
                            "borderRadius14"

                        )
                        const titulo = document.createElement("p")
                        titulo.classList.add(
                            "padding6"
                        )
                        titulo.innerText = "Precio del servicio, determina el valor de este servicio. El precio del servicio tiene que estar en formato n√∫mero con dos decimales separados por punto."
                        contenedor.appendChild(titulo)

                        const campo = document.createElement("input")
                        campo.setAttribute("campo", "precio")
                        campo.classList.add(
                            "padding10",
                            "borderRadius10"
                        )
                        campo.placeholder = "00.00"
                        contenedor.appendChild(campo)


                        return contenedor
                    }

                    ui.appendChild(contenedorPrecio())

                    return ui

                },
                botonesCrearServicio: () => {
                    const boton = document.createElement("p");
                    boton.classList.add("botonV1");
                    boton.textContent = "Crear servicio";
                    boton.setAttribute("boton", "crearServucui");
                    boton.addEventListener("click", casaVitini.administracion.servicios.nuevo.crearServicio)
                    return boton
                },
                botonesModificar: () => {
                    const boton = document.createElement("div")
                    boton.classList.add("botonV1");
                    boton.setAttribute("componente", "botonEditar");
                    boton.setAttribute("contenedor", "botones");

                    boton.addEventListener("click", () => {
                        casaVitini.administracion.servicios.componentesUI.modosUI("modoEditar")
                    })
                    boton.textContent = "Modificar servicio";
                    return boton
                },
                botonesDuranteModificacion: function () {
                    const contenedor = document.createElement("div");
                    contenedor.classList.add("contenedorBotones");
                    contenedor.setAttribute("contenedor", "botones");

                    const botonGuardar = document.createElement("div")
                    botonGuardar.classList.add("botonV1");
                    botonGuardar.setAttribute("componente", "botonGuardarCambios");
                    botonGuardar.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    botonGuardar.addEventListener("click", casaVitini.administracion.servicios.detallesServicio.guardarCambios)
                    botonGuardar.textContent = "Actualizar servicio";

                    const botonCancelar = document.createElement("p");
                    botonCancelar.classList.add("botonV1");
                    botonCancelar.setAttribute("componente", "botonCancelarCambios");
                    botonCancelar.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    botonCancelar.addEventListener("click", async () => {
                        const selectorInstantena = document.querySelector("[instantanea]").getAttribute("instantanea")
                        const instantanea = JSON.parse(selectorInstantena)
                        const instanciaUID_destino = document.querySelector(`main[instanciaUID]`).getAttribute("instanciaUID")
                        casaVitini.administracion.servicios.detallesServicio.aplicaData({
                            servicio: instantanea,
                            instanciaUID_destino: instanciaUID_destino,
                        })
                    })
                    botonCancelar.textContent = "Revertir cambios";

                    const botonEliminar = document.createElement("p");
                    botonEliminar.classList.add("botonV1");
                    botonEliminar.setAttribute("componente", "botonEliminarOferta");
                    botonEliminar.addEventListener("click", casaVitini.administracion.servicios.detallesServicio.eliminarServicio.ui)
                    botonEliminar.textContent = "Eliminar servicio";
                    contenedor.appendChild(botonGuardar);
                    contenedor.appendChild(botonCancelar);
                    contenedor.appendChild(botonEliminar);
                    return contenedor
                },
                modosUI: async (modo) => {
                    const contenedorBotones = document.querySelector("[componente=servicioUI]")
                    contenedorBotones.querySelector("[contenedro=botones]")?.remove()
                    if (modo === "modoEditar") {
                        const botones = casaVitini.administracion.servicios.componentesUI.botonesDuranteModificacion()
                        contenedorBotones.appendChild(botones)
                        document.querySelector("[componente=soloLecturaInfo]")?.classList.remove("elementoOcultoInicialmente")
                    }
                    if (modo === "modoCancelar") {
                        const botones = casaVitini.administracion.servicios.componentesUI.botonesModificar()
                        contenedorBotones.appendChild(botones)
                        document.querySelector("[componente=soloLecturaInfo]")?.classList.remove("elementoOcultoInicialmente")
                    }
                },

            },
            nuevo: {
                arranque: () => {

                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "/administracion/servicios/servicioUI")
                    //main.style.alignItems = "stretch"

                    const ui = casaVitini.administracion.servicios.componentesUI.detalleUI({
                        modoUI: "crear"
                    })
                    main.appendChild(ui)

                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add(
                        "flexVertical",
                    )
                    ui.appendChild(contenedorBotones)

                    const botonCrearServicio = casaVitini.administracion.servicios.componentesUI.botonesCrearServicio()
                    contenedorBotones.appendChild(botonCrearServicio)
                },
                crearServicio: async () => {

                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const metadatosPantallaCarga = {
                        mensaje: "Creando servicio...",
                        instanciaUID: instanciaUID,
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                    const transaccion = casaVitini.administracion.servicios.utilidades.constructorObjeto()
                    transaccion.zona = "administracion/servicios/crearServicio"

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!pantallaDeCargaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const nuevoServicio = respuestaServidor?.nuevoServicioUID
                        const vista = `/administracion/servicios/servicio:${nuevoServicio}`
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                },
            },
            utilidades: {
                constructorObjeto: () => {

                    const nombreServicio = document.querySelector("[campo=nombreServicio]").value
                    const fechaInicio_ISO = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinal_ISO = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    const zonaIDV = document.querySelector("[campo=zonaIDV]").value
                    const duracionIDV = document.querySelector("[campo=duracionIDV]").value
                    const disponibilidadIDV = document.querySelector("[campo=disponibilidadIDV]").value
                    // const cantidadIDV = document.querySelector("[campo=cantidadIDV]").value
                    // const cantidadCampo = document.querySelector("[campo=cantidad]").value

                    const tituloPublico = document.querySelector("[campo=tituloPublico]").value
                    const definicion = document.querySelector("[campo=definicion]").value
                    const precio = document.querySelector("[campo=precio]").value

                    const oferta = {
                        nombreServicio,
                        zonaIDV,
                        contenedor: {
                            duracionIDV: duracionIDV,
                            disponibilidadIDV: disponibilidadIDV,
                            //  cantidadIDV: cantidadIDV,
                            tituloPublico: tituloPublico,
                            definicion: definicion,
                            precio: precio,
                            //  cantidadCampo: cantidadCampo,

                        }
                    }

                    if (duracionIDV === "rango") {
                        oferta.contenedor.fechaInicio = fechaInicio_ISO
                        oferta.contenedor.fechaFinal = fechaFinal_ISO
                    }


                    return oferta
                },
            }
        },
        configuracion: {
            arranque: async () => {
                const marcoElastico = document.querySelector("[componente=marcoElastico]")
                marcoElastico.style.gap = "4px"
                const botones = document.querySelectorAll("[componente=botonConfiguracion]")
                botones.forEach((boton) => {
                    boton.addEventListener("click", (boton) => {
                        boton.preventDefault()
                        const vista = boton.target.closest("[vista]").getAttribute("vista")
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    })
                })
            },
            zonaHoraria: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const transaccion = {
                        zona: "administracion/configuracion/zonaHoraria/obtenerConfiguracion"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionGlobal = respuestaServidor?.ok
                        const zonaHoraria = configuracionGlobal.zonaHoraria
                        const listaZonasHorarias = configuracionGlobal.listaZonasHorarias
                        const horaEntradaTZ = configuracionGlobal.horaEntradaTZ
                        const horaSalidaTZ = configuracionGlobal.horaSalidaTZ
                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.innerText = "Determine la configuraci√≥n global del sistema.Esta configuraci√≥n se aplica a todo el sistema y a todos los usuarios. "
                        contenedorConfiguracionGlobal.appendChild(informacion)
                        //Zona horaria Global
                        let bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        let tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.innerText = "Zona horaria de Casa Vitini"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        let descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.innerText = "La zona horaria local se aplica sobre el reloj UTC para que pueda ver la hora y las fechas en la zona horaria.Por ejemplo, en el apartado de Situaci√≥n, en la renderizaci√≥n de los calendarios y etc.La zona horaria debe de configurarse con la misma zona horaria de las instalaciones f√≠sicas de pernoctaci√≥n de Casa Vitini.Entonces, el sistema de Casa Vitini puede implantarse en cualquier ordenador sin importar su reloj en zona horaria local.Es fundamental que la zona horaria del sistema sea la misma que la zona horaria de las instalaciones f√≠sicas de pernoctaci√≥n de Casa Vitini.El motivo de esto es que los pernoctante puedan obtener calendarios locales a la zona horaria de Casa Vitini y realizar las reservas en zona horaria local de Casa Vitini."
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        const listaZonaHoraria = document.createElement("select")
                        listaZonaHoraria.classList.add("administracion_configuracion_valorConfiguracionInput")
                        listaZonaHoraria.setAttribute("campo", "zonaHoraria")
                        listaZonaHoraria.setAttribute("valorInicial", zonaHoraria)
                        listaZonaHoraria.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                        for (const zonaHorariaIterada of listaZonasHorarias) {
                            const zonaHorariaUI = zonaHorariaIterada.replaceAll("/", "/").replaceAll("_", " ")
                            const zonaHorariaOpcion = document.createElement("option");
                            zonaHorariaOpcion.text = zonaHorariaUI;
                            zonaHorariaOpcion.value = zonaHorariaIterada;
                            if (zonaHoraria === zonaHorariaIterada) {
                                zonaHorariaOpcion.selected = true;
                            }
                            listaZonaHoraria.add(zonaHorariaOpcion);
                        }
                        bloqueConfiguracion.appendChild(listaZonaHoraria)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        marcoElastico.appendChild(contenedorConfiguracionGlobal)
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.setAttribute("contenedor", "botones")
                        contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("administracion_configuracion_boton")
                        botonGuardarCambios.innerText = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.zonaHoraria.guardarCambios)
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("administracion_configuracion_boton")
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.zonaHoraria.cancelarCambios)
                        botonCancelarCambios.innerText = "Cancelar cambios"
                        contenedorBotones.appendChild(botonCancelarCambios)
                        marcoElastico.appendChild(contenedorBotones)
                    }
                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },
                guardarCambios: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando zona horaria del reloj..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const campos = document.querySelectorAll("[campo]")
                    const transacccion = {
                        zona: "administracion/configuracion/zonaHoraria/guardarConfiguracion"
                    }
                    campos.forEach((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const valorCampo = campo.value
                        transacccion[nombreCampo] = valorCampo
                    })
                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.administracion.configuracion.cancelarCambios()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const contenedorBotones = document.querySelector("[contenedor=botones]")
                        contenedorBotones.removeAttribute("style")
                        campos.forEach((campo) => {
                            campo.setAttribute("valorInicial", campo.value)
                        })
                    }
                }
            },
            horaDeEntradaSalida: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const transaccion = {
                        zona: "administracion/configuracion/horaDeEntradaSalida/obtenerConfiguracion"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionGlobal = respuestaServidor?.ok
                        const horaEntradaTZ = configuracionGlobal.horaEntradaTZ
                        const horaSalidaTZ = configuracionGlobal.horaSalidaTZ
                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.innerText = "Determine la configuraci√≥n global del sistema.Esta configuraci√≥n se aplica a todo el sistema y a todos los usuarios. "
                        contenedorConfiguracionGlobal.appendChild(informacion)
                        //Zona horaria Global
                        let bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        let tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.innerText = "Zona horaria de Casa Vitini"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        let descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.innerText = "La zona horaria local se aplica sobre el reloj UTC para que pueda ver la hora y las fechas en la zona horaria.Por ejemplo, en el apartado de Situaci√≥n, en la renderizaci√≥n de los calendarios y etc.La zona horaria debe de configurarse con la misma zona horaria de las instalaciones f√≠sicas de pernoctacion de Casa Vitini.Entonces, el sistema de Casa Vitini puede implantarse en cualquier ordenador sin importar su reloj en zona horaria local.Es fundamental que la zona horaria del sistema sea la misma que la zona horaria de las instalaciones f√≠sicas de pernoctaci√≥n de Casa Vitini.El motivo de esto es que los pernoctante puedan obtener calendarios locales a la zona horaria de Casa Vitini y realizar las reservas en zona horaria local de Casa Vitini."
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        //Hora de entrada TZ
                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.innerText = "Hora de entrada"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.innerText = "Hora de entrada en zona horaria.Esta es la hora de entrada en la zona horaria seleccionada.Sirve para determinar la hora de entrada de las reservas en el d√≠a de entrada"
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        let valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "horaEntradaTZ")
                        valorConfiguracion.setAttribute("valorInicial", horaEntradaTZ)
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.horaDeEntradaSalida.controlCampo)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = horaEntradaTZ
                        valorConfiguracion.placeholder = "Selecciona una hora de entrada, por ejemplo 17:00"
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        //Hora de salida TZ
                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.innerText = "Hora de salida"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.innerText = "Hora de salida en zona horaria.Esta es la hora de salida en la zona horaria seleccionada.Sirve para determinar la hora de salida de las reservas en el d√≠a de salida "
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "horaSalidaTZ")
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.horaDeEntradaSalida.controlCampo)
                        valorConfiguracion.setAttribute("valorInicial", horaSalidaTZ)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = horaSalidaTZ
                        valorConfiguracion.placeholder = "Selecciona una hora de salida, por ejemplo 19:00 "
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        marcoElastico.appendChild(contenedorConfiguracionGlobal)
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.setAttribute("contenedor", "botones")
                        contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("administracion_configuracion_boton")
                        botonGuardarCambios.innerText = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.horaDeEntradaSalida.guardarCambios)
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("administracion_configuracion_boton")
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.horaDeEntradaSalida.cancelarCambios)
                        botonCancelarCambios.innerText = "Cancelar cambios"
                        contenedorBotones.appendChild(botonCancelarCambios)
                        marcoElastico.appendChild(contenedorBotones)
                    }
                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },
                guardarCambios: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando hora de entrada y salida..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const campos = document.querySelectorAll("[campo]")
                    const transacccion = {
                        zona: "administracion/configuracion/horaDeEntradaSalida/guardarConfiguracion"
                    }
                    campos.forEach((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const valorCampo = campo.value
                        transacccion[nombreCampo] = valorCampo
                    })

                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.administracion.configuracion.cancelarCambios()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const contenedorBotones = document.querySelector("[contenedor=botones]")
                        contenedorBotones.removeAttribute("style")
                        campos.forEach((campo) => {
                            campo.setAttribute("valorInicial", campo.value)
                        })
                    }
                }
            },
            arranqueAntiguo: async () => {
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/configuracion")
                const marcoElastico = document.querySelector("[componente=marcoElastico]")
                marcoElastico.style.gap = "4px"
                const transaccion = {
                    zona: "administracion/configuracion/obtenerConfiguracion"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const configuracionGlobal = respuestaServidor?.ok
                    const zonaHoraria = configuracionGlobal.zonaHoraria
                    const listaZonasHorarias = respuestaServidor.listaZonasHorarias
                    const horaEntradaTZ = configuracionGlobal.horaEntradaTZ
                    const horaSalidaTZ = configuracionGlobal.horaSalidaTZ
                    const contenedorConfiguracionGlobal = document.createElement("div")
                    contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                    const informacion = document.createElement("div")
                    informacion.classList.add("administracion_configuracion_informacion")
                    informacion.innerText = "Determine la configuraci√≥n global del sistema.Esta configuraci√≥n se aplica a todo el sistema y a todos los usuarios. "
                    contenedorConfiguracionGlobal.appendChild(informacion)
                    //Zona horaria Global
                    let bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                    let tituloConfiguracion = document.createElement("div")
                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.innerText = "Zona horaria de Casa Vitini"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)
                    let descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.innerText = "La zona horaria local se aplica sobre el reloj UTC para que pueda ver la hora y las fechas en la zona horaria.Por ejemplo, en el apartado de Situaci√≥n, en la renderizaci√≥n de los calendarios y etc.La zona horaria debe de configurarse con la misma zona horaria de las instalaciones f√≠sicas de pernoctacion de Casa Vitini.Entonces, el sistema de Casa Vitini puede implantarse en cualquier ordenador sin importar su reloj en zona horaria local.Es fundamental que la zona horaria del sistema sea la misma que la zona horaria de las instalaciones f√≠sicas de pernoctaci√≥n de Casa Vitini.El motivo de esto es que los pernoctante puedan obtener calendarios locales a la zona horaria de Casa Vitini y realizar las reservas en zona horaria local de Casa Vitini."
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)
                    const listaZonaHoraria = document.createElement("select")
                    listaZonaHoraria.classList.add("administracion_configuracion_valorConfiguracionInput")
                    listaZonaHoraria.setAttribute("campo", "zonaHoraria")
                    listaZonaHoraria.setAttribute("valorInicial", zonaHoraria)
                    listaZonaHoraria.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                    for (const zonaHorariaIterada of listaZonasHorarias) {
                        const zonaHorariaUI = zonaHorariaIterada.replaceAll("/", "/").replaceAll("_", " ")
                        const zonaHorariaOpcion = document.createElement("option");
                        zonaHorariaOpcion.text = zonaHorariaUI;
                        zonaHorariaOpcion.value = zonaHorariaIterada;
                        if (zonaHoraria === zonaHorariaIterada) {
                            zonaHorariaOpcion.selected = true;
                        }
                        listaZonaHoraria.add(zonaHorariaOpcion);
                    }
                    bloqueConfiguracion.appendChild(listaZonaHoraria)
                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                    //Hora de entrada TZ
                    bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                    tituloConfiguracion = document.createElement("div")
                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.innerText = "Hora de entrada"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)
                    descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.innerText = "Hora de entrada en zona horaria.Esta es la hora de entrada en la zona horaria seleccionada.Sirve para determinar la hora de entrada de las reservas en el d√≠a de entrada"
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)
                    let valorConfiguracion = document.createElement("input")
                    valorConfiguracion.setAttribute("campo", "horaEntradaTZ")
                    valorConfiguracion.setAttribute("valorInicial", horaEntradaTZ)
                    valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                    valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                    valorConfiguracion.value = horaEntradaTZ
                    valorConfiguracion.placeholder = "Selecciona una hora de entrada, por ejemplo 17:00"
                    bloqueConfiguracion.appendChild(valorConfiguracion)
                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                    //Hora de salida TZ
                    bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                    tituloConfiguracion = document.createElement("div")
                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.innerText = "Hora de salida"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)
                    descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.innerText = "Hora de salida en zona horaria.Esta es la hora de salida en la zona horaria seleccionada.Sirve para determinar la hora de salida de las reservas en el d√≠a de salida "
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)
                    valorConfiguracion = document.createElement("input")
                    valorConfiguracion.setAttribute("campo", "horaSalidaTZ")
                    valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                    valorConfiguracion.setAttribute("valorInicial", horaSalidaTZ)
                    valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                    valorConfiguracion.value = horaSalidaTZ
                    valorConfiguracion.placeholder = "Selecciona una hora de salida, por ejemplo 19:00 "
                    bloqueConfiguracion.appendChild(valorConfiguracion)
                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                    marcoElastico.appendChild(contenedorConfiguracionGlobal)
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.setAttribute("contenedor", "botones")
                    contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")
                    const botonGuardarCambios = document.createElement("div")
                    botonGuardarCambios.classList.add("administracion_configuracion_boton")
                    botonGuardarCambios.innerText = "Guardar cambios"
                    botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.guardarCambios)
                    contenedorBotones.appendChild(botonGuardarCambios)
                    const botonCancelarCambios = document.createElement("div")
                    botonCancelarCambios.classList.add("administracion_configuracion_boton")
                    botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.cancelarCambios)
                    botonCancelarCambios.innerText = "Cancelar cambios"
                    contenedorBotones.appendChild(botonCancelarCambios)
                    marcoElastico.appendChild(contenedorBotones)
                }
            },
            cancelarCambios: () => {
                const campos = document.querySelectorAll("[campo]")
                campos.forEach((campo) => {
                    campo.value = campo.getAttribute("valorInicial")
                })
                const contenedorBotones = document.querySelector("[contenedor=botones]")
                contenedorBotones.removeAttribute("style")
            },
            controlCampo: () => {
                const campos = document.querySelectorAll("[campo]")
                let estadoFinal = null
                campos.forEach((campo) => {
                    if (campo.value !== campo.getAttribute("valorInicial")) {
                        estadoFinal = "visible"
                    }
                })
                const contenedorBotones = document.querySelector("[contenedor=botones]")
                if (estadoFinal === "visible") {
                    contenedorBotones.style.display = "flex"
                } else {
                    contenedorBotones.removeAttribute("style")
                }
            },
            guardarCambios: async () => {
                const campos = document.querySelectorAll("[campo]")
                const transacccion = {
                    zona: "administracion/configuracion/guardarConfiguracion"
                }
                campos.forEach((campo) => {
                    const nombreCampo = campo.getAttribute("campo")
                    const valorCampo = campo.value
                    transacccion[nombreCampo] = valorCampo
                })
                const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                if (respuestaServidor?.error) {
                    casaVitini.administracion.configuracion.cancelarCambios()
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                    campos.forEach((campo) => {
                        campo.setAttribute("valorInicial", campo.value)
                    })
                }
            },
            calendariosSincronizados: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    if (comandoInicial === "calendarios_sincronizados" && !granuladoURL.parametros.calendario) {
                        //await new Promise(resolve => setTimeout(resolve, 2000));
                        const divContenedorAirBnb = document.createElement("div");
                        divContenedorAirBnb.classList.add("contenedorAirBnb");
                        const divBarraHerramientas = document.createElement("div");
                        divBarraHerramientas.classList.add("barraHerramientas");
                        const pTituloContenedor = document.createElement("p");
                        pTituloContenedor.classList.add("tituloContenedor");
                        pTituloContenedor.textContent = "Calendarios sincronizados con Airbnb";
                        const aBotonMas = document.createElement("a");
                        aBotonMas.classList.add("botonMas");
                        aBotonMas.setAttribute("vista", "/administracion/configuracion/calendarios_sincronizados/crear_calendario");
                        aBotonMas.setAttribute("href", "/administracion/configuracion/calendarios_sincronizados/crear_calendario");
                        aBotonMas.setAttribute("componente", "botonGlobal");
                        aBotonMas.addEventListener("click", (boton) => {
                            boton.preventDefault()
                            const vista = boton.target.closest("[vista]").getAttribute("vista")
                            const navegacion = {
                                vista: vista,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        })
                        aBotonMas.textContent = "A√±adir calendario";
                        const divContenedorCalendarios = document.createElement("div");
                        divContenedorCalendarios.classList.add("contenedorCalendarios");
                        divContenedorCalendarios.setAttribute("componente", "contendorCalendariosAirbnb");
                        const pTituloInfo = document.createElement("p");
                        pTituloInfo.classList.add("tituloInfo");
                        pTituloInfo.textContent = "Esperando informaci√≥n...";
                        //Construir la estructura del DOM
                        divBarraHerramientas.appendChild(pTituloContenedor);
                        divBarraHerramientas.appendChild(aBotonMas);
                        divContenedorAirBnb.appendChild(divBarraHerramientas);
                        divContenedorAirBnb.appendChild(divContenedorCalendarios);
                        divContenedorCalendarios.appendChild(pTituloInfo);
                        const selectorEspacioCalendarios = document.querySelector("[componente=calendariosSincronizados]")
                        selectorEspacioCalendarios.appendChild(divContenedorAirBnb);
                        const transaccion = {
                            zona: "/administracion/configuracion/calendariosSincronizados/obtenerCalendarios",
                            plataformaCalendarios: "airbnb"
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const calendariosEncontrados = respuestaServidor.ok
                            const selectorContenedor = document.querySelector("[componente=contendorCalendariosAirbnb]")
                            selectorContenedor.innerHTML = null
                            if (calendariosEncontrados.length === 0) {
                                const infoNoCalendarios = document.createElement("p")
                                infoNoCalendarios.classList.add("tituloInfo")
                                infoNoCalendarios.innerText = "No hay ningun calendario sincronizado"
                                selectorContenedor.appendChild(infoNoCalendarios)
                            } else {
                                for (const detallesDelCalendario of calendariosEncontrados) {
                                    const calendarioUID = detallesDelCalendario.calendarioUID
                                    const url = detallesDelCalendario.url
                                    const nombre = detallesDelCalendario.nombre
                                    const apartamentoIDV = detallesDelCalendario.apartamentoIDV
                                    const apartamentoUI = detallesDelCalendario.apartamentoUI
                                    const publicoUID = detallesDelCalendario.publicoUID
                                    const plataformaOrigen = detallesDelCalendario.plataformaOrigen
                                    const dataIcal = detallesDelCalendario.dataIcal
                                    const dominioActual = window.location.hostname
                                    const contenedorCalendarioIndiviudal = document.createElement("div")
                                    contenedorCalendarioIndiviudal.classList.add("contenedorCalendarioIndividual")
                                    contenedorCalendarioIndiviudal.setAttribute("calendarioUID", calendarioUID)
                                    const datosCalendario = document.createElement("div")
                                    datosCalendario.classList.add("contenedorDatosCalendario")
                                    const nombreCalendario = document.createElement("div")
                                    nombreCalendario.classList.add("nombreCalendario")
                                    nombreCalendario.innerText = nombre
                                    datosCalendario.appendChild(nombreCalendario)
                                    titulo = document.createElement("p")
                                    titulo.classList.add("tituloDatoCalendario")
                                    titulo.innerText = "Apartamento sincronizado"
                                    datosCalendario.appendChild(titulo)
                                    const apartamentoEnlazado = document.createElement("div")
                                    apartamentoEnlazado.classList.add("apartamentoEnlazado")
                                    apartamentoEnlazado.innerText = apartamentoUI + ` (${apartamentoIDV})`
                                    datosCalendario.appendChild(apartamentoEnlazado)
                                    titulo = document.createElement("p")
                                    titulo.classList.add("tituloDatoCalendario")
                                    titulo.innerText = "URL del calendario"
                                    datosCalendario.appendChild(titulo)
                                    const urlCalendarioImportado = document.createElement("div")
                                    urlCalendarioImportado.classList.add("urlCalendario")
                                    urlCalendarioImportado.innerText = url
                                    datosCalendario.appendChild(urlCalendarioImportado)
                                    titulo = document.createElement("p")
                                    titulo.classList.add("tituloDatoCalendario")
                                    titulo.innerText = "URL del calendario para exportar formato ICS"
                                    datosCalendario.appendChild(titulo)
                                    const urlCalendarioExportarICS = document.createElement("div")
                                    urlCalendarioExportarICS.classList.add("urlCalendario")
                                    urlCalendarioExportarICS.innerText = "https://" + dominioActual + "/calendarios_compartidos/formato:ics_v2/" + publicoUID
                                    datosCalendario.appendChild(urlCalendarioExportarICS)
                                    contenedorCalendarioIndiviudal.appendChild(datosCalendario)

                                    titulo = document.createElement("p")
                                    titulo.classList.add("tituloDatoCalendario")
                                    titulo.innerText = "URL del calendario para exportar formato ICS Airbnb"
                                    datosCalendario.appendChild(titulo)
                                    const urlCalendarioExportarICSAirbnbn = document.createElement("div")
                                    urlCalendarioExportarICSAirbnbn.classList.add("urlCalendario")
                                    urlCalendarioExportarICSAirbnbn.innerText = "https://" + dominioActual + "/calendarios_compartidos/formato:ics_v2_airbnb/" + publicoUID
                                    datosCalendario.appendChild(urlCalendarioExportarICSAirbnbn)
                                    contenedorCalendarioIndiviudal.appendChild(datosCalendario)


                                    const contenedorBotonesCalendario = document.createElement("div")
                                    contenedorBotonesCalendario.classList.add("contenedorBotonesCalendario")
                                    const botonEliminar = document.createElement("div")
                                    botonEliminar.classList.add("botonCalendario")
                                    botonEliminar.innerText = "Eliminar calendario"
                                    botonEliminar.addEventListener("click", () => {
                                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                        const contenedorElimianr = document.createElement("div")
                                        contenedorElimianr.classList.add("contenedorEliminar")
                                        const titulo = document.createElement("div")
                                        titulo.classList.add("tituloInmersivo")
                                        titulo.innerText = `Eliminar el calendario sincronizado de Airbnb`
                                        contenedorElimianr.appendChild(titulo)
                                        const mensaje = document.createElement("div")
                                        mensaje.classList.add("mensaje")
                                        mensaje.innerText = `¬øEstas de acuerdo en eliminar el calendario con nombre ${nombre} enlazado al ${apartamentoUI}?`
                                        contenedorElimianr.appendChild(mensaje)
                                        const botonEliminar = document.createElement("div")
                                        botonEliminar.classList.add("boton")
                                        botonEliminar.innerText = "Eliminar calendario definitivamente"
                                        botonEliminar.addEventListener("click", async () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const metadatosPantallaCarga = {
                                                mensaje: "Actualizando calendario...",
                                                instanciaUID: instanciaUID,
                                            }
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                            const transaccion = {
                                                zona: "administracion/configuracion/calendariosSincronizados/airbnb/eliminarCalendario",
                                                calendarioUID: calendarioUID
                                            }
                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`).forEach((pantalla) => {
                                                document.body.style.removeProperty("overflow")
                                                pantalla.remove()
                                            })
                                            const selectorCalendariosSincronizados = document.querySelector(`[componente=calendariosSincronizados]`)
                                            if (respuestaServidor?.error) {
                                                if (selectorCalendariosSincronizados) {
                                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                                }
                                            }
                                            if (respuestaServidor?.ok) {
                                                if (selectorCalendariosSincronizados) {
                                                    selectorCalendariosSincronizados.querySelector(`[calendarioUID="${calendarioUID}"]`).remove()
                                                }
                                            }
                                        })
                                        contenedorElimianr.appendChild(botonEliminar)
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("boton")
                                        botonCancelar.innerText = "Cancelar y volver a la lista de calendarios"
                                        botonCancelar.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        contenedorElimianr.appendChild(botonCancelar)
                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        pantallaInmersiva.querySelector("[contenedor=contenidoAdvertenciaInmersiva]").appendChild(contenedorElimianr)
                                        document.body.appendChild(pantallaInmersiva)
                                    })
                                    contenedorBotonesCalendario.appendChild(botonEliminar)
                                    const botonModificar = document.createElement("a")
                                    botonModificar.classList.add("botonCalendario")
                                    botonModificar.innerText = "Modificar calendario"
                                    botonModificar.href = `/administracion/configuracion/calendarios_sincronizados/calendario:${calendarioUID}`
                                    botonModificar.addEventListener("click", (boton) => {
                                        boton.preventDefault()
                                        const vista = `/administracion/configuracion/calendarios_sincronizados/calendario:${calendarioUID}`
                                        const navegacion = {
                                            vista: vista,
                                            tipoOrigen: "menuNavegador"
                                        }
                                        casaVitini.shell.navegacion.controladorVista(navegacion)
                                    })
                                    contenedorBotonesCalendario.appendChild(botonModificar)
                                    contenedorCalendarioIndiviudal.appendChild(contenedorBotonesCalendario)
                                    selectorContenedor.appendChild(contenedorCalendarioIndiviudal)
                                }
                            }
                        }
                    } else if (granuladoURL.parametros.calendario) {
                        const calenadrioUID = granuladoURL.parametros.calendario
                        //descargamos aqui el archivo, verificamos la plataforma y en base a ello damos la plantilla correspondiente
                        const transaccion = {
                            zona: "/administracion/configuracion/calendariosSincronizados/detallesDelCalendario",
                            calendarioUID: calenadrioUID
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const selectorEspacioCalendarios = document.querySelector("[componente=calendariosSincronizados]")
                            const marcoError = document.createElement("div")
                            marcoError.classList.add("marcoError")
                            const errorInfo = document.createElement("div")
                            errorInfo.classList.add("errorInfoCalendarios")
                            errorInfo.innerText = "No existe ning√∫n calendario con este identificador, por favor revisa el identificador."
                            marcoError.appendChild(errorInfo)
                            selectorEspacioCalendarios.appendChild(marcoError)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesDelCalendario = respuestaServidor.ok
                            const plataformaOrigen = detallesDelCalendario.plataformaOrigenIDV
                            if (plataformaOrigen === "airbnb") {
                                casaVitini.administracion.configuracion.calendariosSincronizados.airbnb.editarCalendarioUI(detallesDelCalendario)
                            }
                        }
                    }
                },
                airbnb: {
                    crearCalendario: {
                        arranque: async () => {
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "administracion/configuracion")
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const selectorEspacioFormulario = document.querySelector("[componente=espacioFormulario_Airbnb]")
                            selectorEspacioFormulario.innerHTML = null
                            const formularioUI = await casaVitini.administracion.configuracion.calendariosSincronizados.airbnb.formularioCalendario({
                                modo: "crear"
                            })
                            formularioUI.setAttribute("instanciaUID", instanciaUID)
                            selectorEspacioFormulario.appendChild(formularioUI)
                            const botonCrearCalendario = document.createElement("div")
                            botonCrearCalendario.classList.add("botonCrearCalendario")
                            botonCrearCalendario.innerText = "Crear perfil del calenadrio sincronizado"
                            botonCrearCalendario.addEventListener("click", async () => {
                                const transaccion = {
                                    zona: "administracion/configuracion/calendariosSincronizados/airbnb/crearCalendario"
                                }
                                document.querySelectorAll("[campo]").forEach((campo) => {
                                    const nombreCampo = campo.getAttribute("campo")
                                    const valorCampo = campo.value
                                    transaccion[nombreCampo] = valorCampo
                                })
                                const metadatosPantallaCarga = {
                                    mensaje: "Creando calendario...",
                                    instanciaUID: instanciaUID,
                                }
                                document.body.style.overflow = "hidden";
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`).forEach((pantalla) => {
                                    document.body.style.removeProperty("overflow")
                                    pantalla.remove()
                                })
                                const selectorInstanciaFormularioUI = document.querySelector(`[componente=formularioUI][instanciaUID="${instanciaUID}"]`)
                                if (respuestaServidor?.error) {
                                    if (selectorInstanciaFormularioUI) {
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                    }
                                }
                                if (respuestaServidor?.ok) {
                                    if (selectorInstanciaFormularioUI) {
                                        const nuevoUID = respuestaServidor.nuevoUID
                                        const vista = `/administracion/configuracion/calendarios_sincronizados/calendario:${nuevoUID}`
                                        const navegacion = {
                                            vista: vista,
                                            //tipoOrigen: "menuNavegador"
                                        }
                                        casaVitini.shell.navegacion.controladorVista(navegacion)
                                    }
                                }
                            })
                            selectorEspacioFormulario.appendChild(botonCrearCalendario)
                        }
                    },
                    formularioCalendario: async (data) => {

                        const modo = data.modo

                        const formularioUI = document.createElement("div")
                        formularioUI.classList.add("formularioUI")
                        formularioUI.setAttribute("componente", "formularioUI")
                        let definicion = document.createElement("p")
                        definicion.classList.add("plataforma")
                        definicion.innerText = "Plataforma Airbnb"
                        //formularioUI.appendChild(definicion)
                        definicion = document.createElement("p")
                        definicion.classList.add("definicion")
                        definicion.innerText = "Define un nombre para el calendario.Utiliza este nombre en el futuro para poder recordar algo descriptivo de este calendario.Pon el nombre que creas m√°s recordativo."
                        formularioUI.appendChild(definicion)
                        const nombreCalendario = document.createElement("input")
                        nombreCalendario.classList.add("nombreCalendario")
                        nombreCalendario.setAttribute("campo", "nombre")
                        nombreCalendario.placeholder = "Escribe un nombre para este calendario"
                        formularioUI.appendChild(nombreCalendario)
                        definicion = document.createElement("p")
                        definicion.classList.add("definicion")
                        definicion.innerText = "Selecciona el apartamento con el que vas a enlazar este calendario.Los calendarios de Airbnb se enlazan por apartamento.Cada calendario de airbnb es un apartamento"
                        formularioUI.appendChild(definicion)
                        const tipoApartamentoUI = document.createElement("select")
                        tipoApartamentoUI.classList.add("listaApartamentos")
                        tipoApartamentoUI.setAttribute("campo", "apartamentoIDV")
                        tipoApartamentoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)
                        const tipoApartamentoInicio = document.createElement("option");
                        tipoApartamentoInicio.value = "";
                        tipoApartamentoInicio.selected = true;
                        tipoApartamentoInicio.disabled = true;
                        tipoApartamentoInicio.text = "Seleccionar el apartamento a enlazar";
                        tipoApartamentoUI.add(tipoApartamentoInicio);
                        const apartamentosArray = await casaVitini.administracion.componentes.obtenerApartamentos()
                        if (apartamentosArray.length === 0) {
                            const opcion = document.createElement("option");
                            opcion.value = "";
                            opcion.disabled = true;
                            opcion.text = "No hay ningun apartamento disponible";
                            tipoApartamentoUI.add(opcion);
                        }
                        if (apartamentosArray.length > 0) {
                            apartamentosArray.forEach((detallesApartamento) => {
                                const apartamentoIDV = detallesApartamento.apartamentoIDV
                                const aparatmentoUI = detallesApartamento.apartamentoUI
                                const opcion = document.createElement("option");
                                opcion.value = apartamentoIDV;
                                opcion.text = aparatmentoUI;
                                tipoApartamentoUI.add(opcion);
                            })
                        }
                        formularioUI.appendChild(tipoApartamentoUI)

                        if (modo === "editar") {

                            const contenedorURL = document.createElement("div")
                            contenedorURL.classList.add(
                                "padding10",
                                "flexVertical",
                                "gap6"
                            )
                            formularioUI.appendChild(contenedorURL)

                            definicion = document.createElement("p")
                            definicion.innerText = "Url del calendario de Casa Vitini para exportar. Copia esta url en el otro sistema para sincronziar el calenedario de Casa Vitini con la plataforma de terceros compatible con ICS"
                            contenedorURL.appendChild(definicion)

                            const icsv2ui = document.createElement("p")
                            icsv2ui.innerText = "Formato: ICS V2"
                            icsv2ui.classList.add(
                                "negrita"
                            )
                            contenedorURL.appendChild(icsv2ui)

                            const urlCalendarioExport = document.createElement("p")
                            urlCalendarioExport.classList.add(
                                "breakWordkAll"
                            )
                            urlCalendarioExport.setAttribute("data", "urlExportacion")
                            contenedorURL.appendChild(urlCalendarioExport)

                            const icsv2uiAirbnb = document.createElement("p")
                            icsv2uiAirbnb.innerText = "Formato: ICS V2 Airbnb"
                            icsv2uiAirbnb.classList.add(
                                "negrita"
                            )
                            contenedorURL.appendChild(icsv2uiAirbnb)

                            const urlCalendarioExport_airbnb = document.createElement("p")
                            urlCalendarioExport_airbnb.classList.add(
                                "breakWordkAll"
                            )
                            urlCalendarioExport_airbnb.setAttribute("data", "urlExportacionAirbnbn")
                            contenedorURL.appendChild(urlCalendarioExport_airbnb)


                            definicion = document.createElement("p")
                            definicion.classList.add("definicion")
                            definicion.innerText = "Copia aqu√≠ la url del calendario de Airbnb, la url debe de ser la que comparte Airbnb para sincronizar calendarios en formato iCal, la url debe de estar en https"
                            formularioUI.appendChild(definicion)
                            const urlCalendario = document.createElement("input")
                            urlCalendario.classList.add("nombreCalendario")
                            urlCalendario.setAttribute("campo", "url")
                            urlCalendario.placeholder = "Escribe la url del calendario"
                            formularioUI.appendChild(urlCalendario)
                        }

                        return formularioUI
                    },
                    editarCalendarioUI: async (detallesDelCalendario) => {

                        const calendarioUID = detallesDelCalendario.calendarioUID
                        const nombre = detallesDelCalendario.nombre
                        const url = detallesDelCalendario.url
                        const apartamentoIDV = detallesDelCalendario.apartamentoIDV
                        const plataformaOrigen = detallesDelCalendario.plataformaOrigenIDV
                        const apartamentoUI = detallesDelCalendario.apartamentoUI
                        const publicoUID = detallesDelCalendario.publicoUID
                        const dominioActual = window.location.hostname

                        const urlExportacion = "https://" + dominioActual + "/calendarios_compartidos/formato:ics_v2/" + publicoUID
                        const urlExportacionAirbnb = "https://" + dominioActual + "/calendarios_compartidos/formato:ics_v2_airbnb/" + publicoUID


                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const plataformaOrigenUI = plataformaOrigen.charAt(0).toUpperCase() + plataformaOrigen.slice(1);
                        const selectorTitulo = document.querySelector("[componente=titutoGlobal]")
                        selectorTitulo.innerText = `Detalles del calendario de ${plataformaOrigenUI}`
                        const selectorEspacioCalendarios = document.querySelector("[componente=calendariosSincronizados]")
                        const formularioUI = await casaVitini.administracion.configuracion.calendariosSincronizados.airbnb.formularioCalendario({
                            modo: "editar"
                        });
                        formularioUI.setAttribute("instanciaUID", instanciaUID)
                        formularioUI.setAttribute("calendarioUID", calendarioUID)
                        const nombreInput = formularioUI.querySelector("[campo=nombre]");
                        nombreInput.value = nombre;
                        nombreInput.setAttribute("valorInicial", nombre);
                        const apartamentoIDVSelect = formularioUI.querySelector("[campo=apartamentoIDV]");
                        apartamentoIDVSelect.value = apartamentoIDV;
                        apartamentoIDVSelect.setAttribute("valorInicial", apartamentoIDV);
                        const urlExportacionUI = formularioUI.querySelector("[data=urlExportacion]");
                        urlExportacionUI.innerText = urlExportacion;
                        const urlExportacionAirbnbUI = formularioUI.querySelector("[data=urlExportacionAirbnbn]");
                        urlExportacionAirbnbUI.innerText = urlExportacionAirbnb;
                        const urlInput = formularioUI.querySelector("[campo=url]");
                        urlInput.value = url;
                        urlInput.setAttribute("valorInicial", url);
                        selectorEspacioCalendarios.appendChild(formularioUI);
                        const marcoBotones = document.createElement("div")
                        marcoBotones.classList.add("marcoBotones")
                        const botonCrearCalendario = document.createElement("div")
                        botonCrearCalendario.classList.add("botonCrearCalendario")
                        botonCrearCalendario.innerText = "Guardar cambios"
                        botonCrearCalendario.addEventListener("click", async () => {
                            const transaccion = {
                                zona: "administracion/configuracion/calendariosSincronizados/airbnb/actualizarCalendario",
                                calendarioUID: calendarioUID
                            }
                            document.querySelectorAll("[campo]").forEach((campo) => {
                                const nombreCampo = campo.getAttribute("campo")
                                const valorCampo = campo.value
                                transaccion[nombreCampo] = valorCampo

                            })
                            const metadatosPantallaCarga = {
                                mensaje: "Actualizando calendario...",
                                instanciaUID: instanciaUID,
                            }
                            document.body.style.overflow = "hidden";
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`).forEach((pantalla) => {
                                document.body.style.removeProperty("overflow")
                                pantalla.remove()
                            })
                            const selectorInstanciaFormularioUI = document.querySelector(`[componente=formularioUI][instanciaUID="${instanciaUID}"]`)
                            if (respuestaServidor?.error) {
                                if (selectorInstanciaFormularioUI) {
                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                }
                            }
                            if (respuestaServidor?.ok) {
                                if (selectorInstanciaFormularioUI) {
                                    document.querySelectorAll("[campo]").forEach((campo) => {
                                        const valorCampo = campo.value
                                        const valorInicial = campo.getAttribute("valorInicial")
                                        if (valorCampo !== valorInicial) {
                                            campo.setAttribute("valorInicial", valorCampo)
                                        }
                                    })
                                }
                            }
                        })
                        marcoBotones.appendChild(botonCrearCalendario)
                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("botonCrearCalendario")
                        botonCancelar.innerText = "Restablecer cambios"
                        botonCancelar.addEventListener("click", async () => {
                            document.querySelectorAll("[campo]").forEach((campo) => {
                                const valorInicial = campo.getAttribute("valorInicial")
                                campo.value = valorInicial
                            })
                        })
                        marcoBotones.appendChild(botonCancelar)
                        selectorEspacioCalendarios.appendChild(marcoBotones)
                    }
                },
            },
            limitesReservaPublica: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const transaccion = {
                        zona: "administracion/configuracion/limitesReservaPublica/obtenerConfiguracion"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionGlobal = respuestaServidor?.ok
                        const diasMaximosReserva = configuracionGlobal.diasMaximosReserva
                        const diasAntelacionReserva = configuracionGlobal.diasAntelacionReserva
                        const limiteFuturoReserva = configuracionGlobal.limiteFuturoReserva
                        const horaLimiteDelMismoDia = configuracionGlobal?.horaLimiteDelMismoDia || ""

                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.innerText = "Determina los l√≠mites de las reservas que pre confirman los clientes desde Casa Vitini. A diferencia de las reservas que se confirman en el panel de administraci√≥n. Las reservas que preconfirman los clientes tienen unos l√≠mites. Como unos d√≠as de antelaci√≥n, n√∫mero de d√≠as m√°ximos de duraci√≥n o un l√≠mite futuro para aceptar reservas hasta un punto en el futuro."
                        contenedorConfiguracionGlobal.appendChild(informacion)
                        let bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        let tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.innerText = "Dias de antelaci√≥n"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        let descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.innerText = "Determina el n√∫mero de d√≠as de antelaci√≥n escribiendo el n√∫mero de d√≠as de antelaci√≥n.Si, por ejemplo, escribes un m√≠nimo de diez d√≠as de antelaci√≥n, se aceptar√°n reservas a partir del d√≠a n√∫mero 11 desde el d√≠a presente. El d√≠a presente cuenta como d√≠a 0. Si, por ejemplo quisieras aceptar reservas para el mismo d√≠a, entonces establece los d√≠as de antelaci√≥n en 0"
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        let valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "diasAntelacionReserva")
                        valorConfiguracion.setAttribute("valorInicial", diasAntelacionReserva)
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.limitesReservaPublica.controlCampo)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = diasAntelacionReserva
                        valorConfiguracion.placeholder = "Determina el numero de d√≠as de antelaci√≥n"
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        const horaLimite = casaVitini.administracion.configuracion.limitesReservaPublica.componentesUI.horaDelMismoDia(horaLimiteDelMismoDia)
                        bloqueConfiguracion.appendChild(horaLimite)

                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.innerText = "Duraci√≥n m√°xima de la reserva"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.innerText = "Determina el numero maximo de d√≠as con noche que puede tener una reserva "
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "diasMaximosReserva")
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.limitesReservaPublica.controlCampo)
                        valorConfiguracion.setAttribute("valorInicial", diasMaximosReserva)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = diasMaximosReserva
                        valorConfiguracion.placeholder = "Selecciona una hora de salida, por ejemplo 19:00 "
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.innerText = "L√≠mite futuro para aceptar reservas"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.innerText = "Determina el n√∫mero m√°ximo de d√≠as en lo que se est√° dispuesto a aceptar una reserva. Por ejemplo, si no aceptas reservas m√°s all√° de un a√±o."
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "limiteFuturoReserva")
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.limitesReservaPublica.controlCampo)
                        valorConfiguracion.setAttribute("valorInicial", limiteFuturoReserva)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = limiteFuturoReserva
                        valorConfiguracion.placeholder = "Determinal el limite futuro en numero de dias"
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        marcoElastico.appendChild(contenedorConfiguracionGlobal)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.setAttribute("contenedor", "botones")
                        contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("administracion_configuracion_boton")
                        botonGuardarCambios.innerText = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.limitesReservaPublica.guardarCambios)
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("administracion_configuracion_boton")
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.limitesReservaPublica.cancelarCambios)
                        botonCancelarCambios.innerText = "Cancelar cambios"
                        contenedorBotones.appendChild(botonCancelarCambios)
                        marcoElastico.appendChild(contenedorBotones)
                    }
                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },
                guardarCambios: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando l√≠mites de las reservas p√∫blicas..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const campos = document.querySelectorAll("[campo]")
                    const transacccion = {
                        zona: "administracion/configuracion/limitesReservaPublica/guardarConfiguracion"
                    }
                    campos.forEach((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const valorCampo = campo.value
                        transacccion[nombreCampo] = String(valorCampo)
                    })
                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.administracion.configuracion.cancelarCambios()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const contenedorBotones = document.querySelector("[contenedor=botones]")
                        contenedorBotones.removeAttribute("style")
                        campos.forEach((campo) => {
                            campo.setAttribute("valorInicial", campo.value)
                        })
                    }
                },
                componentesUI: {
                    horaDelMismoDia: (horaLimiteDelMismoDia) => {
                        const contenedor = document.createElement("div")
                        contenedor.classList.add(
                            "ocultoInicialmente",
                            "flexVertical",
                            "padding6",
                            "gap6",
                            "backgroundGrey1",
                            "borderRadius12"
                        )

                        const descripcion = document.createElement("p")
                        descripcion.classList.add(
                            "padding6"
                        )
                        descripcion.innerText = `Cuando seleccionas 0 d√≠as de antelaci√≥n, permites aceptar reservas el mismo d√≠a presente. Es necesario determinar una hora m√°xima para aceptar reservas el mismo d√≠a. Por ejemplo, puedes no aceptar reservas m√°s tarde de las 11 de la ma√±ana. Escribe la hora en formato 24 H y con los minutos. Por ejemplo, si la hora m√°xima para hacer una reserva en el mismo d√≠a es a las once en punto de la ma√±ana, entonces escribe 11:00. Si es a las nueve de la ma√±ana en punto, entonces escribe 09:00. Siempre escribe los dos d√≠gitos tanto para la hora como para los minutos. Este campo solo es obligatorio rellenarlo cuando los d√≠as de antelaci√≥n son 0, si no puedes dejarlo en blanco.`
                        contenedor.appendChild(descripcion)

                        const campoHora = document.createElement("input")
                        campoHora.classList.add("administracion_configuracion_valorConfiguracionInput")
                        campoHora.placeholder = "Escribe la hora en formato 24H, tal que asi 00:00"
                        campoHora.setAttribute("campo", "horaLimiteDelMismoDia")
                        campoHora.addEventListener("input", casaVitini.administracion.configuracion.limitesReservaPublica.controlCampo)
                        campoHora.setAttribute("valorInicial", horaLimiteDelMismoDia)
                        campoHora.value = horaLimiteDelMismoDia
                        contenedor.appendChild(campoHora)
                        return contenedor
                    }

                }
            },
            interruptores: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const transaccion = {
                        zona: "administracion/configuracion/interruptores/obtenerInterruptores"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionGlobal = respuestaServidor.ok
                        const aceptarReservasPublicas = configuracionGlobal.aceptarReservasPublicas
                        const estados = [
                            {
                                estadoUI: "Activado",
                                estadoIDV: "activado"
                            },
                            {
                                estadoUI: "Desactivado",
                                estadoIDV: "desactivado"
                            }
                        ]
                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.innerText = "Los interruptores permiten activar o desactivar funciones espec√≠ficas. Como, por ejemplo, permitir reservas p√∫blicas o no.Puede activar y desactivar los interruptores y tener un control m√°s modular del sistema."
                        contenedorConfiguracionGlobal.appendChild(informacion)
                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.innerText = "Permitir reservas p√∫blicas"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.innerText = "Este interruptor determina si se deben permitir reservas p√∫blicas ahora mismo. Si el interruptor est√° activado, personas en todo el mundo podr√°n pre confirmar reservas desde Casa Vitini."
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        const io_aceptarReservasPublicas_UI = document.createElement("select")
                        io_aceptarReservasPublicas_UI.setAttribute("interruptor", "aceptarReservasPublicas")
                        io_aceptarReservasPublicas_UI.classList.add("administracion_configuracion_valorConfiguracionInput")
                        io_aceptarReservasPublicas_UI.setAttribute("valorInicial", aceptarReservasPublicas)
                        io_aceptarReservasPublicas_UI.addEventListener("change", (e) => {
                            const metadatos = {
                                interruptorIDV: "aceptarReservasPublicas",
                                estado: e.target.value
                            }
                            e.target.style.pointerEvents = "none"
                            casaVitini.administracion.configuracion.interruptores.actualizarInterruptor(metadatos)
                        })
                        bloqueConfiguracion.appendChild(io_aceptarReservasPublicas_UI)
                        let estadoInicial = document.createElement("option")
                        estadoInicial.value = "";
                        estadoInicial.disabled = true;
                        if (!aceptarReservasPublicas) {
                            estadoInicial.selected = true;
                        }
                        estadoInicial.text = "Seleccionar el estado del interruptor";
                        io_aceptarReservasPublicas_UI.add(estadoInicial);
                        for (const detallesDelEstado of estados) {
                            const estadoIDV = detallesDelEstado.estadoIDV
                            const estadoUI = detallesDelEstado.estadoUI
                            const opcion = document.createElement("option");
                            opcion.value = estadoIDV;
                            opcion.text = estadoUI;
                            if (estadoIDV === aceptarReservasPublicas) {
                                opcion.selected = true;
                            }
                            io_aceptarReservasPublicas_UI.add(opcion);
                        }
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        marcoElastico.appendChild(contenedorConfiguracionGlobal)
                    }
                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },
                actualizarInterruptor: async (interruptor) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const seccionUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const interruptorIDV = interruptor.interruptorIDV
                    const estado = interruptor.estado
                    const selectorListaEstadosInterruptor = seccionRenderizadaOrigen.querySelector(`[interruptor=${interruptorIDV}]`)
                    const valorInicial = selectorListaEstadosInterruptor.getAttribute("valorInicial")
                    const estadoSoliciado = selectorListaEstadosInterruptor.querySelector(`option[value=${estado}]`)
                    let procesandoEstadoUI
                    if (estado === "activado") {
                        procesandoEstadoUI = "Activando..."
                    }
                    if (estado === "desactivado") {
                        procesandoEstadoUI = "Desactivando..."
                    }
                    estadoSoliciado.text = procesandoEstadoUI
                    const transacccion = {
                        zona: "administracion/configuracion/interruptores/actualizarEstado",
                        interruptorIDV: interruptorIDV,
                        estado: estado
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${seccionUID}"]`)
                    if (!seccionRenderizada) { return }
                    selectorListaEstadosInterruptor.removeAttribute("style")
                    if (respuestaServidor?.error) {
                        let estadoInicialUI
                        if (estado === "activado") {
                            estadoInicialUI = "Activado"
                        }
                        if (estado === "desactivado") {
                            estadoInicialUI = "Desactivado"
                        }
                        estadoSoliciado.text = estadoInicialUI
                        selectorListaEstadosInterruptor.value = valorInicial
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        let estadoFinalUI
                        if (estado === "activado") {
                            estadoFinalUI = "Activado"
                        }
                        if (estado === "desactivado") {
                            estadoFinalUI = "Desactivado"
                        }
                        estadoSoliciado.text = estadoFinalUI
                        selectorListaEstadosInterruptor.setAttribute("valorInicial", estado)
                    }
                }
            },
            mensajesEnPortada: {

                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion/mensajesEnPortada")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    const soloDigitos = /^\d+$/;

                    if (comandoInicial === "mensajes_en_portada") {
                        casaVitini.administracion.configuracion.mensajesEnPortada.portadaUI()
                    } else if (soloDigitos.test(comandoInicial)) {
                        const transaccion = {
                            zona: "administracion/configuracion/mensajesEnPortada/detallesDelMensaje",
                            mensajeUID: comandoInicial
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)

                        if (!seccionRenderizada) { return }
                        if (respuestaServidor.error) {
                            const titulo = document.querySelector(".titulo")
                            titulo.innerText = "No existe ning√∫n mensaje de portada con el identificador: " + comandoInicial

                        }
                        main.setAttribute("zonaCSS", "administracion/configuracion/mensajesEnPortada/detallesDelMensaje")
                        casaVitini.administracion.configuracion.mensajesEnPortada.detallesDelMensaje.mensajeUI(respuestaServidor.ok)
                    } else {
                        const info = {
                            titulo: "Impuesto inexistente",
                            descripcion: "El impuesto al que hace referencia la URL no existe.Revisa el identificador.Quiz√°s fue un impuesto que tuviste hace un tiempo y que borraste"
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }

                },
                portadaUI: async () => {
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.innerHTML = null
                    const titulo = document.querySelector(".titulo")
                    titulo.innerText = "Mensajes en portada"

                    const transaccion = {
                        zona: "administracion/configuracion/mensajesEnPortada/obtenerMensajes"
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)


                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        titulo.innerText = respuestaServidor?.error
                    }
                    if (respuestaServidor?.ok) {
                        const mensajesEnPortada = respuestaServidor.ok

                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.innerText = "Los mensajes en portada son textos que aparecen en portada."
                        contenedorConfiguracionGlobal.appendChild(informacion)

                        const contenedor = document.createElement("div")
                        contenedor.classList.add("contenedor")

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("contenedorBotones")

                        const botonNuevoMensaje = document.createElement("a")
                        botonNuevoMensaje.classList.add("botonNuevoMensaje")
                        botonNuevoMensaje.innerText = "Nuevo mensaje en portada"
                        botonNuevoMensaje.setAttribute("href", "/administracion/configuracion/mensajes_en_portada/nuevo")
                        botonNuevoMensaje.setAttribute("vista", "/administracion/configuracion/mensajes_en_portada/nuevo")
                        botonNuevoMensaje.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        contenedorBotones.appendChild(botonNuevoMensaje)

                        contenedorBotones.appendChild(botonNuevoMensaje)

                        contenedor.appendChild(contenedorBotones)

                        const contenedorListaMensajes = document.createElement("div")
                        contenedorListaMensajes.classList.add("contenedorListaMensajes")

                        mensajesEnPortada.sort((a, b) => a.posicion - b.posicion);
                        const numeroTotalMensajes = mensajesEnPortada.length


                        let posicionContenedor = 0
                        for (const detallesDelMensaje of mensajesEnPortada) {

                            const mensajeUID = detallesDelMensaje.mensajeUID
                            const mensaje = detallesDelMensaje.mensaje
                            const estadoIDV = detallesDelMensaje.estadoIDV
                            const posicion = detallesDelMensaje.posicion

                            const configuracionMensaje = {
                                mensajeUID: mensajeUID,
                                mensaje: mensaje,
                                estadoIDV: estadoIDV,
                                posicion: posicion,
                                numeroTotalMensajes: numeroTotalMensajes
                            }
                            const mensajeUI = casaVitini.administracion.configuracion.mensajesEnPortada.mensajeUI(configuracionMensaje)
                            posicionContenedor = posicionContenedor + 1

                            const contenedorDePosicion = document.createElement("div")
                            contenedorDePosicion.classList.add("contenedorDePosicion")
                            contenedorDePosicion.setAttribute("posicion", posicionContenedor)

                            contenedorDePosicion.appendChild(mensajeUI)
                            contenedorListaMensajes.appendChild(contenedorDePosicion)

                        }
                        contenedor.appendChild(contenedorListaMensajes)
                        marcoElastico.appendChild(contenedor)
                    }
                },
                mensajeUI: (detallesDelMensaje) => {
                    const estados = {
                        activado: "Activado",
                        desactivado: "Desactivado"
                    }

                    const mensajeUID = detallesDelMensaje.mensajeUID
                    const mensaje = detallesDelMensaje.mensaje
                    const estadoIDV = detallesDelMensaje.estadoIDV
                    const posicion = Number(detallesDelMensaje.posicion)
                    const numeroTotalMensajes = detallesDelMensaje.numeroTotalMensajes


                    const contenedorMensaje = document.createElement("div")
                    contenedorMensaje.classList.add("contenedorMensaje")
                    contenedorMensaje.setAttribute("mensajeUID", mensajeUID)

                    const textoDelMensaje = document.createElement("div")
                    textoDelMensaje.classList.add("textoDelMensaje")
                    textoDelMensaje.innerText = mensaje
                    contenedorMensaje.appendChild(textoDelMensaje)

                    const contenedorBotonesMensaje = document.createElement("div")
                    contenedorBotonesMensaje.classList.add("contenedorBotonesMensaje")

                    const selectorEstado = document.createElement("select")
                    selectorEstado.setAttribute("componente", "selectorEstado")
                    selectorEstado.setAttribute("valorInicial", estadoIDV)
                    selectorEstado.classList.add("selector")
                    selectorEstado.addEventListener("change", (e) => {
                        const metadatos = {
                            estadoSeleccionado: e.target.value,
                            mensajeUID: mensajeUID
                        }
                        casaVitini.administracion.configuracion.mensajesEnPortada.actualizarEstado(metadatos)
                    })

                    const opcion = document.createElement("option");
                    opcion.text = "Seleccionar el estado del mensaje"
                    opcion.disabled = "true"
                    selectorEstado.add(opcion);

                    for (const [estadoIDV_, estadoUI] of Object.entries(estados)) {
                        const opcion = document.createElement("option");
                        opcion.value = estadoIDV_;
                        opcion.text = estadoUI
                        if (estadoIDV_ === estadoIDV) {
                            opcion.selected = "true"
                        }
                        selectorEstado.add(opcion);
                    }

                    contenedorBotonesMensaje.appendChild(selectorEstado)

                    const selectorPosicion = document.createElement("select")
                    selectorPosicion.classList.add("selector")
                    selectorPosicion.setAttribute("componente", "selectorPosicion")
                    selectorPosicion.addEventListener("change", (e) => {
                        const metadatos = {
                            nuevaPosicion: e.target.value,
                            mensajeUIDActual: mensajeUID
                        }
                        casaVitini.administracion.configuracion.mensajesEnPortada.moverPosicion(metadatos)
                    })

                    for (let index = 0; index < numeroTotalMensajes; index++) {
                        const posicionLoop = index + 1
                        const opcion = document.createElement("option");
                        opcion.value = posicionLoop;
                        if (posicion === posicionLoop) {
                            opcion.text = "Posicion " + posicionLoop;
                            opcion.disabled = "true"
                            opcion.selected = "true"
                        } else {
                            opcion.text = "Mover a la posicion " + posicionLoop;
                        }
                        selectorPosicion.add(opcion);
                    }
                    contenedorBotonesMensaje.appendChild(selectorPosicion)

                    const botonModificar = document.createElement("div")
                    botonModificar.classList.add("boton")
                    botonModificar.innerText = "Modificar mensaje"
                    botonModificar.setAttribute("href", "/administracion/configuracion/mensajes_en_portada/" + mensajeUID)
                    botonModificar.setAttribute("vista", "/administracion/configuracion/mensajes_en_portada/" + mensajeUID)
                    botonModificar.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.traductorCambioVista)
                    contenedorBotonesMensaje.appendChild(botonModificar)

                    const botonEliminar = document.createElement("div")
                    botonEliminar.classList.add("boton")
                    botonEliminar.innerText = "Eliminar mensaje"
                    botonEliminar.addEventListener("click", () => {
                        casaVitini.administracion.configuracion.mensajesEnPortada.eliminarMensaje.UI({ mensajeUID })
                    })
                    contenedorBotonesMensaje.appendChild(botonModificar)

                    contenedorBotonesMensaje.appendChild(botonEliminar)

                    contenedorMensaje.appendChild(contenedorBotonesMensaje)
                    return contenedorMensaje


                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },

                nuevo: {
                    arranque: () => {
                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "administracion/configuracion/mensajesEnPortada/nuevo")
                        const marcoElastico = document.querySelector("[componente=marcoElastico]")
                        marcoElastico.style.padding = "6px"
                        const botonCrearNuevoMensaje = document.querySelector("[boton=crearNuevoMensaje]")
                        botonCrearNuevoMensaje.addEventListener("click", casaVitini.administracion.configuracion.mensajesEnPortada.nuevo.crearMensaje)
                    },
                    crearMensaje: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = document.querySelector("[componente=textoDelMensaje]").value
                        const mensajeEsppera = "Creando nuevo mensaje en portada..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensajeEsppera
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const transacccion = {
                            zona: "administracion/configuracion/mensajesEnPortada/crearMensaje",
                            mensaje: mensaje
                        }



                        const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                        const seccionRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!seccionRenderizada)
                            seccionRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vistaFinal = `/administracion/configuracion/mensajes_en_portada`
                            const navegacion = {
                                vista: vistaFinal,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                detallesDelMensaje: {
                    mensajeUI: (detallesDelMensaje) => {


                        const titulo = document.querySelector("main.titulo")
                        titulo.innerText = "Detalles del mensaje"

                        const mensajeUID = detallesDelMensaje.mensajeUID
                        const mensaje = detallesDelMensaje.mensaje

                        const estado = detallesDelMensaje.estado
                        const posicion = detallesDelMensaje.posicion

                        const marcoElastico = document.querySelector("[componente=marcoElastico]")

                        const contenedorMensaje = document.createElement("div")
                        contenedorMensaje.classList.add("contenedorDelMensaje")
                        contenedorMensaje.setAttribute("mensajeUID", mensajeUID)

                        const textoDelMensaje = document.createElement("textarea")
                        textoDelMensaje.classList.add("textoDelMensaje")
                        textoDelMensaje.setAttribute("componente", "textoDelMensaje")
                        textoDelMensaje.value = mensaje
                        textoDelMensaje.placeholder = "Escribe el mensaje en portada aqu√≠"
                        contenedorMensaje.appendChild(textoDelMensaje)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("contenedorBotones")
                        const botonGuardar = document.createElement("div")
                        botonGuardar.classList.add("boton")
                        botonGuardar.addEventListener("click", casaVitini.administracion.configuracion.mensajesEnPortada.detallesDelMensaje.guardarMensaje)
                        botonGuardar.innerText = "Guardar mensaje"

                        contenedorBotones.appendChild(botonGuardar)
                        contenedorMensaje.appendChild(contenedorBotones)
                        marcoElastico.appendChild(contenedorMensaje)



                    },
                    guardarMensaje: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensajeUID = document.querySelector("[mensajeUID]").getAttribute("mensajeUID")
                        const mensaje = document.querySelector("[componente=textoDelMensaje]").value
                        const mensajeCarga = "Guardando mensaje..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensajeCarga
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const transacccion = {
                            zona: "administracion/configuracion/mensajesEnPortada/actualizarMensaje",
                            mensaje: mensaje,
                            mensajeUID: mensajeUID
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                        const seccionRenderizada = document.querySelector(`main [instanciaUID="${instanciaUID}"]`)
                        if (!seccionRenderizada)
                            seccionRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vistaFinal = `/administracion/configuracion/mensajes_en_portada`
                            const navegacion = {
                                vista: vistaFinal,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                eliminarMensaje: {
                    UI: (data) => {
                        const mensajeUID = data.mensajeUID

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.innerText = "Confirmas la eliminaci√≥n del mensaje de la portada"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.innerText = "Vas a eliminar este mensaje, no solo se borrar√° de la portada inmediatamente, sino que tambi√©n se eliminar√° de Casa Vitini de manera irreversible.Si solo deseas que no aparezca, puedes desactivarlo.S√≠, por el contrario, quieres eliminarlo, entonces est√° en el lugar correcto."

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.innerText = "Comfirmar la eliminacion del mensaje"
                        botonAceptar.addEventListener("click", () => {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            casaVitini.administracion.configuracion.mensajesEnPortada.eliminarMensaje.confirmar(mensajeUID)
                        })
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.innerText = "Cancelar la eliminaci√≥n"
                        document.querySelector("main").appendChild(pantallaInmersiva)
                    },
                    confirmar: async (mensajeUID) => {

                        const instanciaUID_pantalaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                        const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                        const mensaje = "Eliminando el mensaje..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID_pantalaDeCarga,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const transaccion = {
                            zona: "administracion/configuracion/mensajesEnPortada/eliminarMensaje",
                            mensajeUID: String(mensajeUID)
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)


                        const instanciaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUID_pantalaDeCarga}"]`)
                        instanciaRenderizada?.remove()
                        if (respuestaServidor?.error) {
                            if (!instanciaRenderizada) { return }
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const instanciaMainRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaMainRenderizada) { }
                            const mensajeUID = respuestaServidor.mensajeUID
                            instanciaMainRenderizada.querySelector(`[mensajeUID="${mensajeUID}"]`)?.remove()
                            casaVitini.administracion.configuracion.mensajesEnPortada.portadaUI()
                        }
                    }
                },
                moverPosicion: async (o) => {
                    const nuevaPosicion = o.nuevaPosicion
                    const mensajeUIDActual = o.mensajeUIDActual
                    const posicionDelMensajeActual = document.querySelector(`[mensajeUID="${mensajeUIDActual}"]`)
                        .closest("[posicion]").getAttribute("posicion")

                    const instanciaUID_pantalaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const mensaje = "Cambiando de posici√≥n..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID_pantalaDeCarga,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const transaccion = {
                        zona: "administracion/configuracion/mensajesEnPortada/moverPosicion",
                        mensajeUID: String(mensajeUIDActual),
                        nuevaPosicion: String(nuevaPosicion)
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                    const instanciaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUID_pantalaDeCarga}"]`)
                    instanciaRenderizada?.remove()
                    if (respuestaServidor?.error) {
                        if (!instanciaRenderizada) { return }
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const instanciaMainRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaMainRenderizada) { }
                        const mensajeSeleccionado = respuestaServidor.mensajeSeleccionado
                        const mensajeAfectado = respuestaServidor.mensajeAfectado

                        //{
                        //    "ok": "Se ha actualizado correctamente la posicion",
                        //    "mensajeSeleccionado": {
                        //        "uid": "19",
                        //        "mensaje": "etyeyt"
                        //    },
                        //    "mensajeAfectado": {
                        //        "uid": "21",
                        //        "mensaje": "tyrtty"
                        //    }
                        //}


                        const numeroTotalMensajes = document.querySelectorAll("[posicion]").length

                        const contenedorSeleccionado = document.querySelector(`[posicion="${nuevaPosicion}"]`)
                        contenedorSeleccionado.innerHTML = null

                        const configuracionMensaje = {
                            mensajeUID: mensajeSeleccionado.mensajeUID,
                            mensaje: mensajeSeleccionado.mensaje,
                            estadoIDV: mensajeSeleccionado.estadoIDV,
                            posicion: nuevaPosicion,
                            numeroTotalMensajes: numeroTotalMensajes
                        }
                        const mensajeUI_seleccionado = casaVitini.administracion.configuracion.mensajesEnPortada.mensajeUI(configuracionMensaje)
                        contenedorSeleccionado.appendChild(mensajeUI_seleccionado)

                        const contenedorAfectado = document.querySelector(`[posicion="${posicionDelMensajeActual}"]`)
                        contenedorAfectado.innerHTML = null
                        const configuracionMensajeAfectado = {
                            mensajeUID: mensajeAfectado.mensajeUID,
                            mensaje: mensajeAfectado.mensaje,
                            estadoIDV: mensajeAfectado.estadoIDV,
                            posicion: posicionDelMensajeActual,
                            numeroTotalMensajes: numeroTotalMensajes
                        }
                        const mensajeUI_afectado = casaVitini.administracion.configuracion.mensajesEnPortada.mensajeUI(configuracionMensajeAfectado)
                        contenedorAfectado.appendChild(mensajeUI_afectado)
                    }

                },
                actualizarEstado: async (interruptor) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const seccionUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const mensajeUID = interruptor.mensajeUID
                    const estadoIDV = interruptor.estadoSeleccionado
                    const selectorListaEstadosInterruptor = seccionRenderizadaOrigen.querySelector(`[mensajeUID="${mensajeUID}"] [componente=selectorEstado]`)
                    const valorInicial = selectorListaEstadosInterruptor.getAttribute("valorInicial")
                    const estadoSoliciado = selectorListaEstadosInterruptor.querySelector(`option[value=${estadoIDV}]`)
                    let procesandoEstadoUI
                    if (estadoIDV === "activado") {
                        procesandoEstadoUI = "Activando..."
                    }
                    if (estadoIDV === "desactivado") {
                        procesandoEstadoUI = "Desactivando..."
                    }
                    estadoSoliciado.text = procesandoEstadoUI
                    const transacccion = {
                        zona: "administracion/configuracion/mensajesEnPortada/actualizarEstado",
                        mensajeUID: mensajeUID,
                        estadoIDV: estadoIDV
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${seccionUID}"]`)

                    if (!seccionRenderizada) { return }
                    selectorListaEstadosInterruptor.removeAttribute("style")
                    if (respuestaServidor?.error) {
                        let estadoInicialUI
                        if (estadoIDV === "activado") {
                            estadoInicialUI = "Activado"
                        }
                        if (estadoIDV === "desactivado") {
                            estadoInicialUI = "Desactivado"
                        }
                        estadoSoliciado.text = estadoInicialUI
                        selectorListaEstadosInterruptor.value = valorInicial
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        let estadoFinalUI
                        if (estadoIDV === "activado") {

                            estadoFinalUI = "Activado"
                        }
                        if (estadoIDV === "desactivado") {
                            estadoFinalUI = "Desactivado"
                        }
                        estadoSoliciado.text = estadoFinalUI
                        selectorListaEstadosInterruptor.setAttribute("valorInicial", estadoIDV)
                    }
                }
            },
            telefonoPublicoWhatsApp: {
                arranque: async function () {
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    //  marcoElastico.style.gap = "4px"

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/telefonoPublicoWhatsApp/obtenerTelefono"
                    })
                    casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                    const ui_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!ui_renderizada) { return }
                    if (respuestaServidor?.error) {
                        marcoElastico.innerText = respuestaServidor?.error
                    }
                    if (respuestaServidor?.ok) {
                        const telefonoPublicoWhatsApp = respuestaServidor.ok.telefonoPublicoWhatsApp

                        const informacion = document.createElement("div")
                        informacion.classList.add(
                            "padding14"
                        )
                        informacion.innerText = "El n√∫mero de tel√©fono p√∫blico permite otorgar al cliente un icono de WhatsApp durante el proceso de reserva que le permite abrir en su tel√©fono un chat directo con CasaVitini. S√≠ se establece un tel√©fono p√∫blico, aparecer un icono de WhatsApp al cliente durante el proceso de reserva. Si elimina el n√∫mero de tel√©fono, el icono desaparecer√°. Ingresa el n√∫mero con el c√≥digo internacional. Los c√≥digos internaciones pueden escribirse con un signo m√°s +. Sustituye √©l m√°s por dos ceros."
                        marcoElastico.appendChild(informacion)


                        const titulo = document.createElement("div")
                        titulo.classList.add(
                            "padding14"
                        )
                        titulo.innerText = "N√∫mero de telefono p√∫blico WhatsApp"
                        marcoElastico.appendChild(titulo)

                        const campoNumero = document.createElement("input")
                        campoNumero.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                        campoNumero.placeholder = "N√∫mero de ejemplo 0000 000 00 00 00"
                        campoNumero.value = telefonoPublicoWhatsApp || ""
                        campoNumero.setAttribute("campo", "numero")
                        marcoElastico.appendChild(campoNumero)

                        const botonGuardar = document.createElement("div")
                        botonGuardar.style.width = "fit-content"
                        botonGuardar.classList.add(
                            "botonV1"
                        )
                        botonGuardar.innerText = "Actualizar numero de telefono p√∫blico"
                        botonGuardar.addEventListener("click", () => {
                            this.actualizarTelefono(campoNumero.value)
                        })
                        marcoElastico.appendChild(botonGuardar)

                    }
                },
                actualizarTelefono: async (data) => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando n√∫mero de telefono p√∫blico..."

                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    })
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/telefonoPublicoWhatsApp/actualizarNumero",
                        telefonoPublicoWhatsApp: data
                    })
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const telefonoPublicoWhatsApp = respuestaServidor.telefonoPublicoWhatsApp
                        const campo = document.querySelector("[campo=numero]")
                        campo.value = telefonoPublicoWhatsApp || ""
                    }
                }
            },
            mensajePrincipalEnReservaConfirmada: {
                arranque: async function () {
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    //  marcoElastico.style.gap = "4px"

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/mensajePrincipalEnReservaConfirmada/obtenerMensaje"
                    })
                    casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                    const ui_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!ui_renderizada) { return }
                    if (respuestaServidor?.error) {
                        marcoElastico.innerText = respuestaServidor?.error
                    }
                    if (respuestaServidor?.ok) {
                        const mensajePrincipalEnReservaConfirmada = respuestaServidor.ok.mensajePrincipalEnReservaConfirmada

                        const informacion = document.createElement("div")
                        informacion.classList.add(
                            "padding14"
                        )
                        informacion.innerText = "El mensaje principal en la reserva confirmada es el texto que le aparecer√° al cliente cuando este realiza una reserva publica por su cuenta desde Casa Vitini. Este mensaje le da la informaci√≥n principal que el cliente necesita tras confirmar su reserva. Como, por ejemplo, como realizar el pago, si debe de hacer alguna operaci√≥n de m√°s o no. Si lo desea, puede dejar en blanco este campo, aunque es recomendable siempre asistir con informaci√≥n tambi√©n en la parte final de la reserva."
                        marcoElastico.appendChild(informacion)


                        const titulo = document.createElement("div")
                        titulo.classList.add(
                            "padding14"
                        )
                        titulo.innerText = "Mensaje principal de informaci√≥n para la vista de reserva confirmada"
                        marcoElastico.appendChild(titulo)

                        const campoNumero = document.createElement("textarea")
                        campoNumero.classList.add("areaTexto")
                        campoNumero.placeholder = "Escriba un mensaje principal"
                        campoNumero.value = mensajePrincipalEnReservaConfirmada || ""
                        campoNumero.setAttribute("campo", "mensaje")
                        marcoElastico.appendChild(campoNumero)

                        const botonGuardar = document.createElement("div")
                        botonGuardar.style.width = "fit-content"
                        botonGuardar.classList.add(
                            "botonV1"
                        )
                        botonGuardar.innerText = "Actualizar numero de telefono p√∫blico"
                        botonGuardar.addEventListener("click", () => {
                            this.actualizarMensaje(campoNumero.value)
                        })
                        marcoElastico.appendChild(botonGuardar)

                    }
                },
                actualizarMensaje: async (data) => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando n√∫mero de telefono p√∫blico..."





                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    })
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/mensajePrincipalEnReservaConfirmada/actualizarMensaje",
                        mensajePrincipalEnReservaConfirmada: data
                    })
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const mensajePrincipalEnReservaConfirmada = respuestaServidor.mensajePrincipalEnReservaConfirmada
                        const campo = document.querySelector("[campo=mensaje]")
                        campo.value = mensajePrincipalEnReservaConfirmada || ""
                    }
                }
            }
        },
        clientes: {
            arranque: async () => {
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const main = document.querySelector("main")
                const instanciaUID = main.getAttribute("instanciaUID")
                const parametroBuscar = granuladoURL.parametros.buscar
                const parametros = granuladoURL.parametros
                const rawArray = granuladoURL.rawArray

                if (Object.keys(parametros).length === 0) {

                    main.setAttribute("zonaCSS", "administracion/clientes/buscador")
                    casaVitini.administracion.clientes.buscador.buscadorUI()
                } else if (parametros.buscar) {


                    main.setAttribute("zonaCSS", "administracion/clientes/buscador")
                    casaVitini.administracion.clientes.buscador.buscadorUI()
                    if (!granuladoURL.parametros.buscar) {
                        return
                    }

                    const campoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
                    campoBuscador.value = decodeURI(parametroBuscar)

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "cliente_uid") {
                            nombreColumnaIDV = "clienteUID"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        } else if ((nombreParametroIDV)?.toLowerCase() === "buscar") {
                            valorParametroURL = decodeURI(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                    })

                    casaVitini.administracion.clientes.buscador.mostrarClientesResueltos(parametrosFormatoIDV)
                } else if (parametros.cliente && comandoInicial === "editar") {

                    main.setAttribute("zonaCSS", "administracion/clientes/editar")
                    await casaVitini.administracion.clientes.detallesCliente.editar.UI()
                } else if (parametros.cliente) {

                    const clienteUID = parametros.cliente
                    await casaVitini.administracion.clientes.detallesCliente.portada.UI(clienteUID)
                    main.setAttribute("zonaCSS", "administracion/clientes/detalles")

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "reserva_uid") {
                            nombreColumnaIDV = "reservaUID"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV

                    })
                    parametrosFormatoIDV.clienteUID = parametros.cliente
                    await casaVitini.administracion.clientes.detallesCliente.portada.mostrarReservasDelClienteResueltas(parametrosFormatoIDV)
                }
            },
            nuevo: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/clientes/nuevo")
                    const selectorBotonCrearCliente = document.querySelector("[componente=botonCrearCliente]")
                    selectorBotonCrearCliente.addEventListener("click", casaVitini.administracion.clientes.nuevo.crearCliente)
                },
                crearCliente: async () => {
                    const selectorCampos = document.querySelectorAll("[campo]")
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando nuevo cliente..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const transaccion = {
                        zona: "administracion/clientes/crearCliente"
                    }
                    selectorCampos.forEach((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const datosCampo = campo.value
                        transaccion[nombreCampo] = datosCampo
                    })
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const nuevoUIDCliente = respuestaServidor?.nuevoUIDCliente
                        const vista = `/administracion/clientes/${nuevoUIDCliente}`
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                }
            },
            buscador: {
                buscadorUI: () => {
                    const espacioClientes = document.querySelector("[componente=espacioClientes]")
                    const campoBuscador = document.createElement("input")
                    campoBuscador.classList.add("campoBuscadorClientes")
                    campoBuscador.setAttribute("componente", "zonaNavegacionPaginadaClientes")
                    campoBuscador.setAttribute("componenteCampo", "buscadorPorId")
                    campoBuscador.setAttribute("placeholder", "Busque un cliente por nombre, por cualquier dato.")
                    campoBuscador.addEventListener("input", casaVitini.administracion.clientes.buscador.buscadorClientesPorCampo)
                    espacioClientes.appendChild(campoBuscador)



                },
                buscadorClientesPorCampo: async (cliente) => {

                    const instanciaUID = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")
                    const campo = document.querySelector("[componente=zonaNavegacionPaginadaClientes]")
                    const terminoBusqueda = cliente.target.value
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    document.querySelector("[areaGrid=gridClientes]")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[contenedor=filtrosOrden]")?.remove()

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.innerText = "Buscando..."

                    campo.parentNode.insertBefore(estadoBusquedaUI, campo.nextSibling);


                    const granuladorURL = casaVitini.utilidades.granuladorURL()
                    if (granuladorURL.parametros.buscar) {
                        history.replaceState(null, null, granuladorURL.directoriosFusion);
                    }
                    const campoVacio = cliente.target.value.length
                    if (campoVacio === 0) {
                        clearTimeout(casaVitini.componentes.temporizador);
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        document.querySelector("[areaGrid=gridClientes]")?.remove()
                        const vistaActual = document.querySelector("[componente=uiNavegacion]").getAttribute("vistaActual")
                        const resetUrl = "/administracion/clientes"
                        const titulo = "casavitini"
                        const estado = {
                            zona: vistaActual,
                            estadoInternoZona: "estado",
                            tipoCambio: "total"
                        }
                        window.history.replaceState(estado, titulo, resetUrl);
                        return
                    }
                    clearTimeout(casaVitini.componentes.temporizador);
                    casaVitini.componentes.temporizador = setTimeout(async () => {
                        const transaccion = {
                            zona: "administracion/clientes/buscar",
                            pagina: 1,
                            buscar: terminoBusqueda,
                            origen: "botonMostrarClientes",
                            tipoConstruccionGrid: "total",
                            granuladoURL: granuladorURL,
                            instanciaUID: instanciaUID
                        }


                        casaVitini.administracion.clientes.buscador.mostrarClientesResueltos(transaccion)
                    }, 1500);
                },
                mostrarClientesResueltos: async function (transaccion) {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacioComportamiento]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)
                    delete transaccion.instanciaUID
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const paginaTipo = transaccion.paginaTipo
                    const selectorAlmacen = document.querySelector("[areaGrid=gridClientes]")?.getAttribute("almacen") || "{}"
                    const almacen = JSON.parse(selectorAlmacen)
                    const busquedaInicial = transaccion.buscar || almacen?.buscar

                    let nombreColumnaURL
                    const nombreColumna = transaccion.nombreColumna
                    if ((nombreColumna)?.toLowerCase() === "clienteuid") {
                        nombreColumnaURL = "cliente_uid"
                    } else if (nombreColumna) {
                        nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                    }

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/clientes/buscar",
                        buscar: busquedaInicial,
                        nombreColumna: transaccion.nombreColumna,
                        sentidoColumna: transaccion.sentidoColumna,
                        pagina: Number(transaccion?.pagina || 1)
                    })


                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }

                    if (respuestaServidor?.error) {
                        //document.querySelector("[gridUID=gridClientes]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]").innerText = respuestaServidor?.error
                        return
                    }
                    if (respuestaServidor.totalClientes === 0) {
                        //document.querySelector("[gridUID=gridClientes]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]").innerText = "No se han encontrado clientes"
                        return
                    }
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    const clientes = respuestaServidor.clientes
                    const buscar = respuestaServidor.buscar
                    const paginasTotales = respuestaServidor.paginasTotales
                    const pagina = respuestaServidor.pagina
                    const sentidoColumna = respuestaServidor.sentidoColumna

                    const columnasGrid = [
                        {
                            columnaUI: "UID",
                            columnaIDV: "clienteUID",
                        },
                        {
                            columnaUI: "Nombre",
                            columnaIDV: "nombre",
                        },
                        {
                            columnaUI: "Primer apellido",
                            columnaIDV: "primerApellido",
                        },
                        {
                            columnaUI: "Segundo Apellido",
                            columnaIDV: "segundoApellido",
                        },
                        {
                            columnaUI: "Pasaporte",
                            columnaIDV: "pasaporte",
                        },
                        {
                            columnaUI: "Tel√©fono",
                            columnaIDV: "telefono",
                        },
                        {
                            columnaUI: "Mail",
                            columnaIDV: "mail",
                        },
                    ]
                    const parametrosFinales = {
                        buscar: buscar
                    }

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL;
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal
                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.clientes.buscador.mostrarClientesResueltos",
                        configuracionGrid: {
                            filas: clientes,
                            almacen: {
                                buscar: buscar,
                            },
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[componente=espacioClientes]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridClientes",
                            mascaraURL: {
                                mascara: "/administracion/clientes/cliente:",
                                parametro: "clienteUID"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })

                    const titulo = "Casa Vitini"
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "zonaNavegacionPaginadaClientes",
                        funcionPersonalizada: "administracion.clientes.buscador.mostrarClientesResueltos",
                        args: transaccion
                    }

                    if (origen === "url" || origen === "botonMostrarClientes") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }
                },
            },
            detallesCliente: {
                portada: {
                    UI: async (cliente) => {

                        const transaccion = {
                            zona: "administracion/clientes/detallesCliente",
                            clienteUID: cliente
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ning√∫n cliente con ese identificador.",
                                descripcion: "Revisa el identificador del cliente porque este no existe.Quiz√°s borraste el cliente que buscas.Quiz√°s te equivocaste al escribir el identificador del cliente."
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                        if (respuestaServidor?.ok) {

                            const detallesCliente = respuestaServidor?.ok
                            const clienteUID = detallesCliente.clienteUID
                            const nombre = detallesCliente.nombre
                            const primerApellido = detallesCliente?.primerApellido
                            const segundoApellido = detallesCliente?.segundoApellido
                            const pasaporte = detallesCliente.pasaporte
                            const telefono = detallesCliente?.telefono
                            const mail = detallesCliente?.mail
                            const notas = detallesCliente?.notas

                            let selectorEspacioClientes = document.querySelector("[componente=espacioClientes]")

                            let deatallesClienteUI = document.createElement("div")
                            deatallesClienteUI.classList.add("detallesClienteUIBotones")

                            let boton = document.createElement("a")
                            boton.classList.add(
                                "detallesClienteBoton",
                                "areaSinDecoracionPredeterminada"
                            )
                            boton.setAttribute("boton", "editar")
                            boton.innerText = "Editar datos"
                            boton.href = `/administracion/clientes/cliente:${clienteUID}/editar`
                            boton.setAttribute("vista", `/administracion/clientes/cliente:${clienteUID}/editar`)
                            boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                            deatallesClienteUI.appendChild(boton)
                            selectorEspacioClientes.appendChild(deatallesClienteUI)


                            deatallesClienteUI = document.createElement("div")
                            deatallesClienteUI.classList.add("detallesClienteUI")
                            deatallesClienteUI.setAttribute("clienteUID", clienteUID)
                            deatallesClienteUI.setAttribute("componente", "clienteUID" + clienteUID)
                            let bloqueHorizontal = document.createElement("div")
                            bloqueHorizontal.classList.add("detallesClienteBloqueHorizontal")
                            let bloqueVertical = document.createElement("div")
                            bloqueVertical.classList.add("detallesClienteBloqueVertical")
                            //Nombre
                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            const nombreTitulo = document.createElement("p")
                            nombreTitulo.classList.add("detallesClienteTituloDato")
                            nombreTitulo.innerText = "Nombre"
                            bloqueDato.appendChild(nombreTitulo)
                            let nombreDato = document.createElement("p")
                            nombreDato.classList.add("detallesClienteDatoCampo")
                            nombreDato.setAttribute("componenteDetalle", "nombre")
                            nombreDato.innerText = nombre
                            bloqueDato.appendChild(nombreDato)
                            //primerApellido
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            const primerApellidoTitulo = document.createElement("p")
                            primerApellidoTitulo.classList.add("detallesClienteTituloDato")
                            primerApellidoTitulo.innerText = "Primer apellido"
                            bloqueDato.appendChild(primerApellidoTitulo)
                            const primerApellidoDato = document.createElement("p")
                            primerApellidoDato.classList.add("detallesClienteDatoCampo")
                            primerApellidoDato.innerText = primerApellido
                            primerApellidoDato.setAttribute("componenteDetalle", "primerApellido")
                            bloqueDato.appendChild(primerApellidoDato)
                            //segundoApellido
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            const segundoApellidoTitulo = document.createElement("p")
                            segundoApellidoTitulo.classList.add("detallesClienteTituloDato")
                            segundoApellidoTitulo.innerText = "Segundo apellido"
                            bloqueDato.appendChild(segundoApellidoTitulo)
                            const segundoApellidoDato = document.createElement("p")
                            segundoApellidoDato.classList.add("detallesClienteDatoCampo")
                            segundoApellidoDato.innerText = segundoApellido
                            segundoApellidoDato.setAttribute("componenteDetalle", "segundoApellido")
                            bloqueDato.appendChild(segundoApellidoDato)
                            bloqueHorizontal.appendChild(bloqueVertical)
                            bloqueVertical = document.createElement("div")
                            bloqueVertical.classList.add("detallesClienteBloqueVertical")
                            //pasaporte
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            const pasaporteTitulo = document.createElement("p")
                            pasaporteTitulo.classList.add("detallesClienteTituloDato")
                            pasaporteTitulo.innerText = "Pasaporte"

                            bloqueDato.appendChild(pasaporteTitulo)
                            const pasaporteDato = document.createElement("p")
                            pasaporteDato.classList.add("detallesClienteDatoCampo")
                            pasaporteDato.setAttribute("componenteDetalle", "pasaporte")
                            pasaporteDato.innerText = pasaporte
                            bloqueDato.appendChild(pasaporteDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            if (telefono) {
                                bloqueVertical.appendChild(bloqueDato)
                            }

                            const telefonoTitulo = document.createElement("p")
                            telefonoTitulo.classList.add("detallesClienteTituloDato")
                            telefonoTitulo.innerText = "Tel√©fono"
                            bloqueDato.appendChild(telefonoTitulo)

                            const telefonoDato = document.createElement("p")
                            telefonoDato.classList.add("detallesClienteDatoCampo")
                            telefonoDato.setAttribute("componenteDetalle", "telefono")
                            telefonoDato.innerText = telefono
                            bloqueDato.appendChild(telefonoDato)

                            //correoElectronico
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            if (mail) {
                                bloqueVertical.appendChild(bloqueDato)

                            } const correoElectronicoTitulo = document.createElement("p")
                            correoElectronicoTitulo.classList.add("detallesClienteTituloDato")
                            correoElectronicoTitulo.innerText = "Correo electr√≥nico"
                            bloqueDato.appendChild(correoElectronicoTitulo)

                            const correoElectronicoDato = document.createElement("p")
                            correoElectronicoDato.classList.add("detallesClienteDatoCampo")
                            correoElectronicoDato.innerText = mail
                            correoElectronicoDato.setAttribute("componenteDetalle", "mail")
                            bloqueDato.appendChild(correoElectronicoDato)

                            bloqueHorizontal.appendChild(bloqueVertical)
                            deatallesClienteUI.appendChild(bloqueHorizontal)
                            bloqueHorizontal = document.createElement("div")
                            bloqueHorizontal.classList.add("detallesClienteBloqueHorizontal")
                            //notas
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueHorizontal.appendChild(bloqueDato)

                            const notasTitulo = document.createElement("p")
                            notasTitulo.classList.add("detallesClienteTituloDato")
                            notasTitulo.innerText = "Notas"
                            bloqueDato.appendChild(notasTitulo)
                            const notasDato = document.createElement("p")
                            notasDato.classList.add("detallesClienteDatoCampo")
                            notasDato.setAttribute("componenteDetalle", "notas")
                            notasDato.innerText = notas
                            bloqueDato.appendChild(notasDato)
                            if (notas) {
                                deatallesClienteUI.appendChild(bloqueHorizontal)

                            }
                            selectorEspacioClientes.appendChild(deatallesClienteUI)
                            const contenedorResultados = document.createElement("div")
                            contenedorResultados.setAttribute("contenedor", "reservasDelCliente")
                            contenedorResultados.classList.add(
                                "flexVertical"
                            )
                            selectorEspacioClientes.appendChild(contenedorResultados)
                        }
                    },
                    mostrarReservasDelClienteResueltas: async function (transaccion) {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const selectorEspacio = document.querySelector("[componente=espacioComportamiento]")
                        selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)
                        delete transaccion.instanciaUID
                        const origen = transaccion.origen
                        delete transaccion.origen
                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                        delete transaccion.granuladoURL

                        const paginaTipo = transaccion.paginaTipo
                        let nombreColumnaURL
                        const nombreColumna = transaccion.nombreColumna
                        transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                        if ((nombreColumna)?.toLowerCase() === "reservauid") {
                            nombreColumnaURL = "reserva_uid"
                        } else if (nombreColumna) {
                            nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                        }
                        const selectorAlmacen = document.querySelector("[areaGrid=grisReservasDelCliente]")?.getAttribute("almacen") || "{}"
                        const almacen = JSON.parse(selectorAlmacen)
                        const clienteUID = transaccion.clienteUID || almacen?.clienteUID

                        const respuestaServidor = await casaVitini.shell.servidor({
                            zona: "administracion/clientes/reservasDelCliente",
                            pagina: transaccion.pagina,
                            nombreColumna: nombreColumna,
                            sentidoColumna: transaccion.sentidoColumna,
                            clienteUID: String(clienteUID),
                        })

                        const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                        if (!instanciaRenderizada) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.totalReservas === 0) {
                            const espacioClientes = document.querySelector("[componente=espacioClientes]")
                            document.querySelector("[gridUID=gridClientes]")?.remove()
                            document.querySelector("[componente=estadoBusqueda]")?.remove()
                            const estadoBusquedaUI = document.createElement("div")
                            estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                            estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                            estadoBusquedaUI.innerText = "Este cliente no tiene n√≠nguna reserva asociada a el"
                            espacioClientes.appendChild(estadoBusquedaUI)
                            return

                        }
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        const reservasDelCliente = respuestaServidor.reservas
                        const paginasTotales = respuestaServidor.paginasTotales
                        const pagina = respuestaServidor.pagina
                        const sentidoColumna = respuestaServidor.sentidoColumna
                        const columnasGrid = [
                            {
                                columnaUI: "Como",
                                columnaIDV: "como",
                            },
                            {
                                columnaUI: "Reserva",
                                columnaIDV: "reservaUID",
                            },
                            {
                                columnaUI: "Fecha de entrada",
                                columnaIDV: "fechaEntrada",
                            },
                            {
                                columnaUI: "Fecha de salida",
                                columnaIDV: "fechaSalida",
                            }
                        ]
                        const parametrosFinales = {}

                        if (nombreColumna) {
                            parametrosFinales.cliente = clienteUID
                            parametrosFinales.nombre_columna = nombreColumnaURL
                            parametrosFinales.sentido_columna = sentidoColumna
                        }
                        if (respuestaServidor?.pagina > 1 && paginasTotales > 1) {
                            parametrosFinales.pagina = pagina
                        }
                        const estructuraParametrosFinales = []
                        for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                            const estructura = `${parametroFinal}:${valorFinal}`
                            estructuraParametrosFinales.push(estructura)
                        }
                        let parametrosURLFInal = ""
                        if (estructuraParametrosFinales.length > 0) {
                            parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                        }

                        const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                        casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                            metodoSalida: "administracion.clientes.detallesCliente.portada.mostrarReservasDelClienteResueltas",
                            configuracionGrid: {
                                filas: reservasDelCliente,
                                almacen: {
                                    clienteUID: clienteUID,
                                },
                                sentidoColumna: sentidoColumna,
                                nombreColumna: nombreColumna,
                                pagina: pagina,
                                destino: "[contenedor=reservasDelCliente]",
                                columnasGrid: columnasGrid,
                                gridUID: "grisReservasDelCliente",
                                mascaraURL: {
                                    mascara: "/administracion/reservas/reserva:",
                                    parametro: "reservaUID"
                                },
                            },
                            configuracionPaginador: {
                                paginasTotales: paginasTotales,
                                granuladoURL: {
                                    parametros: parametrosFinales,
                                    directoriosFusion: granuladoURL.directoriosFusion
                                },
                            }
                        })

                        const titulo = "Administrar reservas"
                        const estado = {
                            zona: constructorURLFinal,
                            EstadoInternoZona: "estado",
                            tipoCambio: "parcial",
                            componenteExistente: "clienteUID" + clienteUID,
                            funcionPersonalizada: "administracion.clientes.detallesCliente.portada.mostrarReservasDelClienteResueltas",
                            args: transaccion
                        }
                        if (origen === "url" || origen === "botonMostrarClientes") {
                            window.history.replaceState(estado, titulo, constructorURLFinal);
                        } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                            window.history.pushState(estado, titulo, constructorURLFinal);
                        } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                            window.history.replaceState(estado, titulo, constructorURLFinal);
                        }
                    },
                    editar: () => {
                        let camposLectura = document.querySelectorAll("[componenteDetalle]")
                        camposLectura.forEach((campo) => {
                            let datoCampo = campo.innerText
                            let idCampo = campo.getAttribute("componenteDetalle")
                            campo.style.display = "none"
                            let tipoElemento
                            if (idCampo === "notas") {
                                tipoElemento = "textarea"
                            } else {
                                tipoElemento = "input"
                            }
                            let campoEditable = document.createElement(tipoElemento)
                            campoEditable.classList.add("detallesClienteCampoEditable")
                            campoEditable.value = datoCampo
                            campoEditable.setAttribute("componenteEditable", idCampo)
                            let selectorContenedor = campo.parentNode
                            selectorContenedor.appendChild(campoEditable)
                        })
                        document.querySelector("[boton=editar]").classList.add("estadoInicialInvisible")
                        document.querySelector("[boton=dejarDeEditar]").classList.remove("estadoInicialInvisible")
                        document.querySelector("[boton=eliminarCliente]").classList.remove("estadoInicialInvisible")
                        document.querySelector("[boton=guardarCambios]").classList.remove("estadoInicialInvisible")
                    },
                    dejarDeEditar: () => {
                        let camposEditables = document.querySelectorAll("[componenteEditable]")
                        camposEditables.forEach((campo) => {
                            campo.remove()
                        })
                        let camposLectura = document.querySelectorAll("[componenteDetalle]")
                        camposLectura.forEach((campo) => {
                            campo.removeAttribute("style")
                        })
                        document.querySelector("[boton=editar]").classList.remove("estadoInicialInvisible")
                        document.querySelector("[boton=dejarDeEditar]").classList.add("estadoInicialInvisible")
                        document.querySelector("[boton=guardarCambios]").classList.add("estadoInicialInvisible")
                        document.querySelector("[boton=guardarCambios]").classList.add("estadoInicialInvisible")
                    },
                    guardarCambios: async () => {
                        const campos = document.querySelectorAll("[componenteDetalle]")
                        const clienteUID = document.querySelector("[clienteUID]").getAttribute("clienteUID")
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                            instanciaUID: instanciaUID,
                            mensaje: "Actualizando datos del cliente..."
                        })

                        const datosParaActualizar = {
                            zona: "administracion/clientes/modificarCliente",
                            clienteUID: String(clienteUID)
                        }
                        campos.forEach((campo) => {
                            const campoDato = campo.value
                            const campoNombre = campo.getAttribute("componenteDetalle")
                            datosParaActualizar[campoNombre] = campoDato

                        })

                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()

                        if (respuestaServidor?.error) {
                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.shell.navegacion.controladorVista({
                                vista: "/administracion/clientes/" + clienteUID,
                                tipoOrigen: "menuNavegador"
                            })
                        }
                    },
                    eliminarCliente: {
                        UI: () => {

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.innerText = "Eliminar irreversiblemente al cliente"
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = "Eliminar irreversiblemente a un cliente, elimina la informaci√≥n de este cliente en su ficha y en las reservas donde estuvo.Es decir, desaparecer√° de las reservas donde estuvo este cliente."

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = "Comfirmar la eliminacion del cliente"
                            botonAceptar.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.portada.eliminarCliente.confirmar)
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.innerText = "Cancelar la eliminacion"

                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        confirmar: async () => {
                            const campoEditable = document.querySelectorAll("[componenteEditable]")
                            const clienteUID = document.querySelector("[clienteUID]").getAttribute("clienteUID")
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const metadatosPantallaCarga = {
                                mensaje: "Esperando al servidor...",
                                instanciaUID: instanciaUID,
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                            const selectorPantallaDeCargaSuperpuestaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            const datosParaActualizar = {
                                zona: "administracion/clientes/eliminar",
                                clienteUID: String(clienteUID)
                            }
                            campoEditable.forEach((campo) => {
                                const campoID = campo.getAttribute("componenteEditable")
                                const campoDato = campo.value
                                const campoEditable = document.querySelector(`[componenteEditable=${campoID}]`)
                                const campoLectura = document.querySelector(`[componenteDetalle=${campoID}]`)
                                if (campoEditable.value !== campoLectura.innerText) {
                                    datosParaActualizar[campoID] = campoDato
                                }
                            })
                            const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                            selectorPantallaDeCargaSuperpuestaRenderizada?.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                await casaVitini.shell.navegacion.controladorVista({
                                    vista: "administracion/clientes",
                                    tipoOrigen: "menuNavegador"
                                })
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.ok)
                            }
                        },
                    }
                },
                editar: {
                    UI: async () => {
                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                        const parametros = granuladoURL.parametros
                        const clienteUID = parametros.cliente

                        const transaccion = {
                            zona: "administracion/clientes/detallesCliente",
                            clienteUID: clienteUID
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ningun cliente con ese identificador",
                                descripcion: "Revisa el identificador del cliente porque este no existe.Quiz√°s borraste el cliente que buscas.Quiz√°s te equivocaste al escribir el identificador del cliente."
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesCliente = respuestaServidor?.ok
                            const clienteUID = detallesCliente.clienteUID
                            const nombre = detallesCliente.nombre
                            const primerApellido = detallesCliente?.primerApellido
                            const segundoApellido = detallesCliente?.segundoApellido
                            const pasaporte = detallesCliente.pasaporte
                            const telefono = detallesCliente?.telefono
                            const mail = detallesCliente?.mail
                            const notas = detallesCliente?.notas

                            let selectorEspacioClientes = document.querySelector("[componente=espacioClientes]")

                            let deatallesClienteUI = document.createElement("div")
                            deatallesClienteUI.classList.add("detallesClienteUIBotones")

                            selectorEspacioClientes.appendChild(deatallesClienteUI)
                            deatallesClienteUI = document.createElement("div")
                            deatallesClienteUI.classList.add("detallesClienteUI")
                            deatallesClienteUI.setAttribute("clienteUID", clienteUID)


                            let bloqueHorizontal = document.createElement("div")
                            bloqueHorizontal.classList.add("detallesClienteBloqueHorizontal")
                            let bloqueVertical = document.createElement("div")
                            bloqueVertical.classList.add("detallesClienteBloqueVertical")
                            //Nombre
                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let nombreTitulo = document.createElement("p")
                            nombreTitulo.classList.add("detallesClienteTituloDato")
                            nombreTitulo.innerText = "Nombre"
                            bloqueDato.appendChild(nombreTitulo)
                            let nombreDato = document.createElement("input")
                            nombreDato.classList.add(
                                "campoTexto"
                            )
                            nombreDato.setAttribute("componenteDetalle", "nombre")
                            nombreDato.value = nombre
                            bloqueDato.appendChild(nombreDato)
                            //primerApellido
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let primerApellidoTitulo = document.createElement("p")
                            primerApellidoTitulo.classList.add("detallesClienteTituloDato")
                            primerApellidoTitulo.innerText = "Primer apellido"
                            bloqueDato.appendChild(primerApellidoTitulo)
                            let primerApellidoDato = document.createElement("input")
                            primerApellidoDato.classList.add(
                                "campoTexto"

                            )
                            primerApellidoDato.value = primerApellido
                            primerApellidoDato.setAttribute("componenteDetalle", "primerApellido")
                            bloqueDato.appendChild(primerApellidoDato)
                            //segundoApellido
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let segundoApellidoTitulo = document.createElement("p")
                            segundoApellidoTitulo.classList.add("detallesClienteTituloDato")
                            segundoApellidoTitulo.innerText = "Segundo apellido"
                            bloqueDato.appendChild(segundoApellidoTitulo)
                            let segundoApellidoDato = document.createElement("input")
                            segundoApellidoDato.classList.add(
                                "campoTexto"

                            )
                            segundoApellidoDato.value = segundoApellido
                            segundoApellidoDato.setAttribute("componenteDetalle", "segundoApellido")
                            bloqueDato.appendChild(segundoApellidoDato)
                            bloqueHorizontal.appendChild(bloqueVertical)
                            bloqueVertical = document.createElement("div")
                            bloqueVertical.classList.add("detallesClienteBloqueVertical")
                            //pasaporte
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let pasaporteTitulo = document.createElement("p")
                            pasaporteTitulo.classList.add("detallesClienteTituloDato")
                            pasaporteTitulo.innerText = "Pasaporte"
                            bloqueDato.appendChild(pasaporteTitulo)
                            let pasaporteDato = document.createElement("input")
                            pasaporteDato.classList.add(
                                "campoTexto"

                            )
                            pasaporteDato.setAttribute("componenteDetalle", "pasaporte")
                            pasaporteDato.value = pasaporte
                            bloqueDato.appendChild(pasaporteDato)
                            //telefono
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let telefonoTitulo = document.createElement("p")
                            telefonoTitulo.classList.add("detallesClienteTituloDato")
                            telefonoTitulo.innerText = "Tel√©fono"
                            bloqueDato.appendChild(telefonoTitulo)
                            let telefonoDato = document.createElement("input")
                            telefonoDato.classList.add(
                                "campoTexto"

                            )
                            telefonoDato.setAttribute("componenteDetalle", "telefono")
                            telefonoDato.value = telefono
                            bloqueDato.appendChild(telefonoDato)
                            //correoElectronico
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let correoElectronicoTitulo = document.createElement("p")
                            correoElectronicoTitulo.classList.add("detallesClienteTituloDato")
                            correoElectronicoTitulo.innerText = "Correo electr√≥nico"
                            bloqueDato.appendChild(correoElectronicoTitulo)
                            let correoElectronicoDato = document.createElement("input")
                            correoElectronicoDato.classList.add(
                                "campoTexto"

                            )
                            correoElectronicoDato.value = mail
                            correoElectronicoDato.setAttribute("componenteDetalle", "correoElectronico")
                            bloqueDato.appendChild(correoElectronicoDato)
                            bloqueHorizontal.appendChild(bloqueVertical)
                            deatallesClienteUI.appendChild(bloqueHorizontal)
                            bloqueHorizontal = document.createElement("div")
                            bloqueHorizontal.classList.add("detallesClienteBloqueHorizontalNotas")
                            //notas
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueHorizontal.appendChild(bloqueDato)
                            let notasTitulo = document.createElement("p")
                            notasTitulo.classList.add("detallesClienteTituloDato")
                            notasTitulo.innerText = "Notas"
                            bloqueDato.appendChild(notasTitulo)
                            let notasDato = document.createElement("textarea")
                            notasDato.classList.add(
                                "campoTexto"

                            )
                            notasDato.setAttribute("componenteDetalle", "notas")
                            notasDato.rows = "4"
                            notasDato.value = notas
                            bloqueDato.appendChild(notasDato)
                            deatallesClienteUI.appendChild(bloqueHorizontal)

                            selectorEspacioClientes.appendChild(deatallesClienteUI)

                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add(
                                "flexVertical",
                                "gap6",
                                "padding12"
                            )
                            deatallesClienteUI.appendChild(contenedorBotones)


                            let boton = document.createElement("div")
                            boton.classList.add("detallesClienteBoton")
                            boton.setAttribute("boton", "guardarCambios")
                            boton.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.portada.guardarCambios)
                            boton.innerText = "Guardar cambios"
                            contenedorBotones.appendChild(boton)

                            boton = document.createElement("div")
                            boton.classList.add("detallesClienteBoton")
                            boton.setAttribute("boton", "eliminarCliente")
                            boton.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.portada.eliminarCliente.UI)
                            boton.innerText = "Eliminar cliente"
                            contenedorBotones.appendChild(boton)


                        }
                    },
                },

            },
            fusion: {
                portada: {
                    arranque: () => {
                        const selectorCampos = document.querySelectorAll("[campo]")
                        selectorCampos.forEach(campo => {
                            campo.addEventListener("input", (e) => {
                                const terminoBusqueda = e.target.value
                                const contenedor = e.target.getAttribute("campo")
                                casaVitini.administracion.clientes.fusion.listaResultadosUI({
                                    terminoBusqueda,
                                    contenedor
                                })
                            })
                        })
                        const botonFusion = document.querySelector("[boton=fusion]")
                        botonFusion.addEventListener("click", () => {

                            const clienteOrigen = document.querySelector("[contenedor=origen]").querySelector("[estado=seleccionado]")
                            const clienteDestino = document.querySelector("[contenedor=destino]").querySelector("[estado=seleccionado]")

                            if (!clienteOrigen) {
                                const m = "Por favor, primero selecciona el cliente de ORIGEN. Para ello, busca en el campo de b√∫squeda del campo cliente ORIGEN y selecciona el cliente ORIGEN."
                                casaVitini.ui.componentes.advertenciaInmersiva(m)
                            } else if (!clienteDestino) {
                                const m = "Por favor, primero selecciona el cliente de DESTINO; para ello, busca en el campo de b√∫squeda del campo cliente DESTINO y selecciona el cliente DESTINO."
                                casaVitini.ui.componentes.advertenciaInmersiva(m)
                            } else {
                                casaVitini.administracion.clientes.fusion.confirmarFusion.UI()
                            }
                        })
                    }
                },
                listaResultadosUI: async function (data) {

                    const contenedor = data.contenedor
                    const terminoBusqueda = data.terminoBusqueda
                    const selectorContenedor = document.querySelector(`[contenedor="${contenedor}"]`)
                    const selectorContenedorListaResultados = selectorContenedor.querySelector(`[componente=listaResultados]`)

                    const contenedorListaResultdos = document.createElement("div")
                    contenedorListaResultdos.setAttribute("componente", "listaResultados")
                    if (!selectorContenedorListaResultados) {
                        selectorContenedor.appendChild(contenedorListaResultdos)
                    }
                    const selectorContenedorListaResultados_renderizada = selectorContenedor.querySelector(`[componente=listaResultados]`)
                    selectorContenedorListaResultados_renderizada.innerHTML = null

                    const campoVacio = terminoBusqueda.length
                    if (campoVacio === 0) {
                        clearTimeout(casaVitini.componentes.temporizador);
                        selectorContenedorListaResultados_renderizada?.remove()
                        return
                    }

                    const info = document.createElement("p")
                    info.classList.add(
                        "infoBuscando",
                        "padding6"
                    )
                    info.setAttribute("componente", "info")
                    info.innerText = "Buscando..."

                    const selectorInfoRenderizada = selectorContenedor.querySelector("[componente=info]")
                    if (!selectorInfoRenderizada) {
                        selectorContenedorListaResultados_renderizada.appendChild(info)
                    }

                    clearTimeout(casaVitini.componentes.temporizador);
                    casaVitini.administracion.clientes.fusion.contenedorEventoTemporal[contenedor] = setTimeout(() => {
                        const instanciaUIDBuscador = casaVitini.utilidades.codigoFechaInstancia()
                        selectorContenedorListaResultados_renderizada.setAttribute("instanciaUIDBuscador", instanciaUIDBuscador)
                        this.transactor({
                            terminoBusqueda,
                            instanciaUIDBuscador,
                        })
                    }, 1500);
                },
                transactor: async function (data) {
                    const terminoBusqueda = data.terminoBusqueda
                    const instanciaUIDBuscador = data.instanciaUIDBuscador

                    const transaccion = {
                        zona: "administracion/clientes/buscar",
                        tipoBusqueda: "rapido",
                        buscar: terminoBusqueda
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                    const listaBuscadorRenderizada = document.querySelector(`[instanciaUIDBuscador="${instanciaUIDBuscador}"]`)
                    if (!listaBuscadorRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        return listaBuscadorRenderizada.querySelector("[componente=info]").innerHTML = respuestaServidor?.error
                    }

                    const resultadosClientes = respuestaServidor?.clientes
                    if (resultadosClientes.length === 0) {
                        return listaBuscadorRenderizada.querySelector("[componente=info]").innerHTML = "Nada encontrado"
                    }
                    listaBuscadorRenderizada.innerHTML = null
                    resultadosClientes.forEach((clienteEncontrado) => {
                        const clienteUID = clienteEncontrado.clienteUID
                        const nombre = clienteEncontrado.nombre
                        const primerApellido = clienteEncontrado.primerApellido
                        const segundoApellido = clienteEncontrado.segundoApellido
                        const pasaporte = clienteEncontrado.pasaporte
                        const bloqueCliente = document.createElement("div")
                        bloqueCliente.classList.add(
                            "administracionReservaDetallesBuscadorRapidoBloqueCliente",
                            "borderRadius12"
                        )
                        bloqueCliente.setAttribute("clienteUID", clienteUID)
                        bloqueCliente.setAttribute("componente", "elementoResultadosBuscadorRapido")
                        bloqueCliente.addEventListener("click", (e) => {

                            const selectorResultadosContenedor = e.target.closest("[componente=listaResultados]").querySelectorAll("[componente=elementoResultadosBuscadorRapido]")
                            selectorResultadosContenedor.forEach((resultado) => {
                                resultado.removeAttribute("estado")
                                resultado.removeAttribute("style")
                            })
                            const resultadoSeleccionado = e.target
                            resultadoSeleccionado.setAttribute("estado", "seleccionado")
                            resultadoSeleccionado.style.background = "blue"
                            resultadoSeleccionado.style.color = "white"
                        })

                        const filaNombre = document.createElement("p")
                        filaNombre.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaNombre")
                        filaNombre.setAttribute("dato", "nombre")
                        filaNombre.innerText = `${nombre} ${primerApellido} ${segundoApellido}`
                        bloqueCliente.appendChild(filaNombre)
                        const filaPasaporte = document.createElement("p")
                        filaPasaporte.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaPasaporte")
                        filaPasaporte.setAttribute("dato", "pasaporte")
                        filaPasaporte.innerText = pasaporte
                        bloqueCliente.appendChild(filaPasaporte)
                        listaBuscadorRenderizada.appendChild(bloqueCliente)
                    })
                },
                contenedorEventoTemporal: {},
                confirmarFusion: {
                    UI: function () {
                        const clienteOrigen = document.querySelector("[contenedor=origen]").querySelector("[estado=seleccionado]")
                        const clienteDestino = document.querySelector("[contenedor=destino]").querySelector("[estado=seleccionado]")

                        const nombreOrigen = clienteOrigen.querySelector("[dato=nombre]").innerText
                        const pasaporteOrigen = clienteOrigen.querySelector("[dato=pasaporte]").innerText
                        const uidOrigen = clienteOrigen.getAttribute("clienteUID")

                        const nombreDestino = clienteDestino.querySelector("[dato=nombre]").innerText
                        const pasaporteDestino = clienteDestino.querySelector("[dato=pasaporte]").innerText
                        const uidDestino = clienteDestino.getAttribute("clienteUID")

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                        const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.innerText = "Operacion de fusi√≥n irreversible"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.innerText = `Se va a fusionar como cliente ORIGEN a ${nombreOrigen} (${pasaporteOrigen}) con el cliente DESTINO ${nombreDestino} (${pasaporteDestino}). Esta operaci√≥n es irreversible. El cliente ORIGEN ser√° eliminado y sustituido por el cliente destino en todas las reservas donde est√© presente el cliente ORIGEN. Una vez se haya sustituido al cliente ORIGEN por el DESTINO en las reservas, el cliente ORIGEN ser√° eliminado del hub de clientes.`

                        const contenedorFusion = document.createElement("div")
                        contenedorFusion.classList.add(
                            "flexVertical",
                            "gap6"
                        )
                        contenedor.appendChild(contenedorFusion)

                        const origenUI = document.createElement("div")
                        origenUI.classList.add(
                            "flexVertical",
                            "padding12",
                            "backgroundGrey1",
                            "borderRadius14"
                        )
                        contenedorFusion.appendChild(origenUI)

                        const tituloOrigenUI = document.createElement("p")
                        tituloOrigenUI.innerText = "<<< ORIGEN"
                        origenUI.appendChild(tituloOrigenUI)


                        const nombreOrigenUI = document.createElement("p")
                        nombreOrigenUI.classList.add(
                            "negrita"
                        )
                        nombreOrigenUI.innerText = nombreOrigen
                        origenUI.appendChild(nombreOrigenUI)

                        const pasaporteOrigenUI = document.createElement("p")
                        pasaporteOrigenUI.innerText = pasaporteOrigen
                        origenUI.appendChild(pasaporteOrigenUI)

                        const destinoUI = document.createElement("div")
                        destinoUI.classList.add(
                            "flexVertical",
                            "padding12",
                            "backgroundGrey1",
                            "borderRadius14"
                        )
                        contenedorFusion.appendChild(destinoUI)

                        const tituloDestinoUI = document.createElement("p")
                        tituloDestinoUI.innerText = ">>> DESTINO"
                        destinoUI.appendChild(tituloDestinoUI)

                        const nombreDestinoUI = document.createElement("p")
                        nombreDestinoUI.classList.add(
                            "negrita"
                        )
                        nombreDestinoUI.innerText = nombreDestino
                        destinoUI.appendChild(nombreDestinoUI)

                        const pasaporteDestinoUI = document.createElement("p")
                        pasaporteDestinoUI.innerText = pasaporteDestino
                        destinoUI.appendChild(pasaporteDestinoUI)


                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.innerText = "Comfirmar e iniciar la fusi√≥n"
                        botonAceptar.addEventListener("click", () => {
                            this.confirmar({
                                clienteOrigenUID: uidOrigen,
                                clienteDestinoUID: uidDestino

                            })
                        })
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.innerText = "Cancelar la eliminacion"

                        document.querySelector("main").appendChild(pantallaInmersiva)
                    },
                    confirmar: async (data) => {
                        const clienteOrigenUID = data.clienteOrigenUID
                        const clienteDestinoUID = data.clienteDestinoUID

                        const instanciaUID_main = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const metadatosPantallaCarga = {
                            mensaje: "Fusionando clientes...",
                            instanciaUID: instanciaUID,
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                        const selectorPantallaDeCargaSuperpuestaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        const datosParaActualizar = {
                            zona: "administracion/clientes/fusion",
                            clienteUID_origen: clienteOrigenUID,
                            clienteUID_destino: clienteDestinoUID
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        selectorPantallaDeCargaSuperpuestaRenderizada?.remove()
                        const instanciaUI_main_renderizada = document.querySelector(`[instanciaUID="${instanciaUID_main}"]`)
                        if (!instanciaUI_main_renderizada) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const m = "Se ha producido la fusion"
                            instanciaUI_main_renderizada.innerHTML = null
                            instanciaUI_main_renderizada.innerText = m
                        }
                    },
                },
            }
        },
        precios: {
            arranque: async () => {
                const main = document.querySelector("main")
                const seccionRenderizadaOrigen = document.querySelector("main")
                main.style.wordBreak = "break-word"
                const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                if (comandoInicial === "precios" && Object.keys(granuladoURL.parametros).length === 0) {
                    main.setAttribute("zonaCSS", "administracion/precios")
                    casaVitini.administracion.precios.portadaUI()
                } else if (granuladoURL.parametros && comandoInicial !== "precios") {
                    main.setAttribute("zonaCSS", "administracion/precios")
                    const info = {
                        titulo: "No existe ning√∫n perfil de precio base con ese identificador.",
                        descripcion: "Revisa el identificado porque no existe el perfil de precio que solicitas."
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                } else if (granuladoURL.parametros.apartamentos) {
                    main.setAttribute("zonaCSS", "administracion/precios/detalles")
                    const transaccion = {
                        zona: "administracion/precios/detallePrecioBaseApartamento",
                        apartamentoIDV: granuladoURL.parametros.apartamentos
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada)
                        if (respuestaServidor.error) {
                            const titulo = document.querySelector(".titulo")
                            titulo.innerText = "No existe ning√∫n precio con el identificador: " + granuladoURL.parametros.apartamentos

                        }
                    casaVitini.administracion.precios.detallesApartamenro(respuestaServidor)
                } else if (granuladoURL.parametros.impuestos) {
                    const transaccion = {
                        zona: "administracion/impuestos/detalleImpuesto",
                        impuestoUID: Number(granuladoURL.parametros.impuestos)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada)
                        if (respuestaServidor.error) {
                            const titulo = document.querySelector(".titulo")
                            titulo.innerText = "No existe ning√∫n impuesto con el identificador: " + granuladoURL.parametros.apartamentos

                        }
                    casaVitini.administracion.precios.detalleImpuesto(respuestaServidor)
                }
            },
            portadaUI: async () => {
                const selectorEspacioPreciosEImpuestos = document.querySelector("[componente=precios]")
                const transaccion = {
                    zona: "administracion/precios/listaPreciosApartamentos"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const preciosApartmentos = respuestaServidor?.ok
                    const bloqueGlobalApartamentos = document.createElement("div")
                    bloqueGlobalApartamentos.classList.add("preciosEImpuestosBloqueGlobal")
                    const contenedorTituloYOpciones = document.createElement("div")
                    contenedorTituloYOpciones.classList.add("preciosEImpuestosTituloYOpciones")
                    const tituloBloque = document.createElement("p")
                    tituloBloque.classList.add("preciosEImpuestosBloqueTitulo")
                    tituloBloque.innerText = "Precios de los apartmentos"
                    contenedorTituloYOpciones.appendChild(tituloBloque)
                    bloqueGlobalApartamentos.appendChild(contenedorTituloYOpciones)
                    const bloqueHorizontal = document.createElement("div")
                    bloqueHorizontal.classList.add("precioEImpuestosBloqueHorizotnal")
                    preciosApartmentos.forEach((detalleApartamento) => {
                        const uidPrecioApartamento = detalleApartamento.uid
                        const apartamentoIDV = detalleApartamento.apartamento
                        const precio = detalleApartamento.precio
                        const moneda = detalleApartamento.moneda
                        const apartamentoUI = detalleApartamento.apartamentoUI
                        const totalImpuestos = detalleApartamento.totalImpuestos
                        const totalNocheBruto = detalleApartamento.totalNocheBruto
                        const bloqueApartamento = document.createElement("a")
                        bloqueApartamento.classList.add("preciosEImpuestosBloqueApartamento")
                        bloqueApartamento.setAttribute("href", "/administracion/precios/apartamentos:" + apartamentoIDV)
                        bloqueApartamento.setAttribute("vista", "/administracion/precios/apartamentos:" + apartamentoIDV)
                        bloqueApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                        bloqueApartamento.addEventListener("click", casaVitini.administracion.precios.entrarDetallesApartamento)
                        const tituloApartamento = document.createElement("p")
                        tituloApartamento.classList.add("preciosEImpuestosTituloApartamento")
                        tituloApartamento.innerText = apartamentoUI
                        bloqueApartamento.appendChild(tituloApartamento)
                        if (precio) {
                            //Total neto por dia
                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("precioEImpuestosBloqueDato")
                            let tituloDato = document.createElement("p")
                            tituloDato.classList.add("precioEImpuestosOpcionApartamentoTitulo")
                            tituloDato.innerText = "Total neto por noche"
                            bloqueDato.appendChild(tituloDato)
                            let datoUI = document.createElement("p")
                            datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                            datoUI.innerText = precio
                            bloqueDato.appendChild(datoUI)
                            bloqueApartamento.appendChild(bloqueDato)
                            //Total solo de impuestos
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("precioEImpuestosBloqueDato")
                            tituloDato = document.createElement("p")
                            tituloDato.classList.add("precioEImpuestosOpcionApartamentoTitulo")
                            tituloDato.innerText = "Total impuestos aplicados por noche"
                            bloqueDato.appendChild(tituloDato)
                            datoUI = document.createElement("p")
                            datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                            datoUI.innerText = totalImpuestos
                            bloqueDato.appendChild(datoUI)
                            bloqueApartamento.appendChild(bloqueDato)
                            //Total bruto apartamento
                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("precioEImpuestosBloqueDato")
                            tituloDato = document.createElement("p")
                            tituloDato.classList.add("precioEImpuestosOpcionApartamentoTitulo")
                            tituloDato.innerText = "Total bruto por noche"
                            bloqueDato.appendChild(tituloDato)
                            datoUI = document.createElement("p")
                            datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                            datoUI.innerText = totalNocheBruto
                            bloqueDato.appendChild(datoUI)
                            bloqueApartamento.appendChild(bloqueDato)
                        } else {
                            //Inforamcion apartamento sin perfil de precio
                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("precioEImpuestosBloqueDato")
                            datoUI = document.createElement("p")
                            datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                            datoUI.innerText = "Este apartamento tiene una configuraci√≥n de apartamento, pero no tiene ning√∫n perfil de precio creado, por lo tanto, no est√° disponible para reservar al ser un requisito para construir una configuraci√≥n v√°lida."
                            bloqueDato.appendChild(datoUI)
                            bloqueApartamento.appendChild(bloqueDato)
                        }
                        bloqueHorizontal.appendChild(bloqueApartamento)
                    })
                    bloqueGlobalApartamentos.appendChild(bloqueHorizontal)
                    selectorEspacioPreciosEImpuestos.appendChild(bloqueGlobalApartamentos)
                }
            },
            gridPrecios: async (entrada) => {
            },
            detallesApartamenro: async (respuestaServidor) => {
                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "No existe ning√∫n perfil de precio base con ese identificador.",
                        descripcion: "Revisa el identificado porque no existe el perfil de precio que solicitas."
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                } else if (respuestaServidor?.ok) {


                    const detallesApartamento = respuestaServidor?.ok
                    const apartamentoUI = detallesApartamento.apartamentoUI
                    const apartamentoIDV = detallesApartamento.apartamentoIDV
                    const precioNetoPorNoche = detallesApartamento.precioNetoPorNoche
                    const totalImpuestos = detallesApartamento.totalImpuestos
                    const totalBrutoPorNoche = detallesApartamento.totalBrutoPorNoche
                    const impuestos = detallesApartamento.impuestos

                    const selectorTitulo = document.querySelector(".titulo")
                    selectorTitulo.innerText = "Perfil de precio del " + apartamentoUI

                    const selectorEspacioPreciosEImpuestos = document.querySelector("[componente=precios]")
                    const bloqueContenedorHorizontal = document.createElement("div")
                    bloqueContenedorHorizontal.classList.add("preciosEImpuestosDetalleApartamentoBloqueHorizontal")
                    const bloqueDetallesApartamento = document.createElement("div")
                    bloqueDetallesApartamento.classList.add("preciosEImpuestosDetalleApartamentoDetallesApartmento")
                    bloqueDetallesApartamento.setAttribute("componente", "contenedorDetallesApartamento")
                    bloqueDetallesApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                    const tituloApartamento = document.createElement("p")
                    tituloApartamento.classList.add("preciosEImpuestosDetalleApartamentoTituloApartamento")
                    tituloApartamento.innerText = apartamentoUI
                    bloqueDetallesApartamento.appendChild(tituloApartamento)
                    //precio neto por dia
                    let bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDato")
                    let tituloDato = document.createElement("div")
                    tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                    tituloDato.innerText = "Precio neto por noche"
                    bloqueDato.appendChild(tituloDato)
                    let precioDato = document.createElement("p")
                    precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumero")
                    precioDato.setAttribute("precioNetoPorNoche", precioNetoPorNoche)
                    precioDato.innerText = precioNetoPorNoche
                    bloqueDato.appendChild(precioDato)
                    bloqueDetallesApartamento.appendChild(bloqueDato)
                    //total impuestos
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDato")
                    tituloDato = document.createElement("div")
                    tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                    tituloDato.innerText = "Total impuestos por noche"
                    bloqueDato.appendChild(tituloDato)
                    precioDato = document.createElement("p")
                    precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumero")
                    precioDato.setAttribute("totalImpuestos", totalImpuestos)
                    precioDato.innerText = totalImpuestos
                    bloqueDato.appendChild(precioDato)
                    bloqueDetallesApartamento.appendChild(bloqueDato)
                    //total bruto por dia
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDato")
                    tituloDato = document.createElement("div")
                    tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                    tituloDato.innerText = "Total bruto por noche"
                    bloqueDato.appendChild(tituloDato)
                    precioDato = document.createElement("p")
                    precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumero")
                    precioDato.setAttribute("totalBrutoPorNoche", totalBrutoPorNoche)

                    precioDato.innerText = totalBrutoPorNoche
                    bloqueDato.appendChild(precioDato)
                    bloqueDetallesApartamento.appendChild(bloqueDato)
                    let bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueBotones")
                    bloqueBotones.setAttribute("componente", "bloqueBotones")
                    let boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.innerText = "Modificar precio"
                    boton.setAttribute("componente", "botonModificar")
                    boton.addEventListener("click", casaVitini.administracion.precios.nuevoPrecioApartamentoUI)
                    bloqueBotones.appendChild(boton)
                    //boton = document.createElement("div")
                    //boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    //boton.innerText = "Eliminar perfil de precio"
                    //boton.setAttribute("componente", "botonEliminarPerfilPrecio")
                    //boton.addEventListener("click", casaVitini.administracion.precios.eliminarPerfilPrecio.UI)
                    //bloqueBotones.appendChild(boton)
                    boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("componente", "botonCancelar")
                    boton.addEventListener("click", () => {
                        casaVitini.administracion.precios.cancelarModificarPrecio()
                    })
                    boton.innerText = "Cancelar"
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("componente", "botonPrevisualizar")
                    boton.innerText = "Simular nuevo precio"
                    boton.addEventListener("click", casaVitini.administracion.precios.previsualizarPrecioApartamento)
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("componente", "botonCancelarSimulacion")
                    boton.innerText = "Dejar de simular precio"
                    boton.addEventListener("click", casaVitini.administracion.precios.cancelarSimulacion)
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.innerText = "Establecer nuevo precio neto"
                    boton.addEventListener("click", () => {
                        casaVitini.administracion.precios.establecerNuevoPrecioNetoApartamento()
                    })
                    boton.setAttribute("componente", "botonGuardar")
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("a")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.innerText = "Ir a la configuraci√≥n del apartamento"
                    boton.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                    boton.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                    boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    bloqueBotones.appendChild(boton)
                    bloqueDetallesApartamento.appendChild(bloqueBotones)
                    bloqueContenedorHorizontal.appendChild(bloqueDetallesApartamento)
                    selectorEspacioPreciosEImpuestos.appendChild(bloqueContenedorHorizontal)
                    let bloqueDetalles = document.createElement("div")
                    bloqueDetalles.classList.add("preciosEImpuestosDetalleApartamentoDetallesApartmento")
                    bloqueDetalles.setAttribute("componente", "bloqueDetallesImpuestos")
                    let tituloImpuesto = document.createElement("div")
                    tituloImpuesto.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloImpuesto")
                    tituloImpuesto.innerText = "Impuestos Aplicados"
                    bloqueDetalles.appendChild(tituloImpuesto)
                    impuestos.forEach((detalleImpuesto) => {
                        const nombreImpuesto = detalleImpuesto.nombreImpuesto
                        const tipoImpositivo = detalleImpuesto.tipoImpositivo
                        const tipoValorIDV = detalleImpuesto.tipoValorIDV
                        const totalImpuesto = detalleImpuesto.totalImpuesto
                        const impuestoUID = detalleImpuesto.impuestoUID

                        const tipoValorUI = {
                            tasa: "Tasa",
                            porcentaje: "Porcentaje"
                        }

                        let bloqueImpuesto = document.createElement("div")
                        bloqueImpuesto.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueImpuesto")
                        bloqueImpuesto.setAttribute("impuestoUID", impuestoUID)
                        let tituloDato = document.createElement("div")
                        tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                        tituloDato.innerText = nombreImpuesto
                        bloqueImpuesto.appendChild(tituloDato)
                        let bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDatoImpuesto")
                        let tituloBloque = document.createElement("p")
                        tituloBloque.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloBloque")
                        tituloBloque.innerText = "Tipo impositivo"
                        bloqueDato.appendChild(tituloBloque)
                        let precioDato = document.createElement("p")
                        precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumeroImpuesto")
                        precioDato.innerText = tipoImpositivo
                        bloqueDato.appendChild(precioDato)
                        bloqueImpuesto.appendChild(bloqueDato)
                        bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDatoImpuesto")
                        tituloBloque = document.createElement("p")
                        tituloBloque.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloBloque")
                        tituloBloque.innerText = "Tipo valor"
                        bloqueDato.appendChild(tituloBloque)
                        precioDato = document.createElement("p")
                        precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumeroImpuesto")
                        precioDato.innerText = tipoValorUI[tipoValorIDV]
                        bloqueDato.appendChild(precioDato)
                        bloqueImpuesto.appendChild(bloqueDato)
                        bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDatoImpuesto")
                        bloqueDato.setAttribute("componente", "contenedorTotalImpuesto")
                        tituloBloque = document.createElement("p")
                        tituloBloque.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloBloque")
                        tituloBloque.innerText = "Total impuesto"
                        bloqueDato.appendChild(tituloBloque)
                        precioDato = document.createElement("p")
                        precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumeroImpuesto")
                        precioDato.setAttribute("totalImpuesto", totalImpuesto)
                        precioDato.innerText = totalImpuesto
                        bloqueDato.appendChild(precioDato)
                        bloqueImpuesto.appendChild(bloqueDato)
                        bloqueDetalles.appendChild(bloqueImpuesto)
                    })
                    bloqueContenedorHorizontal.appendChild(bloqueDetalles)
                }
            },
            nuevoPrecioApartamentoUI: () => {
                let selectorBloqueBotones = document.querySelector("[componente=bloqueBotones]")
                let selectorcontenedorDetallesApartamento = document.querySelector("[componente=contenedorDetallesApartamento]")
                document.querySelector("[componente=botonModificar]").classList.add("elementoOcultoInicialmente")
                //document.querySelector("[componente=botonEliminarPerfilPrecio]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonCancelar]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[componente=botonGuardar]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").classList.remove("elementoOcultoInicialmente")
                let contenedorNuevoPrecioUI = document.createElement("div")
                contenedorNuevoPrecioUI.classList.add("preciosEImpuestosDetalleApartamentoDetallesEntradaContenedorNuevoPrecioUI")
                contenedorNuevoPrecioUI.setAttribute("componente", "contenedorNuevoPrecio")
                let info = document.createElement("div")
                info.classList.add("preciosEImpuestosDetalleApartamentoDetallesEntradaContenedorInfo")
                info.innerText = "Escriba el nuevo precio en el campo de precio.Puedes previsualizar el precio antes de aplicarlo."
                contenedorNuevoPrecioUI.appendChild(info)
                let entradaNuevoPrecio = document.createElement("input")
                entradaNuevoPrecio.classList.add("preciosEImpuestosDetalleApartamentoDetallesEntradaNuevoPrecio")
                entradaNuevoPrecio.setAttribute("componente", "campoNuevoPrecio")
                entradaNuevoPrecio.placeholder = "00.00"
                contenedorNuevoPrecioUI.appendChild(entradaNuevoPrecio)
                selectorcontenedorDetallesApartamento.insertBefore(contenedorNuevoPrecioUI, selectorBloqueBotones);
            },
            previsualizarPrecioApartamento: async () => {
                const selectorCampoNuevoPrecio = document.querySelector("[componente=campoNuevoPrecio]")
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const mensaje = "Calculando previsualizacion del precio..."
                const datosPantallaSuperpuesta = {
                    instanciaUID: instanciaUID,
                    mensaje: mensaje
                }
                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                const transaccion = {
                    zona: "administracion/precios/previsualizarPrecioApartamento",
                    apartamentoIDV: apartamentoIDV,
                    propuestaPrecio: selectorCampoNuevoPrecio.value
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (!instanciaRenderizada) { return }
                instanciaRenderizada.remove()

                if (respuestaServidor?.error) {
                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    document.querySelector("[componente=botonCancelarSimulacion]").classList.remove("elementoOcultoInicialmente")
                    document.querySelector("[componente=botonPrevisualizar]").style.background = "green"
                    document.querySelector("[componente=botonPrevisualizar]").style.color = "white"
                    const propuestaDetalles = respuestaServidor?.ok
                    const precioNetoPorNochePropuesto = propuestaDetalles.precioNetoPorNochePropuesto
                    const totalImpuestos = propuestaDetalles.totalImpuestos
                    const totalBrutoPorNoche = propuestaDetalles.totalBrutoPorNoche
                    const selectorAreaApartamento = document.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                    const selectorPrecioNetoPorDia = selectorAreaApartamento.querySelector("[precioNetoPorNoche]")
                    selectorPrecioNetoPorDia.style.color = "green"
                    selectorPrecioNetoPorDia.innerText = precioNetoPorNochePropuesto + " (Simulaci√≥n)"

                    const selectorTotalImpuestos = selectorAreaApartamento.querySelector("[totalImpuestos]")
                    selectorTotalImpuestos.style.color = "green"
                    selectorTotalImpuestos.innerText = totalImpuestos + " (Simulaci√≥n)"

                    const selectorTotalBrutoPorDia = selectorAreaApartamento.querySelector("[totalBrutoPorNoche]")
                    selectorTotalBrutoPorDia.style.color = "green"
                    selectorTotalBrutoPorDia.innerText = totalBrutoPorNoche + " (Simulaci√≥n)"

                    const impuestosPorPropuesta = propuestaDetalles.impuestos
                    impuestosPorPropuesta.forEach((impuestoPropuesta) => {
                        const impuestoUID = impuestoPropuesta.impuestoUID
                        const totalImpuesto = impuestoPropuesta.totalImpuesto
                        const selectorTotalImpuesto = document.querySelector(`[impuestoUID="${impuestoUID}"] [totalImpuesto]`)
                        selectorTotalImpuesto.style.color = "green"
                        selectorTotalImpuesto.innerText = totalImpuesto + " (Simulaci√≥n)"
                    })
                }
            },
            establecerNuevoPrecioNetoApartamento: async function () {
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const mensaje = "Actualizando el precio del apartamento...."
                const datosPantallaSuperpuesta = {
                    instanciaUID: instanciaUID,
                    mensaje: mensaje
                }
                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                const selectorCampoNuevoPrecio = document.querySelector("[componente=campoNuevoPrecio]")
                const selectorApartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                const transaccion = {
                    zona: "administracion/precios/establecerNuevoPrecioApartamento",
                    apartamentoIDV: selectorApartamentoIDV,
                    nuevoPrecio: String(selectorCampoNuevoPrecio.value)
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (!instanciaRenderizada) { return }
                instanciaRenderizada.remove()
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    this.cancelarSimulacion()
                    this.cancelarModificarPrecio()
                    const propuestaDetalles = respuestaServidor?.ok
                    const precioNetoPorNoche = propuestaDetalles.precioNetoPorNoche
                    const totalImpuestos = propuestaDetalles.totalImpuestos
                    const totalBrutoPorNoche = propuestaDetalles.totalBrutoPorNoche

                    const areaApartamento = document.querySelector(`[apartamentoIDV="${selectorApartamentoIDV}"]`)

                    const selectorPrecioNetoPorNoche = areaApartamento.querySelector("[precioNetoPorNoche]")
                    selectorPrecioNetoPorNoche.removeAttribute("style")
                    selectorPrecioNetoPorNoche.innerText = precioNetoPorNoche

                    const selectorTotalImpuestos = areaApartamento.querySelector("[totalImpuestos]")
                    selectorTotalImpuestos.removeAttribute("style")
                    selectorTotalImpuestos.innerText = totalImpuestos

                    const selectorTotalBrutoPorNoche = areaApartamento.querySelector("[totalBrutoPorNoche]")
                    selectorTotalBrutoPorNoche.removeAttribute("style")
                    selectorTotalBrutoPorNoche.innerText = totalBrutoPorNoche

                    const impuestosPorPropuesta = propuestaDetalles.impuestos
                    impuestosPorPropuesta.forEach((impuestoPropuesta) => {
                        const impuestoUID = impuestoPropuesta.impuestoUID
                        const totalImpuesto = impuestoPropuesta.totalImpuesto
                        const selectorTotalImpuesto = document.querySelector(`[impuestoUID="${impuestoUID}"] [totalImpuesto]`)
                        selectorTotalImpuesto.innerText = totalImpuesto
                    })
                }
            },
            cancelarSimulacion: () => {
                const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                const selectorAreaApartamento = document.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                const selectorPrecioNetoPorDia = selectorAreaApartamento.querySelector("[precioNetoPorNoche]")
                selectorPrecioNetoPorDia.removeAttribute("style")
                selectorPrecioNetoPorDia.innerText = selectorPrecioNetoPorDia.getAttribute("precioNetoPorNoche")

                const selectorTotalImpuestos = selectorAreaApartamento.querySelector("[totalImpuestos]")
                selectorTotalImpuestos.removeAttribute("style")
                selectorTotalImpuestos.innerText = selectorTotalImpuestos.getAttribute("totalImpuestos")

                const selectorTotalBrutoPorDia = selectorAreaApartamento.querySelector("[totalBrutoPorNoche]")
                selectorTotalBrutoPorDia.removeAttribute("style")
                selectorTotalBrutoPorDia.innerText = selectorTotalBrutoPorDia.getAttribute("totalBrutoPorNoche")

                const selectorImpuestosRenderizados = document.querySelectorAll(`[impuestoUID]`)
                selectorImpuestosRenderizados.forEach((impuestoRenderizado) => {
                    const selectorTotalImpuesto = impuestoRenderizado.querySelector("[totalImpuesto]")
                    selectorTotalImpuesto.removeAttribute("style")
                    selectorTotalImpuesto.innerText = selectorTotalImpuesto.getAttribute(`totalImpuesto`)
                })
                document.querySelector("[componente=botonCancelarSimulacion]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").removeAttribute("style")
                const selectorCampoPrecio = document.querySelector("[componente=campoNuevoPrecio]")
                if (selectorCampoPrecio) {
                    selectorCampoPrecio.value = ""

                }
            },
            cancelarModificarPrecio: async function () {
                document.querySelector("[componente=botonCancelarSimulacion]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").removeAttribute("style")
                document.querySelector("[componente=botonModificar]").classList.remove("elementoOcultoInicialmente")
                //document.querySelector("[componente=botonEliminarPerfilPrecio]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[componente=botonCancelar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonGuardar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=contenedorNuevoPrecio]")?.remove()
                this.cancelarSimulacion()
            },
            eliminarPerfilPrecio: {
                UI: () => {
                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                    const titulo = constructor.querySelector("[componente=titulo]")
                    titulo.innerText = "Confirmar la eliminaci√≥n del perfil del precio del apartamento"
                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                    mensaje.innerText = "Vas a eliminar el perfil de precio de un apartamento.Esta acci√≥n ser√° inmediata e impedir√° reservar el apartamento, ya que no se pueden hacer reservas sin un precio asignado.Si est√°s de acuerdo con esta operaci√≥n, confirma cuando desees; de lo contrario, cancela el proceso."
                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                    botonAceptar.innerText = "Comfirmar la eliminacion"
                    botonAceptar.addEventListener("click", casaVitini.administracion.precios.eliminarPerfilPrecio.confirmarEliminarPrecio)
                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                    botonCancelar.innerText = "Cancelar la eliminacion"

                    document.querySelector("main").appendChild(pantallaInmersiva)
                },
                confirmarEliminarPrecio: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Eliminado el perfil de precio..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                    const transaccion = {
                        zona: "administracion/precios/eliminarPerfilPrecioApartamento",
                        apartamentoIDV: apartamentoIDV
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const entrada = {
                            vista: "/administracion/precios",
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(entrada)
                    }
                }
            },
            entrarDetallesApartamento: (apartamento) => {
                apartamento.stopPropagation()
                apartamento.preventDefault()
                const apartamentoIDV = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV");
                const vista = "/administracion/precios/apartamentos:" + apartamentoIDV
                const entrada = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                casaVitini.shell.navegacion.controladorVista(entrada)
            },
        },
        simuladorDePrecios: {
            arranque: async function () {
                const main = document.querySelector("main")
                const instanciaUID = main.getAttribute("instanciaUID")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

                const parametros = granuladoURL.parametros
                if (comandoInicial === "simulador_de_precios" && !parametros.simulacion) {
                    this.portada.contenedorBotones()
                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "simulacion_uid") {
                            nombreColumnaIDV = "simulacionUID"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                    })

                    this.portada.mostrarSimulacionesResueltas(parametrosFormatoIDV)
                } else if (comandoInicial === "simulador_de_precios" && parametros.simulacion) {
                    main.setAttribute("zonaCSS", "administracion/simuladorDePrecios/detalles")

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/simuladorDePrecios/detallesSimulacion",
                        simulacionUID: String(parametros.simulacion)
                    })
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor.error) {
                        const titulo = document.querySelector(".titulo")
                        titulo.innerText = "No existe ning√∫ns simulaci√≥n con el identificador: " + parametros.simulacion
                        main.innerHTML = null
                        main.appendChild(titulo)
                        return
                    }
                    this.detallesSimulacion.detalleSimulacion(respuestaServidor)
                }
                else {
                    casaVitini.ui.componentes.urlDesconocida()

                }

            },
            portada: {
                mostrarSimulacionesResueltas: async function (data) {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacio]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)

                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/simulador_de_precios")
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const transaccion = {
                        origen: "url",
                        ...data
                    }

                    transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                    const paginaTipo = transaccion.paginaTipo
                    const nombreColumna = transaccion.nombreColumna

                    let nombreColumnaURL
                    if ((nombreColumna)?.toLowerCase() === "simulacionuid") {
                        nombreColumnaURL = "simulacion_uid"
                    } else if (nombreColumna) {
                        nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                    }
                    if (transaccion.sentido_columna) {
                        transaccion.sentidoColumna = transaccion.sentido_columna
                        delete transaccion.sentido_columna
                    }
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/simuladorDePrecios/listaSimulacionesPaginados",
                        pagina: transaccion.pagina,
                        nombreColumna: nombreColumna,
                        sentidoColumna: transaccion.sentidoColumna
                    })
                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.totalSimulaciones === 0) {
                        const espacioClientes = document.querySelector("[componente=espacio]")
                        document.querySelector("[gridUID=gridImpuestos]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        const estadoBusquedaUI = document.createElement("div")
                        estadoBusquedaUI.classList.add(
                            "buscadorClientesEstadoBusqueda",
                            "textoCentrado"
                        )
                        estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                        estadoBusquedaUI.innerText = "No hay simulaciones configurados"
                        espacioClientes.appendChild(estadoBusquedaUI)
                        return

                    }
                    const simulaciones = respuestaServidor.simulaciones
                    const sentidoColumna = respuestaServidor.sentidoColumna
                    const pagina = respuestaServidor.pagina
                    const paginasTotales = respuestaServidor.paginasTotales
                    const columnasGrid = [
                        {
                            columnaUI: "UID",
                            columnaIDV: "simulacionUID",
                        },
                        {
                            columnaUI: "Nombre",
                            columnaIDV: "nombre",
                        },
                        {
                            columnaUI: "Fecah de creaci√≥n",
                            columnaIDV: "fechaCreacion",
                        },
                        {
                            columnaUI: "Fecha de entrada",
                            columnaIDV: "fechaEntrada",
                        },
                        {
                            columnaUI: "Fecha de salida",
                            columnaIDV: "fechaSalida",
                        }
                    ]
                    const parametrosFinales = {}

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.simuladorDePrecios.portada.mostrarSimulacionesResueltas",
                        configuracionGrid: {
                            filas: simulaciones,
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[componente=espacio]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridSimuladorDePrecios",
                            mascaraURL: {
                                mascara: "/administracion/simulador_de_precios/simulacion:",
                                parametro: "simulacionUID"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })

                    const titulo = "ADminstar reservas"
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "contenedorBotonesSimulador",
                        funcionPersonalizada: "administracion.simuladorDePrecios.portada.mostrarSimulacionesResueltas",
                        args: transaccion
                    }
                    if (origen === "url" || origen === "botonMostrarClientes") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);

                    }
                },
                contenedorBotones: () => {
                    const espacioImpuestos = document.querySelector("[contenedor=botones]")
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add(
                        "flexHorizontal",
                        "flexDerecha"
                    )
                    contenedorBotones.setAttribute("componente", "contenedorBotonesSimulador")
                    const botonCrearImpuesto = document.createElement("a")
                    botonCrearImpuesto.classList.add("botonV1")
                    botonCrearImpuesto.innerText = "Nueva simulaci√≥n"
                    botonCrearImpuesto.setAttribute("href", "/administracion/simulador_de_precios/nueva_simulacion")
                    botonCrearImpuesto.setAttribute("vista", "/administracion/simulador_de_precios/nueva_simulacion")
                    botonCrearImpuesto.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(botonCrearImpuesto)
                    espacioImpuestos.appendChild(contenedorBotones)
                },
            },
            nuevaSimulacion: {
                arranque: async function () {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/simuladorPrecios/nuevaSimulacion")

                    const selectorEspacio = document.querySelector("[componente=espacio]")

                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")
                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add(
                        "flexVertical",
                        "textoCentrado"
                    )
                    tituloBloquoApartamentos.innerText = "Cree una simulaci√≥n de un desglose total. Esto le permite cerciorarse en detalle de c√≥mo se aplican las reservas, los impuestos, los servicios, las ofertas y los comportamientos de precio. Para empezar a crear una simulacion, determina un nombre para esta. Luego tambien podras cambiar el nombre en cualquier momento."
                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                    selectorEspacio.appendChild(bloqueBloqueoApartamentos)


                    const campoNombre = document.createElement("input")
                    campoNombre.setAttribute("campo", "nombre")
                    campoNombre.classList.add(
                        "padding12",
                        "backgroundGrey1",
                        "borderRadius10"
                    )
                    campoNombre.placeholder = "Escribe el nombre de la nueva simulaci√≥n"
                    selectorEspacio.appendChild(campoNombre)


                    const botonCrear = document.createElement("div")
                    botonCrear.classList.add(
                        "botonV1",
                        "comportamientoBoton",
                        "padding6",
                        "textoCentrado",
                        "backgroundGrey1",
                        "borderRadius8",
                        "noSelecionable"
                    )
                    botonCrear.innerText = "Crear nueva simulaci√≥n"
                    botonCrear.addEventListener("click", this.guardarNuevaSimulacion)
                    selectorEspacio.appendChild(botonCrear)



                },
                guardarNuevaSimulacion: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Guardando simulacion..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje,
                        identificadorVisual: "pantallaDeCarga"
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                    const nombre = document.querySelector("[campo=nombre]").value
                    // const fechaCreacion = document.querySelector("[calendario=unico]").getAttribute("memoriaVolatil")
                    // const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    // const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    // const selectorApartamentos = document.querySelectorAll("[apartamentoSeleccionado]")
                    // const apartamentosIDVARRAY = []
                    // selectorApartamentos.forEach((apartamento) => {
                    //     const apartamentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                    //     apartamentosIDVARRAY.push(apartamentoIDV)
                    // })

                    const transaccion = {
                        zona: "administracion/simuladorDePrecios/guardarSimulacion",
                        nombre
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()

                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const simuacionUID = respuestaServidor.simulacionUID
                        const entrada = {
                            vista: "/administracion/simulador_de_precios/simulacion:" + simuacionUID,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(entrada)
                    }
                },
                // generarDesglose: async function () {
                //     const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                //     const info = document.createElement("div")
                //     info.setAttribute("contenedor", "info")
                //     info.classList.add(
                //         "textoCentrado",
                //         "flexVertical"
                //     )
                //     info.innerText = "Generando simulaci√≥n..."

                //     const contenedorSimulacion = document.querySelector("[contenedor=simulacion]")
                //     contenedorSimulacion.appendChild(info)
                //     contenedorSimulacion.setAttribute("instanciaUID", instanciaUID)

                //     const fechaCreacion = document.querySelector("[calendario=unico]").getAttribute("memoriaVolatil")
                //     const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                //     const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                //     const selectorApartamentos = document.querySelectorAll("[apartamentoSeleccionado]")
                //     const apartamentosIDVARRAY = []
                //     selectorApartamentos.forEach((apartamento) => {
                //         const apartamentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                //         apartamentosIDVARRAY.push(apartamentoIDV)
                //     })

                //     const transaccion = {
                //         zona: "administracion/simuladorDePrecios/generarSimulacion",
                //         fechaCreacion,
                //         fechaEntrada,
                //         fechaSalida,
                //         apartamentosIDVARRAY
                //     }
                //     const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                //     const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                //     if (!instanciaRenderizada) { return }
                //     instanciaRenderizada.innerHTML = null
                //     if (respuestaServidor?.error) {
                //         contenedorSimulacion.innerHTML = null
                //         const infoEr = document.createElement("div")
                //         infoEr.classList.add(
                //             "textoCentrado",
                //             "flexVertical"
                //         )
                //         infoEr.innerText = respuestaServidor?.error
                //         instanciaRenderizada.appendChild(infoEr)
                //     }
                //     if (respuestaServidor?.ok) {

                //         const contenedorFinanciero = respuestaServidor

                //         const contenedorNoGuardado = document.createElement("div")
                //         contenedorNoGuardado.classList.add(
                //             "flexVertical",
                //             "gap6"
                //         )
                //         contenedorSimulacion.appendChild(contenedorNoGuardado)


                //         const infoEstadoNoGuardado = document.createElement("div")
                //         infoEstadoNoGuardado.classList.add(
                //             "flexVertical",
                //             //"padding10",
                //             "textoCentrado"
                //         )
                //         infoEstadoNoGuardado.innerText = "Simulaci√≥n sin guardar.Guarde la simulaci√≥n para acceder a las funciones avanzadas."
                //         contenedorNoGuardado.appendChild(infoEstadoNoGuardado)

                //         const campoNombre = document.createElement("input")
                //         campoNombre.setAttribute("campo", "nombre")
                //         campoNombre.classList.add(
                //             "padding6",
                //             "backgroundGrey1",
                //             "borderRadius8",
                //             "padding10",
                //             "simplificadorCampo",
                //             "noSelecionable"
                //         )
                //         campoNombre.placeholder = "Escriba un nombre para la simulaci√≥n"
                //         //botonCancelar.addEventListener("click", null)
                //         contenedorNoGuardado.appendChild(campoNombre)

                //         const botonGuardar = document.createElement("div")
                //         botonGuardar.classList.add(
                //             "botonV1",
                //             "comportamientoBoton",
                //             "padding6",
                //             "textoCentrado",
                //             "backgroundGrey1",
                //             "borderRadius8",
                //             "noSelecionable"
                //         )
                //         botonGuardar.innerText = "Guardar simulaci√≥n"
                //         botonGuardar.addEventListener("click", this.guardarNuevaSimulacion)
                //         //botonCancelar.addEventListener("click", null)
                //         contenedorNoGuardado.appendChild(botonGuardar)

                //         casaVitini.ui.componentes.contenedorFinanciero.constructor({
                //             destino: `[contenedor=simulacion]`,
                //             contenedorFinanciero,
                //             modoUI: "plaza"
                //         })

                //     }

                // },
            },
            detallesSimulacion: {
                detalleSimulacion: async function (respuestaServidor) {
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe ninguna simulaci√≥n con ese identificador",
                            descripcion: "La simulaci√≥n a que hace referencia la URL no existe.Revisa el identificador.Quiz√°s fue una simulaci√≥n que tuviste hace un tiempo y que borraste"
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }
                    if (respuestaServidor?.ok) {
                        const selectorEspacio = document.querySelector("[componente=espacio]")
                        const contenedor = document.createElement("div")
                        contenedor.classList.add("contenedorNuevaSimiulacion")
                        selectorEspacio.appendChild(contenedor)
                        const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")

                        const simulacionUI = casaVitini.administracion.simuladorDePrecios.componentes.simulacionUI()
                        selectorEspacio.appendChild(simulacionUI)

                        const selectorTitulo = document.querySelector(".titulo")
                        selectorTitulo.classList.add(
                            "padding5"
                        )
                        selectorTitulo.style.position = "sticky"
                        selectorTitulo.style.top = "20px"
                        selectorTitulo.style.zIndex = "2"

                        const controladorAlturaTituloDinamico = (e) => {
                            const selectorInstanciaActual = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!selectorInstanciaActual) {
                                document.removeEventListener("scroll", controladorAlturaTituloDinamico)

                            }
                            const altura = window.scrollY || window.pageYOffset;

                            if (altura > 20) {
                                selectorTitulo.style.boxShadow = "0px 0px 28px 0px rgba(0, 0, 0, 0.5)"
                                selectorTitulo.style.backdropFilter = "blur(50px)"
                                selectorTitulo.style.webkitBackdropFilter = "blur(50px)"
                                selectorTitulo.style.position = "sticky"
                                selectorTitulo.style.top = "20px"
                                selectorTitulo.style.zIndex = "2"
                                selectorTitulo.style.background = "#rgb(255 255 255/25%)"
                                selectorTitulo.style.paddingRight = "20px"
                                selectorTitulo.style.borderRadius = "42px"
                                selectorTitulo.style.paddingLeft = "20px"
                                selectorTitulo.style.paddingTop = "5px"
                                selectorTitulo.style.paddingBottom = "5px"
                                selectorTitulo.style.color = "black"
                            } else {
                                selectorTitulo.removeAttribute("style")
                            }
                        }
                        document.addEventListener("scroll", controladorAlturaTituloDinamico)

                        const contenedorSimulacion = document.querySelector("[contenedor=simulacion]")
                        // contenedorSimulacion.classList.add(
                        //     "borderRadius12",
                        //     "borderGrey1"
                        // )
                        const contenedorGlobal = simulacionUI.querySelector("[contenedor=botones]")


                        const campoNombre = document.createElement("input")
                        campoNombre.setAttribute("campo", "nombre")
                        campoNombre.classList.add(
                            "padding6",
                            "backgroundGrey1",
                            "borderRadius8",
                            "padding10",
                            "simplificadorCampo",
                            "noSelecionable"
                        )
                        campoNombre.placeholder = "Escriba un nombre para la simulaci√≥n"
                        //botonCancelar.addEventListener("click", null)
                        contenedorGlobal.appendChild(campoNombre)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add(
                            "gridHorizotnal2C",
                            "gap6"
                        )
                        contenedorGlobal.appendChild(contenedorBotones)


                        const botonGuardar = document.createElement("div")
                        botonGuardar.classList.add(
                            "botonV1",
                            "comportamientoBoton",
                            "padding6",
                            "textoCentrado",
                            "backgroundGrey1",
                            "borderRadius8",
                            "noSelecionable"
                        )
                        botonGuardar.innerText = "Guardar simulaci√≥n"
                        botonGuardar.addEventListener("click", () => {
                            this.actualizarNombreSimulacion()
                        })
                        //botonCancelar.addEventListener("click", null)
                        contenedorBotones.appendChild(botonGuardar)

                        const botonEliminar = document.createElement("div")
                        botonEliminar.classList.add(
                            "botonV1",
                            "comportamientoBoton",
                            "padding6",
                            "textoCentrado",
                            "backgroundGrey1",
                            "borderRadius8",
                            "noSelecionable"
                        )
                        botonEliminar.innerText = "Eliminar simulaci√≥n"
                        botonEliminar.addEventListener("click", () => {
                            this.eliminarSimulacion.UI()
                        })
                        contenedorBotones.appendChild(botonEliminar)

                        const selectorNombre = simulacionUI.querySelector("[campo=nombre]")
                        const selectorFechaEntrada = simulacionUI.querySelector("[calendario=entrada]")
                        const selectorFechaSalida = simulacionUI.querySelector("[calendario=salida]")
                        const selectorFechaCreacion = simulacionUI.querySelector("[calendario=unico]")
                        const selectorsApartamentos = simulacionUI.querySelector("[contenedor=apartamentosSeleccianados]")
                        const instanciaUID_contenedorApartamentos = selectorsApartamentos.querySelector("[instanciaUID]").getAttribute("instanciaUID")

                        const simulacionData = respuestaServidor
                        const nombre = simulacionData.nombre
                        const zonaIDV = simulacionData.zonaIDV
                        const simulacionUID = simulacionData.simulacionUID
                        const fechaCreacion = simulacionData?.fechaCreacion
                        const fechaEntrada = simulacionData?.fechaEntrada
                        const fechaSalida = simulacionData?.fechaSalida
                        const contenedorFinanciero = simulacionData.contenedorFinanciero
                        const apartamentos = simulacionData.apartamentos
                        const servicios = simulacionData.servicios || []
                        const codigosDescuento = simulacionData.codigosDescuento || []

                        const hubFecha = (fecha) => {
                            if (fecha) {
                                return casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fecha)
                            } else {
                                return "(Seleccionar)"
                            }
                        }

                        selectorEspacio.setAttribute("simulacionUID", simulacionUID)
                        selectorNombre.value = nombre
                        if (fechaCreacion) {
                            selectorFechaCreacion.setAttribute("memoriaVolatil", fechaCreacion)
                        }
                        if (fechaEntrada) {
                            selectorFechaEntrada.setAttribute("memoriaVolatil", fechaEntrada)
                        }
                        if (fechaSalida) {
                            selectorFechaSalida.setAttribute("memoriaVolatil", fechaSalida)
                        }

                        selectorFechaCreacion.querySelector("[fechaUI=unico]").innerText = hubFecha(fechaCreacion)
                        selectorFechaEntrada.querySelector("[fechaUI=fechaInicio]").innerText = hubFecha(fechaEntrada)
                        selectorFechaSalida.querySelector("[fechaUI=fechaFin]").innerText = hubFecha(fechaSalida)

                        for (const contenedorApartamento of apartamentos) {
                            const apartamentoIDV = contenedorApartamento.apartamentoIDV
                            const error = `Configurac√≠on de alojamiento inexistente (${apartamentoIDV})`
                            const configuracionDeAlojamiento = await casaVitini.administracion.componentes.obtenerConfiguracionAlojamiento(apartamentoIDV)
                            const apartamentoUI = configuracionDeAlojamiento?.apartamentoUI || error
                            const infoSinApartamento = document.querySelector("[componente=infoSinApartamento]")
                            infoSinApartamento.style.display = "none"

                            const selectorApartamentoUI = casaVitini.administracion.simuladorDePrecios.componentes.apartamentoUI({
                                apartamentoIDV,
                                apartamentoUI,
                                instanciaUID: instanciaUID_contenedorApartamentos,
                                tipoDespliegue: "parcial"
                            })
                            const selectorZonaApartamentos = document.querySelector("[componente=zonaAnadirApartamento]")
                            selectorZonaApartamentos.appendChild(selectorApartamentoUI)
                        }

                        const selectorZonaIDV = simulacionUI.querySelector("[selector=zonaIDV]")

                        selectorZonaIDV.value = zonaIDV || ""

                        casaVitini.administracion.simuladorDePrecios.componentes.servicios.actualizarContenedor({
                            servicios,
                            simulacionUID
                        })
                        const selectorBotonReconstrucion = simulacionUI.querySelector("[boton=reconstruccionHubSinConfirmacion]")
                        selectorBotonReconstrucion.addEventListener("click", () => {
                            this.componentesUI.reconstruirDesgloseFinanciero.desdeHub.confirmarReconstrucion({
                                simulacionUID: String(simulacionUID),
                                sobreControl: "activado"
                            })
                        })

                        if (contenedorFinanciero.desgloseFinanciero) {
                            casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                destino: `[contenedor=simulacion]`,
                                contenedorFinanciero,
                                modoUI: "simulador"
                            })
                        } else {
                            simulacionUI.querySelector("[contenedor=simulacion]").style.display = "none"
                        }
                    }
                },
                componentesUI: {
                    insertarDescuentos: {
                        ui: async function (data) {
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const instanciaUID_insertarDescuentosUI = ui.getAttribute("instanciaUID")
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            main.appendChild(ui)
                            const constructor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo ofertas...",
                                textoBoton: "Cancelar"
                            })
                            constructor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/ofertas/listasOfertasAdministracion"
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                            if (!uiRenderizada) { return }
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                spinner.remove()
                                constructor.appendChild(this.botonCancelar())

                                const ofertas = respuestaServidor.ok

                                const contenedorOfertas = document.createElement("div")
                                contenedorOfertas.classList.add(
                                    "maxWidth1280px",
                                    "width100",
                                    "flexVertical",
                                    "gap6",
                                )
                                constructor.appendChild(contenedorOfertas)
                                const estadoUI_ = (estadoIDV) => {

                                    if (estadoIDV === "activado") {
                                        return "Activada"
                                    } else if (estadoIDV === "desactivado") {
                                        return "Desactivada"
                                    }

                                }

                                ofertas.forEach((detalles) => {
                                    const nombreOferta = detalles.nombreOferta
                                    const ofertaUID = detalles.ofertaUID
                                    const fechaInicio = detalles.fechaInicio
                                    const fechaFinal = detalles.fechaFinal
                                    const estadoIDV = detalles.estadoIDV
                                    const zonaIDV = detalles.zonaIDV


                                    const contenedorOferta = document.createElement("div")
                                    contenedorOferta.setAttribute("ofertaUID", ofertaUID)
                                    contenedorOferta.classList.add(
                                        "borderRadius12",
                                        "width100",
                                        "flexVertical",
                                        "backgroundGrey1",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorGlobal = document.createElement("div")

                                    const nombreOfertaUI = document.createElement("div")
                                    nombreOfertaUI.classList.add("negrita")
                                    nombreOfertaUI.innerText = nombreOferta
                                    contenedorGlobal.appendChild(nombreOfertaUI)

                                    const estadoTitulo = document.createElement("div")
                                    estadoTitulo.innerText = "Estado de la oferta"
                                    contenedorGlobal.appendChild(estadoTitulo)


                                    const estadoUI = document.createElement("div")
                                    estadoUI.classList.add("negrita")
                                    estadoUI.innerText = estadoUI_(estadoIDV)
                                    contenedorGlobal.appendChild(estadoUI)
                                    contenedorOferta.appendChild(contenedorGlobal)

                                    const contendorBotones = document.createElement("div")
                                    contendorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6",
                                    )

                                    const botonInsertar = document.createElement("div")
                                    botonInsertar.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8"
                                    )
                                    botonInsertar.innerText = "Insertar descuento en la reserva"
                                    botonInsertar.addEventListener("click", () => {
                                        this.confirmarInsertar({
                                            simulacionUID,
                                            ofertaUID,
                                            instanciaUID_insertarDescuentosUI,
                                            instanciaUID_contenedorFinanciero
                                        })

                                    })
                                    contendorBotones.appendChild(botonInsertar)

                                    const botonVerOferta = document.createElement("a")
                                    botonVerOferta.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8",
                                        "limpiezaBotonA"
                                    )
                                    botonVerOferta.innerText = "Ir a la oferta"
                                    botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                    botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                    botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contendorBotones.appendChild(botonVerOferta)


                                    contenedorOferta.appendChild(contendorBotones)

                                    contenedorOfertas.appendChild(contenedorOferta)
                                })
                                constructor.appendChild(this.botonCancelar())

                            }

                        },
                        botonCancelar: () => {
                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.innerText = "Cerrar y volver a la reserva"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            return botonCancelar
                        },
                        confirmarInsertar: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const ofertaUID = String(data.ofertaUID)
                            const instanciaUID_insertarDescuentosUI = data.instanciaUID_insertarDescuentosUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            contenedor.innerHTML = null

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Insertando oferta en la reserva..."
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/insertarDescuentoPorAdministrador",
                                simulacionUID,
                                ofertaUID
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }

                        },

                    },
                    insertarOfertasCompatibles: {
                        ui: async function (data) {
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const instanciaUID_insertarDescuentosUI = ui.getAttribute("instanciaUID")
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            main.appendChild(ui)
                            const constructor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo ofertas compatibles con la oferta...",
                                textoBoton: "Cancelar"
                            })
                            constructor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/obtenerDescuentosCompatiblesConLaSimulacion",
                                simulacionUID
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                            if (!uiRenderizada) { return }
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {


                                const ofertas = respuestaServidor.ofertasCompatibles


                                spinner.remove()
                                if (ofertas.length > 0) {
                                    constructor.appendChild(this.botonCancelar())

                                } else {
                                    const info = document.createElement("p")
                                    info.classList.add(
                                        "textoCentrado"
                                    )
                                    info.innerText = "No hay ofertas compatibles con esta reserva. Si quieres insertar ofertas no compatibles de manera arbitraria, a esta reserva usa el bot√≥n de insertar descuentos."
                                    constructor.appendChild(info)

                                }
                                const contenedorOfertas = document.createElement("div")
                                contenedorOfertas.classList.add(
                                    "maxWidth1280px",
                                    "width100",
                                    "flexVertical",
                                    "gap6",
                                )
                                constructor.appendChild(contenedorOfertas)

                                const estadoUI_ = (estadoIDV) => {

                                    if (estadoIDV === "activado") {
                                        return "Activada"
                                    } else if (estadoIDV === "desactivado") {
                                        return "Desactivada"
                                    }
                                }

                                ofertas.forEach((contenedorOferta) => {
                                    const detalles = contenedorOferta.oferta
                                    const nombreOferta = detalles.nombreOferta
                                    const ofertaUID = detalles.ofertaUID
                                    const fechaInicio = detalles.fechaInicio
                                    const fechaFinal = detalles.fechaFinal
                                    const estadoIDV = detalles.estadoIDV
                                    const zonaIDV = detalles.zonaIDV

                                    const contenedorOfertaUI = document.createElement("div")
                                    contenedorOfertaUI.setAttribute("ofertaUID", ofertaUID)
                                    contenedorOfertaUI.classList.add(
                                        "borderRadius12",
                                        "width100",
                                        "flexVertical",
                                        "backgroundGrey1",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorGlobal = document.createElement("div")

                                    const nombreOfertaUI = document.createElement("div")
                                    nombreOfertaUI.classList.add("negrita")
                                    nombreOfertaUI.innerText = nombreOferta
                                    contenedorGlobal.appendChild(nombreOfertaUI)

                                    const estadoTitulo = document.createElement("div")
                                    estadoTitulo.innerText = "Estado de la oferta"
                                    contenedorGlobal.appendChild(estadoTitulo)

                                    const estadoUI = document.createElement("div")
                                    estadoUI.classList.add("negrita")
                                    estadoUI.innerText = estadoUI_(estadoIDV)
                                    contenedorGlobal.appendChild(estadoUI)
                                    contenedorOfertaUI.appendChild(contenedorGlobal)

                                    const contendorBotones = document.createElement("div")
                                    contendorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6",
                                    )

                                    const botonInsertar = document.createElement("div")
                                    botonInsertar.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8"
                                    )

                                    botonInsertar.innerText = "Insertar descuento en la reserva"
                                    botonInsertar.addEventListener("click", () => {
                                        this.confirmarInsertarCompatible({
                                            simulacionUID,
                                            ofertaUID,
                                            instanciaUID_insertarDescuentosUI,
                                            instanciaUID_contenedorFinanciero
                                        })
                                    })
                                    contendorBotones.appendChild(botonInsertar)

                                    const botonVerOferta = document.createElement("a")
                                    botonVerOferta.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8",
                                        "limpiezaBotonA"
                                    )
                                    botonVerOferta.innerText = "Ir a la oferta"
                                    botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                    botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                    botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contendorBotones.appendChild(botonVerOferta)

                                    contenedorOfertaUI.appendChild(contendorBotones)

                                    contenedorOfertas.appendChild(contenedorOfertaUI)
                                })
                                constructor.appendChild(this.botonCancelar())

                            }

                        },
                        botonCancelar: () => {
                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.innerText = "Cerrar y volver a la reserva"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            return botonCancelar
                        },
                        confirmarInsertarCompatible: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const ofertaUID = String(data.ofertaUID)
                            const instanciaUID_insertarDescuentosUI = data.instanciaUID_insertarDescuentosUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            contenedor.innerHTML = null

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Insertando oferta en la reserva..."
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/insertarDescuentoPorCompatible",
                                simulacionUID,
                                ofertaUID
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }

                        },

                    },
                    sobreControlPrecios: {
                        botonAlterarPrecio: () => {
                            const botonDeslegarOpciones = document.createElement("div")
                            botonDeslegarOpciones.classList.add(
                                "padding6",
                                "botonV1",
                                "comportamientoBoton"
                            )
                            botonDeslegarOpciones.innerText = "Alterar precio"
                            return botonDeslegarOpciones
                        },
                        nocheUI: async function (data) {
                            const fechaNoche = data.fechaNoche
                            const apartamentoIDV = data.apartamentoIDV
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const instanciaUID_sobreControlUI = ui.getAttribute("instanciaUID")
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            main.appendChild(ui)
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo detalles de la noche...",
                                textoBoton: "Cancelar"
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/sobreControlPrecios/obtenerDetallesSobreControlNoche",
                                simulacionUID,
                                apartamentoIDV: apartamentoIDV,
                                fechaNoche: fechaNoche
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)

                            if (!uiRenderizada) { return }
                            if (respuestaServidor?.error) {
                                uiRenderizada?.remove()
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor.ok) {
                                contenedor.innerHTML = null

                                const data = respuestaServidor.ok
                                const instantanea = data.instantaneaNetoApartamento
                                const apartamentoUI = instantanea.apartamentoUI
                                const precioNetoApartamento = instantanea.precioNetoApartamento

                                const sobreControl = data?.sobreControl
                                const detallesSobreControl = sobreControl.detallesSobreControl || {}
                                const operacion = detallesSobreControl?.operacion
                                const valorSobreControl = detallesSobreControl?.valor || "0.00"

                                const titulo = document.createElement("div")
                                titulo.classList.add(
                                    "textSize16",
                                    "textoCentrado"
                                )
                                titulo.innerText = `Detalles del ${apartamentoUI} en la noche de ${fechaNoche}`
                                contenedor.appendChild(titulo)

                                const contenedorValorOrigen = document.createElement("div")
                                contenedorValorOrigen.classList.add(
                                    "flexVertical",
                                    "backgroundGrey1",
                                    "padding12",
                                    "borderRadius8"
                                )
                                contenedor.appendChild(contenedorValorOrigen)

                                const tituloValorOrigen = document.createElement("div")
                                tituloValorOrigen.innerText = "Valor origen"
                                contenedorValorOrigen.appendChild(tituloValorOrigen)

                                const datoValorOrigen = document.createElement("div")
                                datoValorOrigen.classList.add(
                                    "negrita"
                                )
                                datoValorOrigen.innerText = precioNetoApartamento
                                contenedorValorOrigen.appendChild(datoValorOrigen)

                                const selectorTipoSobreControl = document.createElement("select")
                                selectorTipoSobreControl.classList.add(
                                    "selectorLista"
                                )
                                selectorTipoSobreControl.setAttribute("campo", "tipoOperacion")

                                const tituloSelector = document.createElement("option");
                                if (!operacion) {
                                    tituloSelector.selected = true;
                                }
                                tituloSelector.disabled = true;
                                tituloSelector.text = "Seleccionar el tipo de sobre control";
                                selectorTipoSobreControl.appendChild(tituloSelector);

                                const opciones = [
                                    { value: "aumentarPorPorcentaje", text: "Aumentar por porcentaje" },
                                    { value: "reducirPorPorcentaje", text: "Reducir por porcentaje" },
                                    { value: "aumentarPorCantidadFija", text: "Aumentar por cantidad fija" },
                                    { value: "reducirPorCantidadFila", text: "Reducir por cantidad fila" },
                                    { value: "establecerCantidad", text: "Establecer cantidad" }
                                ]
                                for (const opcionData of opciones) {
                                    const value = opcionData.value
                                    const text = opcionData.text
                                    const opcion = document.createElement("option");
                                    opcion.value = opcionData.value;
                                    opcion.text = opcionData.text;
                                    if (operacion === value) {
                                        opcion.selected = true;
                                    }
                                    selectorTipoSobreControl.appendChild(opcion);
                                }
                                contenedor.appendChild(selectorTipoSobreControl)
                                const campoValor = document.createElement("input")
                                campoValor.classList.add(
                                    "campoTexto"
                                )
                                campoValor.setAttribute("campo", "valor")
                                campoValor.placeholder = "Escribe la cantidad con dos decimales separados por punto, por ejemplo 0.00"
                                campoValor.value = valorSobreControl

                                contenedor.appendChild(campoValor)


                                if (Object.keys(detallesSobreControl).length > 0) {
                                    const boton = document.createElement("div")
                                    boton.classList.add("boton")
                                    boton.innerText = "Actualizar sobre control de precio"
                                    boton.addEventListener("click", () => {
                                        this.confirmar({
                                            instanciaUID_sobreControlUI,
                                            instanciaUID_contenedorFinanciero,
                                            simulacionUID,
                                            apartamentoIDV,
                                            tipoOperacion: selectorTipoSobreControl.value,
                                            fechaNoche,
                                            valorSobreControl: campoValor.value
                                        })
                                    })
                                    contenedor.appendChild(boton)
                                    const botonEliminar = document.createElement("div")
                                    botonEliminar.classList.add("boton")
                                    botonEliminar.innerText = "Eliminar sobre control de precio"
                                    botonEliminar.addEventListener("click", () => {
                                        this.eliminarSobreControl({
                                            instanciaUID_sobreControlUI,
                                            instanciaUID_contenedorFinanciero,
                                            simulacionUID,
                                            apartamentoIDV,
                                            fechaNoche
                                        })
                                    })
                                    contenedor.appendChild(botonEliminar)
                                } else {
                                    const boton = document.createElement("div")
                                    boton.classList.add("boton")
                                    boton.innerText = "Crear sobre control de precio"
                                    boton.addEventListener("click", () => {
                                        this.confirmar({
                                            instanciaUID_sobreControlUI,
                                            instanciaUID_contenedorFinanciero,
                                            simulacionUID,
                                            apartamentoIDV,
                                            tipoOperacion: selectorTipoSobreControl.value,
                                            fechaNoche,
                                            valorSobreControl: campoValor.value
                                        })
                                    })
                                    contenedor.appendChild(boton)
                                }

                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.innerText = "Cancelar y volver al desglose por noche."
                                botonCancelar.addEventListener("click", () => {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCancelar)
                            }
                        },
                        confirmar: async function (data) {
                            const instanciaUID_sobreControlUI = data.instanciaUID_sobreControlUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = data.simulacionUID
                            const apartamentoIDV = data.apartamentoIDV
                            const tipoOperacion = data.tipoOperacion
                            const fechaNoche = data.fechaNoche
                            const valorSobreControl = data.valorSobreControl
                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/sobreControlPrecios/actualizarSobreControlNoche",
                                simulacionUID,
                                apartamentoIDV,
                                fechaNoche,
                                tipoOperacion,
                                valorSobreControl
                            }
                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                            const contenedor = uiRenderizada.querySelector("[componente=contenedor]")
                            //contenedor.innerHTML = null

                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                mensaje: "Aplicando sobrecontrol de precio",
                                textoBoton: "ocultar",
                                instanciaUID: instanciaPantallaCarga
                            })

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaPantallaCargaUI = document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`)
                            instanciaPantallaCargaUI?.remove()

                            const uiContenedorFinanciero = document.querySelector(`[instanciaUID="${instanciaUID_contenedorFinanciero}"]`)
                            //if (!uiContenedorFinanciero) { return }

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor.ok) {
                                const sobreControlUI = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                if (sobreControlUI) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                }

                                const selectorDesgloseEnPantalla = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                if (!selectorDesgloseEnPantalla) {
                                    return
                                }
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })

                            }
                        },
                        eliminarSobreControl: async (data) => {
                            const instanciaUID_sobreControlUI = data.instanciaUID_sobreControlUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = data.simulacionUID
                            const apartamentoIDV = data.apartamentoIDV
                            const fechaNoche = data.fechaNoche
                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/sobreControlPrecios/eliminarSobreControlNoche",
                                simulacionUID,
                                apartamentoIDV,
                                fechaNoche
                            }
                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                mensaje: "Eliminado sobrecontrol de precio",
                                textoBoton: "ocultar",
                                instanciaUID: instanciaPantallaCarga
                            })

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaPantallaCargaUI = document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`)
                            instanciaPantallaCargaUI?.remove()

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor.ok) {
                                const sobreControlUI = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                if (sobreControlUI) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                }

                                const selectorDesgloseEnPantalla = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                if (!selectorDesgloseEnPantalla) {
                                    return
                                }
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }
                        }

                    },
                    eliminarOfertaEnSimulacion: {
                        ui: async function (data) {

                            const nombreOferta = data.nombreOferta
                            const ofertaUID = data.ofertaUID
                            const posicion = data.posicion
                            const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const origen = data.origen

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const instanciaUID = pantallaInmersiva.getAttribute("instanciaUID")
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.classList.add(
                                "negrita"
                            )
                            titulo.innerText = nombreOferta
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = `Confirmas o no la eliminaci√≥n de la oferta de la reserva, ¬øEstas de acuerdo?`

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = "Confirmar la eliminaci√≥n de la oferta de esta reserva"
                            botonAceptar.addEventListener("click", () => {
                                this.confirmar({
                                    simulacionUID,
                                    ofertaUID,
                                    posicion,
                                    origen,
                                    instanciaUID
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.innerText = "Cancelar y volver a la reserva"
                            document.querySelector("main").appendChild(pantallaInmersiva)

                        },
                        confirmar: async (data) => {

                            const ofertaUID = data.ofertaUID
                            const posicion = data.posicion
                            const simulacionUID = data.simulacionUID
                            const origen = data.origen

                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Elimiando oferta de la reserva..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/eliminarDescuentoEnSimulacion",
                                simulacionUID: String(simulacionUID),
                                ofertaUID: String(ofertaUID),
                                origen,
                                posicion: String(posicion)
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            instanciaRenderizada.remove()

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }
                        }

                    },
                    actualizarEstadoAutorizacion: async (data) => {

                        const ofertaUID = data.ofertaUID
                        const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                        const e = data.e
                        const area = e.target.closest("[ofertaUID][posicion]")
                        const autorizacionUI = area.querySelector("[dato=autorizacion]")
                        const estadoActualData = area.querySelector("[estadoActual]")
                        const estadoActual = estadoActualData.getAttribute("estadoActual")

                        const transaccion = {
                            zona: "administracion/simuladorDePrecios/descuentos/actualizarAutorizacionDescuentoCompatible",
                            simulacionUID: String(simulacionUID),
                            ofertaUID: String(ofertaUID),
                        }

                        if (estadoActual === "aceptada") {
                            autorizacionUI.innerText = "Rechazando..."
                            transaccion.nuevaAutorizacion = "rechazada"
                        } else if (estadoActual === "rechazada") {
                            autorizacionUI.innerText = "Aceptando..."
                            transaccion.nuevaAutorizacion = "aceptada"
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const estadoAutorizado = respuestaServidor.autorizacion
                            estadoActualData.setAttribute("estadoActual", estadoAutorizado)
                            if (estadoAutorizado === "aceptada") {
                                autorizacionUI.innerText = "Aceptada"
                                estadoActualData.innerText = "Rechazar oferta"
                            } else if (estadoAutorizado === "rechazada") {
                                autorizacionUI.innerText = "Rechazada"
                                estadoActualData.innerText = "Aceptar oferta"
                            }
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                simulacionUID
                            })
                        }
                    },
                    insertarImpuesto: {
                        ui: async function (data) {
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const instanciaUID_insertarImpuestoUI = ui.getAttribute("instanciaUID")
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            main.appendChild(ui)
                            const constructor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo impuestos...",
                                textoBoton: "Cancelar"
                            })
                            constructor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/impuestos/listarTodosLosImpuestos"
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarImpuestoUI}"]`)
                            if (!uiRenderizada) { return }
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                spinner.remove()
                                constructor.appendChild(this.botonCancelar())

                                const impuestos = respuestaServidor.impuestos

                                const contenedorOfertas = document.createElement("div")
                                contenedorOfertas.classList.add(
                                    "maxWidth1280px",
                                    "width100",
                                    "flexVertical",
                                    "gap6",
                                )
                                constructor.appendChild(contenedorOfertas)
                                const estadoUI_ = (estadoIDV) => {

                                    if (estadoIDV === "activado") {
                                        return "Activada"
                                    } else if (estadoIDV === "desactivado") {
                                        return "Desactivada"
                                    }

                                }

                                impuestos.forEach((impuesto) => {
                                    const impuestoUID = impuesto.impuestoUID
                                    const nombre = impuesto.nombre
                                    const tipoImpositivo = impuesto.tipoImpositivo
                                    const tipoValorIDV = impuesto.tipoValorIDV
                                    const entidadIDV = impuesto.entidadIDV
                                    const estadoIDV = impuesto.estadoIDV


                                    const contenedorOferta = document.createElement("div")
                                    contenedorOferta.setAttribute("impuestoUID", impuestoUID)
                                    contenedorOferta.classList.add(
                                        "borderRadius12",
                                        "width100",
                                        "flexVertical",
                                        "backgroundGrey1",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorGlobal = document.createElement("div")

                                    const nombreOfertaUI = document.createElement("div")
                                    nombreOfertaUI.classList.add("negrita")
                                    nombreOfertaUI.innerText = nombre
                                    contenedorGlobal.appendChild(nombreOfertaUI)

                                    const estadoTitulo = document.createElement("div")
                                    estadoTitulo.innerText = "Estado del impuesto"
                                    contenedorGlobal.appendChild(estadoTitulo)


                                    const estadoUI = document.createElement("div")
                                    estadoUI.classList.add("negrita")
                                    estadoUI.innerText = estadoUI_(estadoIDV)
                                    contenedorGlobal.appendChild(estadoUI)
                                    contenedorOferta.appendChild(contenedorGlobal)

                                    const contendorBotones = document.createElement("div")
                                    contendorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6",
                                    )

                                    const botonInsertar = document.createElement("div")
                                    botonInsertar.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8"
                                    )
                                    botonInsertar.innerText = "Insertar impuesto en la reserva"
                                    botonInsertar.addEventListener("click", () => {
                                        this.confirmarInsertar({
                                            simulacionUID,
                                            impuestoUID,
                                            instanciaUID_insertarImpuestoUI,
                                            instanciaUID_contenedorFinanciero
                                        })
                                    })
                                    contendorBotones.appendChild(botonInsertar)

                                    const botonVerOferta = document.createElement("a")
                                    botonVerOferta.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8",
                                        "limpiezaBotonA"
                                    )
                                    botonVerOferta.innerText = "Ir al impuesto"
                                    botonVerOferta.setAttribute("href", "/administracion/impuestos/" + impuestoUID)
                                    botonVerOferta.setAttribute("vista", "/administracion/impuestos/" + impuestoUID)
                                    botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contendorBotones.appendChild(botonVerOferta)


                                    contenedorOferta.appendChild(contendorBotones)

                                    contenedorOfertas.appendChild(contenedorOferta)
                                })
                                constructor.appendChild(this.botonCancelar())

                            }

                        },
                        botonCancelar: () => {
                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.innerText = "Cerrar y volver a la reserva"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            return botonCancelar
                        },
                        confirmarInsertar: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const impuestoUID = String(data.impuestoUID)
                            const instanciaUID_insertarImpuestoUI = data.instanciaUID_insertarImpuestoUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarImpuestoUI}"]`)
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            contenedor.innerHTML = null

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Insertando oferta en la reserva..."
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/impuestos/insertarImpuestoEnSimulacion",
                                impuestoUID,
                                simulacionUID
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }
                        },

                    },
                    eliminarImpuesto: {
                        ui: async function (data) {
                            const nombreImpuesto = data.nombreImpuesto
                            const impuestoUID = data.impuestoUID
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                            const instanciaUID_eliminarImpuestoUI = pantallaInmersiva.getAttribute("instanciaUID")


                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.innerText = `Confirmar eliminar impuesto ${nombreImpuesto} de la reserva`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = "Var a eliminar el impuesto de la reserva, ¬øEstas de acuerdo ? "

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = "Comfirmar la eliminacion"
                            botonAceptar.addEventListener("click", () => {
                                this.confirmarEliminar({
                                    impuestoUID,
                                    simulacionUID,
                                    instanciaUID_contenedorFinanciero,
                                    instanciaUID_eliminarImpuestoUI
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.innerText = "Cancelar y volver"

                            document.querySelector("main").appendChild(pantallaInmersiva)

                        },
                        confirmarEliminar: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const impuestoUID = String(data.impuestoUID)
                            const instanciaUID_eliminarImpuestoUI = data.instanciaUID_eliminarImpuestoUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarImpuestoUI}"]`)
                            const contenedor = ui.querySelector("[componente=constructor]")
                            contenedor.innerHTML = null

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Eliminado impuesto en la reserva..."
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/impuestos/eliminarImpuestoEnSimulacion",
                                simulacionUID,
                                impuestoUID
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }

                        },

                    },
                    crearImpuestoAdHoc: {
                        ui: async function (data) {
                            const nombreImpuesto = data.nombreImpuesto
                            const impuestoUID = data.impuestoUID
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                            const instanciaUID_eliminarImpuestoUI = pantallaInmersiva.getAttribute("instanciaUID")
                            const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.innerText = `Crear impuesto dedicado solo para esta reserva`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = "Rellena el formulario para crear un impuesto solo para esta reserva.Este impuesto creado solo existir√° en esta reserva.Si necesitas crear un impuesto que quieras usar para insertar en reservas, pero que no se aplique, crea un impuesto en la secci√≥n de impuesto y mantenlo desactivado."

                            const contenedorFormulario = document.createElement("div")
                            contenedorFormulario.classList.add(
                                "flexVertical",
                                "gap6"
                            )
                            contenedor.appendChild(contenedorFormulario)


                            const campoCraerNuevoImpuesto = document.createElement("input")
                            campoCraerNuevoImpuesto.classList.add(
                                "padding10",
                                "borderRadius10"

                            )
                            campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "nombreImpuesto")
                            campoCraerNuevoImpuesto.placeholder = "Escribo el nombre del nuevo impuesto"
                            contenedorFormulario.appendChild(campoCraerNuevoImpuesto)

                            const campoTipoImpositivo = document.createElement("input")
                            campoTipoImpositivo.classList.add(
                                "padding10",
                                "borderRadius10"
                            )
                            campoTipoImpositivo.setAttribute("comNuevoImpuesto", "tipoImpositivo")
                            campoTipoImpositivo.placeholder = "0.00"
                            contenedorFormulario.appendChild(campoTipoImpositivo)

                            const contenedorOpciones = document.createElement("select")
                            contenedorOpciones.classList.add(
                                "padding10",
                                "borderRadius10",
                                "selectorLista"
                            )
                            contenedorOpciones.setAttribute("comNuevoImpuesto", "tipoValor")
                            const tipoValorLista = [
                                {
                                    tipoValorIDV: "",
                                    tipoValorUI: "Selecciona el tipo de impuesto"
                                },
                                {
                                    tipoValorIDV: "porcentaje",
                                    tipoValorUI: "Porcentaje"
                                },
                                {
                                    tipoValorIDV: "tasa",
                                    tipoValorUI: "Tasa"
                                },

                            ]
                            tipoValorLista.forEach((contenedorTipoValor) => {
                                const tipoValorIDV = contenedorTipoValor.tipoValorIDV
                                const tipoValorUI = contenedorTipoValor.tipoValorUI
                                const opcion = document.createElement("option");
                                if (!tipoValorIDV) {
                                    opcion.selected = true;
                                    opcion.disabled = true;

                                }
                                opcion.value = tipoValorIDV;
                                opcion.text = tipoValorUI;
                                opcion.setAttribute("opcion", tipoValorIDV)
                                contenedorOpciones.add(opcion);
                            })
                            contenedorFormulario.appendChild(contenedorOpciones)


                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = "Crear impuesto dedicado para esta reserva"
                            botonAceptar.addEventListener("click", () => {
                                this.confirmarCrearImpuestoAdHoc({
                                    simulacionUID,
                                    instanciaUID_contenedorFinanciero,
                                    instanciaUID_eliminarImpuestoUI,
                                    nombreImpuesto: campoCraerNuevoImpuesto.value,
                                    tipoImpositivo: campoTipoImpositivo.value,
                                    tipoValorIDV: contenedorOpciones.value

                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.innerText = "Cancelar y volver"

                            document.querySelector("main").appendChild(pantallaInmersiva)

                        },
                        confirmarCrearImpuestoAdHoc: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const nombreImpuesto = data.nombreImpuesto
                            const tipoImpositivo = data.tipoImpositivo
                            const tipoValorIDV = data.tipoValorIDV

                            const instanciaUID_eliminarImpuestoUI = data.instanciaUID_eliminarImpuestoUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                            const instanciaUID_pantallaDeCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()

                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID_pantallaDeCargaSuperPuesta,
                                mensaje: "Creando impuesto dedicado e insertando en la reserva..."
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/impuestos/insertarImpuestoDedicadoEnSimulacion",
                                simulacionUID,
                                nombreImpuesto,
                                tipoImpositivo,
                                tipoValorIDV,
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCargaSuperPuesta}"]`)?.remove()

                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }
                        },

                    },
                    reconstruirDesgloseFinanciero: {
                        ui: async function (data) {
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")
                            const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")
                            document.querySelector("main").appendChild(pantallaInmersiva)



                            const tituloUI = document.createElement("p")
                            tituloUI.classList.add("tituloGris")
                            tituloUI.setAttribute("componente", "titulo")
                            tituloUI.innerText = `Elige el origen de la reconstrucion del desglose financiero de la reserva ${simulacionUID}`
                            contenedor.appendChild(tituloUI)



                            const mensajeUI = document.createElement("div")
                            mensajeUI.classList.add("mensajeUI")
                            mensajeUI.setAttribute("componente", "mensajeUI")
                            mensajeUI.innerText = "Esta operaci√≥n reconstruye el desglose financiero.Reconstruir desde la instant√°nea regenera el desglose financiero desde las instant√°neas del contenedor financiero de la reserva.Esta operaci√≥n es √∫til si no se ha reconstituido por alguna raz√≥n el desglose financiero correctamente tras alguna operaci√≥n."
                            contenedor.appendChild(mensajeUI)


                            const botonDesdeInstantaneas = document.createElement("div")
                            botonDesdeInstantaneas.classList.add("boton")
                            botonDesdeInstantaneas.setAttribute("boton", "aceptar")
                            botonDesdeInstantaneas.innerText = "Reconstruir desde instantaneas"
                            botonDesdeInstantaneas.addEventListener("click", () => {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                this.desdeInstantaneas.ui({
                                    simulacionUID,
                                    instanciaUID_contenedorFinanciero,
                                    instanciaUID_reconstrucion
                                })
                            })
                            contenedor.appendChild(botonDesdeInstantaneas)


                            const mensajeUI_ = document.createElement("div")
                            mensajeUI_.classList.add("mensajeUI")
                            mensajeUI_.setAttribute("componente", "mensajeUI")
                            mensajeUI_.innerText = "Reconstruir el desglose financiero desde el hub, reconstruir√° el desglose financiero actualizando las instant√°neas de la reserva desde el hub de precios base, comportamiento de precios y ofertas actualmente configurados.Esta operaci√≥n es irreversible y puede ser √∫til cuando necesito actualizar ciertos datos del contenedor financiero de la reserva desde los hubs de origen."
                            contenedor.appendChild(mensajeUI_)

                            const botonDesdeHub = document.createElement("div")
                            botonDesdeHub.classList.add("boton")
                            botonDesdeHub.setAttribute("boton", "aceptar")
                            botonDesdeHub.innerText = "Reconstruir desde el hub"
                            botonDesdeHub.addEventListener("click", () => {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                this.desdeHub.ui({
                                    simulacionUID,
                                    instanciaUID_contenedorFinanciero,
                                    instanciaUID_reconstrucion
                                })

                            })

                            contenedor.appendChild(botonDesdeHub)

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.innerText = "Cancelar y volver"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            contenedor.appendChild(botonCancelar)

                        },
                        desdeInstantaneas: {
                            ui: async function (data) {
                                const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")


                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.innerText = `Confirmar reconstruir el desglose de la reserva ${simulacionUID} de las instantaneas`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.innerText = "Esta operaci√≥n reconstruye el desglose financiero.S√≠ ha ocurrido un alg√∫n tipo de error en alg√∫n c√°lculo durante la construcci√≥n del desglose financiero, esta opci√≥n podr√≠a recuperar la interferencia del desglose financiero."

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.innerText = "Comfirmar la reconstrucci√≥n"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarReconstrucion({
                                        simulacionUID,
                                        instanciaUID_contenedorFinanciero,
                                        instanciaUID_reconstrucion
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.innerText = "Cancelar y volver"

                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            confirmarReconstrucion: async function (data) {
                                const simulacionUID = data.simulacionUID
                                const instanciaUID_reconstrucion = data.instanciaUID_reconstrucion
                                const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                                const ui = document.querySelector(`[instanciaUID="${instanciaUID_reconstrucion}"]`)
                                const contenedor = ui.querySelector("[componente=constructor]")
                                contenedor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Reconstruyendo el desglose financiero desde las instant√°neas de la reserva..."
                                })
                                contenedor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/simuladorDePrecios/contenedorFinanciero/reconstruirDesgloseDesdeInstantaneas",
                                    simulacionUID
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                if (!uiRenderizada) { return }

                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                        simulacionUID
                                    })
                                }

                            },
                        },
                        desdeHub: {
                            ui: async function (data) {
                                const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")
                                const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")
                                contenedor.classList.add(
                                    "flexVertical"
                                )



                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.innerText = `Confirmar reconstruir el desglose de la reserva ${simulacionUID} desde el hub (Operaci√≥n irreversible)`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.innerText = "Esta operaci√≥n reconstruye el desglose financiero, actualizando las instant√°neas desde el hub de precios base, comportamientos de precio, ofertas e impuestos.Esta operaci√≥n es irreversible porque sobrescribe los datos actuales de las instant√°neas y reconstruye todo el contenedor financiero de la reserva.Para evitar falsos clics, por favor, escribe la palabra, reconstruir, en el campo de texto."

                                const campo = document.createElement("input")
                                campo.placeholder = "Escribe la palabra reconstruir"
                                campo.classList.add(
                                    "borderRadius10",
                                    "padding10"
                                )
                                contenedor.appendChild(campo)
                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.innerText = "Comfirmar la reconstrucci√≥n irreversible de todo el contenedor financiero de la reserva"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarReconstrucion({
                                        simulacionUID,
                                        instanciaUID_contenedorFinanciero,
                                        instanciaUID_reconstrucion,
                                        palabra: campo.value
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.innerText = "Cancelar y volver"

                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            confirmarReconstrucion: async function (data) {
                                const simulacionUID = data.simulacionUID
                                const palabra = data.palabra
                                const sobreControl = data.sobreControl

                                const instanciaUID_pantallaDeCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()

                                const datosPantallaSuperpuesta = {
                                    instanciaUID: instanciaUID_pantallaDeCargaSuperPuesta,
                                    mensaje: "Reconstruyendo todo el contenedor financiero de la reserva desde los hubs..."
                                }
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                                const transaccion = {
                                    zona: "administracion/simuladorDePrecios/contenedorFinanciero/reconstruirDesgloseDesdeHubs",
                                    simulacionUID,
                                    palabra,
                                    sobreControl
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const pantallaDeCarga_renderizda = document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCargaSuperPuesta}"]`)
                                pantallaDeCarga_renderizda?.remove()

                                const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                if (!uiRenderizada) { return }


                                casaVitini.administracion.simuladorDePrecios.componentes.controladorUIPorFaltaDeLLaves(respuestaServidor)

                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const servicios = respuestaServidor.instantaneaServicios
                                    casaVitini.administracion.simuladorDePrecios.componentes.servicios.actualizarContenedor({ servicios })
                                    return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                        simulacionUID
                                    })
                                }

                            },
                        }

                    },
                    desplegarContenedorFinanciero: async (data) => {
                        const simulacionUID = data.simulacionUID
                        const transaccion = {
                            zona: "administracion/simuladorDePrecios/detallesSimulacion",
                            simulacionUID: String(simulacionUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        const instanciaRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                        if (!instanciaRenderizada) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {

                            const contenedorFinanciero = respuestaServidor.contenedorFinanciero
                            casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                contenedorFinanciero,
                                modoUI: "simulador"
                            })
                        }
                    },

                },
                eliminarSimulacion: {
                    UI: function () {
                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.innerText = "Confirmar la eliminaci√≥n de la simulaci√≥n"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.innerText = "Vas a eliminar la simulacui√≥n"

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.innerText = "Comfirmar la eliminacion del impuesto"
                        botonAceptar.addEventListener("click", () => {
                            this.confirmarEliminacion()
                        })
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.innerText = "Cancelar la eliminaci√≥n"
                        document.querySelector("main").appendChild(pantallaInmersiva)
                    },
                    confirmarEliminacion: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Eliminado simulaciuon..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                        const transaccion = {
                            zona: "administracion/simuladorDePrecios/eliminarSimulacion",
                            simulacionUID: String(simulacionUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            const entrada = {
                                vista: "/administracion/simulador_de_precios",
                                //tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(entrada)
                        }
                    }
                },
                actualizarNombreSimulacion: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando el nombre de la simulaci√≥n..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje,
                        identificadorVisual: "pantallaDeCarga"
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                    const nombre = document.querySelector("[campo=nombre]").value
                    const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")

                    const transaccion = {
                        zona: "administracion/simuladorDePrecios/actualizarNombreSimulacion",
                        simulacionUID,
                        nombre

                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()

                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    }
                },
            },
            componentes: {
                simulacionUI: function () {
                    const contenedor = document.createElement("div")
                    contenedor.classList.add(
                        "flexVertical",
                        "gap6"
                    )
                    //Fecha de creacion simulada
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()
                    //Boton resetear fechas
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.setAttribute("contenedor", "botones")
                    contenedorBotones.classList.add(
                        "flexVertical",
                        "gap6"
                    )
                    contenedor.appendChild(contenedorBotones)

                    const contenedorFechaCreacion = document.createElement("div");
                    contenedorFechaCreacion.setAttribute("calendario", "fechaCreacion");
                    contenedorFechaCreacion.setAttribute("CSS", "selectorFechas")
                    contenedorFechaCreacion.classList.add(
                        "flexVertical",
                        "gap6"
                    )
                    contenedorFechaCreacion.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                    contenedorFechaCreacion.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                    contenedor.appendChild(contenedorFechaCreacion);



                    const contenedorZonaIDV = document.createElement("div")
                    contenedorZonaIDV.classList.add(
                        "flexVertical"
                    )
                    contenedorFechaCreacion.appendChild(contenedorZonaIDV)
                    const opcionesEntidad = [
                        {
                            zonaIDV: "",
                            zonaUI: "Zona simulada"
                        },
                        {
                            zonaIDV: "global",
                            zonaUI: "Global"
                        },
                        {
                            zonaIDV: "privada",
                            zonaUI: "Privada"
                        },
                        {
                            zonaIDV: "publica",
                            zonaUI: "P√∫blica"
                        },

                    ]
                    const selectorZonaIDV = document.createElement("select")
                    selectorZonaIDV.addEventListener("change", () => {
                        casaVitini.administracion.simuladorDePrecios.componentes.actualizaSimulacion()
                    })

                    selectorZonaIDV.classList.add(
                        "selectorZonas",
                        "padding10",
                        "borderRadius6",
                        "selectorLista"
                    )
                    selectorZonaIDV.setAttribute("selector", "zonaIDV")
                    opcionesEntidad.forEach((e) => {
                        const zonaIDV = e.zonaIDV
                        const zonaUI = e.zonaUI
                        const opcion = document.createElement("option");

                        if (zonaIDV === "") {
                            opcion.disabled = true;
                            opcion.selected = true;

                        }

                        opcion.value = zonaIDV;
                        opcion.text = zonaUI;
                        selectorZonaIDV.add(opcion);
                    })
                    contenedorZonaIDV.appendChild(selectorZonaIDV)




                    const selectorFechaCreacion = document.createElement("div")
                    selectorFechaCreacion.classList.add("contenedorFecha");
                    selectorFechaCreacion.setAttribute("calendario", "unico");
                    selectorFechaCreacion.setAttribute("nombreContenedor", "rangoUnico")

                    selectorFechaCreacion.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_unico_perfilSimple",
                            contenedorOrigenIDV: "[calendario=unico]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "unico",
                            metodoSelectorDia: "administracion.simuladorDePrecios.componentes.pasarelaSelectorDia",
                            tituloCalendario: "Selecciona la fecha de creaci√≥n simulada de la reserva"
                        })
                    })

                    const tituloFechaCreacion = document.createElement("p");
                    tituloFechaCreacion.classList.add("negrita");
                    tituloFechaCreacion.textContent = "Fecha de creaci√≥n simulada"
                    selectorFechaCreacion.appendChild(tituloFechaCreacion)

                    const fechaCreacionUI = document.createElement("p");
                    fechaCreacionUI.classList.add("fechaInicio");
                    fechaCreacionUI.setAttribute("fechaUI", "unico");
                    fechaCreacionUI.textContent = "(Seleccionar)";
                    selectorFechaCreacion.appendChild(fechaCreacionUI)

                    contenedorFechaCreacion.appendChild(selectorFechaCreacion);


                    const botonResetearFechas = document.createElement("div")
                    botonResetearFechas.classList.add(
                        "botonV1",
                        "comportamientoBoton",
                        "padding6",
                        "textoCentrado",
                        "backgroundGrey1",
                        "borderRadius8",
                        "noSelecionable"
                    )
                    botonResetearFechas.innerText = "Borrar el rango de fechas"
                    botonResetearFechas.addEventListener("click", (e) => {
                        // const entidadOrigen = e.target

                        const selectorFechaEntrada = document.querySelector("[calendario=entrada]")
                        const selectorFechaSalida = document.querySelector("[calendario=salida]")

                        // const fechaEntradaActual = selectorFechaEntrada.getAttribute("memoriaVolatil")
                        // const fechaSalidaActual = selectorFechaSalida.getAttribute("memoriaVolatil")

                        // const fechaEntradaRecovery_ISO = entidadOrigen.getAttribute("fechaEntradaRecovery_ISO")
                        // const fechaSalidaRecovery_ISO = entidadOrigen.getAttribute("fechaSalidaRecovery_ISO")


                        selectorFechaEntrada.classList.add("parpadeoFondoAzul")
                        selectorFechaSalida.classList.add("parpadeoFondoAzul")

                        selectorFechaSalida.removeAttribute("memoriaVolatil")
                        selectorFechaEntrada.removeAttribute("memoriaVolatil")
                        selectorFechaEntrada.querySelector("[fechaUI=fechaInicio]").innerText = "(Seleccionar)"
                        selectorFechaSalida.querySelector("[fechaUI=fechaFin]").innerText = "(Seleccionar)"


                        // if (fechaEntradaActual && !fechaEntradaRecovery_ISO) {

                        //     selectorFechaEntrada.classList.add("parpadeoFondoAzul")

                        //     const fechaEntradaActual_ISO = selectorFechaEntrada.getAttribute("memoriaVolatil")
                        //     const fechaEntradaActual_UI = selectorFechaEntrada.querySelector("[fechaUI=fechaInicio]").innerHTML

                        //     entidadOrigen.setAttribute("fechaEntradaRecovery_ISO", fechaEntradaActual_ISO)
                        //     entidadOrigen.setAttribute("fechaEntradaRecovery_UI", fechaEntradaActual_UI)

                        //     selectorFechaEntrada.removeAttribute("memoriaVolatil")
                        //     selectorFechaEntrada.querySelector("[fechaUI=fechaInicio]").innerText = "(Seleccionar)"
                        //     entidadOrigen.innerHTML = "Recuperar la fecha de entrada en el rango"

                        // } else if (!fechaEntradaActual && fechaEntradaRecovery_ISO) {

                        //     const fechaEntrada_recovery_ISO = entidadOrigen.getAttribute("fechaEntradaRecovery_ISO")
                        //     const fechaEntrada_recovery_UI = entidadOrigen.getAttribute("fechaEntradaRecovery_UI")

                        //     selectorFechaEntrada.classList.remove("parpadeoFondoAzul")
                        //     selectorFechaEntrada.setAttribute("memoriaVolatil", fechaEntrada_recovery_ISO)
                        //     selectorFechaEntrada.querySelector("[fechaUI=fechaInicio]").innerHTML = fechaEntrada_recovery_UI

                        //     entidadOrigen.removeAttribute("fechaEntradaRecovery_ISO")
                        //     entidadOrigen.removeAttribute("fechaEntradaRecovery_UI")

                        //     entidadOrigen.innerHTML = "Borrar el rango de fechas"
                        // }


                        // if (fechaSalidaActual && !fechaSalidaRecovery_ISO) {
                        //     selectorFechaSalida.classList.add("parpadeoFondoAzul")
                        //     const fechaSalidaActual_ISO = selectorFechaSalida.getAttribute("memoriaVolatil")
                        //     const fechaSalidaActual_UI = selectorFechaSalida.querySelector("[fechaUI=fechaFin]").innerHTML
                        //     entidadOrigen.setAttribute("fechaSalidaRecovery_ISO", fechaSalidaActual_ISO)
                        //     entidadOrigen.setAttribute("fechaSalidaRecovery_UI", fechaSalidaActual_UI)
                        //     selectorFechaSalida.removeAttribute("memoriaVolatil")
                        //     selectorFechaSalida.querySelector("[fechaUI=fechaFin]").innerText = "(Seleccionar)"
                        //     entidadOrigen.innerHTML = "Recuperar fecha de salida en el rango de fechas"

                        // } else if (!fechaSalidaActual && fechaSalidaRecovery_ISO) {

                        //     const fechaSalida_recovery_ISO = entidadOrigen.getAttribute("fechaSalidaRecovery_ISO")
                        //     const fechaSalida_recovery_UI = entidadOrigen.getAttribute("fechaSalidaRecovery_UI")

                        //     selectorFechaSalida.classList.remove("parpadeoFondoAzul")
                        //     selectorFechaSalida.setAttribute("memoriaVolatil", fechaSalida_recovery_ISO)
                        //     selectorFechaSalida.querySelector("[fechaUI=fechaFin]").innerHTML = fechaSalida_recovery_UI
                        //     entidadOrigen.removeAttribute("fechaSalidaRecovery_ISO")
                        //     entidadOrigen.removeAttribute("fechaSalidaRecovery_UI")
                        //     entidadOrigen.innerHTML = "Borrar el rango de fechas"
                        // }

                        // if (!fechaEntradaActual && !fechaSalidaActual) {
                        //     entidadOrigen.innerHTML = "Recuperar fechas en el rango de fechas"
                        // }
                    })
                    contenedor.appendChild(botonResetearFechas)

                    const selectorRangoSimulado = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                        metodoSelectorDia: "administracion.simuladorDePrecios.componentes.pasarelaSelectorDia",
                        nombreContenedor: "rangoDeSimulacion",
                        modo: "administracion",
                        seleccionableDiaLimite: "no",
                        sobreControlConfiguracion: {
                            configuracionInicio: {
                                tituloCalendario: "Seleciona una fecha de entrada simulada de la reserva"
                            },
                            configuracionFin: {
                                tituloCalendario: "Seleciona una fecha de salida simulada de la reserva"
                            }
                        }
                    })
                    contenedor.appendChild(selectorRangoSimulado)

                    const porApartamentoDedicado = document.createElement("div");
                    porApartamentoDedicado.classList.add(
                        "flexVertical",
                        "gap6",
                        "backgroundGrey1",
                        "padding6",
                        "borderRadius12"
                    );
                    porApartamentoDedicado.setAttribute("zonaOferta", "porApartamentosEspecificos");
                    porApartamentoDedicado.setAttribute("contenedor", "apartamentosSeleccianados")
                    contenedor.appendChild(porApartamentoDedicado)

                    const tituloApartamentos = document.createElement("p")
                    tituloApartamentos.classList.add(
                        "negrita",
                        "padding10"
                    )
                    tituloApartamentos.innerText = "Apartamentos de la simulaci√≥n"
                    porApartamentoDedicado.appendChild(tituloApartamentos)

                    const selectorApartamentosEspecificosUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                        textoContenedorVacio: "A√±ade apartamentos a la simulaci√≥n",
                        tipoDespliegue: "parcial",
                        metodoPersonalizado: "simulador"
                    })
                    porApartamentoDedicado.appendChild(selectorApartamentosEspecificosUI)


                    const contenedorZonaCodigo = document.createElement("div")
                    contenedorZonaCodigo.setAttribute("contenedor", "codigosDescuento")
                    contenedorZonaCodigo.classList.add(
                        "flexVertical",
                        "gap6",
                        "backgroundGrey1",
                        "padding6",
                        "borderRadius12"
                    )

                    contenedor.appendChild(contenedorZonaCodigo)

                    const contendorBotonesCampoCodigoDescuento = document.createElement("div")
                    contendorBotonesCampoCodigoDescuento.classList.add(
                        "flexHorizontal",
                        "flexApiladoI"
                    )
                    contenedorZonaCodigo.appendChild(contendorBotonesCampoCodigoDescuento)


                    const botonAgregarCampoCodigoDescuento = document.createElement("div")
                    botonAgregarCampoCodigoDescuento.classList.add(
                        "botonV1"
                    )
                    botonAgregarCampoCodigoDescuento.innerText = "Agregar campo de descuento"
                    botonAgregarCampoCodigoDescuento.addEventListener("click", () => {

                        const contenedorCodigosDecuentos = document.querySelector("[contenedor=codigosDescuento]")
                        const lista = contenedorCodigosDecuentos.querySelector("[contenedor=listaDescuentos]")
                        lista.removeAttribute("style")
                        const contenedorCampoUI = casaVitini.administracion.simuladorDePrecios.componentes.contenedorCodigosDescuento.contenedorCampo()
                        lista.appendChild(contenedorCampoUI)

                        const botonComprobar = casaVitini.administracion.simuladorDePrecios.componentes.contenedorCodigosDescuento.botonComprobar()
                        const selectorBotonComprobar_renderizado = contenedorCodigosDecuentos.querySelector("[boton=comprobar]")
                        if (!selectorBotonComprobar_renderizado) {
                            contenedorCodigosDecuentos.appendChild(botonComprobar)
                        }
                    })
                    contendorBotonesCampoCodigoDescuento.appendChild(botonAgregarCampoCodigoDescuento)



                    const contenedorCodigosDescuentosPorVerificar = document.createElement("div")
                    contenedorCodigosDescuentosPorVerificar.setAttribute("contenedor", "listaDescuentos")
                    contenedorCodigosDescuentosPorVerificar.style.display = "none"
                    contenedorCodigosDescuentosPorVerificar
                    contenedorCodigosDescuentosPorVerificar.classList.add(
                        "flexVertical",
                        "gap6",
                        "padding6"
                    )
                    contenedorZonaCodigo.appendChild(contenedorCodigosDescuentosPorVerificar)


                    const contenedorServicios = document.createElement("div");
                    contenedorServicios.classList.add(
                        "flexVertical",
                        "gap6",
                        "backgroundGrey1",
                        "padding6",
                        "borderRadius12"
                    );
                    contenedorServicios.setAttribute("contenedor", "servicios")
                    contenedor.appendChild(contenedorServicios)

                    const tituloServicios = document.createElement("p")
                    tituloServicios.classList.add(
                        "negrita",
                        "padding10"
                    )
                    tituloServicios.innerText = "Servicios de la simulaci√≥n"
                    contenedorServicios.appendChild(tituloServicios)


                    const serviciosUI = casaVitini.administracion.simuladorDePrecios.componentes.servicios.arranque()
                    contenedorServicios.appendChild(serviciosUI)

                    const botonReconstrucionHub = document.createElement("div")
                    botonReconstrucionHub.setAttribute("boton", "reconstruccionHubSinConfirmacion")
                    botonReconstrucionHub.classList.add("botonV1")
                    botonReconstrucionHub.innerText = "Reconstruir desglose desde los hubs"
                    contenedor.appendChild(botonReconstrucionHub)


                    const contenedorSimulacion = document.createElement("div")
                    contenedorSimulacion.setAttribute("contenedor", "simulacion")
                    contenedor.appendChild(contenedorSimulacion)

                    return contenedor

                },
                actualizaSimulacion: async function (data) {

                    const fechaCreacionUI = document.querySelector("[calendario=unico]")
                    const fechaCreacion = fechaCreacionUI?.getAttribute("memoriaVolatil") || null

                    const fechaEntradaUI = document.querySelector("[calendario=entrada]")
                    const fechaEntrada = fechaEntradaUI?.getAttribute("memoriaVolatil") || null

                    const fechaSalidaUI = document.querySelector("[calendario=salida]")
                    const fechaSalida = fechaSalidaUI?.getAttribute("memoriaVolatil") || null

                    const apartamentosIDVARRAYUI = document.querySelectorAll("[apartamentoSeleccionado]")

                    const zonaIDVUI = document.querySelector("[selector=zonaIDV]")
                    const zonaIDV = zonaIDVUI.value

                    const simulacionUID = document.querySelector("[simulacionUID]")?.getAttribute("simulacionUID")
                    if (!simulacionUID) {
                        return
                    }
                    const marcoElastico = document.querySelector("[componente=espacio]")
                    const selectorContendorSimulacion = document.querySelector("[contenedor=simulacion]")
                    selectorContendorSimulacion.style.display = "none"

                    const spinnerSimple = casaVitini.ui.componentes.spinnerSimple()
                    marcoElastico.appendChild(spinnerSimple)

                    const apartamentosIDVARRAY = []
                    apartamentosIDVARRAYUI.forEach((apartamento) => {
                        const apartamentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                        apartamentosIDVARRAY.push(apartamentoIDV)
                    })

                    const transaccion = {
                        zona: "administracion/simuladorDePrecios/actualizarSimulacionPorDataGlobal",
                        fechaCreacion,
                        fechaEntrada,
                        fechaSalida,
                        apartamentosIDVARRAY,
                        simulacionUID,
                        zonaIDV
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    this.controladorUIPorFaltaDeLLaves(respuestaServidor)

                    if (respuestaServidor?.error) {
                        selectorContendorSimulacion.removeAttribute("style")
                        spinnerSimple?.remove()
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        const selectorRecovery = data?.selectorRecovery

                        if (selectorRecovery) {
                            const fechaRecovery_ISO = data?.fechaRecovery_ISO
                            const fechaRecovery_humana = data?.fechaRecovery_humana

                            const selectorContenedorFecha = document.querySelector(selectorRecovery)
                            selectorContenedorFecha.setAttribute("memoriaVolatil", fechaRecovery_ISO)
                            selectorContenedorFecha.querySelector("[fechaUI]").innerText = fechaRecovery_humana
                        }
                    }
                    if (respuestaServidor?.ok) {
                        selectorContendorSimulacion.innerHTML = null
                        selectorContendorSimulacion.removeAttribute("style")
                        spinnerSimple?.remove()

                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                            simulacionUID
                        })
                    }
                },
                controladorUIPorFaltaDeLLaves: (data) => {
                    const llavesIDV = [
                        "[calendario=unico]",
                        "[calendario=entrada]",
                        "[calendario=salida]",
                        "[contenedor=apartamentosSeleccianados]",
                        "[selector=zonaIDV]"
                    ]
                    if (data.llavesFaltantes) {

                        const llavesFaltantes = data.llavesFaltantes
                        const llaves = [
                            "fechaEntrada",
                            "fechaSalida",
                            "fechaCreacion",
                            "apartamentosIDVARRAY",
                            "zonaIDV"
                        ]
                        const dic = {
                            fechaCreacion: llavesIDV[0],
                            fechaEntrada: llavesIDV[1],
                            fechaSalida: llavesIDV[2],
                            apartamentosIDVARRAY: llavesIDV[3],
                            zonaIDV: llavesIDV[4]
                        }
                        llaves.forEach((llave) => {
                            if (llavesFaltantes.includes(llave)) {
                                const selector = dic[llave];
                                const elemento = document.querySelector(selector);
                                if (elemento) {
                                    elemento.classList.add("parpadeoFondoAzul");
                                }
                            } else {
                                const selector = dic[llave];
                                const elemento = document.querySelector(selector);
                                if (elemento) {
                                    elemento.classList.remove("parpadeoFondoAzul");
                                }
                            }
                        })
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        const spinnnerRenderizado = document.querySelector("[componente=spinnerSimple]")
                        spinnnerRenderizado?.remove()

                        const selectorContendorSimulacion = document.querySelector("[contenedor=simulacion]")
                        selectorContendorSimulacion.removeAttribute("style")
                    } else {
                        llavesIDV.forEach((llaveIDV) => {
                            document.querySelector(llaveIDV).classList.remove("parpadeoFondoAzul")
                        })
                    }
                },
                apartamentoUI: function (data) {

                    const apartamentoIDV = data.apartamentoIDV
                    const apartamentoUI = data.apartamentoUI
                    const tipoDespliegue = data.tipoDespliegue
                    const seleccionadoInicial = data.seleccionadoInicial
                    const descuentoTotal = data.descuentoTotal || "0.00"


                    const apartamentoSeleccionadoUI = document.createElement("div")
                    apartamentoSeleccionadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                    apartamentoSeleccionadoUI.setAttribute("apartamentoSeleccionado", apartamentoIDV)
                    const tituloApartamento = document.createElement("div")
                    tituloApartamento.classList.add("crearOfertaApartamentoSeleccionadoUITitulo")
                    tituloApartamento.innerText = apartamentoUI
                    apartamentoSeleccionadoUI.appendChild(tituloApartamento)
                    const botonEliminarApartamento = document.createElement("div")
                    botonEliminarApartamento.classList.add("crearOfertaBoton")
                    botonEliminarApartamento.innerText = "Eliminar apartamento 11"
                    botonEliminarApartamento.addEventListener("click", (e) => {
                        const apartamentoRenderizado = e.target.closest("[apartamentoSeleccionado]")
                        apartamentoRenderizado.remove()
                        const instanciaUID = data.instanciaUID
                        const area = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        const conteoApartamentos = area.querySelectorAll(`[apartamentoSeleccionado]`)
                        if (conteoApartamentos.length === 0) {
                            area.querySelector("[componente=infoSinApartamento]").removeAttribute("style")
                        }
                        casaVitini.administracion.simuladorDePrecios.componentes.actualizaSimulacion()
                    })
                    apartamentoSeleccionadoUI.appendChild(botonEliminarApartamento)
                    return apartamentoSeleccionadoUI
                },
                servicios: {
                    arranque: () => {

                        const contenedor = document.createElement("div")
                        contenedor.setAttribute("class", "contenedorServicios")
                        contenedor.setAttribute("componente", "categoriaServicios")

                        const contenedorInformacionGlobal = document.createElement("div")
                        contenedorInformacionGlobal.classList.add("administracion_reservas_detallesReserva_contenedorEnlacesDePago")

                        contenedor.appendChild(contenedorInformacionGlobal)
                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReserva_enlacesDePago_bloqueBotones")

                        const botonCrearPagoManual = document.createElement("div")
                        botonCrearPagoManual.classList.add("detallesReserva_transacciones_botonV1")
                        botonCrearPagoManual.innerText = "Insertar un servicio"
                        botonCrearPagoManual.addEventListener("click", () => {
                            casaVitini.administracion.simuladorDePrecios.componentes.servicios.componentesUI.insertarServicio.ui({
                            })
                        })
                        bloqueBotones.appendChild(botonCrearPagoManual)
                        contenedorInformacionGlobal.appendChild(bloqueBotones)

                        const contenedorListaServicios = document.createElement("div")
                        contenedorListaServicios.classList.add("listaServicios")
                        contenedorListaServicios.setAttribute("componente", "contenedorListaServiciosEnReserva")
                        contenedor.appendChild(contenedorListaServicios)

                        return contenedor

                    },
                    componentesUI: {
                        insertarServicio: {
                            ui: async function () {
                                const main = document.querySelector("main")
                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const instanciaUID_insertarServiciosUI = ui.getAttribute("instanciaUID")
                                main.appendChild(ui)
                                const constructor = ui.querySelector("[componente=contenedor]")
                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Obteniendo servicios...",
                                    textoBoton: "Cancelar"
                                })
                                constructor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/servicios/obtenerServicios"
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarServiciosUI}"]`)
                                if (!uiRenderizada) { return }
                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    spinner.remove()
                                    constructor.appendChild(this.botonCancelar())

                                    const servicios = respuestaServidor.servicios

                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add(
                                        "maxWidth1280px",
                                        "width100",
                                        "flexVertical",
                                        "gap10",
                                    )
                                    constructor.appendChild(contenedor)
                                    const estadoUI_ = (estadoIDV) => {

                                        if (estadoIDV === "activado") {
                                            return "Activada"
                                        } else if (estadoIDV === "desactivado") {
                                            return "Desactivada"
                                        }

                                    }

                                    servicios.forEach((detalles) => {
                                        const nombre = detalles.nombre
                                        const servicioUID = detalles.servicioUID
                                        const estadoIDV = detalles.estadoIDV
                                        const zonaIDV = detalles.zonaIDV
                                        const contenedorData = detalles.contenedor


                                        const contenedorServicio = document.createElement("div")
                                        contenedorServicio.setAttribute("servicioUID", servicioUID)
                                        contenedorServicio.classList.add(
                                            "borderRadius12",
                                            "width100",
                                            "flexVertical",
                                            "backgroundGrey1",
                                            "padding6",
                                            "gap6"
                                        )

                                        const contenedorGlobal = document.createElement("div")
                                        contenedorGlobal.classList.add(
                                            "flexVertical",
                                            "padding6",
                                            "gap6"
                                        )

                                        const nombreOfertaUI = document.createElement("div")
                                        nombreOfertaUI.classList.add("negrita")
                                        nombreOfertaUI.innerText = nombre
                                        contenedorGlobal.appendChild(nombreOfertaUI)

                                        const estadoTitulo = document.createElement("div")
                                        estadoTitulo.innerText = "Estado del servicio"
                                        contenedorGlobal.appendChild(estadoTitulo)


                                        const estadoUI = document.createElement("div")
                                        estadoUI.classList.add("negrita")
                                        estadoUI.innerText = estadoUI_(estadoIDV)
                                        contenedorGlobal.appendChild(estadoUI)
                                        contenedorServicio.appendChild(contenedorGlobal)

                                        const contendorBotones = document.createElement("div")
                                        contendorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6",
                                        )

                                        const botonInsertar = document.createElement("div")
                                        botonInsertar.classList.add(
                                            "borderRadius8",
                                            "backgroundGrey1",
                                            "comportamientoBoton",
                                            "padding8"
                                        )
                                        botonInsertar.innerText = "Insertar servicios en la simulaci√≥n"
                                        botonInsertar.addEventListener("click", () => {
                                            this.confirmarInsertar({
                                                servicioUID,
                                                instanciaUID_insertarServiciosUI
                                            })

                                        })
                                        contendorBotones.appendChild(botonInsertar)

                                        const botonVerOferta = document.createElement("a")
                                        botonVerOferta.classList.add(
                                            "borderRadius8",
                                            "backgroundGrey1",
                                            "comportamientoBoton",
                                            "padding8",
                                            "limpiezaBotonA"
                                        )
                                        botonVerOferta.innerText = "Ir al servicio"
                                        botonVerOferta.setAttribute("href", "/administracion/servicios/servicio:" + servicioUID)
                                        botonVerOferta.setAttribute("vista", "/administracion/servicios/servicio:" + servicioUID)
                                        botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                        contendorBotones.appendChild(botonVerOferta)

                                        contenedorServicio.appendChild(contendorBotones)
                                        contenedor.appendChild(contenedorServicio)
                                    })
                                    constructor.appendChild(this.botonCancelar())

                                }

                            },
                            botonCancelar: () => {
                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.setAttribute("boton", "cancelar")
                                botonCancelar.innerText = "Cerrar y volver a la reserva"
                                botonCancelar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                return botonCancelar
                            },
                            confirmarInsertar: async function (data) {
                                const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                                const instanciaUID_insertarServiciosUI = data.instanciaUID_insertarServiciosUI
                                const servicioUID = String(data.servicioUID)
                                const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarServiciosUI}"]`)
                                const contenedor = ui.querySelector("[componente=contenedor]")
                                contenedor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Insertando servicio en la simulaci√≥n..."
                                })
                                contenedor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/simuladorDePrecios/servicios/insertarServicioEnSimulacion",
                                    simulacionUID,
                                    servicioUID
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"] [contenedor=servicios]`)

                                if (!uiRenderizada) { return }
                                casaVitini.administracion.simuladorDePrecios.componentes.controladorUIPorFaltaDeLLaves(respuestaServidor)
                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {

                                    const servicioData = respuestaServidor.servicio
                                    const nombreInterno = servicioData.nombre
                                    const contenedor = servicioData.contenedor
                                    const servicioUID_enSimulacion = servicioData.servicioUID


                                    const servicioUI = casaVitini.administracion.simuladorDePrecios.componentes.servicios.componentesUI.servicioUI({
                                        servicioUID_enSimulacion: servicioUID_enSimulacion,
                                        instanciaUID_contenedorServicios: "contenedorServicios",
                                        nombreInterno: nombreInterno,
                                        contenedor: contenedor
                                    })
                                    const selectorInfo = uiRenderizada.querySelector("[componente=contenedorInfoSinServicios]")
                                    selectorInfo?.remove()

                                    const selectorListaServicios = uiRenderizada.querySelector("[componente=contenedorListaServiciosEnReserva]")
                                    selectorListaServicios.appendChild(servicioUI)

                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    // casaVitini.administracion.simuladorDePrecios.componentes.actualizaSimulacion()

                                    const desgloseFinanciero = respuestaServidor?.desgloseFinanciero
                                    if (desgloseFinanciero) {
                                        casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                            destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                            contenedorFinanciero: { desgloseFinanciero },
                                            modoUI: "simulador"
                                        })
                                    }
                                }

                            },
                        },
                        servicioUI: (data) => {
                            const servicioUID_enSimulacion = data.servicioUID_enSimulacion
                            const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                            const nombreInterno = data.nombreInterno
                            const contenedor = data.contenedor

                            const precio = contenedor.precio
                            const definicion = contenedor.definicion
                            const fechaFinal = contenedor.fechaFinal
                            const duracionIDV = contenedor.duracionIDV
                            const fechaInicio = contenedor.fechaInicio
                            const tituloPublico = contenedor.tituloPublico
                            const disponibilidadIDV = contenedor.disponibilidadIDV

                            const diccionario = {
                                disponibilidad: {
                                    constante: "Disponible",
                                    variable: "Disponibilidad variable"
                                }
                            }

                            const servicioUI = document.createElement("div")
                            servicioUI.setAttribute("servicioUID_enSimulacion", servicioUID_enSimulacion)
                            servicioUI.classList.add(
                                "flexVertical",
                                "padding6",
                                "backgroundGrey1",
                                "borderRadius10"
                            )
                            const contenedorInterno = document.createElement("div")
                            contenedorInterno.classList.add(
                                "flexVertical",
                                "gap6"
                            )
                            servicioUI.appendChild(contenedorInterno)

                            const contenedorNombreInterno = document.createElement("div")
                            contenedorNombreInterno.classList.add(
                                "flexVertical",
                                "padding8"
                            )
                            contenedorInterno.appendChild(contenedorNombreInterno)

                            const tituluNombreInternoUI = document.createElement("p")
                            tituluNombreInternoUI.innerText = `Nombre adminitrativo`
                            contenedorNombreInterno.appendChild(tituluNombreInternoUI)

                            const nombreInternoUI = document.createElement("p")
                            nombreInternoUI.classList.add(
                                "negrita")
                            nombreInternoUI.innerText = `${nombreInterno}`
                            contenedorNombreInterno.appendChild(nombreInternoUI)

                            const contenedorGlobal = document.createElement("div")
                            contenedorGlobal.classList.add(
                                "flexVertical"
                            )
                            servicioUI.appendChild(contenedorGlobal)

                            const esferaSeleccionable = document.createElement("div")
                            esferaSeleccionable.classList.add(
                                "esferaSeleccionable"
                            )
                            contenedorGlobal.appendChild(esferaSeleccionable)

                            const indicadorDeSeleccion = document.createElement("div")
                            indicadorDeSeleccion.setAttribute("componente", "indicadorSelecion")
                            indicadorDeSeleccion.classList.add(
                                "indicadorDeSeleccion"
                            )
                            esferaSeleccionable.appendChild(indicadorDeSeleccion)

                            const contenedorNombrePublico = document.createElement("div")
                            contenedorNombrePublico.classList.add(
                                "flexVertical",
                                "padding6"
                            )
                            contenedorGlobal.appendChild(contenedorNombrePublico)

                            const tituluNombrePublico = document.createElement("p")
                            tituluNombrePublico.innerText = `Nombre p√∫blico`
                            contenedorNombrePublico.appendChild(tituluNombrePublico)

                            const titulo = document.createElement("p")
                            titulo.classList.add(
                                "negrita")
                            titulo.innerText = tituloPublico
                            contenedorNombrePublico.appendChild(titulo)


                            const disponibilidadUI = document.createElement("p")
                            disponibilidadUI.classList.add(
                                "padding6"
                            )
                            disponibilidadUI.innerText = diccionario.disponibilidad[disponibilidadIDV]
                            servicioUI.appendChild(disponibilidadUI)


                            if (disponibilidadIDV === "variable") {

                                const info = document.createElement("p")
                                info.classList.add(
                                    "padding6"
                                )
                                info.innerText = `Este servicio tiene una disponibilidad limitada. Es por eso que si selecciona este servicio, nos pondremos en contacto con el titular de la reserva en las pr√≥ximas horas para confirmarle la disponibilidad del servicio para su reserva.`
                                servicioUI.appendChild(info)
                            }

                            const precioUI = document.createElement("p")
                            precioUI.classList.add(
                                "padding6",
                                "negrita"
                            )
                            precioUI.innerText = precio + "$"
                            servicioUI.appendChild(precioUI)

                            if (duracionIDV === "rango") {
                                const contenedorDuracion = document.createElement("div")
                                contenedorDuracion.classList.add(
                                    "flexVertical",
                                    "padding6"

                                )
                                servicioUI.appendChild(contenedorDuracion)

                                const info = document.createElement("p")
                                info.classList.add("negrita")
                                info.innerText = `Servicio disponible solo desde ${fechaInicio} hata ${fechaFinal}. Ambas fechas incluidas.`
                                contenedorDuracion.appendChild(info)

                            }
                            const definicionUI = document.createElement("p")
                            definicionUI.classList.add(
                                "padding6"
                            )
                            definicionUI.innerText = definicion
                            servicioUI.appendChild(definicionUI)

                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("administracion_reservas_detallesReservas_enlacesDePago_contenedorBotones")
                            const botonIr = document.createElement("a")
                            botonIr.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                            botonIr.innerText = "Ir al servicio"
                            // botonIr.setAttribute("href", "/servicios/servicio:" + servicioUID)
                            botonIr.setAttribute("target", "_blank")
                            //contenedorBotones.appendChild(botonIr)

                            const botonEliminar = document.createElement("div")
                            botonEliminar.classList.add("botonV1")
                            botonEliminar.innerText = "Eliminar servicio de la simulaci√≥n"
                            botonEliminar.addEventListener("click", () => {
                                casaVitini
                                    .administracion
                                    .simuladorDePrecios
                                    .componentes
                                    .servicios
                                    .componentesUI.
                                    eliminarServicio
                                    .ui({
                                        instanciaUID_contenedorServicios,
                                        servicioUID_enSimulacion,
                                        nombreInterno
                                    })
                            })
                            contenedorBotones.appendChild(botonEliminar)
                            servicioUI.appendChild(contenedorBotones)



                            return servicioUI
                        },
                        eliminarServicio: {
                            ui: async function (data) {
                                const nombreInterno = data.nombreInterno
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                const servicioUID_enSimulacion = data.servicioUID_enSimulacion

                                const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")


                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const instanciaUID_eliminarServicio = ui.getAttribute("instanciaUID")
                                const constructor = ui.querySelector("[componente=constructor]")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.innerText = `Confirmar eliminar el servicio ${nombreInterno} de la reserva simulada`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.innerText = "Var a eliminar el servicio de la reserva simulada, ¬øEstas de acuerdo?"

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.innerText = "Comfirmar la eliminacion"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarEliminar({
                                        servicioUID_enSimulacion,
                                        instanciaUID_eliminarServicio,
                                        instanciaUID_contenedorServicios,
                                        simulacionUID
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.innerText = "Cancelar y volver"
                                document.querySelector("main").appendChild(ui)

                            },
                            confirmarEliminar: async function (data) {
                                const servicioUID_enSimulacion = String(data.servicioUID_enSimulacion)
                                // no se elimina el cartel por que no encuentra el identificador unico de la instancia.
                                const instanciaUID_eliminarServicio = data.instanciaUID_eliminarServicio
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                const simulacionUID = data.simulacionUID
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarServicio}"]`)
                                const contenedor = ui.querySelector("[componente=constructor]")
                                contenedor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Eliminado servicio en la reserva..."
                                })
                                contenedor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/simuladorDePrecios/servicios/eliminarServicioEnSimulacion",
                                    servicioUID_enSimulacion
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    const simulacionUIRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                    if (!simulacionUIRenderizada) {
                                        return
                                    }
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    simulacionUIRenderizada.querySelector(`[servicioUID_enSimulacion="${servicioUID_enSimulacion}"]`)?.remove()

                                    const selectorContenedoresDeServiciosRenderizados = simulacionUIRenderizada.querySelectorAll("[servicioUID_enSimulacion]")
                                    if (selectorContenedoresDeServiciosRenderizados.length === 0) {
                                        const infoSinEnlaces = casaVitini
                                            .administracion
                                            .simuladorDePrecios
                                            .componentes
                                            .servicios
                                            .componentesUI
                                            .infoSinServiciosUI()
                                        const selectorContenedorDinamico = document.querySelector("[contenedor=servicios]")
                                        selectorContenedorDinamico.appendChild(infoSinEnlaces)
                                    }
                                    const desgloseFinanciero = respuestaServidor?.desgloseFinanciero
                                    if (desgloseFinanciero) {


                                        casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                            destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                            contenedorFinanciero: { desgloseFinanciero },
                                            modoUI: "simulador"
                                        })
                                    }
                                }

                            },

                        },
                        infoSinServiciosUI: () => {
                            const infoSinEnlaces = document.createElement("div")
                            infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                            infoSinEnlaces.setAttribute("componente", "contenedorInfoSinServicios")
                            infoSinEnlaces.innerText = "No hay ning√∫n servicio en la reserva simulada."
                            return infoSinEnlaces
                        }
                    },
                    actualizarContenedor: (data) => {
                        const servicios = data.servicios
                        const simulacionUID = data.simulacionUID
                        const simulacionUI = document.querySelector("[simulacionUID]")
                        const contenedorListaServicios = simulacionUI.querySelector(`[componente=contenedorListaServiciosEnReserva]`)
                        contenedorListaServicios.innerHTML = null

                        if (servicios.length === 0) {
                            const contenedorServicios = simulacionUI.querySelector(`[contenedor=servicios]`)
                            const infoSinEnlaces_selector = contenedorServicios.querySelector("[componente=contenedorInfoSinServicios]")
                            if (!infoSinEnlaces_selector) {
                                const infoSinEnlaces = casaVitini
                                    .administracion
                                    .simuladorDePrecios
                                    .componentes
                                    .servicios
                                    .componentesUI
                                    .infoSinServiciosUI()
                                contenedorServicios.appendChild(infoSinEnlaces)
                            }

                        } else {
                            for (const servicioEnReserva of servicios) {
                                const servicioUI = casaVitini
                                    .administracion
                                    .simuladorDePrecios
                                    .componentes
                                    .servicios
                                    .componentesUI
                                    .servicioUI({
                                        servicioUID_enSimulacion: servicioEnReserva.servicioUID,
                                        instanciaUID_contenedorServicios: simulacionUID,
                                        nombreInterno: servicioEnReserva.nombre,
                                        contenedor: servicioEnReserva.contenedor
                                    })
                                contenedorListaServicios.appendChild(servicioUI)
                            }
                        }


                    }

                },
                contenedorCodigosDescuento: {
                    infoInit: () => {
                        const info = document.createElement("div")
                        info.classList.add(
                            "flexVertical"
                        )
                        info.innerText = "A√±ada descuentos para verificarlos"
                        return info
                    },
                    descuentoUI: (data) => {
                        const descuentoBASE64 = data.descuentoBASE64

                        const contenedor = document.createElement("div")
                        contenedor.classList.add(
                            "flexVertical"
                        )
                        const info = document.createElement("p")
                        info.innerText = descuentoBASE64
                        contenedor.appendChild(info)

                        const botonEliminar = document.createElement("p")
                        botonEliminar.innerText = "Elimnar codigo descuento"
                        contenedor.appendChild(botonEliminar)

                        return contenedor
                    },
                    contenedorCampo: (data) => {

                        const campoData = data?.campoData || ""

                        const contenedor = document.createElement("div")
                        contenedor.style.gridTemplateColumns = "1fr auto"
                        contenedor.setAttribute("componente", "campoDescuento")
                        contenedor.classList.add(
                            "gridHorizotnal2C",
                            "gap6",
                            "padding6",
                            "borderRadius12",
                            "borderGrey1"
                        )

                        const campoCodigo = document.createElement("input")
                        campoCodigo.setAttribute("campo", "codigoDescuento")
                        campoCodigo.classList.add(
                            "padding10",
                            "borderRadius8",
                        )
                        campoCodigo.placeholder = "Inserta un codigo de descuento para comprobar"
                        campoCodigo.value = campoData
                        contenedor.appendChild(campoCodigo)

                        const botonComprobar = document.createElement("div")
                        botonComprobar.classList.add(
                            "padding10",
                            "borderRadius8",
                            "botonV1",
                        )
                        botonComprobar.innerText = "Eliminar"
                        botonComprobar.addEventListener("click", (e) => {

                            const contenedorDescuentos = e.target.closest("[contenedor=codigosDescuento]")
                            const numeroCampos = contenedorDescuentos.querySelectorAll("[componente=campoDescuento]")
                            if (numeroCampos.length === 1) {
                                contenedorDescuentos.querySelector("[boton=comprobar]")?.remove()
                                const lista = contenedorDescuentos.querySelector("[contenedor=listaDescuentos]")
                                lista.style.display = "none"
                            }
                            const contenedorCampo = e.target.closest("[componente=campoDescuento]")
                            contenedorCampo?.remove()
                        })
                        contenedor.appendChild(botonComprobar)
                        return contenedor
                    },
                    botonComprobar: function () {
                        const boton = document.createElement("div")
                        boton.setAttribute("boton", "comprobar")
                        boton.classList.add(
                            "botonV1"
                        )
                        boton.innerText = "Comprobar codigo."
                        boton.addEventListener("click", () => {
                            this.cribadoOfertas.ui()
                        })
                        return boton
                    },
                    cribadoOfertas: {
                        ui: async function () {
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            main.appendChild(ui)
                            const instanciaUID_cribadoOfertas = ui.getAttribute("instanciaUID")
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const contenedorDescuentosSimulacion = main.querySelector("[contenedor=codigosDescuento]")
                            const selectorCamposCodigos = contenedorDescuentosSimulacion.querySelector("[contenedor=listaDescuentos]").querySelectorAll("[campo=codigoDescuento]")
                            const codigosDescuentosPorVerificar = []
                            selectorCamposCodigos.forEach((contenedor) => {
                                const campo = contenedor.value
                                if (campo.length > 0) {
                                    codigosDescuentosPorVerificar.push(campo)
                                }
                            })

                            if (codigosDescuentosPorVerificar.length === 0) {
                                const m = "Escribe alg√∫n c√≥digo en el campo de c√≥digos, est√°n todos vac√≠os."
                                return casaVitini.ui.componentes.advertenciaInmersiva(m)
                            }

                            const constructor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo ofertas compatibles con los codigos de descuento...",
                                textoBoton: "Cancelar"
                            })
                            constructor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/comprobarCodigosEnSimulacion",
                                simulacionUID,
                                codigosDescuentos: codigosDescuentosPorVerificar
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)


                            const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_cribadoOfertas}"]`)
                            if (!uiRenderizada) { return }
                            spinner.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                constructor.appendChild(this.componentes.botonCancelar())
                                const ofertasCompatibles = respuestaServidor.ofertas.compatible
                                const ofertasIncompatibles = respuestaServidor.ofertas.incompatible


                                // Nombre d ela oferta 
                                // condiciones que se cumplen y no
                                // boton para ira  al oferta
                                // Si se puee insertar oferta por condicion

                                const contenedorOfertas = document.createElement("div")
                                contenedorOfertas.classList.add(
                                    "maxWidth1280px",
                                    "width100",
                                    "flexVertical",
                                    "gap6",
                                )
                                constructor.appendChild(contenedorOfertas)

                                const contenedorCompatibles = document.createElement("div")
                                contenedorCompatibles.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                if (ofertasCompatibles.length > 0) {
                                    contenedorOfertas.appendChild(contenedorCompatibles)
                                }
                                const tituloCompatibles = document.createElement("p")
                                tituloCompatibles.classList.add(
                                    "padding6"
                                )
                                tituloCompatibles.innerText = "Ofertas compatibles por c√≥digo y el resto de condiciones. Estas ofertas son compatibles totalmente con la simulaci√≥n. Puede a√±adirlas desde aqu√≠."
                                contenedorCompatibles.appendChild(tituloCompatibles)

                                ofertasCompatibles.forEach((oferta) => {

                                    const ofertaUI = this.componentes.ofertaUI({
                                        contenedorOferta: oferta,
                                        simulacionUID,
                                        instanciaUID_cribadoOfertas
                                    })
                                    const enSimulacion = oferta?.enSimulacion
                                    if (enSimulacion === "si") {
                                        ofertaUI.querySelector("[boton=insertarOferta]")?.remove()
                                        const info = document.createElement("p")
                                        info.classList.add(
                                            "padding6"
                                        )
                                        info.innerText = "Esta oferta compatible ya est√° a√±adida a la simulaci√≥n. Las ofertas basadas en condiciones solo se pueden a√±adir una vez. Si necesitas a√±adir esta oferta, puedes hacerlo administrativamente desde el contenedor financiero."
                                        ofertaUI.appendChild(info)
                                    }


                                    contenedorCompatibles.appendChild(ofertaUI)
                                })

                                const contenedorIncompatibles = document.createElement("div")
                                contenedorIncompatibles.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                if (ofertasIncompatibles.length > 0) {
                                    contenedorOfertas.appendChild(contenedorIncompatibles)
                                }

                                const tituloIncompatibles = document.createElement("p")
                                tituloIncompatibles.classList.add(
                                    "padding6"
                                )
                                tituloIncompatibles.innerText = "Ofertas compatibles por c√≥digo por no con el resto de condiciones. Las condiciones que no se cumplen est√°n marcadas con un borde rojo."
                                contenedorIncompatibles.appendChild(tituloIncompatibles)


                                ofertasIncompatibles.forEach((oferta) => {
                                    const condicionesQueNoSeCumple = oferta.condicionesQueNoSeCumple
                                    const ofertaUI = this.componentes.ofertaUI({
                                        contenedorOferta: oferta,
                                        instanciaUID_cribadoOfertas
                                    })
                                    ofertaUI.querySelector("[boton=insertarOferta]")?.remove()
                                    contenedorIncompatibles.appendChild(ofertaUI)

                                    condicionesQueNoSeCumple.forEach((condicionIDV) => {

                                        const selectorContenedorCondicion = ofertaUI.querySelector(`[tipoCondicion="${condicionIDV}"]`)
                                        selectorContenedorCondicion.classList.add(
                                            "borderRadius12",
                                        )
                                        selectorContenedorCondicion.style.border = "1px solid red"
                                    })


                                })

                                constructor.appendChild(this.componentes.botonCancelar())


                            }

                        },
                        componentes: {
                            condicionesUI: (data) => {
                                const condicionesArray = data.condicionesArray
                                const contenedorCondiciones = document.createElement("div")
                                contenedorCondiciones.setAttribute("contenedor", "condiciones")
                                contenedorCondiciones.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "backgroundGrey1",
                                    "padding6",
                                    "borderRadius14"
                                )
                                const tituloContendor = document.createElement("div")
                                tituloContendor.classList.add(
                                    "negrita",
                                    "padding6",

                                )
                                tituloContendor.innerText = "Condiciones de la oferta"
                                contenedorCondiciones.appendChild(tituloContendor)

                                condicionesArray.forEach((condicion) => {
                                    const tipoCondicion = condicion.tipoCondicion

                                    const contenedorCondicion = document.createElement("div")
                                    contenedorCondicion.classList.add("contenedorCondicion")
                                    contenedorCondicion.setAttribute("tipoCondicion", tipoCondicion)
                                    contenedorCondicion.classList.add(
                                        "flexVertical",
                                        "padding6",
                                    )
                                    const definicionCondicion = casaVitini
                                        .ui
                                        .componentes
                                        .contenedorFinanciero
                                        .componentesUI
                                        .ofertas
                                        .componentesUI
                                        .definicionCondiciones({
                                            tipoCondicion,
                                            condicion
                                        })
                                    contenedorCondicion.appendChild(definicionCondicion)
                                    contenedorCondiciones.appendChild(contenedorCondicion)
                                })
                                return contenedorCondiciones

                            },
                            ofertaUI: function (data) {

                                const contenedorOferta = data.contenedorOferta
                                const simulacionUID = data.simulacionUID
                                const instanciaUID_cribadoOfertas = data.instanciaUID_cribadoOfertas

                                const ofertaData = contenedorOferta.oferta
                                const nombreOferta = ofertaData.nombreOferta
                                const ofertaUID = ofertaData.ofertaUID
                                const fechaInicio = ofertaData.fechaInicio
                                const fechaFinal = ofertaData.fechaFinal
                                const estadoIDV = ofertaData.estadoIDV
                                const zonaIDV = ofertaData.zonaIDV
                                const condicionesArray = ofertaData.condicionesArray


                                const estadoUI_ = (estadoIDV) => {

                                    if (estadoIDV === "activado") {
                                        return "Activada"
                                    } else if (estadoIDV === "desactivado") {
                                        return "Desactivada"
                                    }

                                }

                                const contenedorOfertaUI = document.createElement("div")
                                contenedorOfertaUI.setAttribute("ofertaUID", ofertaUID)
                                contenedorOfertaUI.classList.add(
                                    "borderRadius12",
                                    "width100",
                                    "flexVertical",
                                    "backgroundGrey1",
                                    "padding6",
                                    "gap6"
                                )

                                const contenedorGlobal = document.createElement("div")
                                contenedorGlobal.classList.add(
                                    "flexVertical",
                                    "padding12",
                                    "gap6"
                                )

                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.innerText = nombreOferta
                                contenedorGlobal.appendChild(nombreOfertaUI)

                                const estadoTitulo = document.createElement("div")
                                estadoTitulo.innerText = "Estado de la oferta"
                                contenedorGlobal.appendChild(estadoTitulo)


                                const estadoUI = document.createElement("div")
                                estadoUI.classList.add("negrita")
                                estadoUI.innerText = estadoUI_(estadoIDV)
                                contenedorGlobal.appendChild(estadoUI)
                                contenedorOfertaUI.appendChild(contenedorGlobal)

                                const descuentosUI = this.condicionesUI({ condicionesArray })
                                contenedorOfertaUI.appendChild(descuentosUI)

                                const contendorBotones = document.createElement("div")
                                contendorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertar = document.createElement("div")
                                botonInsertar.setAttribute("boton", "insertarOferta")
                                botonInsertar.classList.add(
                                    "borderRadius8",
                                    "backgroundGrey1",
                                    "comportamientoBoton",
                                    "padding8"
                                )
                                botonInsertar.innerText = "Insertar descuento en la reserva"
                                botonInsertar.addEventListener("click", () => {
                                    this.confirmarInsertar({
                                        simulacionUID,
                                        ofertaUID,
                                        instanciaUID_cribadoOfertas,
                                    })

                                })
                                contendorBotones.appendChild(botonInsertar)

                                const botonVerOferta = document.createElement("a")
                                botonVerOferta.classList.add(
                                    "borderRadius8",
                                    "backgroundGrey1",
                                    "comportamientoBoton",
                                    "padding8",
                                    "limpiezaBotonA"
                                )
                                botonVerOferta.innerText = "Ir a la oferta"
                                botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                contendorBotones.appendChild(botonVerOferta)

                                contenedorOfertaUI.appendChild(contendorBotones)

                                return contenedorOfertaUI
                            },
                            botonCancelar: () => {
                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.setAttribute("boton", "cancelar")
                                botonCancelar.innerText = "Cerrar y volver a la simulaci√≥n"
                                botonCancelar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                return botonCancelar
                            },
                            confirmarInsertar: async function (data) {
                                const simulacionUID = data.simulacionUID
                                const ofertaUID = String(data.ofertaUID)
                                const instanciaUID_cribadoOfertas = data.instanciaUID_cribadoOfertas
                                const main = document.querySelector("main")
                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const instanciaUID = ui.getAttribute("instanciaUID")
                                main.appendChild(ui)
                                const contenedor = ui.querySelector("[componente=contenedor]")
                                contenedor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Insertando oferta en la simulaci√≥n..."
                                })
                                contenedor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/simuladorDePrecios/descuentos/insertarDescuentoPorCompatiblePorCodigo",
                                    simulacionUID: String(simulacionUID),
                                    ofertaUID,
                                    codigosDescuentos: [
                                        "ey"
                                    ]
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                uiRenderizada?.remove()


                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                }

                                if (respuestaServidor?.ok) {
                                    const uiOfertaEnInstancia = document.querySelector(`[instanciaUID="${instanciaUID_cribadoOfertas}"] [ofertaUID="${ofertaUID}"]`)
                                    if (uiOfertaEnInstancia) {
                                        uiOfertaEnInstancia.querySelector("[boton=insertarOferta]")?.remove()
                                        const info = document.createElement("p")
                                        info.classList.add(
                                            "padding6"
                                        )
                                        info.innerText = "Oferta reci√©n a√±adida correctamente a la simulaci√≥n. No se puede volver a a√±adir una oferta basada en condiciones. Para a√±adir una oferta arbitrariamente, hazlo mediante el bot√≥n de a√±adir ofertas administrativamente en la secci√≥n ofertas del contenedor financiero de la simulaci√≥n."
                                        uiOfertaEnInstancia.appendChild(info)


                                    }
                                    const uiSimulacion = document.querySelector(`[simulacionUID="${simulacionUID}"]`)

                                    if (uiSimulacion) {
                                        const desgloseFinanciero = respuestaServidor?.desgloseFinanciero

                                        if (desgloseFinanciero) {
                                            casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                                destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                                contenedorFinanciero: { desgloseFinanciero },
                                                modoUI: "simulador"
                                            })
                                        }
                                    }

                                }

                            },
                        }
                    }
                },
                pasarelaSelectorDia: function (e) {
                    const d = {
                        unico: "[nombreContenedor=rangoUnico][calendario=unico]",
                        entrada: "[nombreContenedor=rangoDeSimulacion][calendario=entrada]",
                        salida: "[nombreContenedor=rangoDeSimulacion][calendario=salida]",
                    }
                    const tipoCalendario = e.target.closest("[tipoCalendario]").getAttribute("tipoCalendario")
                    const selectorContenedorFecha = document.querySelector(d[tipoCalendario])
                    const fechaRecovery_ISO = selectorContenedorFecha?.getAttribute("memoriaVolatil")
                    const fechaRecovery_humana = selectorContenedorFecha?.querySelector("[fechaUI]").innerText

                    casaVitini.ui.componentes.calendario.calendarioCompartido.seleccionarDia(e)
                    this.actualizaSimulacion({
                        selectorRecovery: d[tipoCalendario],
                        fechaRecovery_ISO,
                        fechaRecovery_humana
                    })
                }
            },
        },
        impuestos: {
            arranque: async () => {
                const main = document.querySelector("main")
                const instanciaUID = main.getAttribute("instanciaUID")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const soloDigitos = /^\d+$/;

                if (comandoInicial === "impuestos") {
                    casaVitini.administracion.impuestos.contenedorBotones()

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "impuesto_uid") {
                            nombreColumnaIDV = "impuestoUID"
                        } else if ((valorParametroURL)?.toLowerCase() === "tipo_valor") {
                            nombreColumnaIDV = "tipoValorIDV"
                        } else if ((valorParametroURL)?.toLowerCase() === "entidad") {
                            nombreColumnaIDV = "entidadIDV"
                        } else if ((valorParametroURL)?.toLowerCase() === "estado") {
                            nombreColumnaIDV = "estadoIDV"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                    })

                    casaVitini.administracion.impuestos.mostrarImpuestosResueltos(parametrosFormatoIDV)
                } else if (soloDigitos.test(comandoInicial)) {
                    main.setAttribute("zonaCSS", "administracion/impuestos/detalles")
                    const transaccion = {
                        zona: "administracion/impuestos/detalleImpuesto",
                        impuestoUID: String(comandoInicial)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor.error) {
                        const titulo = document.querySelector(".titulo")
                        titulo.innerText = "No existe ning√∫n impuesto con el identificador: " + comandoInicial
                        main.innerHTML = null
                        main.appendChild(titulo)
                        return
                    }
                    casaVitini.administracion.impuestos.detalleImpuesto(respuestaServidor)
                }
                else {
                    casaVitini.ui.componentes.urlDesconocida()

                }

            },
            mostrarImpuestosResueltos: async function (listasImpuestos) {
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const selectorEspacio = document.querySelector("[componente=espacioImpuestos]")
                selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)

                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/impuestos")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const transaccion = {
                    origen: "url",
                    tipoConstruccionGrid: "total",
                    ...listasImpuestos
                }
                const paginaTipo = transaccion.paginaTipo
                let nombreColumnaURL
                const nombreColumna = transaccion.nombreColumna
                transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                if ((nombreColumna)?.toLowerCase() === "impuestouid") {
                    nombreColumnaURL = "impuesto_uid"
                } else if ((nombreColumna)?.toLowerCase() === "tipovaloridv") {
                    nombreColumnaURL = "tipo_valor"
                } else if ((nombreColumna)?.toLowerCase() === "entidadidv") {
                    nombreColumnaURL = "entidad"
                } else if ((nombreColumna)?.toLowerCase() === "estadoidv") {
                    nombreColumnaURL = "estado"
                } else if (nombreColumna) {
                    nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                }

                const origen = transaccion.origen
                delete transaccion.origen
                const respuestaServidor = await casaVitini.shell.servidor({
                    zona: "administracion/impuestos/listaImpuestosPaginados",
                    pagina: transaccion.pagina,
                    nombreColumna: nombreColumna,
                    sentidoColumna: transaccion.sentidoColumna
                })

                const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                if (!instanciaRenderizada) {
                    return
                }

                if (respuestaServidor?.error) {
                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.totalImpuestos === 0) {
                    const espacioClientes = document.querySelector("[componente=espacioImpuestos]")
                    document.querySelector("[gridUID=gridImpuestos]")?.remove()
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.innerText = "No hay impuestos configurados"
                    espacioClientes.appendChild(estadoBusquedaUI)
                    return

                }
                const impuestos = respuestaServidor.impuestos

                const dicccionario = {
                    estados: {
                        activado: "Activado",
                        desactivado: "Desactivado"
                    },
                    tiposValores: {
                        porcentaje: "Porcentaje",
                        tasa: "Tasa"
                    },
                    entidades: {
                        reserva: "Reserva",
                        servicio: "Servicio",
                        global: "Global"
                    },
                }

                for (const detallesDelImpuesto of impuestos) {
                    const tipoValorIDV = detallesDelImpuesto.tipoValorIDV
                    const entidadIDV = detallesDelImpuesto.entidadIDV
                    const estadoIDV = detallesDelImpuesto.estadoIDV
                    detallesDelImpuesto.tipoValorIDV = dicccionario.tiposValores[tipoValorIDV]
                    detallesDelImpuesto.estadoIDV = dicccionario.estados[estadoIDV]
                    detallesDelImpuesto.entidadIDV = dicccionario.entidades[entidadIDV]
                }
                const sentidoColumna = respuestaServidor.sentidoColumna

                const pagina = respuestaServidor.pagina
                const paginasTotales = respuestaServidor.paginasTotales
                const columnasGrid = [
                    {
                        columnaUI: "UID",
                        columnaIDV: "impuestoUID",
                    },
                    {
                        columnaUI: "Impuesto",
                        columnaIDV: "nombre",
                    },
                    {
                        columnaUI: "Tipo Impositivo",
                        columnaIDV: "tipoImpositivo",
                    },
                    {
                        columnaUI: "Tipo Valor",
                        columnaIDV: "tipoValorIDV",
                    },
                    {
                        columnaUI: "Entidad",
                        columnaIDV: "entidadIDV",
                    },
                    {
                        columnaUI: "Estado",
                        columnaIDV: "estadoIDV",
                    }
                ]
                const parametrosFinales = {}

                if (transaccion.nombreColumna) {
                    parametrosFinales.nombre_columna = nombreColumnaURL
                    parametrosFinales.sentido_columna = sentidoColumna
                }
                if (pagina > 1 && paginasTotales > 1) {
                    parametrosFinales.pagina = pagina
                }
                const estructuraParametrosFinales = []
                for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                    const estructura = `${parametroFinal}:${valorFinal}`
                    estructuraParametrosFinales.push(estructura)
                }
                let parametrosURLFInal = ""
                if (estructuraParametrosFinales.length > 0) {
                    parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                }

                const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                    metodoSalida: "administracion.impuestos.mostrarImpuestosResueltos",
                    configuracionGrid: {
                        filas: impuestos,
                        sentidoColumna: sentidoColumna,
                        nombreColumna: nombreColumna,
                        pagina: pagina,
                        destino: "[componente=espacioImpuestos]",
                        columnasGrid: columnasGrid,
                        gridUID: "gridImpuestos",
                        mascaraURL: {
                            mascara: "/administracion/impuestos/",
                            parametro: "impuestoUID"
                        },
                    },
                    configuracionPaginador: {
                        paginasTotales: paginasTotales,
                        granuladoURL: {
                            parametros: parametrosFinales,
                            directoriosFusion: granuladoURL.directoriosFusion
                        },
                    }
                })

                const titulo = "Casa Vitini"
                const estado = {
                    zona: constructorURLFinal,
                    EstadoInternoZona: "estado",
                    tipoCambio: "parcial",
                    componenteExistente: "contenedorBotonesImpuestos",
                    funcionPersonalizada: "administracion.impuestos.mostrarImpuestosResueltos",
                    args: transaccion
                }
                // if (origen === "url" || origen === "botonMostrarClientes") {
                //     window.history.replaceState(estado, titulo, constructorURLFinal);
                // }
                // if (origen === "botonNumeroPagina" || origen === "tituloColumna") {
                //     window.history.pushState(estado, titulo, constructorURLFinal);
                // }

                if (origen === "url" || origen === "botonMostrarClientes") {
                    window.history.replaceState(estado, titulo, constructorURLFinal);
                } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                    window.history.pushState(estado, titulo, constructorURLFinal);
                } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                    window.history.replaceState(estado, titulo, constructorURLFinal);
                }
            },
            detalleImpuesto: async (respuestaServidor) => {
                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "Impuesto inexistente",
                        descripcion: "El impuesto al que hace referencia la URL no existe.Revisa el identificador.Quiz√°s fue un impuesto que tuviste hace un tiempo y que borraste."
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                }
                if (respuestaServidor?.ok) {
                    const detallesImpuesto = respuestaServidor?.ok
                    const impuestoUID = detallesImpuesto.impuestoUID
                    const nombre = detallesImpuesto.nombre
                    const tipoValorIDV = detallesImpuesto.tipoValorIDV
                    const tipoImpositivo = detallesImpuesto.tipoImpositivo
                    const entidadIDV = detallesImpuesto.entidadIDV
                    const estadoIDV = detallesImpuesto.estadoIDV


                    const dicccionario = {
                        estados: {
                            activado: "Activado",
                            desactivado: "Desactivado"
                        },
                        tiposValores: {
                            porcentaje: "Porcentaje",
                            tasa: "Tasa"
                        },
                        entidades: {
                            reserva: "Reserva",
                            servicio: "Servicio",
                            global: "Global"
                        },
                    }


                    let selectorEspacioPreciosEImpuestos = document.querySelector("[componente=impuestos]")
                    let bloqueDetallesImpuesto = document.createElement("div")
                    bloqueDetallesImpuesto.classList.add("detalleImpuestoBloque")
                    bloqueDetallesImpuesto.setAttribute("impuestoUID", impuestoUID)
                    bloqueDetallesImpuesto.setAttribute("componente", "bloqueDetalles")
                    let nombreImpuestoUI = document.createElement("p")
                    nombreImpuestoUI.classList.add("detalleImpuestoNombre")
                    nombreImpuestoUI.setAttribute("detalleImpuesto", "nombre")
                    nombreImpuestoUI.innerText = nombre
                    bloqueDetallesImpuesto.appendChild(nombreImpuestoUI)
                    let bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "tipoImpositivo")
                    let tituloDato = document.createElement("p")
                    tituloDato.classList.add("detalleImpuestoTituloDato")
                    tituloDato.innerText = "Tipo impositivo"
                    bloqueDato.appendChild(tituloDato)
                    let datoLectura = document.createElement("p")
                    datoLectura.classList.add("detalleImpuestoDatoLectura")
                    datoLectura.setAttribute("detalleImpuesto", "tipoImpositivo")
                    datoLectura.innerText = tipoImpositivo
                    bloqueDato.appendChild(datoLectura)
                    bloqueDetallesImpuesto.appendChild(bloqueDato)
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "tipoValorIDV")
                    tituloDato = document.createElement("p")
                    tituloDato.classList.add("detalleImpuestoTituloDato")
                    tituloDato.innerText = "Tipo valor"
                    bloqueDato.appendChild(tituloDato)
                    datoLectura = document.createElement("p")
                    datoLectura.classList.add("detalleImpuestoDatoLectura")
                    datoLectura.setAttribute("detalleImpuesto", "tipoValorIDV")
                    datoLectura.setAttribute("tipoValorIDV", tipoValorIDV)
                    datoLectura.innerText = dicccionario.tiposValores[tipoValorIDV]
                    bloqueDato.appendChild(datoLectura)
                    bloqueDetallesImpuesto.appendChild(bloqueDato)
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "entidadIDV")
                    tituloDato = document.createElement("p")
                    tituloDato.classList.add("detalleImpuestoTituloDato")
                    tituloDato.innerText = "Entidad"
                    bloqueDato.appendChild(tituloDato)
                    datoLectura = document.createElement("p")
                    datoLectura.classList.add("detalleImpuestoDatoLectura")
                    datoLectura.setAttribute("detalleImpuesto", "entidadIDV")
                    datoLectura.setAttribute("entidadIDV", entidadIDV)
                    datoLectura.innerText = dicccionario.entidades[entidadIDV]
                    bloqueDato.appendChild(datoLectura)
                    bloqueDetallesImpuesto.appendChild(bloqueDato)
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "estadoIDV")
                    tituloDato = document.createElement("p")
                    tituloDato.classList.add("detalleImpuestoTituloDato")
                    tituloDato.innerText = "Estado del impuesto"
                    bloqueDato.appendChild(tituloDato)
                    datoLectura = document.createElement("p")
                    datoLectura.classList.add("detalleImpuestoDatoLectura")
                    datoLectura.setAttribute("detalleImpuesto", "estadoIDV")
                    datoLectura.setAttribute("estadoIDV", estadoIDV)
                    datoLectura.innerText = dicccionario.estados[estadoIDV]
                    bloqueDato.appendChild(datoLectura)
                    bloqueDetallesImpuesto.appendChild(bloqueDato)
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "moneda")
                    //tituloDato = document.createElement("p")
                    //tituloDato.classList.add("detalleImpuestoTituloDato")
                    //tituloDato.innerText = "Moneda"
                    //bloqueDato.appendChild(tituloDato)
                    //datoLectura = document.createElement("p")
                    //datoLectura.classList.add("detalleImpuestoDatoLectura")
                    //datoLectura.setAttribute("detalleImpuesto", "moneda")
                    //datoLectura.setAttribute("monedaIDV", monedaIDV)
                    //datoLectura.innerText = monedaUI
                    //bloqueDato.appendChild(datoLectura)
                    //bloqueDetallesImpuesto.appendChild(bloqueDato)
                    selectorEspacioPreciosEImpuestos.appendChild(bloqueDetallesImpuesto)
                    let bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detalleImpuestoBloqueBotones")
                    let boton = document.createElement("p")
                    boton.classList.add("detalleImpuestoBoton")
                    boton.setAttribute("boton", "editarImpuesto")
                    boton.innerText = "Editar impuesto"
                    boton.addEventListener("click", casaVitini.administracion.impuestos.editarImpuesto)
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("p")
                    boton.classList.add("detalleImpuestoBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("boton", "guardarCambios")
                    boton.addEventListener("click", casaVitini.administracion.impuestos.guardarModificacionesImpuesto)
                    boton.innerText = "Guardar cambios"
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("p")
                    boton.classList.add("detalleImpuestoBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("boton", "cancelarCambios")
                    boton.addEventListener("click", casaVitini.administracion.impuestos.cancelarCambiosImpuesto)
                    boton.innerText = "Cancelar cambios"
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("p")
                    boton.classList.add("detalleImpuestoBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("boton", "eliminarImpuesto")
                    boton.addEventListener("click", casaVitini.administracion.impuestos.eliminarPerfilImpuestos.UI)
                    boton.innerText = "Eliminar impuesto"
                    bloqueBotones.appendChild(boton)
                    selectorEspacioPreciosEImpuestos.appendChild(bloqueBotones)
                }
            },
            editarImpuesto: async () => {
                document.querySelector("[boton=editarImpuesto]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[boton=guardarCambios]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[boton=cancelarCambios]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[boton=eliminarImpuesto]").classList.remove("elementoOcultoInicialmente")
                const opcionesTipoValor = [
                    {
                        tipoValorIDV: "tasa",
                        tipoValorUI: "Tasa"
                    }, {
                        tipoValorIDV: "porcentaje",
                        tipoValorUI: "Porcentaje"
                    }
                ]
                const opcionesEntidad = [
                    {
                        entidadIDV: "reserva",
                        entidadUI: "Reserva"
                    },
                    {
                        entidadIDV: "servicio",
                        entidadUI: "Servicio"
                    },
                    {
                        entidadIDV: "global",
                        entidadUI: "Global"
                    }
                ]
                const listaEstados = [
                    {
                        estadoIDV: "activado",
                        estadoUI: "Activado"
                    }, {
                        estadoIDV: "desactivado",
                        estadoUI: "Desactivado"
                    }
                ]
                const selectorDatoLectura = document.querySelectorAll("[detalleImpuesto]")
                selectorDatoLectura.forEach((detalleImpuesto) => {
                    detalleImpuesto.style.display = "none"
                    const nombreDetalles = detalleImpuesto.getAttribute("detalleImpuesto")
                    const datoDetalle = detalleImpuesto.innerText
                    const campoEditable = document.createElement("input")
                    campoEditable.classList.add("detalleImpuestoCampoEditable")
                    campoEditable.setAttribute("componente", "campoEditable")
                    campoEditable.setAttribute("campoEditable", nombreDetalles)
                    campoEditable.setAttribute("datoActual", datoDetalle)
                    campoEditable.value = datoDetalle
                    if (nombreDetalles === "nombre") {
                        const selectorBloqueDetalles = document.querySelector("[componente=bloqueDetalles")
                        const selectorPrimerBloqueDAtos = document.querySelector("[bloqueDato=tipoImpositivo]")
                        campoEditable.placeholder = "Escribe un nombre para el impuesto"
                        campoEditable.classList.add("nombreImpuestoCampo")
                        selectorBloqueDetalles.insertBefore(campoEditable, selectorPrimerBloqueDAtos);
                    }
                    if (nombreDetalles === "tipoValorIDV") {
                        const tipoValorIDV_actual = detalleImpuesto.getAttribute("tipoValorIDV")
                        const contenedorOpciones = document.createElement("select")
                        contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                        contenedorOpciones.setAttribute("componente", "campoEditable")
                        contenedorOpciones.setAttribute("campoEditable", nombreDetalles)
                        contenedorOpciones.setAttribute("datoActual", tipoValorIDV_actual)
                        opcionesTipoValor.forEach((opcionTipoValor) => {
                            const tipoValorIDV = opcionTipoValor.tipoValorIDV
                            const tipoValorUI = opcionTipoValor.tipoValorUI
                            const opcion = document.createElement("option");
                            opcion.value = tipoValorIDV;
                            opcion.text = tipoValorUI;
                            opcion.setAttribute("opcion", tipoValorIDV)
                            contenedorOpciones.add(opcion);
                        })
                        contenedorOpciones.value = tipoValorIDV_actual;
                        const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(contenedorOpciones)
                        if (nombreDetalles === "tipoImpositivo") {
                            const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                            selectorBloqueDato.appendChild(campoEditable)
                        }
                    }
                    if (nombreDetalles === "entidadIDV") {
                        const aplicacionSobreIDV_actual = detalleImpuesto.getAttribute("entidadIDV")
                        const contenedorOpciones = document.createElement("select")
                        contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                        contenedorOpciones.setAttribute("componente", "campoEditable")
                        contenedorOpciones.setAttribute("campoEditable", nombreDetalles)
                        contenedorOpciones.setAttribute("datoActual", aplicacionSobreIDV_actual)
                        opcionesEntidad.forEach((e) => {
                            const entidadIDV = e.entidadIDV
                            const entidadUI = e.entidadUI
                            const opcion = document.createElement("option");
                            opcion.value = entidadIDV;
                            opcion.text = entidadUI;
                            opcion.setAttribute("opcion", entidadIDV)
                            contenedorOpciones.add(opcion);
                        })
                        contenedorOpciones.value = aplicacionSobreIDV_actual;
                        const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(contenedorOpciones)
                        if (nombreDetalles === "tipoImpositivo") {
                            const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                            selectorBloqueDato.appendChild(campoEditable)
                        }
                    }
                    if (nombreDetalles === "estadoIDV") {
                        const estadoIDV_Actual = detalleImpuesto.getAttribute("estadoIDV")
                        const contenedorOpciones = document.createElement("select")
                        contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                        contenedorOpciones.setAttribute("componente", "campoEditable")
                        contenedorOpciones.setAttribute("campoEditable", nombreDetalles)
                        contenedorOpciones.setAttribute("datoActual", estadoIDV_Actual)
                        listaEstados.forEach((estado) => {
                            const estadoIDV = estado.estadoIDV
                            const estadoUI = estado.estadoUI
                            const opcion = document.createElement("option");
                            opcion.value = estadoIDV;
                            opcion.text = `${estadoUI}`;
                            opcion.setAttribute("opcion", estadoIDV)
                            contenedorOpciones.add(opcion);
                        })
                        contenedorOpciones.value = estadoIDV_Actual;
                        const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(contenedorOpciones)
                        if (nombreDetalles === "tipoImpositivo") {
                            const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                            selectorBloqueDato.appendChild(campoEditable)
                        }
                    }
                    if (nombreDetalles === "tipoImpositivo") {
                        const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        campoEditable.placeholder = "Escribe un tipo impositivo(00.00)"

                        selectorBloqueDato.appendChild(campoEditable)
                    }
                })
            },
            cancelarCambiosImpuesto: () => {
                document.querySelector("[boton=editarImpuesto]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[boton=guardarCambios]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[boton=cancelarCambios]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[boton=eliminarImpuesto]").classList.add("elementoOcultoInicialmente")
                const selectorCamposEditables = document.querySelectorAll("[componente=campoEditable]")
                selectorCamposEditables.forEach((campoEditable) => {
                    campoEditable.remove()
                })
                const selectorDatoLectura = document.querySelectorAll("[detalleImpuesto]")
                selectorDatoLectura.forEach((detalleImpuesto) => {
                    detalleImpuesto.removeAttribute("style")
                })
            },
            guardarModificacionesImpuesto: async () => {
                const impuestoUID = document.querySelector("[impuestoUID]").getAttribute("impuestoUID")
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const mensaje = "Guardando impuesto..."
                const datosPantallaSuperpuesta = {
                    instanciaUID: instanciaUID,
                    mensaje: mensaje
                }
                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                const transaccion = {
                    zona: "administracion/impuestos/guardarModificacionImpuesto",
                    impuestoUID: String(impuestoUID)
                }
                const selectorCamposEditables = document.querySelectorAll("[componente=campoEditable]")
                selectorCamposEditables.forEach(campoEditable => {
                    const nombreCampoEditable = campoEditable.getAttribute("campoEditable")
                    const datoCampoEditable = campoEditable.value
                    transaccion[nombreCampoEditable] = datoCampoEditable
                })

                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (!instanciaRenderizada) { return }
                instanciaRenderizada.remove()
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const detalleImpuestoActualizado = respuestaServidor?.detallesImpuesto
                    const nombre = detalleImpuestoActualizado.nombre
                    const impuestoUID = detalleImpuestoActualizado.impuestoUID
                    const tipoImpositivo = detalleImpuestoActualizado.tipoImpositivo
                    const tipoValorIDV = detalleImpuestoActualizado.tipoValorIDV
                    const estadoIDV = detalleImpuestoActualizado.estadoIDV
                    const entidadIDV = detalleImpuestoActualizado.entidadIDV

                    const dicccionario = {
                        estados: {
                            activado: "Activado",
                            desactivado: "Desactivado"
                        },
                        tiposValores: {
                            porcentaje: "Porcentaje",
                            tasa: "Tasa"
                        },
                        entidades: {
                            reserva: "Reserva",
                            servicio: "Servicios",
                            global: "Global"
                        },
                    }

                    const selectorCamposEditables = document.querySelectorAll("[componente=campoEditable]")
                    selectorCamposEditables.forEach(campoEditable => campoEditable.remove())
                    const selectorNombreImpuesto = document.querySelector("[detalleImpuesto=nombre]")

                    selectorNombreImpuesto.innerText = nombre
                    const selectotipoImpositivo = document.querySelector("[detalleImpuesto=tipoImpositivo]")
                    selectotipoImpositivo.innerText = tipoImpositivo

                    const selectorTipoValor = document.querySelector("[detalleImpuesto=tipoValorIDV]")
                    selectorTipoValor.setAttribute("tipoValor", tipoValorIDV)
                    selectorTipoValor.innerText = dicccionario.tiposValores[tipoValorIDV]

                    const selectorEntidad = document.querySelector("[detalleImpuesto=entidadIDV]")
                    selectorEntidad.setAttribute("entidadIDV", entidadIDV)
                    selectorEntidad.innerText = dicccionario.entidades[entidadIDV]

                    const selectorMoneda = document.querySelector("[detalleImpuesto=estadoIDV]")
                    selectorMoneda.setAttribute("estadoIDV", estadoIDV)
                    selectorMoneda.innerText = dicccionario.estados[estadoIDV]

                    const selectorDatoLectura = document.querySelectorAll("[detalleImpuesto]")
                    selectorDatoLectura.forEach((detalleImpuesto) => {
                        detalleImpuesto.removeAttribute("style")
                    })
                    document.querySelector("[boton=editarImpuesto]").classList.remove("elementoOcultoInicialmente")
                    document.querySelector("[boton=guardarCambios]").classList.add("elementoOcultoInicialmente")
                    document.querySelector("[boton=cancelarCambios]").classList.add("elementoOcultoInicialmente")
                    document.querySelector("[boton=eliminarImpuesto]").classList.add("elementoOcultoInicialmente")
                }
            },
            eliminarPerfilImpuestos: {
                UI: () => {
                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                    const titulo = constructor.querySelector("[componente=titulo]")
                    titulo.innerText = "Confirmar la eliminaci√≥n del perfil del impuesto"
                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                    mensaje.innerText = "Vas a eliminar un impuesto y su aplicaci√≥n ser√° inmediata en los precios de las reservas."

                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                    botonAceptar.innerText = "Comfirmar la eliminacion del impuesto"
                    botonAceptar.addEventListener("click", casaVitini.administracion.impuestos.eliminarPerfilImpuestos.confirmarEliminacion)
                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                    botonCancelar.innerText = "Cancelar la eliminacion"

                    document.querySelector("main").appendChild(pantallaInmersiva)
                },
                confirmarEliminacion: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Eliminado impuesto..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const impuestoUID = document.querySelector("[impuestoUID]").getAttribute("impuestoUID")
                    const transaccion = {
                        zona: "administracion/impuestos/eliminarPerfilImpuesto",
                        impuestoUID: String(impuestoUID)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                        selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                        const entrada = {
                            vista: "/administracion/impuestos",
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(entrada)
                    }
                }
            },
            crearImpuesto: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/impuestos/nuevo")

                    const opcionesTipoValor = [
                        {
                            tipoValorIDV: "porcentaje",
                            tipoValorUI: "Porcentaje"
                        },
                        {
                            tipoValorIDV: "tasa",
                            tipoValorUI: "Tasa"
                        }
                    ]

                    const opcionesEntidad = [
                        {
                            entidadIDV: "reserva",
                            entidadUI: "Reserva"
                        },
                        {
                            entidadIDV: "servicio",
                            entidadUI: "Servicios"
                        },
                        {
                            entidadIDV: "global",
                            entidadUI: "Global"
                        },

                    ]

                    const selectorEspacioImpuestos = document.querySelector("[componente=espacioImpuestos]")
                    const contenedorNuevoImpuesto = document.createElement("div")
                    contenedorNuevoImpuesto.classList.add("contenedorNuevoImpuesto")
                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")
                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = "Para crear un nuevo impuesto, rellene los datos de este, establece un nombre, una cantidad y seleccione las opciones restantes."
                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                    let campoCraerNuevoImpuesto = document.createElement("input")
                    campoCraerNuevoImpuesto.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto")
                    campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "nombre")
                    campoCraerNuevoImpuesto.placeholder = "Escribo el nombre del nuevo impuesto"
                    bloqueBloqueoApartamentos.appendChild(campoCraerNuevoImpuesto)
                    campoCraerNuevoImpuesto = document.createElement("input")
                    campoCraerNuevoImpuesto.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto")
                    campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "tipoImpositivo")
                    campoCraerNuevoImpuesto.placeholder = "0.00"
                    bloqueBloqueoApartamentos.appendChild(campoCraerNuevoImpuesto)
                    let contenedorOpciones = document.createElement("select")
                    contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                    contenedorOpciones.setAttribute("comNuevoImpuesto", "tipoValorIDV")

                    const opTipoValor = document.createElement("option")
                    opTipoValor.selected = "true"
                    opTipoValor.disabled = "true"
                    opTipoValor.value = ""
                    opTipoValor.text = "Selecciona el tipo de valor del impuesto"
                    contenedorOpciones.appendChild(opTipoValor)

                    opcionesTipoValor.forEach((opcionTipoValor) => {
                        const tipoValorIDV = opcionTipoValor.tipoValorIDV
                        const tipoValorUI = opcionTipoValor.tipoValorUI
                        const opcion = document.createElement("option");
                        opcion.value = tipoValorIDV;
                        opcion.text = tipoValorUI;
                        opcion.setAttribute("opcion", tipoValorIDV)
                        contenedorOpciones.add(opcion);
                    })
                    bloqueBloqueoApartamentos.appendChild(contenedorOpciones)
                    contenedorOpciones = document.createElement("select")
                    contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                    contenedorOpciones.setAttribute("comNuevoImpuesto", "entidadIDV")


                    const opEntidades = document.createElement("option")
                    opEntidades.selected = "true"
                    opEntidades.disabled = "true"
                    opEntidades.value = ""
                    opEntidades.text = "Selecciona el tipo de entidad"
                    contenedorOpciones.appendChild(opEntidades)

                    opcionesEntidad.forEach((entidad) => {
                        const entidadIDV = entidad.entidadIDV
                        const entidadUI = entidad.entidadUI
                        const opcion = document.createElement("option");
                        opcion.value = entidadIDV;
                        opcion.text = entidadUI;
                        opcion.setAttribute("opcion", entidadIDV)
                        contenedorOpciones.add(opcion);
                    })
                    bloqueBloqueoApartamentos.appendChild(contenedorOpciones)

                    contenedorNuevoImpuesto.appendChild(bloqueBloqueoApartamentos)
                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = "Crear nuevo impuesto"
                    botonCancelar.addEventListener("click", casaVitini.administracion.impuestos.crearImpuesto.confirmarCrearImpuesto)
                    bloqueBotones.appendChild(botonCancelar)
                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cancelar"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                        selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    //bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                    contenedorNuevoImpuesto.appendChild(bloqueBotones)
                    selectorEspacioImpuestos.appendChild(contenedorNuevoImpuesto)

                },
                confirmarCrearImpuesto: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando nuevo impuesto..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje,
                        identificadorVisual: "pantallaDeCarga"
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const transaccion = {
                        zona: "administracion/impuestos/crearNuevoImpuesto"
                    }

                    let selectorCampos = document.querySelectorAll("[comNuevoImpuesto]")
                    selectorCampos.forEach((campoNuevoImpuesto) => {
                        const nombreCampo = campoNuevoImpuesto.getAttribute("comNuevoImpuesto")
                        const datoCampo = campoNuevoImpuesto.value
                        transaccion[nombreCampo] = datoCampo
                    })

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()


                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const nuevoUIDIMpuesto = respuestaServidor?.nuevoImpuestoUID
                        const entrada = {
                            vista: "/administracion/impuestos/" + nuevoUIDIMpuesto,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(entrada)
                    }
                }
            },
            contenedorBotones: () => {
                const espacioImpuestos = document.querySelector("[componente=impuestos]")
                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("administracion_impuestos_contenedorBotones")
                contenedorBotones.setAttribute("componente", "contenedorBotonesImpuestos")
                const botonCrearImpuesto = document.createElement("a")
                botonCrearImpuesto.classList.add("administracion_impuestos_botonV1")
                botonCrearImpuesto.innerText = "Crear impuesto"
                botonCrearImpuesto.setAttribute("href", "/administracion/impuestos/crear_nuevo_impuesto")
                botonCrearImpuesto.setAttribute("vista", "/administracion/impuestos/crear_nuevo_impuesto")
                botonCrearImpuesto.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                contenedorBotones.appendChild(botonCrearImpuesto)
                espacioImpuestos.appendChild(contenedorBotones)
            },
        },
        gestion_de_ofertas: {
            arranque: async function () {
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const main = document.querySelector("main")
                if (comandoInicial === "gestion_de_ofertas" && Object.keys(granuladoURL.parametros).length === 0) {
                    main.setAttribute("zonaCSS", "administracion/ofertas")
                    this.portada.portadaUI()
                } else if (granuladoURL.parametros.oferta) {
                    main.setAttribute("zonaCSS", "administracion/ofertas/ofertaUI")
                    this.detallesOferta.obtenerDetallesOferta(granuladoURL.parametros.oferta)
                } else {
                    const info = {
                        titulo: "No existe ninguna oferta con ese identificador",
                        descripcion: "La oferta que buscas con ese identificador no existe.Comprueba el identificador de la reserva"
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                }
            },
            portada: {
                portadaUI: async function () {
                    const espacioOfertas = document.querySelector("[componente=espacioOfertas]")
                    const contenedor = document.createElement("div")
                    contenedor.classList.add("gestionDeOfertasContenedor")
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("gestionDeOfertasContenedorBotones")
                    const botonCrearOfertas = document.createElement("a")
                    botonCrearOfertas.classList.add("gestionDeOfertasBotonCrearOferta")
                    botonCrearOfertas.innerText = "Crear una nueva oferta"
                    botonCrearOfertas.setAttribute("href", "/administracion/gestion_de_ofertas/crear_oferta")
                    botonCrearOfertas.setAttribute("vista", "/administracion/gestion_de_ofertas/crear_oferta")
                    botonCrearOfertas.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(botonCrearOfertas)
                    contenedor.appendChild(contenedorBotones)
                    const contenedorOfertas = document.createElement("div")
                    contenedorOfertas.classList.add("gestionDeOfertasContedorOfertas")
                    contenedorOfertas.setAttribute("componente", "espacioListaOfertas")
                    contenedor.appendChild(contenedorOfertas)
                    espacioOfertas.appendChild(contenedor)
                    const transaccion = {
                        zona: "administracion/ofertas/listasOfertasAdministracion"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const espacioListaOfertas = document.querySelector("[componente=espacioListaOfertas]")

                        const ofertasEncontradas = respuestaServidor?.ok
                        if (typeof ofertasEncontradas === "string") {
                            const ofertaUI = document.createElement("a")
                            ofertaUI.classList.add("ofertaUINoHay")
                            const tituloOferta = document.createElement("p")
                            tituloOferta.classList.add("ofertaUITituloOferta")
                            tituloOferta.innerText = "No hay ofertas configuradas"
                            ofertaUI.appendChild(tituloOferta)
                            espacioListaOfertas.appendChild(ofertaUI)

                        }
                        if (Array.isArray(ofertasEncontradas) && ofertasEncontradas.length > 0) {
                            ofertasEncontradas.forEach((detalleOferta) => {

                                const ofertaUID = detalleOferta.ofertaUID
                                const nombreOferta = detalleOferta.nombreOferta
                                const fechaInicio = detalleOferta.fechaInicio
                                const fechaFinal = detalleOferta.fechaFinal
                                const entidadIDV = detalleOferta.entidadIDV
                                const estadoIDV = detalleOferta.estadoIDV
                                const zonaIDV = detalleOferta.zonaIDV
                                const condicionesArray = detalleOferta.condicionesArray
                                const descuentosJSON = detalleOferta.descuentosJSON

                                const estadoUI = {
                                    activado: "Activada",
                                    desactivado: "Desactivada"
                                }
                                const entidadUI = {
                                    reserva: "Reserva"
                                }
                                const zonaUI = {
                                    global: "Global",
                                    privado: "privado",
                                    publico: "publica"
                                }
                                const ofertaUI = document.createElement("a")
                                ofertaUI.classList.add("ofertaUI")
                                ofertaUI.setAttribute("ofertaUID", ofertaUID)
                                ofertaUI.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                ofertaUI.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                ofertaUI.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.traductorCambioVista)
                                const tituloOferta = document.createElement("p")
                                tituloOferta.classList.add("ofertaUITituloOferta")
                                tituloOferta.innerText = nombreOferta
                                ofertaUI.appendChild(tituloOferta)
                                const contenedorGlobalOferta = document.createElement("div")
                                contenedorGlobalOferta.classList.add("ofertaUIContenedorGlobalOferta")
                                //-------------------------------------
                                const contenedorDetalleOferta = document.createElement("div")
                                contenedorDetalleOferta.classList.add("ofertaUIContenedorDetalles")
                                //-------------------------------------
                                const fechaInicioContenedor = document.createElement("div")
                                fechaInicioContenedor.classList.add("ofertaUIFechaContenedor")
                                const tituloFechaInicio = document.createElement("div")
                                tituloFechaInicio.classList.add("ofertaUITituloFecha")
                                tituloFechaInicio.innerText = "Fecha de inicio"
                                fechaInicioContenedor.appendChild(tituloFechaInicio)
                                const datoFechaInicio = document.createElement("div")
                                datoFechaInicio.classList.add("ofertaUIDatoFecha")
                                datoFechaInicio.innerText = fechaInicio
                                fechaInicioContenedor.appendChild(datoFechaInicio)
                                contenedorDetalleOferta.appendChild(fechaInicioContenedor)
                                const fechaFinContenedor = document.createElement("div")
                                fechaFinContenedor.classList.add("ofertaUIFechaContenedor")
                                const tituloFechaFin = document.createElement("div")
                                tituloFechaFin.classList.add("ofertaUITituloFecha")
                                tituloFechaFin.innerText = "Fecha de fin"
                                fechaFinContenedor.appendChild(tituloFechaFin)
                                const datoFechaFin = document.createElement("div")
                                datoFechaFin.classList.add("ofertaUIDatoFecha")
                                datoFechaFin.innerText = fechaFinal
                                fechaFinContenedor.appendChild(datoFechaFin)
                                contenedorDetalleOferta.appendChild(fechaFinContenedor)
                                contenedorGlobalOferta.appendChild(contenedorDetalleOferta)
                                ofertaUI.appendChild(contenedorGlobalOferta)
                                //--------------------------------------
                                let contenedorPropiedadesOferta = document.createElement("div")
                                contenedorPropiedadesOferta.classList.add("ofertaUIContenedorPropiedades")
                                ///

                                const bloqueEstado = document.createElement("div")
                                bloqueEstado.classList.add("ofertaUIBloqueOpcion")
                                const tituloEstado = document.createElement("p")
                                tituloEstado.classList.add("ofertaUITituloOpcion")
                                tituloEstado.innerText = "Estado de la oferta"
                                bloqueEstado.appendChild(tituloEstado)
                                const estadoUIX = document.createElement("p")
                                estadoUIX.classList.add("ofertaUIDatoOpcion")
                                estadoUIX.innerText = estadoUI[estadoIDV]
                                bloqueEstado.appendChild(estadoUIX)
                                contenedorPropiedadesOferta.appendChild(bloqueEstado)



                                let bloqueOpcion = document.createElement("div")
                                bloqueOpcion.classList.add("ofertaUIBloqueOpcion")
                                let tituloOpcion = document.createElement("p")
                                tituloOpcion.classList.add("ofertaUITituloOpcion")
                                tituloOpcion.innerText = "Entidad"
                                bloqueOpcion.appendChild(tituloOpcion)
                                let datoOpcion = document.createElement("p")
                                datoOpcion.classList.add("ofertaUIDatoOpcion")
                                datoOpcion.innerText = entidadUI[entidadIDV]
                                bloqueOpcion.appendChild(datoOpcion)
                                contenedorPropiedadesOferta.appendChild(bloqueOpcion)


                                tituloOpcion = document.createElement("p")
                                tituloOpcion.classList.add("ofertaUITituloOpcion")
                                tituloOpcion.innerText = "Zona de publicaci√≥n"
                                bloqueOpcion.appendChild(tituloOpcion)
                                datoOpcion = document.createElement("p")
                                datoOpcion.classList.add("ofertaUIDatoOpcion")
                                datoOpcion.innerText = zonaUI[zonaIDV]
                                bloqueOpcion.appendChild(datoOpcion)

                                contenedorPropiedadesOferta.appendChild(bloqueOpcion)
                                contenedorGlobalOferta.appendChild(contenedorPropiedadesOferta)

                                const contenedorCYD = document.createElement("div")
                                contenedorCYD.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorCYD.setAttribute("contenedor", "condicionesDescuentos")

                                const condicionesUI = this.condicionesUI({
                                    condicionesArray
                                })
                                contenedorCYD.appendChild(condicionesUI)

                                const descuentoUI = this.descuentosUI({
                                    descuentosJSON
                                })
                                contenedorCYD.appendChild(descuentoUI)

                                contenedorGlobalOferta.appendChild(contenedorCYD)
                                espacioListaOfertas.appendChild(ofertaUI)
                            })
                        }
                    }
                },
                condicionesUI: (data) => {
                    const condicionesArray = data.condicionesArray
                    const contenedorCondiciones = document.createElement("div")
                    contenedorCondiciones.setAttribute("contenedor", "condiciones")
                    contenedorCondiciones.classList.add(
                        "flexVertical",
                        "gap6",
                        "backgroundGrey1",
                        "padding6",
                        "borderRadius14"
                    )
                    const tituloContendor = document.createElement("div")
                    tituloContendor.classList.add(
                        "negrita",
                        "padding6",

                    )
                    tituloContendor.innerText = "Condiciones de la oferta"
                    contenedorCondiciones.appendChild(tituloContendor)

                    condicionesArray.forEach((condicion) => {
                        const tipoCondicion = condicion.tipoCondicion

                        const contenedorCondicion = document.createElement("div")
                        contenedorCondicion.classList.add("contenedorCondicion")
                        contenedorCondicion.setAttribute("tipoCondicion", tipoCondicion)
                        contenedorCondicion.classList.add(
                            "flexVertical",
                            "padding6",
                        )
                        const definicionCondicion = casaVitini
                            .ui
                            .componentes
                            .contenedorFinanciero
                            .componentesUI
                            .ofertas
                            .componentesUI
                            .definicionCondiciones({
                                tipoCondicion,
                                condicion
                            })
                        contenedorCondicion.appendChild(definicionCondicion)
                        contenedorCondiciones.appendChild(contenedorCondicion)
                    })
                    return contenedorCondiciones

                },
                descuentosUI: (data) => {
                    const descuentosJSON = data.descuentosJSON
                    const tipoDescuento = descuentosJSON?.tipoDescuento
                    const subTipoDescuento = descuentosJSON?.subTipoDescuento

                    const contenedorDescuentos = document.createElement("div")
                    contenedorDescuentos.setAttribute("contenedor", "descuentos")
                    contenedorDescuentos.classList.add(
                        "flexVertical",
                        "backgroundGrey1",
                        "padding12",
                        "borderRadius14",
                        "gap6"
                    )
                    const tituloContendor = document.createElement("div")
                    tituloContendor.classList.add(
                        "negrita",

                    )
                    tituloContendor.innerText = "Descuentos de la oferta"
                    contenedorDescuentos.appendChild(tituloContendor)

                    const desfinicionDescuento = casaVitini
                        .ui
                        .componentes
                        .contenedorFinanciero
                        .componentesUI
                        .ofertas
                        .componentesUI.definicionDescuentos({
                            tipoDescuento,
                            subTipoDescuento,
                            descuentosJSON
                        })
                    contenedorDescuentos.appendChild(desfinicionDescuento)

                    return contenedorDescuentos
                },
            },
            crearOferta: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/ofertas/ofertaUI")
                    const selector = document.querySelector("[componente=espacioOfertas]")
                    const ofertaUI = casaVitini.administracion.gestion_de_ofertas.detalleUI("crearOferta")
                    selector.appendChild(ofertaUI)
                    selector.setAttribute("modo", "crearOferta")
                    const botonesCrearOferta = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesCrearOferta()
                    main.appendChild(botonesCrearOferta)
                },
                crearOfertaConfirmar: async () => {

                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const metadatosPantallaCarga = {
                        mensaje: "Creando reserva...",
                        instanciaUID: instanciaUID,
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                    const transaccion = casaVitini.administracion.gestion_de_ofertas.utilidades.constructorObjeto()
                    transaccion.zona = "administracion/ofertas/crearOferta"
                    transaccion.entidadIDV = "reserva"


                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!pantallaDeCargaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const nuevaOferta = respuestaServidor?.oferta.ofertaUID
                        const vista = `/administracion/gestion_de_ofertas/oferta:${nuevaOferta}`
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                },

            },
            detallesOferta: {
                obtenerDetallesOferta: async function (ofertaUID) {
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const transaccion = {
                        zona: "administracion/ofertas/detallesOferta",
                        ofertaUID: ofertaUID
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe ning√∫na oferta con ese identificador",
                            descripcion: "Revisa el identificador porque esta oferta que buscas no existe.Quiz√°s este identificador existi√≥ y borraste esta oferta.."
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    } else if (respuestaServidor?.ok) {
                        const oferta = respuestaServidor.ok
                        const ofertaUID = oferta.ofertaUID
                        const espacioOfertasGlobal = document.querySelector("[componente=espacioOfertas]")
                        espacioOfertasGlobal.setAttribute("instantanea", JSON.stringify(oferta))
                        espacioOfertasGlobal.setAttribute("ofertaUID", ofertaUID)

                        espacioOfertasGlobal.innerHTML = null
                        const ofertaUI = casaVitini.administracion.gestion_de_ofertas.detalleUI("editarOferta")
                        espacioOfertasGlobal.appendChild(ofertaUI)
                        await this.aplicaData({
                            oferta: oferta,
                            instanciaUID_destino: instanciaUID
                        })
                        const selectorBoton = seccionRenderizada.querySelector("[boton=anadirCondicion]")
                        selectorBoton.removeAttribute("style")
                        const botonesModificacion = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesDuranteModificacionOferta()
                        espacioOfertasGlobal.appendChild(botonesModificacion)
                    }
                },
                aplicaData: async function (data) {

                    const oferta = data.oferta
                    const instanciaUID_destino = data.instanciaUID_destino
                    const ofertaUI = document.querySelector(`[instanciaUID="${instanciaUID_destino}"]`)

                    const nombreOferta = oferta.nombreOferta
                    const ofertaUID = oferta.ofertaUID
                    const fechaInicio_ISO = oferta.fechaInicio
                    const fechaFinal_ISO = oferta.fechaFinal
                    const condicionesArray = oferta.condicionesArray
                    const descuentosJSON = oferta.descuentosJSON
                    const estadoIDV = oferta.estadoIDV
                    const zonaIDV = oferta.zonaIDV
                    const modo = data.modo || null

                    const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio_ISO)
                    const fechaFinal_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinal_ISO)

                    const espacioOfertasGlobal = ofertaUI.querySelector("[componente=espacioOfertas]")
                    espacioOfertasGlobal.setAttribute("ofertaUID", String(ofertaUID))
                    espacioOfertasGlobal.setAttribute("modo", "editarOferta")

                    //Esto no debe revertirse
                    if (modo !== "resversion") {
                        const selectorEstadoOfertaUI = ofertaUI.querySelector("[componente=estadoOferta]")
                        if (estadoIDV === "desactivado") {
                            selectorEstadoOfertaUI.setAttribute("estadoOferta", estadoIDV)
                            selectorEstadoOfertaUI.style.background = "#ff000091"
                            selectorEstadoOfertaUI.innerHTML = "Oferta desactivada"
                        }
                        if (estadoIDV === "activado") {
                            selectorEstadoOfertaUI.setAttribute("estadoOferta", estadoIDV)
                            selectorEstadoOfertaUI.style.background = "#00ff006e"
                            selectorEstadoOfertaUI.innerHTML = "Oferta activada"
                        }
                    }


                    const campoNombreOferta = ofertaUI.querySelector("[campoOferta=nombreOferta]")
                    campoNombreOferta.value = nombreOferta

                    const selectorFechaInicio = ofertaUI.querySelector("[calendario=entrada]")
                    selectorFechaInicio.setAttribute("memoriaVolatil", fechaInicio_ISO)
                    const selectorFechaInicioUI = ofertaUI.querySelector("[fechaUI=fechaInicio]")
                    selectorFechaInicioUI.innerText = fechaInicio_humana

                    const selectorZonaIDV = ofertaUI.querySelector("[campo=zonaIDV]")
                    selectorZonaIDV.value = zonaIDV

                    const selectorFechaFin = ofertaUI.querySelector("[calendario=salida]")
                    selectorFechaFin.setAttribute("memoriaVolatil", fechaFinal_ISO)
                    const selectorFechaFinUI = ofertaUI.querySelector("[fechaUI=fechaFin]")
                    selectorFechaFinUI.innerText = fechaFinal_humana

                    const contenedorSuperBloque = ofertaUI.querySelector("[contenedor=superBloque]")
                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                    contenedorSuperBloque.appendChild(spinner)


                    const contenedorCondiciones = ofertaUI.querySelector("[contenedor=condiciones]")
                    contenedorCondiciones.style.display = "none"
                    const selectorOfertasRenderizdas = contenedorCondiciones.querySelectorAll("[zonaOferta]")
                    selectorOfertasRenderizdas.forEach((ofertaObsoleta) => ofertaObsoleta.remove())
                    const contenedorDescuentosUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.condicionesUI

                    for (const condicion of condicionesArray) {
                        const tipoCondicion = condicion.tipoCondicion
                        const descuentoUI = contenedorDescuentosUI[tipoCondicion]()

                        if (tipoCondicion === "porNumeroDeApartamentos") {
                            const tipoConteo = condicion.tipoConteo
                            const numeroDeApartamentos = condicion.numeroDeApartamentos

                            const selectorTipoConteo = descuentoUI.querySelector("[campoOferta=tipoConteo]")
                            selectorTipoConteo.value = tipoConteo
                            const selectorNumeroApartamentos = descuentoUI.querySelector("[campoOferta=numeroDeApartamentos]")
                            selectorNumeroApartamentos.value = numeroDeApartamentos
                        } else if (tipoCondicion === "porCodigoDescuento") {
                            const codigoDescuento = condicion.codigoDescuento
                            //const codigoAscii = casaVitini.utilidades.conversor.base64HaciaCadena(codigoDescuento)

                            const selectorCampoCodigo = descuentoUI.querySelector("[campo=codigoDescuento]")
                            selectorCampoCodigo.value = codigoDescuento
                        } else if (tipoCondicion === "porDiasDeAntelacion") {
                            const tipoConteo = condicion.tipoConteo
                            const numeroDeDias = condicion.numeroDeDias

                            const selectorTipoConteo = descuentoUI.querySelector("[campoOferta=tipoConteo]")
                            selectorTipoConteo.value = tipoConteo
                            const selectorNumeroDeDias = descuentoUI.querySelector("[campoOferta=numeroDeDias]")
                            selectorNumeroDeDias.value = numeroDeDias

                        } else if (tipoCondicion === "porDiasDeReserva") {
                            const tipoConteo = condicion.tipoConteo
                            const numeroDeDias = condicion.numeroDeDias

                            const selectorTipoConteo = descuentoUI.querySelector("[campoOferta=tipoConteo]")
                            selectorTipoConteo.value = tipoConteo
                            const selectorNumeroDeDias = descuentoUI.querySelector("[campoOferta=numeroDeDias]")
                            selectorNumeroDeDias.value = numeroDeDias
                        } else if (tipoCondicion === "conFechaCreacionEntreRango") {

                        } else if (tipoCondicion === "conFechaEntradaEntreRango") {
                            const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO
                            const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO

                            const fechaInicioRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicioRango_ISO)
                            const fechaFinalRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinalRango_ISO)

                            const selectorEntrada = descuentoUI.querySelector("[calendario=entrada]")
                            const entradaUI = selectorEntrada.querySelector("[fechaUI]")

                            const selectorSalida = descuentoUI.querySelector("[calendario=salida]")
                            const salidaUI = selectorSalida.querySelector("[fechaUI]")

                            selectorEntrada.setAttribute("memoriaVolatil", fechaInicioRango_ISO)
                            selectorSalida.setAttribute("memoriaVolatil", fechaFinalRango_ISO)

                            entradaUI.innerText = fechaInicioRango_humana
                            salidaUI.innerText = fechaFinalRango_humana
                        } else if (tipoCondicion === "porRangoDeFechas") {
                            const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO
                            const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO

                            const fechaInicioRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicioRango_ISO)
                            const fechaFinalRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinalRango_ISO)

                            const selectorEntrada = descuentoUI.querySelector("[calendario=entrada]")
                            const entradaUI = selectorEntrada.querySelector("[fechaUI]")

                            const selectorSalida = descuentoUI.querySelector("[calendario=salida]")
                            const salidaUI = selectorSalida.querySelector("[fechaUI]")

                            selectorEntrada.setAttribute("memoriaVolatil", fechaInicioRango_ISO)
                            selectorSalida.setAttribute("memoriaVolatil", fechaFinalRango_ISO)

                            entradaUI.innerText = fechaInicioRango_humana
                            salidaUI.innerText = fechaFinalRango_humana
                        } else if (tipoCondicion === "porApartamentosEspecificos") {
                            const tipoDeEspecificidad = condicion.tipoDeEspecificidad
                            const apartamentos = condicion.apartamentos
                            const instanciaUID = descuentoUI.querySelector("[instanciaUID]").getAttribute("instanciaUID")
                            const selectorTipoEspeficidad = descuentoUI.querySelector("[campo=tipoDeEspecificidad]")
                            selectorTipoEspeficidad.value = tipoDeEspecificidad

                            for (const contenedorApartamento of apartamentos) {
                                const apartamentoIDV = contenedorApartamento.apartamentoIDV
                                const error = `Configurac√≠on de alojamiento inexistente (${apartamentoIDV})`
                                const configuracionDeAlojamiento = await casaVitini.administracion.componentes.obtenerConfiguracionAlojamiento(apartamentoIDV)
                                const apartamentoUI = configuracionDeAlojamiento?.apartamentoUI || error
                                const infoSinApartamento = descuentoUI.querySelector("[componente=infoSinApartamento]")
                                infoSinApartamento.style.display = "none"

                                const selectorApartamentoUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.apartamentoUI({
                                    apartamentoIDV,
                                    apartamentoUI,
                                    instanciaUID,
                                    tipoDespliegue: "parcial"
                                })
                                const selectorZonaApartamentos = descuentoUI.querySelector("[componente=zonaAnadirApartamento]")


                                selectorZonaApartamentos.appendChild(selectorApartamentoUI)

                            }
                        }
                        contenedorCondiciones.appendChild(descuentoUI)

                    }
                    casaVitini.administracion.gestion_de_ofertas.componenteUI.controlDespliegeContenedorDescuento()

                    const contenedorDescuentos = ofertaUI.querySelector("[contenedor=descuentos]")
                    contenedorDescuentos.style.display = "none"
                    contenedorDescuentos.innerHTML = null

                    const descuentosUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.contenedorDescuento()
                    contenedorDescuentos.appendChild(descuentosUI)


                    const tipoDescuento = descuentosJSON.tipoDescuento

                    const selectorTipoDescuentos = contenedorDescuentos.querySelector("[componente=tipoDescuento]")
                    selectorTipoDescuentos.value = tipoDescuento

                    casaVitini.administracion.gestion_de_ofertas.componenteUI.controladorDescuentos({
                        descuentoIDV: tipoDescuento
                    })

                    if (tipoDescuento === "totalNeto") {
                        const contenedor = contenedorDescuentos.querySelector("[descuentoIDV=totalNeto]")
                        const descuentoTotal = descuentosJSON.descuentoTotal
                        const tipoAplicacion = descuentosJSON.tipoAplicacion

                        const campoTipoDesceunto = contenedor.querySelector("[campoOferta=tipoDescuento]")
                        campoTipoDesceunto.value = tipoAplicacion

                        const campoDescuentoGlobal = contenedor.querySelector("[campoOferta=descuentoGlobal]")
                        campoDescuentoGlobal.value = descuentoTotal

                    } else if (tipoDescuento === "mismoDescuentoParaCadaApartamento") {
                        const contenedor = contenedorDescuentos.querySelector("[descuentoIDV=mismoDescuentoParaCadaApartamento]")
                        const descuentoTotal = descuentosJSON.descuentoTotal
                        const tipoAplicacion = descuentosJSON.tipoAplicacion

                        const campoTipoDesceunto = contenedor.querySelector("[campoOferta=tipoDescuento]")
                        campoTipoDesceunto.value = tipoAplicacion

                        const campoDescuentoGlobal = contenedor.querySelector("[campoOferta=descuentoGlobal]")
                        campoDescuentoGlobal.value = descuentoTotal

                    } else if (tipoDescuento === "individualPorApartamento") {
                        const apartamentos = descuentosJSON.apartamentos

                        const contenedorApartamentos = contenedorDescuentos.querySelector("[descuentoIDV=individualPorApartamento]")
                        const instanciaUID = contenedorApartamentos.getAttribute("instanciaUID")

                        for (const apartamento of apartamentos) {
                            const apartamentoIDV = apartamento.apartamentoIDV
                            const descuentoTotal = apartamento.descuentoTotal
                            const tipoAplicacion = apartamento.tipoAplicacion
                            const error = `Configurac√≠on de alojamiento inexistente (${apartamentoIDV})`
                            const configuracionDeAlojamiento = await casaVitini.administracion.componentes.obtenerConfiguracionAlojamiento(apartamentoIDV)
                            const apartamentoUI = configuracionDeAlojamiento?.apartamentoUI || error
                            const infoSinApartamento = contenedorApartamentos.querySelector("[componente=infoSinApartamento]")
                            infoSinApartamento.style.display = "none"

                            const selectorApartamentoUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.apartamentoUI({
                                apartamentoIDV,
                                apartamentoUI,
                                instanciaUID,
                                tipoDespliegue: "total",
                                seleccionadoInicial: tipoAplicacion,
                                descuentoTotal: descuentoTotal
                            })
                            const selectorZonaApartamentos = contenedorApartamentos.querySelector("[componente=zonaAnadirApartamento]")
                            selectorZonaApartamentos.appendChild(selectorApartamentoUI)
                        }
                    } else if (tipoDescuento === "porRango") {

                        const contenedorPorRango = contenedorDescuentos.querySelector("[descuentoIDV=porRango]")
                        const selectorSubTipo = contenedorPorRango.querySelector("[componente=subTipoDescuento]")

                        const selectorEntrada = contenedorPorRango.querySelector("[calendario=entrada]")
                        const selectorSalida = contenedorPorRango.querySelector("[calendario=salida]")

                        const fechaInicioRango_ISO = descuentosJSON.fechaInicioRango_ISO
                        const fechaFinalRango_ISO = descuentosJSON.fechaFinalRango_ISO

                        const fechaInicioRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicioRango_ISO)
                        const fechaFinalRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinalRango_ISO)

                        const entradaUI = selectorEntrada.querySelector("[fechaUI]")
                        const salidaUI = selectorSalida.querySelector("[fechaUI]")

                        selectorEntrada.setAttribute("memoriaVolatil", fechaInicioRango_ISO)
                        selectorSalida.setAttribute("memoriaVolatil", fechaFinalRango_ISO)

                        entradaUI.innerText = fechaInicioRango_humana
                        salidaUI.innerText = fechaFinalRango_humana

                        const subTipoDescuento = descuentosJSON.subTipoDescuento

                        if (subTipoDescuento === "totalNetoPorRango") {
                            const tipoAplicacion = descuentosJSON.tipoAplicacion
                            const descuentoTotal = descuentosJSON.descuentoTotal

                            selectorSubTipo.value = subTipoDescuento
                            casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.controladorUI({
                                contenedorIDV: subTipoDescuento
                            })

                            const contenedorTotalNetoPorRango = contenedorPorRango.querySelector("[contenedorPorRango=totalNetoPorRango]")
                            const selectorTipoDescuento = contenedorTotalNetoPorRango.querySelector("[campoOferta=tipoDescuento]")
                            selectorTipoDescuento.value = tipoAplicacion

                            const selectorDescuentoGlobal = contenedorTotalNetoPorRango.querySelector("[campoOferta=descuentoGlobal]")
                            selectorDescuentoGlobal.value = descuentoTotal
                        } else if (subTipoDescuento === "porDiasDelRango") {

                            const descuentoPorDias = descuentosJSON.descuentoPorDias
                            const contenedorDias = contenedorPorRango.querySelector("[contenedorPorRango=porDiasDelRango]")
                            contenedorDias.classList.remove("estadoInicialInvisible")
                            contenedorDias.innerHTML = null

                            selectorSubTipo.value = subTipoDescuento

                            for (const detallesDelDia of descuentoPorDias) {
                                const tipoDescuentoDelDia = detallesDelDia.tipoDescuento
                                const fecha = detallesDelDia.fecha

                                const contenedorDia = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.constructorDiaUI({
                                    fecha: fecha
                                })
                                contenedorDias.appendChild(contenedorDia)

                                const selectorContextoAplicacion = contenedorDia.querySelector("[campoOferta=contextoAplicacion]")
                                selectorContextoAplicacion.value = tipoDescuentoDelDia


                                if (tipoDescuentoDelDia === "netoPorDia") {
                                    const descuentoTotal = detallesDelDia.descuentoTotal
                                    const tipoAplicacion = detallesDelDia.tipoAplicacion

                                    const contenedorNetoDelDia = contenedorDia.querySelector("[contenedorDelDia=netoPorDia]")
                                    contenedorNetoDelDia.classList.remove("estadoInicialInvisible")

                                    const campoDescuentoTotal = contenedorNetoDelDia.querySelector("[campoOferta=descuentoGlobal]")
                                    campoDescuentoTotal.value = descuentoTotal

                                    const selectorTipoDescuento = contenedorNetoDelDia.querySelector("[campoOferta=tipoDescuento]")
                                    selectorTipoDescuento.value = tipoAplicacion

                                } else if (tipoDescuentoDelDia === "netoPorApartamentoDelDia") {
                                    const apartamentos = detallesDelDia.apartamentos

                                    const contenedorNetoPorApartamentoDelDia = contenedorDia.querySelector("[contenedorDelDia=netoPorApartamentoDelDia]")
                                    contenedorNetoPorApartamentoDelDia.classList.remove("estadoInicialInvisible")

                                    for (const apartamento of apartamentos) {
                                        const apartamentoIDV = apartamento.apartamentoIDV
                                        const descuentoTotal = apartamento.descuentoTotal
                                        const tipoAplicacion = apartamento.tipoAplicacion
                                        const error = `Configurac√≠on de alojamiento inexistente (${apartamentoIDV})`
                                        const configuracionDeAlojamiento = await casaVitini.administracion.componentes.obtenerConfiguracionAlojamiento(apartamentoIDV)
                                        const apartamentoUI = configuracionDeAlojamiento?.apartamentoUI || error
                                        const infoSinApartamento = contenedorDia.querySelector("[componente=infoSinApartamento]")
                                        infoSinApartamento.style.display = "none"

                                        const selectorApartamentoUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.apartamentoUI({
                                            apartamentoIDV,
                                            apartamentoUI,
                                            instanciaUID: fecha,
                                            tipoDespliegue: "total",
                                            seleccionadoInicial: tipoAplicacion,
                                            descuentoTotal: descuentoTotal
                                        })
                                        const selectorZonaApartamentos = contenedorDia.querySelector("[componente=zonaAnadirApartamento]")
                                        selectorZonaApartamentos.appendChild(selectorApartamentoUI)
                                    }
                                }
                            }
                        }

                        const area = document.querySelector("[contenedor=descuentos] [area=descuentosPorRango]")
                        const contenedorPorDiasDentro = area.querySelector("[contenedorPorRango=porDiasDelRango]")
                        const fechas = casaVitini.utilidades.conversor.extraerFechasInternas(fechaInicioRango_ISO, fechaFinalRango_ISO)

                        for (const fecha of fechas) {
                            const selectorDiaRenderizado = contenedorPorDiasDentro.querySelector(`[instanciaUID="${fecha}"]`)
                            if (!selectorDiaRenderizado) {
                                const contenedorDia = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.constructorDiaUI({
                                    fecha: fecha
                                })
                                contenedorPorDiasDentro.appendChild(contenedorDia)
                            }
                        }

                    }

                    const selectorSpinnerRenderizado = ofertaUI.querySelector("[contenedor=spinner]")
                    selectorSpinnerRenderizado.remove()

                    const selectorCondicionesRenderizado = ofertaUI.querySelector("[contenedor=condiciones]")
                    selectorCondicionesRenderizado.removeAttribute("style")


                    const selectorDescuentosRenderizado = ofertaUI.querySelector("[contenedor=descuentos]")
                    selectorDescuentosRenderizado.removeAttribute("style")

                },

                ofertaModos: async (modo) => {
                    const contenedorBotones = document.querySelector("[componente=espacioCrearOferta] [contenedor=botones]")

                    if (modo === "modoEditar") {
                        contenedorBotones.innerHTML = null
                        const botones = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesDuranteModificacionOferta()
                        contenedorBotones.appendChild(botones)
                        document.querySelector("[componente=soloLecturaInfo]")?.classList.remove("elementoOcultoInicialmente")

                    }
                    if (modo === "modoCancelar") {
                        contenedorBotones.innerHTML = null
                        const botones = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesModificarOferta()
                        contenedorBotones.appendChild(botones)

                        document.querySelector("[componente=soloLecturaInfo]")?.classList.remove("elementoOcultoInicialmente")
                    }
                },
                estadoOferta: async (estadoOferta) => {
                    const ofertaUID = document.querySelector("[ofertaUID]")?.getAttribute("ofertaUID")
                    if (!ofertaUID) {
                        const error = "No se puede cambiar el estado de esta oferta porque no tiene un identificador √∫nico de oferta (ofertaUID).Esto puede deberse a que a√∫n no has creado la oferta o que la has borrado.Si est√°s creando una oferta, por favor aseg√∫rate de crearla pulsando el bot√≥n 'Crear oferta' antes de activarla."
                        casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }
                    const selectorEstadoOfertaUI = document.querySelector("[estadoOferta]")


                    const estadoActualMemoriaVolatil = selectorEstadoOfertaUI.innerText
                    selectorEstadoOfertaUI.innerText = "Esperando al servidor...."
                    const estadoOfertaActual = estadoOferta.target.getAttribute("estadoOferta")
                    let estadoOfertaPropuesto
                    if (estadoOfertaActual === "desactivado") {
                        estadoOfertaPropuesto = "activado"
                    }
                    if (estadoOfertaActual === "activado") {
                        estadoOfertaPropuesto = "desactivado"
                    }
                    const transaccion = {
                        zona: "administracion/ofertas/actualizarEstadoOferta",
                        ofertaUID: String(ofertaUID),
                        estadoIDV: estadoOfertaPropuesto
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        document.querySelector("[estadoOferta]").innerText = estadoActualMemoriaVolatil
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const estadoIDV = respuestaServidor?.estadoIDV
                        selectorEstadoOfertaUI.setAttribute("estadoOferta", estadoIDV)
                        let estadoOfertaUI
                        if (estadoIDV === "activado") {
                            selectorEstadoOfertaUI.style.background = "#00ff006e"
                            estadoOfertaUI = "Oferta activada"
                        }
                        if (estadoIDV === "desactivado") {
                            selectorEstadoOfertaUI.style.background = "#ff000091"
                            estadoOfertaUI = "Oferta desactivada"
                        }
                        selectorEstadoOfertaUI.innerText = estadoOfertaUI
                    }
                },
                guardarCambiosOferta: async function () {
                    const instanciaUID_pantallaEspera = casaVitini.utilidades.codigoFechaInstancia()
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    const ofertaUID = main.querySelector("[componente=espacioOfertas]").getAttribute("ofertaUID")

                    const mensaje = "Actualizando oferta..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID_pantallaEspera,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const oferta = casaVitini.administracion.gestion_de_ofertas.utilidades.constructorObjeto()

                    const transaccion = {
                        zona: "administracion/ofertas/actualizarOferta",
                        ofertaUID: String(ofertaUID),
                        ...oferta
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    document.querySelector(`[instanciaUID="${instanciaUID_pantallaEspera}"]`)?.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const ofertaActualizada = respuestaServidor.ofertaActualizada

                        const espacioOfertasGlobal = document.querySelector("[componente=espacioOfertas]")
                        espacioOfertasGlobal.setAttribute("instantanea", JSON.stringify(ofertaActualizada))

                        await casaVitini.administracion.gestion_de_ofertas.detallesOferta.aplicaData({
                            oferta: ofertaActualizada,
                            instanciaUID_destino: instanciaUID
                        })
                    }
                },
                eliminarOferta: {
                    UI: async () => {

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.innerText = "Confirmar eliminar oferta"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.innerText = "Var a eliminar la oferta y su aplicacion sera inmediata en los precios, ¬øEstas de acuerdo ? "

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.innerText = "Comfirmar la eliminacion"
                        botonAceptar.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.eliminarOferta.confirmar)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.innerText = "Cancelar la eliminacion"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    confirmar: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Eliminado el oferta..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const ofertaUID = document.querySelector("[ofertaUID]").getAttribute("ofertaUID")
                        const transaccion = {
                            zona: "administracion/ofertas/eliminarOferta",
                            ofertaUID: String(ofertaUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vista = `/administracion/gestion_de_ofertas`
                            const navegacion = {
                                vista: vista,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                }
            },
            traductorCambioVista: (oferta) => {
                oferta.preventDefault()
                oferta.stopPropagation()
                const vista = oferta.target.closest("[vista]").getAttribute("vista")
                const entrada = {
                    vista: vista,
                    tipoOrigen: "menuNavegador"
                }
                casaVitini.shell.navegacion.controladorVista(entrada)
            },
            detalleUI: (modoUI) => {
                const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()
                const divPrincipal = document.createElement("div");
                divPrincipal.setAttribute("componente", "espacioCrearOferta");
                divPrincipal.classList.add("espacioClientes");

                const divContenedorNombreYEstado = document.createElement("div");

                if (modoUI === "editarOferta") {
                    divContenedorNombreYEstado.classList.add("crearOfertaContenedorHorizontalV2");

                    const botonEstadoOferta = document.createElement("div")
                    botonEstadoOferta.classList.add("creatOfertaBotonEstado")
                    botonEstadoOferta.setAttribute("componente", "estadoOferta")
                    botonEstadoOferta.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.estadoOferta)
                    botonEstadoOferta.innerText = "Oferta desactivada"
                    divContenedorNombreYEstado.appendChild(botonEstadoOferta)

                }
                if (modoUI === "crearOferta") {
                    divContenedorNombreYEstado.classList.add("crearOfertaContenedorHorizontalModoCrear");
                }
                //Crear el input
                const input = document.createElement("input");
                input.setAttribute("type", "text");
                input.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                input.setAttribute("campoOferta", "nombreOferta");
                input.setAttribute("placeholder", "Escriba un nombre a esta oferta, el nombre sera publico");
                divContenedorNombreYEstado.appendChild(input)
                divPrincipal.appendChild(divContenedorNombreYEstado)
                //Crear el div contenedor

                const titulo = document.createElement("p");
                titulo.classList.add("crearOfertaTituloOpcion");
                titulo.textContent = "Selecciona el rango de fechas de vigencia de la oferta.Este rango determina el inicio y el final de la vigencia de la oferta.Cuando se realiza una reserva, se determina si, en el momento de hacer una reserva, con la fecha de creaci√≥n, esta, la reserva, puede acceder a la oferta.";
                divPrincipal.appendChild(titulo);

                const divContenedor = document.createElement("div");
                divContenedor.classList.add("administracion_ofertas_crearOfertas_contenedorFecha");
                divContenedor.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                //Crear el primer div contenedor horizontal
                const divContenedorHorizontal = document.createElement("div");
                divContenedorHorizontal.classList.add("crearOfertaContenedorHorizontal");
                //Crear el div contenedor de fecha de inicio
                const divContenedorFechaInicio = document.createElement("div");
                divContenedorFechaInicio.classList.add("contenedorFecha");
                divContenedorFechaInicio.setAttribute("calendario", "entrada");
                divContenedorFechaInicio.setAttribute("componente", "inicioOferta");
                divContenedorFechaInicio.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                divContenedorFechaInicio.addEventListener("click", async () => {
                    await casaVitini.ui.componentes.calendario.configurarCalendario({
                        perfilMes: "calendario_entrada_perfilSimple",
                        contenedorOrigenIDV: "[calendario=entrada]",
                        instanciaUID_contenedorFechas,
                        rangoIDV: "inicioRango",
                        metodoSelectorDia: null,
                        tituloCalendario: "Selecciona la fecha de inicio del rango de vigencia de la oferta"
                    })
                })

                //Crear el p√°rrafo de la fecha de inicio
                const pFechaInicio = document.createElement("p");
                pFechaInicio.classList.add("tituloFecha");
                pFechaInicio.textContent = "Fecha de inicio";
                //Crear el p√°rrafo de la fecha de inicio seleccionada
                const pFechaInicioSeleccionada = document.createElement("p");
                pFechaInicioSeleccionada.classList.add("fechaInicio");
                pFechaInicioSeleccionada.setAttribute("fechaUI", "fechaInicio");
                pFechaInicioSeleccionada.textContent = "(Seleccionar)";
                //Agregar los elementos al div contenedor de fecha de inicio
                divContenedorFechaInicio.appendChild(pFechaInicio);
                divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);
                //Crear el div contenedor de fecha de fin
                const divContenedorFechaFin = document.createElement("div");
                divContenedorFechaFin.classList.add("contenedorFecha");
                divContenedorFechaFin.setAttribute("calendario", "salida");
                divContenedorFechaFin.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                divContenedorFechaFin.setAttribute("componente", "finOferta");

                divContenedorFechaFin.addEventListener("click", async () => {
                    await casaVitini.ui.componentes.calendario.configurarCalendario({
                        perfilMes: "calendario_salida_perfilSimple",
                        contenedorOrigenIDV: "[calendario=salida]",
                        instanciaUID_contenedorFechas,
                        rangoIDV: "finalRango",
                        metodoSelectorDia: null,
                        tituloCalendario: "Selecciona la fecha del fin del rango de vigencia de la oferta"

                    })
                })
                const contenedorZonaOferta = document.createElement("div")
                contenedorZonaOferta.classList.add("contenedorZonaOferta")

                const selectorZonaOferta = document.createElement("select")
                selectorZonaOferta.classList.add(
                    "selector",
                    "textCentrado"
                )
                selectorZonaOferta.setAttribute("campo", "zonaIDV")
                const opcionPredeterminada = document.createElement("option")
                opcionPredeterminada.selected = true
                opcionPredeterminada.disabled = true;
                opcionPredeterminada.value = "no"
                opcionPredeterminada.text = "Zona de la oferta"
                selectorZonaOferta.appendChild(opcionPredeterminada)
                const opciones = [
                    { value: "publica", text: "Zona publica" },
                    { value: "global", text: "Zona global" },
                    { value: "privada", text: "Zona privada" }
                ]
                for (const opcionData of opciones) {
                    const opcion = document.createElement("option");
                    opcion.value = opcionData.value;
                    opcion.text = opcionData.text;
                    selectorZonaOferta.appendChild(opcion);
                }
                contenedorZonaOferta.appendChild(selectorZonaOferta)

                //Crear el p√°rrafo de la fecha de fin
                const pFechaFin = document.createElement("p");
                pFechaFin.classList.add("tituloFecha");
                pFechaFin.textContent = "Fecha fin";
                //Crear el p√°rrafo de la fecha de fin seleccionada
                const pFechaFinSeleccionada = document.createElement("p");
                pFechaFinSeleccionada.classList.add("fechaFin");
                pFechaFinSeleccionada.setAttribute("fechaUI", "fechaFin");
                pFechaFinSeleccionada.textContent = "(Seleccionar)";
                //Agregar los elementos al div contenedor de fecha de fin
                divContenedorFechaFin.appendChild(pFechaFin);
                divContenedorFechaFin.appendChild(pFechaFinSeleccionada);
                //Agregar los elementos al primer div contenedor horizontal
                divContenedorHorizontal.appendChild(divContenedorFechaInicio);
                divContenedorHorizontal.appendChild(contenedorZonaOferta);
                divContenedorHorizontal.appendChild(divContenedorFechaFin);
                //Agregar el primer div contenedor horizontal al div contenedor
                divContenedor.appendChild(divContenedorHorizontal);
                //Agregar el div contenedor al div principal
                divPrincipal.appendChild(divContenedor);
                //Crear el segundo div contenedor

                const botonAnadirCondicion = document.createElement("div")
                botonAnadirCondicion.classList.add("botonV1")
                botonAnadirCondicion.setAttribute("boton", "anadirCondicion")
                if (modoUI === "editarOferta") {
                    botonAnadirCondicion.style.display = "none"
                }
                botonAnadirCondicion.innerText = "A√±adir condici√≥n"
                botonAnadirCondicion.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.componenteUI.selectorTipoOferta)
                divPrincipal.appendChild(botonAnadirCondicion)

                const contonenedorPropiedades = document.createElement("div")
                contonenedorPropiedades.setAttribute("contenedor", "superBloque")
                contonenedorPropiedades.classList.add(
                    "flexVertical",
                    "gap6"
                )
                divPrincipal.appendChild(contonenedorPropiedades)

                const contenedorCondiciones = document.createElement("div")
                contenedorCondiciones.setAttribute("contenedor", "condiciones")
                contenedorCondiciones.classList.add("contenedorCondiciones")
                contonenedorPropiedades.appendChild(contenedorCondiciones)

                const infoCondiciones = document.createElement("div")
                infoCondiciones.setAttribute("info", "condiciones")
                infoCondiciones.classList.add(
                    "textoCentrado",
                    "padding10"
                )
                infoCondiciones.innerText = "Inserta condiciones a esta oferta."
                contenedorCondiciones.appendChild(infoCondiciones)

                const contenedorDescuentos = document.createElement("div")
                contenedorDescuentos.setAttribute("contenedor", "descuentos")
                contonenedorPropiedades.appendChild(contenedorDescuentos)

                const descuentosUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.contenedorDescuento()
                contenedorDescuentos.appendChild(descuentosUI)

                return divPrincipal
            },
            componenteUI: {
                botonesCrearOferta: () => {
                    const pBotonCrearOferta_O1 = document.createElement("p");
                    pBotonCrearOferta_O1.classList.add("botonV1");
                    pBotonCrearOferta_O1.textContent = "Crear oferta";
                    pBotonCrearOferta_O1.setAttribute("componente", "botonCrearOferta");
                    pBotonCrearOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.crearOfertaConfirmar)
                    return pBotonCrearOferta_O1
                },
                botonesModificarOferta: () => {
                    const botonModificarOferta = document.createElement("div")
                    botonModificarOferta.classList.add("botonV1");
                    botonModificarOferta.setAttribute("componente", "botonEditarOferta");
                    botonModificarOferta.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    botonModificarOferta.addEventListener("click", () => {
                        casaVitini.administracion.gestion_de_ofertas.detallesOferta.ofertaModos("modoEditar")
                    })
                    botonModificarOferta.textContent = "Modificar oferta";
                    return botonModificarOferta
                },
                botonesDuranteModificacionOferta: function () {
                    const divBotones_O1 = document.createElement("div");
                    divBotones_O1.classList.add("crearOfertaEpacioBotones");
                    divBotones_O1.setAttribute("componente", "espacioBotones")

                    const pBotonGuardarOferta_O1 = document.createElement("div")
                    pBotonGuardarOferta_O1.classList.add("botonV1");
                    pBotonGuardarOferta_O1.setAttribute("componente", "botonGuardarCambios");
                    pBotonGuardarOferta_O1.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    pBotonGuardarOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.guardarCambiosOferta)
                    pBotonGuardarOferta_O1.textContent = "Actualizar oferta";

                    const pBotonCancelarCambiosOferta_O1 = document.createElement("p");
                    pBotonCancelarCambiosOferta_O1.classList.add("botonV1");
                    pBotonCancelarCambiosOferta_O1.setAttribute("componente", "botonCancelarCambios");
                    pBotonCancelarCambiosOferta_O1.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    pBotonCancelarCambiosOferta_O1.addEventListener("click", async () => {
                        const selectorInstantena = document.querySelector("[instantanea]").getAttribute("instantanea")
                        const instantanea = JSON.parse(selectorInstantena)
                        const instanciaUID_destino = document.querySelector(`main[instanciaUID]`).getAttribute("instanciaUID")
                        await casaVitini.administracion.gestion_de_ofertas.detallesOferta.aplicaData({
                            oferta: instantanea,
                            instanciaUID_destino: instanciaUID_destino,
                            modo: "resversion"
                        })
                    })
                    pBotonCancelarCambiosOferta_O1.textContent = "Revertir cambios";

                    const pBotonEliminarOferta_O1 = document.createElement("p");
                    pBotonEliminarOferta_O1.classList.add("botonV1");
                    pBotonEliminarOferta_O1.setAttribute("componente", "botonEliminarOferta");
                    pBotonEliminarOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.eliminarOferta.UI)
                    pBotonEliminarOferta_O1.textContent = "Eliminar oferta";
                    divBotones_O1.appendChild(pBotonGuardarOferta_O1);
                    divBotones_O1.appendChild(pBotonCancelarCambiosOferta_O1);
                    divBotones_O1.appendChild(pBotonEliminarOferta_O1);
                    return divBotones_O1
                },
                contenedorDescuento: function () {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                    const contenedorDescuentos = document.createElement("div");
                    contenedorDescuentos.classList.add("contenedorDescuento");
                    contenedorDescuentos.setAttribute("contenedorDescuento", instanciaUID)
                    contenedorDescuentos.setAttribute("instanciaUID", instanciaUID)

                    //Crear el p√°rrafo dentro del tercer div interno
                    const titulo = document.createElement("p");
                    titulo.classList.add("crearOfertaTituloOpcion");
                    titulo.textContent =
                        "Determina d√≥nde se aplica el descuento de esta oferta. Este tipo de oferta que has seleccionado se basa en los apartamentos concretos que tiene que escoger el cliente. Es por eso que, aparte de la opci√≥n de descuento al neto de la reserva, puedes establecer descuentos individuales por apartamento dedicado.";
                    contenedorDescuentos.appendChild(titulo);

                    //Crear el select dentro del tercer div interno
                    const selectorDescuento = document.createElement("select");
                    selectorDescuento.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                    selectorDescuento.setAttribute("campoOferta", "contextoAplicacion");
                    selectorDescuento.setAttribute("componente", "tipoDescuento");
                    selectorDescuento.addEventListener("change", (e) => {
                        const descuentoIDV = e.target.value
                        this.controladorDescuentos({
                            descuentoIDV
                        })
                    })

                    const opcionesSelector = [{
                        nombre: "¬øDonde se aplica el descuento de esta oferta?",
                        inicial: "si",
                    },
                    {
                        nombre: "Aplicaci√≥n del descuento a cualquier apartamento de la reserva de manera individual.",
                        descuentoIDV: "mismoDescuentoParaCadaApartamento",
                    },
                    {
                        nombre: "Aplicaci√≥n al neto de la reserva.",
                        descuentoIDV: "totalNeto",
                    },
                    {
                        nombre: "Aplicaci√≥n a los d√≠as dentro de un rango.",
                        descuentoIDV: "porRango",
                    },
                    {
                        nombre: "Aplicaci√≥n individual por apartamento.",
                        descuentoIDV: "individualPorApartamento",
                    },]


                    for (const opcion of opcionesSelector) {

                        const nombre = opcion.nombre
                        const inicial = opcion.inicial
                        const descuentoIDV = opcion.descuentoIDV

                        const opcionUI = document.createElement("option")
                        if (inicial === "si") {
                            opcionUI.selected = true;
                            opcionUI.disabled = true;
                        } else {
                            opcionUI.value = descuentoIDV
                        }
                        opcionUI.textContent = nombre

                        selectorDescuento.appendChild(opcionUI)
                    }
                    contenedorDescuentos.appendChild(selectorDescuento)
                    const descuentoIndividualPorApartmento = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.individualPorApartamento()
                    contenedorDescuentos.appendChild(descuentoIndividualPorApartmento)
                    const descuentoTotalNeto = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.totalNeto()
                    contenedorDescuentos.appendChild(descuentoTotalNeto)
                    const mismoDescuentoParaCadaApartamento = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.mismoDescuentoParaCadaApartamento()
                    contenedorDescuentos.appendChild(mismoDescuentoParaCadaApartamento)
                    const descuentoPorRango = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.arranque()
                    contenedorDescuentos.appendChild(descuentoPorRango)

                    return contenedorDescuentos

                },
                contenedorSelectorApartamentosEspecificos: () => {
                    //Crear el elemento div principal
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const porApartamentoDedicado = document.createElement("div");
                    porApartamentoDedicado.classList.add("contenedorDescuento");
                    porApartamentoDedicado.setAttribute("instanciaUID", instanciaUID)

                    const divCrearOfertaEspacioOpciones_3 = document.createElement("div");
                    divCrearOfertaEspacioOpciones_3.classList.add("crearOfeartaEspacioOpciones");

                    const divCrearOfertaConentenedor4_3 = document.createElement("div");
                    divCrearOfertaConentenedor4_3.setAttribute("controladorDesliegue", "descuentosDedicados");
                    divCrearOfertaConentenedor4_3.setAttribute("parteOferta", "descuentosDedicados");


                    const contenedorSelectorApartamentos = document.createElement("div");
                    contenedorSelectorApartamentos.classList.add("crearOfertaConentenedor");
                    contenedorSelectorApartamentos.setAttribute("parteOferta", "apartamentosDedicados");

                    const pCrearOFertaBotonAnadirApartamento_3 = document.createElement("p");
                    pCrearOFertaBotonAnadirApartamento_3.classList.add("crearOFertaBotonAnadirApartamento");
                    pCrearOFertaBotonAnadirApartamento_3.setAttribute("componente", "botonAnadirApartamentoOferta");
                    pCrearOFertaBotonAnadirApartamento_3.textContent = "A√±adir apartamento";
                    pCrearOFertaBotonAnadirApartamento_3.addEventListener("click", (e) => {
                        const data = {
                            e: e,
                            instanciaUID: instanciaUID,
                        }
                        casaVitini.administracion.gestion_de_ofertas.crearOferta.apartamentosDisponibles(data)
                    })
                    contenedorSelectorApartamentos.appendChild(pCrearOFertaBotonAnadirApartamento_3);



                    const divCrearOfertaZonaAnadirApartamento_3 = document.createElement("div");
                    divCrearOfertaZonaAnadirApartamento_3.classList.add("crearOfertaZonaAnadirApartamento");
                    divCrearOfertaZonaAnadirApartamento_3.setAttribute("componente", "zonaAnadirApartamento");

                    const pCrearApartamentoInfoSinApartamento_3 = document.createElement("p");
                    pCrearApartamentoInfoSinApartamento_3.classList.add("crearApartamentoInfoSinApartamento");
                    pCrearApartamentoInfoSinApartamento_3.setAttribute("componente", "infoSinApartamento");
                    pCrearApartamentoInfoSinApartamento_3.textContent =
                        "A√±ade apartamentos a esta condici√≥n para determinar que apartamentos en concreto tienen que estar en una reserva para acceder a esta oferta";
                    divCrearOfertaZonaAnadirApartamento_3.appendChild(pCrearApartamentoInfoSinApartamento_3);
                    contenedorSelectorApartamentos.appendChild(divCrearOfertaZonaAnadirApartamento_3);
                    divCrearOfertaConentenedor4_3.appendChild(contenedorSelectorApartamentos);

                    divCrearOfertaEspacioOpciones_3.appendChild(divCrearOfertaConentenedor4_3);
                    porApartamentoDedicado.appendChild(divCrearOfertaEspacioOpciones_3);

                    return porApartamentoDedicado

                },
                selectorTipoOferta: () => {

                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                    const constructor = pantallaInmersiva.querySelector("[componente=contenedor]")
                    const destino = pantallaInmersiva.querySelector("[destino=inyector]")

                    const tituloUI = document.createElement("p")
                    tituloUI.classList.add("tituloGris")
                    tituloUI.setAttribute("componente", "titulo")
                    tituloUI.innerText = "A√±adir condici√≥n"
                    constructor.appendChild(tituloUI)




                    const divContenedorHorizontalTipoOfertas = document.createElement("div");
                    divContenedorHorizontalTipoOfertas.classList.add("crearOfertaContenedorHorizontalTipoOfertas");
                    //Crear las opciones de tipo de oferta

                    const infoReservas = document.createElement("p")
                    infoReservas.classList.add(
                        "negrita",
                        "padding6"
                    )
                    infoReservas.setAttribute("componente", "titulo")
                    infoReservas.innerText = "Condiciones para reservas"
                    constructor.appendChild(infoReservas)



                    const divContenedorTipoOfertas = document.createElement("div");
                    divContenedorTipoOfertas.classList.add("crearOfertaConentenedor");
                    destino.appendChild(divContenedorTipoOfertas);
                    divContenedorTipoOfertas.appendChild(divContenedorHorizontalTipoOfertas);

                    //Crear el p√°rrafo del t√≠tulo de tipo de oferta
                    const opcionesTipoOferta = [
                        {
                            tipo: "conFechaEntradaEntreRango",
                            titulo: "Con fecha de entrada entre rango.",
                            descripcion: "Aplicar esta oferta cuando la fecha de entrada de una reserva est√° dentro de un rango de fechas."
                        },
                        {
                            tipo: "conFechaCreacionEntreRango",
                            titulo: "Con fecha de creaci√≥n entre rango.",
                            descripcion: "Aplicar esta oferta cuando la fecha de creaci√≥n de una reserva est√° dentro del rango de vigencia de la oferta."
                        },
                        {
                            tipo: "porNumeroDeApartamentos",
                            titulo: "Por n√∫mero de apartamentos ",
                            descripcion: "Aplicar oferta cuando una reserva cumple con el n√∫mero de apartamentos requeridos por este tipo de condici√≥n."
                        },
                        {
                            tipo: "porApartamentosEspecificos",
                            titulo: "Por apartamentos espec√≠ficos ",
                            descripcion: "Aplicar oferta cuando una reserva contiene los apartamentos en espec√≠fico que requiere esta condici√≥n."
                        },
                        {
                            tipo: "porDiasDeAntelacion",
                            titulo: "Por d√≠as de antelaci√≥n ",
                            descripcion: "Aplicar oferta cuando una reserva cumple con el requisito de los d√≠as de antelaci√≥n que requiere la condici√≥n."
                        },
                        {
                            tipo: "porDiasDeReserva",
                            titulo: "Por d√≠as de la reserva",
                            descripcion: "Aplicar oferta cuando una reserva cumple con los requisitos de d√≠as de duraci√≥n que requiere la condici√≥n."
                        },
                        {
                            tipo: "porRangoDeFechas",
                            titulo: "Por rango de fechas de la reserva",
                            descripcion: "Aplicar esta oferta cuando se realiza una reserva cuyo rango determinado por la fecha de entrada y la fecha de salida se cruza con el rango de duraci√≥n determinado en esta condici√≥n."
                        }, {
                            tipo: "porCodigoDescuento",
                            titulo: "Por c√≥digo de descuento",
                            descripcion: "Aplicar esta oferta a la reserva que inserte un c√≥digo de descuento."
                        }
                    ];
                    //Crear las opciones de tipo de oferta y agregarlos al div contenedor horizontal de tipo de ofertas
                    for (const opcion of opcionesTipoOferta) {
                        const tipoOferta = opcion.tipo
                        const divOpcionTipoOferta = document.createElement("div");
                        divOpcionTipoOferta.classList.add("opcionTipoOFerta");
                        divOpcionTipoOferta.setAttribute("tipoOferta", tipoOferta);
                        divOpcionTipoOferta.addEventListener("click", () => {
                            const espacioCrearOferta = document.querySelector("[componente=espacioCrearOferta] [contenedor=condiciones]")
                            const ofertaUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.condicionesUI[tipoOferta]()
                            espacioCrearOferta.appendChild(ofertaUI)
                            casaVitini.administracion.gestion_de_ofertas.componenteUI.controlDespliegeContenedorDescuento()
                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        })
                        const pTituloTipoOferta = document.createElement("p");
                        pTituloTipoOferta.classList.add("crearOfertaTituloTipoOferta");
                        pTituloTipoOferta.textContent = opcion.titulo;
                        divContenedorTipoOfertas.appendChild(pTituloTipoOferta);

                        const pDescripcionTipoOferta = document.createElement("p");
                        pDescripcionTipoOferta.classList.add("crearOfertaDescripcionTipoOferta");
                        pDescripcionTipoOferta.textContent = opcion.descripcion;
                        divOpcionTipoOferta.appendChild(pTituloTipoOferta);
                        divOpcionTipoOferta.appendChild(pDescripcionTipoOferta);
                        divContenedorHorizontalTipoOfertas.appendChild(divOpcionTipoOferta);
                    }

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("boton")
                    botonCancelar.innerText = "Cerrar y volver al a edici√≥n de la oferta"
                    botonCancelar.setAttribute("boton", "cancelar")
                    botonCancelar.addEventListener("click", () => {
                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    })
                    constructor.appendChild(botonCancelar)
                    document.querySelector("main").appendChild(pantallaInmersiva)
                },
                eliminarContenedorCondicion: (tipoCondicion) => {
                    tipoCondicion.target.closest("[zonaOferta]").remove()
                    return casaVitini.administracion.gestion_de_ofertas.componenteUI.controlDespliegeContenedorDescuento()
                },
                controlDespliegeContenedorDescuento: () => {
                    const contenedorCondiciones = document.querySelector("[componente=espacioCrearOferta] [contenedor=condiciones]")
                    const contenedorDescuentos = document.querySelector("[componente=espacioCrearOferta] [contenedor=descuentos]")
                    const ofertasRenderizadas = contenedorCondiciones.querySelectorAll("[zonaOferta]")
                    const selectorContenedorInfoCondiciones = contenedorCondiciones.querySelector("[info=condiciones]")
                    if (ofertasRenderizadas.length > 0) {
                        selectorContenedorInfoCondiciones.style.display = "none"
                    } else {
                        selectorContenedorInfoCondiciones.removeAttribute("style")
                    }
                },
                condicionesUI: {
                    botonEliminarCondicion: () => {
                        const botonBorrarCondicion = document.createElement("p")
                        botonBorrarCondicion.classList.add("botonV1")
                        botonBorrarCondicion.setAttribute("componente", "titulo")
                        botonBorrarCondicion.innerText = "Eliminar condici√≥n"
                        botonBorrarCondicion.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.componenteUI.eliminarContenedorCondicion)
                        return botonBorrarCondicion
                    },
                    porNumeroDeApartamentos: function () {
                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "porNumeroDeApartamentos");

                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)

                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)


                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por n√∫mero de apartamentos";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar oferta cuando una reserva cumple con el n√∫mero de apartamentos requeridos por este tipo de condici√≥n.";
                        contenedor.appendChild(descripcionCondicion);


                        //Crear el select para el tipo de descuento
                        const seleccionaTipoNumero = document.createElement("select");
                        seleccionaTipoNumero.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        seleccionaTipoNumero.setAttribute("campoOferta", "tipoConteo");
                        //Crear las opciones del select
                        const optionO1 = document.createElement("option");
                        optionO1.selected = true;
                        optionO1.disabled = true;
                        optionO1.setAttribute("value", "");
                        optionO1.textContent = "Selecciona si a partir de o un n√∫mero exacto de apartamentos.";
                        const optionO2 = document.createElement("option");
                        optionO2.value = "numeroExacto";
                        optionO2.textContent = "Con un n√∫mero exacto de apartamentos.";
                        const opcion03 = document.createElement("option");
                        opcion03.value = "hastaUnNumeroExacto";
                        opcion03.textContent = "Hasta un n√∫mero exacto de apartamentos.";
                        const opcion04 = document.createElement("option");
                        opcion04.value = "aPartirDe";
                        opcion04.textContent = "A partir de un n√∫mero exacto de apartamentos.";
                        seleccionaTipoNumero.appendChild(optionO1);
                        seleccionaTipoNumero.appendChild(optionO2);
                        seleccionaTipoNumero.appendChild(opcion03)
                        seleccionaTipoNumero.appendChild(opcion04)
                        contenedor.appendChild(seleccionaTipoNumero);

                        //Crear el input para el n√∫mero de apartamentos
                        const inputNumeroApartamentos_O1 = document.createElement("input");
                        inputNumeroApartamentos_O1.setAttribute("type", "text");
                        inputNumeroApartamentos_O1.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        inputNumeroApartamentos_O1.placeholder = "0";
                        inputNumeroApartamentos_O1.setAttribute("campoOferta", "numeroDeApartamentos");
                        contenedor.appendChild(inputNumeroApartamentos_O1);
                        //Agregar el t√≠tulo y el input al primer contenedor
                        return contenedor
                    },
                    porCodigoDescuento: function () {
                        //Crear el elemento div principal
                        const contenedor = document.createElement("div");
                        contenedor.classList.add("contenedorCondicion");
                        contenedor.setAttribute("zonaOferta", "porCodigoDescuento");


                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)


                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)


                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por c√≥digo de descuento";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar esta oferta a la reserva que inserte un c√≥digo de descuento.";
                        contenedor.appendChild(descripcionCondicion);


                        const campoCodigo = document.createElement("input")
                        campoCodigo.setAttribute("campo", "codigoDescuento")
                        campoCodigo.classList.add("campoTextoSimple")
                        campoCodigo.placeholder = "Escribe el c√≥digo"
                        contenedor.appendChild(campoCodigo)

                        return contenedor
                    },
                    porDiasDeAntelacion: function () {
                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "porDiasDeAntelacion");
                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)


                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        //Crear el elemento div para el espacio de opciones
                        const divEspacioOpciones_O1 = document.createElement("div");
                        divEspacioOpciones_O1.classList.add("crearOfeartaEspacioOpciones");
                        //Crear el primer contenedor de opciones
                        const divContenedor1_O1 = document.createElement("div");
                        divContenedor1_O1.classList.add("crearOfertaConentenedor");

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por d√≠as de antelaci√≥n";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar oferta cuando una reserva cumple con el requisito de los d√≠as de antelaci√≥n que requiere la condici√≥n.";
                        contenedor.appendChild(descripcionCondicion);

                        //Crear el select para el tipo de descuento
                        const seleccionaTipoNumero = document.createElement("select");
                        seleccionaTipoNumero.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        seleccionaTipoNumero.setAttribute("campoOferta", "tipoConteo");
                        //Crear las opciones del select
                        const optionO1 = document.createElement("option");
                        optionO1.selected = true;
                        optionO1.disabled = true;
                        optionO1.setAttribute("value", "");
                        optionO1.textContent = "Selecciona si a partir de o un n√∫mero exacto de d√≠as.";
                        const optionO2 = document.createElement("option");
                        optionO2.value = "numeroExacto";
                        optionO2.textContent = "Con un n√∫mero exacto de d√≠as de antelaci√≥n.";
                        const opcion03 = document.createElement("option");
                        opcion03.value = "aPartirDe";
                        opcion03.textContent = "A partir de un n√∫mero exacto de d√≠as de antelaci√≥n.";
                        const opcion04 = document.createElement("option");
                        opcion04.value = "hastaUnNumeroExacto";
                        opcion04.textContent = "Hasta un n√∫mero exacto de d√≠as de antelaci√≥n.";
                        seleccionaTipoNumero.appendChild(optionO1);
                        seleccionaTipoNumero.appendChild(optionO2);
                        seleccionaTipoNumero.appendChild(opcion03);
                        seleccionaTipoNumero.appendChild(opcion04);
                        divContenedor1_O1.appendChild(seleccionaTipoNumero);

                        //Crear el input para el n√∫mero de apartamentos
                        const inputNumeroApartamentos_O1 = document.createElement("input");
                        inputNumeroApartamentos_O1.setAttribute("type", "text");
                        inputNumeroApartamentos_O1.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        inputNumeroApartamentos_O1.placeholder = "Determina el n√∫mero de d√≠as de antelaci√≥n.";
                        inputNumeroApartamentos_O1.setAttribute("campoOferta", "numeroDeDias");
                        //Agregar el t√≠tulo y el input al primer contenedor
                        divContenedor1_O1.appendChild(inputNumeroApartamentos_O1);



                        //Agregar los contenedores de opciones al espacio de opciones
                        divEspacioOpciones_O1.appendChild(divContenedor1_O1);
                        contenedor.appendChild(divEspacioOpciones_O1);


                        return contenedor
                    },
                    porDiasDeReserva: function () {
                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "porDiasDeReserva");
                        contenedor.classList.add("contenedorCondicion");



                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)



                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        //Crear el elemento div para el espacio de opciones
                        const divEspacioOpciones_O1 = document.createElement("div");
                        divEspacioOpciones_O1.classList.add("crearOfeartaEspacioOpciones");
                        //Crear el primer contenedor de opciones
                        const divContenedor1_O1 = document.createElement("div");
                        divContenedor1_O1.classList.add("crearOfertaConentenedor");
                        //Crear el elemento p para el t√≠tulo de la primera opci√≥n

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por d√≠as de la reserva";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar oferta cuando una reserva cumple con los requisitos de d√≠as de duraci√≥n que requiere la condici√≥n.";
                        contenedor.appendChild(descripcionCondicion);

                        //Crear el select para el tipo de descuento
                        const seleccionaTipoNumero = document.createElement("select");
                        seleccionaTipoNumero.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        seleccionaTipoNumero.setAttribute("campoOferta", "tipoConteo");
                        //Crear las opciones del select
                        const optionO1 = document.createElement("option");
                        optionO1.selected = true;
                        optionO1.disabled = true;
                        optionO1.setAttribute("value", "");
                        optionO1.textContent = "Selecciona si a partir de o un n√∫mero exacto de d√≠as con noche.";
                        const optionO2 = document.createElement("option");
                        optionO2.value = "numeroExacto";
                        optionO2.textContent = "Con un n√∫mero exacto de d√≠as con noche de la reserva.";
                        const opcion03 = document.createElement("option");
                        opcion03.value = "aPartirDe";
                        opcion03.textContent = "AA partir de un n√∫mero exacto de d√≠as con noche de la reserva.";
                        const opcion04 = document.createElement("option");
                        opcion04.value = "hastaUnNumeroExacto";
                        opcion04.textContent = "Hasta un n√∫mero exacto de d√≠as con noche de la reserva.";
                        seleccionaTipoNumero.appendChild(optionO1);
                        seleccionaTipoNumero.appendChild(optionO2);
                        seleccionaTipoNumero.appendChild(opcion03);
                        seleccionaTipoNumero.appendChild(opcion04);
                        divEspacioOpciones_O1.appendChild(divContenedor1_O1);

                        //Crear el input para el n√∫mero de apartamentos
                        const inputNumeroApartamentos_O1 = document.createElement("input");
                        inputNumeroApartamentos_O1.setAttribute("type", "text");
                        inputNumeroApartamentos_O1.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        inputNumeroApartamentos_O1.placeholder = "Determina el n√∫mero de d√≠as con noche de la reserva.";
                        inputNumeroApartamentos_O1.setAttribute("campoOferta", "numeroDeDias");
                        //Agregar el t√≠tulo y el input al primer contenedor
                        divContenedor1_O1.appendChild(seleccionaTipoNumero);
                        divContenedor1_O1.appendChild(inputNumeroApartamentos_O1);


                        contenedor.appendChild(divEspacioOpciones_O1);

                        return contenedor
                    },
                    conFechaCreacionEntreRango: function () {

                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "conFechaCreacionEntreRango");
                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)

                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Con fecha de creaci√≥n entre rango.";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar esta oferta cuando la fecha de creaci√≥n de una reserva est√° dentro del rango de vigencia de la oferta.";
                        contenedor.appendChild(descripcionCondicion);

                        return contenedor
                    },
                    conFechaEntradaEntreRango: function () {

                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "conFechaEntradaEntreRango");
                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)

                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Con fecha de entrada entre rango";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar esta oferta cuando la fecha de entrada de una reserva est√° dentro de un rango de fechas.";
                        contenedor.appendChild(descripcionCondicion);

                        const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            modo: "administracion",
                            sobreControlConfiguracion: {
                                configuracionInicio: {
                                    tituloCalendario: "Seleciona una fecha de inicio del rango"
                                },
                                configuracionFin: {
                                    tituloCalendario: "Seleciona una fecha de fin del rango"
                                }
                            }

                        })
                        contenedor.appendChild(contenedorFechasUI)

                        return contenedor
                    },
                    porRangoDeFechas: function () {

                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "porRangoDeFechas");
                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")


                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        contenedor.appendChild(contenedorBotonesGlobales)
                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por rango de fechas de la reserva";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar esta oferta cuando se realiza una reserva cuyo rango determinado por la fecha de entrada y la fecha de salida se cruza con el rango de duraci√≥n determinado en esta condici√≥n.";
                        contenedor.appendChild(descripcionCondicion);

                        const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            modo: "administracion",

                        })
                        contenedor.appendChild(contenedorFechasUI)

                        return contenedor
                    },
                    porApartamentosEspecificos: function () {
                        //Crear el elemento div principal
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                        const contenedor = document.createElement("div");
                        contenedor.classList.add("contenedorDescuento");
                        //Puede que polemico
                        //  porApartamentoDedicado.setAttribute("instanciaUID", instanciaUID)
                        contenedor.setAttribute("zonaOferta", "porApartamentosEspecificos");


                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)


                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por apartamentos espec√≠ficos ";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar oferta cuando una reserva contiene los apartamentos en espec√≠fico que requiere esta condici√≥n.";
                        contenedor.appendChild(descripcionCondicion);


                        const selector = document.createElement("select")
                        selector.classList.add(
                            "selectorLista")
                        selector.setAttribute("campo", "tipoDeEspecificidad")
                        contenedor.appendChild(selector)

                        const tituloSelector = document.createElement("option")
                        tituloSelector.value = ""
                        tituloSelector.selected = true
                        tituloSelector.disabled = true
                        tituloSelector.text = "Seleccionar el tipo condicional."
                        selector.add(tituloSelector)

                        const tipoExacto = document.createElement("option")
                        tipoExacto.value = "exactamente"
                        tipoExacto.text = "La reserva debe contener exactamente estos apartamentos."
                        selector.add(tipoExacto)

                        const tipoAlguno = document.createElement("option")
                        tipoAlguno.value = "alguno"
                        tipoAlguno.text = "La reserva debe de contener alguno de estos apartamentos."
                        selector.add(tipoAlguno)

                        const tipoExactamenteEntreOtros = document.createElement("option")
                        tipoExactamenteEntreOtros.value = "exactamenteEntreOtros"
                        tipoExactamenteEntreOtros.text = "La reserva debe contener exactamente estos apartamentos y, adem√°s, puede contener otros."
                        selector.add(tipoExactamenteEntreOtros)

                        const tipoNOAlguno = document.createElement("option")
                        tipoNOAlguno.value = "noDebeContenedorAlguno"
                        tipoNOAlguno.text = "La reserva no debe de contener alguno de estos apartamentos."
                        selector.add(tipoNOAlguno)

                        const tipoNOAlgunoExacto = document.createElement("option")
                        tipoNOAlgunoExacto.value = "noDebeContenedorExactamente"
                        tipoNOAlgunoExacto.text = "La reserva no debe de contener exactamente de estos apartamentos."
                        selector.add(tipoNOAlgunoExacto)

                        const tipoNOAlgunoExactoEntreOtros = document.createElement("option")
                        tipoNOAlgunoExactoEntreOtros.value = "noDebeContenedorExactamenteEntreOtros"
                        tipoNOAlgunoExactoEntreOtros.text = "La reserva no debe de contener exactamente de estos apartamentos, entre otros."
                        // selector.add(tipoNOAlgunoExactoEntreOtros)

                        const texto = "A√±ade apartamentos a esta condici√≥n para determinar qu√© apartamentos en concreto tienen que estar en una reserva para acceder a esta oferta."

                        const selectorApartamentosEspecificosUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: texto,
                            tipoDespliegue: "parcial"
                        })
                        contenedor.appendChild(selectorApartamentosEspecificosUI)
                        return contenedor
                    }

                },
                descuentosUI: {
                    individualPorApartamento: () => {
                        const contenedorDescuento = document.createElement("div");
                        contenedorDescuento.classList.add("crearOfertaConentenedor", "estadoInicialInvisible");
                        contenedorDescuento.setAttribute("descuentoIDV", "individualPorApartamento");

                        const titulo = document.createElement("p");
                        titulo.classList.add("crearOfertaTituloOpcion");
                        titulo.textContent =
                            "A√±ade qu√© apartamentos en concreto debe de seleccionar el cliente para que se aplique esta oferta.";
                        contenedorDescuento.appendChild(titulo);

                        const selectorApartamentosEspecificosUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: "No hay ning√∫n apartamento dentro de esta reserva.Pulse el bot√≥n A√±adir apartamento para a√±adir apartamentos en espec√≠fico.",
                            tipoDespliegue: "total"
                        })
                        contenedorDescuento.appendChild(selectorApartamentosEspecificosUI);
                        return contenedorDescuento
                    },
                    totalNeto: () => {
                        const contenedorDescuento = document.createElement("div");
                        contenedorDescuento.classList.add("crearOfertaConentenedor", "estadoInicialInvisible");
                        contenedorDescuento.setAttribute("descuentoIDV", "totalNeto");

                        const titulo = document.createElement("p");
                        titulo.classList.add("crearOfertaTituloOpcion");
                        titulo.textContent =
                            "Determina si esta oferta ser√° un descuento por porcentaje o una rebaja fija del precio y luego determina esa cantidad.";
                        contenedorDescuento.appendChild(titulo);

                        const selector = document.createElement("select");
                        selector.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        selector.setAttribute("campoOferta", "tipoDescuento");

                        const opcionInicial = document.createElement("option");
                        opcionInicial.selected = true;
                        opcionInicial.disabled = true;
                        opcionInicial.setAttribute("value", "");
                        opcionInicial.textContent = "Selecciona el tipo de descuento";

                        const opcionPorcentaje = document.createElement("option");
                        opcionPorcentaje.value = "porcentaje";
                        opcionPorcentaje.textContent = "Descuento por porcentaje";

                        const opcionCantidad = document.createElement("option");
                        opcionCantidad.value = "cantidadFija";
                        opcionCantidad.textContent = "Descuento por cantidad fija";

                        selector.appendChild(opcionInicial);
                        selector.appendChild(opcionPorcentaje);
                        selector.appendChild(opcionCantidad);
                        contenedorDescuento.appendChild(selector);

                        const campo = document.createElement("input");
                        campo.setAttribute("type", "text");
                        campo.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        campo.setAttribute("placeholder", "00.00");
                        campo.setAttribute("campoOferta", "descuentoGlobal");
                        contenedorDescuento.appendChild(campo);

                        return contenedorDescuento
                    },
                    mismoDescuentoParaCadaApartamento: () => {
                        const contenedorDescuento = document.createElement("div");
                        contenedorDescuento.classList.add("crearOfertaConentenedor", "estadoInicialInvisible");
                        contenedorDescuento.setAttribute("descuentoIDV", "mismoDescuentoParaCadaApartamento");

                        const titulo = document.createElement("p");
                        titulo.classList.add("crearOfertaTituloOpcion");
                        titulo.textContent =
                            "Determina si esta oferta ser√° un descuento para cada apartamento por porcentaje o una rebaja fija del precio y luego determina esa cantidad.";
                        contenedorDescuento.appendChild(titulo);

                        const selector = document.createElement("select");
                        selector.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        selector.setAttribute("campoOferta", "tipoDescuento");

                        const opcionInicial = document.createElement("option");
                        opcionInicial.selected = true;
                        opcionInicial.disabled = true;
                        opcionInicial.setAttribute("value", "");
                        opcionInicial.textContent = "Selecciona el tipo de descuento.";

                        const opcionPorcentaje = document.createElement("option");
                        opcionPorcentaje.value = "porcentaje";
                        opcionPorcentaje.textContent = "Descuento por porcentaje";

                        const opcionCantidad = document.createElement("option");
                        opcionCantidad.value = "cantidadFija";
                        opcionCantidad.textContent = "Descuento por cantidad fija";

                        selector.appendChild(opcionInicial);
                        selector.appendChild(opcionPorcentaje);
                        selector.appendChild(opcionCantidad);
                        contenedorDescuento.appendChild(selector);

                        const campo = document.createElement("input");
                        campo.setAttribute("type", "text");
                        campo.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        campo.setAttribute("placeholder", "00.00");
                        campo.setAttribute("campoOferta", "descuentoGlobal");
                        contenedorDescuento.appendChild(campo);

                        return contenedorDescuento
                    },
                    porRango: {
                        arranque: () => {
                            const contenedorDescuento = document.createElement("div");
                            contenedorDescuento.classList.add("crearOfertaConentenedor", "estadoInicialInvisible");
                            contenedorDescuento.setAttribute("descuentoIDV", "porRango");
                            contenedorDescuento.setAttribute("area", "descuentosPorRango")

                            const titulo = document.createElement("p");
                            titulo.classList.add("crearOfertaTituloOpcion");
                            titulo.textContent =
                                "Determina el rango de aplicaci√≥n del descuento.Una vez selecciones el rango.Podr√°s determinar si aplicar un descuento al neto total de la reserva que est√© dentro de ese rango.Es decir, los d√≠as de la reserva con noche que est√©n dentro de ese rango.Tambi√©n puedes aplicar un descuento personalizado dentro de cada d√≠a con noche.Determinando si el descuento se aplica al neto de un d√≠a o a apartamentos espec√≠ficos dentro de un d√≠a.";
                            contenedorDescuento.appendChild(titulo);

                            const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                                metodoSelectorDia: "administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.pasarelaSelectorDia",
                                nombreContenedor: "totalNetoPorRango",
                                modo: "administracion",

                            })
                            contenedorDescuento.appendChild(contenedorFechasUI)

                            const selectorTipoDescuento = document.createElement("select");
                            selectorTipoDescuento.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                            selectorTipoDescuento.setAttribute("campoOferta", "contextoAplicacion");
                            selectorTipoDescuento.setAttribute("componente", "subTipoDescuento");
                            selectorTipoDescuento.addEventListener("change", (e) => {
                                casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.controladorUI({
                                    contenedorIDV: e.target.value
                                })
                            })
                            const opcionesSelector = [{
                                nombre: "Determina, dentro del rango seleccionado, c√≥mo se aplica el descuento.",
                                inicial: "si",
                            }, {
                                nombre: "AAplicar descuento al total neto de la suma de los d√≠as de la reserva dentro del rango.",
                                descuentoIDV: "totalNetoPorRango",
                            }, {
                                nombre: "Aplicar descuentos individuales a los d√≠as de la reserva dentro del rango.",
                                descuentoIDV: "porDiasDelRango",
                            }]

                            for (const opcion of opcionesSelector) {
                                const nombre = opcion.nombre
                                const inicial = opcion.inicial
                                const descuentoIDV = opcion.descuentoIDV
                                const opcionUI = document.createElement("option")
                                if (inicial === "si") {
                                    opcionUI.selected = true;
                                    opcionUI.disabled = true;
                                } else {
                                    opcionUI.value = descuentoIDV
                                }
                                opcionUI.textContent = nombre
                                selectorTipoDescuento.appendChild(opcionUI)
                            }
                            contenedorDescuento.appendChild(selectorTipoDescuento)

                            const totalNetoPorRango = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.totalNetoPorRango()
                            contenedorDescuento.appendChild(totalNetoPorRango)

                            const porDiasDelRango = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.porDiasDelRango.arranque()
                            contenedorDescuento.appendChild(porDiasDelRango)

                            return contenedorDescuento
                        },
                        infoInicialSinApartametno: () => {
                            const info = document.createElement("p")
                            info.classList.add(
                                "texto",
                                "textoCentrado",
                                "padding6"
                            )
                            info.innerText = "Selecciona un rango de fecha para determinar en qu√© rango de la reserva se aplicar√°n los descuentos y poder personalizar los d√≠as."
                            return info
                        },
                        totalNetoPorRango: () => {
                            const contenedor = document.createElement("div")
                            contenedor.classList.add("estadoInicialInvisible", "contenedorInternoPorRango")
                            contenedor.setAttribute("contenedorPorRango", "totalNetoPorRango")

                            const selector = document.createElement("select");
                            selector.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto",);
                            selector.setAttribute("campoOferta", "tipoDescuento");

                            const opcionInicial = document.createElement("option");
                            opcionInicial.selected = true;
                            opcionInicial.disabled = true;
                            opcionInicial.setAttribute("value", "");
                            opcionInicial.textContent = "Selecciona el tipo de descuento al total neto de los d√≠as de la reserva dentro del rango.";

                            const opcionPorcentaje = document.createElement("option");
                            opcionPorcentaje.value = "porcentaje";
                            opcionPorcentaje.textContent = "Descuento por porcentaje";

                            const opcionCantidad = document.createElement("option");
                            opcionCantidad.value = "cantidadFija";
                            opcionCantidad.textContent = "Descuento por cantidad fija";

                            selector.appendChild(opcionInicial);
                            selector.appendChild(opcionPorcentaje);
                            selector.appendChild(opcionCantidad);
                            contenedor.appendChild(selector);

                            const campo = document.createElement("input");
                            campo.setAttribute("type", "text");
                            campo.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                            campo.setAttribute("placeholder", "00.00");
                            campo.setAttribute("campoOferta", "descuentoGlobal");
                            contenedor.appendChild(campo);

                            return contenedor

                        },
                        porDiasDelRango: {
                            arranque: () => {
                                const contenedor = document.createElement("div")
                                contenedor.setAttribute("contenedor", "porDiasDentroDelRango")
                                contenedor.setAttribute("contenedorPorRango", "porDiasDelRango")
                                contenedor.classList.add("estadoInicialInvisible", "contenedorInternoPorRango")
                                const info = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.infoInicialSinApartametno()
                                contenedor.appendChild(info)
                                return contenedor
                            },
                            totalNetoPorDiaUI: (data) => {
                                const instanciaUID = data.instanciaUID
                                const contenedorOpcionNetoDia = document.createElement("div")
                                contenedorOpcionNetoDia.classList.add(
                                    "estadoInicialInvisible",
                                    "contenedorVertical",
                                    "gap6"
                                )
                                contenedorOpcionNetoDia.setAttribute("contenedorDelDia", "netoPorDia")
                                contenedorOpcionNetoDia.setAttribute("instanciaUID", instanciaUID)
                                const selector = document.createElement("select");
                                selector.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                                selector.setAttribute("campoOferta", "tipoDescuento");

                                const opcionInicial = document.createElement("option");
                                opcionInicial.selected = true;
                                opcionInicial.disabled = true;
                                opcionInicial.setAttribute("value", "");
                                opcionInicial.textContent = "Selecciona el tipo de descuento al total neto de los d√≠as de la reserva dentro del rango.";

                                const opcionPorcentaje = document.createElement("option");
                                opcionPorcentaje.value = "porcentaje";
                                opcionPorcentaje.textContent = "Descuento por porcentaje";

                                const opcionCantidad = document.createElement("option");
                                opcionCantidad.value = "cantidadFija";
                                opcionCantidad.textContent = "Descuento por cantidad fija";

                                selector.appendChild(opcionInicial);
                                selector.appendChild(opcionPorcentaje);
                                selector.appendChild(opcionCantidad);
                                contenedorOpcionNetoDia.appendChild(selector);

                                const campo = document.createElement("input");
                                campo.setAttribute("type", "text");
                                campo.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                                campo.setAttribute("placeholder", "00.00");
                                campo.setAttribute("campoOferta", "descuentoGlobal");
                                contenedorOpcionNetoDia.appendChild(campo);

                                return contenedorOpcionNetoDia
                            },
                            totalNetoPorApartamentosDelDiaUI: (data) => {
                                const instanciaUID = data.instanciaUID

                                const contenedorPorApartamento = document.createElement("div")
                                contenedorPorApartamento.classList.add(
                                    "estadoInicialInvisible",
                                    "contenedorVertical",
                                    "gap6"
                                )
                                contenedorPorApartamento.setAttribute("contenedorDelDia", "netoPorApartamentoDelDia")
                                contenedorPorApartamento.setAttribute("instanciaUID", instanciaUID)

                                const titulo = document.createElement("p");
                                titulo.classList.add("crearOfertaTituloOpcion");
                                titulo.textContent =
                                    "AA√±ade qu√© apartamentos en concreto debe de seleccionar el cliente para que se aplique esta oferta.";
                                contenedorPorApartamento.appendChild(titulo);
                                const selectorApartamentosEspecificosUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                                    textoContenedorVacio: "A√±ade apartamentos a esta condici√≥n para determinar qu√© apartamentos en concreto tienen que estar en una reserva para acceder a esta oferta.",
                                    tipoDespliegue: "total"
                                })
                                contenedorPorApartamento.appendChild(selectorApartamentosEspecificosUI);
                                return contenedorPorApartamento
                            },
                        },
                        infoSinApartamentos: () => {
                            const info = document.createElement("P")
                            info.innerText = "A√±ade alg√∫n apartamento."
                        },
                        componentes: {
                            pasarelaSelectorDia: function (e) {
                                casaVitini.ui.componentes.calendario.calendarioCompartido.seleccionarDia(e)
                                const area = document.querySelector("[contenedor=descuentos] [area=descuentosPorRango]")
                                const contenedorPorDiasDentro = area.querySelector("[contenedorPorRango=porDiasDelRango]")
                                const fechaInicioRango = area.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                                const fechaFinalRango = area.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                                contenedorPorDiasDentro.innerHTML = null
                                if (fechaInicioRango && fechaFinalRango) {
                                    //const fechaInicioRango_ISO = casaVitini.utilidades.conversor.fecha_humana_hacia_ISO(fechaInicioRango)
                                    //const fechaFinalRango_ISO = casaVitini.utilidades.conversor.fecha_humana_hacia_ISO(fechaFinalRango)

                                    const fechas = casaVitini.utilidades.conversor.extraerFechasInternas(fechaInicioRango, fechaFinalRango)

                                    for (const fecha of fechas) {
                                        const selectorDiaRenderizado = contenedorPorDiasDentro.querySelector(`[instanciaUID="${fecha}"]`)
                                        if (!selectorDiaRenderizado) {
                                            const contenedorDia = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.constructorDiaUI({
                                                fecha: fecha
                                            })
                                            contenedorPorDiasDentro.appendChild(contenedorDia)
                                        }
                                    }
                                } else {
                                    const info = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.infoInicialSinApartametno()
                                    contenedorPorDiasDentro.appendChild(info)
                                }

                            },
                            controladorUI: (data) => {
                                const contenedorIDV = data.contenedorIDV
                                const areaDescuentosPorRano = document.querySelector("[contenedor=descuentos]").querySelector("[area=descuentosPorRango]")
                                const selectorContenedores = areaDescuentosPorRano.querySelectorAll("[contenedorPorRango]")

                                selectorContenedores.forEach((contenedor) => {
                                    contenedor.classList.add("estadoInicialInvisible")
                                })
                                areaDescuentosPorRano.querySelector(`[contenedorPorRango=${contenedorIDV}]`).classList.remove("estadoInicialInvisible")
                            },
                            constructorDiaUI: (data) => {

                                const fecha = data.fecha
                                const tipoDescuento = data.tipoDescuento
                                const fechaDia_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fecha)

                                const contenedorDia = document.createElement("div")
                                contenedorDia.classList.add("contenedorDia")
                                contenedorDia.setAttribute("fechaDelDia", fecha)
                                contenedorDia.setAttribute("contenedor", "dia")
                                contenedorDia.setAttribute("instanciaUID", fecha)

                                const fechaDelDiaUI = document.createElement("p")
                                fechaDelDiaUI.classList.add("texto", "textoCentrado", "negrita", "padding6")
                                fechaDelDiaUI.innerHTML = fechaDia_humana
                                contenedorDia.appendChild(fechaDelDiaUI)

                                const selectorEnDia = document.createElement("select");
                                selectorEnDia.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                                selectorEnDia.setAttribute("campoOferta", "contextoAplicacion");
                                selectorEnDia.addEventListener("change", (e) => {
                                    const areaDia = e.target.closest("[contenedor=dia]")
                                    const conteneodrIDV = e.target.value
                                    const selectoresContenedor = areaDia.querySelectorAll("[contenedorDelDia")
                                    for (const contenedor of selectoresContenedor) {
                                        contenedor.classList.add("estadoInicialInvisible")
                                    }
                                    areaDia.querySelector(`[contenedorDelDia="${conteneodrIDV}"]`).classList.remove("estadoInicialInvisible")
                                })
                                const opcionesSelector = [{
                                    nombre: "Determina, dentro de este d√≠a, c√≥mo se aplica un descuento al neto del d√≠a o por apartamentos del d√≠a.",
                                    inicial: "si",
                                }, {
                                    nombre: "Aplicar descuento al total neto del d√≠a.",
                                    descuentoIDV: "netoPorDia",
                                }, {
                                    nombre: "Aplicar descuentos individuales a los apartamientos del d√≠a.",
                                    descuentoIDV: "netoPorApartamentoDelDia",
                                }]

                                for (const opcion of opcionesSelector) {
                                    const nombre = opcion.nombre
                                    const inicial = opcion.inicial
                                    const descuentoIDV = opcion.descuentoIDV
                                    const opcionUI = document.createElement("option")
                                    if (inicial === "si") {
                                        opcionUI.selected = true;
                                        opcionUI.disabled = true;
                                    } else {
                                        opcionUI.value = descuentoIDV
                                    }
                                    opcionUI.textContent = nombre
                                    selectorEnDia.appendChild(opcionUI)
                                    contenedorDia.appendChild(selectorEnDia)
                                }
                                if (tipoDescuento) {
                                    selectorEnDia.value = tipoDescuento
                                }
                                const totalNetoPorDiaUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.porDiasDelRango.totalNetoPorDiaUI({
                                    instanciaUID: fecha
                                })
                                contenedorDia.appendChild(totalNetoPorDiaUI)

                                const totalNetoPorApartametnosDelDiaUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.porDiasDelRango.totalNetoPorApartamentosDelDiaUI({
                                    instanciaUID: fecha
                                })
                                contenedorDia.appendChild(totalNetoPorApartametnosDelDiaUI)
                                return contenedorDia
                            }
                        }
                    }
                },
                controladorDescuentos: (data) => {
                    const descuentoIDV = data.descuentoIDV
                    const areaDescuentosUI = document.querySelector("[contenedor=descuentos]")
                    const selectorDescuentosUI = areaDescuentosUI.querySelectorAll("[descuentoIDV]")
                    selectorDescuentosUI.forEach((descuentoUI) => {
                        descuentoUI.classList.add("estadoInicialInvisible")
                    })
                    areaDescuentosUI.querySelector(`[descuentoIDV="${descuentoIDV}"]`)?.classList.remove("estadoInicialInvisible")
                }

            },
            utilidades: {
                constructorObjeto: () => {

                    const nombreOferta = document.querySelector("[campoOferta=nombreOferta]").value
                    const fechaInicio_ISO = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinal_ISO = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    const zonaIDV = document.querySelector("[campo=zonaIDV]").value

                    const contenedorCondiciones = document.querySelector("[contenedor=condiciones]")

                    const oferta = {
                        nombreOferta,
                        zonaIDV,
                        entidadIDV: "reserva",
                        fechaInicio: fechaInicio_ISO,
                        fechaFinal: fechaFinal_ISO,
                        condicionesArray: [],
                        descuentosJSON: {}
                    }
                    const condiciones = contenedorCondiciones.querySelectorAll(`[zonaOferta]`)
                    condiciones.forEach((espacioCondicion) => {
                        const tipoCondicion = espacioCondicion.getAttribute("zonaOferta")
                        const estructuraConficion = {}
                        if (tipoCondicion === "porNumeroDeApartamentos") {
                            const tipoConteo = espacioCondicion.querySelector("[campoOferta=tipoConteo]").value
                            const numeroDeApartamentos = espacioCondicion.querySelector("[campoOferta=numeroDeApartamentos]").value

                            estructuraConficion.tipoCondicion = tipoCondicion
                            estructuraConficion.tipoConteo = tipoConteo
                            estructuraConficion.numeroDeApartamentos = numeroDeApartamentos

                            oferta.condicionesArray.push(estructuraConficion)
                        } else if (tipoCondicion === "porApartamentosEspecificos") {
                            estructuraConficion.tipoCondicion = tipoCondicion
                            const tipoDeEspecificidad = espacioCondicion.querySelector("[campo=tipoDeEspecificidad]").value
                            estructuraConficion.tipoDeEspecificidad = tipoDeEspecificidad
                            estructuraConficion.apartamentos = []

                            const apartamentosSeleccionados = espacioCondicion.querySelectorAll("[apartamentoSeleccionado]")
                            apartamentosSeleccionados.forEach((apartamento) => {
                                const apartamentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                                estructuraConficion.apartamentos.push({
                                    apartamentoIDV: apartamentoIDV
                                })
                            })
                            oferta.condicionesArray.push(estructuraConficion)

                        } else if (tipoCondicion === "porDiasDeAntelacion") {
                            const tipoConteo = espacioCondicion.querySelector("[campoOferta=tipoConteo]").value
                            const numeroDeDias = espacioCondicion.querySelector("[campoOferta=numeroDeDias]").value

                            estructuraConficion.tipoCondicion = tipoCondicion
                            estructuraConficion.tipoConteo = tipoConteo
                            estructuraConficion.numeroDeDias = numeroDeDias

                            oferta.condicionesArray.push(estructuraConficion)
                        } else if (tipoCondicion === "porDiasDeReserva") {
                            const tipoConteo = espacioCondicion.querySelector("[campoOferta=tipoConteo]").value
                            const numeroDeDias = espacioCondicion.querySelector("[campoOferta=numeroDeDias]").value

                            estructuraConficion.tipoCondicion = tipoCondicion
                            estructuraConficion.tipoConteo = tipoConteo
                            estructuraConficion.numeroDeDias = numeroDeDias
                            oferta.condicionesArray.push(estructuraConficion)

                        } else if (tipoCondicion === "conFechaCreacionEntreRango") {
                            estructuraConficion.tipoCondicion = tipoCondicion
                            oferta.condicionesArray.push(estructuraConficion)
                        } else if (tipoCondicion === "conFechaEntradaEntreRango") {
                            estructuraConficion.tipoCondicion = tipoCondicion

                            const fechaInicioRango_ISO = espacioCondicion.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                            const fechaFinalRango_ISO = espacioCondicion.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                            estructuraConficion.fechaInicioRango_ISO = fechaInicioRango_ISO
                            estructuraConficion.fechaFinalRango_ISO = fechaFinalRango_ISO


                            oferta.condicionesArray.push(estructuraConficion)

                        } else if (tipoCondicion === "porRangoDeFechas") {
                            estructuraConficion.tipoCondicion = tipoCondicion

                            const fechaInicioRango_ISO = espacioCondicion.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                            const fechaFinalRango_ISO = espacioCondicion.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                            estructuraConficion.fechaInicioRango_ISO = fechaInicioRango_ISO
                            estructuraConficion.fechaFinalRango_ISO = fechaFinalRango_ISO
                            oferta.condicionesArray.push(estructuraConficion)

                        } else if (tipoCondicion === "porCodigoDescuento") {
                            estructuraConficion.tipoCondicion = tipoCondicion
                            const codigoDescuento = espacioCondicion.querySelector("[campo=codigoDescuento]").value
                            estructuraConficion.codigoDescuento = codigoDescuento
                            oferta.condicionesArray.push(estructuraConficion)

                        } else {
                            const error = "No se reconoce el tipo de oferta"
                            return casaVitini.ui.vistas.adver(error)
                        }
                    })


                    const contenedorDescuentos = document.querySelector("[contenedor=descuentos]")
                    const tipoDescuento = contenedorDescuentos.querySelector("[componente=tipoDescuento]")?.value
                    if (tipoDescuento === "totalNeto") {
                        const descuentoTotal = contenedorDescuentos.querySelector(`[descuentoIDV="${tipoDescuento}"] [campoOferta=descuentoGlobal]`).value
                        const tipoAplicacion = contenedorDescuentos.querySelector(`[descuentoIDV="${tipoDescuento}"] [campoOferta=tipoDescuento]`).value

                        const estructuraDescuento = {
                            tipoDescuento: tipoDescuento,
                            tipoAplicacion: tipoAplicacion,
                            descuentoTotal: descuentoTotal
                        }
                        oferta.descuentosJSON = estructuraDescuento
                    } else if (tipoDescuento === "mismoDescuentoParaCadaApartamento") {
                        const descuentoTotal = contenedorDescuentos.querySelector(`[descuentoIDV="${tipoDescuento}"] [campoOferta=descuentoGlobal]`).value
                        const tipoAplicacion = contenedorDescuentos.querySelector(`[descuentoIDV="${tipoDescuento}"] [campoOferta=tipoDescuento]`).value

                        const estructuraDescuento = {
                            tipoDescuento: tipoDescuento,
                            tipoAplicacion: tipoAplicacion,
                            descuentoTotal: descuentoTotal
                        }
                        oferta.descuentosJSON = estructuraDescuento
                    } else if (tipoDescuento === "individualPorApartamento") {
                        const apartamentos = []

                        const apartamentosSeleccionados = contenedorDescuentos.querySelector("[descuentoidv=individualPorApartamento]").querySelectorAll("[apartamentoSeleccionado]")
                        apartamentosSeleccionados.forEach((apartamento) => {
                            const apartamentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                            const descuentoTotal = apartamento.querySelector("[campoapartamentoseleccionado=descuentoTotal]").value
                            const tipoDescuento = apartamento.querySelector("[campoapartamentoseleccionado=tipoDescuento]").value

                            const estructuraApartamento = {
                                apartamentoIDV,
                                descuentoTotal,
                                tipoAplicacion: tipoDescuento
                            }
                            apartamentos.push(estructuraApartamento)

                        })
                        const estructuraDescuento = {
                            tipoDescuento: tipoDescuento,
                            apartamentos: apartamentos
                        }
                        oferta.descuentosJSON = estructuraDescuento

                    } else if (tipoDescuento === "porRango") {
                        const area = contenedorDescuentos.querySelector("[area=descuentosPorRango]")
                        const fechaInicioRango_ISO = area.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                        const fechaFinalRango_ISO = area.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                        const subTipoDescuento = area.querySelector("[componente=subTipoDescuento]").value
                        //const fechaInicioRango_ISO = casaVitini.utilidades.conversor.fecha_humana_hacia_ISO(fechaInicioRango_humana)
                        //const fechaFinalRango_ISO = casaVitini.utilidades.conversor.fecha_humana_hacia_ISO(fechaFinalRango_humana)
                        const estructuraDescuento = {
                            tipoDescuento: tipoDescuento,
                            fechaInicioRango_ISO: fechaInicioRango_ISO,
                            fechaFinalRango_ISO: fechaFinalRango_ISO,
                            subTipoDescuento: subTipoDescuento,
                        }
                        oferta.descuentosJSON = estructuraDescuento

                        if (subTipoDescuento === "totalNetoPorRango") {
                            const descuentoTotal = area.querySelector("[campoOferta=descuentoGlobal]").value
                            const tipoAplicacion = area.querySelector("[campoOferta=tipoDescuento]").value
                            estructuraDescuento.tipoAplicacion = tipoAplicacion
                            estructuraDescuento.descuentoTotal = descuentoTotal
                        }

                        if (subTipoDescuento === "porDiasDelRango") {
                            estructuraDescuento.descuentoPorDias = []

                            const contenedorPorDiasPorRango = area.querySelectorAll("[contenedor=dia]")
                            contenedorPorDiasPorRango.forEach((dia) => {

                                const fechaDelDia = dia.getAttribute("fechaDelDia")

                                const estructuraDescuentoPorDia = {
                                    fecha: fechaDelDia
                                }
                                const tipoDescuentoEnElDia = dia.querySelector("[campoOferta=contextoAplicacion]").value
                                estructuraDescuentoPorDia.tipoDescuento = tipoDescuentoEnElDia


                                if (tipoDescuentoEnElDia === "netoPorDia") {
                                    const descuentoTotal = dia.querySelector("[campoOferta=descuentoGlobal]").value
                                    const tipoAplicacion = dia.querySelector("[campoOferta=tipoDescuento]").value

                                    estructuraDescuentoPorDia.tipoAplicacion = tipoAplicacion
                                    estructuraDescuentoPorDia.descuentoTotal = descuentoTotal

                                    estructuraDescuento.descuentoPorDias.push(estructuraDescuentoPorDia)

                                } else if (tipoDescuentoEnElDia === "netoPorApartamentoDelDia") {
                                    const contenedorApartamentos = dia.querySelectorAll("[apartamentoSeleccionado]")
                                    estructuraDescuentoPorDia.apartamentos = []

                                    contenedorApartamentos.forEach((apartamento) => {
                                        const aparatmentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                                        const tipoAplicacion = apartamento.querySelector("[campoApartamentoSeleccionado=tipoDescuento]").value
                                        const descuentoTotal = apartamento.querySelector("[campoApartamentoSeleccionado=descuentoTotal]").value

                                        const descuentoPorApartamento = {
                                            apartamentoIDV: aparatmentoIDV,
                                            tipoAplicacion: tipoAplicacion,
                                            descuentoTotal: descuentoTotal,
                                        }

                                        estructuraDescuentoPorDia.apartamentos.push(descuentoPorApartamento)

                                    })
                                    estructuraDescuento.descuentoPorDias.push(estructuraDescuentoPorDia)

                                }
                            })
                        }
                    }
                    return oferta
                },
            }
        },
        comportamiento_de_precios: {
            arranque: async () => {
                const main = document.querySelector("main")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                if (comandoInicial === "comportamiento_de_precios" && Object.keys(granuladoURL.parametros).length === 0) {

                    main.setAttribute("zonaCSS", "administracion/comportamiento_de_precios")
                    casaVitini.administracion.comportamiento_de_precios.portadaUI()
                } else if (granuladoURL.parametros.comportamiento) {

                    main.setAttribute("zonaCSS", "administracion/comportamiento_de_precios/comportamientoUI")
                    casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.UI(granuladoURL.parametros.comportamiento)
                } else {

                    const info = {
                        titulo: "No existe ninguna reserva con ese identificador",
                        descripcion: "No existe ning√∫n comportamiento de precio con este identificador."
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                }

            },
            portadaUI: async () => {
                const espacioOfertas = document.querySelector("[componente=espacioComportamiento]")
                const contenedor = document.createElement("div")
                contenedor.classList.add("gestionDeOfertasContenedor")
                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("gestionDeOfertasContenedorBotones")
                const botonCrearOfertas = document.createElement("a")
                botonCrearOfertas.classList.add("gestionDeOfertasBotonCrearOferta")
                botonCrearOfertas.innerText = "Crear un comportamiento de precios"
                botonCrearOfertas.setAttribute("href", "/administracion/comportamiento_de_precios/crear_comportamiento")
                botonCrearOfertas.setAttribute("vista", "/administracion/comportamiento_de_precios/crear_comportamiento")
                botonCrearOfertas.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                contenedorBotones.appendChild(botonCrearOfertas)
                contenedor.appendChild(contenedorBotones)
                const contenedorOfertas = document.createElement("div")
                contenedorOfertas.classList.add("comportamintoDePreciosSuperBloque")
                contenedorOfertas.setAttribute("componente", "espacioListaOfertas")
                contenedor.appendChild(contenedorOfertas)
                espacioOfertas.appendChild(contenedor)
                const transaccion = {
                    zona: "administracion/comportamientoDePrecios/listaComportamientosPrecios"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const espacioListaOfertas = document.querySelector("[componente=espacioListaOfertas]")
                    const comportamientosCondigurados = respuestaServidor?.comportamientosDePrecio
                    if (comportamientosCondigurados.length === 0) {
                        const ofertaUI = document.createElement("a")
                        ofertaUI.classList.add("ofertaUINoHay")
                        const tituloOferta = document.createElement("p")
                        tituloOferta.classList.add("ofertaUITituloOferta")
                        tituloOferta.innerText = "No hay ning√∫n comportamiento de precios configurado.Pulsa en el bot√≥n para crear un nuevo comportamiento de precio para crear uno."
                        ofertaUI.appendChild(tituloOferta)
                        espacioListaOfertas.appendChild(ofertaUI)
                        return
                    } else if (comportamientosCondigurados.length > 0) {


                        const comportamientosUI = (data) => {
                            const contenedor = data.contenedor
                            const tipo = contenedor.tipo
                            const comportamientoUID = data.comportamientoUID
                            const nombreComportamiento = data.nombreComportamiento
                            const estadoIDV = data.estadoIDV

                            const objetoEstado = {
                                activado: "Comportamiento activado",
                                desactivado: "Comportamiento desactivado"
                            }

                            const definicionTipo = {
                                porRango: "Basado en el rango de vigencia del comportamiento.",
                                porDias: "Basado en d√≠as de la semana.",
                                porCreacion: "Basado en el rango de vigencia del comportamiento y el rango de creaci√≥n."

                            }

                            const descripcionObjeto = {
                                porRango: "Este comportamiento solo se aplica a los d√≠as con noche que est√©n dentro del rango especificado.",
                                porDias: "Este comportamiento se aplica a los d√≠as con noche de la semana espec√≠ficos.Este comportamiento se aplicar√° repetidamente hasta que se desactive o elimine.",
                                porCreacion: "Este comportamiento solo se aplica a los d√≠as con noche que est√©n dentro del rango especificado.Siempre que la reserva se halla hecha entre los rangos de creaci√≥n especificados."

                            }

                            const comportamientoUI = document.createElement("a")
                            comportamientoUI.classList.add("comportamientoUI")
                            comportamientoUI.setAttribute("comportamientoUI", comportamientoUID)
                            comportamientoUI.setAttribute("href", "/administracion/comportamiento_de_precios/comportamiento:" + comportamientoUID)
                            comportamientoUI.setAttribute("vista", "/administracion/comportamiento_de_precios/comportamiento:" + comportamientoUID)
                            comportamientoUI.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.traductorCambioVista)

                            const contenedorTituloEstado = document.createElement("div")
                            contenedorTituloEstado.classList.add("contenedorTituloEstado")

                            const tituloComportamiento = document.createElement("p")
                            tituloComportamiento.classList.add("ofertaUITituloOferta")
                            tituloComportamiento.classList.add("negrita")
                            tituloComportamiento.innerText = nombreComportamiento
                            contenedorTituloEstado.appendChild(tituloComportamiento)

                            const estadoComportamiento = document.createElement("p")
                            estadoComportamiento.classList.add("ofertaUITituloOferta")
                            estadoComportamiento.innerText = objetoEstado[estadoIDV]
                            contenedorTituloEstado.appendChild(estadoComportamiento)


                            const definicionTipoUI = document.createElement("p")
                            definicionTipoUI.classList.add("ofertaUITituloOferta")
                            definicionTipoUI.innerText = definicionTipo[tipo]
                            contenedorTituloEstado.appendChild(definicionTipoUI)

                            comportamientoUI.appendChild(contenedorTituloEstado)

                            const descripcion = document.createElement("p")
                            descripcion.classList.add("contenedorTituloEstado")
                            descripcion.innerText = descripcionObjeto[tipo]
                            comportamientoUI.appendChild(descripcion)


                            if (tipo === "porRango") {
                                const fechaInicio = contenedor.fechaInicio
                                const fechaFinal = contenedor.fechaFinal

                                const contenedorGlobalOferta = document.createElement("div")
                                contenedorGlobalOferta.classList.add("ofertaUIContenedorComportamiento")
                                //-------------------------------------
                                const contenedorDetalleOferta = document.createElement("div")
                                contenedorDetalleOferta.classList.add("ofertaUIContenedorDetalles")
                                //-------------------------------------
                                const fechaInicioContenedor = document.createElement("div")
                                fechaInicioContenedor.classList.add("comportamientoUIFechaContenedor")
                                const tituloFechaInicio = document.createElement("div")
                                tituloFechaInicio.classList.add("ofertaUITituloFecha")
                                tituloFechaInicio.innerText = "Fecha de inicio del comportamiento"
                                fechaInicioContenedor.appendChild(tituloFechaInicio)
                                const datoFechaInicio = document.createElement("div")
                                datoFechaInicio.classList.add("ofertaUIDatoFecha")
                                datoFechaInicio.innerText = fechaInicio
                                fechaInicioContenedor.appendChild(datoFechaInicio)
                                contenedorGlobalOferta.appendChild(fechaInicioContenedor)
                                const fechaFinContenedor = document.createElement("div")
                                fechaFinContenedor.classList.add("comportamientoUIFechaContenedor")
                                const tituloFechaFin = document.createElement("div")
                                tituloFechaFin.classList.add("ofertaUITituloFecha")
                                tituloFechaFin.innerText = "Fecha de fin  del comportamiento"
                                fechaFinContenedor.appendChild(tituloFechaFin)
                                const datoFechaFin = document.createElement("div")
                                datoFechaFin.classList.add("ofertaUIDatoFecha")
                                datoFechaFin.innerText = fechaFinal
                                fechaFinContenedor.appendChild(datoFechaFin)
                                contenedorGlobalOferta.appendChild(fechaFinContenedor)
                                comportamientoUI.appendChild(contenedorGlobalOferta)
                                //--------------------------------------
                                return comportamientoUI
                            } else if (tipo === "porDias") {
                                const diasArray = contenedor.dias
                                const numeroDedias = diasArray.length

                                const contenedorGlobalOferta = document.createElement("div")
                                contenedorGlobalOferta.classList.add("contenedorDiasSelecionados")
                                contenedorGlobalOferta.style.gridTemplateColumns = `repeat(${numeroDedias}, 1fr)`

                                //-------------------------------------
                                const contenedorDetalleOferta = document.createElement("div")
                                contenedorDetalleOferta.classList.add("ofertaUIContenedorDetalles")
                                //-------------------------------------

                                const diasObjeto = {
                                    lunes: "Lunes",
                                    martes: "Martes",
                                    miercoles: "Mi√©rcoles",
                                    jueves: "Jueves",
                                    viernes: "Viernes",
                                    sabado: "S√°bado",
                                    domingo: "Domingo"
                                }

                                for (const dia of diasArray) {
                                    const contenedorDia = document.createElement("div")
                                    contenedorDia.classList.add("diaSeleciconadoCelda")
                                    contenedorDia.innerText = diasObjeto[dia]
                                    contenedorGlobalOferta.appendChild(contenedorDia)

                                }
                                comportamientoUI.appendChild(contenedorGlobalOferta)
                                return comportamientoUI


                            } else if (tipo === "porCreacion") {
                                const fechaFinal_creacionReserva = contenedor.fechaFinal_creacionReserva
                                const fechaInicio_creacionReserva = contenedor.fechaInicio_creacionReserva

                                const fechaInicio = contenedor.fechaInicio
                                const fechaFinal = contenedor.fechaFinal

                                const contenedorGlobalOferta = document.createElement("div")
                                contenedorGlobalOferta.classList.add("ofertaUIContenedorComportamiento")

                                const fechaInicioContenedor = document.createElement("div")
                                fechaInicioContenedor.classList.add("comportamientoUIFechaContenedor")
                                const tituloFechaInicio = document.createElement("div")
                                tituloFechaInicio.classList.add("ofertaUITituloFecha")
                                tituloFechaInicio.innerText = "Fecha de inicio del comportamiento"
                                fechaInicioContenedor.appendChild(tituloFechaInicio)
                                const datoFechaInicio = document.createElement("div")
                                datoFechaInicio.classList.add("ofertaUIDatoFecha")
                                datoFechaInicio.innerText = fechaInicio
                                fechaInicioContenedor.appendChild(datoFechaInicio)
                                contenedorGlobalOferta.appendChild(fechaInicioContenedor)
                                const fechaFinContenedor = document.createElement("div")
                                fechaFinContenedor.classList.add("comportamientoUIFechaContenedor")
                                const tituloFechaFin = document.createElement("div")
                                tituloFechaFin.classList.add("ofertaUITituloFecha")
                                tituloFechaFin.innerText = "Fecha de fin del comportamiento"
                                fechaFinContenedor.appendChild(tituloFechaFin)
                                const datoFechaFin = document.createElement("div")
                                datoFechaFin.classList.add("ofertaUIDatoFecha")
                                datoFechaFin.innerText = fechaFinal
                                fechaFinContenedor.appendChild(datoFechaFin)
                                contenedorGlobalOferta.appendChild(fechaFinContenedor)
                                comportamientoUI.appendChild(contenedorGlobalOferta)

                                //--------------------------------------
                                const infoCreacion = document.createElement("div")
                                infoCreacion.innerText = "El rango de creacion determina que la fecah de creacion de una reserva, debe de estar dentro de este rango para que se aplique el comportamiento de precio."
                                comportamientoUI.appendChild(infoCreacion)


                                const contenedorRangoCreacion = document.createElement("div")
                                contenedorRangoCreacion.classList.add("ofertaUIContenedorComportamiento")

                                const fechaInicioCreacionContenedor = document.createElement("div")
                                fechaInicioCreacionContenedor.classList.add("comportamientoUIFechaContenedor")

                                const tituloFechaInicioCreacion = document.createElement("div")
                                tituloFechaInicioCreacion.classList.add("ofertaUITituloFecha")
                                tituloFechaInicioCreacion.innerText = "Fecha de inicio del rango de creaci√≥n"
                                fechaInicioCreacionContenedor.appendChild(tituloFechaInicioCreacion)

                                const datoFechaInicioCreacion = document.createElement("div")
                                datoFechaInicioCreacion.classList.add("ofertaUIDatoFecha")
                                datoFechaInicioCreacion.innerText = fechaFinal_creacionReserva
                                fechaInicioCreacionContenedor.appendChild(datoFechaInicioCreacion)
                                contenedorRangoCreacion.appendChild(fechaInicioCreacionContenedor)

                                const fechaFinContenedorCreacion = document.createElement("div")
                                fechaFinContenedorCreacion.classList.add("comportamientoUIFechaContenedor")

                                const tituloFechaFinCreacion = document.createElement("div")
                                tituloFechaFinCreacion.classList.add("ofertaUITituloFecha")
                                tituloFechaFinCreacion.innerText = "Fecha de fin del rango de creaci√≥n"
                                fechaFinContenedorCreacion.appendChild(tituloFechaFinCreacion)

                                const datoFechaFinCreacion = document.createElement("div")
                                datoFechaFinCreacion.classList.add("ofertaUIDatoFecha")
                                datoFechaFinCreacion.innerText = fechaInicio_creacionReserva
                                fechaFinContenedorCreacion.appendChild(datoFechaFinCreacion)

                                contenedorRangoCreacion.appendChild(fechaFinContenedorCreacion)
                                comportamientoUI.appendChild(contenedorRangoCreacion)

                                return comportamientoUI
                            }

                        }

                        comportamientosCondigurados.forEach((detallesComportamiento) => {
                            const comportamientoUI = comportamientosUI(detallesComportamiento)

                            espacioListaOfertas.appendChild(comportamientoUI)
                        })
                    }
                }
            },
            crearComportamiento: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/comportamiento_de_precios/comportamientoUI")
                    const selector = document.querySelector("[componente=espacioComportamiento]")
                    //const comportamientoUI = 
                    casaVitini.administracion.comportamiento_de_precios.detalleUI("crearOferta")
                    //selector.appendChild(comportamientoUI)
                },
                desplegarOpcionesOferta: (opcionOferta) => {
                    const tipoOferta = opcionOferta.target.closest("[tipoOferta]").getAttribute("tipoOferta")
                    const selectorZonaOferta = document.querySelectorAll("[zonaOferta]")
                    selectorZonaOferta.forEach((zonaOferta) => {
                        zonaOferta.classList.add("estadoInicialInvisible")
                    })
                    document.querySelector(`[zonaOferta=${tipoOferta}]`).classList.remove("estadoInicialInvisible")
                    const selectoresBotonDeplegarOpcionesOferta = document.querySelectorAll("[tipoOferta]")
                    selectoresBotonDeplegarOpcionesOferta.forEach((boton) => {
                        boton.removeAttribute("style")
                    })
                    opcionOferta.target.closest("[tipoOferta]").style.background = "blue"
                    opcionOferta.target.closest("[tipoOferta]").style.color = "white"
                },
                crearComortamientoConfirmar: async function () {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando comportamiento de precio..."

                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    })
                    const contenedorComportamiento = casaVitini.administracion.comportamiento_de_precios.constructorObjeto()

                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/crearComportamiento",
                        ...contenedorComportamiento
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {

                        if (respuestaServidor.comportamientosEnConflicto) {
                            const comportamientosEnConflictoUI = casaVitini.administracion.comportamiento_de_precios.compomentesUI.comportamientosEnClonfictoUI(respuestaServidor)

                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            document.querySelector("main").appendChild(ui)
                            const constructor = ui.querySelector("[componente=constructor]")
                            const contenedor = ui.querySelector("[componente=contenedor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.innerText = `Comportamientos de precio en conflicto`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = respuestaServidor?.error

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = "Aceptar y volver al comportamiento"
                            botonAceptar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.remove()
                            // ALGO INYECTA CODIGO
                            contenedor.appendChild(comportamientosEnConflictoUI)
                        } else {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                        }


                    }
                    if (respuestaServidor?.ok) {
                        const comportamientoUID = respuestaServidor?.comportamientoUID
                        const vista = `/administracion/comportamiento_de_precios/comportamiento:${comportamientoUID}`
                        const navegacion = {
                            vista: vista,
                            //tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                },
                apartamentosDisponibles: async (data) => {

                    //apartamento.preventDefault()
                    const apartamento = data.e
                    const destino = data.destino

                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    apartamento.stopPropagation()
                    const selectorMenuObsoleto = document.querySelector("[comMenu=menuVolatilApartamentoDisponbiles]")

                    if (selectorMenuObsoleto) {
                        selectorMenuObsoleto.remove()

                    }
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const alturaDinamica = apartamento.target.getBoundingClientRect().bottom;
                    const horizontalDinamico = apartamento.target.getBoundingClientRect().left;
                    const anchoDinamico = apartamento.target.getBoundingClientRect().width;
                    document.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.ocultarMenusVolatiles)
                    const apartamentosUI = document.createElement("div")
                    apartamentosUI.classList.add("crearOfertaMenuVolatilAnadirApartamento")
                    apartamentosUI.setAttribute("comMenu", "menuVolatilApartamentoDisponbiles")
                    apartamentosUI.setAttribute("componente", "menuVolatil")
                    apartamentosUI.setAttribute("instanciaUID", instanciaUID)
                    apartamentosUI.style.top = (alturaDinamica + 6) + "px"
                    apartamentosUI.style.left = (horizontalDinamico) + "px"
                    apartamentosUI.style.maxWidth = 500 + "px"
                    apartamentosUI.innerText = "Obteniendo apartamentos..."
                    document.querySelector("main").appendChild(apartamentosUI)
                    const transaccion = {
                        zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[componente=menuVolatil][instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    if (respuestaServidor?.error) {
                        instanciaRenderizada.remove()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        instanciaRenderizada.innerHTML = null
                        const apartamentosDisponibles = respuestaServidor?.ok
                        apartamentosDisponibles.forEach((apartamentoDisponible) => {
                            const apartamentoIDV = apartamentoDisponible.apartamentoIDV
                            const apartamentoUI = apartamentoDisponible.apartamentoUI
                            const estadoUI = apartamentoDisponible.estadoUI
                            const apartamentoDetallesUI = document.createElement("div")
                            apartamentoDetallesUI.classList.add("crearOfertaApartamentoUI")
                            apartamentoDetallesUI.addEventListener("click", (e) => {
                                casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarApartamento({
                                    e,
                                    destino: destino
                                })
                            })
                            apartamentoDetallesUI.setAttribute("apartamentoIDV", apartamentoIDV)
                            apartamentoDetallesUI.setAttribute("apartamentoUI", apartamentoUI)
                            apartamentoDetallesUI.setAttribute("apartamentoComoOpcion", apartamentoIDV)
                            const apartamentoTitulo = document.createElement("p")
                            apartamentoTitulo.classList.add("crearOfertaApartamentoTItulo")
                            apartamentoTitulo.innerText = apartamentoUI
                            apartamentoDetallesUI.appendChild(apartamentoTitulo)
                            const apartamentoEstadoUI = document.createElement("p")
                            apartamentoEstadoUI.classList.add("crearOfertaApartamentoEstado")
                            apartamentoEstadoUI.setAttribute("estadouI", estadoUI)
                            apartamentoEstadoUI.innerText = estadoUI
                            apartamentoDetallesUI.appendChild(apartamentoEstadoUI)
                            instanciaRenderizada.appendChild(apartamentoDetallesUI)
                        })
                        const selectorApartamentoYaRenderizado = document.querySelectorAll(`[apartamentoComoOpcion]`)
                        if (selectorApartamentoYaRenderizado.length === 0) {
                            const info = document.createElement("p")
                            info.classList.add("crearApartamentoInfoSinApartamento")
                            info.setAttribute("componente", "infoSinApartamento")
                            info.innerText = "Todos los apartamentos disponibles est√°n insertados en la oferta."
                            instanciaRenderizada.appendChild(info)
                        }
                    }
                },
                ocultarMenusVolatiles: (menuVolatil) => {
                    let componente = menuVolatil?.target.getAttribute("componente")
                    if (componente === "menuDesplegable") {

                    }
                    if (componente !== "menuVolatil") {
                        let selectorMenusVolatiles = document.querySelectorAll("[componente=menuVolatil]")
                        document.removeEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.ocultarMenusVolatiles)
                        selectorMenusVolatiles.forEach(menuVolatil => {
                            menuVolatil.remove()
                        })
                    }
                },
                insertarApartamento: (data) => {
                    const apartamento = data.e
                    const destino = data.destino
                    const apartamentoIDV = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV")
                    const apartamentoUI = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoUI")
                    const detallesApartamento = {
                        apartamentoIDV: apartamentoIDV,
                        apartamentoUI: apartamentoUI
                    }
                    //Descuento dedicado
                    const opciones = {
                        apartamentoIDV: apartamentoIDV,
                        apartamentoUI: apartamentoUI
                    }
                    const descuentoDedicadoUI = casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarOpcionesApartamento(opciones)


                    const zonaDescuentoDedicados = document.querySelector(destino)

                    zonaDescuentoDedicados.style.display = "grid"
                    zonaDescuentoDedicados.appendChild(descuentoDedicadoUI)
                },
                insertarApartamentoUI: async (detallesApartmento) => {
                    let apartamentoIDV = detallesApartmento.apartamentoIDV
                    let apartamentoUI = detallesApartmento.apartamentoUI
                    let apartamentoSeleccionadoUI = document.createElement("div")
                    apartamentoSeleccionadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                    apartamentoSeleccionadoUI.setAttribute("apartamentoSeleccionado", apartamentoIDV)
                    let tituloApartamento = document.createElement("div")
                    tituloApartamento.classList.add("crearOfertaApartamentoSeleccionadoUITitulo")
                    tituloApartamento.innerText = apartamentoUI
                    apartamentoSeleccionadoUI.appendChild(tituloApartamento)
                    let botonEliminarApartamento = document.createElement("div")
                    botonEliminarApartamento.classList.add("crearOfertaBoton")
                    botonEliminarApartamento.innerText = "Eliminar apartamento333"
                    botonEliminarApartamento.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.eliminarApartamenro)
                    apartamentoSeleccionadoUI.appendChild(botonEliminarApartamento)
                    return apartamentoSeleccionadoUI
                },
                insertarOpcionesApartamento: (opcionesApartamento) => {
                    const apartamentoIDV = opcionesApartamento.apartamentoIDV
                    const apartamentoUI = opcionesApartamento.apartamentoUI
                    const cantidad = opcionesApartamento.cantidad ? opcionesApartamento.cantidad : null
                    const simboloIDV = opcionesApartamento.simboloIDV ? opcionesApartamento.simboloIDV : null
                    const descuentoDedicadoUI = document.createElement("div")
                    descuentoDedicadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                    descuentoDedicadoUI.setAttribute("descuentoDedicadoUI", apartamentoUI)
                    descuentoDedicadoUI.setAttribute("descuentoDedicadoIDV", apartamentoIDV)
                    descuentoDedicadoUI.setAttribute("apartamentoSeleccionado", apartamentoIDV)
                    descuentoDedicadoUI.setAttribute("contenedor", "apartamentoDedicado")
                    tituloApartamento = document.createElement("div")
                    tituloApartamento.classList.add("crearOfertaDescuentoDedicadoUITitulo")
                    tituloApartamento.innerText = apartamentoUI
                    descuentoDedicadoUI.appendChild(tituloApartamento)
                    const cantidadUI = document.createElement("input")
                    cantidadUI.classList.add("crearOferDescuentoDedicadoCantidad")
                    cantidadUI.setAttribute("campoApartamentoSeleccionado", "cantidad")
                    cantidadUI.placeholder = "Inserta la cantidad"
                    cantidadUI.value = cantidad
                    descuentoDedicadoUI.appendChild(cantidadUI)
                    const tipoDescuento = document.createElement("select")
                    tipoDescuento.classList.add("crearOfertaDescuentoDedicadoListaTipoDescuento")
                    tipoDescuento.setAttribute("campoApartamentoSeleccionado", "simboloIDV")
                    const opcionPredeterminada = document.createElement("option")
                    if (!simboloIDV) {
                        opcionPredeterminada.selected = true;
                    }
                    opcionPredeterminada.disabled = true;
                    opcionPredeterminada.value = "no"
                    opcionPredeterminada.text = "Selecciona el tipo de comportamiento."
                    tipoDescuento.appendChild(opcionPredeterminada)
                    const opciones = [
                        { value: "aumentoPorcentaje", text: "Aumentar precio por porcentaje." },
                        { value: "aumentoCantidad", text: "Aumentar precio por cantidad." },
                        { value: "reducirCantidad", text: "Reducir precio por cantidad" },
                        { value: "reducirPorcentaje", text: "Reducir precio por porcentaje" },
                        { value: "precioEstablecido", text: "Establecer el precio" }
                    ];
                    for (const opcionData of opciones) {
                        const opcion = document.createElement("option");
                        if (simboloIDV === opcionData.value) {
                            opcion.selected = true;
                        }
                        opcion.value = opcionData.value;
                        opcion.text = opcionData.text;
                        opcion.setAttribute("apartamentoIDV", apartamentoIDV);
                        tipoDescuento.appendChild(opcion);
                    }
                    descuentoDedicadoUI.appendChild(tipoDescuento)
                    const botonEliminarApartamento = document.createElement("div")
                    botonEliminarApartamento.classList.add("crearComportamientoBotonEliminarApartamento")
                    botonEliminarApartamento.innerText = "Eliminar apartamento"
                    //botonEliminarApartamento.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.eliminarApartamenro)
                    botonEliminarApartamento.addEventListener("click", (e) => {
                        const apartamentoRenderizado = e.target.closest("[apartamentoSeleccionado]")
                        const area = e.target.closest("[componente=zonaAnadirApartamento]")
                        apartamentoRenderizado.remove()

                        const conteoApartamentos = area.querySelectorAll(`[apartamentoSeleccionado]`)
                        if (conteoApartamentos.length === 0) {
                            area.querySelector("[componente=infoSinApartamento]").removeAttribute("style")
                        }
                    })
                    descuentoDedicadoUI.appendChild(botonEliminarApartamento)
                    return descuentoDedicadoUI
                },
                eliminarApartamenro: (apartamento) => {
                    let apartamentoIDV = apartamento.target.parentNode.getAttribute("apartamentoSeleccionado")
                    apartamento.target.parentNode.remove()
                    let conteoDescuentoDedicados = document.querySelector("[componente=comportamientoSuperBloque]").querySelectorAll("[descuentoDedicadoUI]")
                    if (conteoDescuentoDedicados.length === 0) {
                        document.querySelector("[componente=infoDescuentoDedicados]").removeAttribute("style")
                        document.querySelector("[componente=comportamientoSuperBloque]").style.display = "flex"
                    }
                },
                opcionesOferta: (opcion) => {
                    let opciones = opcion.target.value
                    //Primer oculta todo
                    let selectorOpciones = document.querySelectorAll("[controladorDesliegue]")
                    selectorOpciones.forEach((opcion) => {
                        opcion.classList.add("estadoInicialInvisible")
                    })
                    //Luego despliega
                    let zonaDespliegue
                    if (opciones === "totalNetoApartamentoDedicado") {
                        zonaDespliegue = "descuentosDedicados"
                    }
                    if (opciones === "totalNetoApartmento") {
                        zonaDespliegue = "descuentoGlobal"
                    }
                    if (opciones === "totalNetoReserva") {
                        zonaDespliegue = "descuentoGlobal"
                    }
                    document.querySelector(`[controladorDesliegue="${zonaDespliegue}"]`)?.classList.remove("estadoInicialInvisible")
                },

            },
            detallesComportamiento: {
                UI: async (comportamientoUID) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/detallesComportamiento",
                        comportamientoUID: String(comportamientoUID)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor?.error) {
                        const titulo = document.querySelector(".titulo")
                        titulo.innerText = "No existe ning√∫n comportamiento de precio con el identificador: " + comportamientoUID
                        return
                    }
                    if (respuestaServidor?.ok) {
                        const detalles = respuestaServidor?.detallesComportamiento
                        const comportamientoUID = detalles.comportamientoUID
                        const estadoIDV = detalles.estadoIDV
                        const espacioOfertas = document.querySelector("[componente=espacioComportamiento]")
                        espacioOfertas.setAttribute("comportamientoUID", comportamientoUID)
                        espacioOfertas.setAttribute("valoresIniciales", JSON.stringify(detalles))
                        const soloLecturaUI = document.createElement("div")
                        soloLecturaUI.classList.add("editarOfertaSoloLecturaUI")
                        const soloLecturaInfo = document.createElement("p")
                        soloLecturaInfo.classList.add("editarOfertaSoloLecutraInfo")
                        soloLecturaInfo.setAttribute("componente", "soloLecturaInfo")
                        soloLecturaInfo.innerText = "Modo solo lectura"
                        soloLecturaUI.appendChild(soloLecturaInfo)
                        espacioOfertas.appendChild(soloLecturaUI)
                        const ofertaUI = await casaVitini.administracion.comportamiento_de_precios.detalleUI("editarOferta")

                        espacioOfertas.appendChild(ofertaUI)

                        const selectorEstadoComportamiento = document.querySelector("[componente=estadoComportamiento]")
                        if (estadoIDV === "desactivado") {
                            selectorEstadoComportamiento.setAttribute("estado", estadoIDV)
                            selectorEstadoComportamiento.innerHTML = "Comportamiento desactivado"
                            selectorEstadoComportamiento.style.background = "#ff000091"
                        }
                        if (estadoIDV === "activado") {
                            selectorEstadoComportamiento.setAttribute("estado", estadoIDV)
                            selectorEstadoComportamiento.style.background = "#00ff006e"
                            selectorEstadoComportamiento.innerHTML = "Comportamiento activado"
                        }
                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.imprimirDatosEnUI()
                    }
                },
                guardarCambiosComportamiento: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando comportamiento de precio..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const main = document.querySelector("main")
                    const comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                    const contenedorComportamiento = casaVitini.administracion.comportamiento_de_precios.constructorObjeto()

                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/actualizarComportamiento",
                        comportamientoUID: String(comportamientoUID),
                        ...contenedorComportamiento

                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const comportamientoActualizado = respuestaServidor.comportamientoActualizado
                        const espacioOfertas = document.querySelector("[componente=espacioComportamiento]")
                        espacioOfertas.setAttribute("valoresIniciales", JSON.stringify(comportamientoActualizado))
                        const modo = {
                            modo: "botonCancelarCambios"
                        }
                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.comportamientoModos(modo)

                    }
                },
                comportamientoModos: (modo) => {
                    let botonModo
                    if (modo.target) {
                        botonModo = modo.target.getAttribute("componente")
                    }
                    if (modo.modo) {
                        botonModo = modo.modo
                    }
                    if (botonModo === "botonEditarOferta") {
                        let selectorBotonesEditar = document.querySelectorAll("[componente=botonEditarOferta]")
                        selectorBotonesEditar.forEach((boton) => {
                            boton.classList.add("elementoOcultoInicialmente")
                        })
                        let selectorBotonesGuardarCambios = document.querySelectorAll("[componente=botonGuardarCambios]")
                        selectorBotonesGuardarCambios.forEach((boton) => {
                            boton.classList.remove("elementoOcultoInicialmente")
                        })
                        let selectorBotonesCancelarCambios = document.querySelectorAll("[componente=botonCancelarCambios]")
                        selectorBotonesCancelarCambios.forEach((boton) => {
                            boton.classList.remove("elementoOcultoInicialmente")
                        })
                        let selectorBotonesEliminarOferta = document.querySelectorAll("[componente=botonEliminarOferta]")
                        selectorBotonesEliminarOferta.forEach((boton) => {
                            boton.classList.remove("elementoOcultoInicialmente")
                        })
                        document.querySelector("[componente=espacioCrearOferta]").classList.remove("eventosDesactivadosInicialmente")
                        document.querySelector("[componente=soloLecturaInfo]").innerText = "Modo edici√≥n"
                    }
                    if (botonModo === "botonCancelarCambios") {
                        document.querySelector("[componente=soloLecturaInfo]").innerText = "Modo solo lectura"

                        const selectorBotonesEditar = document.querySelectorAll("[componente=botonEditarOferta]")
                        selectorBotonesEditar.forEach((boton) => {
                            boton.classList.remove("elementoOcultoInicialmente")
                        })
                        const selectorBotonesGuardarCambios = document.querySelectorAll("[componente=botonGuardarCambios]")
                        selectorBotonesGuardarCambios.forEach((boton) => {
                            boton.classList.add("elementoOcultoInicialmente")
                        })
                        const selectorBotonesCancelarCambios = document.querySelectorAll("[componente=botonCancelarCambios]")
                        selectorBotonesCancelarCambios.forEach((boton) => {
                            boton.classList.add("elementoOcultoInicialmente")
                        })
                        const selectorBotonesEliminarOferta = document.querySelectorAll("[componente=botonEliminarOferta]")
                        selectorBotonesEliminarOferta.forEach((boton) => {
                            boton.classList.add("elementoOcultoInicialmente")
                        })
                        document.querySelector("[componente=espacioCrearOferta]").classList.add("eventosDesactivadosInicialmente")
                        document.querySelector("[componente=soloLecturaInfo]").classList.remove("elementoOcultoInicialmente")

                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.imprimirDatosEnUI()
                    }
                },
                estadoComportamiento: async (estadoOferta) => {
                    let comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                    let selectorEstadoComportamientoUI = document.querySelector("[componente=estadoComportamiento]")
                    let estadoActualMemoriaVolatil = selectorEstadoComportamientoUI.innerText
                    selectorEstadoComportamientoUI.innerText = "Esperando al servidor...."
                    let estadoOfertaActual = estadoOferta.target.getAttribute("estado")
                    let estadoComportamientoPropuesto
                    if (estadoOfertaActual === "desactivado") {
                        estadoComportamientoPropuesto = "activado"
                    }
                    if (estadoOfertaActual === "activado") {
                        estadoComportamientoPropuesto = "desactivado"
                    }
                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/actualizarEstadoComportamiento",
                        comportamientoUID: String(comportamientoUID),
                        estadoPropuesto: estadoComportamientoPropuesto
                    }
                    let respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        document.querySelector("[componente=estadoComportamiento]").innerText = estadoActualMemoriaVolatil
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        let estadoComportamientoConfirmado = respuestaServidor?.estadoComportamiento
                        selectorEstadoComportamientoUI.setAttribute("estado", estadoComportamientoConfirmado)
                        let estadoComportamientoUI
                        if (estadoComportamientoConfirmado === "activado") {
                            selectorEstadoComportamientoUI.style.background = "#00ff006e"
                            estadoComportamientoUI = "Comportamiento activado"
                        }
                        if (estadoComportamientoConfirmado === "desactivado") {
                            selectorEstadoComportamientoUI.style.background = "#ff000091"
                            estadoComportamientoUI = "Comportamiento desactivado"
                        }
                        selectorEstadoComportamientoUI.innerText = estadoComportamientoUI
                    }
                },
                eliminarComportamiento: {
                    UI: async () => {
                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.innerText = "Confirmar la eliminaci√≥n del comportamiento de precio"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.innerText = "Var a eliminar un comportamiento de precios configurado, ¬øEstas de acuerdo ? "

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.innerText = "Comfirmar la eliminacion"
                        botonAceptar.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.eliminarComportamiento.confirmar)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.innerText = "Cancelar la eliminacion"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    confirmar: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Eliminado el comportamiento del precio..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                        const transaccion = {
                            zona: "administracion/comportamientoDePrecios/eliminarComportamiento",
                            comportamientoUID: String(comportamientoUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vista = `/administracion/comportamiento_de_precios`
                            const navegacion = {
                                vista: vista,
                                //"tipoOrigen": "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                controladoresUI: {
                    opcionesTipo: (tipo) => {
                        const selectorBotones = document.querySelectorAll("[botonTipo]")
                        selectorBotones.forEach((boton) => {
                            boton.removeAttribute("style")
                            boton.removeAttribute("estado")

                        })
                        const botonSeleccionado = document.querySelector(`[botonTipo="${tipo}"]`)
                        if (botonSeleccionado) {
                            botonSeleccionado.style.background = "blue"
                            botonSeleccionado.style.color = "white"
                            botonSeleccionado.setAttribute("estado", "activado")

                        }

                        const selectoresContenedoresTipo = document.querySelectorAll(`[contenedor_tipobloqueo]`)
                        selectoresContenedoresTipo.forEach((contenedor) => {
                            contenedor.removeAttribute("style")
                        })

                        const contenedorSeleccionado = document.querySelector(`[contenedor_tipobloqueo="${tipo}"]`)
                        if (contenedorSeleccionado) {
                            document.querySelector("[contenedor=tipoComportamientos]").classList.remove("ocultoInicial")

                            contenedorSeleccionado.style.display = "flex"
                        }
                    },
                    selectorDiasSemana: (diasArray) => {
                        const selectorDias = document.querySelectorAll("[componente=diaUI]")
                        selectorDias.forEach((dia) => {
                            dia.removeAttribute("style")
                            dia.removeAttribute("estado")
                        })

                        for (const diaIDV of diasArray) {
                            const selectorDia = document.querySelector(`[componente=diaUI][diaIDV="${diaIDV}"]`)
                            selectorDia.setAttribute("estado", "activado")
                            selectorDia.style.background = "blue"
                            selectorDia.style.color = "white"
                        }
                    }

                },
                imprimirDatosEnUI: function () {
                    const datos = JSON.parse(document.querySelector("[valoresIniciales]").getAttribute("valoresIniciales"))
                    const nombreComportamiento = datos.nombreComportamiento
                    const contenedor = datos.contenedor
                    const tipo = contenedor.tipo
                    const apartamentos = contenedor.apartamentos

                    const campoNombre = document.querySelector("[campoOferta=nombreOferta]")
                    campoNombre.value = nombreComportamiento

                    casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.controladoresUI.opcionesTipo(tipo)
                    const areaContenedor = document.querySelector(`[contenedor_tipobloqueo="${tipo}"]`)

                    if (tipo === "porRango") {
                        const contenedorFechasRango = areaContenedor.querySelector("[nombreContenedor=rangoComportamiento]")
                        const selectorFechaInicio = contenedorFechasRango.querySelector("[calendario=entrada]")
                        const selectorFechaFin = contenedorFechasRango.querySelector("[calendario=salida]")
                        const selectorFechaInicioUI = contenedorFechasRango.querySelector("[fechaUI=fechaInicio]")
                        const selectorFechaFinUI = contenedorFechasRango.querySelector("[fechaUI=fechaFin]")

                        const selectorDias = document.querySelectorAll("[componente=diaUI]")
                        selectorDias.forEach((dia) => {
                            dia.removeAttribute("style")
                            dia.removeAttribute("estado")
                        })

                        const fechaInicio = contenedor.fechaInicio
                        const fechaFinal = contenedor.fechaFinal
                        selectorFechaInicio.setAttribute("memoriaVolatil", fechaInicio)
                        selectorFechaFin.setAttribute("memoriaVolatil", fechaFinal)
                        selectorFechaInicioUI.innerText = fechaInicio
                        selectorFechaFinUI.innerText = fechaFinal
                    } else if (tipo === "porDias") {
                        const diasArray = contenedor.dias
                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.controladoresUI.selectorDiasSemana(diasArray)
                    } else if (tipo === "porCreacion") {
                        const selectorFechaInicio = areaContenedor.querySelector("[calendario=entrada]")
                        const selectorFechaFin = areaContenedor.querySelector("[calendario=salida]")
                        const selectorFechaInicioUI = areaContenedor.querySelector("[fechaUI=fechaInicio]")
                        const selectorFechaFinUI = areaContenedor.querySelector("[fechaUI=fechaFin]")

                        const fechaInicio = contenedor.fechaInicio
                        const fechaFinal = contenedor.fechaFinal
                        selectorFechaInicio.setAttribute("memoriaVolatil", fechaInicio)
                        selectorFechaFin.setAttribute("memoriaVolatil", fechaFinal)
                        selectorFechaInicioUI.innerText = fechaInicio
                        selectorFechaFinUI.innerText = fechaFinal

                        const contenedorFechasCreacion = areaContenedor.querySelector("[nombreContenedor=rangoReservaCreacion]")

                        const selectorFechaInicioCreacion = contenedorFechasCreacion.querySelector("[calendario=entrada]")
                        const selectorFechaFinCreacion = contenedorFechasCreacion.querySelector("[calendario=salida]")
                        const selectorFechaInicioUICreacion = contenedorFechasCreacion.querySelector("[fechaUI=fechaInicio]")
                        const selectorFechaFinUICreacion = contenedorFechasCreacion.querySelector("[fechaUI=fechaFin]")

                        const fechaInicio_creacionReserva = contenedor.fechaInicio_creacionReserva
                        const fechaFinal_creacionReserva = contenedor.fechaFinal_creacionReserva
                        selectorFechaInicioCreacion.setAttribute("memoriaVolatil", fechaInicio_creacionReserva)
                        selectorFechaFinCreacion.setAttribute("memoriaVolatil", fechaFinal_creacionReserva)
                        selectorFechaInicioUICreacion.innerText = fechaInicio_creacionReserva
                        selectorFechaFinUICreacion.innerText = fechaFinal_creacionReserva
                    }

                    const contenedorApartamentos = areaContenedor.querySelector(`[componente=zonaAnadirApartamento]`)
                    contenedorApartamentos.querySelector(`[componente=infoSinApartamento]`).style.display = "none"
                    const apartamentosObsoletos = contenedorApartamentos.querySelectorAll("[contenedor=apartamentoDedicado]")
                    apartamentosObsoletos.forEach(apartamento => apartamento.remove())
                    for (const detalleApartamento of apartamentos) {
                        const apartamentoIDV = detalleApartamento.apartamentoIDV
                        const apartamentoUI = detalleApartamento.apartamentoUI
                        const cantidad = detalleApartamento.cantidad
                        const simboloIDV = detalleApartamento.simboloIDV
                        const insertarOpcionesApartamento = casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarOpcionesApartamento({
                            apartamentoIDV: apartamentoIDV,
                            apartamentoUI: apartamentoUI,
                            simboloIDV: simboloIDV,
                            cantidad: cantidad
                        })
                        contenedorApartamentos.appendChild(insertarOpcionesApartamento)
                        // contenedorApartamentos.style.display = "grid"
                    }
                }
            },
            traductorCambioVista: (oferta) => {
                oferta.preventDefault()
                oferta.stopPropagation()
                let vista = oferta.target.closest("[vista]").getAttribute("vista")
                let entrada = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                casaVitini.shell.navegacion.controladorVista(entrada)
            },
            detalleUI: async function (modo) {
                const selector = document.querySelector("[componente=espacioComportamiento]")

                if (modo !== "editarOferta" && modo !== "crearOferta") {
                    const error = "¬øEn qu√© modo quieres que despliegue la interfaz de oferta en editarOferat o en crearOferta"
                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                }

                const divPrincipal = document.createElement("div");
                divPrincipal.setAttribute("componente", "espacioCrearOferta");
                divPrincipal.classList.add("espacioComportamiento");
                selector.appendChild(divPrincipal)

                if (modo === "editarOferta") {
                    divPrincipal.classList.add("eventosDesactivadosInicialmente")
                }

                const divContenedorNombreYEstado = document.createElement("div");
                if (modo === "editarOferta") {
                    divContenedorNombreYEstado.classList.add("crearOfertaContenedorHorizontalV2");
                }
                if (modo === "crearOferta") {
                    divContenedorNombreYEstado.classList.add("crearOfertaContenedorHorizontal_modoCrear");
                }

                if (modo === "editarOferta") {
                    const botonEstadoOferta = document.createElement("div")
                    botonEstadoOferta.classList.add("creatOfertaBotonEstado")
                    botonEstadoOferta.setAttribute("componente", "estadoComportamiento")
                    botonEstadoOferta.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.estadoComportamiento)
                    botonEstadoOferta.style.pointerEvents = "all"
                    botonEstadoOferta.innerText = "Comportamiento desactivado"
                    divContenedorNombreYEstado.appendChild(botonEstadoOferta)
                }

                //Crear el input
                const input = document.createElement("input");
                input.setAttribute("type", "text");
                input.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                input.setAttribute("campoOferta", "nombreOferta");
                input.setAttribute("placeholder", "Escribe un nombre para idenfiticar el comportamiento");
                divContenedorNombreYEstado.appendChild(input)
                divPrincipal.appendChild(divContenedorNombreYEstado)
                //Crear el div contenedor

                const selectorTipoComportamiento = this.compomentesUI.barraGlobal()
                divPrincipal.appendChild(selectorTipoComportamiento)

                const contenedorTipoComportamiento = document.createElement("div")
                contenedorTipoComportamiento.setAttribute("contenedor", "tipoComportamientos")
                contenedorTipoComportamiento.classList.add(
                    "flexVertical",
                    "backgroundGrey1",
                    "padding6",
                    "borderRadius12",
                    "ocultoInicial"
                )
                divPrincipal.appendChild(contenedorTipoComportamiento)

                const contenedorPorRango = this.compomentesUI.perfilesComportamiento.porRango()
                contenedorTipoComportamiento.appendChild(contenedorPorRango)
                const contenedorPorDias = this.compomentesUI.perfilesComportamiento.porDias()
                contenedorTipoComportamiento.appendChild(contenedorPorDias)
                const contenedorPorCreacion = await this.compomentesUI.perfilesComportamiento.porCreacion()
                contenedorTipoComportamiento.appendChild(contenedorPorCreacion)


                const divCrearOfertaEpacioBotones_3 = document.createElement("div");
                divCrearOfertaEpacioBotones_3.classList.add("crearOfertaEpacioBotones");
                divCrearOfertaEpacioBotones_3.style.pointerEvents = "all"
                //Crear el p√°rrafo "Crear oferta" dentro del segundo div principal
                const pCrearOfervaBotonV1_3 = document.createElement("p");
                pCrearOfervaBotonV1_3.classList.add("crearOfervaBotonV1");
                pCrearOfervaBotonV1_3.setAttribute("tipoOferta", "porApartamentoDedicado");
                if (modo === "crearOferta") {
                    pCrearOfervaBotonV1_3.setAttribute("componente", "botonCrearOferta");
                    pCrearOfervaBotonV1_3.textContent = "Crear comportamiento";
                    pCrearOfervaBotonV1_3.addEventListener("click", () => {
                        casaVitini.administracion.comportamiento_de_precios.crearComportamiento.crearComortamientoConfirmar()
                    })
                }
                if (modo === "editarOferta") {
                    pCrearOfervaBotonV1_3.setAttribute("componente", "botonEditarOferta");
                    pCrearOfervaBotonV1_3.textContent = "Editar comportamiento";
                    pCrearOfervaBotonV1_3.style.pointerEvents = "all"
                    pCrearOfervaBotonV1_3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.comportamientoModos)
                }
                //divCrearOfertaEpacioBotones_3.appendChild(pCrearOfervaBotonV1_3);
                const pBotonGuardarOferta_03 = document.createElement("p");
                pBotonGuardarOferta_03.classList.add("crearOfervaBotonV1");
                pBotonGuardarOferta_03.classList.add("elementoOcultoInicialmente");
                pBotonGuardarOferta_03.setAttribute("componente", "botonGuardarCambios");
                pBotonGuardarOferta_03.setAttribute("tipoOferta", "porApartamentoDedicado");
                pBotonGuardarOferta_03.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.guardarCambiosComportamiento)
                pBotonGuardarOferta_03.textContent = "Guardar comportamiento";
                const pBotonCancelarCambiosOferta_O3 = document.createElement("p");
                pBotonCancelarCambiosOferta_O3.classList.add("crearOfervaBotonV1");
                pBotonCancelarCambiosOferta_O3.classList.add("elementoOcultoInicialmente");
                pBotonCancelarCambiosOferta_O3.setAttribute("componente", "botonCancelarCambios");
                pBotonCancelarCambiosOferta_O3.setAttribute("tipoOferta", "porApartamentoDedicado");
                pBotonCancelarCambiosOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.comportamientoModos)
                pBotonCancelarCambiosOferta_O3.textContent = "Cancelar cambios y dejar de editar";
                const pBotonEliminarOferta_O3 = document.createElement("p");
                pBotonEliminarOferta_O3.classList.add("crearOfervaBotonV1");
                pBotonEliminarOferta_O3.classList.add("elementoOcultoInicialmente");
                pBotonEliminarOferta_O3.setAttribute("componente", "botonEliminarOferta");
                pBotonEliminarOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.eliminarComportamiento.UI)
                pBotonEliminarOferta_O3.textContent = "Eliminar comportamiento";
                divCrearOfertaEpacioBotones_3.appendChild(pBotonGuardarOferta_03);
                divCrearOfertaEpacioBotones_3.appendChild(pBotonCancelarCambiosOferta_O3);
                divCrearOfertaEpacioBotones_3.appendChild(pBotonEliminarOferta_O3);
                divPrincipal.appendChild(pCrearOfervaBotonV1_3)
                divPrincipal.appendChild(divCrearOfertaEpacioBotones_3)
                return divPrincipal
                //contenedorTipoComportamiento.appendChild(porApartamentoDedicado);
                //Agregar el div principal al documento body
            },
            compomentesUI: {
                contenedorSelectorApartamento: () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                    const contenedorApartamentos = document.createElement("div")
                    contenedorApartamentos.setAttribute("instanciaUID", instanciaUID)
                    contenedorApartamentos.setAttribute("contenedor", "apartamentosDelComportamiento")
                    contenedorApartamentos.classList.add(
                        "flexVertical",
                        "gap6"
                    );


                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("crearComportameintoEspacioBotones")
                    //Crear el p√°rrafo "A√±adir apartamento" dentro del segundo div interno
                    const pCrearOFertaBotonAnadirApartamento_31 = document.createElement("p");
                    pCrearOFertaBotonAnadirApartamento_31.classList.add("crearOFertaBotonAnadirApartamento");
                    pCrearOFertaBotonAnadirApartamento_31.setAttribute("componente", "botonAnadirApartamentoOferta");
                    pCrearOFertaBotonAnadirApartamento_31.textContent = "A√±adir apartamento";
                    pCrearOFertaBotonAnadirApartamento_31.addEventListener("click", (e) => {
                        casaVitini.administracion.comportamiento_de_precios.crearComportamiento.apartamentosDisponibles({
                            e: e,
                            destino: `[instanciaUID="${instanciaUID}"] [componente=comportamientoSuperBloque]`
                        })
                    })
                    contenedorBotones.appendChild(pCrearOFertaBotonAnadirApartamento_31);
                    contenedorApartamentos.appendChild(contenedorBotones)
                    //Crear el elemento div principal
                    const porApartamentoDedicado = document.createElement("div");
                    porApartamentoDedicado.classList.add("espaciadoInterno");
                    porApartamentoDedicado.setAttribute("zonaOferta", "porApartamentoDedicado");
                    porApartamentoDedicado.setAttribute("contenedor", "apartamentos");
                    //Crear el primer div interno
                    const divCrearOfertaEspacioOpciones_3 = document.createElement("div");
                    divCrearOfertaEspacioOpciones_3.classList.add("administracion_comportamientoPreciso_crearComportameinto_espacioContenedorApartamentos");
                    divCrearOfertaEspacioOpciones_3.setAttribute("componente", "comportamientoSuperBloque")
                    contenedorApartamentos.appendChild(divCrearOfertaEspacioOpciones_3);

                    //Crear el segundo p√°rrafo dentro del quinto div interno
                    const pCrearOfertaTituloOpcion5_3 = document.createElement("p");
                    pCrearOfertaTituloOpcion5_3.classList.add("crearComportamientoConentenedor");
                    pCrearOfertaTituloOpcion5_3.setAttribute("componente", "infoDescuentoDedicados");
                    pCrearOfertaTituloOpcion5_3.textContent =
                        "Ahora mismo no tienes ning√∫n apartamento seleccionado para poder aplicarle un comportamiento de precio.Pulsa en el bot√≥n A√±adir apartamento para comenzar.";
                    divCrearOfertaEspacioOpciones_3.appendChild(pCrearOfertaTituloOpcion5_3);
                    return contenedorApartamentos

                },
                insertarComportamientoPorAntelacion: function (data) {

                    const diasAntelacion = data.diasAntelacion
                    if (!diasAntelacion) {
                        const error = "Inserta al menos un numero"
                        return casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }

                    const selectorPerfilRepedito = document.querySelector(`[perfil=diasAntelacion][diaAntelacion="${diasAntelacion}"]`)
                    if (selectorPerfilRepedito) {
                        const error = `Ya has insertar un perfil para ${diasAntelacion} de antelacion`
                        return casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }

                    const contenedor = document.createElement("div")
                    contenedor.setAttribute("perfil", "diasAntelacion")
                    contenedor.classList.add(
                        "backgroundGrey1",
                        "padding6"
                    )
                    contenedor.setAttribute("diaAntelacion", diasAntelacion)

                    const botonEliminar = document.createElement("div")
                    botonEliminar.classList.add("botonV1")
                    botonEliminar.innerText = "Eliminar comportamiento"
                    botonEliminar.addEventListener("click", (e) => {
                        const contenedorUI = e.target.closest("[perfil=diasAntelacion]")
                        contenedorUI.remove()
                    })
                    contenedor.appendChild(botonEliminar)

                    const titulo = document.createElement("div")
                    titulo.classList.add(
                        "padding6"
                    )
                    titulo.innerText = `Aplicar comportamiento a los apartamentos cuando se haga una reserva con ${diasAntelacion} o m√°s d√≠as de antelaci√≥n`
                    contenedor.appendChild(titulo)


                    const selectorUI = this.contenedorSelectorApartamento()
                    contenedor.appendChild(selectorUI)

                    const destino = document.querySelector("[contenedor=comportamientosPorDiasAntelacion]")
                    destino.appendChild(contenedor)
                },
                barraGlobal: () => {
                    const selectorBoton = (boton) => {
                        const botonID = boton.target.getAttribute("botonTipo")
                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.controladoresUI.opcionesTipo(botonID)
                    }
                    const selectorTipoComportamiento = document.createElement("div")
                    selectorTipoComportamiento.classList.add("selectorTipoComportamiento")

                    const botonTipoComportamiento_porRango = document.createElement("div")
                    botonTipoComportamiento_porRango.classList.add("botonTipoComportamiento")
                    botonTipoComportamiento_porRango.setAttribute("botonTipo", "porRango")
                    botonTipoComportamiento_porRango.innerText = "Por rango de fechas"
                    botonTipoComportamiento_porRango.addEventListener("click", selectorBoton)
                    selectorTipoComportamiento.appendChild(botonTipoComportamiento_porRango)

                    const botonTipoComportamiento_porCreacion = document.createElement("div")
                    botonTipoComportamiento_porCreacion.classList.add("botonTipoComportamiento")
                    botonTipoComportamiento_porCreacion.setAttribute("botonTipo", "porCreacion")
                    botonTipoComportamiento_porCreacion.innerText = "Por rango de fechas y rango de creaci√≥n de reserva"
                    botonTipoComportamiento_porCreacion.addEventListener("click", selectorBoton)
                    selectorTipoComportamiento.appendChild(botonTipoComportamiento_porCreacion)

                    const botonTipoComportamiento_porDias = document.createElement("div")
                    botonTipoComportamiento_porDias.classList.add("botonTipoComportamiento")
                    botonTipoComportamiento_porDias.setAttribute("botonTipo", "porDias")
                    botonTipoComportamiento_porDias.innerText = "Por d√≠as de la semana"
                    botonTipoComportamiento_porDias.addEventListener("click", selectorBoton)
                    selectorTipoComportamiento.appendChild(botonTipoComportamiento_porDias)

                    const botonTipoComportamiento_porDiasAntelacion = document.createElement("div")
                    botonTipoComportamiento_porDiasAntelacion.classList.add("botonTipoComportamiento")
                    botonTipoComportamiento_porDiasAntelacion.setAttribute("botonTipo", "porAntelacion")
                    botonTipoComportamiento_porDiasAntelacion.innerText = "Por d√≠as de antelaci√≥n"
                    botonTipoComportamiento_porDiasAntelacion.addEventListener("click", selectorBoton)
                    //selectorTipoComportamiento.appendChild(botonTipoComportamiento_porDiasAntelacion)
                    return selectorTipoComportamiento
                },
                perfilesComportamiento: {

                    porRango: () => {

                        const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()


                        const contenedorTipoPorRango = document.createElement("div");
                        contenedorTipoPorRango.classList.add("crearComportameintoContendorFechas");
                        contenedorTipoPorRango.setAttribute("contenedor_tipoBloqueo", "porRango")
                        contenedorTipoPorRango.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                        const info = document.createElement("p")
                        info.classList.add(
                            "padding6",
                            "textoCentrado"
                        )
                        info.innerText = "Seleccionar el rango de d√≠as en los cuales se aplicar√° el comportamiento de precio de los apartamentos."
                        contenedorTipoPorRango.appendChild(info)
                        const fechasRangoAplicacion = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            nombreContenedor: "rangoComportamiento",
                            modo: "administracion",
                            sobreControlConfiguracion: {
                                configuracionInicio: {
                                    tituloCalendario: "Seleciona una fecha de inicio del comportamiento"
                                }
                            }
                        })
                        contenedorTipoPorRango.appendChild(fechasRangoAplicacion);
                        //   const contenedorApartamentos = casaVitini.administracion.comportamiento_de_precios.compomentesUI.contenedorSelectorApartamento()
                        const contenedorApartamentos = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: "A√±ade apartamentos para determinar el comportamiento de precio.",
                            tipoDespliegue: "total",
                            metodoPersonalizado: "comportamientoDePrecios",
                            sobreControlConfiguracion: {
                                configuracionFin: {
                                    tituloCalendario: "Seleciona una fecha de de fin del comportamiento"
                                }
                            }
                        })

                        contenedorTipoPorRango.appendChild(contenedorApartamentos);

                        return contenedorTipoPorRango
                    },
                    porCreacion: async () => {
                        const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()

                        const contenedorTipoPorCreacion = document.createElement("div");
                        contenedorTipoPorCreacion.classList.add("crearComportameintoContendorFechas");
                        contenedorTipoPorCreacion.setAttribute("contenedor_tipoBloqueo", "porCreacion")
                        contenedorTipoPorCreacion.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                        const info = document.createElement("p")
                        info.classList.add(
                            "padding6",
                            "textoCentrado"
                        )
                        info.innerText = "Seleccionar el rango de d√≠as en los cuales se aplicar√° el comportamiento de precio de los apartamentos."
                        contenedorTipoPorCreacion.appendChild(info)
                        const fechasRangoAplicacion = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            //metodoSelectorDia: "null"
                            nombreContenedor: "rangoComportamiento",
                            modo: "administracion",
                            sobreControlConfiguracion: {
                                configuracionInicio: {
                                    tituloCalendario: "Seleciona una fecha de inicio del comportamiento"
                                },
                                configuracionFin: {
                                    tituloCalendario: "Seleciona una fecha de de fin del comportamiento"
                                }
                            }
                        })
                        contenedorTipoPorCreacion.appendChild(fechasRangoAplicacion);
                        await casaVitini.utilidades.ralentizador(1)
                        const info1 = document.createElement("p")
                        info1.classList.add(
                            "padding6",
                            "textoCentrado"
                        )
                        info1.innerText = "Selecciona el rango en el cual tiene que estar la fecha de creaci√≥n de la reserva para aplicarse este comportamiento."
                        contenedorTipoPorCreacion.appendChild(info1)
                        const fechasRangoCreacion = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            //metodoSelectorDia: "null"
                            nombreContenedor: "rangoReservaCreacion",
                            modo: "administracion",
                            sobreControlConfiguracion: {
                                configuracionInicio: {
                                    tituloCalendario: "Seleciona la fecha de inicio del rango donde debe de estar la fecha de creaci√≥n de la reserva"
                                },
                                configuracionFin: {
                                    tituloCalendario: "Seleciona una fecha de de fin del rango donde debe de estar la fecha de creaci√≥n de la reserva"
                                }
                            }

                        })
                        contenedorTipoPorCreacion.appendChild(fechasRangoCreacion);

                        //const contenedorApartamentos = casaVitini.administracion.comportamiento_de_precios.compomentesUI.contenedorSelectorApartamento()
                        const contenedorApartamentos = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: "A√±ade apartamentos para determinar el comportamiento de precio.",
                            tipoDespliegue: "total",
                            metodoPersonalizado: "comportamientoDePrecios"
                        })

                        contenedorTipoPorCreacion.appendChild(contenedorApartamentos);

                        return contenedorTipoPorCreacion
                    },
                    porDias: () => {


                        const selectorDiaSemana = (e) => {
                            const dia = e.target
                            const estadoDia = dia.getAttribute("estado")

                            if (estadoDia === "activado") {
                                dia.removeAttribute("style")
                                dia.removeAttribute("estado")
                            } else {
                                dia.setAttribute("estado", "activado")
                                dia.style.background = "blue"
                                dia.style.color = "white"
                            }
                        }

                        const comportamientoPorDias = document.createElement("div")
                        comportamientoPorDias.classList.add("contenedorOculto");
                        comportamientoPorDias.setAttribute("contenedor_tipoBloqueo", "porDias")
                        comportamientoPorDias.classList.add(
                            "flexVertical",
                            "gap6"
                        )

                        const contenedorTipoPorDias = document.createElement("div");
                        contenedorTipoPorDias.classList.add("contenedorPorDias");
                        const dias = [
                            {
                                nombreIDV: "lunes",
                                nombreUI: "Lunes"
                            },
                            {
                                nombreIDV: "martes",
                                nombreUI: "Martes"
                            },
                            {
                                nombreIDV: "miercoles",
                                nombreUI: "Mi√©rcoles"
                            },
                            {
                                nombreIDV: "jueves",
                                nombreUI: "Jueves"
                            },
                            {
                                nombreIDV: "viernes",
                                nombreUI: "Viernes"
                            },
                            {
                                nombreIDV: "sabado",
                                nombreUI: "S√°bado"
                            },
                            {
                                nombreIDV: "domingo",
                                nombreUI: "Domingo"
                            }
                        ]

                        for (const dia of dias) {
                            const nombreUI = dia.nombreUI
                            const nombreIDV = dia.nombreIDV

                            const diaUI = document.createElement("div")
                            diaUI.classList.add("diaUI")
                            diaUI.classList.add("negrita")
                            diaUI.setAttribute("componente", "diaUI")
                            diaUI.setAttribute("diaIDV", nombreIDV)
                            diaUI.innerText = nombreUI
                            diaUI.addEventListener("click", selectorDiaSemana)
                            contenedorTipoPorDias.appendChild(diaUI)
                        }
                        comportamientoPorDias.appendChild(contenedorTipoPorDias);
                        //const contenedorApartamentosParaDias = casaVitini.administracion.comportamiento_de_precios.compomentesUI.contenedorSelectorApartamento()
                        const contenedorApartamentos = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: "A√±ade apartamentos para determinar el comportamiento de precio.",
                            tipoDespliegue: "total",
                            metodoPersonalizado: "comportamientoDePrecios"
                        })

                        comportamientoPorDias.appendChild(contenedorApartamentos);
                        return comportamientoPorDias

                    },
                    porDiasDeAntelacion: () => {
                        const comportamientoPorAntelacion = document.createElement("div")
                        comportamientoPorAntelacion.classList.add("contenedorOculto");
                        comportamientoPorAntelacion.setAttribute("contenedor_tipoBloqueo", "porAntelacion")
                        comportamientoPorAntelacion.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding6"
                        )

                        contenedorTipoComportamiento.appendChild(comportamientoPorAntelacion);
                        const fechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            //metodoSelectorDia: "null",
                            modo: "administracion",

                        })
                        comportamientoPorAntelacion.appendChild(fechasUI)

                        const contenedorSelectorAntelacion = document.createElement("div")
                        contenedorSelectorAntelacion.classList.add(
                            "flexVertical"
                        )
                        comportamientoPorAntelacion.appendChild(contenedorSelectorAntelacion)

                        const botonAnadirComportamientoPorDiasDeAntecion = document.createElement("div")
                        botonAnadirComportamientoPorDiasDeAntecion.classList.add("botonV1")
                        botonAnadirComportamientoPorDiasDeAntecion.innerText = "A√±adir comportamiento por antelacion"
                        botonAnadirComportamientoPorDiasDeAntecion.addEventListener("click", () => {
                            const campoDiasAntelacion = document.querySelector("[campo=diasAntelacion]").value
                            this.compomentesUI.insertarComportamientoPorAntelacion({
                                diasAntelacion: campoDiasAntelacion
                            })
                        })
                        comportamientoPorAntelacion.appendChild(botonAnadirComportamientoPorDiasDeAntecion)

                        const entradDias = document.createElement("input")
                        entradDias.setAttribute("campo", "diasAntelacion")
                        entradDias.type = "number"
                        entradDias.classList.add(
                            "padding6",
                            "borderRadius6"
                        )
                        entradDias.placeholder = "Inserta el numero maximo de dias de antelacion"
                        comportamientoPorAntelacion.appendChild(entradDias)


                        const contenedorPerfilDiasAntelacion = document.createElement("div")
                        contenedorPerfilDiasAntelacion.setAttribute("contenedor", "comportamientosPorDiasAntelacion")
                        comportamientoPorAntelacion.appendChild(contenedorPerfilDiasAntelacion)
                        return comportamientoPorAntelacion
                    }







                },
                comportamientosEnClonfictoUI: (data) => {
                    const comportamientosEnConflicto = data.comportamientosEnConflicto
                    const ui_ = document.createElement("div")
                    ui_.classList.add(
                        "flexVertical",
                        "gap6"
                    )
                    comportamientosEnConflicto.forEach((comportamiento) => {
                        const comportamientoUID = comportamiento.comportamientoUID
                        const nombreComportamiento = comportamiento.nombreComportamiento
                        const apartamentos = comportamiento.contenedor.apartamentos

                        const comportamientoUI = document.createElement("a")
                        comportamientoUI.classList.add(
                            "flexVertical",
                            "borderRadius14",
                            "backgroundWhite3",
                            "padding14",
                            "flexApiladoI",
                            "comportamientoBoton",
                            "ratonDefault",
                            "gap6"
                        )
                        comportamientoUI.setAttribute("href", "/administracion/comportamiento_de_precios/comportamiento:" + comportamientoUID)
                        comportamientoUI.setAttribute("vista", "/administracion/comportamiento_de_precios/comportamiento:" + comportamientoUID)
                        comportamientoUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                        const tituloComportamiento = document.createElement("p")
                        tituloComportamiento.classList.add(
                            "flexAplicadoI"
                        )
                        tituloComportamiento.innerText = "Nombre del comportamiento en conflicto:"
                        comportamientoUI.appendChild(tituloComportamiento)

                        const nombreComportamientoUI = document.createElement("p")
                        nombreComportamientoUI.classList.add(
                            "negrita"
                        )
                        nombreComportamientoUI.innerText = nombreComportamiento
                        comportamientoUI.appendChild(nombreComportamientoUI)

                        const contenedorApartamentosEnConflicto = document.createElement("div")
                        contenedorApartamentosEnConflicto.classList.add(
                            "flexVertical",
                            "gap6"
                        )

                        comportamientoUI.appendChild(contenedorApartamentosEnConflicto)


                        const tituloAC = document.createElement("p")
                        tituloAC.innerText = "Dentro de este comportamiento de precio, los apartamentos siguientes entran en conflicto con este comportameinto:"
                        contenedorApartamentosEnConflicto.appendChild(tituloAC)

                        apartamentos.forEach((apartamento) => {
                            const apartamentoIDV = apartamento.apartamentoIDV
                            const apartamentoUI = apartamento.apartamentoUI

                            const apartUI = document.createElement("div")
                            apartUI.classList.add("flexVertical")

                            const nombre = document.createElement("p")
                            nombre.classList.add("negrita")
                            nombre.innerText = apartamentoUI
                            apartUI.appendChild(nombre)

                            contenedorApartamentosEnConflicto.appendChild(apartUI)
                        })

                        ui_.appendChild(comportamientoUI)
                    })
                    return ui_
                }
            },
            constructorObjeto: () => {
                const tipo = document.querySelector("[botonTipo][estado=activado]")?.getAttribute("botonTipo")
                const nombreComportamiento = document.querySelector("[campoOferta=nombreOferta]").value
                const contenedorGlobal = {
                    nombreComportamiento: nombreComportamiento,
                    contenedor: {
                        tipo
                    }
                }
                const contenedorComportamiento = contenedorGlobal.contenedor
                if (tipo === "porRango") {
                    const area = document.querySelector(`[contenedor_tipobloqueo=porRango]`)
                    const fechaInicio_ISO = area.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinal_ISO = area.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    contenedorComportamiento.fechaInicio = fechaInicio_ISO
                    contenedorComportamiento.fechaFinal = fechaFinal_ISO
                    contenedorComportamiento.apartamentos = []
                    const selectoresApartamentos = document.querySelectorAll(`[contenedor_tipobloqueo=porRango] [apartamentoseleccionado]`)
                    selectoresApartamentos.forEach((apartamentos) => {
                        const apartamentoIDV = apartamentos.getAttribute("descuentoDedicadoIDV")
                        const cantidad = apartamentos.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                        const simboloIDV = apartamentos.querySelector("[campoApartamentoSeleccionado=simboloIDV]").value
                        const apartamentoFinal = {
                            apartamentoIDV: apartamentoIDV,
                            cantidad: cantidad,
                            simboloIDV: simboloIDV
                        }
                        contenedorComportamiento.apartamentos.push(apartamentoFinal)
                    })
                } else if (tipo === "porCreacion") {
                    const area = document.querySelector(`[contenedor_tipobloqueo=porCreacion]`)
                    const contenedorRangoComportamiento = area.querySelector("[nombreContenedor=rangoComportamiento]")
                    const contenedorRangoReservaCreacion = area.querySelector("[nombreContenedor=rangoReservaCreacion]")

                    const fechaInicioRangoComportamiento_ISO = contenedorRangoComportamiento.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinalRangoComportamiento_ISO = contenedorRangoComportamiento.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    const fechaInicioRangoReservaCreacion_ISO = contenedorRangoReservaCreacion.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinalRangoReservaCreacion_ISO = contenedorRangoReservaCreacion.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    contenedorComportamiento.fechaInicio = fechaInicioRangoComportamiento_ISO
                    contenedorComportamiento.fechaFinal = fechaFinalRangoComportamiento_ISO
                    contenedorComportamiento.fechaInicio_creacionReserva = fechaInicioRangoReservaCreacion_ISO
                    contenedorComportamiento.fechaFinal_creacionReserva = fechaFinalRangoReservaCreacion_ISO
                    contenedorComportamiento.apartamentos = []
                    const selectoresApartamentos = document.querySelectorAll(`[contenedor_tipobloqueo=porCreacion] [apartamentoseleccionado]`)
                    selectoresApartamentos.forEach((apartamentos) => {
                        const apartamentoIDV = apartamentos.getAttribute("descuentoDedicadoIDV")
                        const cantidad = apartamentos.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                        const simboloIDV = apartamentos.querySelector("[campoApartamentoSeleccionado=simboloIDV]").value
                        const apartamentoFinal = {
                            apartamentoIDV: apartamentoIDV,
                            cantidad: cantidad,
                            simboloIDV: simboloIDV
                        }
                        contenedorComportamiento.apartamentos.push(apartamentoFinal)
                    })
                } else if (tipo === "porDias") {
                    const selectorDiasSeleccionados = document.querySelectorAll("[componente=diaUI][estado=activado]")
                    const diasSeleccionados = []
                    selectorDiasSeleccionados.forEach((diaSeleecionado) => {
                        const diaIDV = diaSeleecionado.getAttribute("diaIDV")
                        diasSeleccionados.push(diaIDV)
                    })

                    contenedorComportamiento.dias = diasSeleccionados
                    const selectoresApartamentos = document.querySelectorAll(`[contenedor_tipobloqueo=porDias] [apartamentoseleccionado]`)
                    contenedorComportamiento.apartamentos = []

                    selectoresApartamentos.forEach((apartamentos) => {
                        const apartamentoIDV = apartamentos.getAttribute("descuentoDedicadoIDV")
                        const cantidad = apartamentos.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                        const simboloIDV = apartamentos.querySelector("[campoApartamentoSeleccionado=simboloIDV]").value
                        const apartamentoFinal = {
                            apartamentoIDV: apartamentoIDV,
                            cantidad: cantidad,
                            simboloIDV: simboloIDV
                        }
                        contenedorComportamiento.apartamentos.push(apartamentoFinal)
                    })
                } else if (tipo === "porAntelacion") {

                    const area = document.querySelector(`[contenedor_tipobloqueo=porAntelacion]`)
                    const fechaInicio_humana = area.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinal_humana = area.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    const fechaInicio_ISO = casaVitini.utilidades.conversor.fecha_humana_hacia_ISO(fechaInicio_humana)
                    const fechaFinal_ISO = casaVitini.utilidades.conversor.fecha_humana_hacia_ISO(fechaFinal_humana)

                    contenedorComportamiento.fechaInicio = fechaInicio_ISO
                    contenedorComportamiento.fechaFinal = fechaFinal_ISO
                    const contenedorAntelaciones = []
                    const selectorCotnenedorPorAntelacion = document.querySelectorAll(`[contenedor_tipobloqueo=porAntelacion] [diaAntelacion]`)

                    selectorCotnenedorPorAntelacion.forEach((contenedor) => {

                        const diasAntelacion = contenedor.getAttribute("diaAntelacion")
                        const estructura = {
                            diasAntelacion: diasAntelacion,
                            apartamentos: {}
                        }
                        const selectorApartamentosPerfil = contenedor.querySelectorAll("[contenedor=apartamentoDedicado]")
                        selectorApartamentosPerfil.forEach((apartamentoDedicado) => {

                            const apartamentoIDV = apartamentoDedicado.getAttribute("descuentoDedicadoIDV")
                            const cantidad = apartamentoDedicado.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                            const simboloIDV = apartamentoDedicado.querySelector("[campoApartamentoSeleccionado=simboloIDV]").value

                            const estructuraApartametno = {
                                cantidad,
                                simboloIDV
                            }
                            estructura.apartamentos[apartamentoIDV] = estructuraApartametno
                        })
                        contenedorAntelaciones.push(estructura)
                    })

                    contenedorComportamiento.perfilesAntelacion = contenedorAntelaciones
                }
                return contenedorGlobal


            }
        },
        enlacesDePago: {
            arranque: async () => {
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/enlacesDePago")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const directorioUltimo = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const parametros = granuladoURL.parametros
                if (directorioUltimo === "enlaces_de_pago") {
                    return casaVitini.administracion.enlacesDePago.portadaUI()
                } else {
                    if (parametros.enlace) {
                        casaVitini.administracion.enlacesDePago.detallesEnlace.UI(parametros.enlace)
                    }
                }
                const info = {
                    titulo: "No existe ning√∫n enlace de pago con ese identificador.",
                    descripcion: "El enlace de pago que buscas con ese identificador no existe.Comprueba el identificador de la reserva"
                }
                casaVitini.ui.componentes.mensajeSimple(info)
            },
            portadaUI: async () => {
                const espacio = document.querySelector("[componente=enlacesDePago]")
                const contenedor = document.createElement("div")
                contenedor.classList.add("enlacesDePago_contenedor")
                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("enlacesDePago_contenedorBotones")
                const botonCrearEnlace = document.createElement("a")
                botonCrearEnlace.classList.add("gestionDeOfertasBotonCrearOferta")
                botonCrearEnlace.innerText = "Crear un enlace de pago"
                botonCrearEnlace.setAttribute("href", "/administracion/enlaces_de_pago/crear_enlace")
                botonCrearEnlace.setAttribute("vista", "/administracion/enlaces_de_pago/crear_enlace")
                botonCrearEnlace.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                //contenedorBotones.appendChild(botonCrearEnlace)
                contenedor.appendChild(contenedorBotones)
                const contenedorOfertas = document.createElement("div")
                contenedorOfertas.classList.add("comportamintoDePreciosSuperBloque")
                contenedorOfertas.setAttribute("componente", "espacioEnlacesRenderizados")
                contenedor.appendChild(contenedorOfertas)
                espacio.appendChild(contenedor)
                const transaccion = {
                    zona: "administracion/enlacesDePago/obtenerEnlaces"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const espacioEnlacesRenderizados = document.querySelector("[componente=espacioEnlacesRenderizados]")
                    const enlacesCreados = respuestaServidor?.ok
                    if (enlacesCreados.length === 0) {
                        const enlaceUI = document.createElement("a")
                        enlaceUI.classList.add("ofertaUINoHay")
                        const tituloOferta = document.createElement("p")
                        tituloOferta.classList.add("ofertaUITituloOferta")
                        tituloOferta.innerText = "No hay ning√∫n enlace creado.Desde aqu√≠ puedes ver todos los enlaces de pago generados desde las reservas de una forma centralizada.Puedes generar un enlace de pago desde la reserva en la pesta√±a enlaces de pago."
                        enlaceUI.appendChild(tituloOferta)
                        espacioEnlacesRenderizados.appendChild(enlaceUI)
                        return
                    }
                    if (Array.isArray(enlacesCreados) && enlacesCreados.length > 0) {
                        enlacesCreados.forEach((detalleOferta) => {
                            const enlaceUID = detalleOferta.enlace
                            const nombreEnlace = detalleOferta.nombreEnlace
                            const reservaUID = detalleOferta.reservaUID
                            const totalReserva = detalleOferta.totalReserva
                            const cantidad = detalleOferta.cantidad
                            const descripcion = detalleOferta.descripcion
                            const estadoPagoIDV = detalleOferta.estadoPagoIDV
                            const estadoPagoUI = {
                                pagaodo: "Enlace pagado",
                                noPagado: "Enlace no pagado"
                            }
                            const descripcionFinalUI = descripcion ? descripcion : "Este enlace no tiene descripci√≥n"
                            const enlaceUI = document.createElement("a")
                            enlaceUI.classList.add("enlaceUI")
                            enlaceUI.setAttribute("enlaceUID", enlaceUID)
                            //enlaceUI.addEventListener("click", casaVitini.administracion.enlacesDePago.traductorCambioVista)
                            const tituloEnlace = document.createElement("p")
                            tituloEnlace.classList.add("ofertaUITituloOferta")
                            tituloEnlace.setAttribute("valorInicial", nombreEnlace)
                            tituloEnlace.innerText = nombreEnlace
                            enlaceUI.appendChild(tituloEnlace)
                            const precioUI = document.createElement("p")
                            precioUI.classList.add("ofertaUITituloOferta")
                            precioUI.innerText = totalReserva + "$ " + estadoPagoUI[estadoPagoIDV]
                            enlaceUI.appendChild(precioUI)
                            const tituloReserva = document.createElement("a")
                            tituloReserva.classList.add("enlaceUIContenedor_vinculo")
                            tituloReserva.setAttribute("href", "/administracion/reservas/reserva:" + reservaUID + "/enlaces_de_pago")
                            tituloReserva.setAttribute("vista", "/administracion/reservas/reserva:" + reservaUID + "/enlaces_de_pago")
                            tituloReserva.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            tituloReserva.innerText = `Reserva ${reservaUID} (Ir a la reserva)`
                            enlaceUI.appendChild(tituloReserva)
                            const irAlEnlace = document.createElement("a")
                            irAlEnlace.classList.add("enlaceUIContenedor_vinculo")
                            irAlEnlace.setAttribute("href", "/pagos/" + enlaceUID)
                            irAlEnlace.setAttribute("vista", "/pagos/" + enlaceUID)
                            irAlEnlace.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            irAlEnlace.innerText = "Ir al enlace"
                            enlaceUI.appendChild(irAlEnlace)
                            const enlaceUIContenedor = document.createElement("div")
                            enlaceUIContenedor.classList.add("enlaceUIContenedor")
                            const descripcionUI = document.createElement("div")
                            descripcionUI.classList.add("ofertaUITituloFecha")
                            descripcionUI.innerText = "Descripci√≥n del enlace"
                            enlaceUIContenedor.appendChild(descripcionUI)
                            const datoFechaFin = document.createElement("div")
                            datoFechaFin.classList.add("ofertaUIDatoFecha")
                            datoFechaFin.setAttribute("valorInicial", descripcion)
                            datoFechaFin.innerText = descripcionFinalUI
                            enlaceUIContenedor.appendChild(datoFechaFin)
                            enlaceUI.appendChild(enlaceUIContenedor)
                            espacioEnlacesRenderizados.appendChild(enlaceUI)
                        })
                    }
                }
            },
            detallesEnlace: {
                UI: async (uid) => {
                    const transaccion = {
                        zona: "administracion/enlacesDePago/detallesDelEnlace",
                        enlaceUID: Number(uid)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe ningun enlace de pago con ese identificador",
                            descripcion: "El enlace de pago que buscas con ese identificador no existe.Comprueba el identificador de la reserva"
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }
                    if (respuestaServidor?.ok) {
                        const detallesEnlace = respuestaServidor?.ok
                        const uidEnlace = detallesEnlace.reserva
                        const nombreEnlace = detallesEnlace.nombreEnlace
                        const codigo = detallesEnlace.codigo
                        const reserva = detallesEnlace.reserva
                        const precio = detallesEnlace.precio
                        const descripcion = detallesEnlace.descripcion
                        const estadoPago = detallesEnlace.estadoPago
                        let estadoUIFinal
                        if (estadoPago === "sinInformacion") {
                            estadoUIFinal = "Estado del pago sin informacion."
                        }
                        if (estadoPago === "pagado") {
                            estadoUIFinal = "Pago realizado"
                        }
                        if (estadoPago === "noPagado") {
                            estadoUIFinal = "No pagado"
                        }
                        const espacioDetallesEnlace = document.querySelector("[componente=enlacesDePago]")
                        espacioDetallesEnlace.setAttribute("comportamientoUID", uid)
                        const contenedorDetallesEnlace = document.createElement("div")
                        contenedorDetallesEnlace.classList.add("detallesEnlace_contenedor")
                        contenedorDetallesEnlace.setAttribute("enlaceUID", uidEnlace)
                        const nombreEnlaceUI = document.createElement("input")
                        nombreEnlaceUI.classList.add("detallesEnlace_nombreEnlace")
                        nombreEnlaceUI.setAttribute("campo", "nombreEnlace")
                        nombreEnlaceUI.setAttribute("valorInicial", nombreEnlace)
                        nombreEnlaceUI.addEventListener("input", casaVitini.administracion.enlacesDePago.controladorBotones)
                        nombreEnlaceUI.placeholder = "Escribe un nombre para este enlace y poder identificarlo r√°pidamente"
                        nombreEnlaceUI.value = nombreEnlace
                        contenedorDetallesEnlace.appendChild(nombreEnlaceUI)
                        const precioUI = document.createElement("div")
                        precioUI.classList.add("detallesEnlace_precio")
                        precioUI.innerText = precio + "$"
                        contenedorDetallesEnlace.appendChild(precioUI)
                        const estadoPagoUI = document.createElement("div")
                        estadoPagoUI.classList.add("detallesEnlace_estadoPago")
                        estadoPagoUI.innerText = estadoUIFinal
                        contenedorDetallesEnlace.appendChild(estadoPagoUI)
                        const codigoUI = document.createElement("a")
                        codigoUI.classList.add("detallesEnlace_codigo")
                        codigoUI.setAttribute("href", "/pago: " + codigo)
                        codigoUI.setAttribute("vista", "/pago: " + codigo)
                        codigoUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        codigoUI.innerText = "Ir al enlace del pago"
                        contenedorDetallesEnlace.appendChild(codigoUI)
                        const reservaUI = document.createElement("a")
                        reservaUI.classList.add("detallesEnlace_codigo")
                        reservaUI.setAttribute("href", "/administracion/reservas/" + reserva)
                        reservaUI.setAttribute("vista", "/administracion/reservas/" + reserva)
                        reservaUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        reservaUI.innerText = `Ir a la reserva (${reserva})`
                        contenedorDetallesEnlace.appendChild(reservaUI)
                        const descripcionUI = document.createElement("textarea")
                        descripcionUI.classList.add("detallesEnlace_descripcion")
                        descripcionUI.setAttribute("campo", "descripcion")
                        descripcionUI.setAttribute("valorInicial", descripcion)
                        descripcionUI.addEventListener("input", casaVitini.administracion.enlacesDePago.controladorBotones)
                        descripcionUI.placeholder = "No es obligatorio escribir una descripci√≥n, pero si lo necesitas, puedes definir un poco m√°s a este enlace aparte de por su nombre."
                        descripcionUI.value = descripcion
                        contenedorDetallesEnlace.appendChild(descripcionUI)
                        espacioDetallesEnlace.appendChild(contenedorDetallesEnlace)
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("detalesEnlace_contenedorBotones")
                        const botonGuardar = document.createElement("div")
                        botonGuardar.classList.add("detallesEnlace_botonV1")
                        botonGuardar.classList.add("ocultoInicial")
                        botonGuardar.setAttribute("boton", "guardarCambios")
                        botonGuardar.addEventListener("click", casaVitini.administracion.enlacesDePago.guardarCambios)
                        botonGuardar.innerText = "Guardar cambios"
                        contenedorBotones.appendChild(botonGuardar)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("detallesEnlace_botonV1")
                        botonCancelarCambios.classList.add("ocultoInicial")
                        botonCancelarCambios.setAttribute("boton", "cancelarCambios")
                        botonCancelarCambios.innerText = "Cancelar cambios"
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.enlacesDePago.cancelarCambios)
                        contenedorBotones.appendChild(botonCancelarCambios)
                        const botonEliminarEnlace = document.createElement("div")
                        botonEliminarEnlace.classList.add("detallesEnlace_botonV1")
                        botonEliminarEnlace.setAttribute("boton", "eliminarEnlace")
                        botonEliminarEnlace.addEventListener("click", casaVitini.administracion.enlacesDePago.eliminarEnlace.UI)
                        botonEliminarEnlace.innerText = "Eliminar enlace"
                        contenedorBotones.appendChild(botonEliminarEnlace)
                        espacioDetallesEnlace.appendChild(contenedorBotones)
                    }
                    //Acabar el resto de detalles oferta
                }
            },
            cancelarCambios: () => {
                const campos = document.querySelectorAll("[campo]")
                campos.forEach((campo) => {
                    const valorInicial = campo.getAttribute("valorInicial")
                    campo.value = valorInicial
                })
                const botonGuardarCambios = document.querySelector("[boton=guardarCambios]")
                const cancelarCambios = document.querySelector("[boton=cancelarCambios]")
                const eliminarEnlace = document.querySelector("[boton=eliminarEnlace]")
                botonGuardarCambios.removeAttribute("style")
                cancelarCambios.removeAttribute("style")
            },
            eliminarEnlace: {
                UI: async () => {
                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                    const tituloCancelarReserva = document.createElement("p")
                    tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                    tituloCancelarReserva.innerText = "Eliminar enlae de pago"
                    contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)
                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")
                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = "¬øQuieres confirmar la eliminaci√≥n de este enlace de pago? Sus implicaciones ser√°n inmediatas y el enlace de acceso temporal pasar√° a ser obsoleto."
                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)
                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = "Confirmar y eliminar enlace"
                    botonCancelar.addEventListener("click", casaVitini.administracion.enlacesDePago.eliminarEnlace.confirmar)
                    bloqueBotones.appendChild(botonCancelar)
                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion del enlace"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        let selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                        selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)
                },
                confirmar: async () => {
                    let comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/eliminarComportamiento",
                        "comportamientoUID": Number(comportamientoUID)
                    }
                    let respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        let selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                        selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        let vista = `/administracion/comportamiento_de_precios`
                        let navegacion = {
                            "vista": vista,
                            "tipoOrigen": "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                }
            },
            traductorCambioVista: (oferta) => {
                oferta.preventDefault()
                oferta.stopPropagation()
                const vista = oferta.target.closest("[vista]").getAttribute("vista")
                const entrada = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                casaVitini.shell.navegacion.controladorVista(entrada)
            },
            detalleUI: (modo) => {
                if (modo !== "editarOferta" && modo !== "crearOferta") {
                    const error = "¬øEn qu√© modo quieres que despliegue la interfaz de oferta en editarOferat o en crearOferta"
                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                }
                //Crear el elemento div principal
                const divPrincipal = document.createElement("div");
                divPrincipal.setAttribute("componente", "espacioCrearOferta");
                divPrincipal.classList.add("espacioClientes");
                if (modo === "editarOferta") {
                    divPrincipal.classList.add("eventosDesactivadosInicialmente")
                }
                const divContenedorNombreYEstado = document.createElement("div");
                divContenedorNombreYEstado.classList.add("crearOfertaContenedorHorizontalV2");
                const botonEstadoOferta = document.createElement("div")
                botonEstadoOferta.classList.add("creatOfertaBotonEstado")
                botonEstadoOferta.setAttribute("componente", "estadoComportamiento")
                //botonEstadoOferta.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.estadoComportamiento)
                botonEstadoOferta.style.pointerEvents = "all"
                botonEstadoOferta.innerText = "Comportamiento desactivado"
                divContenedorNombreYEstado.appendChild(botonEstadoOferta)
                //Crear el input
                const input = document.createElement("input");
                input.setAttribute("type", "text");
                input.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                input.setAttribute("campoOferta", "nombreOferta");
                input.setAttribute("placeholder", "Escribe un nombre para idenfiticar el comportamiento");
                divContenedorNombreYEstado.appendChild(input)
                divPrincipal.appendChild(divContenedorNombreYEstado)
                //Crear el div contenedor
                const divContenedor = document.createElement("div");
                divContenedor.classList.add("crearOfertaConentenedor");
                //Crear el primer div contenedor horizontal
                const divContenedorHorizontal = document.createElement("div");
                divContenedorHorizontal.classList.add("crearOfertaContenedorHorizontal");
                //Crear el div contenedor de fecha de inicio
                const divContenedorFechaInicio = document.createElement("div");
                divContenedorFechaInicio.classList.add("contenedorFecha");
                divContenedorFechaInicio.setAttribute("calendario", "entrada");
                divContenedorFechaInicio.setAttribute("componente", "inicioOferta");
                //divContenedorFechaInicio.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.constructorCalendario)
                ////Crear el p√°rrafo de la fecha de inicio
                const pFechaInicio = document.createElement("p");
                pFechaInicio.classList.add("tituloFecha");
                pFechaInicio.textContent = "Fecha de inicio";
                //Crear el p√°rrafo de la fecha de inicio seleccionada
                const pFechaInicioSeleccionada = document.createElement("p");
                pFechaInicioSeleccionada.classList.add("fechaInicio");
                pFechaInicioSeleccionada.setAttribute("data", "fechaInicioData");
                pFechaInicioSeleccionada.textContent = "(Seleccionar)";
                //Agregar los elementos al div contenedor de fecha de inicio
                divContenedorFechaInicio.appendChild(pFechaInicio);
                divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);
                //Crear el div contenedor de fecha de fin
                const divContenedorFechaFin = document.createElement("div");
                divContenedorFechaFin.classList.add("contenedorFecha");
                divContenedorFechaFin.setAttribute("calendario", "salida");
                divContenedorFechaFin.setAttribute("componente", "finOferta");
                //divContenedorFechaFin.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.constructorCalendario)
                //Crear el p√°rrafo de la fecha de fin
                const pFechaFin = document.createElement("p");
                pFechaFin.classList.add("tituloFecha");
                pFechaFin.textContent = "Fecha fin";
                //Crear el p√°rrafo de la fecha de fin seleccionada
                const pFechaFinSeleccionada = document.createElement("p");
                pFechaFinSeleccionada.classList.add("fechaFin");
                pFechaFinSeleccionada.setAttribute("data", "fechaFinData");
                pFechaFinSeleccionada.textContent = "(Seleccionar)";
                //Agregar los elementos al div contenedor de fecha de fin
                divContenedorFechaFin.appendChild(pFechaFin);
                divContenedorFechaFin.appendChild(pFechaFinSeleccionada);
                //Agregar los elementos al primer div contenedor horizontal
                divContenedorHorizontal.appendChild(divContenedorFechaInicio);
                divContenedorHorizontal.appendChild(divContenedorFechaFin);
                //Agregar el primer div contenedor horizontal al div contenedor
                divContenedor.appendChild(divContenedorHorizontal);
                //Agregar el div contenedor al div principal
                divPrincipal.appendChild(divContenedor);
                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("crearComportameintoEspacioBotones")
                //Crear el p√°rrafo "A√±adir apartamento" dentro del segundo div interno
                const pCrearOFertaBotonAnadirApartamento_31 = document.createElement("p");
                pCrearOFertaBotonAnadirApartamento_31.classList.add("crearOFertaBotonAnadirApartamento");
                pCrearOFertaBotonAnadirApartamento_31.setAttribute("componente", "botonAnadirApartamentoOferta");
                pCrearOFertaBotonAnadirApartamento_31.textContent = "A√±adir apartamento";
                pCrearOFertaBotonAnadirApartamento_31.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.apartamentosDisponibles)
                contenedorBotones.appendChild(pCrearOFertaBotonAnadirApartamento_31);
                divPrincipal.appendChild(contenedorBotones)
                //Crear el elemento div principal
                const porApartamentoDedicado = document.createElement("div");
                porApartamentoDedicado.classList.add("espaciadoInterno");
                porApartamentoDedicado.setAttribute("zonaOferta", "porApartamentoDedicado");
                //Crear el primer div interno
                const divCrearOfertaEspacioOpciones_3 = document.createElement("div");
                divCrearOfertaEspacioOpciones_3.classList.add("crearOfeartaEspacioOpcionesV3");
                divCrearOfertaEspacioOpciones_3.setAttribute("componente", "comportamientoSuperBloque")
                porApartamentoDedicado.appendChild(divCrearOfertaEspacioOpciones_3);
                //Crear el segundo p√°rrafo dentro del quinto div interno
                const pCrearOfertaTituloOpcion5_3 = document.createElement("p");
                pCrearOfertaTituloOpcion5_3.classList.add("crearComportamientoConentenedor");
                pCrearOfertaTituloOpcion5_3.setAttribute("componente", "infoDescuentoDedicados");
                pCrearOfertaTituloOpcion5_3.textContent =
                    "Ahora mismo no tienes ning√∫n apartamento seleccionado para poder aplicarle un comportamiento de precio. Pulsa en el bot√≥n A√±adir apartamento para comenzar.";
                divCrearOfertaEspacioOpciones_3.appendChild(pCrearOfertaTituloOpcion5_3);
                //Crear el segundo div principal
                const divCrearOfertaEpacioBotones_3 = document.createElement("div");
                divCrearOfertaEpacioBotones_3.classList.add("crearOfertaEpacioBotones");
                divCrearOfertaEpacioBotones_3.style.pointerEvents = "all"
                porApartamentoDedicado.appendChild(divCrearOfertaEpacioBotones_3);
                //Crear el p√°rrafo "Crear oferta" dentro del segundo div principal
                const pCrearOfervaBotonV1_3 = document.createElement("p");
                pCrearOfervaBotonV1_3.classList.add("crearOfervaBotonV1");
                pCrearOfervaBotonV1_3.setAttribute("tipoOferta", "porApartamentoDedicado");
                if (modo === "crearOferta") {
                    pCrearOfervaBotonV1_3.setAttribute("componente", "botonCrearOferta");
                    pCrearOfervaBotonV1_3.textContent = "Crear comportamiento";
                    pCrearOfervaBotonV1_3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.crearComortamientoConfirmar)
                }
                if (modo === "editarOferta") {
                    pCrearOfervaBotonV1_3.setAttribute("componente", "botonEditarOferta");
                    pCrearOfervaBotonV1_3.textContent = "Editar comportamiento";
                    pCrearOfervaBotonV1_3.style.pointerEvents = "all"
                    pCrearOfervaBotonV1_3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.ofertaModos)
                }
                divCrearOfertaEpacioBotones_3.appendChild(pCrearOfervaBotonV1_3);
                const pBotonGuardarOferta_03 = document.createElement("p");
                pBotonGuardarOferta_03.classList.add("crearOfervaBotonV1");
                pBotonGuardarOferta_03.classList.add("elementoOcultoInicialmente");
                pBotonGuardarOferta_03.setAttribute("componente", "botonGuardarCambios");
                pBotonGuardarOferta_03.setAttribute("tipoOferta", "porApartamentoDedicado");
                pBotonGuardarOferta_03.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.guardarCambiosComportamiento)
                pBotonGuardarOferta_03.textContent = "Guardar comportamiento";
                const pBotonCancelarCambiosOferta_O3 = document.createElement("p");
                pBotonCancelarCambiosOferta_O3.classList.add("crearOfervaBotonV1");
                pBotonCancelarCambiosOferta_O3.classList.add("elementoOcultoInicialmente");
                pBotonCancelarCambiosOferta_O3.setAttribute("componente", "botonCancelarCambios");
                pBotonCancelarCambiosOferta_O3.setAttribute("tipoOferta", "porApartamentoDedicado");
                pBotonCancelarCambiosOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.ofertaModos)
                pBotonCancelarCambiosOferta_O3.textContent = "Cancelar cambios y dejar de editar";
                const pBotonEliminarOferta_O3 = document.createElement("p");
                pBotonEliminarOferta_O3.classList.add("crearOfervaBotonV1");
                pBotonEliminarOferta_O3.classList.add("elementoOcultoInicialmente");
                pBotonEliminarOferta_O3.setAttribute("componente", "botonEliminarOferta");
                pBotonEliminarOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.eliminarComportamiento.UI)
                pBotonEliminarOferta_O3.textContent = "Eliminar comportamiento";
                divCrearOfertaEpacioBotones_3.appendChild(pBotonGuardarOferta_03);
                divCrearOfertaEpacioBotones_3.appendChild(pBotonCancelarCambiosOferta_O3);
                divCrearOfertaEpacioBotones_3.appendChild(pBotonEliminarOferta_O3);
                divPrincipal.appendChild(porApartamentoDedicado);
                //Agregar el div principal al documento body
                divPrincipal;
            },
        },
        bloqueos_temporales: {
            arranque: async () => {
                const main = document.querySelector("main")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

                if (comandoInicial === "gestion_de_bloqueos_temporales") {
                    main.setAttribute("zonaCSS", "administracion/gestion_de_bloqueos")
                    casaVitini.administracion.bloqueos_temporales.portadaUI()
                    return

                }
                let interruptor = "ignorar"
                const directoriosFiltrados = []
                granuladoURL.directorios.forEach((directorio) => {
                    if (interruptor === "noIgnorar") {
                        directoriosFiltrados.push(directorio)
                    }
                    if (directorio === "gestion_de_bloqueos_temporales") {
                        interruptor = "noIgnorar"
                    }
                })

                if (directoriosFiltrados.length === 1) {

                    main.setAttribute("zonaCSS", "administracion/gestion_de_bloqueos/por_apartamento")
                    return casaVitini.administracion.bloqueos_temporales.bloqueosPorApartamento.UI(directoriosFiltrados[0])
                } else if (directoriosFiltrados.length === 2) {

                    main.setAttribute("zonaCSS", "administracion/gestion_de_bloqueos/bloqueoUI")
                    return casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.UI(directoriosFiltrados)
                } else {
                    const info = {
                        titulo: "No existe ning√∫n bloqueo temporal con ese identificador.",
                        descripcion: "El bloqueo temporal que buscas con ese identificador no existe.Comprueba el identificador de la reserva"
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                }

            },
            portadaUI: async () => {
                const selectorEspacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")
                const selectorTitulo = document.querySelector("[componente=titulo]")
                selectorTitulo.innerText = "Bloqueos de los Apartamentos"
                const contenedorBotonesPortada = document.createElement("div")
                contenedorBotonesPortada.classList.add("portadaBloqueos_espacioBotones")
                const botonCrearBloqueoUI = document.createElement("a")
                botonCrearBloqueoUI.classList.add("portadaBloqueos_botonV1")
                botonCrearBloqueoUI.innerHTML = "Crear un bloqueo"
                botonCrearBloqueoUI.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/crear_bloqueo")
                botonCrearBloqueoUI.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/crear_bloqueo")
                botonCrearBloqueoUI.addEventListener("click", (boton) => {
                    boton.preventDefault()
                    const vista = boton.target.getAttribute("vista")
                    const navegacion = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(navegacion)
                })
                contenedorBotonesPortada.appendChild(botonCrearBloqueoUI)
                selectorEspacioBotonesGlobales.appendChild(contenedorBotonesPortada)
                const transaccion = {
                    zona: "administracion/bloqueos/listarApartamentosConBloqueos"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const apartamentosConBloqueos = respuestaServidor?.ok
                    if (apartamentosConBloqueos.length === 0) {
                        const informacionUI = document.createElement("div")
                        informacionUI.innerText = "No hay ningun bloqueo configurado"
                        selectorEspacioBloqueos.appendChild(informacionUI)
                    }
                    apartamentosConBloqueos.forEach((detalleDelApartamento) => {
                        const apartamentoIDV = detalleDelApartamento.apartamentoIDV
                        const apartamentoUI = detalleDelApartamento.apartamentoUI
                        const numeroDeBloqueos = detalleDelApartamento.numeroDeBloqueos
                        let mensajeNumeroBloqueos
                        if (numeroDeBloqueos === 1) {
                            mensajeNumeroBloqueos = `Hay ${numeroDeBloqueos} bloqueo configurado para este apartamento`
                        }
                        if (numeroDeBloqueos > 1) {
                            mensajeNumeroBloqueos = `Hay ${numeroDeBloqueos} bloqueos configurados para este apartamento`
                        }
                        const bloqueApartamentoUI = document.createElement("a")
                        bloqueApartamentoUI.classList.add("gestionBloqueoApartamento_bloqueApartamentoUI")
                        bloqueApartamentoUI.setAttribute("apartamentoIDV", apartamentoIDV)
                        bloqueApartamentoUI.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV)
                        bloqueApartamentoUI.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV)
                        bloqueApartamentoUI.addEventListener("click", casaVitini.administracion.bloqueos_temporales.traductorCambioVista)
                        const tituloApartamentoUI = document.createElement("div")
                        tituloApartamentoUI.classList.add("gestionBloqueoApartamento_tituloApartamentoUI")
                        tituloApartamentoUI.classList.add("negrita")
                        tituloApartamentoUI.innerText = apartamentoUI
                        bloqueApartamentoUI.appendChild(tituloApartamentoUI)
                        const numeroBloqueosUI = document.createElement("div")
                        numeroBloqueosUI.classList.add("gestionBloqueoApartamento_numeroBloqueosUI")
                        numeroBloqueosUI.innerText = mensajeNumeroBloqueos
                        bloqueApartamentoUI.appendChild(numeroBloqueosUI)
                        selectorEspacioBloqueos.appendChild(bloqueApartamentoUI)
                    })
                }
            },
            traductorCambioVista: (apartamento) => {
                apartamento.preventDefault()
                apartamento.stopPropagation()
                const vista = apartamento.target.closest("[vista]").getAttribute("vista")
                const entrada = {
                    vista: vista,
                    tipoOrigen: "menuNavegador"
                }
                casaVitini.shell.navegacion.controladorVista(entrada)
            },
            bloqueosPorApartamento: {
                UI: async (apartamento) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const selectorTitulo = document.querySelector("[componente=titulo]")
                    selectorTitulo.innerText = "Bloqueos temporales"
                    const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")
                    const transaccion = {
                        zona: "administracion/bloqueos/listaBloquoeosDelApartamento",
                        apartamentoIDV: apartamento
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada)
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe el identificador del apartamento",
                                descripcion: respuestaServidor.error
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                    if (respuestaServidor?.ok) {
                        const apartamentoIDV = respuestaServidor?.apartamentoIDV
                        const apartamentoUI = respuestaServidor?.apartamentoUI
                        const bloqueos = respuestaServidor?.ok
                        selectorTitulo.innerText = "Bloqueos temporales del " + apartamentoUI
                        if (bloqueos.length === 0) {

                            const mensaje = document.createElement("p")
                            mensaje.innerText = "El apartamento no tiene ning√∫n bloqueo definido"
                            seccionRenderizadaOrigen.appendChild(mensaje)

                        }


                        bloqueos.forEach((detalleBloqueo) => {
                            const tipoBloqueoIDV = detalleBloqueo.tipoBloqueoIDV
                            const fechaInicio = detalleBloqueo.fechaInicio
                            const fechaFin = detalleBloqueo.fechaFin
                            const motivo = detalleBloqueo.motivo
                            const zonaIDV = detalleBloqueo.zonaIDV
                            const bloqueoUID = detalleBloqueo.bloqueoUID


                            //Contenedor bloqueo
                            const bloqueBloqueoUI = document.createElement("a")
                            bloqueBloqueoUI.classList.add("listaBloqueos_bloqueBloqueoUI")
                            bloqueBloqueoUI.setAttribute("bloqueoUID", bloqueoUID)
                            bloqueBloqueoUI.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV + "/" + bloqueoUID)
                            bloqueBloqueoUI.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV + "/" + bloqueoUID)
                            bloqueBloqueoUI.addEventListener("click", casaVitini.administracion.bloqueos_temporales.bloqueosPorApartamento.traductorCambioVista)
                            let tipoBloqueoDefinicion
                            if (tipoBloqueoIDV === "rangoTemporal") {
                                tipoBloqueoDefinicion = "Rango temporal"
                            }
                            if (tipoBloqueoIDV === "permanente") {
                                tipoBloqueoDefinicion = "Permanente"
                            }
                            if (tipoBloqueoIDV === "rangoTemporal") {

                                const fechaInicio_huamna = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio)
                                const fechaFin_huamna = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFin)

                                //Contendor fechas
                                const contenedorFecha = document.createElement("div")
                                contenedorFecha.classList.add("listaBloqueo_contenedorFecha")
                                const contenedorFechaInicio = document.createElement("div")
                                contenedorFechaInicio.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual")
                                const tipoEntradaUITituloUI = document.createElement("div")
                                tipoEntradaUITituloUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_titulo")
                                tipoEntradaUITituloUI.classList.add("negrita")
                                tipoEntradaUITituloUI.innerText = "Fecha de inicio del bloqueo 1"
                                contenedorFechaInicio.appendChild(tipoEntradaUITituloUI)
                                const entradaUI = document.createElement("div")
                                entradaUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_fecha")
                                entradaUI.innerText = fechaInicio_huamna
                                contenedorFechaInicio.appendChild(entradaUI)
                                contenedorFecha.appendChild(contenedorFechaInicio)
                                const contenedorFechaFin = document.createElement("div")
                                contenedorFechaFin.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual")
                                const tipoSalidaUITituloUI = document.createElement("div")
                                tipoSalidaUITituloUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_titulo")
                                tipoSalidaUITituloUI.classList.add("negrita")
                                tipoSalidaUITituloUI.innerText = "Fecha de fin del bloqueo"
                                contenedorFechaFin.appendChild(tipoSalidaUITituloUI)
                                const salidaUI = document.createElement("div")
                                salidaUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_fecha")
                                salidaUI.innerText = fechaFin_huamna
                                contenedorFechaFin.appendChild(salidaUI)
                                contenedorFecha.appendChild(contenedorFechaFin)
                                bloqueBloqueoUI.appendChild(contenedorFecha)
                            }
                            //Contenedor Tipo bloqueo
                            const contenedorTipoBloqueo = document.createElement("div")
                            contenedorTipoBloqueo.classList.add("listaBloqueos_contenedorTipoBloqueo")
                            const tipoBloqueoTituloUI = document.createElement("div")
                            tipoBloqueoTituloUI.classList.add("administracion_bloqueos_listaBloqueos_titutloTipoBloqueo")
                            tipoBloqueoTituloUI.classList.add("negrita")
                            tipoBloqueoTituloUI.innerText = "Tipo bloqueo"
                            contenedorTipoBloqueo.appendChild(tipoBloqueoTituloUI)
                            const tipoBloqueoUI = document.createElement("div")
                            tipoBloqueoUI.classList.add("listaBloqueos_tipoBloqueo")
                            tipoBloqueoUI.innerText = tipoBloqueoDefinicion
                            contenedorTipoBloqueo.appendChild(tipoBloqueoUI)
                            bloqueBloqueoUI.appendChild(contenedorTipoBloqueo)
                            ///Contendor Zona
                            const contenedorZonaUI = document.createElement("div")
                            contenedorZonaUI.classList.add("listaBloqueo_contenedorZonaUI")
                            const tituloZonaUI = document.createElement("div")
                            tituloZonaUI.classList.add("litaBloqueos_tituloZona")
                            tituloZonaUI.classList.add("negrita")
                            tituloZonaUI.innerText = "Contexto de aplicaci√≥n"
                            contenedorZonaUI.appendChild(tituloZonaUI)
                            let zonaDefinicionUI
                            if (zonaIDV === "privado") {
                                zonaDefinicionUI = "Privado - Solo se aplica a la zona de administraci√≥n"
                            }
                            if (zonaIDV === "publico") {
                                zonaDefinicionUI = "P√∫blico - Solo se aplica a la zona publica"
                            } if (zonaIDV === "global") {
                                zonaDefinicionUI = "Global - Se aplica a toda la zona, tando p√∫blica como administrativa"
                            }
                            const zonaUI = document.createElement("div")
                            zonaUI.classList.add("listaBloqueos_zonaUI")
                            zonaUI.innerText = zonaDefinicionUI
                            contenedorZonaUI.appendChild(zonaUI)
                            bloqueBloqueoUI.appendChild(contenedorZonaUI)
                            let motivoFinal
                            if (motivo === null) {
                                motivoFinal = "Este bloqueo no tiene ning√∫n motivo definido, ser√≠a recomendable definir un motivo para poder identificar r√°pidamente porque existe este bloqueo"
                            } else {
                                motivoFinal = motivo
                            }
                            //Motivo
                            //Contenedor motivo bloqueo
                            const contenedorMotivoBloqueo = document.createElement("div")
                            contenedorMotivoBloqueo.classList.add("listaBloqueos_contenedorTipoBloqueo")
                            const motivoBloqueoTituloUI = document.createElement("div")
                            motivoBloqueoTituloUI.classList.add("administracion_bloqueos_listaBloqueos_titutloTipoBloqueo")
                            motivoBloqueoTituloUI.classList.add("negrita")
                            motivoBloqueoTituloUI.innerText = "Motivo del bloqueo"
                            contenedorMotivoBloqueo.appendChild(motivoBloqueoTituloUI)
                            const motivoUI = document.createElement("div")
                            motivoUI.classList.add("listaBloqueos_motivo")
                            motivoUI.innerText = motivoFinal
                            contenedorMotivoBloqueo.appendChild(motivoUI)
                            bloqueBloqueoUI.appendChild(contenedorMotivoBloqueo)
                            selectorEspacioBloqueos.appendChild(bloqueBloqueoUI)
                        })
                    }
                },
                traductorCambioVista: (uidBloqueo) => {
                    uidBloqueo.preventDefault()
                    uidBloqueo.stopPropagation()
                    const vista = uidBloqueo.target.closest("[vista]").getAttribute("vista")
                    const entrada = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(entrada)
                }
            },
            detallesDelBloqueo: {
                UI: async (url) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const apartmentoIDV = url[0]
                    const bloqueoUID = url[1]
                    const selectorTitulo = document.querySelector("[componente=titulo]")
                    selectorTitulo.innerText = "Detalles del bloqueo"
                    const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")
                    const transaccion = {
                        zona: "administracion/bloqueos/detallesDelBloqueo",
                        apartamentoIDV: apartmentoIDV,
                        bloqueoUID: String(bloqueoUID)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe el bloqueo del apartamento",
                            descripcion: respuestaServidor.error
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }
                    if (respuestaServidor?.ok) {
                        const apartamentoIDV = respuestaServidor?.apartamentoIDV
                        const apartamentoUI = respuestaServidor?.apartamentoUI
                        const detallesDelBloqueo = respuestaServidor?.ok
                        const tipoBloqueoIDV = detallesDelBloqueo.tipoBloqueoIDV
                        const fechaInicio = detallesDelBloqueo.fechaInicio
                        const fechaFin = detallesDelBloqueo.fechaFin
                        const motivo = detallesDelBloqueo.motivo
                        const zonaIDV = detallesDelBloqueo.zonaIDV
                        const bloqueoUID = detallesDelBloqueo.bloqueoUID
                        selectorTitulo.innerText = "Detalles del bloqueo " + bloqueoUID + " del " + apartamentoUI
                        const contenedorGlobal = document.createElement("div")
                        contenedorGlobal.classList.add("detallesBloqueos_contenedorGlobal")
                        contenedorGlobal.setAttribute("componente", "contenedorGlobal")
                        //Contenedor bloqueo
                        const bloqueBloqueoUI = document.createElement("div")
                        bloqueBloqueoUI.classList.add("detallesBloqueos_bloqueBloqueoUI")
                        bloqueBloqueoUI.setAttribute("componente", "contenedorDelBloqueo")
                        bloqueBloqueoUI.style.pointerEvents = "none"
                        bloqueBloqueoUI.setAttribute("bloqueoUID", bloqueoUID)
                        bloqueBloqueoUI.setAttribute("apartamentoIDV", apartamentoIDV)
                        let tipoBloqueoDefinicion
                        if (tipoBloqueoIDV === "rangoTemporal") {
                            tipoBloqueoDefinicion = "Rango temporal"
                        }
                        if (tipoBloqueoIDV === "permanente") {
                            tipoBloqueoDefinicion = "Permanente"
                        }
                        //Contenedor Tipo bloqueo
                        const contenedorTipoBloqueo = document.createElement("div")
                        contenedorTipoBloqueo.classList.add("detallesloqueos_contenedorBloquesGlobales")
                        const contenedorTipoBloqueoV2 = document.createElement("div")
                        contenedorTipoBloqueoV2.classList.add("detallesBloqueo_contenedorTipoBloqueoV2")
                        const tipoBloqueoTituloUI = document.createElement("div")
                        tipoBloqueoTituloUI.classList.add("listaBloqueos_titulo")
                        tipoBloqueoTituloUI.classList.add("negrita")
                        tipoBloqueoTituloUI.innerText = "Tipo bloqueo"
                        contenedorTipoBloqueoV2.appendChild(tipoBloqueoTituloUI)
                        const tipoBloqueoUI = document.createElement("select")
                        tipoBloqueoUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                        tipoBloqueoUI.setAttribute("datoBloqueo", "tipoBloqueoIDV")
                        tipoBloqueoUI.setAttribute("datoInicial", tipoBloqueoIDV)
                        tipoBloqueoUI.innerText = tipoBloqueoDefinicion
                        tipoBloqueoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)
                        const opcion_permamente = document.createElement("option");
                        opcion_permamente.value = "permanente";
                        if (tipoBloqueoIDV === "permanente") {
                            opcion_permamente.selected = true;
                        }
                        opcion_permamente.text = "Permanente";
                        tipoBloqueoUI.add(opcion_permamente);
                        const opcion_rangoTemporal = document.createElement("option");
                        if (tipoBloqueoIDV === "rangoTemporal") {
                            opcion_rangoTemporal.selected = true;
                        }
                        opcion_rangoTemporal.value = "rangoTemporal";
                        opcion_rangoTemporal.text = "Rango temporal";
                        tipoBloqueoUI.add(opcion_rangoTemporal);
                        contenedorTipoBloqueoV2.appendChild(tipoBloqueoUI)
                        contenedorTipoBloqueo.appendChild(contenedorTipoBloqueoV2)
                        bloqueBloqueoUI.appendChild(contenedorTipoBloqueo)
                        const contenedorZonaUI = document.createElement("div")
                        contenedorZonaUI.classList.add("detallesBloqueo_contenedorZonaUI")
                        const tituloZonaUI = document.createElement("div")
                        tituloZonaUI.classList.add("listaBloqueos_titulo")
                        tituloZonaUI.classList.add("negrita")
                        tituloZonaUI.innerText = "Contexto de aplicaci√≥n"
                        contenedorZonaUI.appendChild(tituloZonaUI)
                        let zonaDefinicionUI
                        if (zonaIDV === "privado") {
                            zonaDefinicionUI = "Privado - Solo se aplica a la zona de administraci√≥n"
                        }
                        if (zonaIDV === "publico") {
                            zonaDefinicionUI = "P√∫blico - Solo se aplica a la zona publica"
                        } if (zonaIDV === "global") {
                            zonaDefinicionUI = "Global - Se aplica a toda la zona, tando p√∫blica como administrativa"
                        }
                        const zonaUI = document.createElement("select")
                        zonaUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                        zonaUI.setAttribute("datoBloqueo", "zonaIDV")
                        zonaUI.setAttribute("datoInicial", zonaIDV)
                        const opcion_publico = document.createElement("option");
                        if (zonaIDV === "publico") {
                            opcion_publico.selected = true;
                        }
                        opcion_publico.value = "publico";
                        opcion_publico.text = "P√∫blico - Zona p√∫blica";
                        zonaUI.add(opcion_publico);
                        const opcion_privado = document.createElement("option");
                        if (zonaIDV === "privado") {
                            opcion_privado.selected = true;
                        }
                        opcion_privado.value = "privado";
                        opcion_privado.text = "Privado - Zona administrativa";
                        zonaUI.add(opcion_privado);
                        const opcion_global = document.createElement("option");
                        if (zonaIDV === "global") {
                            opcion_global.selected = true;
                        }
                        opcion_global.value = "global";
                        opcion_global.text = "Global - Zona p√∫blica y administrativa";
                        zonaUI.add(opcion_global);
                        contenedorZonaUI.appendChild(zonaUI)
                        contenedorTipoBloqueo.appendChild(contenedorZonaUI)
                        if (tipoBloqueoIDV === "rangoTemporal") {
                            const metadatosconstructorRangoTemporalUI = {
                                fechaInicio,
                                fechaFin,
                                modo: "estadoConDatos"
                            }
                            const selectorRangoUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.selectorRangoTemporalUI(metadatosconstructorRangoTemporalUI)
                            bloqueBloqueoUI.appendChild(selectorRangoUI)
                        }
                        if (tipoBloqueoIDV === "permanente") {
                            const metadatosconstructorRangoTemporalUI = {
                                modo: "estadoInicial"
                            }
                            const selectorRangoUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.selectorRangoTemporalUI(metadatosconstructorRangoTemporalUI)
                            bloqueBloqueoUI.appendChild(selectorRangoUI)
                        }
                        ///Contendor Zona
                        const motivoUI = document.createElement("textarea")
                        motivoUI.classList.add("detalleBloqueos_motivo")
                        motivoUI.setAttribute("componente", "contenedorMotivo")
                        motivoUI.setAttribute("datoBloqueo", "motivoUI")
                        if (motivo === null) {
                            motivoUI.setAttribute("datoInicial", "")
                        } else {
                            motivoUI.setAttribute("datoInicial", motivo)
                        }
                        motivoUI.innerText = motivo
                        motivoUI.rows = 10
                        if (motivo === null) {
                            motivoUI.placeholder = "Este bloqueo no tiene ning√∫n motivo definido, ser√≠a recomendable definir un motivo para poder identificar r√°pidamente porque existe este bloqueo"
                        }
                        bloqueBloqueoUI.appendChild(motivoUI)
                        contenedorGlobal.appendChild(bloqueBloqueoUI)
                        selectorEspacioBloqueos.appendChild(contenedorGlobal)
                        casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.modificar()
                    }
                },
                traductorCambioVista: (uidBloqueo) => {
                    uidBloqueo.preventDefault()
                    uidBloqueo.stopPropagation()
                    const vista = uidBloqueo.target.closest("[vista]").getAttribute("vista")
                    const entrada = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(entrada)
                },
                traductorConstructorCalendario: (calendario) => {
                    const componente = calendario.target.closest("[calendario]")
                    casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.constructorCalendario(componente)
                },


                selectorRangoTemporalUI: (rango) => {
                    const fechaInicio = rango.fechaInicio
                    const fechaFin = rango.fechaFin
                    const modo = rango.modo
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()

                    if (modo !== "estadoInicial" && modo !== "estadoConDatos") {
                        const error = "selectorRAngoTemporalUI necesita un modo, puede ser estadoInicial o estadoConDatos"
                        casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }
                    //Contendor fechas
                    let memoriaVolatilEntrada;
                    let memoriaVolatilSalida;
                    let fechaInicioUI = ""
                    let fechaFinUI = ""
                    if (modo === "estadoConDatos") {
                        fechaInicioUI = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio)
                        fechaFinUI = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFin)
                    }
                    if (modo === "estadoInicial") {
                        fechaInicioUI = "(Seleccionar fecha de inicio)"
                        fechaFinUI = "(Seleccionar fecha de fin)"
                    }
                    const contenedorFecha = document.createElement("div")
                    contenedorFecha.classList.add("detallesDelBloqueo_contenedorFecha")
                    contenedorFecha.setAttribute("componente", "contenedorFechas")
                    contenedorFecha.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                    if (modo === "estadoInicial") {
                        contenedorFecha.style.display = "none"
                    }
                    const contenedorFechaEntrada = document.createElement("div")
                    contenedorFechaEntrada.classList.add("detallesBloqueo_contenedorFechaEntrada")
                    contenedorFechaEntrada.setAttribute("calendario", "entrada")
                    contenedorFechaEntrada.setAttribute("componente", "fechaEntrada")
                    contenedorFechaEntrada.setAttribute("paralizadorEvento", "ocultadorCalendarios")
                    if (modo === "estadoConDatos") {
                        contenedorFechaEntrada.setAttribute("memoriaVolatil", fechaInicio)
                        contenedorFechaEntrada.setAttribute("valorInicial", fechaInicio)
                    }
                    //contenedorFechaEntrada.addEventListener("click", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.traductorConstructorCalendario)
                    contenedorFechaEntrada.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_entrada_perfilSimple",
                            contenedorOrigenIDV: "[calendario=entrada]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "inicioRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Selecciona la fecha de inicio del rango de bloqueo"

                        })
                    })

                    const tipoEntradaUITituloUI = document.createElement("div")
                    tipoEntradaUITituloUI.classList.add("listaBloqueos_titulo")
                    tipoEntradaUITituloUI.classList.add("negrita")
                    tipoEntradaUITituloUI.innerText = "Fecha de inicio del bloqueo 2"
                    contenedorFechaEntrada.appendChild(tipoEntradaUITituloUI)
                    const entradaUI = document.createElement("div")
                    entradaUI.classList.add("listaBloqueos_fecha")
                    entradaUI.setAttribute("fechaUI", "fechaInicio")
                    entradaUI.innerText = fechaInicioUI
                    contenedorFechaEntrada.appendChild(entradaUI)
                    contenedorFecha.appendChild(contenedorFechaEntrada)
                    const contenedorFechaSalida = document.createElement("div")
                    contenedorFechaSalida.classList.add("detallesBloqueo_contenedorFechaSalida")
                    contenedorFechaSalida.setAttribute("calendario", "salida")
                    contenedorFechaSalida.setAttribute("componente", "fechaSalida")
                    contenedorFechaSalida.setAttribute("paralizadorEvento", "ocultadorCalendarios")
                    if (modo === "estadoConDatos") {
                        contenedorFechaSalida.setAttribute("memoriaVolatil", fechaFin)
                        contenedorFechaSalida.setAttribute("valorInicial", fechaFin)
                    }
                    //contenedorFechaSalida.addEventListener("click", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.traductorConstructorCalendario)
                    contenedorFechaSalida.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_salida_perfilSimple",
                            contenedorOrigenIDV: "[calendario=salida]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "finalRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Selecciona la fecha del fin del rango de bloqueo"
                        })
                    })
                    const tipoSalidaUITituloUI = document.createElement("div")
                    tipoSalidaUITituloUI.classList.add("listaBloqueos_titulo")
                    tipoSalidaUITituloUI.classList.add("negrita")
                    tipoSalidaUITituloUI.innerText = "Fecha de fin del bloqueo"
                    contenedorFechaSalida.appendChild(tipoSalidaUITituloUI)
                    const salidaUI = document.createElement("div")
                    salidaUI.classList.add("listaBloqueos_fecha")
                    salidaUI.setAttribute("fechaUI", "fechaFin")
                    salidaUI.innerText = fechaFinUI
                    contenedorFechaSalida.appendChild(salidaUI)
                    contenedorFecha.appendChild(contenedorFechaSalida)
                    return contenedorFecha
                },
                controladorSelectorRangoTemporalUI: (tipoBloqueoUI) => {
                    const tipoBloqueo = tipoBloqueoUI.target.value
                    const selectorContenedorFechas = document.querySelector("[componente=contenedorFechas]")
                    if (tipoBloqueo === "permanente") {
                        if (selectorContenedorFechas) {
                            selectorContenedorFechas.style.display = "none"
                        }
                    }
                    if (tipoBloqueo === "rangoTemporal") {
                        if (selectorContenedorFechas) {
                            selectorContenedorFechas.style.display = "flex"
                        }
                    }
                },
                botonesDetallesBloqueoUI: (configuracion) => {
                    if (configuracion !== "crear" && configuracion !== "modificar" && configuracion !== "guardarEliminar") {
                        const error = "Este componente necesita un tipo de configuraci√≥n, esta puede ser, crear, modificar o guardarEliminar"
                        casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }
                    const selectorContenedorBotonesRenderizado = document.querySelector("[componente=contenedorBotones]")
                    selectorContenedorBotonesRenderizado?.remove()
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("detallesBloqueo_contenedorBotones")
                    contenedorBotones.setAttribute("componente", "contenedorBotones")
                    if (configuracion === "crear") {
                        const botonCrear = document.createElement("div")
                        botonCrear.classList.add("detallesBloqueo_botonV1")
                        botonCrear.innerText = "Crear bloqueo"
                        botonCrear.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.crearBloqueo.transactor()
                        })
                        contenedorBotones.appendChild(botonCrear)
                    }
                    if (configuracion === "modificar") {
                        const botonModificiar = document.createElement("div")
                        botonModificiar.classList.add("detallesBloqueo_botonV1")
                        botonModificiar.innerText = "Modificiar bloqueo"
                        botonModificiar.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.guardarEliminar()
                        })
                        contenedorBotones.appendChild(botonModificiar)
                    }
                    if (configuracion === "guardarEliminar") {
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("detallesBloqueo_botonV1")
                        botonGuardarCambios.innerText = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.guardarCambios()
                        })
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonEliminarBloqueo = document.createElement("div")
                        botonEliminarBloqueo.classList.add("detallesBloqueo_botonV1")
                        botonEliminarBloqueo.innerText = "Eliminar bloqueo"
                        botonEliminarBloqueo.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.eliminarBloqueo.UI()
                        })
                        contenedorBotones.appendChild(botonEliminarBloqueo)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("detallesBloqueo_botonV1")
                        botonCancelarCambios.innerText = "Cancelar cambios"
                        botonCancelarCambios.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.modificar()
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.cancelarCambios()
                        })
                        contenedorBotones.appendChild(botonCancelarCambios)
                    }
                    return contenedorBotones
                },
                controladorBotonesGlobales: {
                    //Crear es para la seccion de crear
                    crear: () => {
                        const selectorContendorGlobal = document.querySelector("[componente=contenedorGlobal]")
                        const botonesGlobalesUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.botonesDetallesBloqueoUI("crear")
                        selectorContendorGlobal.append(botonesGlobalesUI)
                    },
                    modificar: () => {
                        const selectorContendorGlobal = document.querySelector("[componente=contenedorGlobal]")
                        const botonesGlobalesUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.botonesDetallesBloqueoUI("modificar")
                        selectorContendorGlobal.append(botonesGlobalesUI)
                        const selectorContendorBloqueo = document.querySelector("[componente=contenedorDelBloqueo]")
                        selectorContendorBloqueo.style.pointerEvents = "none"
                    },
                    guardarEliminar: () => {
                        const selectorContendorGlobal = document.querySelector("[componente=contenedorGlobal]")
                        const botonesGlobalesUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.botonesDetallesBloqueoUI("guardarEliminar")
                        selectorContendorGlobal.append(botonesGlobalesUI)
                        const selectorContendorBloqueo = document.querySelector("[componente=contenedorDelBloqueo]")
                        selectorContendorBloqueo.style.pointerEvents = "all"
                    }
                },
                guardarCambios: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando bloqueo..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const selectorBloqueUID = document.querySelector("[bloqueoUID]")
                    const bloqueUID = selectorBloqueUID.getAttribute("bloqueoUID")
                    const selectorTipoBloqueo = document.querySelector("[datoBloqueo=tipoBloqueoIDV]")
                    const selectorZona = document.querySelector("[datoBloqueo=zonaIDV]")
                    const bloqueoParaActualizar = casaVitini.administracion.bloqueos_temporales.contructorObjeto()
                    bloqueoParaActualizar.zona = "administracion/bloqueos/modificarBloqueo"
                    bloqueoParaActualizar.bloqueoUID = String(bloqueUID)
                    const selectorMotivo = document.querySelector("[datoBloqueo=motivoUI]")

                    const respuestaServidor = await casaVitini.shell.servidor(bloqueoParaActualizar)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const bloqueoActualizado = respuestaServidor.bloqueo
                        const tipoBloqueoIDV = bloqueoActualizado.tipoBloqueoIDV
                        const fechaInicio = bloqueoActualizado.fechaInicio
                        const fechaFin = bloqueoActualizado.fechaFin
                        const motivo = bloqueoActualizado.motivo || ""
                        const zonaIDV = bloqueoActualizado.zonaIDV

                        if (tipoBloqueoIDV === "rangoTemporal") {
                            const fechaInicio_elemento = document.querySelector("[calendario=entrada]")
                            const fechaFin_elemento = document.querySelector("[calendario=salida]")
                            const fechaInicio_ISO = fechaInicio_elemento.getAttribute("memoriaVolatil")
                            const fechaFin_ISO = fechaFin_elemento.getAttribute("memoriaVolatil")

                            const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio)
                            const fechaFin_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFin)

                            document.querySelector("[fechaUI=fechaInicio]").innerText = fechaInicio_humana
                            fechaInicio_elemento.setAttribute("valorInicial", fechaInicio_ISO)

                            document.querySelector("[fechaUI=fechaFin]").innerText = fechaFin_humana
                            fechaFin_elemento.setAttribute("valorInicial", fechaFin_ISO)
                        } else if (tipoBloqueoIDV === "permanente") {
                            const fechaInicio_elemento = document.querySelector("[calendario=entrada]")
                            const fechaFin_elemento = document.querySelector("[calendario=salida]")
                            fechaInicio_elemento.removeAttribute("memoriaVolatil")
                            fechaFin_elemento.removeAttribute("memoriaVolatil")

                            document.querySelector("[fechaUI=fechaInicio]").innerText = "(Seleccionar)"
                            fechaInicio_elemento.removeAttribute("valorInicial")

                            document.querySelector("[fechaUI=fechaFin]").innerText = "(Seleccionar)"
                            fechaFin_elemento.removeAttribute("valorInicial")
                        }
                        selectorTipoBloqueo.setAttribute("datoInicial", tipoBloqueoIDV)
                        selectorTipoBloqueo.value = tipoBloqueoIDV
                        selectorZona.setAttribute("datoInicial", zonaIDV)
                        selectorZona.value = zonaIDV
                        selectorMotivo.setAttribute("datoInicial", motivo)
                        selectorMotivo.value = motivo
                        casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.modificar()
                        const selectorContendorBloqueo = document.querySelector("[componente=contenedorDelBloqueo]")
                        selectorContendorBloqueo.style.pointerEvents = "none"
                    }
                },
                eliminarBloqueo: {
                    UI: async () => {

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.innerText = "Confirmar eliminar el bloqueo"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.innerText = "Vas a eliminar el bloqueo y sus implicaciones ser√°n inmediatas. ¬øEst√°s de acuerdo?"

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.innerText = "Confirmar la eliminaci√≥n"
                        botonAceptar.addEventListener("click", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.eliminarBloqueo.confirmar)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.innerText = "Cancelar la eliminaci√≥n"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    confirmar: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Elimiando bloqueo..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const bloqueoUID = document.querySelector("[bloqueoUID]").getAttribute("bloqueoUID")
                        const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                        const transaccion = {
                            zona: "administracion/bloqueos/eliminarBloqueo",
                            bloqueoUID: String(bloqueoUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()

                        if (respuestaServidor?.error) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const tipoRetroceso = respuestaServidor?.tipoRetroceso
                            let vistaFinal
                            if (tipoRetroceso === "aPortada") {
                                vistaFinal = `/administracion/gestion_de_bloqueos_temporales`
                            }
                            if (tipoRetroceso === "aApartamento") {
                                vistaFinal = `/administracion/gestion_de_bloqueos_temporales/` + apartamentoIDV
                            }
                            const navegacion = {
                                vista: vistaFinal,
                                //tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                cancelarCambios: () => {
                    //Revertir cambios
                    const tipoBloqueo = document.querySelector("[datoBloqueo=tipoBloqueoIDV]")
                    const zona = document.querySelector("[datoBloqueo=zonaIDV]")
                    const motivo = document.querySelector("[datoBloqueo=motivoUI]")
                    const fechaInicio = document.querySelector("[calendario=entrada]")
                    const fechaFin = document.querySelector("[calendario=salida]")
                    const tipoBloqueoInicial = tipoBloqueo.getAttribute("datoInicial")
                    const zonaInicial = zona.getAttribute("datoInicial")
                    const motivoInicial = motivo.getAttribute("datoInicial") || ""
                    const fechaInicio_valorInicial = fechaInicio.getAttribute("valorInicial")
                    const fechaFin_valorInicial = fechaFin.getAttribute("valorInicial")

                    if (tipoBloqueoInicial === "rangoTemporal") {
                        const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio_valorInicial)
                        const fechaFinal_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFin_valorInicial)

                        fechaInicio.querySelector("[fechaUI=fechaInicio]").innerText = fechaInicio_humana
                        fechaFin.querySelector("[fechaUI=fechaFin]").innerText = fechaFinal_humana
                    }

                    tipoBloqueo.value = tipoBloqueoInicial
                    zona.value = zonaInicial
                    motivo.value = motivoInicial
                    const contenedorFechas = document.querySelector("[componente=contenedorFechas]")
                    if (tipoBloqueoInicial === "rangoTemporal") {
                        contenedorFechas.style.display = "flex"
                    }
                    if (tipoBloqueoInicial === "permanente") {
                        contenedorFechas.style.display = "none"
                    }
                    //Em en el caso de la fecha hay que eliminar las propuestas
                    const selectorNuevasPropuestas = document.querySelectorAll("[componente=bloqueNuevaPropuesta]")
                    selectorNuevasPropuestas.forEach((nuevaPropuesta) => {
                        nuevaPropuesta.remove()
                    })
                }
            },
            componentes: {
                seleccionarDia_antiguo: (dia) => {
                    let diaSeleccionadoComoElemento = dia.target;
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    let diaSeleccionado = dia.target.getAttribute("dia")
                    const diaSeleccionadoTexto = diaSeleccionado.padStart(2, "0")
                    const diaSeleccionadoNumero = Number(diaSeleccionado)
                    let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                    const mesSeleccionadoTexto = mesSeleccionado.padStart(2, "0")
                    const mesmesSeleccionadoNumero = Number(mesSeleccionado)
                    const anoSeleccionado = Number(document.querySelector("[componente=mesReferencia]").getAttribute("ano"))
                    let fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    const fechaSeleccionadaTexto = `${diaSeleccionadoTexto}/${mesSeleccionadoTexto}/${anoSeleccionado}`
                    let selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                    const memoriaVolatilInicialEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatilInicial")
                    let diaInicialEntrada
                    let mesInicialEntrada
                    let anoInicialEntrada
                    if (memoriaVolatilInicialEntrada) {
                        const memoriaVolatilInicialEntradaFormateada = memoriaVolatilInicialEntrada.split("/")
                        diaInicialEntrada = memoriaVolatilInicialEntradaFormateada[0]
                        mesInicialEntrada = memoriaVolatilInicialEntradaFormateada[1]
                        anoInicialEntrada = memoriaVolatilInicialEntradaFormateada[2]
                    }
                    const memoriaVolatilInicialSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatilInicial")
                    let diaSalidaEntrada
                    let mesSalidaEntrada
                    let anoSalidaEntrada
                    if (memoriaVolatilInicialSalida) {
                        const memoriaVolatilInicialSalidaFormateada = memoriaVolatilInicialSalida.split("/")
                        diaSalidaEntrada = memoriaVolatilInicialSalidaFormateada[0]
                        mesSalidaEntrada = memoriaVolatilInicialSalidaFormateada[1]
                        anoSalidaEntrada = memoriaVolatilInicialSalidaFormateada[2]
                    }
                    const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    if (fechaEntradaVolatil_Humana) {
                        const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("/")
                        diaSeleccionadoEntrada = Number(fechaEntradaAarray[0])
                        mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                        anoSeleccionadoEntrada = Number(fechaEntradaAarray[2])
                        datosFechaEntradaSeleccionada = "existen"
                    }
                    const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    let datosFechaSalidaSeleccionada
                    if (fechaSalidaVolatil_Humana) {
                        const fechaSaliraArray = fechaSalidaVolatil_Humana.split("/")
                        diaSeleccionadoSalida = Number(fechaSaliraArray[0])
                        mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                        anoSeleccionadoSalida = Number(fechaSaliraArray[2])
                        datosFechaSalidaSeleccionada = "existen"
                    }
                    selectorDias.forEach((dia) => {
                        //dia.classList.remove("calendarioDiaDisponible")
                        dia.classList.remove("calendarioDiaReserva")
                        dia.classList.remove("calendarioDiaSeleccionado")
                    })
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        if (calendarioIO === "entrada") {
                            document.querySelector("[calendario=entrada][componente=fechaEntrada] [componente=bloqueNuevaPropuesta]")?.remove()
                            if (!memoriaVolatilInicialEntrada) {
                                document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                            }
                            if (memoriaVolatilInicialEntrada) {
                                document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", memoriaVolatilInicialEntrada)
                                if (mesInicialEntrada === mesSeleccionado && anoSeleccionado === anoInicialEntrada) {
                                    selectorDias.forEach((dia) => {
                                        if (Number(dia.getAttribute("dia")) === Number(diaInicialEntrada)) {
                                            dia.classList.add("calendarioDiaSeleccionado")
                                        }
                                        if (Number(dia.getAttribute("dia")) > Number(diaInicialEntrada) && Number(dia.getAttribute("dia")) < diaSalidaEntrada) {
                                            dia.classList.add("calendarioDiaReserva")
                                        }
                                    })
                                }
                            }
                        }
                        if (calendarioIO === "salida") {
                            document.querySelector("[calendario=salida][componente=fechaSalida] [componente=bloqueNuevaPropuesta]")?.remove()
                            if (!memoriaVolatilInicialSalida) {
                                document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                            }
                            if (memoriaVolatilInicialSalida) {
                                document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", memoriaVolatilInicialSalida)
                                if (mesSalidaEntrada === mesSeleccionado && anoSeleccionado === anoSalidaEntrada) {
                                    selectorDias.forEach((dia) => {
                                        if (Number(dia.getAttribute("dia")) === Number(diaSalidaEntrada)) {
                                            dia.classList.add("calendarioDiaSeleccionado")
                                        }
                                        if (Number(dia.getAttribute("dia")) < Number(diaSalidaEntrada) && Number(dia.getAttribute("dia")) > diaInicialEntrada) {
                                            dia.classList.add("calendarioDiaReserva")
                                        }
                                    })
                                }
                            }
                        }
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                    }
                    let diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    diasDisponibles.forEach(diaDisponible => {
                        diaDisponible.removeAttribute("estadoDia")
                        diaDisponible.style.background = ""
                        diaDisponible.style.color = ""
                    })
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaTexto)
                        if (fechaSalidaVolatil_Humana) {
                            if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {
                                        dia.classList.remove("calendarioDiaDisponible")
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                        dia.classList.remove("calendarioDiaDisponible")
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                        const selectorBloqueFechaEntrada = document.querySelector("[calendario=entrada][componente=fechaEntrada]")
                        document.querySelector("[calendario=entrada][componente=fechaEntrada] [componente=bloqueNuevaPropuesta]")?.remove()
                        const bloqueNuevaPropuesta = document.createElement("div")
                        bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaInicio")
                        bloqueNuevaPropuesta.setAttribute("fechaInicioPropuesta", fechaSeleccionadaTexto)
                        bloqueNuevaPropuesta.innerText = `Nueva fecha de inicio de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propueda, guarde los cambios. Para cancelar pulse ne cancelar cambios.`
                        selectorBloqueFechaEntrada.appendChild(bloqueNuevaPropuesta)
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaTexto)
                        //document.querySelector("[calendario=salida]").setAttribute("fechaFinFinal", fechaSeleccionadaUI)
                        if (fechaEntradaVolatil_Humana) {
                            if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                        const selectorBloqueFechaSalida = document.querySelector("[calendario=salida][componente=fechaSalida]")
                        document.querySelector("[calendario=salida][componente=fechaSalida] [componente=bloqueNuevaPropuesta]")?.remove()
                        const bloqueNuevaPropuesta = document.createElement("div")
                        bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaFin")
                        bloqueNuevaPropuesta.setAttribute("fechaFinPropuesta", fechaSeleccionadaTexto)
                        bloqueNuevaPropuesta.innerText = `Nueva fecha de fin de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propuesta, guarde los cambios. Para cancelar, pulse en cancelar cambios.`
                        selectorBloqueFechaSalida.appendChild(bloqueNuevaPropuesta)
                    }
                },
                seleccionarDia: (dia) => {
                    let diaSeleccionadoComoElemento = dia.target;
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    const diaSeleccionado = dia.target.getAttribute("dia").padStart(2, "0")
                    const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                    const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                    let fechaSeleccionada = {
                        dia: diaSeleccionado,
                        mes: mesSeleccionado,
                        ano: anoSeleccionado
                    }
                    const fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    const fechaSeleccionadaTexto = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    let selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                    selectorDias.forEach((dia) => {
                        //dia.classList.remove("calendarioDiaDisponible")
                        dia.classList.remove("calendarioDiaReserva")
                        dia.classList.remove("calendarioDiaSeleccionado")
                    })
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        if (calendarioIO === "entrada") {
                            document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                            //document.querySelector("[dataReserva=fechaEntrada]").innerText = "Seleccionar fecha de entrada"
                        }
                        if (calendarioIO === "salida") {
                            document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                            //document.querySelector("[dataReserva=fechaSalida]").innerText = "Seleccionar fecha de salida"
                        }
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                    }
                    let diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    diasDisponibles.forEach(diaDisponible => {
                        diaDisponible.removeAttribute("estadoDia")
                        diaDisponible.style.background = ""
                        diaDisponible.style.color = ""
                    })
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                    let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    let datosFechaEntradaSeleccionada
                    if (fechaEntradaSelecionda) {
                        const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                        diaSeleccionadoEntrada = fechaEntradaSelecionda_array[0]
                        diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                        mesSeleccionadoEntrada = fechaEntradaSelecionda_array[1]
                        mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                        anoSeleccionadoEntrada = fechaEntradaSelecionda_array[2]
                        anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                        datosFechaEntradaSeleccionada = "existen"
                    }
                    let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    let datosFechaSalidaSeleccionada
                    if (fechaSalidaSelecionda) {
                        const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                        diaSeleccionadoSalida = fechaSalidaSelecionda_array[0]
                        diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                        mesSeleccionadoSalida = fechaSalidaSelecionda_array[1]
                        mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                        anoSeleccionadoSalida = fechaSalidaSelecionda_array[2]
                        anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                        datosFechaSalidaSeleccionada = "existen"
                    }
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("[calendario=entrada]").setAttribute("fechaInicioFinal", fechaSeleccionadaUI)
                        //document.querySelector("[data=fechaInicioData]").innerText = fechaSeleccionadaUI
                        if (fechaSalidaSelecionda) {
                            if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                                selectorDias.forEachEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) <= diaSeleccionadoSalida) {
                                        // dia.classList.remove("calendarioDiaDisponible")
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                        const selectorBloqueFechaEntrada = document.querySelector("[calendario=entrada][componente=fechaEntrada]")
                        document.querySelector("[calendario=entrada][componente=fechaEntrada] [componente=bloqueNuevaPropuesta]")?.remove()
                        const bloqueNuevaPropuesta = document.createElement("div")
                        bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaInicio")
                        bloqueNuevaPropuesta.setAttribute("fechaInicioPropuesta", fechaSeleccionadaTexto)
                        bloqueNuevaPropuesta.innerText = `Nueva fecha de inicio de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propuesta, guarde los cambios. Para cancelar, pulse en cancelar cambios.`
                        selectorBloqueFechaEntrada.appendChild(bloqueNuevaPropuesta)
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("[calendario=salida]").setAttribute("fechaFinFinal", fechaSeleccionadaUI)
                        //document.querySelector("[data=fechaFinData]").innerText = fechaSeleccionadaUI
                        if (fechaEntradaSelecionda) {
                            if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) >= diaSeleccionadoEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                        const selectorBloqueFechaSalida = document.querySelector("[calendario=salida][componente=fechaSalida]")
                        document.querySelector("[calendario=salida][componente=fechaSalida] [componente=bloqueNuevaPropuesta]")?.remove()
                        const bloqueNuevaPropuesta = document.createElement("div")
                        bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaFin")
                        bloqueNuevaPropuesta.setAttribute("fechaFinPropuesta", fechaSeleccionadaTexto)
                        bloqueNuevaPropuesta.innerText = `Nueva fecha de fin de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propuesta, guarde los cambios. Para cancelar pulse en cancelar cambios.`
                        selectorBloqueFechaSalida.appendChild(bloqueNuevaPropuesta)
                    }
                },
            },
            crearBloqueo: {
                arranque: () => {
                    casaVitini.administracion.bloqueos_temporales.crearBloqueo.UI()
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/gestion_de_bloqueos/bloqueoUI")
                },
                UI: async () => {
                    const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")
                    const contenedorGlobal = document.createElement("div")
                    contenedorGlobal.classList.add("detallesBloqueos_contenedorGlobal")
                    contenedorGlobal.setAttribute("componente", "contenedorGlobal")
                    //Contenedor bloqueo
                    const bloqueBloqueoUI = document.createElement("div")
                    bloqueBloqueoUI.classList.add("detallesBloqueos_bloqueBloqueoUI")
                    bloqueBloqueoUI.setAttribute("componente", "contenedorDelBloqueo")
                    //Contenedor selector apartmetnos
                    const contenedorOpcionesTroncales = document.createElement("div")
                    contenedorOpcionesTroncales.classList.add("detallesloqueos_contenedorBloquesGlobales")
                    const contenedorApartamentosV2 = document.createElement("div")
                    contenedorApartamentosV2.classList.add("detallesBloqueo_contenedorTipoBloqueoV2")
                    const tipoApartamentoTituloUI = document.createElement("div")
                    tipoApartamentoTituloUI.classList.add("listaBloqueos_titulo")
                    tipoApartamentoTituloUI.classList.add("negrita")
                    tipoApartamentoTituloUI.innerText = "Apartamento: "
                    contenedorApartamentosV2.appendChild(tipoApartamentoTituloUI)
                    const tipoApartamentoUI = document.createElement("select")
                    tipoApartamentoUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                    tipoApartamentoUI.setAttribute("datoBloqueo", "apartamento")
                    tipoApartamentoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)
                    const tipoApartamentoInicio = document.createElement("option");
                    tipoApartamentoInicio.value = "";
                    tipoApartamentoInicio.selected = true;
                    tipoApartamentoInicio.disabled = true;
                    tipoApartamentoInicio.text = "Seleccionar el apartamento";
                    tipoApartamentoUI.add(tipoApartamentoInicio);
                    const apartamentosArray = await casaVitini.administracion.bloqueos_temporales.crearBloqueo.obtenerApartamentos()
                    if (apartamentosArray.length === 0) {
                        const opcion = document.createElement("option");
                        opcion.value = "";
                        opcion.disabled = true;
                        opcion.text = "No hay ningun apartamento disponible";
                        tipoApartamentoUI.add(opcion);
                    }
                    if (apartamentosArray.length > 0) {
                        apartamentosArray.forEach((detallesApartamento) => {
                            const apartamentoIDV = detallesApartamento.apartamentoIDV
                            const aparatmentoUI = detallesApartamento.apartamentoUI
                            const opcion = document.createElement("option");
                            opcion.value = apartamentoIDV;
                            opcion.text = aparatmentoUI;
                            tipoApartamentoUI.add(opcion);
                        })
                    }
                    contenedorApartamentosV2.appendChild(tipoApartamentoUI)
                    contenedorOpcionesTroncales.appendChild(contenedorApartamentosV2)
                    const contenedorTipoBloqueoV2 = document.createElement("div")
                    contenedorTipoBloqueoV2.classList.add("detallesBloqueo_contenedorTipoBloqueoV2")
                    const tipoBloqueoTituloUI = document.createElement("div")
                    tipoBloqueoTituloUI.classList.add("listaBloqueos_titulo")
                    tipoBloqueoTituloUI.classList.add("negrita")
                    tipoBloqueoTituloUI.innerText = "Tipo bloqueo"
                    contenedorTipoBloqueoV2.appendChild(tipoBloqueoTituloUI)
                    const tipoBloqueoUI = document.createElement("select")
                    tipoBloqueoUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                    tipoBloqueoUI.setAttribute("datoBloqueo", "tipoBloqueoIDV")
                    tipoBloqueoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)
                    const tipoBloqueoInicio = document.createElement("option");
                    tipoBloqueoInicio.value = "";
                    tipoBloqueoInicio.selected = true;
                    tipoBloqueoInicio.disabled = true;
                    tipoBloqueoInicio.text = "Seleccionar el tipo de bloqueo";
                    tipoBloqueoUI.add(tipoBloqueoInicio);
                    const opcion_permamente = document.createElement("option");
                    opcion_permamente.value = "permanente";
                    opcion_permamente.text = "Permanente";
                    tipoBloqueoUI.add(opcion_permamente);
                    const opcion_rangoTemporal = document.createElement("option");
                    opcion_rangoTemporal.value = "rangoTemporal";
                    opcion_rangoTemporal.text = "Rango temporal";
                    tipoBloqueoUI.add(opcion_rangoTemporal);
                    contenedorTipoBloqueoV2.appendChild(tipoBloqueoUI)
                    contenedorOpcionesTroncales.appendChild(contenedorTipoBloqueoV2)
                    const contenedorZonaUI = document.createElement("div")
                    contenedorZonaUI.classList.add("detallesBloqueo_contenedorZonaUI")
                    const tituloZonaUI = document.createElement("div")
                    tituloZonaUI.classList.add("litaBloqueos_tituloZona")
                    tituloZonaUI.classList.add("negrita")
                    tituloZonaUI.innerText = "Contexto de aplicaci√≥n"
                    contenedorZonaUI.appendChild(tituloZonaUI)
                    const zonaUI = document.createElement("select")
                    zonaUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                    zonaUI.setAttribute("datoBloqueo", "zonaIDV")
                    const zonaInicio = document.createElement("option");
                    zonaInicio.value = "";
                    zonaInicio.selected = true;
                    zonaInicio.disabled = true;
                    zonaInicio.text = "Seleccionar en que zona se aplica en bloqueo";
                    zonaUI.add(zonaInicio);
                    const opcion_publico = document.createElement("option");
                    opcion_publico.value = "publico";
                    opcion_publico.text = "P√∫blico - Zona p√∫blica";
                    zonaUI.add(opcion_publico);
                    const opcion_privado = document.createElement("option");
                    opcion_privado.value = "privado";
                    opcion_privado.text = "Privado - Zona administrativa";
                    zonaUI.add(opcion_privado);
                    const opcion_global = document.createElement("option");
                    opcion_global.value = "global";
                    opcion_global.text = "Global - Zona p√∫blica y administrativa";
                    zonaUI.add(opcion_global);
                    contenedorZonaUI.appendChild(zonaUI)
                    contenedorOpcionesTroncales.appendChild(contenedorZonaUI)
                    bloqueBloqueoUI.appendChild(contenedorOpcionesTroncales)
                    const metadatosconstructorRangoTemporalUI = {
                        modo: "estadoInicial"
                    }
                    const selectorRangoUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.selectorRangoTemporalUI(metadatosconstructorRangoTemporalUI)
                    bloqueBloqueoUI.appendChild(selectorRangoUI)
                    ///Contendor Zona
                    const motivoUI = document.createElement("textarea")
                    motivoUI.classList.add("detalleBloqueos_motivo")
                    motivoUI.setAttribute("componente", "contenedorMotivo")
                    motivoUI.setAttribute("datoBloqueo", "motivoUI")
                    motivoUI.rows = 10
                    motivoUI.placeholder = "Escriba una breve descripci√≥n de por qu√© existe este bloqueo. Esto ayudar√° a recordar r√°pidamente por qu√© existe este bloqueo, no es obligatorio pero s√≠ recomendable."
                    bloqueBloqueoUI.appendChild(motivoUI)
                    contenedorGlobal.appendChild(bloqueBloqueoUI)
                    selectorEspacioBloqueos.appendChild(contenedorGlobal)
                    casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.crear()
                },
                transactor: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando bloqueo..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)


                    const bloqueNuevo = casaVitini.administracion.bloqueos_temporales.contructorObjeto()
                    bloqueNuevo.zona = "administracion/bloqueos/crearNuevoBloqueo"

                    const respuestaServidor = await casaVitini.shell.servidor(bloqueNuevo)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const nuevoUID = respuestaServidor?.nuevoBloqueoUID
                        const apartamentoIDV = respuestaServidor.apartamentoIDV
                        const vistaFinal = `/administracion/gestion_de_bloqueos_temporales/` + apartamentoIDV + "/" + nuevoUID
                        const navegacion = {
                            vista: vistaFinal,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                },
                obtenerApartamentos: async () => {
                    const transaccion = {
                        zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        return respuestaServidor?.ok
                    }
                }
            },
            contructorObjeto: () => {
                const apartamentoIDV = document.querySelector("[datoBloqueo=apartamento]")?.value
                const selectorTipoBloqueo = document.querySelector("[datoBloqueo=tipoBloqueoIDV]")
                const tipoBloqueoIDV = selectorTipoBloqueo.value
                const selectorZona = document.querySelector("[datoBloqueo=zonaIDV]")
                const zonaIDV = selectorZona.value
                const fechaInicio = document.querySelector("[calendario=entrada").getAttribute("memoriaVolatil")
                const fechaFin = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                const selectorMotivo = document.querySelector("[datoBloqueo=motivoUI]")
                const motivo = selectorMotivo.value
                const transaccion = {
                    apartamentoIDV,
                    tipoBloqueoIDV,
                    zonaIDV,
                    motivo
                }
                if (tipoBloqueoIDV === "rangoTemporal") {
                    transaccion.fechaInicio = fechaInicio
                    transaccion.fechaFin = fechaFin
                }
                return transaccion
            }
        },
        arquitectura_del_alojamiento: {
            arranque: async () => {
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                casaVitini.administracion.arquitectura_del_alojamiento.portadaUI()
            },
            portadaUI: () => {
                const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                const contenedorBotonesPortada = document.createElement("dv")
                contenedorBotonesPortada.classList.add("confAlojamiento_contenedor")
                const botonAlojameintoUI = document.createElement("a")
                botonAlojameintoUI.classList.add("confAlojamiento_botonPortadaUI")
                botonAlojameintoUI.innerText = "Configuraci√≥n del alojamiento"
                botonAlojameintoUI.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones")
                botonAlojameintoUI.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones")
                botonAlojameintoUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                contenedorBotonesPortada.appendChild(botonAlojameintoUI)
                const botonEntidadesAlojamientoUI = document.createElement("a")
                botonEntidadesAlojamientoUI.classList.add("confAlojamiento_botonPortadaUI")
                botonEntidadesAlojamientoUI.innerText = "Entidades de alojamiento"
                botonEntidadesAlojamientoUI.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades")
                botonEntidadesAlojamientoUI.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades")
                botonEntidadesAlojamientoUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                contenedorBotonesPortada.appendChild(botonEntidadesAlojamientoUI)
                espacioConfiguracionDelAlojamiento.appendChild(contenedorBotonesPortada)
            },
            entidades: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento/entidades")
                    const urlRaw = window.location.pathname;
                    let url = urlRaw.toLowerCase()
                    url = url.split("/")
                    url = url.filter((url) => url)
                    delete url[0]
                    delete url[1]
                    delete url[2]
                    url = url.filter((url) => url)
                    if (url.length === 0) {

                        casaVitini.administracion.arquitectura_del_alojamiento.entidades.portadaUI()

                    } else if (url.length === 1) {

                        //casaVitini.administracion.configuracion_de_alojamiento.bloqueosPorApartamento.UI(url)
                    } else if (url.length === 2) {

                        //casaVitini.administracion.configuracion_de_alojamiento.detallesDelBloqueo.UI(url)
                    }
                },
                portadaUI: async () => {
                    const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                    const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                    const transaccion = {
                        zona: "administracion/arquitectura/entidades/listarEntidadesAlojamiento"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const apartamentos = respuestaServidor?.ok?.apartamentos || []
                        const habitaciones = respuestaServidor?.ok?.habitaciones || []
                        const camas = respuestaServidor?.ok?.camas || []
                        //Contenedor global
                        const contenedorGlobal = document.createElement("div")
                        contenedorGlobal.classList.add("confAlojamiento_entidades_contenedorGlobal")
                        //Apartmentos
                        const contenedorApartamentos = document.createElement("div")
                        contenedorApartamentos.classList.add("confAlojamiento_entidades_contenedor")
                        const contenedorBotonSeccionEntidad = document.createElement("div")
                        contenedorBotonSeccionEntidad.classList.add("confAlojamiento_entidades_contenedorBotones")
                        const botonAnadirApartamento = document.createElement("a")
                        botonAnadirApartamento.classList.add("confAlojamiento_entidades_botonContenedor")
                        botonAnadirApartamento.innerText = "Crear un nuevo apartamento"
                        botonAnadirApartamento.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                        botonAnadirApartamento.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                        botonAnadirApartamento.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        contenedorBotonSeccionEntidad.appendChild(botonAnadirApartamento)
                        contenedorApartamentos.appendChild(contenedorBotonSeccionEntidad)
                        const contenedorApartamentosExistentes = document.createElement("div")
                        contenedorApartamentosExistentes.classList.add("confAlojamiento_entidades_contenedorEntidades")
                        if (apartamentos.length === 0) {
                            const infoNoApartamentoUI = document.createElement("div")
                            infoNoApartamentoUI.classList.add("confAlojamiento_entidades_carteInfo")
                            infoNoApartamentoUI.innerText = "No hay nig√∫n apartamto"
                            contenedorApartamentosExistentes.appendChild(infoNoApartamentoUI)
                        }
                        if (apartamentos.length > 0) {
                            apartamentos.forEach((detalleApartamento) => {
                                const apartamentoIDV = detalleApartamento.apartamentoIDV
                                const apartamentoUI = detalleApartamento.apartamentoUI
                                const estado = detalleApartamento.estado
                                const contenedorDetalleApartamento = document.createElement("a")
                                contenedorDetalleApartamento.classList.add("confAlojamiento_entidades_contenedorDetalles")
                                contenedorDetalleApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                contenedorDetalleApartamento.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/apartamento:" + apartamentoIDV)
                                contenedorDetalleApartamento.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/apartamento:" + apartamentoIDV)
                                contenedorDetalleApartamento.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)
                                const tituloApartamento = document.createElement("div")
                                tituloApartamento.classList.add("confAlojamiento_entidades_titulo")
                                tituloApartamento.classList.add("negrita")
                                tituloApartamento.innerText = apartamentoUI
                                contenedorDetalleApartamento.appendChild(tituloApartamento)
                                const tituloApartamentoIDV = document.createElement("div")
                                tituloApartamentoIDV.classList.add("confAlojamiento_entidades_tituloIDV")
                                tituloApartamentoIDV.innerText = apartamentoIDV
                                contenedorDetalleApartamento.appendChild(tituloApartamentoIDV)
                                contenedorApartamentosExistentes.appendChild(contenedorDetalleApartamento)
                            })
                            contenedorApartamentos.appendChild(contenedorApartamentosExistentes)
                        }
                        contenedorGlobal.appendChild(contenedorApartamentos)
                        //Habitaciones
                        const contenedorHabitaciones = document.createElement("div")
                        contenedorHabitaciones.classList.add("confAlojamiento_entidades_contenedor")
                        const contenedorBotonSeccionHabitacion = document.createElement("div")
                        contenedorBotonSeccionHabitacion.classList.add("confAlojamiento_entidades_contenedorBotones")
                        const botonAnadirHabitacion = document.createElement("a")
                        botonAnadirHabitacion.classList.add("confAlojamiento_entidades_botonContenedor")
                        botonAnadirHabitacion.innerText = "Crear una nueva habitaci√≥n"
                        botonAnadirHabitacion.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:habitacion")
                        botonAnadirHabitacion.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:habitacion")
                        botonAnadirHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)
                        contenedorBotonSeccionHabitacion.appendChild(botonAnadirHabitacion)
                        contenedorHabitaciones.appendChild(contenedorBotonSeccionHabitacion)
                        const contenedorHabitacionesExistentes = document.createElement("div")
                        contenedorHabitacionesExistentes.classList.add("confAlojamiento_entidades_contenedorEntidades")
                        if (habitaciones.length === 0) {
                            const infoNoApartamentoUI = document.createElement("div")
                            infoNoApartamentoUI.classList.add("confAlojamiento_entidades_carteInfo")
                            infoNoApartamentoUI.innerText = "No hay ninguna habitacion construida"
                            contenedorHabitacionesExistentes.appendChild(infoNoApartamentoUI)
                        }
                        if (habitaciones.length > 0) {
                            habitaciones.forEach((detallesHabitacion) => {
                                const habitacionIDV = detallesHabitacion.habitacionIDV
                                const habitacionUI = detallesHabitacion.habitacionUI
                                const contenedorDetalleHabitacion = document.createElement("a")
                                contenedorDetalleHabitacion.classList.add("confAlojamiento_entidades_contenedorDetalles")
                                contenedorDetalleHabitacion.setAttribute("habitacionIDV", habitacionIDV)
                                contenedorDetalleHabitacion.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/habitacion: " + habitacionIDV)
                                contenedorDetalleHabitacion.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/habitacion: " + habitacionIDV)
                                contenedorDetalleHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)
                                const tituloHabitacion = document.createElement("div")
                                tituloHabitacion.classList.add("confAlojamiento_entidades_titulo")
                                tituloHabitacion.classList.add("negrita")
                                tituloHabitacion.innerText = habitacionUI
                                contenedorDetalleHabitacion.appendChild(tituloHabitacion)
                                const titulohabitacionIDV = document.createElement("div")
                                titulohabitacionIDV.classList.add("confAlojamiento_entidades_tituloIDV")
                                titulohabitacionIDV.innerText = habitacionIDV
                                contenedorDetalleHabitacion.appendChild(titulohabitacionIDV)
                                contenedorHabitacionesExistentes.appendChild(contenedorDetalleHabitacion)
                            })
                            contenedorHabitaciones.appendChild(contenedorHabitacionesExistentes)
                        }
                        contenedorGlobal.appendChild(contenedorHabitaciones)
                        //Camas
                        const contenedorCamas = document.createElement("div")
                        contenedorCamas.classList.add("confAlojamiento_entidades_contenedor")
                        const contenedorBotonSeccionCamas = document.createElement("div")
                        contenedorBotonSeccionCamas.classList.add("confAlojamiento_entidades_contenedorBotones")
                        const botonAnadirCamas = document.createElement("a")
                        botonAnadirCamas.classList.add("confAlojamiento_entidades_botonContenedor")
                        botonAnadirCamas.innerText = "Crear una nueva cama"
                        botonAnadirCamas.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:cama")
                        botonAnadirCamas.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:cama")
                        botonAnadirCamas.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        contenedorBotonSeccionCamas.appendChild(botonAnadirCamas)
                        contenedorCamas.appendChild(contenedorBotonSeccionCamas)
                        const contenedorCamasExistentes = document.createElement("div")
                        contenedorCamasExistentes.classList.add("confAlojamiento_entidades_contenedorEntidades")
                        if (camas.length === 0) {
                            const infoNoApartamentoUI = document.createElement("div")
                            infoNoApartamentoUI.classList.add("confAlojamiento_entidades_carteInfo")
                            infoNoApartamentoUI.innerText = "No hay ninguna habitacion construida"
                            contenedorCamasExistentes.appendChild(infoNoApartamentoUI)
                        }
                        if (camas.length > 0) {
                            camas.forEach((detallesCama) => {
                                const camaIDV = detallesCama.camaIDV
                                const camaUI = detallesCama.camaUI
                                const contenedorDetalleCama = document.createElement("a")
                                contenedorDetalleCama.classList.add("confAlojamiento_entidades_contenedorDetalles")
                                contenedorDetalleCama.setAttribute("camaIDV", camaIDV)
                                contenedorDetalleCama.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/cama: " + camaIDV)
                                contenedorDetalleCama.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/cama: " + camaIDV)
                                contenedorDetalleCama.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)
                                const tituloCama = document.createElement("div")
                                tituloCama.classList.add("confAlojamiento_entidades_titulo")
                                tituloCama.classList.add("negrita")
                                tituloCama.innerText = camaUI
                                contenedorDetalleCama.appendChild(tituloCama)
                                const tituloCamaIDV = document.createElement("div")
                                tituloCamaIDV.classList.add("confAlojamiento_entidades_tituloIDV")
                                tituloCamaIDV.innerText = camaIDV
                                contenedorDetalleCama.appendChild(tituloCamaIDV)
                                contenedorCamasExistentes.appendChild(contenedorDetalleCama)
                            })
                            contenedorCamas.appendChild(contenedorCamasExistentes)
                        }
                        contenedorGlobal.appendChild(contenedorCamas)
                        espacioConfiguracionDelAlojamiento.appendChild(contenedorGlobal)
                    }
                },
                traductorCambioVista: (entidad) => {
                    entidad.preventDefault()
                    entidad.stopPropagation()
                    const vista = entidad.target.closest("[vista]").getAttribute("vista")
                    const entrada = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(entrada)
                },
                crearEntidad: {
                    arranque: () => {
                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "administracion/arquitectura_del_alojamiento/entidades/entidadUI")
                        const urlRaw = window.location.pathname;
                        let url = urlRaw.toLowerCase()
                        url = url.split("/")
                        url = url.filter((url) => url)
                        delete url[0]
                        delete url[1]
                        delete url[2]
                        delete url[3]
                        url = url.filter((url) => url)
                        const entradaTipoEntidad = url[0].split(":")
                        if (entradaTipoEntidad[0] === "tipo") {
                            const tipoEntidad = entradaTipoEntidad[1]
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.portadaUI(tipoEntidad)
                        } else {
                            //Carter de informacion dicieno que si no se defino un tipo de entidad entonces no se muestra nada
                        }
                    },
                    portadaUI: async (entidad) => {
                        const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                        const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                        const selectorTitulo = document.querySelector("[componente=titulo]")
                        if (entidad === "apartamento") {
                            selectorTitulo.innerText = "Crear un nuevo apartamento como entidad"
                            //Los apartamento nuevo como entidad se insertan con el estao no disponible
                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                            contenedorEntidad.setAttribute("tipoEntidad", "apartamento")
                            const bloqueTituloApartamento = document.createElement("div")
                            bloqueTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoTituloApartamento = document.createElement("div")
                            infoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoTituloApartamento.innerText = "Escriba el nombre del apartamento. El nombre debe de ser √∫nico, no pueden existir dos apartamentos con el mismo nombre."
                            bloqueTituloApartamento.appendChild(infoTituloApartamento)
                            const campoTituloApartamento = document.createElement("input")
                            campoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoTituloApartamento.setAttribute("campo", "apartamentoUI")
                            campoTituloApartamento.placeholder = "Nombre del apartamento"
                            bloqueTituloApartamento.appendChild(campoTituloApartamento)
                            contenedorEntidad.appendChild(bloqueTituloApartamento)
                            const bloqueApartamentoIDV = document.createElement("div")
                            bloqueApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoApartamentoIDV = document.createElement("div")
                            infoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoApartamentoIDV.innerText = "Escriba un identificador visual para el apartamento, este solo puede estar compuesto por min√∫sculas y n√∫meros, nada m√°s ni siquiera espacios o caracteres de puntuaci√≥n. Si quiere, puede dejar en blanco este campo y el sistema lo rellenar√° con un identificador visual autom√°ticamente. Pero es recomendable que lo haga usted y haga un patr√≥n sencillo para poder identificar visualmente el apartamento y si por alguna situaci√≥n no se pudiera acceder al identificador de interfaz de usuario."
                            bloqueApartamentoIDV.appendChild(infoApartamentoIDV)
                            const campoApartamentoIDV = document.createElement("input")
                            campoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoApartamentoIDV.setAttribute("campo", "apartamentoIDV")
                            campoApartamentoIDV.placeholder = "Identificador visual del apartamento(ApartamentoIDV)"
                            bloqueApartamentoIDV.appendChild(campoApartamentoIDV)
                            contenedorEntidad.appendChild(bloqueApartamentoIDV)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                            const botonCrearEntidad = document.createElement("div")
                            botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                            botonCrearEntidad.innerText = "Crear nuevo apartamento como entidad"
                            botonCrearEntidad.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.crearEntidadTransactor)
                            contenedorBotones.appendChild(botonCrearEntidad)
                            contenedorEntidad.appendChild(contenedorBotones)
                            espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                        }
                        if (entidad === "habitacion") {
                            selectorTitulo.innerText = "Crear una nueva habitaci√≥n como entidad"
                            //Los apartamento nuevo como entidad se insertan con el estao no disponible
                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                            contenedorEntidad.setAttribute("tipoEntidad", "habitacion")
                            const bloqueTituloHabitacion = document.createElement("div")
                            bloqueTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoTituloHabitacion = document.createElement("div")
                            infoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoTituloHabitacion.innerText = "Escriba el nombre de la nueva habitaci√≥n. El nombre debe de ser √∫nico e irrepetible."
                            bloqueTituloHabitacion.appendChild(infoTituloHabitacion)
                            const campoTituloHabitacion = document.createElement("input")
                            campoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoTituloHabitacion.setAttribute("campo", "habitacionUI")
                            campoTituloHabitacion.placeholder = "Nombre del la habitaci√≥n"
                            bloqueTituloHabitacion.appendChild(campoTituloHabitacion)
                            contenedorEntidad.appendChild(bloqueTituloHabitacion)
                            const bloqueHabitacionIDV = document.createElement("div")
                            bloqueHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoHabitacionIDV = document.createElement("div")
                            infoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoHabitacionIDV.innerText = "Escriba un identificador visual para la nueva habitaci√≥n, este solo puede estar compuesto por min√∫sculas y n√∫meros, nada m√°s ni siquiera espacios o caracteres de puntuaci√≥n. Si quiere, puede dejar en blanco este campo y el sistema lo rellenar√° con identificador visual autom√°ticamente. Pero es recomendable que lo hagan ustedes y siga un patr√≥n sencillo para poder identificar visualmente el apartamento y, por alguna situaci√≥n, no se pudiera acceder al identificador de interfaz."
                            bloqueHabitacionIDV.appendChild(infoHabitacionIDV)
                            const campoHabitacionIDV = document.createElement("input")
                            campoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoHabitacionIDV.setAttribute("campo", "habitacionIDV")
                            campoHabitacionIDV.placeholder = "Identificador visual de la habitaci√≥n(HabitacionIDV)"
                            bloqueHabitacionIDV.appendChild(campoHabitacionIDV)
                            contenedorEntidad.appendChild(bloqueHabitacionIDV)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                            const botonCrearEntidad = document.createElement("div")
                            botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                            botonCrearEntidad.innerText = "Crear nueva habitaci√≥n como entidad"
                            botonCrearEntidad.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.crearEntidadTransactor)
                            contenedorBotones.appendChild(botonCrearEntidad)
                            contenedorEntidad.appendChild(contenedorBotones)
                            espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                        }
                        if (entidad === "cama") {
                            selectorTitulo.innerText = "Crear una nueva cama como entidad"
                            //Los apartamento nuevo como entidad se insertan con el estao no disponible
                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                            contenedorEntidad.setAttribute("tipoEntidad", "cama")
                            const bloqueTituloCama = document.createElement("div")
                            bloqueTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoTituloCama = document.createElement("div")
                            infoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoTituloCama.innerText = "Escriba el nombre de la nueva cama.El nombre debe de ser √∫nico e irrepetible"
                            bloqueTituloCama.appendChild(infoTituloCama)
                            const campoTituloCama = document.createElement("input")
                            campoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoTituloCama.setAttribute("campo", "camaUI")
                            campoTituloCama.placeholder = "Nombre del la cama"
                            bloqueTituloCama.appendChild(campoTituloCama)
                            contenedorEntidad.appendChild(bloqueTituloCama)
                            const bloqueCamaIDV = document.createElement("div")
                            bloqueCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoCamaIDV = document.createElement("div")
                            infoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoCamaIDV.innerText = "Escriba un identificador visual para la nueva cama, este solo puede estar compuesto por min√∫sculas y n√∫meros, nada m√°s ni siquiera espacios o caracteres de puntuaci√≥n. Si quiere, puede dejar en blanco este campo y el sistema lo rellenar√° con identificador visual autom√°ticamente. Pero es recomendable que lo hagan ustedes y siga un patr√≥n sencillo para poder identificar visualmente el apartamento y, por alguna situaci√≥n, no se pudiera acceder al identificador de interfaz."
                            bloqueCamaIDV.appendChild(infoCamaIDV)
                            const campoCamaIDV = document.createElement("input")
                            campoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoCamaIDV.placeholder = "Identificador visual de la cama(CamaIDV)"
                            campoCamaIDV.setAttribute("campo", "camaIDV")
                            bloqueCamaIDV.appendChild(campoCamaIDV)
                            contenedorEntidad.appendChild(bloqueCamaIDV)
                            const bloqueCapacidadPernoctativa = document.createElement("div")
                            bloqueCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoCaapacidadPernoctativa = document.createElement("div")
                            infoCaapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoCaapacidadPernoctativa.innerText = "Escriba la capacidad pernoctativa de la cama."
                            bloqueCapacidadPernoctativa.appendChild(infoCaapacidadPernoctativa)
                            const campoCapacidadPernoctativa = document.createElement("input")
                            campoCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoCapacidadPernoctativa.placeholder = "Escriba el n√∫mero de plazas de la cama, por ejemplo: 2."
                            campoCapacidadPernoctativa.setAttribute("campo", "capacidad")
                            bloqueCapacidadPernoctativa.appendChild(campoCapacidadPernoctativa)
                            contenedorEntidad.appendChild(bloqueCapacidadPernoctativa)

                            const contenedorSelector = document.createElement("div")
                            contenedorSelector.classList.add(
                                "padding6",
                                "flexVertical",
                                "gap6"
                            )
                            contenedorEntidad.appendChild(contenedorSelector)

                            const infoSelector = document.createElement("div")
                            infoSelector.innerText = "Selecciona el tipo de cama. La cama compartida es aquella que puede ser insertada en varias configuraciones de alojamiento diferentes, mientras que la cama del tipo f√≠sico es aquella que, es usada como cama extra."
                            contenedorSelector.appendChild(infoSelector)

                            const selectorTipoCama = document.createElement("select")
                            selectorTipoCama.setAttribute("campo", "tipoCama")
                            selectorTipoCama.classList.add(
                                "padding10",
                                "borderRadius10",
                                "backgroundGrey1",
                                "simplificadorCampo"
                            )
                            const opcion = document.createElement("option");
                            opcion.value = "";
                            opcion.disabled = true;
                            opcion.selected = true;
                            opcion.text = "Selecciona el tipo de cama";
                            selectorTipoCama.add(opcion);
                            const opcionCamaCompartida = document.createElement("option");
                            opcionCamaCompartida.value = "compartida";
                            opcionCamaCompartida.text = "Compartida";
                            selectorTipoCama.add(opcionCamaCompartida);
                            const opcionCamaFisica = document.createElement("option");
                            opcionCamaFisica.value = "fisica";
                            opcionCamaFisica.text = "F√≠sica";
                            selectorTipoCama.add(opcionCamaFisica);
                            contenedorSelector.appendChild(selectorTipoCama)

                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                            const botonCrearEntidad = document.createElement("div")
                            botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                            botonCrearEntidad.innerText = "Crear nueva cama como entidad"
                            botonCrearEntidad.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.crearEntidadTransactor)
                            contenedorBotones.appendChild(botonCrearEntidad)
                            contenedorEntidad.appendChild(contenedorBotones)
                            espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                        }
                    },
                    crearEntidadTransactor: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Creando entidad..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const transaccion = {
                            zona: "administracion/arquitectura/entidades/crearEntidadAlojamiento"
                        }
                        const selectorTipoEntidad = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                        transaccion.tipoEntidad = selectorTipoEntidad
                        const selectorCampos = document.querySelectorAll("[campo]")
                        selectorCampos.forEach((campo) => {
                            const nombreCampo = campo.getAttribute("campo")
                            const datoCampo = campo.value
                            transaccion[nombreCampo] = datoCampo
                        })

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const nuevoUID = respuestaServidor?.nuevoUID
                            const vista = `/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/${selectorTipoEntidad}:${nuevoUID}`
                            const navegacion = {
                                vista: vista,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                editarEntidad: {
                    arranque: () => {
                        const main = document.querySelector("main")

                        main.setAttribute("zonaCSS", "administracion/arquitectura_del_alojamiento/entidades/entidadUI")
                        const granuladorURL = casaVitini.utilidades.granuladorURL()
                        const parametros = granuladorURL.parametros
                        casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.portadaUI(Object.entries(parametros)[0])
                    },
                    portadaUI: async (entidadMatriz) => {
                        const seccionRenderizadaOrigen = document.querySelector("main")
                        const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                        const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                        const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                        const selectorTitulo = document.querySelector("[componente=titulo]")
                        const tipoEntidad = entidadMatriz[0]
                        const entidadIDV = entidadMatriz[1]
                        if (tipoEntidad === "apartamento") {
                            if (!entidadIDV) {
                                //Se tiene que especificar que pasa si no se especificael identificado del apartmentoIDV
                            }
                            const transaccion = {
                                zona: "administracion/arquitectura/entidades/detallesDeEntidadDeAlojamiento",
                                tipoEntidad: "apartamento",
                                entidadIDV: entidadIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                            const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)

                            if (!seccionRenderizada) { return }
                            if (respuestaServidor?.error) {
                                const info = {
                                    titulo: "No existe ning√∫n apartamento como entidad con ese identificadorIDV",
                                    descripcion: "No existe la entidad que buscas. Por favor, revisa el identificadorIDV que solicitaste porque este no existe. Quiz√°s este identificador fue de una entidad de alojamiento que tuviste en el pasado y que borraste."
                                }
                                casaVitini.ui.componentes.mensajeSimple(info)
                            }
                            if (respuestaServidor?.ok) {

                                const apartamentoIDV = respuestaServidor?.ok.apartamentoIDV
                                const apartamentoUI = respuestaServidor?.ok.apartamentoUI
                                //const superficie = respuestaServidor?.ok[0].superficie
                                const caracteristicas = respuestaServidor.caracteristicas
                                selectorTitulo.innerText = "Editar apartamento como entidad"
                                const contenedorEntidad = document.createElement("div")
                                contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                                contenedorEntidad.setAttribute("tipoEntidad", "apartamento")
                                contenedorEntidad.setAttribute("entidadIDV", apartamentoIDV)
                                const contenedorEntidadDatos = document.createElement("div")
                                contenedorEntidadDatos.classList.add("confAlojamiento_entidades_editarEntidad_contenedorEntidadDatos")
                                contenedorEntidadDatos.setAttribute("componente", "contenedorEntidadDatos")
                                const bloqueTituloApartamento = document.createElement("div")
                                bloqueTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoTituloApartamento = document.createElement("div")
                                infoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoTituloApartamento.innerText = "Nombre del apartamento"
                                bloqueTituloApartamento.appendChild(infoTituloApartamento)
                                const campoTituloApartamento = document.createElement("input")
                                campoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoTituloApartamento.placeholder = "Escriba un nombre para el apartamento"
                                campoTituloApartamento.setAttribute("valorInicial", apartamentoUI)
                                campoTituloApartamento.setAttribute("campo", "apartamentoUI")
                                campoTituloApartamento.value = apartamentoUI
                                bloqueTituloApartamento.appendChild(campoTituloApartamento)
                                contenedorEntidadDatos.appendChild(bloqueTituloApartamento)
                                const bloqueApartamentoIDV = document.createElement("div")
                                bloqueApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoApartamentoIDV = document.createElement("div")
                                infoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoApartamentoIDV.innerText = "Identificador visual del apartamento"
                                bloqueApartamentoIDV.appendChild(infoApartamentoIDV)
                                const campoApartamentoIDV = document.createElement("input")
                                campoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoApartamentoIDV.placeholder = "Identificador visual del apartamento(apartamentoIDV)"
                                campoApartamentoIDV.setAttribute("valorInicial", apartamentoIDV)
                                campoApartamentoIDV.setAttribute("componente", "entidadIDV")
                                campoApartamentoIDV.setAttribute("campo", "apartamentoIDV")
                                campoApartamentoIDV.value = apartamentoIDV
                                bloqueApartamentoIDV.appendChild(campoApartamentoIDV)
                                contenedorEntidadDatos.appendChild(bloqueApartamentoIDV)
                                const superBloqueCaracteristicas = document.createElement("div")
                                superBloqueCaracteristicas.classList.add("contenedorCaracteristicas")
                                const infoSuperficie = document.createElement("div")
                                infoSuperficie.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoSuperficie.innerText = "Caracter√≠sticas del apartamento"
                                superBloqueCaracteristicas.appendChild(infoSuperficie)
                                const contenedorCaracteristicas = document.createElement("div")
                                contenedorCaracteristicas.classList.add("administracion_arquitectura_entidades_detallesEntidad_contenedorCaracteristicas")
                                contenedorCaracteristicas.setAttribute("contenedor", "caracteristicas")
                                contenedorCaracteristicas.setAttribute("caracteristicasIniciales", JSON.stringify(caracteristicas))
                                for (const caracteristica of caracteristicas) {
                                    const filaCaracteristicaUI = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.caracteristicasUI(caracteristica)
                                    contenedorCaracteristicas.appendChild(filaCaracteristicaUI)
                                }
                                superBloqueCaracteristicas.appendChild(contenedorCaracteristicas)
                                const botonAnadirCaracteristica = document.createElement("div")
                                botonAnadirCaracteristica.classList.add("administracion_arquitectura_entidades_detallesEntidad_botonAnadir")
                                botonAnadirCaracteristica.innerText = "A√±adir caracteristica"
                                botonAnadirCaracteristica.addEventListener("click", () => {
                                    const selectorContenedorCaracteristicas = document.querySelector("[contenedor=caracteristicas]")
                                    const filaCaracteristicaUI = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.caracteristicasUI()
                                    selectorContenedorCaracteristicas.appendChild(filaCaracteristicaUI)
                                })
                                superBloqueCaracteristicas.appendChild(botonAnadirCaracteristica)
                                contenedorEntidadDatos.appendChild(superBloqueCaracteristicas)
                                contenedorEntidad.appendChild(contenedorEntidadDatos)
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                                contenedorBotones.setAttribute("componente", "contenedorBotonEditar")
                                const botonCrearEntidad = document.createElement("div")
                                botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                                botonCrearEntidad.innerText = "Editar apartamento como entidad"
                                botonCrearEntidad.addEventListener("click", () => {
                                    casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("editar")
                                })
                                contenedorBotones.appendChild(botonCrearEntidad)
                                contenedorEntidad.appendChild(contenedorBotones)
                                const botonesOpcionesEdicion = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.botonesEdicion()
                                contenedorEntidad.appendChild(botonesOpcionesEdicion)
                                espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                            }

                        } else if (tipoEntidad === "habitacion") {
                            if (!entidadIDV) {
                                //Se tiene que especificar que pasa si no se especificael identificado del apartmentoIDV
                            }
                            const transaccion = {
                                zona: "administracion/arquitectura/entidades/detallesDeEntidadDeAlojamiento",
                                tipoEntidad: "habitacion",
                                entidadIDV: entidadIDV
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                            if (!seccionRenderizada) { return }
                            if (respuestaServidor?.error) {
                                const info = {
                                    titulo: "No existe ninguna habitaci√≥n como entidad con ese identificador",
                                    descripcion: "No existe la entidad que buscas. Por favor, revisa el identificador que solicitaste porque este no existe. Quiz√°s este identificador fue de una entidad de alojamiento que tuviste en el pasado y que borraste."
                                }
                                casaVitini.ui.componentes.mensajeSimple(info)
                            }
                            if (respuestaServidor?.ok) {
                                const habitacionIDV = respuestaServidor?.ok.habitacionIDV
                                const habitacionUI = respuestaServidor?.ok.habitacionUI
                                selectorTitulo.innerText = "Editar habitaci√≥n como entidad"
                                const contenedorEntidad = document.createElement("div")
                                contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                                contenedorEntidad.setAttribute("tipoEntidad", "habitacion")
                                contenedorEntidad.setAttribute("entidadIDV", habitacionIDV)
                                const contenedorEntidadDatos = document.createElement("div")
                                contenedorEntidadDatos.classList.add("confAlojamiento_entidades_editarEntidad_contenedorEntidadDatos")
                                contenedorEntidadDatos.setAttribute("componente", "contenedorEntidadDatos")
                                const bloqueTituloHabitacion = document.createElement("div")
                                bloqueTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoTituloHabitacion = document.createElement("div")
                                infoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoTituloHabitacion.innerText = "Nombre de la habitaci√≥n"
                                bloqueTituloHabitacion.appendChild(infoTituloHabitacion)
                                const campoTituloHabitacion = document.createElement("input")
                                campoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoTituloHabitacion.placeholder = "Escriba un nombre para la habitaci√≥n"
                                campoTituloHabitacion.setAttribute("valorInicial", habitacionUI)
                                campoTituloHabitacion.setAttribute("campo", "habitacionUI")
                                campoTituloHabitacion.value = habitacionUI
                                bloqueTituloHabitacion.appendChild(campoTituloHabitacion)
                                contenedorEntidadDatos.appendChild(bloqueTituloHabitacion)
                                const bloqueHabitacionIDV = document.createElement("div")
                                bloqueHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoHabitacionIDV = document.createElement("div")
                                infoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoHabitacionIDV.innerText = "Identificador visual de la nueva habitaci√≥n"
                                bloqueHabitacionIDV.appendChild(infoHabitacionIDV)
                                const campoHabitacionIDV = document.createElement("input")
                                campoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoHabitacionIDV.placeholder = "Identificador visual de la habitaci√≥n(HabitacionIDV)"
                                campoHabitacionIDV.setAttribute("valorInicial", habitacionIDV)
                                campoHabitacionIDV.setAttribute("componente", "entidadIDV")
                                campoHabitacionIDV.setAttribute("campo", "habitacionIDV")
                                campoHabitacionIDV.value = habitacionIDV
                                bloqueHabitacionIDV.appendChild(campoHabitacionIDV)
                                contenedorEntidadDatos.appendChild(bloqueHabitacionIDV)
                                contenedorEntidad.appendChild(contenedorEntidadDatos)
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                                contenedorBotones.setAttribute("componente", "contenedorBotonEditar")
                                const botonCrearEntidad = document.createElement("div")
                                botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                                botonCrearEntidad.innerText = "Editar habitaci√≥n como entidad"
                                botonCrearEntidad.addEventListener("click", () => {
                                    casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("editar")
                                })
                                contenedorBotones.appendChild(botonCrearEntidad)
                                contenedorEntidad.appendChild(contenedorBotones)
                                const botonesOpcionesEdicion = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.botonesEdicion()
                                contenedorEntidad.appendChild(botonesOpcionesEdicion)
                                espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                            }

                        } else if (tipoEntidad === "cama") {
                            if (!entidadIDV) {
                                //Se tiene que especificar que pasa si no se especificael identificado del apartmentoIDV
                            }
                            const transaccion = {
                                zona: "administracion/arquitectura/entidades/detallesDeEntidadDeAlojamiento",
                                tipoEntidad: "cama",
                                entidadIDV: entidadIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                            if (!seccionRenderizada) { return }
                            if (respuestaServidor?.error) {
                                const info = {
                                    titulo: "No existe ninguna cama como entidad con ese identificador",
                                    descripcion: "No existe la entidad que buscas. Por favor, revisa el identificador que solicitaste porque este no existe. Quiz√°s este identificador fue de una entidad de alojamiento que tuviste en el pasado y que borraste."
                                }
                                casaVitini.ui.componentes.mensajeSimple(info)
                            }
                            if (respuestaServidor?.ok) {
                                const camaIDV = respuestaServidor?.ok.camaIDV
                                const tipoIDV = respuestaServidor?.ok.tipoIDV
                                const camaUI = respuestaServidor?.ok.camaUI
                                const capacidad = respuestaServidor?.ok.capacidad



                                const tipoCamaUI = (tipoIDV) => {
                                    if (tipoIDV === "compartida") {
                                        return "Compartida"
                                    } else if (tipoIDV === "fisica") {
                                        return "F√≠sica"
                                    }
                                }


                                ///Atencion los IDV deben de ser minuscuasl todos!!!!
                                selectorTitulo.innerText = "Editar cama como entidad"
                                const contenedorEntidad = document.createElement("div")
                                contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                                contenedorEntidad.setAttribute("tipoEntidad", "cama")
                                contenedorEntidad.setAttribute("entidadIDV", camaIDV)
                                const contenedorEntidadDatos = document.createElement("div")
                                contenedorEntidadDatos.classList.add("confAlojamiento_entidades_editarEntidad_contenedorEntidadDatos")
                                contenedorEntidadDatos.setAttribute("componente", "contenedorEntidadDatos")
                                const bloqueTituloCama = document.createElement("div")
                                bloqueTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")


                                const infoDescription = document.createElement("div")
                                infoDescription.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoDescription.innerText = "Editar una cama como entidad creada, actualizar√° el nombre de la cama y su identificador visual si se cambian en las reservas activas presentes y futuras para preservas la integridad de los datos."
                                bloqueTituloCama.appendChild(infoDescription)

                                const infoTituloCama = document.createElement("div")
                                infoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoTituloCama.innerText = "Nombre de la cama"
                                bloqueTituloCama.appendChild(infoTituloCama)

                                const campoTituloCama = document.createElement("input")
                                campoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoTituloCama.placeholder = "Escriba un nombre para la cama"
                                campoTituloCama.setAttribute("valorInicial", camaUI)
                                campoTituloCama.setAttribute("campo", "camaUI")
                                campoTituloCama.value = camaUI
                                bloqueTituloCama.appendChild(campoTituloCama)
                                contenedorEntidadDatos.appendChild(bloqueTituloCama)
                                const bloqueCamaIDV = document.createElement("div")
                                bloqueCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoCamaIDV = document.createElement("div")
                                infoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoCamaIDV.innerText = "Identificador visual de la nueva cama"
                                bloqueCamaIDV.appendChild(infoCamaIDV)
                                const campoCamaIDV = document.createElement("input")
                                campoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoCamaIDV.placeholder = "Identificador visual de la cama(camaIDV)"
                                campoCamaIDV.setAttribute("valorInicial", camaIDV)
                                campoCamaIDV.setAttribute("componente", "entidadIDV")
                                campoCamaIDV.setAttribute("campo", "camaIDV")
                                campoCamaIDV.value = camaIDV
                                bloqueCamaIDV.appendChild(campoCamaIDV)
                                contenedorEntidadDatos.appendChild(bloqueCamaIDV)
                                contenedorEntidad.appendChild(contenedorEntidadDatos)
                                const bloqueCapacidadPernoctativa = document.createElement("div")
                                bloqueCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoCapacidadPernoctativa = document.createElement("div")
                                infoCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoCapacidadPernoctativa.innerText = "Capacidad pernoctativa de la cama"
                                bloqueCapacidadPernoctativa.appendChild(infoCapacidadPernoctativa)
                                const campoCapacidadPernoctativa = document.createElement("input")
                                campoCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoCapacidadPernoctativa.placeholder = "Escriba la capaciad pernoctativa de la cama por ejemplo 2"
                                campoCapacidadPernoctativa.setAttribute("valorInicial", capacidad)
                                campoCapacidadPernoctativa.setAttribute("campo", "capacidad")
                                campoCapacidadPernoctativa.value = capacidad
                                bloqueCapacidadPernoctativa.appendChild(campoCapacidadPernoctativa)
                                contenedorEntidadDatos.appendChild(bloqueCapacidadPernoctativa)

                                const contenedorTipoInfoCama = document.createElement("div")
                                contenedorTipoInfoCama.classList.add(
                                    "flexVertical",
                                    "padding6",
                                )
                                contenedorEntidadDatos.appendChild(contenedorTipoInfoCama)

                                const tituloTipoCama = document.createElement("div")
                                tituloTipoCama.classList.add(
                                    "negrita",
                                    "padding6"
                                )
                                tituloTipoCama.innerText = "Tipo cama"

                                contenedorTipoInfoCama.appendChild(tituloTipoCama)

                                const infoSelector = document.createElement("div")
                                infoSelector.classList.add(
                                    "padding6"
                                )
                                infoSelector.innerText = tipoCamaUI(tipoIDV)
                                infoSelector.setAttribute("tipoIDV", tipoIDV)

                                contenedorTipoInfoCama.appendChild(infoSelector)

                                contenedorEntidad.appendChild(contenedorEntidadDatos)
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                                contenedorBotones.setAttribute("componente", "contenedorBotonEditar")
                                const botonCrearEntidad = document.createElement("div")
                                botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                                botonCrearEntidad.innerText = "Editar cama como entidad"
                                botonCrearEntidad.addEventListener("click", () => {
                                    casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("editar")
                                })
                                contenedorBotones.appendChild(botonCrearEntidad)
                                contenedorEntidad.appendChild(contenedorBotones)
                                const botonesOpcionesEdicion = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.botonesEdicion()
                                contenedorEntidad.appendChild(botonesOpcionesEdicion)
                                espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                            }

                        } else {
                            const info = {
                                titulo: "No existe ninguna entidad con ese identificador",
                                descripcion: "No existe la entidad que buscas. Por favor, revisa el identificador que solicitaste porque este no existe. Quiz√°s este identificador fue de una entidad de alojamiento que tuviste en el pasado y que borraste."
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }




                    },
                    botonesEdicion: () => {
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                        contenedorBotones.setAttribute("componente", "contenedorOpcionesDeEdicion")
                        contenedorBotones.style.display = "none"
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonGuardarCambios.innerText = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", () => {
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.guardarCambios()
                        })
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonEliminarEntidad = document.createElement("div")
                        botonEliminarEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonEliminarEntidad.innerText = "Eliminar entidad"
                        botonEliminarEntidad.addEventListener("click", () => {
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.eliminarEntidad.UI()
                        })
                        contenedorBotones.appendChild(botonEliminarEntidad)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonCancelarCambios.innerText = "Cancelar cambios"
                        botonCancelarCambios.addEventListener("click", () => {
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("cancelar")
                        })
                        contenedorBotones.appendChild(botonCancelarCambios)
                        return contenedorBotones
                    },
                    controladorModoEditar: (modo) => {
                        if (modo !== "editar" && modo !== "cancelar" && modo !== "guardado") {
                            const error = "El componente controladorModoEditar no comprende el par√°metro"
                            casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                        const selectorContenedorBotonEditar = document.querySelector("[componente=contenedorBotonEditar]")
                        const selectorContenedorOpcionesEdicion = document.querySelector("[componente=contenedorOpcionesDeEdicion]")
                        const selectorContenedorEntidadDatos = document.querySelector("[componente=contenedorEntidadDatos]")
                        if (modo === "editar") {
                            selectorContenedorBotonEditar.style.display = "none"
                            selectorContenedorOpcionesEdicion.style.display = "flex"
                            selectorContenedorEntidadDatos.style.pointerEvents = "all"
                        }
                        if (modo === "guardado") {
                            selectorContenedorBotonEditar.style.display = "flex"
                            selectorContenedorOpcionesEdicion.style.display = "none"
                            selectorContenedorEntidadDatos.style.pointerEvents = "none"
                        }
                        if (modo === "cancelar") {
                            selectorContenedorBotonEditar.style.display = "flex"
                            selectorContenedorOpcionesEdicion.style.display = "none"
                            selectorContenedorEntidadDatos.removeAttribute("style")
                            const selectorCampos = document.querySelectorAll("[campo]")
                            selectorCampos.forEach((campo) => {
                                const valorInicial = campo.getAttribute("valorInicial")
                                if (valorInicial) {
                                    campo.value = valorInicial
                                } else {
                                    campo.parentElement.remove()
                                }
                            })
                            const contenedorCaracteristicas = document.querySelector("[contenedor=caracteristicas]")
                            if (contenedorCaracteristicas) {
                                const caracteristicasApartamento = contenedorCaracteristicas.getAttribute("caracteristicasIniciales")
                                const caracteristicasParseadas = caracteristicasApartamento ? JSON.parse(caracteristicasApartamento) : []
                                contenedorCaracteristicas.innerHTML = null
                                for (const caracteristica of caracteristicasParseadas) {

                                    const filaCaracteristicaUI = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.caracteristicasUI(caracteristica)
                                    contenedorCaracteristicas.appendChild(filaCaracteristicaUI)
                                }
                            }
                        }
                    },
                    guardarCambios: async () => {

                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando entidad..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const selectorTipoEntidada = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                        const entidadIDV = document.querySelector("[entidadIDV]").getAttribute("entidadIDV")
                        const metadatos = {
                            zona: "administracion/arquitectura/entidades/modificarEntidadAlojamiento",
                            tipoEntidad: selectorTipoEntidada,
                            entidadIDV
                        }

                        const selectorCampos = document.querySelectorAll("[campo]")
                        selectorCampos.forEach((campo) => {
                            const nombreCampo = campo.getAttribute("campo")
                            const datoCampo = campo.value
                            metadatos[nombreCampo] = datoCampo
                        })

                        if (selectorTipoEntidada === "apartamento") {
                            metadatos.caracteristicas = []
                            const selectorCaracteristicas = document.querySelectorAll("[campo=caracteristica]")
                            selectorCaracteristicas.forEach((caracteristica) => {
                                const valorActual = caracteristica.value.trim()
                                if (valorActual) {
                                    metadatos.caracteristicas.push(valorActual)
                                }

                            })
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(metadatos)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const selectorComponenteEntidadIDV = document.querySelector("[componente=entidadIDV]").value
                            document.querySelector("[entidadIDV]").setAttribute("entidadIDV", selectorComponenteEntidadIDV)
                            const selectorCampos = document.querySelectorAll("[campo]")
                            selectorCampos.forEach((campo) => {
                                const datoCampo = campo.value
                                campo.setAttribute("valorInicial", datoCampo)
                            })
                            const listaCaracteristicas = respuestaServidor.apartamentoComoEntidadActualziado?.caracteristicas

                            if (selectorTipoEntidada === "apartamento" && listaCaracteristicas) {
                                const contenedorCaracteristicas = document.querySelector("[contenedor=caracteristicas]")
                                contenedorCaracteristicas.setAttribute("caracteristicasIniciales", JSON.stringify(listaCaracteristicas))
                            }



                            //Se tiene que volver a recoger el entidadIDV para que ahora se recoga actualizado del campo modificado
                            const entidadIDV = document.querySelector("[entidadIDV]").getAttribute("entidadIDV")
                            const urlVista = "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/" + selectorTipoEntidada + ":" + entidadIDV;
                            const navegacion = {
                                vista: urlVista,
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("guardado")
                        }
                    },
                    eliminarEntidad: {
                        UI: async () => {
                            const tipoEntidad = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                            let entidadUI
                            let textoDescriptivo
                            let tituloAdvertencia
                            if (tipoEntidad === "apartamento") {
                                entidadUI = document.querySelector("[campo=apartamentoUI]").getAttribute("valorInicial")
                                tituloAdvertencia = "Confirmar eliminar el apartamento como entidad"
                                textoDescriptivo = "Vas a eliminar este apartamento como entidad. Esto implica eliminar el apartamento como entidad, el perfil de precio del apartamento, los comportamientos de precios y los bloqueos asociados a este apartamento. Sus implicaciones son inmediatas. ¬øQuieres confirmar la eliminaci√≥n de este apartamento como entidad? "
                            }
                            if (tipoEntidad === "habitacion") {
                                entidadUI = document.querySelector("[campo=habitacionUI]").getAttribute("valorInicial")
                                tituloAdvertencia = "Confirmar eliminar la habitaci√≥n como entidad"
                                textoDescriptivo = "Vas a eliminar esta habitaci√≥n como entidad. Esto implica eliminar la habitaci√≥n como entidad y su existencia en las configuraciones de alojamiento. Esto implica que el apartamento que conten√≠a esta habitaci√≥n dejar√° de mostrarla por su inexistencia. Sus implicaciones son inmediatas. ¬øQuieres confirmar la eliminaci√≥n de esta habitaci√≥n como entidad ?"
                            }
                            if (tipoEntidad === "cama") {
                                entidadUI = document.querySelector("[campo=camaUI]").getAttribute("valorInicial")
                                tituloAdvertencia = "Confirmar eliminar la cama como entidad"
                                textoDescriptivo = "Vas a eliminar esta cama como entidad. Esto implica eliminar la cama como entidad y su existencia en las configuraciones de alojamiento. Esto implica que las habitaciones que conten√≠an esta cama dejar√°n de mostrarla por su inexistencia. Sus implicaciones son inmediatas. ¬øQuieres confirmar la eliminaci√≥n de esta cama como entidad? "
                            }

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.innerText = tituloAdvertencia
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = textoDescriptivo

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = "Comfirmar la eliminacion"
                            botonAceptar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.eliminarEntidad.confirmar)
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.innerText = "Cancelar la eliminacion"

                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        confirmar: async () => {


                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Eliminado..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                            const tipoEntidad = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                            const entidadIDV = document.querySelector("[entidadIDV]").getAttribute("entidadIDV")
                            const transaccion = {
                                zona: "administracion/arquitectura/entidades/eliminarEntidadAlojamiento",
                                tipoEntidad: tipoEntidad,
                                entidadIDV: entidadIDV
                            }

                            if (tipoEntidad === "cama") {
                                const tipoIDV = document.querySelector("[tipoIDV]").getAttribute("tipoIDV")
                                transaccion.tipoIDV = tipoIDV

                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()

                            if (respuestaServidor?.error) {
                                let selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                    advertenciaInmersiva.remove()
                                })
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const vista = `/administracion/arquitectura_del_alojamiento/entidades`
                                const navegacion = {
                                    vista: vista,
                                    //tipoOrigen: "menuNavegador"
                                }
                                casaVitini.shell.navegacion.controladorVista(navegacion)
                            }
                        }
                    },
                    caracteristicasUI: (data) => {
                        const caracteristicaUI = data?.caracteristicaUI || ""
                        const caracteristicaFila = document.createElement("div")
                        caracteristicaFila.classList.add("administracion_arquitectura_entidades_detallesEntidad_filaCaracteristica")
                        caracteristicaFila.setAttribute("contenedor", "caracteristica")
                        const campoCaracteristica = document.createElement("input")
                        campoCaracteristica.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoCaracteristica.placeholder = "Escriba la superficie del apartamento"
                        campoCaracteristica.setAttribute("valorInicial", caracteristicaUI)
                        campoCaracteristica.placeholder = "Escriba la caracter√≠stica"
                        campoCaracteristica.setAttribute("campo", "caracteristica")
                        campoCaracteristica.value = caracteristicaUI || ""
                        caracteristicaFila.appendChild(campoCaracteristica)
                        const botonBorrar = document.createElement("div")
                        botonBorrar.classList.add("administracion_arquitectura_entidades_detallesEntidad_botonBorrarFila")
                        botonBorrar.innerText = "Borrar"
                        botonBorrar.addEventListener("click", (e) => {
                            e.target.closest("[contenedor=caracteristica]").remove()
                        })
                        caracteristicaFila.appendChild(botonBorrar)
                        return caracteristicaFila
                    }
                }
            },
            configuraciones: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    const urlRaw = window.location.pathname;
                    let url = urlRaw.toLowerCase()
                    url = url.split("/")
                    url = url.filter((url) => url)
                    delete url[0]
                    delete url[1]
                    delete url[2]
                    url = url.filter((url) => url)
                    if (url.length === 0) {
                        main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento/configuraciones")
                        casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.portadaUI()
                    } else if (url.length === 1) {
                        main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento/configuraciones/detalles")
                        const apartamentoIDV = url
                        casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.portadaUI(apartamentoIDV)
                    } else if (url.length === 2) {
                        //casaVitini.administracion.configuracion_de_alojamiento.detallesDelBloqueo.UI(url)
                    }
                },
                portadaUI: async () => {
                    const selectorEspacioConfiguracionDelALojamiento = document.querySelector(" [componente=espacioConfiguracionDelAlojamiento]")
                    const espacioBotonesGlobales = document.createElement("div")
                    espacioBotonesGlobales.classList.add("espacioBotonesGlobales")
                    espacioBotonesGlobales.setAttribute("componente", "espacioBotonesGlobales")
                    const botonCrearConfiguracion = document.createElement("a")
                    botonCrearConfiguracion.classList.add("arquitecturaConfApartamento_portada_boton")
                    botonCrearConfiguracion.innerText = "Crear nueva configuraci√≥n de alojamiento"
                    botonCrearConfiguracion.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones/crear")
                    botonCrearConfiguracion.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones/crear")
                    botonCrearConfiguracion.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    espacioBotonesGlobales.appendChild(botonCrearConfiguracion)
                    selectorEspacioConfiguracionDelALojamiento.appendChild(espacioBotonesGlobales)
                    const contenedorConfiguracionesPortada = document.createElement("div")
                    contenedorConfiguracionesPortada.classList.add("adminsitracion_arquitectura_configruaciones_portada_contenedorCongfiguraciones")
                    const transaccion = {
                        zona: "administracion/arquitectura/configuraciones/listarConfiguracionApartamentos"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionesApartamentos = respuestaServidor?.ok
                        if (configuracionesApartamentos.length === 0) {
                            ///CARTEL de no existen configuraciones
                        }
                        if (configuracionesApartamentos.length > 0) {
                            for (const detalleApartamento of configuracionesApartamentos) {
                                const apartamentoIDV = detalleApartamento.apartamentoIDV
                                const apartamentoUI = detalleApartamento.apartamentoUI
                                const zonaIDV = detalleApartamento.zonaIDV
                                const estadoConfiguracion = detalleApartamento.estadoConfiguracion
                                let estadoConfiguracionUI
                                if (estadoConfiguracion === "disponible") {
                                    estadoConfiguracionUI = "Disponible"
                                }
                                if (estadoConfiguracion === "nodisponible") {
                                    estadoConfiguracionUI = "No disponible"
                                }
                                const zonaUI = {
                                    privada: "Zona privada",
                                    global: "Zona global",
                                    publica: "Zona p√∫blica"
                                }
                                const contenedorApartamento = document.createElement("a")
                                contenedorApartamento.classList.add("arquitecturaConfiguracionesAlojamiento_contenedorConfiguracion")
                                contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                contenedorApartamento.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                                contenedorApartamento.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                                contenedorApartamento.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.traductorCambioVista)
                                const contenedorTitulo = document.createElement("div")
                                contenedorTitulo.classList.add("arquitecturaConfAlojamiento_configuracionesTitulo")
                                contenedorTitulo.classList.add("negrita")
                                contenedorTitulo.innerText = apartamentoUI
                                contenedorApartamento.appendChild(contenedorTitulo)
                                const contenedorExplicacion = document.createElement("div")
                                contenedorExplicacion.classList.add("arquitecturaConfAlojamiento_configuracionesTitulo")
                                contenedorExplicacion.innerText = estadoConfiguracionUI
                                contenedorApartamento.appendChild(contenedorExplicacion)
                                const zona = document.createElement("div")
                                zona.classList.add("arquitecturaConfAlojamiento_configuracionesTitulo")
                                zona.innerText = zonaUI[zonaIDV]
                                contenedorApartamento.appendChild(zona)
                                contenedorConfiguracionesPortada.appendChild(contenedorApartamento)
                            }
                            selectorEspacioConfiguracionDelALojamiento.appendChild(contenedorConfiguracionesPortada)
                        }
                        //selectorEspacioConfiguracionDelALojamiento.appendChild(espacioConfiguracionesAlojamientoUI)
                    }
                },
                traductorCambioVista: (configuracion) => {
                    configuracion.preventDefault()
                    configuracion.stopPropagation()
                    const vista = configuracion.target.closest("[vista]").getAttribute("vista")
                    const entrada = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(entrada)
                },
                detallesConfiguracion: {
                    portadaUI: async (IDV) => {
                        const seccionRenderizadaOrigen = document.querySelector("main")
                        const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                        const apartamentoIDV = IDV[0]
                        const selectorTitulo = document.querySelector(" [componente=titulo]")
                        selectorTitulo.innerText = "Configuraci√≥n del apartamento"
                        document.querySelector("[componente=espacioConfiguracionDelAlojamiento]").style.gap = "0"
                        const selectorEspacioConfiguracion = document.querySelector("[componente=espacioConfiguracionDelAlojamiento]")
                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/detalleConfiguracionAlojamiento",
                            apartamentoIDV: apartamentoIDV
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)

                        if (!seccionRenderizada) { return }
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe la configuraci√≥n de alojamiento",
                                descripcion: respuestaServidor.error
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                        if (respuestaServidor?.ok) {


                            const apartamentoIDV = respuestaServidor?.apartamentoIDV
                            const apartamentoUI = respuestaServidor?.apartamentoUI
                            const zonaIDV = respuestaServidor.zonaIDV
                            const estadoConfiguracion = respuestaServidor?.estadoConfiguracion
                            const habitaciones = respuestaServidor?.habitaciones

                            let estadoConfiguracionUI
                            if (estadoConfiguracion === "nodisponible") {
                                estadoConfiguracionUI = "No disponible"
                            }
                            if (estadoConfiguracion === "disponible") {
                                estadoConfiguracionUI = "Disponible"
                            }
                            let zonaUI
                            if (zonaIDV === "publica") {
                                zonaUI = "Publica"
                            }
                            if (zonaIDV === "global") {
                                zonaUI = "Global"
                            }
                            if (zonaIDV === "privada") {
                                zonaUI = "Privada"
                            }

                            const contenedorApartamento = document.createElement("div")
                            contenedorApartamento.classList.add("arquitecturaConfApartamento_contenedor")
                            contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                            contenedorApartamento.setAttribute("contenedor", "configuracionAlojamiento")

                            const contenedorTituloYBoton = document.createElement("div")
                            contenedorTituloYBoton.classList.add("arquitecturaConfApartamento_contenedorTituloYBotones")
                            const tituloApartamento = document.createElement("div")
                            tituloApartamento.classList.add("arquitecturaConfApartamento_titulo")
                            tituloApartamento.classList.add("negrita")
                            tituloApartamento.innerText = apartamentoUI
                            contenedorTituloYBoton.appendChild(tituloApartamento)
                            const contenedorBotonesGlobalesApartamento = document.createElement("div")
                            contenedorBotonesGlobalesApartamento.classList.add("arquitecturaConfApartamento_contenedorBotonesGlobales")
                            const botonIrPerfilPrecio = document.createElement("a")
                            botonIrPerfilPrecio.classList.add("arquitecturaConfApartamento_boton")
                            botonIrPerfilPrecio.innerText = "Ir al perfil del precio"
                            botonIrPerfilPrecio.setAttribute("vista", "/administracion/precios/apartamentos:" + apartamentoIDV)
                            botonIrPerfilPrecio.setAttribute("href", "/administracion/precios/apartamentos:" + apartamentoIDV)
                            botonIrPerfilPrecio.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            contenedorBotonesGlobalesApartamento.appendChild(botonIrPerfilPrecio)
                            const botonAddHabitacion = document.createElement("div")
                            botonAddHabitacion.classList.add("arquitecturaConfApartamento_boton")
                            botonAddHabitacion.innerText = "A√±adir habitaci√≥n"
                            botonAddHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addHabitacion.UI)
                            contenedorBotonesGlobalesApartamento.appendChild(botonAddHabitacion)
                            contenedorTituloYBoton.appendChild(contenedorBotonesGlobalesApartamento)
                            const botonEstadoApartamento = document.createElement("div")
                            botonEstadoApartamento.classList.add("arquitecturaConfApartamento_boton")
                            botonEstadoApartamento.setAttribute("estadoActual", estadoConfiguracion)
                            botonEstadoApartamento.addEventListener("click", (e) => {
                                const estadoActual = e.target.closest("[estadoActual]").getAttribute("estadoActual")

                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.actualizarEstadoConfiguracion.UI({
                                    estadoActual
                                })
                            })
                            const tituloEstado = document.createElement("p")
                            tituloEstado.classList.add("arquitecturaConfApartamento_infoEstadoV")
                            tituloEstado.classList.add("negrita")
                            tituloEstado.innerText = "Estado"
                            const infoEstado = document.createElement("p")
                            infoEstado.classList.add("arquitecturaConfApartamento_infoEstado")
                            infoEstado.classList.add("negrita")
                            infoEstado.setAttribute("componente", "estadoActualUI")
                            infoEstado.innerText = estadoConfiguracionUI
                            botonEstadoApartamento.appendChild(infoEstado)
                            contenedorBotonesGlobalesApartamento.appendChild(botonEstadoApartamento)

                            const botonZonaPublicacion = document.createElement("div")
                            botonZonaPublicacion.classList.add("arquitecturaConfApartamento_boton")
                            botonZonaPublicacion.setAttribute("data", "zonaPublicacion")
                            botonZonaPublicacion.innerText = zonaUI
                            botonZonaPublicacion.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionZona.ui({
                                    apartamentoIDV
                                })
                            })
                            contenedorBotonesGlobalesApartamento.appendChild(botonZonaPublicacion)


                            contenedorApartamento.appendChild(contenedorTituloYBoton)
                            const contenedorImg = document.createElement("div")
                            contenedorImg.classList.add("arquitecturaConfApartamento_contenedorImg")
                            contenedorImg.setAttribute("componente", "contenedorImagenConfiguracion")
                            contenedorApartamento.appendChild(contenedorImg)
                            const contenedorHabitaciones = document.createElement("div")
                            contenedorHabitaciones.classList.add("arquitecturaConfApartamento_contenedorHabitaciones")
                            contenedorHabitaciones.setAttribute("componente", "contenedorHabitaciones")
                            for (const habitacion of habitaciones) {
                                const habitacionUID = habitacion.componenteUID
                                const habitacionIDV = habitacion.habitacionIDV
                                const habitacionUI = habitacion.habitacionUI
                                const camas = habitacion.camas
                                const metadatosHabitacion = {
                                    habitacionUI: habitacionUI,
                                    habitacionIDV: habitacionIDV,
                                    habitacionUID: habitacionUID,
                                }

                                const contenedorHabitacionUI = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.habitacionUI(metadatosHabitacion)
                                const contenedorCamas = document.createElement("div")
                                contenedorCamas.classList.add("arquitecturaConfApartamento_contenedorCamas")
                                if (camas.length === 0) {

                                    const infoNoCamas = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.noCamaInfoUI()
                                    contenedorHabitacionUI.appendChild(infoNoCamas)
                                }
                                if (camas.length > 0) {
                                    for (const detallesCama of camas) {
                                        const tipoIDV = detallesCama.tipoIDV
                                        const camaIDV = detallesCama.camaIDV
                                        const camaUI = detallesCama.camaUI
                                        const capacidad = detallesCama.capacidad
                                        const camaUID = detallesCama.camaUID


                                        const metadatosCama = {
                                            tipoIDV: tipoIDV,
                                            camaIDV: camaIDV,
                                            camaUI: camaUI,
                                            capacidad: capacidad,
                                            camaUID: camaUID,
                                        }
                                        const contenedorCama = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.camaUI(metadatosCama)
                                        contenedorHabitacionUI.appendChild(contenedorCama)
                                    }
                                }
                                //contenedorHabitacion.appendChild(contenedorCamas)
                                contenedorHabitaciones.appendChild(contenedorHabitacionUI)
                            }
                            contenedorApartamento.appendChild(contenedorHabitaciones)
                            selectorEspacioConfiguracion.appendChild(contenedorApartamento)
                            const contenedorBotonesGlobalesInferiores = document.createElement("div")
                            contenedorBotonesGlobalesInferiores.classList.add("arquitecturaConfApartamento_espacioEliminarConfiguracionApartamento")
                            const botonEliminarConfiguracion = document.createElement("div")
                            botonEliminarConfiguracion.classList.add("arquitecturaConfApartamento_eliminarConfiguracionApartamento")
                            botonEliminarConfiguracion.innerText = "Eliminar configuraci√≥n del apartamento"
                            botonEliminarConfiguracion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarConfiguracion.UI)
                            contenedorBotonesGlobalesInferiores.appendChild(botonEliminarConfiguracion)
                            const selectorEspacioGlobalConfiguracion = document.querySelector("[componente=espacioConfiguracionDelAlojamiento]")
                            selectorEspacioGlobalConfiguracion.appendChild(contenedorBotonesGlobalesInferiores)


                            casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.obtenerImgen(apartamentoIDV)

                        }
                    },
                    addHabitacion: {
                        UI: async () => {
                            const main = document.querySelector("main")
                            const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const instanciaUID = ui.getAttribute("instanciaUID")
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            main.appendChild(ui)

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo habitaciones...",
                                textoBoton: "Cancelar"
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/listarHabitacionesDisponbilesApartamentoConfiguracion",
                                apartamentoIDV: apartamentoIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                contenedor.innerHTML = null
                                const habitacionesDisponbiles = respuestaServidor?.ok

                                if (habitacionesDisponbiles.length === 0) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const error = "Ya est√°n todas las habitaciones insertadas en esta configuraci√≥n de apartamento."
                                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                                }
                                if (habitacionesDisponbiles.length > 0) {
                                    for (const detallesHabitacion of habitacionesDisponbiles) {
                                        const habitacionIDV = detallesHabitacion.habitacionIDV
                                        const habitacionUI = detallesHabitacion.habitacionUI
                                        const tituloHabitacion = document.createElement("div")
                                        tituloHabitacion.classList.add("confApartamento_contenedorMenu_tituloApartamento")
                                        tituloHabitacion.setAttribute("habitacionIDV", habitacionIDV)
                                        tituloHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addHabitacion.transactor)
                                        tituloHabitacion.innerText = habitacionUI
                                        contenedor.appendChild(tituloHabitacion)
                                    }
                                }

                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.setAttribute("boton", "cancelar")
                                botonCancelar.innerText = "Cancelar y volver a tras"
                                botonCancelar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCancelar)
                            }
                        },
                        transactor: async (habitacion) => {
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "A√±adiendo cama ..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const habitacionIDV = habitacion.target.getAttribute("habitacionIDV")
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/addHabitacionToConfiguracionApartamento",
                                apartamentoIDV: apartamentoIDV,
                                habitacionIDV: habitacionIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                const contenedorHabitacion = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.habitacionUI({
                                    habitacionUID: respuestaServidor?.habitacionUID,
                                    habitacionIDV: respuestaServidor?.habitacionIDV,
                                    habitacionUI: respuestaServidor?.habitacionUI
                                })
                                const infoNoCamas = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.noCamaInfoUI()
                                contenedorHabitacion.appendChild(infoNoCamas)
                                const selectorContenedorHabitaciones = document.querySelector("[componente=contenedorHabitaciones]")
                                selectorContenedorHabitaciones.appendChild(contenedorHabitacion)
                            }
                        }
                    },
                    addCama: {
                        UI: async function (data) {
                            const habitacionUID = data.habitacionUID
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const instanciaUID = ui.getAttribute("instanciaUID")
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            main.appendChild(ui)

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo camas...",
                                textoBoton: "Cancelar"
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/listarCamasDisponbilesApartamentoConfiguracion",
                                habitacionUID: String(habitacionUID)
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                contenedor.innerHTML = null
                                const camasDisponibles = respuestaServidor?.ok
                                if (camasDisponibles.length === 0) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const error = "Ya est√°n todas las camas insertadas en esta habitaci√≥n"
                                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                                }
                                if (camasDisponibles.length > 0) {
                                    contenedor.innerText = null
                                    for (const detallesCama of camasDisponibles) {
                                        const camaIDV = detallesCama.camaIDV
                                        const camaUI = detallesCama.camaUI
                                        const tituloHabitacion = document.createElement("div")
                                        tituloHabitacion.classList.add("confApartamento_contenedorMenu_tituloApartamento")
                                        tituloHabitacion.addEventListener("click", () => {
                                            this.transactor({
                                                habitacionUID,
                                                camaIDV
                                            })
                                        })
                                        tituloHabitacion.innerText = camaUI
                                        contenedor.appendChild(tituloHabitacion)
                                    }

                                }

                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.setAttribute("boton", "cancelar")
                                botonCancelar.innerText = "Cancelar y volver a tras"
                                botonCancelar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCancelar)
                            }
                        },
                        transactor: async (data) => {

                            const habitacionUID = data.habitacionUID
                            const camaIDV = data.camaIDV
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "A√±adiendo cama..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/addCamaToConfiguracionApartamentoHabitacion",
                                camaIDV: camaIDV,
                                habitacionUID: String(habitacionUID)
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                const metadatos = {
                                    camaUID: respuestaServidor?.nuevoUID,
                                    camaIDV: respuestaServidor?.camaIDV,
                                    camaUI: respuestaServidor?.camaUI,
                                    capacidad: respuestaServidor?.capaciad
                                }
                                const componenteCama = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.camaUI(metadatos)
                                const selectorContenedorHabitacion = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                selectorContenedorHabitacion.querySelector("[componente=infoVolatilCamasHabitacion]")?.remove()
                                selectorContenedorHabitacion.appendChild(componenteCama)
                            }
                        }
                    },
                    eliminarConfiguracion: {
                        UI: async () => {

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.innerText = "Eliminar configuraci√≥n de alojamiento"
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = "Confirma la eliminaci√≥n de toda la configuraci√≥n del apartamento. Esto implica la configuraci√≥n del apartamento, el perfil de precios y los bloqueos vigentes. Si este apartamento aparece en un comportamiento de precios, ser√° eliminado el apartamento del comportamiento de precios, pero el resto del comportamiento seguir√° vigente a no ser que sea el √∫nico apartamento en alg√∫n comportamiento de precios. Sus implicaciones ser√°n inmediatas."

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = "Comfirmar la eliminaci√≥n"
                            botonAceptar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarConfiguracion.confirmar)
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.innerText = "Cancelar la eliminaci√≥n"

                            document.querySelector("main").appendChild(pantallaInmersiva)



                        },
                        confirmar: async () => {
                            const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Eliminado configuraci√≥n de alojamiento..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/eliminarConfiguracionDeAlojamiento",
                                apartamentoIDV: apartamentoIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                const reservasActivas = respuestaServidor.reservasActivas


                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const contenedor = constructor.querySelector("[componente=contenedor]")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.innerText = `No se puede borrar esta configuraci√≥n de alojamiento`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.innerText = respuestaServidor?.error


                                /*
                                      {
                                            "componenteUID": "2908",
                                            "reservaUID": "8497950",
                                            "apartamentoIDV": "test",
                                            "apartamentoUI": "test"
                                        }
                                */
                                const contenedorReservas = document.createElement("div")
                                contenedorReservas.classList.add(
                                    "flexVertical",
                                    "gap6",
                                )
                                contenedor.appendChild(contenedorReservas)

                                reservasActivas.forEach(reservaActiva => {
                                    const reservaUID = reservaActiva.reservaUID
                                    const apartamentoUI = reservaActiva.apartamentoUI

                                    const reservaActivaContenedorUI = document.createElement("a")
                                    reservaActivaContenedorUI.classList.add(
                                        "borderRadius10",
                                        "areaSinDecoracionPredeterminada",
                                        "backgroundGrey1",
                                        "padding12",
                                        "comportamientoBoton"
                                    )
                                    reservaActivaContenedorUI.setAttribute("href", `/administracion/reservas/reserva:${reservaUID}/alojamiento`)
                                    reservaActivaContenedorUI.setAttribute("vista", `/administracion/reservas/reserva:${reservaUID}/alojamiento`)
                                    reservaActivaContenedorUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contenedorReservas.appendChild(reservaActivaContenedorUI)

                                    const titulo = document.createElement("div")
                                    titulo.innerText = "Reserva UID"
                                    reservaActivaContenedorUI.appendChild(titulo)

                                    const reservaIdentificador = document.createElement("div")
                                    reservaIdentificador.classList.add(
                                        "negrita"
                                    )
                                    reservaIdentificador.innerText = reservaUID
                                    reservaActivaContenedorUI.appendChild(reservaIdentificador)


                                })



                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.remove()
                                //botonAceptar.innerText = "Comfirmar y aceptar reserva"
                                //botonAceptar.addEventListener("click", () => {
                                //    this.confirmarNuevoEstado({
                                //        reservaUID,
                                //        instanciaUID_aceptarReserva,
                                //        nuevoEstado: "confirmada"
                                //    })
                                //})
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.innerText = "Volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)



                            }
                            if (respuestaServidor?.ok) {
                                const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                    advertenciaInmersiva.remove()
                                })
                                const navegacion = {
                                    "vista": "/administracion/arquitectura_del_alojamiento/configuraciones",
                                    "tipoOrigen": "menuNavegador"
                                }
                                casaVitini.shell.navegacion.controladorVista(navegacion)
                            }
                        }
                    },
                    eliminarHabitacion: {
                        UI: async function (data) {

                            const habitacionUID = data.habitacionUID
                            const habitacionUI = data.habitacionUI

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                            const instanciaUID = pantallaInmersiva.getAttribute("instanciaUID")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.innerText = `Eliminar ${habitacionUI}`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = `Confirmas eliminar ${habitacionUI} con identificador universal ${habitacionUID}`

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = `Comfirmar y eliminar ${habitacionUI}`
                            botonAceptar.addEventListener("click", () => {
                                this.confirmar({
                                    habitacionUID,
                                    instanciaUID
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.innerText = "Cancelar y volver"
                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        confirmar: async (data) => {
                            const habitacionUID = data.habitacionUID
                            const instanciaUID_pro = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Eliminando habitaci√≥n..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID_pro,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/eliminarHabitacionDeConfiguracionDeAlojamiento",
                                habitacionUID: String(habitacionUID)
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pro}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                document.querySelector(`[habitacionUID="${habitacionUID}"]`)?.remove()
                            }
                        }
                    },
                    eliminarCama: {
                        UI: async function (data) {

                            const camaUID = data.camaUID
                            const camaUI = data.camaUI
                            const camaIDV = data.camaIDV

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                            const instanciaUID = pantallaInmersiva.getAttribute("instanciaUID")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.innerText = `Eliminar ${camaUI}`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = `Confirmas eliminar ${camaUI} con identificador universal ${camaIDV}`

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = `Comfirmar y eliminar ${camaUI}`
                            botonAceptar.addEventListener("click", () => {
                                this.confirmar({
                                    camaUID,
                                    camaIDV,
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.innerText = "Cancelar y volver"
                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        confirmar: async (data) => {

                            const camaUID = data.camaUID
                            const habitacionUID = data.habitacionUID
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Eliminado cama..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/eliminarCamaDeConfiguracionDeAlojamiento",
                                camaUID: String(camaUID)
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                document.querySelector(`[camaUID="${camaUID}"]`)?.remove()
                                const selectorContenedoresHabitacion = document.querySelectorAll(`[habitacionUID]`)
                                selectorContenedoresHabitacion.forEach((habitacion) => {

                                    const camasDeLaHabitacion = habitacion.querySelectorAll("[camaUID]")
                                    const selectorInfoRenderizada = habitacion.querySelector("[componente=infoVolatilCamasHabitacion]")
                                    if (camasDeLaHabitacion.length === 0 && !selectorInfoRenderizada) {
                                        const infoNoCamas = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.noCamaInfoUI()
                                        habitacion.appendChild(infoNoCamas)
                                    }


                                })
                            }
                        }
                    },
                    actualizarEstadoConfiguracion: {
                        UI: async function (data) {
                            const estadoActual = data.estadoActual
                            let tituloBoton
                            let nuevoEstado
                            if (estadoActual === "nodisponible") {
                                tituloBoton = "Cambiar estado a Disponible"
                                nuevoEstado = "disponible"
                            }
                            if (estadoActual === "disponible") {
                                tituloBoton = "Cambiar estado a No disponible"
                                nuevoEstado = "nodisponible"
                            }

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.innerText = `Actualizar el estado de la configuraci√≥n`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.innerText = `Seleccione el nuevo estado de la configuraci√≥n. Su aplicaci√≥n ser√° inmediata. Es recomendable que cambie al estado disponible cuando se asegure de que tiene la configuraci√≥n del apartamento correctamente configurada.`

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.innerText = tituloBoton
                            botonAceptar.addEventListener("click", () => {
                                this.transactor({
                                    nuevoEstado
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.innerText = "Cancelar el cambio de estado"
                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        transactor: async (data) => {
                            const nuevoEstado = data.nuevoEstado
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Actualizando estado..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const apartamentoIDV = document.querySelector(`[apartamentoIDV]`).getAttribute("apartamentoIDV")
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/cambiarEstadoConfiguracionAlojamiento",
                                apartamentoIDV,
                                nuevoEstado
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const selectorEstadoActualIDV = document.querySelector("[estadoActual]")
                                selectorEstadoActualIDV.setAttribute("estadoActual", nuevoEstado)
                                let estadoConfiguracionUI
                                if (nuevoEstado === "nodisponible") {
                                    estadoConfiguracionUI = "No disponible"
                                }
                                if (nuevoEstado === "disponible") {
                                    estadoConfiguracionUI = "Disponible"
                                }
                                const selectorEstadoActualUI = document.querySelector("[componente=estadoActualUI]")
                                selectorEstadoActualUI.innerText = estadoConfiguracionUI
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            }
                        }
                    },
                    gestionZona: {
                        ui: async function (data) {
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const instanciaUID_gestionZonaUI = ui.getAttribute("instanciaUID")
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            const apartamentoIDV = data.apartamentoIDV


                            const t1 = document.createElement("div")
                            t1.classList.add("tituloGris")
                            t1.innerText = "Cambiar zona de publicaci√≥n"
                            contenedor.appendChild(t1)

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.innerText = "Cancelar y volver a tras"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            contenedor.appendChild(botonCancelar)


                            const t2 = document.createElement("div")
                            t2.innerText = "La zona de publicaci√≥n determina d√≥nde se mostrar√° esta configuraci√≥n de alojamiento. Existen tres zonas. La zona p√∫blica que determina que esta configuraci√≥n se anuncie solo desde la plaza, para los clientes y fuera de la zona administrativa. La zona privada que establece que esta configuraci√≥n solo se anuncie dentro de la zona administrativa y, por √∫ltima, est√° la zona global, que anuncia esta configuraci√≥n en toda Casa Vitini"
                            contenedor.appendChild(t2)


                            const botonZonaPublica = document.createElement("div")
                            botonZonaPublica.classList.add("boton")
                            botonZonaPublica.setAttribute("zona", "publica")
                            botonZonaPublica.innerText = "Cambiar a Zona P√∫blica"
                            botonZonaPublica.addEventListener("click", () => {
                                this.cambiarZona({
                                    apartamentoIDV,
                                    nuevaZona: "publica",
                                    instanciaUID_gestionZonaUI
                                })
                            })
                            contenedor.appendChild(botonZonaPublica)

                            const botonZonaPrivada = document.createElement("div")
                            botonZonaPrivada.classList.add("boton")
                            botonZonaPrivada.setAttribute("zona", "privada")
                            botonZonaPrivada.innerText = "Cambiar a Zona Privada"
                            botonZonaPrivada.addEventListener("click", () => {
                                this.cambiarZona({
                                    apartamentoIDV,
                                    nuevaZona: "privada",
                                    instanciaUID_gestionZonaUI
                                })
                            })
                            contenedor.appendChild(botonZonaPrivada)

                            const botonZonaGlobal = document.createElement("div")
                            botonZonaGlobal.classList.add("boton")
                            botonZonaGlobal.setAttribute("zona", "global")
                            botonZonaGlobal.innerText = "Cambiar a Zona Global"
                            botonZonaGlobal.addEventListener("click", () => {
                                this.cambiarZona({
                                    apartamentoIDV,
                                    nuevaZona: "global",
                                    instanciaUID_gestionZonaUI
                                })
                            })
                            contenedor.appendChild(botonZonaGlobal)


                            document.querySelector("main").appendChild(ui)
                        },
                        cambiarZona: async (data) => {

                            const nuevaZona = data.nuevaZona
                            const apartamentoIDV = data.apartamentoIDV
                            const instanciaUID_gestionZonaUI = data.instanciaUID_gestionZonaUI


                            const instanciaUID_pantallaCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Actualizando zona de la configuraci√≥n de alojamiento..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID_pantallaCargaSuperPuesta,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/actualizarZonaDeLaConfiguracionApartamento",
                                nuevaZona,
                                apartamentoIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_gestionZonaUI}"]`)
                            if (!instanciaRenderizada) { return }

                            if (respuestaServidor?.error) {
                                document.querySelector(`[instanciaUID="${instanciaUID_pantallaCargaSuperPuesta}"]`)?.remove()
                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const nuevaZona = respuestaServidor.nuevaZona
                                const selectorZonaUI_renderizada = document.querySelector(`[instanciaUID="${instanciaUID_gestionZonaUI}"]`)
                                if (!selectorZonaUI_renderizada) {
                                    return
                                }
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                const selectorZonaUI = document.querySelector(`[contenedor=configuracionAlojamiento][apartamentoIDV="${apartamentoIDV}"]`).querySelector("[data=zonaPublicacion]")

                                let zonaUI
                                if (nuevaZona === "publica") {
                                    zonaUI = "Publica"
                                }
                                if (nuevaZona === "global") {
                                    zonaUI = "Global"
                                }
                                if (nuevaZona === "privada") {
                                    zonaUI = "Privada"
                                }
                                selectorZonaUI.innerText = zonaUI
                            }
                        }
                    },
                    gestionImagen: {
                        subirImagen: () => {
                            const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                            const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const selectorEspacio = document.querySelector("[componente=espacioConfiguracionDelAlojamiento]")
                            const campoEntrada = document.createElement("input")
                            campoEntrada.id = "campoEntrada"
                            campoEntrada.type = "file"
                            campoEntrada.style.display = "none"
                            campoEntrada.addEventListener("change", (event) => {
                                const archivoSeleccionado = event.target.files[0];
                                if (archivoSeleccionado) {
                                    contenedorImagen.innerHTML = null
                                    const iconoProceso = casaVitini.ui.componentes.spinnerSimple()
                                    iconoProceso.style.background = "white"
                                    iconoProceso.style.paddingLeft = "4px"
                                    iconoProceso.style.background = "#ffffff7d"
                                    iconoProceso.style.borderRadius = "18px"
                                    iconoProceso.style.webkitBackdropFilter = "blur(20px)"
                                    iconoProceso.style.backdropFilter = "blur(20px)"
                                    contenedorImagen.appendChild(iconoProceso)

                                    const iconoProcesoRenderizado = document.querySelector("[componente=iconoProceso]")
                                    const lector = new FileReader();
                                    lector.onload = async (eventoCarga) => {
                                        const contenidoBuffer = eventoCarga.target.result;
                                        //Convierte el contenido del buffer a una cadena base64
                                        const contenidoBase64 = btoa(new Uint8Array(contenidoBuffer).reduce((datos, byte) => datos + String.fromCharCode(byte), ""));
                                        //Crea el objeto JSON con el contenido de la imagen
                                        const transaccion = {
                                            zona: "administracion/arquitectura/configuraciones/gestionImagenConfiguracionApartamento",
                                            apartamentoIDV: apartamentoIDV,
                                            contenidoArchivo: contenidoBase64
                                        };
                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        if (respuestaServidor?.error) {
                                            iconoProceso.remove()
                                            document.getElementById("campoEntrada").remove()
                                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            await casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.obtenerImgen()
                                        }
                                        if (respuestaServidor?.ok) {
                                            iconoProceso.remove()
                                            contenedorImagen.style.backgroundImage = `url(data:image/png;base64,${contenidoBase64})`;
                                            document.getElementById("campoEntrada").remove()
                                            casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.opcionesImagen()
                                        }
                                        //Aqu√≠ puedes realizar acciones con el archivo seleccionado, como subirlo a tu servidor
                                        // 
                                    }
                                    lector.readAsArrayBuffer(archivoSeleccionado);
                                };
                            })
                            const selectorCampoRederizado = document.getElementById("campoEntrada")
                            if (!selectorCampoRederizado) {
                                selectorEspacio.appendChild(campoEntrada)
                            }
                            document.getElementById("campoEntrada").click()
                        },
                        obtenerImgen: async (IDV) => {
                            const apartamentoIDV = IDV || document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                            contenedorImagen.innerHTML = null
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/obtenerImagenConfiguracionAdministracion",
                                apartamentoIDV: apartamentoIDV
                            }

                            const iconoProceso = casaVitini.ui.componentes.spinnerSimple()
                            iconoProceso.style.background = "white"
                            iconoProceso.style.paddingLeft = "4px"
                            iconoProceso.style.background = "#ffffff7d"
                            iconoProceso.style.borderRadius = "18px"
                            iconoProceso.style.webkitBackdropFilter = "blur(20px)"
                            iconoProceso.style.backdropFilter = "blur(20px)"
                            contenedorImagen.appendChild(iconoProceso)
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            iconoProceso?.remove()
                            if (respuestaServidor?.error) {

                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                const imagenBase64 = respuestaServidor?.imagen
                                if (!imagenBase64) {
                                    contenedorImagen.innerText = "Haz click para a√±adir una imagen del apartamento"
                                    contenedorImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.subirImagen)
                                    contenedorImagen.removeEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.mostrarOpciones)
                                } else {
                                    const detectarTipoDeImagen = (base64String) => {
                                        const binarioMagicoPNG = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);
                                        const binarioMagicoJPEG = new Uint8Array([255, 216, 255]);
                                        const binarioMagicoTIFF = new Uint8Array([73, 73, 42]);
                                        const arrayBuffer = Uint8Array.from(atob(base64String), c => c.charCodeAt(0));
                                        const buffer = new Uint8Array(arrayBuffer);
                                        if (buffer.subarray(0, 8).every((value, index) => value === binarioMagicoPNG[index])) {
                                            "PNG";
                                        } else if (buffer.subarray(0, 3).every((value, index) => value === binarioMagicoJPEG[index])) {
                                            "JPEG";
                                        } else if (buffer.subarray(0, 3).every((value, index) => value === binarioMagicoTIFF[index])) {
                                            "TIFF";
                                        } else {
                                            "Tipo de imagen desconocido";
                                        }
                                    };
                                    const tipoDeImagen = detectarTipoDeImagen(imagenBase64);
                                    contenedorImagen.style.backgroundImage = `url(data:image/${tipoDeImagen};base64,${imagenBase64})`;
                                    casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.opcionesImagen()
                                }
                            }
                        },
                        mostrarOpciones: (e) => {
                            const contenedorOpcionesImagen = document.querySelector("[componente=contenedorOpcionesImagen]")
                            const estadoVision = contenedorOpcionesImagen.style?.display
                            const componente = e.target.getAttribute("componente")
                            if (componente === "opcionImagen") {

                            }
                            if (estadoVision === "none" || !estadoVision) {
                                contenedorOpcionesImagen.style.display = "flex"
                            } else {
                                contenedorOpcionesImagen.style.display = "none"
                            }
                        },
                        eliminarImagen: {
                            UI: async function () {

                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.innerText = `Eliminar imagen de la configuraci√≥n del apartamento.`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.innerText = `¬øConfirmas eliminar la imagen actual de la configuraci√≥n de alojamiento?`

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.innerText = `Confirmar y eliminar la imagen`
                                botonAceptar.addEventListener("click", this.confirmar)
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.innerText = "Cancelar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)
                            },
                            confirmar: async () => {
                                const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                                const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                                contenedorImagen.innerHTML = null
                                const iconoProceso = casaVitini.ui.componentes.spinnerSimple()
                                iconoProceso.style.background = "white"
                                iconoProceso.style.paddingLeft = "4px"
                                iconoProceso.style.background = "#ffffff7d"
                                iconoProceso.style.borderRadius = "18px"
                                iconoProceso.style.webkitBackdropFilter = "blur(20px)"
                                iconoProceso.style.backdropFilter = "blur(20px)"
                                contenedorImagen.appendChild(iconoProceso)
                                const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                    advertenciaInmersiva.remove()
                                })
                                const transaccion = {
                                    zona: "administracion/arquitectura/configuraciones/eliminarImagenConfiguracionApartamento",
                                    apartamentoIDV: apartamentoIDV
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                if (respuestaServidor?.error) {
                                    iconoProceso?.remove()
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    iconoProceso.remove()
                                    contenedorImagen.removeAttribute("style")
                                    casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.obtenerImgen(apartamentoIDV)
                                }
                            }
                        },
                        opcionesImagen: () => {
                            const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                            contenedorImagen.removeEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.subirImagen)
                            contenedorImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.mostrarOpciones)
                            const contenedorOpciones = document.createElement("div")
                            contenedorOpciones.classList.add("arquitecturaConfApartamento_contenedorImg_opciones")
                            contenedorOpciones.setAttribute("componente", "contenedorOpcionesImagen")
                            const actualizarImagen = document.createElement("div")
                            actualizarImagen.classList.add("arquitecturaConfApartamento_contenedorImg_opcion")
                            actualizarImagen.setAttribute("componente", "opcionImagen")
                            actualizarImagen.innerText = "Actualiar imagen"
                            actualizarImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.subirImagen)
                            contenedorOpciones.appendChild(actualizarImagen)
                            const eliminarImagen = document.createElement("div")
                            eliminarImagen.classList.add("arquitecturaConfApartamento_contenedorImg_opcion")
                            eliminarImagen.setAttribute("componente", "opcionImagen")
                            eliminarImagen.innerText = "Eliminar imagen"
                            eliminarImagen.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.eliminarImagen.UI()
                            })
                            contenedorOpciones.appendChild(eliminarImagen)
                            const contenedorOpcionesRenderizado = document.querySelector("[componente=contenedorOpcionesImagen]")
                            if (!contenedorOpcionesRenderizado) {
                                contenedorImagen.appendChild(contenedorOpciones)
                            }
                        },
                    },
                    componentesUI: {
                        habitacionUI: (metadatos) => {
                            const habitacionUI = metadatos.habitacionUI
                            const habitacionIDV = metadatos.habitacionIDV
                            const habitacionUID = metadatos.habitacionUID
                            const contenedor = document.createElement("div")
                            contenedor.classList.add("arquitecturaConfApartamento_contenedorHabitacion")
                            contenedor.setAttribute("habitacionUID", habitacionUID)
                            contenedor.setAttribute("habitacionIDV", habitacionIDV)
                            const barraHerramientas = document.createElement("div")
                            barraHerramientas.classList.add("aquitecturaConfApartamento_barraHerrameintas")
                            const tituloHabitacion = document.createElement("div")
                            tituloHabitacion.classList.add("arquitecturaConfApartamento_tituloHabitacion")
                            tituloHabitacion.innerText = habitacionUI
                            barraHerramientas.appendChild(tituloHabitacion)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("arquitecturaConfApartamento_barraHerramientas_contenedorBotones")
                            const botonEliminarHabitacion = document.createElement("div")
                            botonEliminarHabitacion.classList.add("arquitecturaConfApartamento_botonV2")
                            botonEliminarHabitacion.innerText = "Eliminar habitaci√≥n"
                            botonEliminarHabitacion.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarHabitacion.UI({
                                    habitacionUI,
                                    habitacionUID
                                })
                            })
                            contenedorBotones.appendChild(botonEliminarHabitacion)
                            const botonAddCama = document.createElement("div")
                            botonAddCama.classList.add("arquitecturaConfApartamento_botonV2")
                            botonAddCama.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addCama.UI({
                                    habitacionUID
                                })
                            })
                            botonAddCama.innerText = "Anadir cama"
                            contenedorBotones.appendChild(botonAddCama)
                            barraHerramientas.appendChild(contenedorBotones)
                            contenedor.appendChild(barraHerramientas)
                            return contenedor
                        },
                        camaUI: (metadatos) => {
                            const camaIDV = metadatos.camaIDV
                            const camaUID = metadatos.camaUID
                            const camaUI = metadatos.camaUI
                            const capacidad = metadatos.capacidad
                            const contenedorCama = document.createElement("div")
                            contenedorCama.classList.add("arquitecturaConfApartamento_contenedorCama")
                            contenedorCama.setAttribute("camaIDV", camaIDV)
                            contenedorCama.setAttribute("camaUID", camaUID)
                            const contenedorInfo = document.createElement("div")
                            contenedorInfo.classList.add("arquitecturaConfApartamento_contenedorCamaInfo")
                            const tituloCama = document.createElement("div")
                            tituloCama.classList.add("arquitecturaConfApartamento_tituloCama")
                            tituloCama.classList.add("negrita")
                            tituloCama.innerText = camaUI
                            contenedorInfo.appendChild(tituloCama)
                            const tituloCapacidadCama = document.createElement("div")
                            tituloCapacidadCama.classList.add("arquitecturaConfApartamento_tituloCama")
                            tituloCapacidadCama.innerText = `Capacidad pernoctativa: ${capacidad}`
                            contenedorInfo.appendChild(tituloCapacidadCama)
                            contenedorCama.appendChild(contenedorInfo)
                            const contenedorOpciones = document.createElement("div")
                            contenedorOpciones.classList.add("arquitecturaConfApartamento_contenedorCamaOpciones")
                            const botonEliminar = document.createElement("div")
                            botonEliminar.classList.add("arquitecturaConfApartamento_botonV3")
                            botonEliminar.innerText = "Eliminar cama"
                            botonEliminar.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarCama.UI({
                                    camaUID,
                                    camaUI,
                                    camaIDV
                                })
                            })
                            contenedorOpciones.appendChild(botonEliminar)
                            contenedorCama.appendChild(contenedorOpciones)
                            return contenedorCama
                        },
                        noCamaInfoUI: () => {
                            const infoNoCamas = document.createElement("div")
                            infoNoCamas.classList.add("arquitecturaConfApartamento_infoNoCama")
                            infoNoCamas.setAttribute("componente", "infoVolatilCamasHabitacion")
                            infoNoCamas.innerText = "Esta habitaci√≥n no tiene ninguna cama configurada, a√±ade una cama para hacer seleccionable esta habitaci√≥n."
                            return infoNoCamas
                        }
                    }
                },
                crearConfiguracion: {
                    arranque: async () => {
                        const main = document.querySelector("main")
                        const instanciaUID = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")

                        main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento/configuraciones/nuevo")
                        const transaccion = {
                            zona: "administracion/arquitectura/entidades/listarApartamentosComoEntidades"
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                        if (!seccionRenderizada)

                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                        if (respuestaServidor?.ok) {
                            const apartamentosEntidad = respuestaServidor?.apartamentosComoEntidadesDisponibles
                            const espacioInfo = document.querySelector("[componente=info]")
                            if (apartamentosEntidad.length === 0) {
                                espacioInfo.innerHTML = `No hay entidades de apartamento disponibles para crear configuraciones. Si necesita crear una nueva configuraci√≥n, primero genere un nuevo apartamento como entidad. Para ello, dir√≠gete a: Arquitectura de alojamiento > Entidades de alojamiento > Generar nuevo apartamento.`
                                const enlace = document.createElement("a")
                                enlace.classList.add("enlace")
                                enlace.innerText = "Ir directo a crear un nuevo apartamento como entidad"
                                enlace.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                                enlace.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                                enlace.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                main.appendChild(enlace)
                            }
                            if (apartamentosEntidad.length > 0) {
                                espacioInfo.innerHTML = `Escoge un apartamento como entidad para construir la base de la configuraci√≥n. Luego podr√°s llenar este apartamento con habitaciones y asignarles camas. Recuerda que aqu√≠ se muestran los apartamentos como entidades que no has usado para construir configuraciones de alojamiento.`
                                const selectorZonaCreacionConfiguracion = document.querySelector("[componente=zonaCreacion]")
                                const contenedorOpciones = document.createElement("select")
                                contenedorOpciones.setAttribute("componente", "selectorApartamentoIDV")
                                contenedorOpciones.classList.add("arquitecturaConfCrearConfiguracion_selectorApartamento")
                                const opcion = document.createElement("option");
                                opcion.value = "";
                                opcion.disabled = true;
                                opcion.selected = true;
                                opcion.text = "Selecciona un apartamento como entidad para comenzar";
                                contenedorOpciones.add(opcion);
                                for (const detallesApartmentoComoEntidad of apartamentosEntidad) {
                                    const apartamentoUI = detallesApartmentoComoEntidad.apartamentoUI
                                    const apartamentoIDV = detallesApartmentoComoEntidad.apartamentoIDV
                                    const opcion = document.createElement("option");
                                    opcion.value = apartamentoIDV;
                                    opcion.text = `${apartamentoUI} (${apartamentoIDV})`;
                                    contenedorOpciones.add(opcion);
                                }
                                selectorZonaCreacionConfiguracion.appendChild(contenedorOpciones)
                                const botonCrearConfiguracion = document.createElement("div")
                                botonCrearConfiguracion.classList.add("arquitecturaConfCrearConfiguracion_botonCrearConfiguracion")
                                botonCrearConfiguracion.innerText = "Crear configuraci√≥n"
                                botonCrearConfiguracion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.crearConfiguracion.transactor)
                                selectorZonaCreacionConfiguracion.appendChild(botonCrearConfiguracion)
                            }
                        }
                    },
                    transactor: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Creando configuraci√≥n de alojamiento..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const apartamentoSeleccionado = document.querySelector("[componente=selectorApartamentoIDV]").value
                        if (!apartamentoSeleccionado) {
                            const error = "Selecciona un apartamento primero desde el selector de lista"
                            casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/crearConfiguracionAlojamiento",
                            apartamentoIDV: apartamentoSeleccionado
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const apartamentoIDV = respuestaServidor?.apartamentoIDV
                            const vista = `/administracion/arquitectura_del_alojamiento/configuraciones/${apartamentoIDV}`
                            const navegacion = {
                                "vista": vista,
                                "tipoOrigen": "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                }
            }
        },
        usuarios: {
            arranque: async () => {
                const main = document.querySelector("main")
                const instanciaUID = main.getAttribute("instanciaUID")

                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[1]
                const numeroDirectorios = granuladoURL.directorios.length
                const parametroBuscar = granuladoURL.parametros.buscar
                const rawArray = granuladoURL.rawArray


                if (rawArray.length === 2) {

                    casaVitini.administracion.usuarios.portada.buscadorUI()
                } else if (parametroBuscar?.length > 0) {

                    main.setAttribute("zonaCSS", "administracion/usuarios/buscador")
                    casaVitini.administracion.usuarios.portada.buscadorUI()
                    if (!granuladoURL.parametros.buscar) {
                        return
                    }
                    const campoBuscador = document.querySelector("[componente=zonaNavegacionPaginadaUsuarios]")
                    campoBuscador.value = decodeURI(parametroBuscar)

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "cliente_uid") {
                            nombreColumnaIDV = "clienteUID"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        } else if ((nombreParametroIDV)?.toLowerCase() === "buscar") {
                            valorParametroURL = decodeURI(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                    })

                    casaVitini.administracion.usuarios.portada.mostrarUsuariosResueltos(parametrosFormatoIDV)
                } else if (rawArray.length > 2) {

                    casaVitini.administracion.usuarios.detallesUsuario.arranque()
                }
            },
            portada: {
                buscadorUI: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/usuarios/buscador")
                    const espacioClientes = document.querySelector("[componente=espacioUsuarios]")
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("usuarios_contenedorBotones")
                    const botonCrearCuenta = document.createElement("a")
                    botonCrearCuenta.classList.add("usuarios_botonV1")
                    botonCrearCuenta.setAttribute("href", "/administracion/usuarios/nuevo")
                    botonCrearCuenta.setAttribute("vista", "/administracion/usuarios/nuevo")
                    botonCrearCuenta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    botonCrearCuenta.innerText = "Crear cuenta de usuario"
                    contenedorBotones.appendChild(botonCrearCuenta)
                    espacioClientes.appendChild(contenedorBotones)
                    const campoBuscador = document.createElement("input")
                    campoBuscador.classList.add("campoBuscadorClientes")
                    campoBuscador.setAttribute("componente", "zonaNavegacionPaginadaUsuarios")
                    campoBuscador.setAttribute("componenteCampo", "buscadorUsuarios")
                    campoBuscador.setAttribute("placeholder", "Busque un usuario por nombre de usuario, por nombre, por pasaporte, por correo o por tel√©fono. Tambi√©n puedes hacer b√∫squedas combinadas.")
                    campoBuscador.addEventListener("input", casaVitini.administracion.usuarios.portada.buscadorUsuariosPorCampo)
                    espacioClientes.appendChild(campoBuscador)

                },
                buscadorUsuariosPorCampo: async (cliente) => {
                    const instanciaUID = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")
                    const campo = document.querySelector("[componente=zonaNavegacionPaginadaUsuarios]")

                    const gridUsuarios = document.querySelector("[areagrid=gridUsuarios]")
                    gridUsuarios?.remove()

                    const terminoBusqueda = cliente.target.value
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    document.querySelector("[gridUID=gridUsuarios]")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[contenedor=filtrosOrden]")?.remove()

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.innerText = "Buscando usuarios..."
                    campo.parentNode.insertBefore(estadoBusquedaUI, campo.nextSibling);


                    const campoVacio = cliente.target.value.length
                    if (campoVacio === 0) {
                        clearTimeout(casaVitini.componentes.temporizador);
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        document.querySelector("[componenteID=gridUsuarios]")?.remove()
                        document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                        const vistaActual = document.getElementById("uiNavegacion").getAttribute("vistaActual")
                        const resetUrl = "/administracion/usuarios"
                        const titulo = "casavitini"
                        const estado = {
                            zona: vistaActual,
                            estadoInternoZona: "estado",
                            tipoCambio: "total"
                        }
                        window.history.replaceState(estado, titulo, resetUrl);
                        return;
                    }
                    clearTimeout(casaVitini.componentes.temporizador);
                    casaVitini.componentes.temporizador = setTimeout(async () => {
                        const transaccion = {
                            zona: "administracion/usuarios/buscarUsuarios",
                            tipoBusqueda: "rapido",
                            pagina: 1,
                            buscar: terminoBusqueda,
                            origen: "botonMostrarUsuarios",
                            tipoConstruccionGrid: "total",
                            instanciaUID: instanciaUID
                        }
                        casaVitini.administracion.usuarios.portada.mostrarUsuariosResueltos(transaccion)
                    }, 1500);
                },
                mostrarUsuariosResueltos: async function (transaccion) {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacioComportamiento]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)
                    delete transaccion.instanciaUID
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const granuladoURL = casaVitini.utilidades.granuladorURL()

                    const paginaTipo = transaccion.paginaTipo
                    delete transaccion.paginaTipo

                    const selectorAlmacen = document.querySelector("[areaGrid=gridUsuarios]")?.getAttribute("almacen") || "{}"
                    const almacen = JSON.parse(selectorAlmacen)
                    const busquedaInicial = transaccion.buscar || almacen?.buscar

                    let nombreColumnaURL
                    const nombreColumna = transaccion.nombreColumna
                    if (nombreColumna) {
                        nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                    }

                    const resolverUsuarios = await casaVitini.shell.servidor({
                        zona: "administracion/usuarios/buscarUsuarios",
                        tipoBusqueda: "rapido",
                        buscar: busquedaInicial,
                        nombreColumna: transaccion.nombreColumna,
                        sentidoColumna: transaccion.sentidoColumna,
                        pagina: Number(transaccion?.pagina || 1)

                    })
                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }

                    //document.querySelector("[gridUID=gridUsuarios]")?.remove()
                    if (resolverUsuarios?.error) {
                        document.querySelector("[componente=estadoBusqueda]").innerText = resolverUsuarios?.error
                        return
                    }

                    if (resolverUsuarios.totalUsuarios === 0) {
                        document.querySelector("[componente=estadoBusqueda]").innerText = "No se han encontrado usuarios"
                        return
                    }
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    const usuarios = resolverUsuarios.usuarios
                    const buscar = resolverUsuarios.buscar
                    const paginasTotales = resolverUsuarios.paginasTotales
                    const pagina = resolverUsuarios.pagina
                    const sentidoColumna = resolverUsuarios.sentidoColumna
                    const columnasGrid = [
                        {
                            columnaUI: "Usuario",
                            columnaIDV: "usuario",
                        },
                        {
                            columnaUI: "Correo",
                            columnaIDV: "mail",
                        },
                        {
                            columnaUI: "Nombre",
                            columnaIDV: "nombre",
                        },
                        {
                            columnaUI: "Primer apellido",
                            columnaIDV: "primerApellido",
                        },
                        {
                            columnaUI: "Segundo Apellido",
                            columnaIDV: "segundoApellido",
                        },
                        {
                            columnaUI: "Pasaporte",
                            columnaIDV: "pasaporte",
                        },
                        {
                            columnaUI: "Tel√©fono",
                            columnaIDV: "telefono",
                        },
                    ]
                    const parametrosFinales = {
                        buscar: buscar
                    }

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.usuarios.portada.mostrarUsuariosResueltos",
                        configuracionGrid: {
                            filas: usuarios,
                            almacen: {
                                buscar: buscar,
                            },
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[componente=espacioUsuarios]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridUsuarios",
                            mascaraURL: {
                                mascara: "/administracion/usuarios/",
                                parametro: "usuario"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })

                    const titulo = "ADminstar reservas"
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "zonaNavegacionPaginadaUsuarios",
                        funcionPersonalizada: "administracion.usuarios.portada.mostrarUsuariosResueltos",
                        args: transaccion
                    }
                    if (origen === "url" || origen === "botonMostrarUsuarios") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }
                    if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    }
                    if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }
                },
            },
            detallesUsuario: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/usuarios/detallesDelUsuario")
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    if (comandoInicial === "datos_personales") {
                        const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        casaVitini.administracion.usuarios.detallesUsuario.datosUsuario.UI(usuarioUID)
                    } else if (comandoInicial === "modificar_idx") {
                        const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        casaVitini.administracion.usuarios.detallesUsuario.modificarIDX.UI(usuarioUID)
                    } else if (comandoInicial === "cambiar_clave") {
                        const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        casaVitini.administracion.usuarios.detallesUsuario.cambiarClave.UI(usuarioUID)
                    } else if (comandoInicial === "rol") {
                        const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        casaVitini.administracion.usuarios.detallesUsuario.rol.UI(usuarioUID)
                    } else {
                        casaVitini.administracion.usuarios.detallesUsuario.portada.UI(comandoInicial)
                    }

                },
                portada: {
                    UI: async (usuarioIDX) => {
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "administracion/usuarios/datosCuentaIDX",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ningun usuario con ese identificador",
                                descripcion: "El usuario no existe.Prueba con otro identificador"
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesUsuario = respuestaServidor?.ok
                            const usuarioIDX = detallesUsuario.usuario
                            const rol = detallesUsuario.rol
                            const estadoCuenta = detallesUsuario.estadoCuenta
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                            let estadoCuentaUI
                            if (estadoCuenta === "activado") {
                                estadoCuentaUI = "Desactivar cuenta"
                            }
                            if (estadoCuenta === "desactivado") {
                                estadoCuentaUI = "Activar cuenta"
                            }
                            const contenedorOpciones = document.createElement("div")
                            contenedorOpciones.classList.add("detallesUsuario_contenedorOpciones")
                            const opcionInformacion = document.createElement("a")
                            opcionInformacion.classList.add("detallesUsuario_opcionInformacion")
                            opcionInformacion.innerText = "Sus datos personales"
                            opcionInformacion.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/datos_personales`)
                            opcionInformacion.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/datos_personales`)
                            opcionInformacion.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            contenedorOpciones.appendChild(opcionInformacion)
                            const opcionCambiarIDX = document.createElement("a")
                            opcionCambiarIDX.classList.add("detallesUsuario_opcionInformacion")
                            opcionCambiarIDX.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/modificar_idx`)
                            opcionCambiarIDX.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/modificar_idx`)
                            opcionCambiarIDX.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            opcionCambiarIDX.innerText = "Modificar su VitiniID"
                            contenedorOpciones.appendChild(opcionCambiarIDX)
                            const opcionCambiarRol = document.createElement("a")
                            opcionCambiarRol.classList.add("detallesUsuario_opcionInformacion")
                            opcionCambiarRol.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/rol`)
                            opcionCambiarRol.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/rol`)
                            opcionCambiarRol.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            opcionCambiarRol.innerText = "Cambiar su rol"
                            contenedorOpciones.appendChild(opcionCambiarRol)
                            const opcionClave = document.createElement("a")
                            opcionClave.classList.add("detallesUsuario_opcionInformacion")
                            opcionClave.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/cambiar_clave`)
                            opcionClave.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/cambiar_clave`)
                            opcionClave.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            opcionClave.innerText = "Cambiar su contrasena"
                            contenedorOpciones.appendChild(opcionClave)
                            const opcionCambiarEstado = document.createElement("a")
                            opcionCambiarEstado.classList.add("detallesUsuario_opcionInformacion")
                            opcionCambiarEstado.setAttribute("estadoCuenta", estadoCuenta)
                            opcionCambiarEstado.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarEstadoCuenta.UI)
                            opcionCambiarEstado.innerText = estadoCuentaUI
                            contenedorOpciones.appendChild(opcionCambiarEstado)
                            const opcionEliminarCuenta = document.createElement("a")
                            opcionEliminarCuenta.classList.add("detallesUsuario_opcionInformacion")
                            opcionEliminarCuenta.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.eliminarCuenta.UI)
                            opcionEliminarCuenta.innerText = "Eliminar su cuenta"
                            contenedorOpciones.appendChild(opcionEliminarCuenta)
                            espacioUsuario.appendChild(contenedorOpciones)
                        }
                    },
                },
                datosUsuario: {
                    UI: async (usuarioIDX) => {
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "/administracion/usuarios/detallesUsuario",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesUsuario = respuestaServidor?.ok
                            const usuarioIDX = detallesUsuario.usuarioIDX
                            const rol = detallesUsuario.rol
                            const datosUsuario = detallesUsuario.datosUsuario
                            const nombre = datosUsuario.nombre || ""
                            const primerApellido = datosUsuario.primerApellido || ""
                            const segundoApellido = datosUsuario.segundoApellido || ""
                            const pasaporte = datosUsuario.pasaporte || ""
                            const telefono = datosUsuario.telefono || ""
                            const mail = datosUsuario.mail || ""
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                            const contenedorDatosUsuario = document.createElement("div")
                            contenedorDatosUsuario.classList.add("detallesUsuario_contenedorDatosUsuario")
                            const nombreUI = document.createElement("a")
                            nombreUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            let titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.innerText = "Nombre"
                            nombreUI.appendChild(titulo)
                            const campoNombre = document.createElement("input")
                            campoNombre.classList.add("detallesUsuario_campoDatosUsuario")
                            campoNombre.setAttribute("campo", "nombre")
                            campoNombre.value = nombre
                            nombreUI.appendChild(campoNombre)
                            contenedorDatosUsuario.appendChild(nombreUI)
                            const primerApellidoUI = document.createElement("a")
                            primerApellidoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.innerText = "Primero apellido"
                            primerApellidoUI.appendChild(titulo)
                            const campoPrimerApellido = document.createElement("input")
                            campoPrimerApellido.classList.add("detallesUsuario_campoDatosUsuario")
                            campoPrimerApellido.setAttribute("campo", "primerApellido")
                            campoPrimerApellido.value = primerApellido
                            primerApellidoUI.appendChild(campoPrimerApellido)
                            contenedorDatosUsuario.appendChild(primerApellidoUI)
                            const segundoApellidoUI = document.createElement("a")
                            segundoApellidoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.innerText = "Segundo apellido"
                            segundoApellidoUI.appendChild(titulo)
                            const campoSegundoApellido = document.createElement("input")
                            campoSegundoApellido.classList.add("detallesUsuario_campoDatosUsuario")
                            campoSegundoApellido.setAttribute("campo", "segundoApellido")
                            campoSegundoApellido.value = segundoApellido
                            segundoApellidoUI.appendChild(campoSegundoApellido)
                            contenedorDatosUsuario.appendChild(segundoApellidoUI)
                            const pasaporteUI = document.createElement("a")
                            pasaporteUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.innerText = "Pasaporte"
                            pasaporteUI.appendChild(titulo)
                            const campoPasaporte = document.createElement("input")
                            campoPasaporte.classList.add("detallesUsuario_campoDatosUsuario")
                            campoPasaporte.setAttribute("campo", "pasaporte")
                            campoPasaporte.value = pasaporte
                            pasaporteUI.appendChild(campoPasaporte)
                            contenedorDatosUsuario.appendChild(pasaporteUI)
                            const telefonoUI = document.createElement("a")
                            telefonoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.innerText = "Tel√©fono"
                            telefonoUI.appendChild(titulo)
                            const campoTelefono = document.createElement("input")
                            campoTelefono.classList.add("detallesUsuario_campoDatosUsuario")
                            campoTelefono.setAttribute("campo", "telefono")
                            campoTelefono.value = telefono
                            telefonoUI.appendChild(campoTelefono)
                            contenedorDatosUsuario.appendChild(telefonoUI)
                            const mailUI = document.createElement("a")
                            mailUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.innerText = "Correo electron√≠co"
                            mailUI.appendChild(titulo)
                            const campomail = document.createElement("input")
                            campomail.classList.add("detallesUsuario_campoDatosUsuario")
                            campomail.setAttribute("campo", "mail")
                            campomail.value = mail
                            mailUI.appendChild(campomail)
                            contenedorDatosUsuario.appendChild(mailUI)
                            espacioUsuario.appendChild(contenedorDatosUsuario)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                            contenedorBotones.setAttribute("componente", "contenedorBotones")
                            const botonGuardarCambios = document.createElement("div")
                            botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                            botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.datosUsuario.guardarCambios)
                            botonGuardarCambios.innerText = "Guardar cambios"
                            contenedorBotones.appendChild(botonGuardarCambios)
                            const botonCancelarCambios = document.createElement("div")
                            botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                            botonCancelarCambios.innerText = "Cancelar cambios"
                            botonCancelarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.datosUsuario.cancelarCambios)
                            contenedorBotones.appendChild(botonCancelarCambios)
                            espacioUsuario.appendChild(contenedorBotones)
                            const campos = document.querySelectorAll("[campo]")
                            const controladorCampos = () => {
                                let estadoGlobalCampos = "vacios"
                                campos.forEach((campo) => {
                                    if (campo.value.length > 0) {
                                        estadoGlobalCampos = "noVacios"
                                    }
                                })
                                const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                                if (estadoGlobalCampos === "vacios") {
                                    selectorContenedorBotones.removeAttribute("style")
                                }
                                if (estadoGlobalCampos === "noVacios") {
                                    selectorContenedorBotones.style.display = "flex"
                                }
                            }
                            campos.forEach((campo) => {
                                campo.addEventListener("input", controladorCampos)
                            })
                        }
                    },
                    editar: () => {
                        let camposLectura = document.querySelectorAll("[componenteDetalle]")
                        camposLectura.forEach((campo) => {
                            let datoCampo = campo.innerText
                            let idCampo = campo.getAttribute("componenteDetalle")
                            campo.style.display = "none"
                            let tipoElemento
                            if (idCampo === "notas") {
                                tipoElemento = "textarea"
                            } else {
                                tipoElemento = "input"
                            }
                            let campoEditable = document.createElement(tipoElemento)
                            campoEditable.classList.add("detallesClienteCampoEditable")
                            campoEditable.value = datoCampo
                            campoEditable.setAttribute("componenteEditable", idCampo)
                            let selectorContenedor = campo.parentNode
                            selectorContenedor.appendChild(campoEditable)
                        })
                        document.querySelector("[boton=editar]").classList.add("estadoInicialInvisible")
                        document.querySelector("[boton=dejarDeEditar]").classList.remove("estadoInicialInvisible")
                        document.querySelector("[boton=guardarCambios]").classList.remove("estadoInicialInvisible")
                    },
                    cancelarCambios: () => {
                        const campos = document.querySelectorAll("[campo]")
                        campos.forEach((campo) => {
                            campo.value = null
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")
                    },
                    guardarCambios: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando datos del usuario..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const campos = document.querySelectorAll("[campo]")
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const datosParaActualizar = {
                            zona: "administracion/usuarios/actualizarDatosUsuarioDesdeAdministracion",
                            usuarioIDX: usuarioIDX
                        }
                        campos.forEach((campo) => {
                            const campoID = campo.getAttribute("campo")
                            const campoDato = campo.value
                            datosParaActualizar[campoID] = campoDato
                        })

                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesUsuario = respuestaServidor?.datosActualizados
                            const nombre = detallesUsuario.nombre
                            const primerApellido = detallesUsuario.primerApellido
                            const segundoApellido = detallesUsuario.segundoApellido
                            const pasaporte = detallesUsuario.pasaporte
                            const telefono = detallesUsuario.telefono
                            const mail = detallesUsuario.mail
                            campos.forEach((campo) => {
                                const campoID = campo.getAttribute("campo")
                                campo.value = detallesUsuario[campoID]
                            })
                            const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                            selectorContenedorBotones.removeAttribute("style")
                        }
                    }
                },
                rol: {
                    UI: async (usuarioIDX) => {
                        let rol
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "administracion/usuarios/detallesUsuario",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            rol = respuestaServidor?.ok.rol
                            const usuariosIDX = respuestaServidor?.ok.usuarioIDX
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                        }
                        const contenedorCampos = document.createElement("div")
                        contenedorCampos.classList.add("detallesUsuario_contenedorCampos")
                        const infoModificarIDX = document.createElement("div")
                        infoModificarIDX.classList.add("detallesUsuario_infoModificarIDX")
                        infoModificarIDX.innerText = `Cambia el rol de esta cuenta al rol que quieras. Recuerda que el rol determina el grado de acceso y autoridad dentro del sistema. El rol cliente es el rol que tiene que tener la cuentas de los clientes de casa vitini. Este rolo solo permite acceder a sus datos de usuario. Controlar solo su cuenta y ver sus reservas. El rol empleado permite acceder al panel de administraci√≥n, pero solo para gestionar reservas y clientes y nada m√°s. No puede, por ejemplo, modificar precios. El rol administrador es el rol de m√°s autoridad y puede hacer cualquier cosa y tener acceso a todo.`
                        contenedorCampos.appendChild(infoModificarIDX)
                        const selectorRoles = document.createElement("select");
                        selectorRoles.classList.add("detallesUsuario_rol_selector")
                        selectorRoles.setAttribute("selector", "roles")
                        selectorRoles.addEventListener("change", casaVitini.administracion.usuarios.detallesUsuario.rol.guardarCambios)
                        const roles = [
                            {
                                rolUI: "Administrador",
                                rol: "administrador"

                            },
                            {
                                rolUI: "Empleado",
                                rol: "empleado"

                            },
                            {
                                rolUI: "Cliente",
                                rol: "cliente"

                            },
                        ]

                        for (const detallesRol of roles) {
                            const rolUI = detallesRol.rolUI
                            const rolIDX = detallesRol.rol
                            const opcionRol = document.createElement("option");
                            opcionRol.value = rolIDX;
                            opcionRol.text = rolUI;
                            if (rol === rolIDX) {
                                opcionRol.selected = true;
                            }
                            selectorRoles.appendChild(opcionRol);
                        }
                        contenedorCampos.appendChild(selectorRoles);
                        espacioUsuario.appendChild(contenedorCampos)
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                        contenedorBotones.setAttribute("componente", "contenedorBotones")
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.rol.guardarCambios)
                        botonGuardarCambios.innerText = "Cambiar rol de la cuenta"
                        contenedorBotones.appendChild(botonGuardarCambios)
                        espacioUsuario.appendChild(contenedorBotones)

                    },
                    guardarCambios: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando rol del VitiniIDX..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const selectorRol = document.querySelector("[selector=roles]").value
                        const datosParaActualizar = {
                            zona: "administracion/usuarios/actualizarRolCuenta",
                            usuarioIDX: usuarioIDX,
                            nuevoRol: selectorRol
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const rolIDV = respuestaServidor?.rolIDV
                            const rolUI = respuestaServidor?.rolUI
                            document.querySelector("[componente=rolUI]").innerText = rolUI
                            document.querySelector("[selector=roles]").value = rolIDV
                        }
                    },
                    cancelarCambios: () => {
                        const campos = document.querySelectorAll("[campo]")
                        campos.forEach((campo) => {
                            campo.value = null
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")
                    },
                },
                cambiarEstadoCuenta: {
                    UI: async () => {
                        const estadoCuentaActual = document.querySelector("[estadoCuenta]").getAttribute("estadoCuenta")
                        let tituloBoton
                        let valorBoton
                        let textoDescriptivo
                        let tituloInformativo
                        if (estadoCuentaActual === "activado") {
                            tituloBoton = "Desactivar cuenta"
                            tituloInformativo = "Confirma la desactivacion de la cuenta"
                            textoDescriptivo = "¬øQuieres Desactivar esta cuenta? El usuario de esta cuenta podra volver a logearse con ella. Sus implicaciones son inmediatas"
                            valorBoton = "desactivado"
                        }
                        if (estadoCuentaActual === "desactivado") {
                            tituloBoton = "Activar cuenta"
                            tituloInformativo = "Confirma la activacion de la cuenta"
                            textoDescriptivo = "¬øQuieres Aactivar esta cuenta? El usuario de esta cuenta no podra volver a logearse con ella. Sus implicaciones son inmediatas"
                            valorBoton = "activado"
                        }
                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = tituloInformativo
                        contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)
                        const bloqueBloqueoApartamentos = document.createElement("div")
                        bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")
                        const tituloBloquoApartamentos = document.createElement("div")
                        tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        tituloBloquoApartamentos.innerText = textoDescriptivo
                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                        contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)
                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.innerText = tituloBoton
                        botonCancelar.setAttribute("nuevoEstado", valorBoton)
                        botonCancelar.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarEstadoCuenta.transactor)
                        bloqueBotones.appendChild(botonCancelar)
                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                        botonCancelarProcesoCancelacion.innerText = "Cancelar el cambio de estado"
                        botonCancelarProcesoCancelacion.addEventListener("click", () => {
                            let selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        })
                        bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                        contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                        document.querySelector("main").appendChild(advertenciaInmersivaIU)
                    },
                    transactor: async (nuevoEstado) => {
                        const nuevoEstado_ = nuevoEstado.target.getAttribute("nuevoEstado")
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const transaccion = {
                            zona: "administracion/usuarios/actualizarEstadoCuentaDesdeAdministracion",
                            "usuarioIDX": usuarioIDX,
                            "nuevoEstado": nuevoEstado_
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const estadoActual = respuestaServidor?.estadoCuenta
                            let estadoCuentaUI
                            if (estadoActual === "activado") {
                                estadoCuentaUI = "Desactivar cuenta"
                            }
                            if (estadoActual === "desactivado") {
                                estadoCuentaUI = "Activar cuenta"
                            }
                            const selectorEstadoCuentaUI = document.querySelector("[estadoCuenta]")
                            selectorEstadoCuentaUI.innerText = estadoCuentaUI
                            selectorEstadoCuentaUI.setAttribute("estadoCuenta", estadoActual)
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        }
                    }
                },
                cambiarClave: {
                    UI: async (usuarioIDX) => {
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "administracion/usuarios/detallesUsuario",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const rol = respuestaServidor?.ok.rol
                            const usuariosIDX = respuestaServidor?.ok.usuarioIDX
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                            const contenedorCampos = document.createElement("div")
                            contenedorCampos.classList.add("detallesUsuario_contenedorCampos")
                            const infoModificarIDX = document.createElement("div")
                            infoModificarIDX.classList.add("detallesUsuario_infoModificarIDX")
                            infoModificarIDX.innerText = `Escriba la nueva clave que quiera establecer`
                            contenedorCampos.appendChild(infoModificarIDX)
                            /*
                            const campoClaveActual = document.createElement("input")
                            campoClaveActual.classList.add("detallesUsuario_campoNuevoIDX")
                            campoClaveActual.setAttribute("campo", "nuevoIDX")
                            campoClaveActual.setAttribute("componente", "nuevoIDX")
                            campoClaveActual.placeholder = "Escriba su contrasena actual"
                            contenedorCampos.appendChild(campoClaveActual)
                            */
                            const campoNuevaClave = document.createElement("input")
                            campoNuevaClave.classList.add("detallesUsuario_campoNuevoIDX")
                            campoNuevaClave.setAttribute("campo", "claveNueva")
                            campoNuevaClave.setAttribute("componente", "claveNueva")
                            campoNuevaClave.placeholder = "Escriba la nueva contrasena"
                            contenedorCampos.appendChild(campoNuevaClave)
                            const campoVerificaClave = document.createElement("input")
                            campoVerificaClave.classList.add("detallesUsuario_campoNuevoIDX")
                            campoVerificaClave.setAttribute("campo", "claveNuevaDos")
                            campoVerificaClave.setAttribute("componente", "claveNuevaDos")
                            campoVerificaClave.placeholder = "Escriba de nueva la nueva contrasena"
                            contenedorCampos.appendChild(campoVerificaClave)
                            espacioUsuario.appendChild(contenedorCampos)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                            contenedorBotones.setAttribute("componente", "contenedorBotones")
                            const botonGuardarCambios = document.createElement("div")
                            botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                            botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarClave.guardarCambios)
                            botonGuardarCambios.innerText = "Cambiar contrasena"
                            contenedorBotones.appendChild(botonGuardarCambios)
                            const botonCancelarCambios = document.createElement("div")
                            botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                            botonCancelarCambios.innerText = "Cancelar cambio"
                            botonCancelarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarClave.cancelarCambios)
                            contenedorBotones.appendChild(botonCancelarCambios)
                            espacioUsuario.appendChild(contenedorBotones)
                            const controladorCampos = () => {
                                let estadoGlobalCampos = "vacios"
                                campos.forEach((campo) => {
                                    if (campo.value.length > 0) {
                                        estadoGlobalCampos = "noVacios"
                                    }
                                })
                                const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                                if (estadoGlobalCampos === "vacios") {
                                    selectorContenedorBotones.removeAttribute("style")
                                }
                                if (estadoGlobalCampos === "noVacios") {
                                    selectorContenedorBotones.style.display = "flex"
                                }
                            }
                            const campos = document.querySelectorAll("[campo]")
                            campos.forEach((campo) => {
                                campo.addEventListener("input", controladorCampos)
                            })
                        }
                    },
                    guardarCambios: async () => {
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")

                        const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                        const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                        const mensaje = `Actualizando contrase√±a del usuario ${usuarioIDX}...`
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUIDPantallaDeCarga,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const claveNueva = document.querySelector("[componente=claveNueva]")
                        const claveNuevaDos = document.querySelector("[componente=claveNuevaDos]")
                        const datosParaActualizar = {
                            zona: "administracion/usuarios/actualizarClaveUsuarioAdministracion",
                            usuarioIDX: usuarioIDX,
                            claveNueva: claveNueva.value,
                            claveNuevaDos: claveNuevaDos.value
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                        if (!pantallaDeCargaRenderizada) { }
                        pantallaDeCargaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.ok)
                            const campos = instanciaRenderizada.querySelectorAll("[campo]")
                            campos.forEach((campo) => {
                                campo.value = ""
                            })

                        }
                    },
                    cancelarCambios: () => {
                        const campos = document.querySelectorAll("[campo]")
                        campos.forEach((campo) => {
                            campo.value = null
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")
                    },
                },
                cambiarEstadoCuenta: {
                    UI: async () => {
                        const estadoCuentaActual = document.querySelector("[estadoCuenta]").getAttribute("estadoCuenta")
                        let tituloBoton
                        let valorBoton
                        let textoDescriptivo
                        let tituloInformativo
                        if (estadoCuentaActual === "activado") {
                            tituloBoton = "Desactivar cuenta"
                            tituloInformativo = "Confirma la desactivaci√≥n de la cuenta"
                            textoDescriptivo = "¬øQuieres desactivar esta cuenta? El usuario de esta cuenta podr√≠a volver a loguearse con ella. Sus implicaciones son inmediatas."
                            valorBoton = "desactivado"
                        }
                        if (estadoCuentaActual === "desactivado") {
                            tituloBoton = "Activar cuenta"
                            tituloInformativo = "Confirma la activaci√≥n de la cuenta"
                            textoDescriptivo = "¬øQuieres activar esta cuenta? El usuario de esta cuenta no podr√° volver a loguearse con ella. Sus implicaciones son inmediatas."
                            valorBoton = "activado"
                        }


                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.innerText = tituloInformativo
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.innerText = textoDescriptivo

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.innerText = tituloBoton
                        botonAceptar.setAttribute("nuevoEstado", valorBoton)
                        botonAceptar.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarEstadoCuenta.transactor)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.innerText = "Cancelar y volver"

                        document.querySelector("main").appendChild(pantallaInmersiva)
                    },
                    transactor: async (nuevoEstado) => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando estado del VitiniIDX..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const nuevoEstado_ = nuevoEstado.target.getAttribute("nuevoEstado")
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const transaccion = {
                            zona: "administracion/usuarios/actualizarEstadoCuentaDesdeAdministracion",
                            "usuarioIDX": usuarioIDX,
                            "nuevoEstado": nuevoEstado_
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const estadoActual = respuestaServidor?.estadoCuenta
                            let estadoCuentaUI
                            if (estadoActual === "activado") {
                                estadoCuentaUI = "Desactivar cuenta"
                            }
                            if (estadoActual === "desactivado") {
                                estadoCuentaUI = "Activar cuenta"
                            }
                            const selectorEstadoCuentaUI = document.querySelector("[estadoCuenta]")
                            selectorEstadoCuentaUI.innerText = estadoCuentaUI
                            selectorEstadoCuentaUI.setAttribute("estadoCuenta", estadoActual)
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        }
                    }
                },
                eliminarCuenta: {
                    UI: async () => {

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.innerText = "Confirma la eliminaci√≥n de esta cuenta"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.innerText = "Si quieres eliminar esta cuenta, confirma su eliminaci√≥n. Esta operaci√≥n es inmediata e irreversible. Una vez eliminada la cuenta, sus datos son irrecuperables. Si deseas mantener los datos de esta cuenta, pero a su vez congelar su funcionalidad, es recomendable desactivar la cuenta antes que eliminarla."

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.innerText = "Comfirmar la eliminacion de la cuenta"
                        botonAceptar.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.eliminarCuenta.transactor)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.innerText = "Cancelar la eliminacion y volver"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    transactor: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Elimiando el VitiniIDX..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const transaccion = {
                            zona: "administracion/usuarios/eliminarCuentaDesdeAdministracion",
                            "usuarioIDX": usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            const navegacion = {
                                "vista": "/administracion/usuarios",
                                "tipoOrigen": "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                componentes: {
                    bannerIDX: (metadatos) => {
                        const usuarioIDX = metadatos.usuarioIDX
                        const rol = metadatos.rol
                        const rolUITexto = rol.substring(0, 1).toUpperCase() + rol.substring(1);
                        const contenedorUsuarioIDX = document.createElement("div")
                        contenedorUsuarioIDX.classList.add("detallesUsuario_contenedorUsuarioIDX")
                        contenedorUsuarioIDX.setAttribute("componente", "contenedorUsuarioUX")
                        const esferaUsuario = document.createElement("div")
                        esferaUsuario.classList.add("detallesUsuario_esferaUsuario")
                        esferaUsuario.setAttribute("componente", "esferaUsuario")
                        contenedorUsuarioIDX.appendChild(esferaUsuario)
                        const contenedorDatosGlobales = document.createElement("div")
                        contenedorDatosGlobales.classList.add("detallesUsuario_contenedorDatosGlobales")
                        contenedorDatosGlobales.setAttribute("componente", "contenedorDatosGlobales")
                        const usuarioIDXUI = document.createElement("div")
                        usuarioIDXUI.classList.add("detallesUsuario_usuarioUI")
                        usuarioIDXUI.setAttribute("usuarioIDX", usuarioIDX)
                        usuarioIDXUI.innerText = usuarioIDX
                        contenedorDatosGlobales.appendChild(usuarioIDXUI)
                        const rolUI = document.createElement("div")
                        rolUI.classList.add("detallesUsuario_rolUI")
                        rolUI.setAttribute("componente", "rolUI")
                        rolUI.innerText = rolUITexto
                        contenedorDatosGlobales.appendChild(rolUI)
                        contenedorUsuarioIDX.appendChild(contenedorDatosGlobales)
                        return contenedorUsuarioIDX
                    }
                },
                modificarIDX: {
                    UI: async (usuarioIDX) => {
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "administracion/usuarios/detallesUsuario",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const rol = respuestaServidor?.ok.rol
                            const usuariosIDX = respuestaServidor?.ok.usuarioIDX
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                            const contenedorCampos = document.createElement("div")
                            contenedorCampos.classList.add("detallesUsuario_contenedorCampos")
                            const infoModificarIDX = document.createElement("div")
                            infoModificarIDX.classList.add("detallesUsuario_infoModificarIDX")
                            infoModificarIDX.innerText = `Escriba el nuevo VitiniID para este usuario en el campo de abajo. Recuerde que modificar el IDX deja libre el anterior IDX para que otro usuario, si quiere, lo obtenga.`
                            contenedorCampos.appendChild(infoModificarIDX)
                            const campoNuevoIDX = document.createElement("input")
                            campoNuevoIDX.classList.add("detallesUsuario_campoNuevoIDX")
                            campoNuevoIDX.setAttribute("campo", "nuevoIDX")
                            campoNuevoIDX.setAttribute("componente", "nuevoIDX")
                            campoNuevoIDX.placeholder = usuariosIDX
                            contenedorCampos.appendChild(campoNuevoIDX)
                            espacioUsuario.appendChild(contenedorCampos)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                            contenedorBotones.setAttribute("componente", "contenedorBotones")
                            const botonGuardarCambios = document.createElement("div")
                            botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                            botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.modificarIDX.guardarCambios)
                            botonGuardarCambios.innerText = "Guardar el nuevo VitiniID"
                            contenedorBotones.appendChild(botonGuardarCambios)
                            const botonCancelarCambios = document.createElement("div")
                            botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                            botonCancelarCambios.innerText = "Cancelar cambios"
                            botonCancelarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.modificarIDX.cancelarCambios)
                            contenedorBotones.appendChild(botonCancelarCambios)
                            espacioUsuario.appendChild(contenedorBotones)
                            const controladorCampos = () => {
                                let estadoGlobalCampos = "vacios"
                                campos.forEach((campo) => {
                                    if (campo.value.length > 0) {
                                        estadoGlobalCampos = "noVacios"
                                    }
                                })
                                const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                                if (estadoGlobalCampos === "vacios") {
                                    selectorContenedorBotones.removeAttribute("style")
                                }
                                if (estadoGlobalCampos === "noVacios") {
                                    selectorContenedorBotones.style.display = "flex"
                                }
                            }
                            const campos = document.querySelectorAll("[campo]")
                            campos.forEach((campo) => {
                                campo.addEventListener("input", controladorCampos)
                            })
                        }
                    },
                    guardarCambios: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando el VitiniIDX..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const usuarioIDX = document.querySelector("[usuarioIDX]")
                        const nuevoIDX = document.querySelector("[componente=nuevoIDX]")
                        const datosParaActualizar = {
                            zona: "administracion/usuarios/actualizarIDXAdministracion",
                            usuarioIDX: usuarioIDX.getAttribute("usuarioIDX"),
                            nuevoIDX: nuevoIDX.value
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)

                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const IDXEstablecido = respuestaServidor?.usuarioIDX
                            nuevoIDX.value = null
                            nuevoIDX.placeholder = IDXEstablecido
                            usuarioIDX.innerHTML = IDXEstablecido
                            usuarioIDX.setAttribute("usuarioIDX", IDXEstablecido)
                            const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                            selectorContenedorBotones.removeAttribute("style")
                            const vistaActual = `/administracion/usuarios/${IDXEstablecido}/modificar_idx`
                            const estado = {
                                zona: vistaActual,
                                estadoInternoZona: "estado",
                                tipoCambio: "total"
                            }
                            const titulo = "Casa Vitini"
                            window.history.replaceState(estado, titulo, vistaActual);
                            casaVitini.shell.controladoresUI.controladorEstadoIDX()

                        }
                    },
                    cancelarCambios: () => {
                        const campos = document.querySelectorAll("[campo]")
                        campos.forEach((campo) => {
                            campo.value = null
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")
                    },
                },
            },
            nuevoUsuario: {
                arranque: function () {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/usuarios/nuevo")
                    const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                    const contenedorGlobal = document.createElement("div")
                    contenedorGlobal.classList.add("usuariosCrearCuenta_contenedorGlobal")
                    const informacionCuenta = document.createElement("div")
                    informacionCuenta.classList.add("usuariosCrearCuenta_informacion")
                    informacionCuenta.innerText = `Escriba el nombre de usuario de la nueva cuenta, este ser√° el VitiniID de la nueva cuenta. Luego pulse en el bot√≥n crear cuenta y, tras crearse la cuenta, ir√° al panel de la cuenta creada donde podr√° seguir con las modificaciones pertinentes. Una vez establezca la contrase√±a, deber√° activar la cuenta.`
                    contenedorGlobal.appendChild(informacionCuenta)
                    const campoNuevoUsuario = document.createElement("input")
                    campoNuevoUsuario.classList.add("usuariosCrearCuenta_campoUsuario")
                    campoNuevoUsuario.setAttribute("campo", "usuarioIDX")
                    campoNuevoUsuario.placeholder = "Escriba el nuevo VitiniID"
                    contenedorGlobal.appendChild(campoNuevoUsuario)
                    const infoPass = document.createElement("div")
                    infoPass.classList.add("usuariosCrearCuenta_informacion")
                    infoPass.innerText = `Escribe la contrase√±a de esta cuenta. Una vez creada la cuenta, siempre puedes cambiar la contrase√±a desde el panel del usuario. Es recomendable escribir una contrase√±a compleja creada con un generador de contrase√±as para que sea irrecordable y usar un gestor de contrase√±as para gestionar las contrase√±as.  `
                    contenedorGlobal.appendChild(infoPass)
                    const campoClave = document.createElement("input")
                    campoClave.classList.add("usuariosCrearCuenta_campoUsuario")
                    campoClave.setAttribute("campo", "clave")
                    campoClave.placeholder = "Escriba una contrase√±a para este nuevo usuario"
                    campoClave.type = "password"
                    contenedorGlobal.appendChild(campoClave)
                    const informacionRol = document.createElement("div")
                    informacionRol.classList.add("usuariosCrearCuenta_informacion")
                    informacionRol.innerText = `Selecciona el rol de la nueva cuenta. Si es una cuenta para un cliente de Casa Vitini escoge el rol Cliente. Si es una cuenta para un Empleado de Casa Vitini escoge el rol Empleado y, si es para un administrador de Casa Vitini escoge el rol Administrador. Cada rol otorga un acceso y autoridad distintos. Por ejemplo, el rol Cliente solo permite administrar la propia cuenta, no da acceso al panel de control de administraci√≥n. El rol empleado s√≠ da acceso al panel de administraci√≥n, pero hay ciertas operaciones que no puede hacer, como por ejemplo alterar precios, ofertas o configuraciones de alojamiento. Si puede realizar reservas, modificar reservas, cancelar reservas, pero no eliminarlas. El rol de Administrador puede hacer cualquier cosa.`
                    contenedorGlobal.appendChild(informacionRol)
                    const selectorRol = document.createElement("select")
                    selectorRol.classList.add("usuariosCrearCuenta_campoUsuario")
                    selectorRol.setAttribute("campo", "selectorRol")
                    const opcionInical = document.createElement("option");
                    opcionInical.value = "";
                    opcionInical.selected = "true"
                    opcionInical.disabled = "true"
                    opcionInical.text = "Selecciona el rol de la nueva cuenta";
                    selectorRol.add(opcionInical);
                    const rolAdministrador = document.createElement("option");
                    rolAdministrador.value = "administrador";
                    rolAdministrador.text = "Administrador";
                    selectorRol.add(rolAdministrador);
                    const rolEmpleado = document.createElement("option");
                    rolEmpleado.value = "empleado";
                    rolEmpleado.text = "Empleado";
                    selectorRol.add(rolEmpleado);
                    const rolCliente = document.createElement("option");
                    rolCliente.value = "cliente";
                    rolCliente.text = "Cliente";
                    selectorRol.add(rolCliente);
                    contenedorGlobal.appendChild(selectorRol)
                    espacioUsuario.appendChild(contenedorGlobal)
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("usuariosCrearCuenta_contenedorBotones")
                    const botonCrearUsuario = document.createElement("div")
                    botonCrearUsuario.classList.add("usuarioCrearCuenta_botonV1")
                    botonCrearUsuario.innerText = "Crear nueva cuenta de usuario"
                    botonCrearUsuario.addEventListener("click", this.transactor)
                    contenedorBotones.appendChild(botonCrearUsuario)
                    espacioUsuario.appendChild(contenedorBotones)
                },
                transactor: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando usuarios..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const nuevoUsuarioIDX = document.querySelector("[campo=usuarioIDX]").value
                    const clave = document.querySelector("[campo=clave]").value
                    const rol = document.querySelector("[campo=selectorRol]").value
                    const metadatos = {
                        zona: "administracion/usuarios/crearCuentaDesdeAdministracion",
                        usuarioIDX: nuevoUsuarioIDX,
                        clave: clave,
                        rolIDV: rol
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(metadatos)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const usuarioIDX = respuestaServidor?.usuarioIDX
                        const navegacion = {
                            "vista": "/administracion/usuarios/" + usuarioIDX,
                            "tipoOrigen": "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                }
            }
        },
        calendario: {
            arranque: async () => {
                const html = document.querySelector("html")
                html.style.height = "100%"

                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/calendario")
                //main.style.background = "pink"
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const parametros = granuladoURL.parametros
                const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                const calendario = {}
                const configuracionCalendario = {}
                const ultimoDirectorio = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                // document.body.style.backgroundImage = "url("/componentes/imagenes/f5.jpeg")";
                //document.body.classList.add("fondoConDesenfoque")
                //Llama a la funci√≥n al cargar la p√°gina y en eventos que puedan cambiar la altura del div
                //window.removeEventListener("resize", casaVitini.administracion.calendario.controlVertical);
                //window.addEventListener("resize", casaVitini.administracion.calendario.controlVertical);
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const sectionRenderizada = document.querySelector("main")
                sectionRenderizada.style.maxWidth = "100%"
                const instanciaUID_seccion = sectionRenderizada.getAttribute("instanciaUID")
                const metadatosControaldorLogo = {
                    sectionUID: instanciaUID_seccion,
                    elementoScroll: ""
                }
                //casaVitini.shell.controladoresUI.controlLogoScroll(metadatosControaldorLogo)
                calendario.instanciaUID = instanciaUID
                // este 1
                calendario.instanciaUIDMes = "uidInicialMes"
                const contenedorCapas = {
                    capas: [],
                    capasCompuestas: {}
                }
                if (parametros.fecha) {
                    const fecha = parametros.fecha.split("-")
                    const mes = Number(fecha[0])
                    const ano = Number(fecha[1])
                    calendario.tipo = "personalizado"
                    //calendario.comando = "construyeObjeto"
                    calendario.ano = ano
                    calendario.mes = mes
                    let parametrosURL = []
                    for (const conjunto of contenedorSeguroParaParametros) {
                        const par = conjunto.split(":")
                        const parametro = par[0]
                        const valor = par[1]
                        const estructuraURLParametro = `${parametro}:${valor}`
                        parametrosURL.push(estructuraURLParametro)
                        if (parametro === "capa") {
                            const capaEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(valor)
                            contenedorCapas.capas.push(capaEnCamel)
                        }
                        if (parametro !== "fecha" && parametro !== "capa") {
                            const parametroEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(parametro)
                            const composicionCapa = valor.split("=")
                            contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                        }
                    }
                    if (parametrosURL.length === 0) {
                        // el url tambien 2
                        calendario.url = ""
                    } else {
                        calendario.url = parametrosURL.join("/")
                    }
                } else if (parametros.dia) {
                    casaVitini.administracion.calendario.detallesDelDia()
                } else if (ultimoDirectorio === "calendario") {
                    const calendarioActual = {
                        tipo: "actual",
                        //comando: "construyeObjeto"
                    }
                    calendario.tipo = "actual"
                    //calendario.comando = "construyeObjeto"
                    const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendarioActual)
                    calendario.tipo = "personalizado"
                    //calendario.comando = "construyeObjeto"
                    calendario.ano = calendarioResuelto.ano
                    calendario.mes = calendarioResuelto.mes
                    /*
                   
                                                   {
                                       "calendario": "ok",
                                       "ano": 2024,
                                       "mes": 1,
                                       "dia": 31,
                                       "tiempo": "presente",
                                       "posicionDia1": 1,
                                       "numeroDiasPorMes": 31
                                   }               
                                   */
                    contenedorCapas.capas = ["global"]
                    // url tambien
                    calendario.url = `fecha:${calendarioResuelto.mes}-${calendarioResuelto.ano}/capa:global`
                }
                calendario.tipoRegistro = "actualizar"
                casaVitini.administracion.calendario.controladorRegistros(calendario)
                const tipoFecha = {
                    almacenamientoCalendarioID: "calendarioGlobal",
                    instanciaUID: instanciaUID
                }

                casaVitini.administracion.calendario.constructorCalendarioNuevo(tipoFecha)
                const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                //const selectorCapas = calendarioRenderizado.querySelector("[componente=selectorCapas]")
                const apartamentosLista = await casaVitini.administracion.calendario.obtenerConfiguracionesApartamento()

                if (apartamentosLista.length > 0) {
                    const tituloApartamentos = document.createElement("option");
                    tituloApartamentos.value = "";
                    tituloApartamentos.disabled = "true"
                    tituloApartamentos.text = "Apartamentos";
                    //selectorCapas.add(tituloApartamentos);
                    for (const detallesApartamento of apartamentosLista) {
                        const apartamentoIDV = detallesApartamento.apartamentoIDV
                        const apartamentoUI = detallesApartamento.apartamentoUI
                        const selectorApartamento = document.createElement("option");
                        selectorApartamento.value = apartamentoIDV;
                        selectorApartamento.setAttribute("tipoCapa", "porApartamento")
                        selectorApartamento.text = apartamentoUI;
                        //selectorCapas.add(selectorApartamento);
                    }
                }

                const calendariosListaAirnbnb = await casaVitini.administracion.calendario.obtenerCalendariosSincronizados.airbnb()
                if (calendariosListaAirnbnb.length > 0) {
                    const tituloApartamentos = document.createElement("option");
                    tituloApartamentos.value = "";
                    tituloApartamentos.disabled = "true"
                    tituloApartamentos.text = "Airbnb";
                    //selectorCapas.add(tituloApartamentos);
                    for (const detallesCalendario of calendariosListaAirnbnb) {
                        const apartamentoIDV = detallesCalendario.apartamentoIDV
                        const apartamentoUI = detallesCalendario.apartamentoUI
                        const calendarioUID = detallesCalendario.calendarioUID
                        const nombre = detallesCalendario.nombre
                        const selectorApartamento = document.createElement("option");
                        selectorApartamento.value = calendarioUID;
                        selectorApartamento.setAttribute("tipoCapa", "calendarioSincronizadoAirbnb")
                        selectorApartamento.text = `${nombre} (${apartamentoUI})`;
                        //selectorCapas.add(selectorApartamento);
                    }
                }
                await casaVitini.administracion.calendario.configuraMes(calendario)
                const metadatos = {
                    instanciaUID: instanciaUID,
                    contenedorCapas: contenedorCapas
                }
                casaVitini.administracion.calendario.capas(metadatos)
            },
            constructorCalendarioNuevo: (metadatos) => {
                const almacenamientoVolatilUID = metadatos.almacenamientoCalendarioID
                if (!almacenamientoVolatilUID) {
                    let error = "El constructor del calendario, necesita un nombre para el almacenamiento vol√°til"
                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                }
                const instanciaUID = metadatos.instanciaUID
                if (!instanciaUID) {
                    const error = "El constructor del calendario necesita una instanciaUID para el contenedor del calendario"
                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                }
                const calendario = document.createElement("div")
                calendario.setAttribute("class", "administracion_calendario_calendarioUI")
                calendario.setAttribute("campo", "calendario")
                calendario.setAttribute("contenedor", "calendario")
                calendario.setAttribute("componente", "marcoCalendarioGlobal")
                calendario.setAttribute("almacenamientoCalendarioID", almacenamientoVolatilUID)
                //calendario.setAttribute("tipoCalendario", tipoFecha)
                //calendario.setAttribute("calendarioIO", calendarioIO)
                calendario.setAttribute("elemento", "flotante")
                //calendario.setAttribute("perfilMes", perfilMes)
                //calendario.setAttribute("IO", calendarioIO)
                calendario.style.display = "none"
                const cartelInfoCalendarioEstado = document.createElement("div")
                cartelInfoCalendarioEstado.setAttribute("class", "cartelInfoCalendarioEstado")
                cartelInfoCalendarioEstado.setAttribute("componente", "infoCalendario")
                cartelInfoCalendarioEstado.setAttribute("campo", "calendario")
                //cartelInfoCalendarioEstado.innerText = mensajeInfo
                const marcoBotonesGlobales = document.createElement("nav")
                marcoBotonesGlobales.setAttribute("class", "marcoBotonesGlobales")
                const botonSelectorMultiCapa = document.createElement("div")
                botonSelectorMultiCapa.classList.add("botonSelectorMulticapa")
                botonSelectorMultiCapa.innerText = "Capas del calendario"
                botonSelectorMultiCapa.addEventListener("click", async () => {
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                    const contenedorCapas = {
                        capas: [],
                        capasCompuestas: {}
                    }
                    for (const conjunto of contenedorSeguroParaParametros) {
                        const par = conjunto.split(":")
                        const parametro = par[0]
                        const valor = par[1]
                        if (parametro === "capa") {
                            const capaEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(valor)
                            contenedorCapas.capas.push(capaEnCamel)
                        }
                        if (parametro !== "fecha" && parametro !== "capa") {
                            const parametroEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(parametro)
                            const composicionCapa = valor.split("=")
                            contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                        }
                    }
                    const contenedorMenuCapas = document.createElement("div")
                    contenedorMenuCapas.classList.add("contenedorMenuCapas")
                    contenedorMenuCapas.setAttribute("componente", "contenedorMenuCapas")
                    const titulo = document.createElement("div")
                    titulo.classList.add("tituloGris")
                    titulo.innerText = "Capas del calendario"
                    contenedorMenuCapas.appendChild(titulo)
                    //Falta la ccapa global
                    const botonAplicar = document.createElement("div")
                    botonAplicar.classList.add("boton")
                    botonAplicar.innerText = "Aplicar y cerrar"
                    botonAplicar.addEventListener("click", () => {
                        const instanciaUIDMes = casaVitini.utilidades.codigoFechaInstancia()
                        document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=marcoMes]`)
                            .setAttribute("instanciaUID", instanciaUIDMes)
                        const capasSelecionadas = []
                        const estructura = {
                            capas: [],
                            capasCompuestas: {}
                        }
                        const elementosSeleccionados = document.querySelectorAll("[componente=contenedorMenuCapas] [estado=seleccionado]")
                        for (const elementoSeleccionado of elementosSeleccionados) {
                            const capaUID = elementoSeleccionado.getAttribute("capaUID")
                            capasSelecionadas.push(capaUID)
                        }
                        if (capasSelecionadas.includes("global")) {
                            estructura.capas.push("global")
                        } else {
                            const capasSimples = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID][tipo=capaSimple][estado=seleccionado]")
                            capasSimples.forEach((capa) => {
                                const capaUID = capa.getAttribute("capaUID")
                                estructura.capas.push(capaUID)
                            })
                            if (!capasSelecionadas.includes("todosLosApartamentos")) {
                                const apartametnosSeleccionados = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID=porApartamento][estado=seleccionado]")
                                const porApartamento = []
                                apartametnosSeleccionados.forEach((apartamento) => {
                                    const apartamentoIDV = apartamento.getAttribute("porApartamento")
                                    porApartamento.push(apartamentoIDV)
                                })
                                if (apartametnosSeleccionados.length > 0) {
                                    estructura.capasCompuestas.porApartamento = porApartamento
                                    estructura.capas.push("porApartamento")
                                }
                            } else {
                                estructura.capas.push("todosLosApartamentos")
                            }
                            if (!capasSelecionadas.includes("todoAirbnb")) {
                                const calendariosAirBnbSeleccionados = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID=calendariosAirbnb][estado=seleccionado]")
                                const calendariosAirbnb = []
                                calendariosAirBnbSeleccionados.forEach((calendario) => {
                                    const calendarioUID = calendario.getAttribute("calendariosAirbnb")
                                    calendariosAirbnb.push(calendarioUID)
                                })
                                if (calendariosAirBnbSeleccionados.length > 0) {
                                    estructura.capasCompuestas.calendariosAirbnb = calendariosAirbnb
                                    estructura.capas.push("calendariosAirbnb")
                                }
                            } else {
                                estructura.capas.push("todoAirbnb")
                            }
                        }
                        if (estructura.capas.length === 0) {
                            const mensaje = "Selecciona alguna capa para aplicarla en el calendario. No has seleccionado ninguna capa. S√≠, por el contrario, lo que quieres es cerrar la pantalla de capas. Pulsa en el bot√≥n cerrar"
                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(mensaje)
                        }
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        const metadatos = {
                            contenedorCapas: estructura,
                            instanciaUID: instanciaUID,
                            origen: "menuDesplegable",
                            instanciaUIDMes: instanciaUIDMes
                        }
                        casaVitini.administracion.calendario.capas(metadatos)
                    })
                    contenedorMenuCapas.appendChild(botonAplicar)
                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("boton")
                    botonCancelar.innerText = "Cerrar"
                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                    contenedorMenuCapas.appendChild(botonCancelar)
                    const grupoGlobalCapas = document.createElement("div")
                    grupoGlobalCapas.classList.add("contenedorGrupoSinFondo")
                    const contenedorCapaGlobal = document.createElement("div")
                    contenedorCapaGlobal.classList.add("contenedorCapa")
                    contenedorCapaGlobal.setAttribute("capaUID", "global")
                    let filaIconoTitulo = document.createElement("div")
                    filaIconoTitulo.classList.add("filaIconoTexto")
                    const iconoGlobal = document.createElement("div")
                    iconoGlobal.classList.add("icono")
                    let estadoSelector = document.createElement("div")
                    estadoSelector.classList.add("estadoSelector")
                    estadoSelector.setAttribute("componente", "icono")
                    iconoGlobal.appendChild(estadoSelector)
                    filaIconoTitulo.appendChild(iconoGlobal)
                    const tituloGlobal = document.createElement("div")
                    tituloGlobal.classList.add("tituloCapa")
                    tituloGlobal.classList.add("negrita")
                    tituloGlobal.innerText = "Global"
                    filaIconoTitulo.appendChild(tituloGlobal)
                    contenedorCapaGlobal.appendChild(filaIconoTitulo)
                    grupoGlobalCapas.appendChild(contenedorCapaGlobal)
                    const contenedorCapaReservas = document.createElement("div")
                    contenedorCapaReservas.classList.add("contenedorCapa")
                    contenedorCapaReservas.setAttribute("capaUID", "reservas")
                    contenedorCapaReservas.setAttribute("tipo", "capaSimple")
                    filaIconoTitulo = document.createElement("div")
                    filaIconoTitulo.classList.add("filaIconoTexto")
                    const iconoReservas = document.createElement("div")
                    iconoReservas.classList.add("icono")
                    estadoSelector = document.createElement("div")
                    estadoSelector.classList.add("estadoSelector")
                    estadoSelector.setAttribute("componente", "icono")
                    iconoReservas.appendChild(estadoSelector)
                    filaIconoTitulo.appendChild(iconoReservas)
                    const tituloReservas = document.createElement("div")
                    tituloReservas.classList.add("tituloCapa")
                    tituloReservas.classList.add("negrita")
                    tituloReservas.innerText = "Reservas"
                    filaIconoTitulo.appendChild(tituloReservas)
                    contenedorCapaReservas.appendChild(filaIconoTitulo)
                    grupoGlobalCapas.appendChild(contenedorCapaReservas)
                    const contenedorTodosLosBloqueos = document.createElement("div")
                    contenedorTodosLosBloqueos.classList.add("contenedorCapa")
                    contenedorTodosLosBloqueos.setAttribute("capaUID", "todosLosBloqueos")
                    contenedorTodosLosBloqueos.setAttribute("tipo", "capaSimple")
                    filaIconoTitulo = document.createElement("div")
                    filaIconoTitulo.classList.add("filaIconoTexto")
                    const iconoTodosLosBloqueos = document.createElement("div")
                    iconoTodosLosBloqueos.classList.add("icono")
                    estadoSelector = document.createElement("div")
                    estadoSelector.classList.add("estadoSelector")
                    estadoSelector.setAttribute("componente", "icono")
                    iconoTodosLosBloqueos.appendChild(estadoSelector)
                    filaIconoTitulo.appendChild(iconoTodosLosBloqueos)
                    const tituloTodosLosBloqueos = document.createElement("div")
                    tituloTodosLosBloqueos.classList.add("tituloCapa")
                    tituloTodosLosBloqueos.classList.add("negrita")
                    tituloTodosLosBloqueos.innerText = "Todos los bloqueos"
                    filaIconoTitulo.appendChild(tituloTodosLosBloqueos)
                    contenedorTodosLosBloqueos.appendChild(filaIconoTitulo)
                    grupoGlobalCapas.appendChild(contenedorTodosLosBloqueos)
                    contenedorMenuCapas.appendChild(grupoGlobalCapas)
                    const apartamentosLista = await casaVitini.administracion.calendario.obtenerConfiguracionesApartamento()

                    if (apartamentosLista.length > 0) {
                        const contenedorTodosLosApartamentos = document.createElement("div")
                        contenedorTodosLosApartamentos.classList.add("contenedorGrupoFondo")
                        contenedorTodosLosApartamentos.setAttribute("grupo", "campo")
                        filaIconoTitulo = document.createElement("div")
                        filaIconoTitulo.classList.add("filaIconoTexto")
                        filaIconoTitulo.setAttribute("capaUID", "todosLosApartamentos")
                        filaIconoTitulo.setAttribute("tipo", "global")
                        filaIconoTitulo.setAttribute("grupo", "cabeza")
                        const iconoTodosLosApartamentos = document.createElement("div")
                        iconoTodosLosApartamentos.classList.add("icono")
                        estadoSelector = document.createElement("div")
                        estadoSelector.classList.add("estadoSelector")
                        estadoSelector.setAttribute("componente", "icono")
                        iconoTodosLosApartamentos.appendChild(estadoSelector)
                        filaIconoTitulo.appendChild(iconoTodosLosApartamentos)
                        const tituloTodosLosApartamentos = document.createElement("div")
                        tituloTodosLosApartamentos.classList.add("tituloCapa")
                        tituloTodosLosApartamentos.innerText = "Todos los apartamentos"
                        tituloTodosLosApartamentos.classList.add("negrita")
                        filaIconoTitulo.appendChild(tituloTodosLosApartamentos)
                        contenedorTodosLosApartamentos.appendChild(filaIconoTitulo)
                        const contenedorListaPorApartamento = document.createElement("div")
                        contenedorListaPorApartamento.classList.add("contenedorListaApartamentos")
                        for (const detallesApartamento of apartamentosLista) {
                            const apartamentoIDV = detallesApartamento.apartamentoIDV
                            const apartamentoUI = detallesApartamento.apartamentoUI
                            const contenedorApartamento = document.createElement("div")
                            contenedorApartamento.classList.add("contenedorCapa")
                            contenedorApartamento.setAttribute("porApartamento", apartamentoIDV)
                            contenedorApartamento.setAttribute("capaUID", "porApartamento")
                            contenedorApartamento.setAttribute("grupo", "elemento")
                            filaIconoTitulo = document.createElement("div")
                            filaIconoTitulo.classList.add("filaIconoTexto")
                            const iconoApartamento = document.createElement("div")
                            iconoApartamento.classList.add("icono")
                            estadoSelector = document.createElement("div")
                            estadoSelector.classList.add("estadoSelector")
                            estadoSelector.setAttribute("componente", "icono")
                            iconoApartamento.appendChild(estadoSelector)
                            filaIconoTitulo.appendChild(iconoApartamento)
                            const tituloApartamento = document.createElement("div")
                            tituloApartamento.classList.add("tituloCapa")
                            tituloApartamento.innerText = apartamentoUI
                            filaIconoTitulo.appendChild(tituloApartamento)
                            contenedorApartamento.appendChild(filaIconoTitulo)
                            contenedorListaPorApartamento.appendChild(contenedorApartamento)
                        }
                        contenedorTodosLosApartamentos.appendChild(contenedorListaPorApartamento)
                        contenedorMenuCapas.appendChild(contenedorTodosLosApartamentos)
                    }
                    const calendariosListaAirnbnb = await casaVitini.administracion.calendario.obtenerCalendariosSincronizados.airbnb()
                    if (calendariosListaAirnbnb.length > 0) {
                        const grupoAirbnb = document.createElement("div")
                        grupoAirbnb.classList.add("contenedorGrupoFondo")
                        grupoAirbnb.setAttribute("grupo", "campo")
                        filaIconoTitulo = document.createElement("div")
                        filaIconoTitulo.classList.add("filaIconoTexto")
                        filaIconoTitulo.setAttribute("capaUID", "todoAirbnb")
                        filaIconoTitulo.setAttribute("tipo", "global")
                        filaIconoTitulo.setAttribute("grupo", "cabeza")
                        const iconoTodosAirbnb = document.createElement("div")
                        iconoTodosAirbnb.classList.add("icono")
                        estadoSelector = document.createElement("div")
                        estadoSelector.classList.add("estadoSelector")
                        estadoSelector.setAttribute("componente", "icono")
                        iconoTodosAirbnb.appendChild(estadoSelector)
                        filaIconoTitulo.appendChild(iconoTodosAirbnb)
                        const tituloTodoAirbnb = document.createElement("div")
                        tituloTodoAirbnb.classList.add("tituloCapa")
                        tituloTodoAirbnb.classList.add("negrita")
                        tituloTodoAirbnb.innerText = "Todos los calendarios de Airbnb"
                        filaIconoTitulo.appendChild(tituloTodoAirbnb)
                        grupoAirbnb.appendChild(filaIconoTitulo)
                        const contenedorListaPorApartamento = document.createElement("div")
                        contenedorListaPorApartamento.classList.add("contenedorListaApartamentos")
                        for (const detallesCalendario of calendariosListaAirnbnb) {
                            const apartamentoIDV = detallesCalendario.apartamentoIDV
                            const apartamentoUI = detallesCalendario.apartamentoUI
                            const calendarioUID = detallesCalendario.calendarioUID
                            const nombre = detallesCalendario.nombre
                            const contenedorCalendarioAirbnb = document.createElement("div")
                            contenedorCalendarioAirbnb.classList.add("contenedorCapa")
                            contenedorCalendarioAirbnb.setAttribute("capaUID", "calendariosAirbnb")
                            contenedorCalendarioAirbnb.setAttribute("calendariosAirbnb", calendarioUID)
                            contenedorCalendarioAirbnb.setAttribute("grupo", "elemento")
                            filaIconoTitulo = document.createElement("div")
                            filaIconoTitulo.classList.add("filaIconoTexto")
                            const iconoCalendarioAirbnb = document.createElement("div")
                            iconoCalendarioAirbnb.classList.add("icono")
                            estadoSelector = document.createElement("div")
                            estadoSelector.classList.add("estadoSelector")
                            estadoSelector.setAttribute("componente", "icono")
                            iconoCalendarioAirbnb.appendChild(estadoSelector)
                            filaIconoTitulo.appendChild(iconoCalendarioAirbnb)
                            const tituloCalendarioAirbnb = document.createElement("div")
                            tituloCalendarioAirbnb.classList.add("tituloCapa")
                            tituloCalendarioAirbnb.innerText = nombre
                            filaIconoTitulo.appendChild(tituloCalendarioAirbnb)
                            contenedorCalendarioAirbnb.appendChild(filaIconoTitulo)
                            contenedorListaPorApartamento.appendChild(contenedorCalendarioAirbnb)
                        }
                        grupoAirbnb.appendChild(contenedorListaPorApartamento)
                        contenedorMenuCapas.appendChild(grupoAirbnb)
                    }
                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                    const destino = pantallaInmersiva.querySelector("[destino=inyector]")
                    destino.appendChild(contenedorMenuCapas)
                    document.querySelector("main").appendChild(pantallaInmersiva)
                    const controladorSelectoresCapas = (selector) => {
                        const contenedorCapa = selector.target.closest("[capaUID]")
                        const todasLasCapas = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID]")
                        const capaUID = contenedorCapa.getAttribute("capaUID")
                        const todoLosIconos = document.querySelectorAll("[componente=contenedorMenuCapas] [componente=icono]")
                        const todasLasCapasGlobales = document.querySelectorAll("[componente=contenedorMenuCapas] [tipo=global]")
                        const grupo = contenedorCapa.getAttribute("grupo")
                        const iconoSelecionado = contenedorCapa.querySelector("[componente=icono]")
                        const estadoCapa = contenedorCapa.getAttribute("estado")
                        const controlBotonGlobal = () => {
                            const capasGlobales = document.querySelectorAll("[componente=contenedorMenuCapas] [tipo=global], [componente=contenedorMenuCapas] [tipo=capaSimple]")
                            const capaGlobal = document.querySelector("[componente=contenedorMenuCapas] [capaUID=global]")
                            const iconoCapa = capaGlobal.querySelector("[componente=icono]")
                            let estadoFinal = "seleccionado"
                            for (const capa of capasGlobales) {
                                const estado = capa.getAttribute("estado")
                                if (estado !== "seleccionado") {
                                    estadoFinal = "noSeleccionado"
                                    break
                                }
                            }
                            if (estadoFinal === "seleccionado") {
                                iconoCapa.style.background = "blue"
                                capaGlobal.setAttribute("estado", "seleccionado")
                            } else {
                                iconoCapa.removeAttribute("style")
                                capaGlobal.removeAttribute("estado")
                            }
                        }
                        if (estadoCapa === "seleccionado") {
                            iconoSelecionado.removeAttribute("style")
                            contenedorCapa.removeAttribute("estado")
                        } else {
                            iconoSelecionado.style.background = "blue"
                            contenedorCapa.setAttribute("estado", "seleccionado")
                        }
                        if (capaUID === "global") {
                            if (estadoCapa === "seleccionado") {
                                todasLasCapas.forEach((capa) => {
                                    capa.removeAttribute("estado")
                                    capa.querySelector("[componente=icono]").removeAttribute("style")
                                })
                            } else {
                                todasLasCapas.forEach((capa) => {
                                    capa.setAttribute("estado", "seleccionado")
                                    capa.querySelector("[componente=icono]").style.background = "blue"
                                })
                            }
                        }
                        if (grupo === "cabeza") {
                            const elementosDelGrupo = contenedorCapa.closest("[grupo=campo]").querySelectorAll("[grupo=elemento]")
                            if (estadoCapa === "seleccionado") {
                                elementosDelGrupo.forEach((capa) => {
                                    capa.removeAttribute("estado")
                                    capa.querySelectorAll("[componente=icono]").forEach((icono) => {
                                        icono.removeAttribute("style")
                                    })
                                })
                            } else {
                                elementosDelGrupo.forEach((capa) => {
                                    capa.setAttribute("estado", "seleccionado")
                                    capa.querySelectorAll("[componente=icono]").forEach((icono) => {
                                        icono.style.background = "blue"
                                    })
                                })
                            }
                        }
                        if (grupo === "elemento") {
                            const elementosDelGrupo = contenedorCapa.closest("[grupo=campo]").querySelectorAll("[grupo=elemento]")
                            const cabezaGrupo = contenedorCapa.closest("[grupo=campo]").querySelector("[grupo=cabeza]")
                            let estadoFinal = "seleccionado"
                            for (const elemento of elementosDelGrupo) {
                                const estado = elemento.getAttribute("estado")
                                if (estado !== "seleccionado") {
                                    estadoFinal = "noSeleccionado"
                                    cabezaGrupo.removeAttribute("estado")
                                    cabezaGrupo.querySelector("[componente=icono]").removeAttribute("style")
                                    break
                                }
                            }
                            if (estadoFinal === "seleccionado") {
                                cabezaGrupo.setAttribute("estado", "seleccionado")
                                cabezaGrupo.querySelector("[componente=icono]").style.background = "blue"
                            }
                        }
                        controlBotonGlobal()
                    }
                    const capasPorVerificar = contenedorCapas.capas
                    const composicionCapaCompuesta = contenedorCapas.capasCompuestas
                    const contenedorMenuCapasRenderizado = document.querySelector("[componente=contenedorMenuCapas]")
                    if (capasPorVerificar.includes("global")) {
                        contenedorMenuCapasRenderizado.querySelectorAll("[capaUID]").forEach((capa) => {
                            capa.setAttribute("estado", "seleccionado")
                            capa.querySelector("[componente=icono]").style.background = "blue"
                        })
                    } else {
                        for (const capaPorVeriticar of capasPorVerificar) {
                            if (composicionCapaCompuesta[capaPorVeriticar]) {
                                const capasSimplesEnCapaCompuesta = composicionCapaCompuesta[capaPorVeriticar]
                                for (const capaSimpleEnCapaCompuesta of capasSimplesEnCapaCompuesta) {
                                    const capaUIDConstructor = `[capaUID="${capaPorVeriticar}"][${capaPorVeriticar}="${capaSimpleEnCapaCompuesta}"]`
                                    const selectorCapaRenderizada = contenedorMenuCapasRenderizado.querySelector(capaUIDConstructor)
                                    selectorCapaRenderizada.setAttribute("estado", "seleccionado")
                                    selectorCapaRenderizada.querySelector("[componente=icono]").style.background = "blue"
                                }
                            } else {
                                const capaUIDConstructor = `[capaUID="${capaPorVeriticar}"]`
                                const selectorCapaRenderizada = contenedorMenuCapasRenderizado.querySelector(capaUIDConstructor)
                                selectorCapaRenderizada.setAttribute("estado", "seleccionado")
                                selectorCapaRenderizada.querySelector("[componente=icono]").style.background = "blue"
                                const tipoRolGrupo = selectorCapaRenderizada.getAttribute("grupo")
                                if (tipoRolGrupo === "cabeza") {
                                    selectorCapaRenderizada.closest("[grupo=campo]").querySelectorAll("[grupo=elemento]").forEach((elemento) => {
                                        elemento.setAttribute("estado", "seleccionado")
                                        elemento.querySelector("[componente=icono]").style.background = "blue"
                                    })
                                }
                            }
                        }
                    }
                    const selectorCapas = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID]")
                    selectorCapas.forEach((selector) => {
                        selector.addEventListener("click", controladorSelectoresCapas)
                    })
                })
                marcoBotonesGlobales.appendChild(botonSelectorMultiCapa)
                calendario.appendChild(marcoBotonesGlobales)
                const navegacionMes = document.createElement("nav")
                navegacionMes.setAttribute("class", "administracion_calendario_navegacionMes")
                calendario.appendChild(navegacionMes)
                // calendario.appendChild(cartelInfoCalendarioEstado)
                const botonNavegacionMesAtras = document.createElement("div")
                botonNavegacionMesAtras.setAttribute("class", "administracion_calendario_botonNavegacion")
                botonNavegacionMesAtras.setAttribute("id", "botonAtras")
                botonNavegacionMesAtras.setAttribute("sentido", "atras")
                botonNavegacionMesAtras.innerText = "Atras"
                botonNavegacionMesAtras.addEventListener("click", casaVitini.administracion.calendario.navegacionCalendarioNuevo)
                navegacionMes.appendChild(botonNavegacionMesAtras)
                const contenedorCentralCalendario = document.createElement("div")
                contenedorCentralCalendario.classList.add("administracion_calendario_contenedorCentralCalendario")
                const contenedorHerramientasCalendario = document.createElement("div")
                contenedorHerramientasCalendario.classList.add("administracion_calendario_contenedorHerramientasCalendario")
                const botonHoy = document.createElement("div")
                botonHoy.classList.add("administracion_calendario_selectorCapa")
                botonHoy.innerText = "Hoy"
                botonHoy.addEventListener("click", casaVitini.administracion.calendario.verHoy)
                contenedorHerramientasCalendario.appendChild(botonHoy)
                const selectorCapa = document.createElement("select")
                selectorCapa.classList.add("administracion_calendario_selectorCapa")
                selectorCapa.setAttribute("componente", "selectorCapas")
                selectorCapa.addEventListener("change", (e) => {
                    const capaIDV = e.target.value
                    const instanciaUID = e.target.closest("[instanciaUID]").getAttribute("instanciaUID")
                    const opcionSeleccionada = e.target.options[e.target.selectedIndex];
                    const tipoCapa = opcionSeleccionada.getAttribute("tipoCapa")
                    const metadatos = {
                        capaContenido: capaIDV,
                        capaUID: tipoCapa,
                        instanciaUID: instanciaUID,
                        origen: "menuDesplegable"
                    }
                    casaVitini.administracion.calendario.capas(metadatos)
                })
                const opcionPreterminada = document.createElement("option");
                opcionPreterminada.value = "";
                opcionPreterminada.selected = "true"
                opcionPreterminada.disabled = "true"
                opcionPreterminada.text = "Capa";
                selectorCapa.add(opcionPreterminada);
                const capaReservas = document.createElement("option");
                capaReservas.value = "reservas";
                capaReservas.setAttribute("tipoCapa", "reservas")
                capaReservas.text = "Reservas";
                selectorCapa.add(capaReservas);
                const capaTodosLosApartamentos = document.createElement("option");
                capaTodosLosApartamentos.value = "todosLosApartamentos";
                capaTodosLosApartamentos.setAttribute("tipoCapa", "todosLosApartamentos")
                capaTodosLosApartamentos.text = "Todos los apartamentos";
                selectorCapa.add(capaTodosLosApartamentos);
                const capaTodosLosBloqueos = document.createElement("option");
                capaTodosLosBloqueos.value = "todosLosBloqueos";
                capaTodosLosBloqueos.setAttribute("tipoCapa", "todosLosBloqueos")
                capaTodosLosBloqueos.text = "Todos los bloqueos";
                selectorCapa.add(capaTodosLosBloqueos);
                //contenedorHerramientasCalendario.appendChild(selectorCapa)
                contenedorCentralCalendario.appendChild(contenedorHerramientasCalendario)
                const navegacionMesReferencia = document.createElement("div")
                navegacionMesReferencia.setAttribute("id", "navegacionMesReferencia")
                navegacionMesReferencia.setAttribute("class", "navegacionMesReferencia")
                navegacionMesReferencia.setAttribute("componente", "mesReferencia")
                contenedorCentralCalendario.appendChild(navegacionMesReferencia)
                navegacionMes.appendChild(contenedorCentralCalendario)
                const botonNavegacionMesAdelante = document.createElement("div")
                botonNavegacionMesAdelante.setAttribute("class", "administracion_calendario_botonNavegacion")
                botonNavegacionMesAdelante.setAttribute("id", "botonAdelante")
                botonNavegacionMesAdelante.innerText = "Adelante"
                botonNavegacionMesAdelante.setAttribute("sentido", "adelante")
                botonNavegacionMesAdelante.addEventListener("click", casaVitini.administracion.calendario.navegacionCalendarioNuevo)
                navegacionMes.appendChild(botonNavegacionMesAdelante)
                const marcoMes = document.createElement("ol")
                marcoMes.setAttribute("id", "marcoMes")
                marcoMes.setAttribute("class", "administracion_calendario_marcoMes")
                marcoMes.setAttribute("componente", "marcoMes")
                marcoMes.setAttribute("instanciaUID", "uidInicialMes")
                const pilaDias = ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"]
                for (const nombreDia of pilaDias) {
                    let diaSemana = document.createElement("li")
                    diaSemana.setAttribute("class", "nombreDia")
                    diaSemana.setAttribute("tipoNombreDia", "extendido")
                    diaSemana.innerText = nombreDia
                    marcoMes.appendChild(diaSemana)
                }
                const pilaDiasAbreviados = ["L", "M", "X", "J", "V", "S", "D"]
                for (const nombreDia of pilaDiasAbreviados) {
                    let diaSemana = document.createElement("li")
                    diaSemana.setAttribute("class", "nombreDia")
                    diaSemana.setAttribute("tipoNombreDia", "abreviado")
                    diaSemana.innerText = nombreDia
                    marcoMes.appendChild(diaSemana)
                }
                calendario.appendChild(marcoMes)
                const seccion = document.querySelector("main:not([estado=obsoleto])")
                const bloqueCalendario = document.createElement("div")
                bloqueCalendario.setAttribute("class", "adminsitracion_calendario_bloqueCalendario")
                bloqueCalendario.setAttribute("instanciaUID", instanciaUID)
                bloqueCalendario.setAttribute("componente", "calendarioGlobal")
                //bloqueCalendario.style.top = alturaDinamica + "px"
                const contenedoCalendarioIntermedio = document.createElement("div")
                contenedoCalendarioIntermedio.setAttribute("class", "administracion_calendario_contenedorCalentadioIntermedio")
                //bloqueCalendario.appendChild(cartelInfoCalendarioEstado)
                //bloqueCalendario.style.visibility = "hidden"
                const mensajeSpinner = "Construyendo calendario..."
                const spinner = casaVitini.ui.componentes.spinnerSimple(mensajeSpinner)
                const contenedorCarga = document.createElement("div")
                contenedorCarga.classList.add("administracion_calendario_componente_calendario_contenedoCarga")
                contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                //contenedorCarga.setAttribute("elemento", "flotante")
                contenedorCarga.appendChild(spinner)
                contenedoCalendarioIntermedio.appendChild(calendario)
                contenedoCalendarioIntermedio.appendChild(contenedorCarga)
                bloqueCalendario.appendChild(contenedoCalendarioIntermedio)
                document.querySelector("main").appendChild(bloqueCalendario)
            },
            constructorMesNuevo: async (calendario) => {
                const instanciaUID = calendario.instanciaUID
                const instanciaUIDMes = calendario.instanciaUIDMes
                const selectorCalendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (!selectorCalendarioRenderizado) {
                    return
                }
                const nombreMes = ["Enero", "Febrero", "Marzo", "Abrir", "Mayo", "Junio", "Julio", "Agost", "Septiembre", "Octubre", "Noviembre", "Diciembre"]
                const nombreMesFinal = nombreMes[calendario.mes - 1]
                const indicadorMesAno = nombreMesFinal + " " + calendario.ano
                const navegacionMesReferencia = selectorCalendarioRenderizado.querySelector("[componente=mesReferencia]")
                navegacionMesReferencia.innerText = indicadorMesAno
                navegacionMesReferencia.setAttribute("ano", calendario.ano)
                navegacionMesReferencia.setAttribute("mes", calendario.mes)
                const posicionDia1 = calendario.posicionDia1
                const numeroDiasPorMes = calendario.numeroDiasPorMes;
                const diaActual = calendario.dia
                selectorCalendarioRenderizado.querySelectorAll("[dia]").forEach(diaObsoleto => {
                    diaObsoleto.remove()
                });
                selectorCalendarioRenderizado.querySelectorAll("[componente=diaVacio]").forEach(diaObsoleto => {
                    diaObsoleto.remove()
                });
                const marcoCalendario = selectorCalendarioRenderizado.querySelector("[componente=marcoCalendarioGlobal]")
                const perfilMes = marcoCalendario?.getAttribute("perfilMes")
                //await new Promise(resolve => setTimeout(resolve, 1000));
                const controlDiasCompletos = {
                    zona: "componentes/diasOcupadosTotalmentePorMes",
                    mes: Number(calendario.mes),
                    ano: Number(calendario.ano)
                }
                const resuelveDiasCompletos = await casaVitini.shell.servidor(controlDiasCompletos)
                if (resuelveDiasCompletos?.error) {
                    casaVitini.shell.controladoresUI.limpiarMain()
                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    return casaVitini.ui.componentes.mensajeSimple({
                        titulo: resuelveDiasCompletos.error
                    })
                }
                const selectorCalendarioRenderizado_control = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (!selectorCalendarioRenderizado_control) {
                    return
                }

                const detallesDiasOcupacion = resuelveDiasCompletos.ok.dias
                let mesActual = calendario.mes
                let anoActual = calendario.ano
                mesActual = String(mesActual).padStart(2, "0");
                mesActual = Number(mesActual)
                anoActual = Number(anoActual)
                const marcoMes = marcoCalendario.querySelector(`[componente=marcoMes][instanciaUID="${instanciaUIDMes}"]`)
                for (let index = 1; index < posicionDia1; index++) {
                    const bloqueDia = document.createElement("li")
                    bloqueDia.setAttribute("componente", "diaVacio")
                    const numeroDiaUI = document.createElement("div")
                    numeroDiaUI.classList.add("administracion_calendario_numeroDiaUI")
                    //numeroDiaUI.innerText = "VACIO"
                    bloqueDia.appendChild(numeroDiaUI)
                    marcoMes?.appendChild(bloqueDia)
                }
                marcoCalendario?.setAttribute("perfilMes", perfilMes)
                for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                    let diaFinal = numeroDia + 1;
                    diaFinal = Number(diaFinal)
                    const bloqueDia = document.createElement("li")
                    bloqueDia.setAttribute("class", "administracion_calendario_componenteCalendario_dia")
                    const contenedorDia = document.createElement("div")
                    contenedorDia.classList.add("administracion_calendario_contenedorInformacionDia")
                    contenedorDia.setAttribute("componente", "contenedorDia")
                    const numeroDiaUI = document.createElement("div")
                    numeroDiaUI.classList.add("administracion_calendario_numeroDiaUI")
                    numeroDiaUI.innerText = diaFinal
                    contenedorDia.appendChild(numeroDiaUI)
                    const contenedorCapa = document.createElement("div")
                    contenedorCapa.classList.add("administracion_calendario_contenedorCapa")
                    contenedorCapa.setAttribute("contenedor", "capa")
                    //contenedorCapa.innerText = "espacio capa"
                    //contenedorDia.appendChild(contenedorCapa)
                    if (diaFinal === 1) {
                        //  bloqueDia.style.gridColumnStart = posicionDia1
                    }
                    bloqueDia.setAttribute("dia", diaFinal)
                    bloqueDia.setAttribute("estado", "disponible")
                    //bloqueDia.addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.seleccionarDia)
                    if (calendario.tiempo === "presente") {
                        if (diaFinal === diaActual) {
                            bloqueDia.classList.add("diaDeHoy")
                        }
                    }
                    if (detallesDiasOcupacion[diaFinal]?.estadoDia === "diaParcial") {
                        bloqueDia.classList.add("diaParcial")
                    } else if (detallesDiasOcupacion[diaFinal]?.estadoDia === "diaCompleto") {
                        bloqueDia.classList.add("diaCompleto")
                    } else {
                        bloqueDia.classList.add("diaDisponible")
                    }
                    bloqueDia.appendChild(contenedorDia)
                    marcoMes?.appendChild(bloqueDia)
                }
                if (selectorCalendarioRenderizado) {
                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                    const contenedorMes = selectorCalendarioRenderizado.querySelector(`[componente=marcoMes][instanciaUID="${instanciaUIDMes}"]`)
                    if (contenedorMes) {
                        selectorCalendarioRenderizado.querySelector("[contenedor=construyendoCalendario]")?.remove()
                    }
                    contenedorMes?.removeAttribute("style")
                    selectorCalendarioRenderizado.querySelector("[contenedor=calendario]").removeAttribute("style")
                }
            },
            navegacionCalendarioNuevo: async (calendarioRenderizado) => {
                const boton = calendarioRenderizado.target.getAttribute("sentido")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const parametros = granuladoURL.parametros
                const instanciaUIDMes = casaVitini.utilidades.codigoFechaInstancia()
                const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                const instanciaUID = calendarioRenderizado.target.closest("[instanciaUID]").getAttribute("instanciaUID")
                document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=marcoMes]`)
                    .setAttribute("instanciaUID", instanciaUIDMes)
                let mesActual = Number(document.querySelector("[componente=mesReferencia]").getAttribute("mes"))
                let anoActual = Number(document.querySelector("[componente=mesReferencia]").getAttribute("ano"))
                if (boton === "adelante") {
                    if (mesActual + 1 < 13) {
                        mesActual = mesActual + 1
                    } else {
                        mesActual = 1
                        anoActual = anoActual + 1
                    }
                }
                if (boton === "atras") {
                    if (mesActual - 1 > 0) {
                        mesActual = mesActual - 1
                    } else {
                        mesActual = 12
                        anoActual = anoActual - 1
                    }
                }
                const calendario = {
                    tipo: "personalizado",
                    //
                    ano: anoActual,
                    mes: mesActual,
                    instanciaUID: instanciaUID,
                    tipoRegistro: "crear",
                }
                let parametrosURL = []
                const contenedorCapas = {
                    capas: [],
                    capasCompuestas: {}
                }
                for (const conjunto of contenedorSeguroParaParametros) {
                    const par = conjunto.split(":")
                    const parametro = par[0]
                    const valor = par[1]
                    const estructuraURLParametro = `${parametro}:${valor}`
                    if (parametro.toLowerCase() !== "fecha") {
                        parametrosURL.push(estructuraURLParametro)
                    }
                    if (parametro === "capa") {
                        const capaEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(valor)
                        contenedorCapas.capas.push(capaEnCamel)
                    }
                    if (parametro !== "fecha" && parametro !== "capa") {
                        const parametroEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(parametro)
                        const composicionCapa = valor.split("=")
                        contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                    }
                }
                calendario.url = `fecha:${mesActual}-${anoActual}/` + parametrosURL.join("/")
                casaVitini.administracion.calendario.controladorRegistros(calendario)
                calendario.instanciaUIDMes = instanciaUIDMes
                await casaVitini.administracion.calendario.configuraMes(calendario)
                const metadatos = {
                    instanciaUID: instanciaUID,
                    origen: "navegacionEntreMeses",
                    contenedorCapas: contenedorCapas,
                    instanciaUIDMes: instanciaUIDMes
                }
                casaVitini.administracion.calendario.capas(metadatos)
            },
            verHoy: async (calendarioActual) => {
                const instanciaUID = calendarioActual.target.closest("[instanciaUID]").getAttribute("instanciaUID")
                const calendarioRenderizado = document.querySelector(`[componente=calendarioGlobal][instanciaUID="${instanciaUID}"]`)
                const mesRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("mes"))
                const anoRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("ano"))
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                const parametros = granuladoURL.parametros
                //const mesRenderizado = 
                const instanciaUIDMes = casaVitini.utilidades.codigoFechaInstancia()
                const marcoMes = calendarioRenderizado.querySelector(`[componente=marcoMes]`)
                marcoMes.setAttribute("instanciaUID", instanciaUIDMes)
                marcoMes.style.flex = "0"
                const selectorDiasRenderizados = calendarioRenderizado.querySelectorAll("[dia], [componente=eventoUI], [componente=diaVacio]")
                selectorDiasRenderizados.forEach((e) => {
                    e?.remove()
                })
                const contenedorCalendario = calendarioRenderizado.querySelector(`[contenedor=calendario]`)
                const spinner = casaVitini.ui.componentes.spinnerSimple()
                const contenedorCarga = document.createElement("div")
                contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
                contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                contenedorCarga.setAttribute("elemento", "flotante")
                contenedorCarga.appendChild(spinner)
                const construyendoCalendarioRenderizado = calendarioRenderizado.querySelector("[contenedor=construyendoCalendario]")
                if (!construyendoCalendarioRenderizado) contenedorCalendario.appendChild(contenedorCarga)
                const contenedorCapas = {
                    capas: [],
                    capasCompuestas: {}
                }
                const parametrosURL = []
                for (const conjunto of contenedorSeguroParaParametros) {
                    const par = conjunto.split(":")
                    const parametro = par[0]
                    const valor = par[1]
                    const estructuraURLParametro = `${parametro}:${valor}`
                    parametrosURL.push(estructuraURLParametro)
                    if (parametro === "capa") {
                        const capaEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(valor)
                        contenedorCapas.capas.push(capaEnCamel)
                    }
                    if (parametro !== "fecha" && parametro !== "capa") {
                        const parametroEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(parametro)
                        const composicionCapa = valor.split("=")
                        contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                    }
                }
                const soloCapasURL = []
                for (const parDeParametro of parametrosURL) {
                    const parametro = parDeParametro.split(":")
                    if (parametro[0] !== "fecha") {
                        soloCapasURL.push(parDeParametro)
                    }
                }
                const calendario = {
                    tipo: "actual",
                    //
                    instanciaUID: instanciaUID,
                    instanciaUIDMes: instanciaUIDMes
                }
                const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo({
                    tipo: "actual"
                })
                const anoPresente = calendarioResuelto.ano
                const mesPresente = calendarioResuelto.mes
                calendario.url = `fecha:${mesPresente}-${anoPresente}/${soloCapasURL.join("/")}`
                if ((mesRenderizado !== mesPresente && anoRenderizado === anoPresente) || (anoRenderizado !== anoPresente)) {
                    //ADquitir la url actual, que puede ser diferente segun la capa
                    calendario.tipoRegistro = "crear"
                    casaVitini.administracion.calendario.controladorRegistros(calendario)
                } else {
                    //en el mdo dos siempre actualizar por is la url ha cambiado a selecionar una capa en hoy
                    calendario.tipoRegistro = "actualizar"
                    casaVitini.administracion.calendario.controladorRegistros(calendario)
                }
                await casaVitini.administracion.calendario.configuraMes(calendario)
                const metadatos = {
                    instanciaUID: instanciaUID,
                    contenedorCapas: contenedorCapas
                }
                casaVitini.administracion.calendario.capas(metadatos)
            },
            configuraMes: async (calendario) => {
                const instanciaUID = calendario.instanciaUID
                const instanciaUIDMes = calendario.instanciaUIDMes
                const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                const selectorDiasRenderizados = calendarioRenderizado.querySelectorAll("[dia], [componente=eventoUI], [componente=diaVacio]")
                selectorDiasRenderizados.forEach((e) => {
                    e.remove()
                })
                const contenedorCalendario = calendarioRenderizado.querySelector(`[contenedor=calendario]`)
                const contenedorMes = calendarioRenderizado.querySelector(`[componente=marcoMes]`)
                marcoMes.style.flex = "0"
                //contenedorMes.setAttribute("instanciaUID", instanciaUIDMes)
                const mensajeSpinner = "Construyendo mes..."
                const spinner = casaVitini.ui.componentes.spinnerSimple(mensajeSpinner)
                const contenedorCarga = document.createElement("div")
                contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
                contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                contenedorCarga.setAttribute("elemento", "flotante")
                contenedorCarga.appendChild(spinner)
                const construyendoCalendarioRenderizado = calendarioRenderizado.querySelector("[contenedor=construyendoCalendario]")
                if (!construyendoCalendarioRenderizado) contenedorCalendario.appendChild(contenedorCarga)
                // se debderia volver a contruir un objecto aqui para resolver calendario

                const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo({
                    mes: calendario.mes,
                    ano: calendario.ano,
                    tipo: calendario.tipo
                })


                calendarioResuelto.instanciaUID = instanciaUID
                calendarioResuelto.instanciaUIDMes = instanciaUIDMes

                await casaVitini.administracion.calendario.constructorMesNuevo(calendarioResuelto)
                //casaVitini.administracion.calendario.controlVertical();

            },
            controlVertical: () => {

                const selectorSeccion = document.querySelector("main")
                const selectorCalendarioGlobal = document.querySelector("[componente=calendarioGlobal]")
                if (!selectorCalendarioGlobal) {
                    window.removeEventListener("resize", casaVitini.administracion.calendario.controlVertical);

                }
                const altoRenderizadoSection = selectorSeccion.scrollHeight;
                const alturaVentana = window.innerHeight;
                if (alturaVentana > altoRenderizadoSection) {
                    selectorCalendarioGlobal.style.position = "absolute"
                } else if (alturaVentana < altoRenderizadoSection) {
                    selectorCalendarioGlobal.style.position = "relative"
                } else if (alturaVentana === altoRenderizadoSection) {
                    selectorCalendarioGlobal.style.position = "absolute"
                }
            },
            controladorRegistros: (metadatos) => {
                const titulo = "Administracion"
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const parametros = granuladoURL.parametros
                const tipoRegistro = metadatos.tipoRegistro
                //investigar por que cuando el calendario se arranca no hay ninguna url en el objeto, eso puede ser
                const urlActual = metadatos.url || ""
                const configuracion = { ...metadatos }
                delete configuracion.url
                delete configuracion.tipoRegistro
                delete configuracion.instanciaUID
                const estructuraParametrosFinales = []
                for (const [parametroFinal, valorFinal] of Object.entries(parametros)) {
                    const estructura = `${parametroFinal}:${valorFinal}`
                    estructuraParametrosFinales.push(estructura)
                }
                let parametrosURLFInal = ""
                if (estructuraParametrosFinales.length > 0) {
                    parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                }
                let constructorURLFinal
                if (urlActual === "") {
                    constructorURLFinal = ""
                } else {
                    constructorURLFinal = granuladoURL.directoriosFusion + "/" + urlActual
                }
                const estado = {
                    zona: constructorURLFinal,
                    EstadoInternoZona: "estado",
                    tipoCambio: "parcial",
                    componenteExistente: "marcoCalendarioGlobal",
                    funcionPersonalizada: "administracion.calendario.irAFecha",
                    args: configuracion
                }
                if (tipoRegistro === "crear") {
                    window.history.pushState(estado, titulo, constructorURLFinal);
                }
                if (tipoRegistro === "actualizar") {
                    window.history.replaceState(estado, titulo, constructorURLFinal);
                }
            },
            irAFecha: async (calendario) => {
                const instanciaUID = document.querySelector("[instanciaUID]").getAttribute("instanciaUID")
                const instanciaUIDMes = casaVitini.utilidades.codigoFechaInstancia()
                document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=marcoMes]`)
                    .setAttribute("instanciaUID", instanciaUIDMes)
                calendario.instanciaUIDMes = instanciaUIDMes
                calendario.instanciaUID = instanciaUID
                await casaVitini.administracion.calendario.configuraMes(calendario)
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                const contenedorCapas = {
                    capas: [],
                    capasCompuestas: {}
                }
                for (const conjunto of contenedorSeguroParaParametros) {
                    const par = conjunto.split(":")
                    const parametro = par[0]
                    const valor = par[1]
                    const estructuraURLParametro = `${parametro}:${valor}`
                    if (parametro.toLowerCase() !== "fecha") {
                        //parametrosURL.push(estructuraURLParametro)
                    }
                    if (parametro === "capa") {
                        const capaEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(valor)
                        contenedorCapas.capas.push(capaEnCamel)
                    }
                    if (parametro !== "fecha" && parametro !== "capa") {
                        const parametroEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(parametro)
                        const composicionCapa = valor.split("=")
                        contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                    }
                }
                const metadatos = {
                    instanciaUID: instanciaUID,
                    contenedorCapas: contenedorCapas,
                    instanciaUIDMes: instanciaUIDMes,
                    origen: "historial"
                }
                casaVitini.administracion.calendario.capas(metadatos)
            },
            capas: async (metadatos) => {
                const contenedorCapas = metadatos.contenedorCapas
                const instanciaUID = metadatos.instanciaUID
                const origen = metadatos.origen
                const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (!document.querySelector(`[instanciaUID="${instanciaUID}"]`)) { return }
                let instanciaUIDMes
                if (origen === "navegacionEntreMeses" || origen === "menuDesplegable" || origen === "historial") {
                    instanciaUIDMes = metadatos.instanciaUIDMes
                } else {
                    instanciaUIDMes = calendarioRenderizado.querySelector("[componente=marcoMes]").getAttribute("instanciaUID")
                }
                const mesRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("mes"))
                const anoRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("ano"))
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const parametros = granuladoURL.parametros
                const selectorCapaRenderizada = calendarioRenderizado.querySelectorAll("[componente=eventoUI]")
                selectorCapaRenderizada.forEach((capaRenderizada) => {
                    capaRenderizada.remove()
                })
                //tipoRegistroFinal puede ser actualizar o crear
                let tipoRegistroFinal
                if (origen === "menuDesplegable" || origen === "navegacionEntreMeses") {
                    tipoRegistroFinal = "crear"
                }
                //casaVitini.administracion.calendario.controlVertical()
                const calendario = {
                    tipo: "personalizado",
                    //
                    ano: anoRenderizado,
                    mes: mesRenderizado,
                    instanciaUID: instanciaUID,
                    tipoRegistro: tipoRegistroFinal,
                }
                const ventanaDetallesDelEventoTruncado = (data) => {

                    const urlUI = data.urlUI
                    const eventoUID = data.eventoUID
                    const nombreEventoFinal = data.nombreEventoFinal
                    const detallesDelEventoUI = data.detallesDelEventoUI
                    const main = document.querySelector("main")
                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                    main.appendChild(ui)
                    const contenedor = ui.querySelector("[componente=contenedor]")

                    const titulo = document.createElement("div")
                    titulo.classList.add(
                        "titulo"
                    )
                    titulo.innerText = `Detalles del evento`
                    contenedor.appendChild(titulo)

                    const info = document.createElement("p")
                    info.classList.add(
                        "textoCentrado"
                    )
                    info.innerText = "Se ha desplegado esta pantalla de informaci√≥n porque el texto del evento no cab√≠a en la celda del evento y se mostraba truncado con elipsis."
                    contenedor.appendChild(info)

                    const infoDetallesDelEvento = document.createElement("p")
                    infoDetallesDelEvento.classList.add(
                        "textoCentrado"
                    )
                    infoDetallesDelEvento.innerText = detallesDelEventoUI
                    if (detallesDelEventoUI) {
                        contenedor.appendChild(infoDetallesDelEvento)
                    }

                    const nobreDelEvento = document.createElement("p")
                    nobreDelEvento.classList.add(
                        "textoCentrado",
                        "negrita"
                    )
                    nobreDelEvento.innerText = nombreEventoFinal
                    contenedor.appendChild(nobreDelEvento)

                    const botonIrAlEvento = document.createElement("div")
                    botonIrAlEvento.classList.add("boton")
                    botonIrAlEvento.setAttribute("boton", "cancelar")
                    botonIrAlEvento.innerText = "Ir al evento"
                    botonIrAlEvento.addEventListener("click", () => {
                        const navegacion = {
                            vista: urlUI,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    })
                    if (urlUI) {
                        contenedor.appendChild(botonIrAlEvento)
                    }

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("boton")
                    botonCancelar.setAttribute("boton", "cancelar")
                    botonCancelar.innerText = "Cerrar y volver a la reserva"
                    botonCancelar.addEventListener("click", () => {
                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    })
                    contenedor.appendChild(botonCancelar)
                }
                const obtenerCoordenadasCeldaGrid = (celdaGrid) => {
                    const selectorDiaRenderizado = document.querySelector(`[dia="${celdaGrid}"]`);
                    const gridContainer = selectorDiaRenderizado.parentElement;
                    const items = Array.from(gridContainer.children);
                    const index = items.indexOf(selectorDiaRenderizado);
                    const columns = parseInt(getComputedStyle(gridContainer).gridTemplateColumns.split(" ").length);
                    const row = Math.floor(index / columns) + 1;
                    const column = (index % columns) + 1;

                    const estructuraFinal = {
                        fila: row,
                        columna: column
                    }
                    return estructuraFinal
                }
                const obtenerNumeroDeCeldasEnFila = (filaDeseada) => {
                    const gridContainer = document.querySelector("[componente=marcoMes]");
                    //Obt√©n todas las celdas dentro del contenedor del grid
                    const celdas = Array.from(gridContainer.children);
                    //Obt√©n el n√∫mero de columnas en el grid
                    const columnas = parseInt(getComputedStyle(gridContainer).gridTemplateColumns.split(" ").length);
                    //Calcula el √≠ndice inicial y final de la fila deseada
                    const indiceInicial = (filaDeseada - 1) * columnas;
                    const indiceFinal = filaDeseada * columnas;
                    //Filtra las celdas que pertenecen a la fila deseada
                    const celdasEnFila = celdas.slice(indiceInicial, indiceFinal);
                    //Muestra el n√∫mero de celdas en la fila deseada
                    //
                    return celdasEnFila.length
                }
                const obtenerNumeroDeCeldasConAtributoEnFila = (filaDeseada, atributo) => {
                    const gridContainer = document.querySelector("[componente=marcoMes]");
                    //Obt√©n todas las celdas dentro del contenedor del grid
                    const celdas = Array.from(gridContainer.children);
                    //Obt√©n el n√∫mero de columnas en el grid
                    const columnas = parseInt(getComputedStyle(gridContainer).gridTemplateColumns.split(" ").length);
                    //Calcula el √≠ndice inicial y final de la fila deseada
                    const indiceInicial = (filaDeseada - 1) * columnas;
                    const indiceFinal = filaDeseada * columnas;
                    //Filtra y cuenta las celdas que pertenecen a la fila deseada y tienen el atributo espec√≠fico
                    const celdasEnFilaConAtributo = celdas.slice(indiceInicial, indiceFinal).filter(celda => celda.getAttribute(atributo) !== null);
                    //Muestra el n√∫mero de celdas en la fila deseada con el atributo espec√≠fico
                    //
                    return celdasEnFilaConAtributo.length;
                }
                const filaDeseada = 2; //Puedes cambiar esto seg√∫n la fila que te interese
                const numeroDeFilasTotales = (gridUID) => {
                    const grid = document.querySelector("[componente=marcoMes]");
                    const gridStyles = window.getComputedStyle(grid);
                    const gridRows = gridStyles.gridTemplateRows.split(" ").length;
                    return gridRows
                }
                const numeroDeFilasConDia = () => {
                    const grid = document.querySelector("[componente=marcoMes]");

                    // Selecciona todas las celdas con el atributo 'dia'
                    const celdasConDia = grid.querySelectorAll("[dia]");

                    // Crear un Set para almacenar las filas √∫nicas
                    const filasUnicas = new Set();

                    celdasConDia.forEach(celda => {
                        // Obtener el n√∫mero de fila de la celda (usando su propiedad de estilo gridRow)
                        const numeroDeFila = window.getComputedStyle(celda).gridRowStart;
                        filasUnicas.add(numeroDeFila);
                    });

                    // El tama√±o del Set es el n√∫mero de filas con al menos una celda con el atributo 'dia'
                    return filasUnicas.size;
                };
                const diferenciaDeDias = (fechaIncioMes_ISO, fechaSalidaEvento_ISO) => {
                    const fecha1 = new Date(fechaIncioMes_ISO); // Primera fecha en formato ISO
                    const fecha2 = new Date(fechaSalidaEvento_ISO); // Segunda fecha en formato ISO
                    fecha1.setHours(0, 0, 0, 0);
                    fecha2.setHours(0, 0, 0, 0);
                    // Calcula la diferencia en milisegundos
                    const diferenciaEnMilisegundos = fecha2.getTime() - fecha1.getTime();
                    // Convierte la diferencia a d√≠as y a√±ade 1 para incluir ambos d√≠as
                    const diferenciaEnDiasSalida = diferenciaEnMilisegundos / (1000 * 60 * 60 * 24) + 1;
                    return diferenciaEnDiasSalida;
                }
                const constructorEventoUI = (metadatos) => {
                    const eventoUID = metadatos.eventoUID
                    const altura = metadatos.altura
                    const url = metadatos.url
                    const css = metadatos.css
                    const inicioColumna = metadatos.inicioColumna
                    const finalColumna = metadatos.finalColumna
                    const inicioFila = metadatos.inicioFila
                    const tipoEvento = metadatos.tipoEvento
                    //detallesDelEvento


                    const detallesDelEvento = metadatos.detallesDelEvento

                    let nombreEventoFinal = "Evento sin infomraci√≥n"
                    let detallesDelEventoUI
                    let urlUI
                    if (tipoEvento === "reserva") {
                        const reservaUID = detallesDelEvento.reservaUID
                        nombreEventoFinal = "Reserva " + reservaUID
                        urlUI = "/administracion/reservas/reserva:" + reservaUID
                    } else if (tipoEvento === "todosLosApartamentos") {
                        const reservaUID = detallesDelEvento.reservaUID
                        const apartamentoUI = detallesDelEvento.apartamentoUI
                        nombreEventoFinal = apartamentoUI
                        urlUI = `/administracion/reservas/reserva:${reservaUID}`
                    } else if (tipoEvento === "porApartamento") {
                        const reservaUID = detallesDelEvento.reservaUID
                        const apartamentoUI = detallesDelEvento.apartamentoUI
                        nombreEventoFinal = apartamentoUI
                        urlUI = `/administracion/reservas/reserva:${reservaUID}`
                    } else if (tipoEvento === "todosLosBloqueos") {
                        const bloqueoUID = detallesDelEvento.bloqueoUID
                        const apartamentoIDV = detallesDelEvento.apartamentoIDV
                        const apartamentoUI = detallesDelEvento.apartamentoUI
                        nombreEventoFinal = `Bloqueo ${apartamentoUI}`
                        urlUI = `/administracion/gestion_de_bloqueos_temporales/${apartamentoIDV}/${bloqueoUID}`
                    } else if (tipoEvento === "calendarioAirbnb") {
                        const descripcion = detallesDelEvento.descripcion || ""
                        const apartamentoUI = detallesDelEvento.apartamentoUI
                        const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                        const match = descripcion.match(regex);
                        if (match) {
                            const urlEvento = match?.[1] ?? null;
                            nombreEventoFinal = `Airbnb (${apartamentoUI})`
                            urlUI = urlEvento
                        } else {
                            nombreEventoFinal = `Airbnb (${apartamentoUI}), sin informaci√≥n`
                            detallesDelEventoUI = "Este evento proviene de Airbnb y no proporciona m√°s informaci√≥n. Esto suele ser debido cuando el evento de calendario de Airbnb proviene de otra fuente como Booking"
                            //urlUI = ""
                        }
                    }

                    const nombreClaseDinamica = `evento_margin-top-${altura}`;
                    if (!document.querySelector(`.${nombreClaseDinamica}`)) {
                        // Si no existe, crea un nuevo estilo
                        const style = document.createElement('style');
                        style.innerHTML = `
                            .${nombreClaseDinamica} {
                                margin-top: ${altura}px;
                        `;
                        document.querySelector("main").appendChild(style);
                    }

                    const eventoUI = document.createElement("a")

                    const contenedorInfoEvento = document.createElement("div")
                    contenedorInfoEvento.classList.add(
                        "infoEvento"
                    )
                    contenedorInfoEvento.setAttribute("dato", "textoEvento")
                    contenedorInfoEvento.innerText = nombreEventoFinal
                    eventoUI.appendChild(contenedorInfoEvento)

                    eventoUI.classList.add(
                        nombreClaseDinamica,
                        css,
                        "animacion_eventoUI"
                    )

                    //eventoUI.style.marginTop = altura + "px"
                    eventoUI.setAttribute("componente", "eventoUI")
                    eventoUI.setAttribute("eventoUID", eventoUID)
                    if (urlUI) {
                        eventoUI.setAttribute("vista", urlUI)
                        eventoUI.setAttribute("href", urlUI)
                    }
                    eventoUI.style.gridColumn = `${inicioColumna} /${finalColumna} span `
                    eventoUI.style.gridRow = `${inicioFila}`
                    eventoUI.addEventListener("mouseover", () => {
                        const selectorEventoUIRenderizado = document.querySelectorAll(`[eventoUID="${eventoUID}"]`)
                        selectorEventoUIRenderizado.forEach((eventoRenderizado) => {
                            eventoRenderizado.classList.add("administracion_calendario_eventoUI_selecionado")
                        })
                    })
                    eventoUI.addEventListener("mouseout", () => {
                        const selectorEventoUIRenderizado = document.querySelectorAll(`[eventoUID="${eventoUID}"]`)
                        selectorEventoUIRenderizado.forEach((eventoRenderizado) => {
                            eventoRenderizado.classList.remove("administracion_calendario_eventoUI_selecionado")
                        })
                    })
                    eventoUI.addEventListener("click", (e) => {
                        e.preventDefault()
                        const contnedorTexto = e.target.querySelector("[dato=textoEvento]")
                        const tieneElipsis = (elemento) => {
                            return elemento.scrollWidth > elemento.clientWidth;
                        }

                        if (tieneElipsis(contnedorTexto)) {
                            ventanaDetallesDelEventoTruncado({
                                urlUI,
                                eventoUID,
                                nombreEventoFinal,
                                detallesDelEventoUI
                            })
                        } else if (urlUI) {
                            const navegacion = {
                                vista: urlUI,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    })
                    return eventoUI
                }
                const siguienteLunes = (primerDiaDelMes) => {
                    if (primerDiaDelMes === 1) {
                        return 8;
                    }
                    else if (primerDiaDelMes > 1) {
                        return 8 - (primerDiaDelMes - 1);
                    }
                    else {
                        return 1 + (1 - primerDiaDelMes);
                    }
                }
                const renderizadorEventos = (contenedorEventos) => {
                    const eventosMes = contenedorEventos.eventosMes
                    const eventosEnDetalle = contenedorEventos.eventosEnDetalle
                    const instanciaUIDMes = contenedorEventos.instanciaUIDMes
                    const selectorMesDestino = calendarioRenderizado.querySelector(`[instanciaUID="${instanciaUIDMes}"]`)
                    if (selectorMesDestino) {
                        //Solo queda este error - Esto deberia estar dentro de renderizados de eventos
                        const selectorDias = selectorMesDestino.querySelectorAll("[dia]")
                        selectorDias.forEach((dia) => {
                            dia.removeAttribute("eventosContenedor")
                        })
                        for (const detallesDia of Object.entries(eventosMes)) {
                            const fechaDestino = detallesDia[0].split("-")
                            const diaDestino = Number(fechaDestino[2])
                            const selectorContenedorDia = selectorMesDestino.querySelector(`[dia="${diaDestino}"]`)
                            //Analizar por que salta este error
                            const selectorArrayRenderizado = selectorContenedorDia?.getAttribute("eventosContenedor")
                            const objetoEventos = JSON.parse(selectorArrayRenderizado) || {}
                            let posicionEvento = 0
                            const posicionColumnaDia = obtenerCoordenadasCeldaGrid(diaDestino).columna
                            const posicionesEventosReservadas = {}
                            if (!objetoEventos.eventos) {
                                objetoEventos.eventos = {}
                            }
                            if (diaDestino === 1) {
                                let posicionesIninical = posicionEvento
                                for (const eventosDiaActual of detallesDia[1]) {
                                    const reservaUID_diaActual = eventosDiaActual.eventoUID
                                    objetoEventos.eventos[reservaUID_diaActual] = posicionesIninical
                                    posicionesEventosReservadas[posicionesIninical] = "posicionReservada"
                                    posicionesIninical++
                                }
                            } else {
                                const numeroDiaAnterior = diaDestino - 1
                                const selectorContenedorDiaAnterior = selectorMesDestino
                                    .querySelector(`[dia="${numeroDiaAnterior}"]`)
                                    ?.getAttribute("eventosContenedor") || "{}"
                                const eventosDelDiaAnterior = JSON.parse(selectorContenedorDiaAnterior) || {}
                                const contenedorEventosDiaAnterior = eventosDelDiaAnterior.eventos ? eventosDelDiaAnterior.eventos : {}
                                //Primer loop, se comprueba que eventos de hoy estan el dia anterior para reservas posiciones.
                                for (const [eventoAnteriorUID, posicionEventoAnterior] of Object.entries(contenedorEventosDiaAnterior)) {
                                    for (const eventosDiaActual of detallesDia[1]) {
                                        const eventoActualUID = eventosDiaActual.eventoUID
                                        if (String(eventoActualUID) === String(eventoAnteriorUID)) {
                                            const posicionDelApartamentoDelDiaAnteior = contenedorEventosDiaAnterior[eventoActualUID]
                                            objetoEventos.eventos[eventoActualUID] = posicionDelApartamentoDelDiaAnteior
                                            posicionesEventosReservadas[posicionDelApartamentoDelDiaAnteior] = "posicionReservada"
                                        }
                                    }
                                }
                                if (posicionColumnaDia === 1) {
                                    let posicionesIninical = posicionEvento
                                    objetoEventos.eventos = {}
                                    Object.keys(posicionesEventosReservadas).forEach((posicion) => {
                                        delete posicionesEventosReservadas[posicion]
                                    })
                                    for (const eventosDiaActual of detallesDia[1]) {
                                        const evendoDiaActualUID = eventosDiaActual.eventoUID
                                        objetoEventos.eventos[evendoDiaActualUID] = posicionesIninical
                                        posicionesEventosReservadas[posicionesIninical] = "posicionReservada"
                                        posicionesIninical++
                                    }
                                }
                            }
                            for (const eventosDelDia of detallesDia[1]) {
                                const eventoUID = eventosDelDia.eventoUID
                                if (posicionColumnaDia === 1) {
                                }
                                if (objetoEventos.eventos[eventoUID] === undefined) {
                                    while (posicionesEventosReservadas[posicionEvento] === "posicionReservada") {
                                        posicionEvento++;
                                    }
                                    objetoEventos.eventos[eventoUID] = Number(posicionEvento)
                                    posicionEvento++;
                                }
                            }
                            selectorMesDestino.querySelector(`[dia="${diaDestino}"]`)
                                .setAttribute("eventosContenedor", JSON.stringify(objetoEventos))
                        }

                        for (const detallesDelEvento of eventosEnDetalle) {
                            const reservaUID = detallesDelEvento.reservaUID
                            const eventoUID = detallesDelEvento.eventoUID
                            const reservaUI = detallesDelEvento.reserva
                            const nombreEventoUI = detallesDelEvento.nombreEventoUI
                            const fechaEntrada = detallesDelEvento.fechaEntrada
                            const fechaSalida = detallesDelEvento.fechaSalida
                            const duracion_en_dias = detallesDelEvento.duracion_en_dias

                            const tipoEvento = detallesDelEvento.tipoEvento
                            let diaEntrada
                            let mesEntrada
                            let anoEntrada
                            let diaSalida
                            let mesSalida
                            let anoSalida
                            if (fechaEntrada) {
                                const fechaEntradaArray = fechaEntrada.split("-")
                                diaEntrada = Number(fechaEntradaArray[2])
                                mesEntrada = Number(fechaEntradaArray[1])
                                anoEntrada = Number(fechaEntradaArray[0])
                            }
                            if (fechaSalida) {
                                const fechaSalidaArray = fechaSalida.split("-")
                                diaSalida = Number(fechaSalidaArray[2])
                                mesSalida = Number(fechaSalidaArray[1])
                                anoSalida = Number(fechaSalidaArray[0])
                            }
                            const configuracionEventoUI = {
                                eventoUID: eventoUID,
                                tipoEvento: tipoEvento,
                                detallesDelEvento: detallesDelEvento
                            }


                            // Inicio del renderizador de eventos
                            if (mesRenderizado === mesEntrada && anoRenderizado === anoEntrada) {
                            } else {
                                diaEntrada = 1
                            }

                            const selectorContenedorDia = selectorMesDestino.querySelector(`[dia="${diaEntrada}"]`)
                            const eventosContenedor = selectorContenedorDia.getAttribute("eventosContenedor")
                            const posicionEventoUI = (JSON.parse(eventosContenedor)).eventos[eventoUID]
                            const conteoEventos = Object.keys(JSON.parse(eventosContenedor).eventos).length - 1
                            const coordenadasDiaInicio = obtenerCoordenadasCeldaGrid(diaEntrada);
                            const inicioFila = coordenadasDiaInicio.fila - 1
                            const celdasPorFilaConAtributo = obtenerNumeroDeCeldasConAtributoEnFila(inicioFila + 1, "dia")
                            const inicioColumna = coordenadasDiaInicio.columna
                            const celdasNoExistentes = 7 - celdasPorFilaConAtributo
                            const inicioColumnaSinPrimeraPosicion = inicioColumna - 1
                            const inicioFilaDia = inicioFila - 1
                            let restoDeCeldas
                            let diasRestantes

                            if (inicioFilaDia === 1 || inicioFilaDia < numeroDeFilasConDia()) {
                                restoDeCeldas = celdasPorFilaConAtributo - (inicioColumnaSinPrimeraPosicion - celdasNoExistentes)
                            } else if (inicioFilaDia === numeroDeFilasConDia()) {
                                restoDeCeldas = celdasPorFilaConAtributo - inicioColumnaSinPrimeraPosicion
                            }
                            let finalColumna

                            if (mesRenderizado === mesEntrada && anoRenderizado === anoEntrada) {
                                finalColumna = (duracion_en_dias) >= restoDeCeldas ? (restoDeCeldas) : (duracion_en_dias);

                            } else {
                                const fechaIncioMes_ISO = `${anoRenderizado}-${String(mesRenderizado).padStart(2, "0")}-01`
                                diasRestantes = diferenciaDeDias(fechaIncioMes_ISO, fechaSalida);
                                finalColumna = diasRestantes >= restoDeCeldas ? (restoDeCeldas) : (diasRestantes)
                                // finalColumna = restoDeDiasDelEvento >= celdasPorFilaConAtributo ? celdasPorFilaConAtributo : restoDeDiasDelEvento;
                            }

                            let filaSiguiente = inicioFila
                            let alturaFinal
                            if (posicionEventoUI === 0) {
                                alturaFinal = 40
                            } else if (posicionEventoUI === 1) {
                                alturaFinal = 90
                            } else if (posicionEventoUI > 1) {
                                alturaFinal = (posicionEventoUI * 40) + ((posicionEventoUI + 1) * 10) + 30
                            }
                            const numeroFilasTotales = numeroDeFilasConDia()

                            let restoDeDiasDelEvento
                            if (mesRenderizado === mesEntrada && anoRenderizado === anoEntrada) {
                                restoDeDiasDelEvento = restoDeCeldas > duracion_en_dias ? 0 : (duracion_en_dias) - restoDeCeldas

                                if (restoDeDiasDelEvento === 0) {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_inicioFinal"
                                } else {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_inicioSolo"
                                }
                            } else {
                                restoDeDiasDelEvento = restoDeCeldas > diasRestantes ? 0 : Math.abs((diasRestantes) - restoDeCeldas)
                                if (restoDeDiasDelEvento <= 0) {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_finalSolo"
                                } else {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_transicion"
                                }
                            }
                            configuracionEventoUI.altura = alturaFinal
                            configuracionEventoUI.inicioColumna = inicioColumna
                            configuracionEventoUI.finalColumna = finalColumna
                            configuracionEventoUI.inicioFila = inicioFila
                            const eventoUI = constructorEventoUI(configuracionEventoUI)
                            selectorMesDestino.appendChild(eventoUI)
                            const posicionDiaUno = obtenerCoordenadasCeldaGrid(1).columna
                            const filaInicialDelEvento = (obtenerCoordenadasCeldaGrid(diaEntrada).fila - 2)
                            let sumadorDiaFila

                            if (filaInicialDelEvento === 1) {
                                sumadorDiaFila = siguienteLunes(posicionDiaUno)
                            } else {
                                let sumaDias = 7 * (filaInicialDelEvento - 1)
                                sumadorDiaFila = siguienteLunes(posicionDiaUno) + sumaDias
                            }
                            while (restoDeDiasDelEvento > 0 && numeroFilasTotales >= filaSiguiente) {
                                filaSiguiente = filaSiguiente + 1

                                const selectorContenedorDia_loop = selectorMesDestino.querySelector(`[dia="${sumadorDiaFila}"]`)
                                const eventosContenedor_loop = selectorContenedorDia_loop.getAttribute("eventosContenedor")
                                sumadorDiaFila = 7 + sumadorDiaFila
                                const posicionEventoUI_loop = (JSON.parse(eventosContenedor_loop)).eventos[eventoUID]
                                let alturaFinal
                                if (posicionEventoUI_loop === 0) {
                                    alturaFinal = 40
                                } else if (posicionEventoUI_loop === 1) {
                                    alturaFinal = 90
                                } else if (posicionEventoUI_loop > 1) {
                                    alturaFinal = (posicionEventoUI_loop * 40) + ((posicionEventoUI_loop + 1) * 10) + 30
                                }
                                const celdasPorFilaConAtributo = obtenerNumeroDeCeldasConAtributoEnFila(filaSiguiente + 1, "dia")
                                const finalColumna_ = restoDeDiasDelEvento >= celdasPorFilaConAtributo ? celdasPorFilaConAtributo : (restoDeDiasDelEvento);
                                restoDeDiasDelEvento = Math.abs(restoDeDiasDelEvento - finalColumna_)
                                if (restoDeDiasDelEvento <= 0) {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_finalSolo"
                                } else {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_transicion"
                                }
                                configuracionEventoUI.altura = alturaFinal
                                configuracionEventoUI.inicioColumna = 1
                                configuracionEventoUI.finalColumna = finalColumna_
                                configuracionEventoUI.inicioFila = filaSiguiente
                                const eventoUI = constructorEventoUI(configuracionEventoUI)
                                selectorMesDestino.appendChild(eventoUI)
                            }

                        }
                    }
                }
                const capasSimples = contenedorCapas.capas
                const capasCompuestas = contenedorCapas.capasCompuestas
                const primerFormatoURL = []
                for (const capaSimple of capasSimples) {
                    const capaSimpleURL = casaVitini.utilidades.cadenas.camelToSnake(capaSimple)
                    const composicioCapa = capasCompuestas[capaSimple]
                    let final
                    if (composicioCapa) {
                        final = `capa:${capaSimpleURL}/${capaSimpleURL}:${composicioCapa.join("=")}`
                    } else {
                        final = `capa:${capaSimpleURL}`
                    }
                    primerFormatoURL.push(final)
                }
                const segundoFormatoURL = primerFormatoURL.join("/")
                if (origen === "menuDesplegable") {
                    calendario.url = `fecha:${mesRenderizado}-${anoRenderizado}/` + segundoFormatoURL
                    casaVitini.administracion.calendario.controladorRegistros(calendario)
                }
                const transaccion = {
                    zona: "administracion/calendario/capas/multiCapa",
                    fecha: `${mesRenderizado}-${anoRenderizado}`,
                    contenedorCapas: contenedorCapas
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const contenedorEventos = {
                        eventosMes: respuestaServidor.eventosMes,
                        eventosEnDetalle: respuestaServidor.eventosEnDetalle,
                        instanciaUIDMes: instanciaUIDMes
                    }
                    renderizadorEventos(contenedorEventos)
                }
                //casaVitini.administracion.calendario.controlVertical()
            },
            obtenerConfiguracionesApartamento: async () => {
                const transaccion = {
                    zona: "administracion/arquitectura/configuraciones/listarConfiguracionApartamentos"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const estructuraFinal = []
                    const configuracionesApartamentos = respuestaServidor?.ok
                    if (configuracionesApartamentos.length > 0) {
                        for (const detalleApartamento of configuracionesApartamentos) {
                            const apartamentoIDV = detalleApartamento.apartamentoIDV
                            const apartamentoUI = detalleApartamento.apartamentoUI
                            const estadoConfiguracion = detalleApartamento.estadoConfiguracion
                            const detallesApartamento = {
                                apartamentoIDV: apartamentoIDV,
                                apartamentoUI: apartamentoUI,
                                estadoConfiguracion: estadoConfiguracion,
                            }
                            estructuraFinal.push(detallesApartamento)
                        }
                    }
                    return estructuraFinal
                }
            },
            obtenerCalendariosSincronizados: {
                airbnb: async () => {
                    const transaccion = {
                        zona: "administracion/calendario/obtenerNombresCalendarios/airbnb"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const estructuraFinal = []
                        const calendariosSincronizados = respuestaServidor?.calendariosSincronizados
                        if (calendariosSincronizados.length > 0) {
                            for (const detallesDelCalendario of calendariosSincronizados) {
                                const apartamentoIDV = detallesDelCalendario.apartamentoIDV
                                const apartamentoUI = detallesDelCalendario.apartamentoUI
                                const nombre = detallesDelCalendario.nombre
                                const calendarioUID = detallesDelCalendario.calendarioUID
                                const detallesApartamento = {
                                    apartamentoIDV: apartamentoIDV,
                                    apartamentoUI: apartamentoUI,
                                    nombre: nombre,
                                    calendarioUID: calendarioUID
                                }
                                estructuraFinal.push(detallesApartamento)
                            }
                        }
                        return estructuraFinal
                    }
                }
            }
        },
        componentes: {
            obtenerApartamentos: async () => {
                const transaccion = {
                    zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    return respuestaServidor?.ok
                }
            },
            obtenerConfiguracionAlojamiento: async (apartamentoIDV) => {
                const transaccion = {
                    zona: "administracion/arquitectura/configuraciones/detalleConfiguracionAlojamiento",
                    apartamentoIDV
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    // console.error(respuestaServidor)
                }
                if (respuestaServidor.ok) {
                    return respuestaServidor
                }
            }
        }
    }
}

const convertirFuncionesEnCadenas = (objeto) => {
    for (const clave in objeto) {
        if (typeof objeto[clave] === "function") {
            objeto[clave] = objeto[clave].toString();
        } else if (typeof objeto[clave] === "object") {
            //Si la propiedad es un objeto, llama recursivamente a la funci√≥n
            convertirFuncionesEnCadenas(objeto[clave]);
        }
    }
}
export const administracionJS = () => {
    convertirFuncionesEnCadenas(casaVitini.administracion);
    const objetoComoJSON = JSON.stringify(casaVitini.administracion);
    return objetoComoJSON
}
