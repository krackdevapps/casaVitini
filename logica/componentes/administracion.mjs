
const administracion = {
    reservas: {
        arranque: async () => {

            document.querySelector("section:not([estado=obsoleto])").setAttribute("tipoVista", "reservasPaginadas")
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            const granuladoURL = casaVitini.componentes.granuladorURL()
            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
            const directorios = granuladoURL.directorios
            if (comandoInicial === "reservas" && Object.keys(granuladoURL.parametros).length === 0) {
                casaVitini.administracion.reservas.buscadorUI()
            } else if (comandoInicial === "buscador") {
                casaVitini.administracion.reservas.buscadorUI()

                const transaccion = {
                    zona: "administracion/reservas/listarReservas",
                    tipoConstruccionGrid: "total",
                    origen: "url",
                    ...granuladoURL.parametros,
                }
                transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                if (transaccion.por_terminos) {
                    transaccion.tipoConsulta = "porTerminos"
                    transaccion.termino = decodeURI(transaccion.por_terminos)
                    delete transaccion.por_terminos

                    const selectorCampoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
                    selectorCampoBuscador.value = decodeURI(transaccion.termino)
                }
                if (transaccion.rango) {
                    transaccion.tipoConsulta = "rango"
                    transaccion.tipoCoincidencia = transaccion.rango.replace(/_([a-z])/g, (match, group) => group.toUpperCase());
                    delete transaccion.rango
                    casaVitini.administracion.reservas.seleccionarRango(transaccion.tipoCoincidencia)
                }
                if (transaccion.tipoConsulta) {
                    transaccion.tipoConsulta = transaccion.tipoConsulta.replace(/_([a-z])/g, (match, group) => group.toUpperCase());
                }
                if (transaccion.nombre_columna) {
                    transaccion.nombreColumna = transaccion.nombre_columna.replace(/_([a-z])/g, (match, group) => group.toUpperCase());
                    delete transaccion.nombre_columna
                }
                if (transaccion.sentido_columna) {
                    transaccion.sentidoColumna = transaccion.sentido_columna
                    delete transaccion.sentido_columna
                }
                if (transaccion.fecha_entrada) {
                    transaccion.fechaEntrada = transaccion.fecha_entrada.replaceAll("-", "/")
                    delete transaccion.fecha_entrada

                    const selectorContenedorFecha = document.querySelector("[calendario=entrada]")
                    selectorContenedorFecha.setAttribute("memoriaVolatil", transaccion.fechaEntrada)
                    selectorContenedorFecha.querySelector("#fechaEntrada").innerText = transaccion.fechaEntrada

                }
                if (transaccion.fecha_salida) {
                    transaccion.fechaSalida = transaccion.fecha_salida.replaceAll("-", "/")
                    delete transaccion.fecha_salida

                    const selectorContenedorFecha = document.querySelector("[calendario=salida]")
                    selectorContenedorFecha.setAttribute("memoriaVolatil", transaccion.fechaSalida)
                    selectorContenedorFecha.querySelector("#fechaSalida").innerText = transaccion.fechaSalida
                }






                casaVitini.administracion.reservas.mostrarReservasResueltas(transaccion)

            } else {
                return casaVitini.administracion.reservas.detallesReserva.reservaUI()
            }

        },
        buscadorUI: (url) => {

            const marcoElastico = document.createElement("div")
            marcoElastico.classList.add("marcoElasticoRelativo")
            marcoElastico.setAttribute("componente", "marcoElastico")


            const espacioReservas = document.createElement("div")
            espacioReservas.setAttribute("componente", "espacioReservas")
            espacioReservas.classList.add("administracion_reservas_espacioReservas")

            const contenedorBotonesGlobales = document.createElement("div")
            contenedorBotonesGlobales.classList.add("administracion_reservas_contenedorBotonesGlobales")

            const botonVerHoy = document.createElement("a")
            botonVerHoy.classList.add("adminitracion_reservas_contenedorBotonesGlobales")
            botonVerHoy.setAttribute("boton", "botonVerHoy")
            botonVerHoy.addEventListener("click", casaVitini.administracion.reservas.verReservasHoy)
            botonVerHoy.innerText = "Ver hoy"
            contenedorBotonesGlobales.appendChild(botonVerHoy)


            const botonCrearReserva = document.createElement("a")
            botonCrearReserva.classList.add("adminitracion_reservas_contenedorBotonesGlobales")
            botonCrearReserva.innerText = "Crear una nueva reserva"
            botonCrearReserva.setAttribute("vista", "/administracion/reservas/nueva")
            botonCrearReserva.setAttribute("href", "/administracion/reservas/nueva")
            botonCrearReserva.addEventListener("click", casaVitini.componentes.cambiarVista)
            contenedorBotonesGlobales.appendChild(botonCrearReserva)


            espacioReservas.appendChild(contenedorBotonesGlobales)


            // Debera de ser un grid de dos uno para el boton y el otro para el resto
            let buscadorUI = document.createElement("nav")
            buscadorUI.classList.add("navegacionZonaAdministracion")
            buscadorUI.setAttribute("componente", "navegacionZonaAdministracion")


            let bloqueContenedor = document.createElement("div")
            bloqueContenedor.classList.add("reservasBloqueContenedor")

            const buscadorPorPalaba = document.createElement("input")
            buscadorPorPalaba.classList.add("campoBuscadorIdReservas")
            buscadorPorPalaba.setAttribute("componenteCampo", "buscadorPorId")
            buscadorPorPalaba.setAttribute("origenBusqueda", "porTerminos")
            buscadorPorPalaba.setAttribute("step", "any")
            buscadorPorPalaba.setAttribute("placeholder", "Escribe para buscar reservas")
            buscadorPorPalaba.addEventListener("input", casaVitini.administracion.reservas.buscadorReservas)
            espacioReservas.appendChild(buscadorPorPalaba)

            let buscadorReservasPorFecha = document.createElement("div")
            buscadorReservasPorFecha.classList.add("adminsitracionReservasBuscador")
            bloqueContenedor.appendChild(buscadorReservasPorFecha)





            let bloqueFechas = document.createElement("div")
            bloqueFechas.classList.add("adminsitracionBloqueSelecionDias")
            buscadorReservasPorFecha.appendChild(bloqueFechas)

            let bloqueFechaEntrada = document.createElement("div")
            bloqueFechaEntrada.classList.add("diaEntradaNuevoAdministracion")
            bloqueFechaEntrada.classList.add("administracionFormatoBloqueDiaNuevo")
            bloqueFechaEntrada.setAttribute("calendario", "entrada")
            bloqueFechaEntrada.setAttribute("paralizadorevento", "ocultadorCalendarios")

            bloqueFechaEntrada.addEventListener("click", casaVitini.administracion.reservas.constructorCalendario)
            bloqueFechaEntrada.setAttribute("componenteBuscador", "compartidoID")
            bloqueFechas.appendChild(bloqueFechaEntrada)

            let textoFechaEntrada = document.createElement("div")
            textoFechaEntrada.classList.add("textoDiaNuevoAdministracion")
            textoFechaEntrada.innerText = "Fecha de entrada"
            bloqueFechaEntrada.appendChild(textoFechaEntrada)

            let fechaEntradaElemento = document.createElement("div")
            fechaEntradaElemento.classList.add("fechaNuevo")
            fechaEntradaElemento.id = "fechaEntrada"
            fechaEntradaElemento.innerText = "Seleccionar"
            bloqueFechaEntrada.appendChild(fechaEntradaElemento)

            let bloqueFechaSalida = document.createElement("div")
            bloqueFechaSalida.classList.add("diaEntradaNuevoAdministracion")
            bloqueFechaSalida.classList.add("administracionFormatoBloqueDiaNuevo")
            bloqueFechaSalida.setAttribute("calendario", "salida")
            bloqueFechaSalida.setAttribute("componenteBuscador", "compartidoID")
            bloqueFechaSalida.addEventListener("click", casaVitini.administracion.reservas.constructorCalendario)
            bloqueFechaSalida.setAttribute("paralizadorevento", "ocultadorCalendarios")

            bloqueFechas.appendChild(bloqueFechaSalida)

            let textoFechaSalida = document.createElement("div")
            textoFechaSalida.classList.add("textoDiaNuevoAdministracion")
            textoFechaSalida.innerText = "Fecha de salida"

            bloqueFechaSalida.appendChild(textoFechaSalida)
            let fechaSalidaElemento = document.createElement("div")
            fechaSalidaElemento.classList.add("fechaNuevo")
            fechaSalidaElemento.id = "fechaSalida"
            fechaSalidaElemento.innerText = "Seleccionar"
            bloqueFechaSalida.appendChild(fechaSalidaElemento)


            let selectorRango = document.createElement("div")
            selectorRango.classList.add("selectorRango")



            let opcionRango = document.createElement("p")
            opcionRango.classList.add("selectorRangoOpcion")
            opcionRango.setAttribute("selectorRango", "cualquieraQueCoincida")
            opcionRango.innerText = "Cualquiera que coincida"
            opcionRango.addEventListener("click", () => {
                casaVitini.administracion.reservas.seleccionarRango("cualquieraQueCoincida")
            })
            selectorRango.appendChild(opcionRango)


            opcionRango = document.createElement("p")
            opcionRango.classList.add("selectorRangoOpcion")
            opcionRango.setAttribute("selectorRango", "soloDentroDelRango")
            opcionRango.innerText = "Solo dentro del rango"
            opcionRango.addEventListener("click", () => {
                casaVitini.administracion.reservas.seleccionarRango("soloDentroDelRango")
            })
            selectorRango.appendChild(opcionRango)


            opcionRango = document.createElement("p")
            opcionRango.classList.add("selectorRangoOpcion")
            opcionRango.setAttribute("selectorRango", "porFechaDeEntrada")
            opcionRango.innerText = "Por fecha de entrada"
            opcionRango.addEventListener("click", () => {
                casaVitini.administracion.reservas.seleccionarRango("porFechaDeEntrada")
            })
            selectorRango.appendChild(opcionRango)


            opcionRango = document.createElement("p")
            opcionRango.classList.add("selectorRangoOpcion")
            opcionRango.setAttribute("selectorRango", "porFechaDeSalida")
            opcionRango.innerText = "Por fecha de salida"
            opcionRango.addEventListener("click", () => {
                casaVitini.administracion.reservas.seleccionarRango("porFechaDeSalida")
            })
            selectorRango.appendChild(opcionRango)
            buscadorReservasPorFecha.appendChild(selectorRango)


            let botonMostrarReservas = document.createElement(("div"))
            botonMostrarReservas.classList.add("botonMostrarDisponibilidad")
            botonMostrarReservas.setAttribute("boton", "mostrarReservas")
            botonMostrarReservas.setAttribute("origenBusqueda", "porFecha")
            botonMostrarReservas.addEventListener("click", casaVitini.administracion.reservas.mostrarReservasPorRango)
            buscadorUI.appendChild(bloqueContenedor)

            botonMostrarReservas.innerText = "Mostrar reservas"
            buscadorReservasPorFecha.appendChild(botonMostrarReservas)

            espacioReservas.appendChild(buscadorUI)
            marcoElastico.appendChild(espacioReservas)
            const seccion = document.querySelector("section:not([estado=obsoleto])")
            seccion.appendChild(marcoElastico)



        },
        seleccionarDia: (dia) => {
            let diaSeleccionadoComoElemento = dia.target;
            let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
            let calendarioIO = calendario.getAttribute("calendarioIO")

            let diaSeleccionado = dia.target.getAttribute("dia")
            diaSeleccionado = diaSeleccionado.padStart(2, "0")
            diaSeleccionado = Number(diaSeleccionado)
            let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
            anoSeleccionado = anoSeleccionado.padStart(4, "0")
            anoSeleccionado = Number(anoSeleccionado)
            let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
            mesSeleccionado = mesSeleccionado.padStart(2, "0")
            mesSeleccionado = Number(mesSeleccionado)

            const fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
            let selectorDias = [...document.querySelectorAll("[calendarioIO] [dia]")]
            selectorDias.map((dia) => {
                // dia.classList.remove("calendarioDiaDisponible")
                dia.classList.remove("calendarioDiaReserva")
                dia.classList.remove("calendarioDiaSeleccionado")

            })
            if (diaSeleccionadoComoElemento.getAttribute("diaEstado") === "seleccionado") {
                diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                if (calendarioIO === "entrada") {
                    document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                    document.querySelector("#fechaEntrada").innerText = "Seleccionar"
                }
                if (calendarioIO === "salida") {
                    document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                    document.querySelector("#fechaSalida").innerText = "Seleccionar"
                }
                diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                diaSeleccionadoComoElemento.removeAttribute("diaEstado")

                return
            }
            let diasDisponibles = [...document.querySelectorAll("[estado=disponible]")]
            diasDisponibles.map(diaDisponible => {
                diaDisponible.removeAttribute("diaEstado")
                diaDisponible.style.background = ""
                diaDisponible.style.color = ""
            })

            diaSeleccionadoComoElemento.setAttribute("diaEstado", "seleccionado")
            diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")

            let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
            let diaSeleccionadoEntrada
            let mesSeleccionadoEntrada
            let anoSeleccionadoEntrada
            let datosFechaEntradaSeleccionada
            if (fechaEntradaSelecionda) {
                const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                diaSeleccionadoEntrada = fechaEntradaSelecionda_array[0]
                diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                mesSeleccionadoEntrada = fechaEntradaSelecionda_array[1]
                mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                anoSeleccionadoEntrada = fechaEntradaSelecionda_array[2]
                anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                datosFechaEntradaSeleccionada = "existen"
            }

            let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
            let diaSeleccionadoSalida
            let mesSeleccionadoSalida
            let anoSeleccionadoSalida
            let datosFechaSalidaSeleccionada
            if (fechaSalidaSelecionda) {
                const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                diaSeleccionadoSalida = fechaSalidaSelecionda_array[0]
                diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                mesSeleccionadoSalida = fechaSalidaSelecionda_array[1]
                mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                anoSeleccionadoSalida = fechaSalidaSelecionda_array[2]
                anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                datosFechaSalidaSeleccionada = "existen"
            }

            if (calendarioIO === "entrada") {
                document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                document.querySelector("#fechaEntrada").innerText = fechaSeleccionadaUI
                if (fechaSalidaSelecionda) {

                    if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                        selectorDias.map((dia) => {

                            if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {
                                //  dia.classList.remove("calendarioDiaDisponible")
                                dia.classList.add("calendarioDiaReserva")
                            }
                        })
                    } else {
                        selectorDias.map((dia) => {
                            if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                dia.classList.add("calendarioDiaReserva")
                            }
                        })
                    }

                }
            }

            if (calendarioIO === "salida") {
                document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                document.querySelector("#fechaSalida").innerText = fechaSeleccionadaUI

                if (fechaEntradaSelecionda) {

                    if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                        selectorDias.map((dia) => {
                            if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                dia.classList.add("calendarioDiaReserva")
                            }
                        })
                    } else {
                        selectorDias.map((dia) => {
                            if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                dia.classList.add("calendarioDiaReserva")
                            }
                        })
                    }

                }
            }
        },
        mostrarDetallesReserva: (transaccion) => {
            transaccion.preventDefault()
            transaccion.stopPropagation()
            const reserva = transaccion.target.parentNode.getAttribute("reserva")
            const vista = "/administracion/reservas/" + reserva
            const navegacion = {
                vista: vista,
                tipoOrigen: "menuNavegador"
            }

            return casaVitini.componentes.controladorVista(navegacion)
        },
        constructorGridReservas: (metadatos) => {

            let reservas = metadatos.reservas
            let metadatosBusqueda = { ...metadatos }
            delete metadatosBusqueda.reservas
            delete metadatosBusqueda.totalReservas
            delete metadatosBusqueda.paginasTotales
            let gridConstruido = document.querySelector("[componenteID=gridReservas]")
            let constructorGrid = document.createElement("div")
            constructorGrid.setAttribute("class", "administracionGridReservas")
            constructorGrid.setAttribute("componenteID", "gridReservas")
            constructorGrid.setAttribute("metadatosBusqueda", JSON.stringify(metadatosBusqueda))

            let selectorTitulosColumnas = [...document.querySelectorAll("[componenteGrid=celdaTituloColumna]")]
            selectorTitulosColumnas.map((celdaTituloColumna) => {
                celdaTituloColumna.style.removeProperty("background")
                celdaTituloColumna.querySelector("[sentidoIconos]")?.remove()
            })
            let icononombreColumna
            let descripcionnombreColumna
            if (metadatos.sentidoColumna === "ascendente") {
                icononombreColumna = "/componentes/iconos/ascendente.svg"
                descripcionnombreColumna = "Ordenar acendentemente esta columna"
            }

            if (metadatos.sentidoColumna === "descendente") {
                icononombreColumna = "/componentes/iconos/descendente.svg"
                descripcionnombreColumna = "Ordenar descendentemente esta columna"
            }
            if (metadatos.tipoConstruccionGrid === "soloLista") {
                let columnaSeleccionada = document.querySelector(`[componenteGrid=celdaTituloColumna][nombreColumna=${metadatos.nombreColumna}]`)
                columnaSeleccionada.setAttribute("nombreColumna", metadatos.sentidoColumna)

                columnaSeleccionada.style.background = "pink"
                const iconoColumna = document.createElement("img");
                iconoColumna.src = icononombreColumna;
                iconoColumna.alt = descripcionnombreColumna;
                iconoColumna.classList.add("icononombreColumna");
                iconoColumna.setAttribute("sentidoIconos", metadatos.sentidoColumna)
                columnaSeleccionada.appendChild(iconoColumna)

                let metadatosBusqueda = document.querySelector("[metadatosBusqueda]").getAttribute("metadatosBusqueda")
                metadatosBusqueda = JSON.parse(metadatosBusqueda)

                metadatosBusqueda.nombreColumna = metadatos.nombreColumna
                metadatosBusqueda.sentidoColumna = metadatos.sentidoColumna

                metadatosBusqueda = JSON.stringify(metadatosBusqueda)
                document.querySelector("[metadatosBusqueda]").setAttribute("metadatosBusqueda", metadatosBusqueda)
            }
            let titulosColumnas = ["Reserva", "Fecha de entrada", "Fecha de salida", "Estado de la reserva", "Estado del pago"]
            let nombreColumnas = ["reserva", "entrada", "salida", "estadoReserva", "estadoPago"]
            let classesTitulos = ["idColumna", "entradaColumna", "salidaColuma", "estadoColumna", "pagoColumna"]
            titulosColumnas.map((tituloColumna, ciclo) => {
                let columnaElemento = document.createElement("div")
                columnaElemento.innerText = tituloColumna
                columnaElemento.classList.add(classesTitulos[ciclo])
                columnaElemento.classList.add("administracionReservasColumnaTitulo")
                columnaElemento.setAttribute("nombreColumna", nombreColumnas[ciclo])
                columnaElemento.setAttribute("componenteGrid", "celdaTituloColumna")
                columnaElemento.addEventListener("click", casaVitini.administracion.reservas.ordenarPorColumna)

                if (metadatos.nombreColumna === nombreColumnas[ciclo]) {
                    columnaElemento.style.background = "pink"
                    columnaElemento.setAttribute("nombreColumna", metadatos.sentidoColumna)

                    const iconoColumna = document.createElement("img");
                    iconoColumna.src = icononombreColumna;
                    iconoColumna.alt = descripcionnombreColumna;
                    iconoColumna.classList.add("icononombreColumna");
                    iconoColumna.setAttribute("sentidoIconos", metadatos.sentidoColumna)
                    columnaElemento.appendChild(iconoColumna)

                }

                if (metadatos.tipoConstruccionGrid === "soloLista") {
                } else {
                    constructorGrid.appendChild(columnaElemento)
                }


            })
            if (metadatos.tipoConstruccionGrid === "soloLista") {
                let selectorFilasGrid = [...document.querySelectorAll("[componenteGrid=fila]")]
                selectorFilasGrid.map((filaGrid) => {
                    filaGrid.remove()
                })
            }

            reservas.map((bloqueReserva) => {
                let reserva = bloqueReserva.reserva
                let fechaEntrada = bloqueReserva.fechaEntrada
                let fechaSalida = bloqueReserva.fechaSalida
                let estado = bloqueReserva.estadoReserva
                let pago = bloqueReserva.estadoPago

                let celdaReserva = document.createElement("div")
                celdaReserva.setAttribute("class", "administracionCeldaEstiloCompartido")
                celdaReserva.innerText = reserva

                let celdaFechaEntrada = document.createElement("div")
                celdaFechaEntrada.setAttribute("class", "administracionCeldaEstiloCompartido")
                celdaFechaEntrada.innerText = fechaEntrada

                let celdaFechaSalida = document.createElement("div")
                celdaFechaSalida.setAttribute("class", "administracionCeldaEstiloCompartido")
                celdaFechaSalida.innerText = fechaSalida

                let celdaEstado = document.createElement("div")
                celdaEstado.setAttribute("class", "administracionCeldaEstiloCompartido")
                celdaEstado.innerText = estado

                let celdaPago = document.createElement("div")
                celdaPago.setAttribute("class", "administracionCeldaEstiloCompartido")
                celdaPago.innerText = pago

                let fila = document.createElement("a")
                fila.setAttribute("class", "adminitracionReservasFila")
                fila.setAttribute("reserva", reserva)
                fila.setAttribute("href", "/administracion/reservas/" + reserva)
                fila.setAttribute("componenteGrid", "fila")
                fila.setAttribute("vista", "/administracion/reservas/" + reserva)
                fila.addEventListener("click", casaVitini.administracion.reservas.mostrarDetallesReserva)

                fila.appendChild(celdaReserva)
                fila.appendChild(celdaFechaEntrada)
                fila.appendChild(celdaFechaSalida)
                fila.appendChild(celdaEstado)
                fila.appendChild(celdaPago)

                if (metadatos.tipoConstruccionGrid === "soloLista") {
                    gridConstruido.appendChild(fila)
                } else {
                    constructorGrid.appendChild(fila)
                }

            })
            if (metadatos.tipoConstruccionGrid === "soloLista") {
            } else {
                document.querySelector("[componenteID=gridReservas]")?.remove()
                document.querySelector(".marcoElasticoRelativo")?.appendChild(constructorGrid)
            }

        },
        cambiarPagina: (cambiarPagina) => {



            const gridUID = cambiarPagina.gridUID

            const tipoBoton = cambiarPagina.componenteID

            const gridEnlazado = document.querySelector(`[gridUID=${gridUID}]`)
            const nombreColumna = gridEnlazado?.getAttribute("nombreColumnaSeleccionada")
            const sentidoColumna = gridEnlazado?.getAttribute("sentidoColumna")
            const terminoBusqueda = gridEnlazado?.getAttribute("terminoBusqueda")
            const paginaActual = Number(gridEnlazado.getAttribute("numeroPagina"))
            const parametros = JSON.parse(gridEnlazado.getAttribute("parametros"))
            const paginaTipo = cambiarPagina.paginaTipo


            const transacccion = {
                nombreColumna: nombreColumna,
                sentidoColumna: sentidoColumna,
                buscar: terminoBusqueda,
                tipoBusqueda: "rapido",
                paginaTipo: paginaTipo

            }

            if (tipoBoton === "numeroPagina") {
                const numeroPagina = cambiarPagina.numeroPagina
                transacccion.pagina = Number(numeroPagina)
            }
            if (tipoBoton === "botonAdelantePaginacion") {
                const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                let mueveNavegadorHaciaAdelante = "Desactivado";
                if (Number(posicionRelativa) === 10) {
                    mueveNavegadorHaciaAdelante = "Activado"
                }
                transacccion.pagina = paginaActual + 1
                transacccion.moverHaciaAdelanteNavegacion = mueveNavegadorHaciaAdelante
                transacccion.sentidoNavegacion = "Adelante"
            }
            if (tipoBoton === "botonAtrasPaginacion") {
                const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                let mueveNavegadorHaciaAtras = "Desactivado";
                if (Number(posicionRelativa) === 1) {
                    mueveNavegadorHaciaAtras = "Activado"
                }
                transacccion.pagina = paginaActual - 1
                transacccion.mueveNavegadorHaciaAtras = mueveNavegadorHaciaAtras
                transacccion.sentidoNavegacion = "Atras"
            }
            transacccion.origen = "botonNumeroPagina"
            transacccion.tipoConstruccionGrid = "soloLista"
            transacccion.zona = "administracion/reservas/listarReservas"
            Object.assign(transacccion, parametros);

            return casaVitini.administracion.reservas.mostrarReservasResueltas(transacccion)


        },
        constructorCalendario: async (boton) => {

            const botonID = boton.target.getAttribute("calendario")
            const alturaDinamicaArriba = casaVitini.componentes.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton.target.closest("[calendario]")) + 20
            const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
            const instanciaUID = casaVitini.componentes.codigoFechaInstancia()
            const selectorCalendario = document.querySelector("[contenedor=calendario]")

            const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
            let diaSeleccionadoEntrada
            let mesSeleccionadoEntrada
            let anoSeleccionadoEntrada
            let datosFechaEntradaSeleccionada
            if (fechaEntradaVolatil_Humana) {
                const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("/")
                diaSeleccionadoEntrada = Number(fechaEntradaAarray[0])
                mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                anoSeleccionadoEntrada = Number(fechaEntradaAarray[2])
            }

            const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
            let diaSeleccionadoSalida
            let mesSeleccionadoSalida
            let anoSeleccionadoSalida
            let datosFechaSalidaSeleccionada
            if (fechaSalidaVolatil_Humana) {
                const fechaSaliraArray = fechaSalidaVolatil_Humana.split("/")
                diaSeleccionadoSalida = Number(fechaSaliraArray[0])
                mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                anoSeleccionadoSalida = Number(fechaSaliraArray[2])
            }


            if (botonID === "entrada") {
                if (selectorCalendario?.getAttribute("calendarioIO") === "salida") {
                    bloqueCalendario.remove()
                    document.removeEventListener("click", casaVitini.componentes.ocultarElementos)

                }
                if (selectorCalendario?.getAttribute("calendarioIO") === "entrada") {
                    bloqueCalendario.remove()
                    document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                    return

                }
                if (fechaEntradaVolatil_Humana) {
                    let calendario = {
                        tipo: "personalizado",
                        comando: "construyeObjeto",
                        tipoFecha: "entrada",
                        diaSeleccionado: diaSeleccionadoEntrada,
                        mes: Number(mesSeleccionadoEntrada),
                        ano: Number(anoSeleccionadoEntrada)
                    }

                    let tipoFecha = {
                        tipoFecha: "entrada",
                        almacenamientoCalendarioID: "AdministracionCalendario",
                        perfilMes: "diaEntradaAsistidoConPasadoBuscarReserva",
                        calendarioIO: "entrada",
                        mensajeInfo: "Selecciona una fecha de entrada para buscar reservas por un rango",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(tipoFecha)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)
                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(calendario)


                    calendarioResuelvo.instanciaUID = instanciaUID
                    casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)
                } else {
                    let calendario = {
                        tipo: "actual",
                        comando: "construyeObjeto",
                        tipoFecha: "entrada",
                        // "diaSeleccionado": almacenamientoAdministracion.Entrada.Dia,
                        // "mes": almacenamientoAdministracion.Entrada.Mes,
                        // "ano": almacenamientoAdministracion.Entrada.Ano
                    }



                    let tipoFecha = {
                        tipoFecha: "entrada",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaEntradaAsistidoConPasadoBuscarReserva",
                        calendarioIO: "entrada",
                        mensajeInfo: "Selecciona una fecha de entrada para buscar reservas por un rango",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(tipoFecha)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)
                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(calendario)
                    calendarioResuelvo.instanciaUID = instanciaUID


                    casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)

                }

            }
            if (botonID === "salida") {

                if (selectorCalendario?.getAttribute("calendarioIO") === "salida") {
                    bloqueCalendario.remove()
                    document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                    return
                }
                if (selectorCalendario?.getAttribute("calendarioIO") === "entrada") {
                    bloqueCalendario.remove()
                    document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                    //return

                }



                if (!fechaEntradaVolatil_Humana && !fechaSalidaVolatil_Humana) {

                    let calendario = {
                        tipo: "actual",
                        comando: "construyeObjeto",
                        tipoFecha: "salida",

                    }
                    let tipoFecha = {
                        tipoFecha: "salida",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaSalidaAsistidoConPasadoBuscarReserva",
                        calendarioIO: "salida",
                        mensajeInfo: "Selecciona una fecha de salida para buscar reservas por un rango",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(tipoFecha)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(calendario)
                    calendarioResuelvo.instanciaUID = instanciaUID

                    casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)

                }


                if (fechaEntradaVolatil_Humana && !fechaSalidaVolatil_Humana) {

                    let calendario = {
                        tipo: "personalizado",
                        comando: "construyeObjeto",
                        tipoFecha: "salida",
                        diaSeleccionado: diaSeleccionadoEntrada,
                        mes: Number(mesSeleccionadoEntrada),
                        ano: Number(anoSeleccionadoEntrada)
                    }
                    // let Dia_Entrada_Selecioando = Number(reservaLocal.Entrada.Dia)
                    let tipoFecha = {
                        tipoFecha: "salida",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaSalidaAsistidoConPasadoBuscarReserva",
                        calendarioIO: "salida",
                        mensajeInfo: "Selecciona una fecha de salida para buscar reservas por un rango",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID

                    }

                    casaVitini.componentes.constructorCalendarioNuevo(tipoFecha)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)
                    const calendarioResuelto = await casaVitini.componentes.resolverCalendarioNuevo(calendario)
                    calendarioResuelto.tiempo = "presente"
                    calendarioResuelto.instanciaUID = instanciaUID
                    casaVitini.componentes.constructorMesNuevo(calendarioResuelto)
                }

                if (fechaSalidaVolatil_Humana) {
                    const calendario = {
                        tipo: "personalizado",
                        comando: "construyeObjeto",
                        tipoFecha: "salida",
                        diaSeleccionado: diaSeleccionadoSalida,
                        mes: Number(mesSeleccionadoSalida),
                        ano: Number(anoSeleccionadoSalida)
                    }
                    // let Dia_Entrada_Selecioando = Number(reservaLocal.Entrada.Dia)
                    const tipoFecha = {
                        tipoFecha: "salida",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaSalidaAsistidoConPasadoBuscarReserva",
                        calendarioIO: "salida",
                        mensajeInfo: "Selecciona una fecha de salida para buscar reservas por un rango",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(tipoFecha)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)
                    const calendarioResuelto = await casaVitini.componentes.resolverCalendarioNuevo(calendario)
                    calendarioResuelto.instanciaUID = instanciaUID
                    casaVitini.componentes.constructorMesNuevo(calendarioResuelto)
                }

            }

        },
        seleccionarRango: (rangoIDV) => {
            let rangos = [...document.querySelectorAll("[selectorRango]")]

            rangos.map((rango) => {
                let rangoPorCiclo = rango.getAttribute("selectorRango")
                if (rangoPorCiclo === rangoIDV) {
                    rango.style.background = "#0800ff"
                    rango.style.color = "white"
                    rango.setAttribute("estadoSelecion", "activado")

                } else {
                    rango.style.removeProperty("background")
                    rango.style.removeProperty("color")
                    rango.removeAttribute("estadoSelecion")

                }
            })




        },
        resolverReservas: async (transaccion) => {
            try {
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    const error = respuestaServidor?.error
                    throw new Error(error)
                    //return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                return respuestaServidor
            } catch (error) {
                throw error
            }

        },
        mostrarReservasResueltas: async (transaccion) => {


            const origen = transaccion.origen
            delete transaccion.origen
            const tipoConstruccionGrid = transaccion.tipoConstruccionGrid
            delete transaccion.tipoConstruccionGrid
            const granuladoURL = casaVitini.componentes.granuladorURL()
            delete transaccion.granuladoURL
            const consultaDeEntrada = transaccion.tipoConsulta
            const paginaTipo = transaccion.paginaTipo
            delete transaccion.paginaTipo

            const selectorCuadradoFechaEntrada = document.querySelector("[calendario=entrada]")
            const selectorFechaEntradaUI = selectorCuadradoFechaEntrada.querySelector("#fechaEntrada")
            const selectorCuadradoFechaSalida = document.querySelector("[calendario=salida]")
            const selectorFechaSalidaUI = selectorCuadradoFechaSalida.querySelector("#fechaSalida")

            if (transaccion.parametros?.rango) {

                if (fechaEntrada) {
                    transaccion.fechaEntrada = fechaEntrada
                    const estructurarFecha = fechaEntrada.split("/")
                    const memoriaVolatil = {
                        dia: estructurarFecha[0],
                        mes: estructurarFecha[1],
                        ano: estructurarFecha[2]
                    }
                    selectorCuadradoFechaEntrada.setAttribute("memoriaVolatil", JSON.stringify(memoriaVolatil))


                    selectorFechaEntradaUI.innerText = fechaEntrada
                }
                if (fechaSalida) {
                    transaccion.fechaSalida = fechaSalida
                    const estructurarFecha = fechaSalida.split("/")
                    const memoriaVolatil = {
                        dia: estructurarFecha[0],
                        mes: estructurarFecha[1],
                        ano: estructurarFecha[2]
                    }
                    selectorCuadradoFechaSalida.setAttribute("memoriaVolatil", JSON.stringify(memoriaVolatil))
                    selectorFechaSalidaUI.innerText = fechaSalida
                }
                transaccion.rango = transaccion.rango ? tranformaDeGuionBajoACAmello(transaccion.rango) : ""
                if (transaccion.rango) {
                    const selectorRango = document.querySelector(`[selectorRango=${transaccion.rango}]`)
                    selectorRango.style.background = "rgb(8, 0, 255)"
                    selectorRango.style.color = "white"
                }

                transaccion.tipoCoincidencia = transaccion.rango
            }
            if (transaccion.parametros?.porTerminos) {
                const campoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
                campoBuscador.value = transaccion.porTerminos

                const selectorRangos = [...document.querySelectorAll(`[selectorRango]`)]
                selectorRangos.map((selectorRango) => {
                    selectorRango.removeAttribute("style")
                })
                selectorCuadradoFechaEntrada.removeAttribute("memoriaVolatil")
                selectorFechaEntradaUI.innerText = "Seleccionar"
                selectorCuadradoFechaSalida.removeAttribute("memoriaVolatil")
                selectorFechaSalidaUI.innerText = "Seleccionar"
            }

            //const resolverReservas = await casaVitini.administracion.reservas.resolverReservas(transaccion)
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                document.querySelector("[componente=estadoBusqueda]")?.remove()
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }

            if (respuestaServidor?.totalReservas === 0) {
                const espacioClientes = document.querySelector("[componente=espacioReservas]")
                document.querySelector("[gridUID=gridReservas]")?.remove()
                document.querySelector("[componente=estadoBusqueda]")?.remove()
                document.querySelector("[componenteID=navegacionPaginacion]")?.remove()

                const estadoBusquedaUI = document.createElement("div")
                estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                estadoBusquedaUI.innerText = "No se han encontrado reservas"
                espacioClientes.appendChild(estadoBusquedaUI)

                const titulo = "Buscador reservas"
                const zona = "/administracion/reservas"
                const estado = {
                    zona: zona,
                    EstadoInternoZona: "estado"
                }
                window.history.replaceState(estado, titulo, zona);
                return
            }
            document.querySelector("[componente=estadoBusqueda]")?.remove()

            const reservas = respuestaServidor.reservas

            const buscar = respuestaServidor.buscar
            const paginasTotales = respuestaServidor.paginasTotales
            const paginaActual = respuestaServidor.pagina
            const nombreColumna = respuestaServidor.nombreColumna
            const sentidoColumna = respuestaServidor.sentidoColumna
            const tipoConsulta = respuestaServidor.tipoConsulta
            const tipoCoincidencia = respuestaServidor.tipoCoincidencia
            const termino = respuestaServidor.termino
            const fechaEntrada = respuestaServidor.fechaEntrada
            const fechaSalida = respuestaServidor.fechaSalida

            const columnasGrid = [
                {
                    columnaUI: "Reserva",
                    columnaIDV: "reserva",
                    columnaClase: "idColumna"
                },
                {
                    columnaUI: "Fecha de entrada",
                    columnaIDV: "entrada",
                    columnaClase: "entradaColumna"
                },
                {
                    columnaUI: "Fecha de salida",
                    columnaIDV: "salida",
                    columnaClase: "salidaColuma"
                },
                {
                    columnaUI: "Estado de la reserva",
                    columnaIDV: "estadoReserva",
                    columnaClase: "estadoColumna"
                },
                {
                    columnaUI: "Titular de la reserva",
                    columnaIDV: "nombreCompleto",
                    columnaClase: "pagoColumna"
                },
                {
                    columnaUI: "Pasaporte del titular",
                    columnaIDV: "pasaporteTitular",
                    columnaClase: "pagoColumna"
                },
                {
                    columnaUI: "Correo del titular",
                    columnaIDV: "emailTitular",
                    columnaClase: "pagoColumna"
                },
                {
                    columnaUI: "Fecha de la reserva",
                    columnaIDV: "creacion",
                    columnaClase: "pagoColumna"
                },
            ]

            const parametros = {
                tipoConsulta: transaccion.tipoConsulta,
                tipoCoincidencia: transaccion.tipoCoincidencia,
                fechaEntrada: transaccion.fechaEntrada,
                fechaSalida: transaccion.fechaSalida,
                termino: transaccion.termino
            }
            if (consultaDeEntrada === "hoy") {
                parametros.tipoConsulta = "rango"
                parametros.tipoCoincidencia = tipoCoincidencia
                parametros.fechaEntrada = fechaEntrada
            }

            const dectectorBuscador = granuladoURL.directorios[granuladoURL.directorios.length - 1].toLowerCase()
            if (dectectorBuscador !== "buscador") {
                granuladoURL.directoriosFusion = granuladoURL.directoriosFusion + "/buscador"
            }

            const parametrosFinales = {}

            if (tipoConsulta === "porTerminos") {
                parametrosFinales.por_terminos = encodeURIComponent(termino);

            }
            if (tipoConsulta === "rango") {
                parametrosFinales.rango = tipoCoincidencia.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase()

                if (tipoCoincidencia === "cualquieraQueCoincida" || tipoCoincidencia === "soloDentroDelRango") {
                    parametrosFinales.fecha_entrada = fechaEntrada.replaceAll("/", "-")
                    parametrosFinales.fecha_salida = fechaSalida.replaceAll("/", "-")
                }

                if (tipoCoincidencia === "porFechaDeSalida") {
                    parametrosFinales.fecha_salida = fechaSalida.replaceAll("/", "-")
                }

                if (tipoCoincidencia === "porFechaDeEntrada") {
                    parametrosFinales.fecha_entrada = fechaEntrada.replaceAll("/", "-")
                }

            }

            if (paginaActual > 1 && paginasTotales > 1) {
                parametrosFinales.pagina = paginaActual
            }
            if (nombreColumna) {
                parametrosFinales.pagina = paginaActual
                parametrosFinales.nombre_columna = nombreColumna.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
                parametrosFinales.sentido_columna = sentidoColumna
            }
            const estructuraParametrosFinales = []
            for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                const estructura = `${parametroFinal}:${valorFinal}`
                estructuraParametrosFinales.push(estructura)
            }
            let parametrosURLFInal = ""
            if (estructuraParametrosFinales.length > 0) {
                parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
            }

            const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

            const metadatosGrid = {
                filas: reservas,
                sentidoColumna: sentidoColumna,
                nombreColumna: nombreColumna,
                tipoConstruccionGrid: tipoConstruccionGrid,
                buscar: buscar,
                pagina: paginaActual,
                destino: "[componente=espacioReservas]",
                columnasGrid: columnasGrid,
                gridUID: "gridReservas",
                numeroColumnas: 8,
                metodoColumna: "casaVitini.administracion.reservas.ordenarPorColumna",
                metodoFila: "casaVitini.administracion.reservas.resolverFila",
                mascaraHref: {
                    urlStatica: "/administracion/reservas/",
                    parametro: "reserva"
                },
                parametros: parametros,
                //mascaraURL: constructorURLFinal
            }

            casaVitini.componentes.ui.grid(metadatosGrid)
            const metadatosPaginador = {
                paginaActual: paginaActual,
                paginasTotales: paginasTotales,
                destino: "[componente=espacioReservas]",
                metodoBoton: "casaVitini.administracion.reservas.cambiarPagina",
                gridUID: "gridReservas",
                granuladoURL: {
                    parametros: parametrosFinales,
                    directoriosFusion: granuladoURL.directoriosFusion
                }
            }
            casaVitini.componentes.ui.paginador(metadatosPaginador)

            transaccion.tipoConstruccionGrid = "soloLista"

            const titulo = "ADminstar reservas"
            const estado = {
                zona: constructorURLFinal,
                EstadoInternoZona: "estado",
                tipoCambio: "parcial",
                conpontenteExistente: "navegacionZonaAdministracion",
                funcionPersonalizada: "casaVitini.administracion.reservas.mostrarReservasResueltas",
                datosPaginacion: transaccion
            }
            if (origen === "url" || origen === "botonMostrarReservas") {
                window.history.replaceState(estado, titulo, constructorURLFinal);
            }
            if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                window.history.pushState(estado, titulo, constructorURLFinal);
            }
            if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                window.history.replaceState(estado, titulo, constructorURLFinal);
            }


        },
        ordenarPorColumna: async (columna) => {
            const nombreColumna = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("nombreColumna")

            const selectorColumnasentido = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("sentidoColumna")
            const numeroPagina = columna.target.closest("[gridUID]").getAttribute("numeroPagina")
            let parametros = columna.target.closest("[gridUID]").getAttribute("parametros")
            parametros = parametros ? JSON.parse(parametros) : {}
            let sentidoColumna


            const transaccion = {
                zona: "administracion/reservas/listarReservas",
                pagina: Number(numeroPagina),
                tipoConstruccionGrid: "soloLista",
                origen: "tituloColumna"
            }
            if (selectorColumnasentido === "ascendente") {
                transaccion.sentidoColumna = "descendente"
                transaccion.nombreColumna = nombreColumna
            }
            if (!selectorColumnasentido) {
                transaccion.sentidoColumna = "ascendente"
                transaccion.nombreColumna = nombreColumna
            }

            for (const [parametro, valor] of Object.entries(parametros)) {
                transaccion[parametro] = valor
            }


            casaVitini.administracion.reservas.mostrarReservasResueltas(transaccion)
        },
        nuevaReserva: {

            arranque: () => {
                document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

                const selectorBotonesCalendario = [...document.querySelectorAll("[calendario]")]
                selectorBotonesCalendario.map((boton) => {
                    boton.addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.constructorCalendario)
                })
                document.querySelector("[componente=botonBuscarAlojamiento]").addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.buscarAlojamiento)
                document.querySelector("[componente=botonConfirmarReserva]").addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.confirmarReservaNueva)


            },
            constructorCalendario: async (boton) => {
                const botonID = boton.target.getAttribute("componente")
                let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                const instanciaUID = casaVitini.componentes.codigoFechaInstancia()
                const alturaDinamicaArriba = casaVitini.componentes.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton.target.closest("[componente]"))
                const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
                const calendario = document.querySelector("[contenedor=calendario]")

                if (botonID === "fechaEntrada") {
                    if (calendario?.getAttribute("calendarioIO") === "entrada") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        return
                    }
                    if (calendario?.getAttribute("calendarioIO") === "salida") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        // return
                    }
                    let resolucionCalendario
                    if (fechaEntradaSelecionda) {
                        const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")

                        let mesEntradaSeleccionado = fechaEntradaSelecionda_array[1]
                        let anoEntradaSeleccionado = fechaEntradaSelecionda_array[2]
                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesEntradaSeleccionado),
                            ano: Number(anoEntradaSeleccionado)
                        }
                    } else {
                        resolucionCalendario = {
                            tipo: "actual",
                            comando: "construyeObjeto"
                        }

                    }
                    const metadatosCalendario = {
                        tipoFecha: "entrada",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaEntradaAsistidoConPasadoCrearReserva",
                        calendarioIO: "entrada",
                        mensajeInfo: "Selecciona la fecha de entrada para esta reserva nueva",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                    calendarioResuelvo.instanciaUID = instanciaUID

                    await casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)

                }
                if (botonID === "fechaSalida") {
                    if (calendario?.getAttribute("calendarioIO") === "salida") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        return
                    }
                    if (calendario?.getAttribute("calendarioIO") === "entrada") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        //return

                    }
                    let resolucionCalendario

                    if (fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                        const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")

                        let mesEntradaSeleccionado = fechaEntradaSelecionda_array[1]
                        let anoEntradaSeleccionado = fechaEntradaSelecionda_array[2]
                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesEntradaSeleccionado),
                            ano: Number(anoEntradaSeleccionado)
                        }
                    }

                    if (fechaSalidaSelecionda) {
                        const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")


                        let mesSalidaSeleccionado = fechaSalidaSelecionda_array[1]
                        let anoSalidaSeleccionado = fechaSalidaSelecionda_array[2]
                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesSalidaSeleccionado),
                            ano: Number(anoSalidaSeleccionado)
                        }
                    }

                    if (!fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                        resolucionCalendario = {
                            tipo: "actual",
                            comando: "construyeObjeto"
                        }
                    }

                    let metadatosCalendario = {
                        tipoFecha: "salida",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaSalidaAsistidoConPasadoCrearReserva",
                        calendarioIO: "salida",
                        mensajeInfo: "Selecciona la fecha de salida para esta reserva nueva",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                    calendarioResuelvo.instanciaUID = instanciaUID

                    casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)


                }
            },
            seleccionarDia: (dia) => {
                let diaSeleccionadoComoElemento = dia.target;
                let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                let calendarioIO = calendario.getAttribute("calendarioIO")

                let diaSeleccionado = dia.target.getAttribute("dia")
                diaSeleccionado = diaSeleccionado.padStart(2, "0")
                diaSeleccionado = Number(diaSeleccionado)
                let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                anoSeleccionado = anoSeleccionado.padStart(4, "0")
                anoSeleccionado = Number(anoSeleccionado)
                let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                mesSeleccionado = mesSeleccionado.padStart(2, "0")
                mesSeleccionado = Number(mesSeleccionado)

                let fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                let selectorDias = [...document.querySelectorAll("[calendarioIO] [dia]")]
                selectorDias.map((dia) => {
                    // dia.classList.remove("calendarioDiaDisponible")
                    dia.classList.remove("calendarioDiaReserva")
                    dia.classList.remove("calendarioDiaSeleccionado")

                })
                if (diaSeleccionadoComoElemento.getAttribute("diaEstado") === "seleccionado") {
                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                        document.querySelector("[dataReserva=fechaEntrada]").innerText = "Seleccionar fecha de entrada"
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                        document.querySelector("[dataReserva=fechaSalida]").innerText = "Seleccionar fecha de salida"
                    }
                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                    diaSeleccionadoComoElemento.removeAttribute("diaEstado")

                    return
                }
                let diasDisponibles = [...document.querySelectorAll("[estado=disponible]")]
                diasDisponibles.map(diaDisponible => {
                    diaDisponible.removeAttribute("diaEstado")
                    diaDisponible.style.background = ""
                    diaDisponible.style.color = ""
                })

                diaSeleccionadoComoElemento.setAttribute("diaEstado", "seleccionado")
                diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")

                let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                let diaSeleccionadoEntrada
                let mesSeleccionadoEntrada
                let anoSeleccionadoEntrada
                if (fechaEntradaSelecionda) {
                    const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                    diaSeleccionadoEntrada = fechaEntradaSelecionda_array[0]
                    diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                    mesSeleccionadoEntrada = fechaEntradaSelecionda_array[1]
                    mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                    anoSeleccionadoEntrada = fechaEntradaSelecionda_array[2]
                    anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                    datosFechaEntradaSeleccionada = "existen"
                }

                let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                let diaSeleccionadoSalida
                let mesSeleccionadoSalida
                let anoSeleccionadoSalida
                if (fechaSalidaSelecionda) {
                    const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                    diaSeleccionadoSalida = fechaSalidaSelecionda_array[0]
                    diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                    mesSeleccionadoSalida = fechaSalidaSelecionda_array[1]
                    mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                    anoSeleccionadoSalida = fechaSalidaSelecionda_array[2]
                    anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                    datosFechaSalidaSeleccionada = "existen"
                }

                if (calendarioIO === "entrada") {
                    document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                    document.querySelector("[dataReserva=fechaEntrada]").innerText = fechaSeleccionadaUI
                    if (fechaSalidaSelecionda) {

                        if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                            selectorDias.map((dia) => {

                                if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {
                                    //  dia.classList.remove("calendarioDiaDisponible")
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        } else {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        }

                    }
                }

                if (calendarioIO === "salida") {
                    document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                    document.querySelector("[dataReserva=fechaSalida]").innerText = fechaSeleccionadaUI

                    if (fechaEntradaSelecionda) {

                        if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        } else {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        }

                    }
                }
            },
            buscarAlojamiento: async () => {

                try {
                    let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    if (fechaEntradaSelecionda) {
                        const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                        diaSeleccionadoEntrada = fechaEntradaSelecionda_array[0]
                        mesSeleccionadoEntrada = fechaEntradaSelecionda_array[1]
                        anoSeleccionadoEntrada = fechaEntradaSelecionda_array[2]


                    } else {
                        let error = "Selecciona una fecha de entrada"
                        return casaVitini.ui.vistas.advertenciaInmersiva(error)
                    }

                    let fechaSalidaSelecionda = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    if (fechaSalidaSelecionda) {
                        const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                        diaSeleccionadoSalida = fechaSalidaSelecionda_array[0]
                        mesSeleccionadoSalida = fechaSalidaSelecionda_array[1]
                        anoSeleccionadoSalida = fechaSalidaSelecionda_array[2]

                    } else {
                        let error = "Selecciona una fecha de salida"
                        return casaVitini.ui.vistas.advertenciaInmersiva(error)
                    }
                    document.querySelectorAll("[componente=advertenciaIntegrada]").forEach((advertenciaRenderizada) => {
                        advertenciaRenderizada.remove()
                    })



                    const selectorContenedorBoton = document.querySelector("[componente=espacioBotonConfirmarReserva]")
                    selectorContenedorBoton.classList.add("elementoOcultoInicialmente")

                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                    const selectorBloqueEspacioApartamentos = document.querySelector("[componente=espacioApartamento]")
                    selectorBloqueEspacioApartamentos.classList.remove("elementoOcultoInicialmente")
                    selectorBloqueEspacioApartamentos.setAttribute("instanciaUID", instanciaUID)
                    selectorBloqueEspacioApartamentos.innerHTML = null

                    const advertenciaInmersivaUI = document.createElement("div")
                    advertenciaInmersivaUI.setAttribute("class", "advertenciaIntegrada")
                    advertenciaInmersivaUI.setAttribute("pantallaSuperpuesta", "pantallaCargaSuperpuesta")
                    advertenciaInmersivaUI.setAttribute("componente", "advertenciaIntegrada")

                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElasticoError")

                    const spinnerContainer = document.createElement('div');
                    spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                    spinnerContainer.classList.add("lds-spinner");

                    for (let i = 0; i < 12; i++) {
                        const div = document.createElement('div');
                        spinnerContainer.appendChild(div);
                    }
                    marcoElastico.appendChild(spinnerContainer)

                    const info = document.createElement("div")
                    info.setAttribute("class", "advertenciaInfoFlujoPago")
                    info.setAttribute("componente", "mensajeFlujoPasarela")
                    info.innerText = "Buscando alojamiento..."
                    marcoElastico.appendChild(info)

                    const boton = document.createElement("div")
                    boton.setAttribute("class", "errorBoton")
                    boton.innerText = "Cancelar"
                    boton.addEventListener("click", (e) => {
                        selectorBloqueEspacioApartamentos.classList.add("elementoOcultoInicialmente")
                        selectorBloqueEspacioApartamentos.removeAttribute("instanciaUID")
                        e.target.closest("[componente=advertenciaIntegrada]").remove()
                    })

                    marcoElastico.appendChild(boton)
                    advertenciaInmersivaUI.appendChild(marcoElastico)
                    selectorBloqueEspacioApartamentos.appendChild(advertenciaInmersivaUI)



                    const fechaEntradaFormado = `${diaSeleccionadoEntrada.padStart(2, "0")}/${mesSeleccionadoEntrada.padStart(2, "0")}/${anoSeleccionadoEntrada}`
                    const fechaSalidaFormado = `${diaSeleccionadoSalida.padStart(2, "0")}/${mesSeleccionadoSalida.padStart(2, "0")}/${anoSeleccionadoSalida}`
                    const transaccion = {
                        zona: "administracion/reservas/apartamentosDisponiblesAdministracion",
                        entrada: fechaEntradaFormado,
                        salida: fechaSalidaFormado
                    }
                    console.log("transaccion", transaccion)

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }

                    if (respuestaServidor?.error) {
                        instanciaRenderizada.querySelector("[componente=advertenciaIntegrada]").remove()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const apartamenosDisponiblesArray = respuestaServidor?.ok.apartamentosDisponibles
                        if (apartamenosDisponiblesArray.length === 0) {
                            const infoNoDisponibilidad = document.createElement("div")
                            infoNoDisponibilidad.classList.add("adminitracion_reservas_crearReserva_infoSinAlojamiento")
                            infoNoDisponibilidad.innerText = "No hay ningún alojamiento disponible para las fechas seleccionadas. Eso es debido a reservas donde están estos apartamentos, bloqueos en estas fechas o configuraciones no disponibles."
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).innerHTML = null
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).appendChild(infoNoDisponibilidad)
                            return
                        }
                        selectorBloqueEspacioApartamentos.classList.remove("elementoOcultoInicialmente")

                        const transaccion2 = {
                            zona: "administracion/reservas/configuracionApartamento",
                            apartamentos: apartamenosDisponiblesArray
                        }
                        const configuracionApartamentos = await casaVitini.componentes.servidor(transaccion2)

                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) {
                            return
                        }
                        if (configuracionApartamentos.error) {
                            return casaVitini.ui.vistas.advertenciaInmersiva(configuracionApartamentos.error)
                        }
                        if (configuracionApartamentos.configuracionApartamento) {

                            const apartamentosDisponiblesUI = document.createElement("apartamentosDisponibles")
                            apartamentosDisponiblesUI.classList.add("espacioApartamentosDipsoniblesCrearReserva")
                            apartamentosDisponiblesUI.setAttribute("componente", "apartamentosDisponibles")

                            const configuraciones = configuracionApartamentos.configuracionApartamento


                            for (const [apartamentoIDV, configuracion] of Object.entries(configuraciones)) {
                                const apartamentoUI = configuracion.apartamentoUI
                                const habitaciones = configuracion.habitaciones

                                const bloqueApartamentoUI = document.createElement("div")
                                bloqueApartamentoUI.classList.add("bloqueApartamentoUI")
                                bloqueApartamentoUI.setAttribute("apartamentoIDV", apartamentoIDV)

                                const tituloApartamentoUI = document.createElement("p")
                                tituloApartamentoUI.classList.add("tituloApartamentoUI")
                                tituloApartamentoUI.innerText = apartamentoUI
                                bloqueApartamentoUI.appendChild(tituloApartamentoUI)

                                const bloqueHabiaciones = document.createElement("div")
                                bloqueHabiaciones.classList.add("bloqueHabiaciones")
                                bloqueApartamentoUI.appendChild(bloqueHabiaciones)

                                for (const [habitacionIDV, detallesHabitacion] of Object.entries(habitaciones)) {
                                    const tituloHabitacion = document.createElement("div")
                                    tituloHabitacion.classList.add("tituloHabitacion")
                                    tituloHabitacion.innerText = detallesHabitacion.habitacionUI
                                    bloqueHabiaciones.appendChild(tituloHabitacion)

                                }


                                const botonSeleccionarApartamento = document.createElement("div")
                                botonSeleccionarApartamento.classList.add("botonSeleccionarApartamento")
                                botonSeleccionarApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                botonSeleccionarApartamento.innerText = "Seleccionar " + apartamentoUI
                                botonSeleccionarApartamento.addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.seleccionarApartamento)
                                bloqueApartamentoUI.appendChild(botonSeleccionarApartamento)

                                apartamentosDisponiblesUI.appendChild(bloqueApartamentoUI)

                            }

                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).innerHTML = null
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).appendChild(apartamentosDisponiblesUI)
                        }


                    }
                } catch (error) {

                }

            },
            seleccionarApartamento: (apartamento) => {
                let selectorEspacioBotonConfimrar = document.querySelector("[componente=espacioBotonConfirmarReserva]")
                if (apartamento.target.getAttribute("estado")) {
                    apartamento.target.removeAttribute("style")
                    apartamento.target.removeAttribute("estado")
                    let contadorApartamentosSeleccionados = [...document.querySelectorAll("[estado=seleccionado]")]
                    if (contadorApartamentosSeleccionados.length > 0) {
                        selectorEspacioBotonConfimrar.classList.remove("elementoOcultoInicialmente")
                    } else {
                        selectorEspacioBotonConfimrar.classList.add("elementoOcultoInicialmente")
                    }
                    return
                }
                apartamento.target.style.background = "blue"
                apartamento.target.style.color = "white"
                apartamento.target.setAttribute("estado", "seleccionado")

                let contadorApartamentosSeleccionados = [...document.querySelectorAll("[estado=seleccionado]")]
                if (contadorApartamentosSeleccionados.length > 0) {
                    selectorEspacioBotonConfimrar.classList.remove("elementoOcultoInicialmente")
                } else {
                    selectorEspacioBotonConfimrar.classList.add("elementoOcultoInicialmente")
                }
            },
            confirmarReservaNueva: async () => {


                const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                const fechaEntrada_array = fechaEntrada.split("/")
                const diaEntrada = fechaEntrada_array[0].padStart(2, "0")
                const mesEntrada = fechaEntrada_array[1].padStart(2, "0")
                const anoEntrada = fechaEntrada_array[2]

                const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                const fechaSalida_array = fechaSalida.split("/")
                const diaSalida = fechaSalida_array[0].padStart(2, "0")
                const mesSalida = fechaSalida_array[1].padStart(2, "0")
                const anoSalida = fechaSalida_array[2]
                const apartamentos = []
                document.querySelectorAll("[estado=seleccionado]").forEach((apartamentoSeleccionado) => {
                    let apartamentoIDV = apartamentoSeleccionado.getAttribute("apartamentoIDV")
                    apartamentos.push(apartamentoIDV)
                })

                const instanciaUID = casaVitini.componentes.codigoFechaInstancia()
                const metadatosPantallaCarga = {
                    mensaje: "Creando reserva...",
                    instanciaUID: instanciaUID,
                }
                casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)


                const transaccion = {
                    zona: "administracion/reservas/crearReservaSimpleAdministrativa",
                    fechaEntrada: `${diaEntrada}/${mesEntrada}/${anoEntrada}`,
                    fechaSalida: `${diaSalida}/${mesSalida}/${anoSalida}`,
                    apartamentos: apartamentos
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (pantallaDeCargaRenderizada) {
                    if (respuestaServidor?.error) {
                        casaVitini.componentes.limpiarAdvertenciasInmersivas();
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const vista = `/administracion/reservas/${respuestaServidor?.reservaUID}`

                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.componentes.controladorVista(navegacion)
                    }
                }



            }
        },
        verReservasHoy: () => {
            const espacioReservas = document.querySelector("[componente=espacioReservas]")
            document.querySelector("[componente=estadoBusqueda]")?.remove()
            document.querySelector("[componenteID=gridReservas")?.remove()
            document.querySelector("[componenteID=navegacionPaginacion]")?.remove()

            casaVitini.administracion.reservas.limpiarFormularioBusqueda()

            const estadoBusquedaUI = document.createElement("div")
            estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
            estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
            estadoBusquedaUI.innerText = "Esperando al servidor..."
            espacioReservas.appendChild(estadoBusquedaUI)
            const peticion = {
                zona: "administracion/reservas/listarReservas",
                pagina: 1,
                tipoConsulta: "hoy",
                tipoConstruccionGrid: "total",
                origen: "url",
            }
            casaVitini.administracion.reservas.mostrarReservasResueltas(peticion)
        },
        mostrarReservasPorRango: () => {
            const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")

            const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
            const tipoRango = document.querySelector("[estadoSelecion=activado]")?.getAttribute("selectorRango")

            document.querySelector("[componente=estadoBusqueda]")?.remove()
            document.querySelector("[componenteID=navegacionPaginacion]")?.remove()

            const espacioReservas = document.querySelector("[componente=espacioReservas]")
            const estadoBusquedaUI = document.createElement("div")
            estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
            estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
            estadoBusquedaUI.innerText = "Buscando..."
            espacioReservas.appendChild(estadoBusquedaUI)

            const selectorCampoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
            selectorCampoBuscador.value = null

            const peticion = {
                zona: "administracion/reservas/listarReservas",
                pagina: 1,
                tipoConsulta: "rango",
                tipoCoincidencia: tipoRango,
                fechaEntrada: fechaEntrada,
                fechaSalida: fechaSalida,
                origen: "botonMostrarReservas",
                tipoConstruccionGrid: "total",
            }
            casaVitini.administracion.reservas.mostrarReservasResueltas(peticion)
        },
        buscadorReservas: (reserva) => {
            const espacioReservas = document.querySelector("[componente=marcoElastico]")
            clearTimeout(casaVitini.componentes.temporizador);
            document.querySelector("[componente=resultadosSinReservas]")?.remove()
            document.querySelector("[gridUID=gridReservas")?.remove()
            document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
            document.querySelector("[componente=estadoBusqueda]")?.remove()


            const estadoBusquedaUI = document.createElement("div")
            estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
            estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
            estadoBusquedaUI.innerText = "Buscando..."
            espacioReservas.appendChild(estadoBusquedaUI)

            casaVitini.administracion.reservas.limpiarFormularioBusqueda()

            const terminoBusqueda = reserva.target.value
            if (terminoBusqueda.length === 0) {
                clearTimeout(casaVitini.componentes.temporizador);
                document.querySelector("[gridUID=gridReservas")?.remove()
                document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                document.querySelector("[componente=estadoBusqueda]")?.remove()
                const vistaActual = document.getElementById("uiNavegacion").getAttribute("vistaActual")
                const resetUrl = "/administracion/reservas"
                const titulo = "casavitini"
                const estado = {
                    zona: vistaActual,
                    estadoInternoZona: "estado",
                    tipoCambio: "total"
                }

                window.history.replaceState(estado, titulo, resetUrl);
                return;
            }

            casaVitini.componentes.temporizador = setTimeout(() => {
                const peticion = {
                    zona: "administracion/reservas/listarReservas",
                    pagina: Number("1"),
                    tipoConsulta: "porTerminos",
                    termino: terminoBusqueda,
                    origen: "botonMostrarReservas",
                    tipoConstruccionGrid: "total"
                }

                casaVitini.administracion.reservas.mostrarReservasResueltas(peticion);
            }, 1500);
        },
        limpiarFormularioBusqueda: () => {
            const selectorCuadradoFechaEntrada = document.querySelector("[calendario=entrada]")
            const selectorFechaEntradaUI = selectorCuadradoFechaEntrada.querySelector("#fechaEntrada")
            const selectorCuadradoFechaSalida = document.querySelector("[calendario=salida]")
            const selectorFechaSalidaUI = selectorCuadradoFechaSalida.querySelector("#fechaSalida")
            selectorCuadradoFechaEntrada.removeAttribute("memoriaVolatil")
            selectorFechaEntradaUI.innerText = "Seleccionar"
            selectorCuadradoFechaSalida.removeAttribute("memoriaVolatil")
            selectorFechaSalidaUI.innerText = "Seleccionar"

            const selectorRangos = [...document.querySelectorAll(`[selectorRango]`)]
            selectorRangos.map((selectorRango) => {
                selectorRango.removeAttribute("style")
            })
        },
        resolverFila: (transaccion) => {
            transaccion.preventDefault()
            transaccion.stopPropagation()
            const href = transaccion.target.closest("[href]").getAttribute("href")
            const navegacion = {
                vista: href,
                tipoOrigen: "menuNavegador"

            }
            return casaVitini.componentes.controladorVista(navegacion)
        },
        detallesReserva: {
            abrirMenuReservas: (elementoBoton) => {
                //ocultarMenusVolatiles()
                const menuRenderizado = document.querySelector("[menuIDV=anadirApartamento]")
                if (menuRenderizado) {
                    casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                    return
                }
                casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()

                const alturaDinamica = window.scrollY + elementoBoton.target.getBoundingClientRect().bottom;
                const horizontalDinamico = elementoBoton.target.getBoundingClientRect().left;
                const anchoDinamico = elementoBoton.target.getBoundingClientRect().width;
                const menuIDV = elementoBoton.target.getAttribute("componenteBoton")
                const menuUI = document.createElement("div")
                menuUI.classList.add("administracion_reservas_detallesReservas_menuAnadirApartamento")
                menuUI.setAttribute("componente", "menuVolatil")
                menuUI.setAttribute("menuIDV", menuIDV)
                menuUI.innerText = null
                menuUI.innerText = "Cargando..."
                menuUI.style.top = (alturaDinamica + 4) + "px"
                menuUI.style.left = horizontalDinamico + "px"
                menuUI.style.width = anchoDinamico + "px"

                document.body.appendChild(menuUI)
                document.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles)

                if (typeof casaVitini.administracion.reservas.detallesReserva.menu[menuIDV] === "function") {
                    casaVitini.administracion.reservas.detallesReserva.menu[menuIDV](elementoBoton)
                } else {
                    const error = "Se esta llamando a una funcion que no existe"
                    casaVitini.ui.vistas.advertenciaInmersiva(error)
                }



            },
            menu: {
                "anadirApartamento": async (elementoBoton) => {

                    const menuID = elementoBoton.target.getAttribute("componenteBoton")

                    const fechaEntrada = document.querySelector("[dataReserva=fechaEntrada]").innerText
                    const fechaSalida = document.querySelector("[dataReserva=fechaSalida]").innerText
                    const menu = document.querySelector("[menuIDV=anadirApartamento]")

                    const transaccion = {
                        zona: "administracion/reservas/apartamentosDisponiblesAdministracion",
                        entrada: fechaEntrada,
                        salida: fechaSalida
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        const apartamentosDisponbiles = respuestaServidor?.ok.apartamentosDisponibles
                        const apartamentosNoDisponibles = respuestaServidor?.ok.apartamentosNoDisponibles

                        if (menu) {
                            menu.innerHTML = null
                        }


                        if (apartamentosDisponbiles.length > 0) {
                            const bloqueApartamentos = document.createElement("div")
                            bloqueApartamentos.classList.add("reservaDetalles_menu_apartamentosDipsonbiles")
                            const tituloApartamentoComponenteUIs = document.createElement("div")
                            tituloApartamentoComponenteUIs.classList.add("reservaDetalles_menu_titutloapartamentosDisponibles")
                            tituloApartamentoComponenteUIs.innerText = "Apartamentos disponibles"
                            bloqueApartamentos.appendChild(tituloApartamentoComponenteUIs)
                            for (const apartamento of apartamentosDisponbiles) {
                                const apartamentoUI = document.createElement("div")
                                apartamentoUI.classList.add("menuFlotanteOpcionAnadirApartamento")
                                apartamentoUI.innerText = apartamento
                                apartamentoUI.setAttribute("apartamentoIDVTemporal", apartamento)
                                apartamentoUI.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.anadirApartamento)
                                bloqueApartamentos.appendChild(apartamentoUI)
                            }
                            menu.appendChild(bloqueApartamentos)
                        }

                        if (apartamentosNoDisponibles.length > 0) {
                            const bloqueApartamentos = document.createElement("div")
                            bloqueApartamentos.classList.add("reservaDetalles_menu_apartamentosDipsonbiles")
                            const tituloApartamentoComponenteUIs = document.createElement("div")
                            tituloApartamentoComponenteUIs.classList.add("reservaDetalles_menu_titutloapartamentosDisponibles")
                            tituloApartamentoComponenteUIs.innerText = "Apartamentos no disponibles"
                            bloqueApartamentos.appendChild(tituloApartamentoComponenteUIs)
                            for (const apartamento of apartamentosNoDisponibles) {
                                let apartamentoUI = document.createElement("div")
                                apartamentoUI.classList.add("menuFlotanteOpcionAnadirApartamento")
                                apartamentoUI.innerText = apartamento
                                apartamentoUI.setAttribute("apartamentoDisponbile", apartamento)
                                //    apartamentoUI.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.menu.anadirApartamento)
                                bloqueApartamentos.appendChild(apartamentoUI)
                            }
                            menu.appendChild(bloqueApartamentos)
                        }
                    }
                },

            },
            transactor: {
                opcionesApartamento: async (apartamento) => {

                    const apartamentoIDV = apartamento.target.parentElement.getAttribute("apartamento")
                    const apartamentoUID = apartamento.target.parentElement.getAttribute("apartamentoUID")
                    const apartamentoUI = apartamento.target.innerText
                    const reserva = document.querySelector("[reserva]").getAttribute("reserva")

                    const selectorOpcionesApartamento = document.querySelector("[apartamentoOpciones='" + apartamentoIDV + "']")
                    if (selectorOpcionesApartamento) {
                        return casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()

                    }
                    casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles();
                    const alturaDinamica = window.scrollY + apartamento.target.getBoundingClientRect().bottom;
                    const horizontalDinamicoJerarquico = casaVitini.componentes.medirPorJerarquiaDom.horizontal(apartamento.target);

                    const anchoDinamico = apartamento.target.getBoundingClientRect().width;

                    const opcionesApartamento = document.createElement("div")
                    opcionesApartamento.classList.add("panelOpcionesCambioCama")
                    opcionesApartamento.setAttribute("componente", "menuVolatil")
                    opcionesApartamento.setAttribute("apartamentoOpciones", apartamentoIDV)
                    opcionesApartamento.style.top = (alturaDinamica + 4) + "px"
                    opcionesApartamento.style.left = (horizontalDinamicoJerarquico) + "px"
                    opcionesApartamento.style.width = anchoDinamico + "px"
                    opcionesApartamento.setAttribute("apartamentoUID_Menu", apartamentoUID)
                    let opcionApartamento
                    const transaccion = {
                        zona: "administracion/reservas/estadoHabitacionesApartamento",
                        reserva: Number(reserva),
                        apartamento: Number(apartamentoUID)

                    }


                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.ok) {

                        const habitacionesApartamento = respuestaServidor?.ok
                        if (habitacionesApartamento.length === 0) {

                            opcionApartamento = document.createElement("p")
                            opcionApartamento.classList.add("opcionCambioCama")
                            opcionApartamento.setAttribute("componente", "menuVolatil")
                            opcionApartamento.innerText = `Este apartamento tiene ya todas las habitaciones implementadas`
                            opcionesApartamento.appendChild(opcionApartamento)
                        }


                        if (habitacionesApartamento.length > 0) {
                            habitacionesApartamento.map((habitacion) => {
                                opcionApartamento = document.createElement("p")
                                opcionApartamento.classList.add("opcionCambioCama")
                                opcionApartamento.setAttribute("componente", "menuVolatil")
                                opcionApartamento.innerText = `Anadir habitacion a ${habitacion.habitacionUI}`
                                opcionApartamento.addEventListener("click", async () => {

                                    const transaccion = {
                                        zona: "administracion/reservas/anadirHabitacionAlApartamentoEnReserva",
                                        reserva: Number(reserva),
                                        apartamento: Number(apartamentoUID),
                                        habitacion: habitacion.habitacionIDV

                                    }
                                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                                    if (respuestaServidor?.error) {
                                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor.error)
                                    }

                                    if (respuestaServidor?.ok) {
                                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles();
                                        // Falta pasar este a donde los transactores!!!! ESTE


                                        let metadatos = {
                                            habitacionIDV: habitacion.habitacionIDV,
                                            habitacionUID: respuestaServidor?.nuevoUID,
                                            apartamentoIDV: apartamentoIDV
                                        }
                                        const bloqueHabitacionUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.habitacionUI(metadatos)
                                        metadatos = {
                                            "habitacionUI": habitacion.habitacionUI,
                                        }
                                        const nombreHabitacionUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.habitacionTituloUI(metadatos)
                                        bloqueHabitacionUI.appendChild(nombreHabitacionUI)

                                        metadatos = {
                                            camaIDV: null,
                                            camaUID: null,
                                            camaUI: "Sin cama asignada",
                                            apartamentoIDV: apartamentoIDV,
                                            habitacionIDV: habitacion.habitacionIDV,
                                            habitacionUID: respuestaServidor?.nuevoUID

                                        }
                                        const nombreCamaUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.camaUI(metadatos)
                                        bloqueHabitacionUI.appendChild(nombreCamaUI)
                                        document.querySelector(`[apartamentoUID="${apartamentoUID}"]`).appendChild(bloqueHabitacionUI)
                                    }

                                })
                                opcionesApartamento.appendChild(opcionApartamento)
                            })
                        }
                    }

                    opcionApartamento = document.createElement("p")
                    opcionApartamento.classList.add("opcionCambioCama")
                    opcionApartamento.setAttribute("componente", "menuVolatil")
                    opcionApartamento.innerText = `Eliminar ${apartamentoUI} y mantenerlo bloqueado en el rango de fechas de esta reserva`
                    //opcionApartamento.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.eliminarApartamento)
                    opcionApartamento.addEventListener("click", () => {
                        const datosPropuestaElimiacion = {
                            apartamentoUID: apartamentoUID,
                            apartamentoUI: apartamentoUI,
                            tipoBloqueo: "rangoTemporal"
                        }
                        casaVitini.administracion.reservas.detallesReserva.UIComponentes.propuestaEliminarApartamentoUI(datosPropuestaElimiacion)
                    })
                    opcionesApartamento.appendChild(opcionApartamento)

                    opcionApartamento = document.createElement("p")
                    opcionApartamento.classList.add("opcionCambioCama")
                    opcionApartamento.setAttribute("componente", "menuVolatil")
                    opcionApartamento.innerText = `Eliminar ${apartamentoUI} y liberarlo para que este disponible para reservar`
                    opcionApartamento.addEventListener("click", () => {
                        const datosPropuestaElimiacion = {
                            apartamentoUID: apartamentoUID,
                            apartamentoUI: apartamentoUI,
                            tipoBloqueo: "sinBloqueo"
                        }
                        casaVitini.administracion.reservas.detallesReserva.UIComponentes.propuestaEliminarApartamentoUI(datosPropuestaElimiacion)
                    })
                    opcionesApartamento.appendChild(opcionApartamento)

                    opcionApartamento = document.createElement("p")
                    opcionApartamento.classList.add("opcionCambioCama")
                    opcionApartamento.setAttribute("componente", "menuVolatil")
                    opcionApartamento.addEventListener("click", () => {
                        const datosPropuestaElimiacion = {
                            apartamentoUID: apartamentoUID,
                            apartamentoUI: apartamentoUI,
                            tipoBloqueo: "permanente"
                        }
                        casaVitini.administracion.reservas.detallesReserva.UIComponentes.propuestaEliminarApartamentoUI(datosPropuestaElimiacion)
                    })
                    opcionApartamento.innerText = `Eliminar ${apartamentoUI} y bloquearlo indefinidamente (debera liberarlo manualmente)`
                    opcionesApartamento.appendChild(opcionApartamento)

                    opcionApartamento = document.createElement("p")
                    opcionApartamento.classList.add("opcionCambioCama")
                    opcionApartamento.innerText = `Cerrar opciones de ${apartamentoUI}`
                    opcionesApartamento.appendChild(opcionApartamento)

                    document.querySelector("section:not([Estado=Obsoleto]").appendChild(opcionesApartamento)
                    document.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles)

                },
                anadirApartamento: async (apartamento) => {

                    const reserva = document.querySelector("[reserva]").getAttribute("reserva")
                    const apartamentoIDV = apartamento.target.getAttribute("apartamentoIDVTemporal")

                    const transaccion = {
                        zona: "administracion/reservas/anadirApartamentoReserva",
                        reserva: Number(reserva),
                        apartamento: apartamentoIDV
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()

                        let metadatos = {
                            apartamentoIDV: apartamentoIDV,
                            apartamentoUID: respuestaServidor?.nuevoUID,
                            apartamentoUI: respuestaServidor?.apartamentoUI
                        }
                        let apartamentoComponenteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.apatamentoUI(metadatos)
                        metadatos = {
                            apartamentoUI: respuestaServidor?.apartamentoUI
                        }
                        let tituloApartamentoComponenteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.apartamentoTituloUI(metadatos)
                        apartamentoComponenteUI.appendChild(tituloApartamentoComponenteUI)

                        let selectorEspacioAlojamiento = document.querySelector("[componente=contenedorIntermedioAlojamiento]")
                        if (!selectorEspacioAlojamiento) {
                            let selectorMarcoAlojameinto = document.querySelector("[componente=marcoAlojamiento]")
                            selectorMarcoAlojameinto.innerHTML = null

                            let contenedorAlojamientoUI = document.createElement("div")
                            contenedorAlojamientoUI.classList.add("administracionReservaDetallesBloqueContendioAlojamiento")
                            contenedorAlojamientoUI.setAttribute("componente", "contenedorIntermedioAlojamiento")

                            let espacioAlojamiento = document.createElement("div")
                            espacioAlojamiento.classList.add("reservasDetallesBloqueAlojamiennto")
                            espacioAlojamiento.setAttribute("componente", "espacioAlojamiento")
                            contenedorAlojamientoUI.appendChild(espacioAlojamiento)
                            selectorMarcoAlojameinto.appendChild(contenedorAlojamientoUI)
                        }

                        document.querySelector("[componente=espacioAlojamiento]").appendChild(apartamentoComponenteUI)
                        casaVitini.administracion.reservas.detallesReserva.transactor.controlEspacioAlojamiento()
                        return casaVitini.administracion.reservas.detallesReserva.calcularPrecioReserva()
                    }
                },
                eliminarApartamento: async (metadatos) => {
                    const reserva = document.querySelector("[reserva]").getAttribute("reserva")
                    const tipoBloqueo = metadatos.tipoBloqueo
                    const apartamentoUID = metadatos.apartamentoUID
                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()
                    const opcionesPantallaDeCarga = {
                        instanciaUID: instanciaUID,
                        mensaje: "Eliminando habitación..."
                    }
                    casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                    const pantallaDeCargaRenderizada = document
                        .querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUID}"]`)

                    const transaccion = {
                        zona: "administracion/reservas/eliminarApartamentoReserva",
                        reserva: Number(reserva),
                        apartamento: Number(apartamentoUID),
                        tipoBloqueo: tipoBloqueo
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                    pantallaDeCargaRenderizada?.remove()

                    if (!pantallaDeCargaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {

                        casaVitini.componentes.limpiarAdvertenciasInmersivas()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        casaVitini.componentes.limpiarAdvertenciasInmersivas()

                        const selectorPernoctantesHabitacion = [...document.querySelectorAll(`[apartamentoUID="${apartamentoUID}"] [pernoctanteUID]`)]
                        selectorPernoctantesHabitacion.map((pernoctanteSeleccionado) => {

                            const nombreCompleto = pernoctanteSeleccionado.querySelector("[componente=nombreCompleto]").innerText
                            const pasaporte = pernoctanteSeleccionado.querySelector("[componente=pasaporte]").innerText
                            const tipoCliente = pernoctanteSeleccionado.getAttribute("tipoCliente")
                            const pernoctanteUID = pernoctanteSeleccionado.getAttribute("pernoctanteUID")
                            const clienteUID = pernoctanteSeleccionado.getAttribute("clienteUID")
                            const fechaCheckIn = pernoctanteSeleccionado.getAttribute("fechaCheckIn")
                            const fechaCheckOut = pernoctanteSeleccionado.getAttribute("fechaCheckOut")

                            let metadatos = {
                                tipoPernoctante: tipoCliente,
                                clienteUID: clienteUID,
                                pernoctanteUID: pernoctanteUID,
                                estadoAlojamiento: "noAlojado",
                                fechaCheckIn: fechaCheckIn,
                                fechaCheckOutAdelantado: fechaCheckOut
                            }
                            let bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatos)
                            metadatos = {
                                nombreCompleto: nombreCompleto,
                            }
                            let nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatos)
                            bloquePernoctantes.appendChild(nombrePernoctante)

                            metadatos = {
                                pasaporte: pasaporte,
                            }

                            const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatos)
                            bloquePernoctantes.appendChild(identificacionPernoctante)
                            const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                            zonaDestino.appendChild(bloquePernoctantes)
                            zonaDestino.classList.remove("elementoOcultoInicialmente")
                        })

                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                        document.querySelector(`[apartamentoUID="${apartamentoUID}"]`).remove()
                        casaVitini.administracion.reservas.detallesReserva.transactor.controlEspacioAlojamiento()
                        casaVitini.administracion.reservas.detallesReserva.transactor.controlEspacioPernoctantesSinAlojamiento()

                    }


                    if (respuestaServidor?.estadoDesgloseFinanciero === "actualizar") {
                        casaVitini.administracion.reservas.detallesReserva.calcularPrecioReserva()
                    }
                },
                opcionesHabitacion: async (habitacion) => {

                    const habitacionIDV = habitacion.target.closest("[habitacionIDV]").getAttribute("habitacionIDV")
                    const habitacionUID = habitacion.target.closest("[habitacionUID]").getAttribute("habitacionUID")
                    const habitacionUI = habitacion.target.innerText
                    const apartamentoIDV = habitacion.target.closest("[apartamento]").getAttribute("apartamento")
                    const reserva = document.querySelector("[reserva]").getAttribute("reserva")

                    const selectorOpcionesHabitacion = document.querySelector("[apartamentoOpcionesHabitacion='" + apartamentoIDV + "'][habitacionOpciones='" + habitacionIDV + "']")
                    if (selectorOpcionesHabitacion) {
                        return casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles();

                    }
                    casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles();
                    const alturaDinamica = window.scrollY + habitacion.target.getBoundingClientRect().bottom;
                    const horizontalDinamicoJerarquico = casaVitini.componentes.medirPorJerarquiaDom.horizontal(habitacion.target);

                    const anchoDinamico = habitacion.target.getBoundingClientRect().width;

                    const opcionesHabitacion = document.createElement("div")
                    opcionesHabitacion.classList.add("panelOpcionesCambioCama")
                    opcionesHabitacion.setAttribute("componente", "menuVolatil")
                    opcionesHabitacion.style.top = (alturaDinamica + 4) + "px"
                    opcionesHabitacion.style.left = (horizontalDinamicoJerarquico) + "px"
                    opcionesHabitacion.style.width = anchoDinamico + "px"

                    let opcionHabitacion = document.createElement("p")
                    opcionHabitacion.classList.add("opcionCambioCama")
                    opcionHabitacion.innerText = `Anadir pernoctante en la ${habitacionUI}`
                    opcionHabitacion.addEventListener("click", () => {

                        const metadatosPernoctante = {
                            habitacionUID: habitacionUID,
                            origen: "habitacion"
                        }
                        casaVitini.administracion.reservas.detallesReserva.UIComponentes.anadirPernoctanteUI(metadatosPernoctante)
                    })
                    opcionesHabitacion.appendChild(opcionHabitacion)

                    opcionHabitacion = document.createElement("p")
                    opcionHabitacion.classList.add("opcionCambioCama")
                    opcionHabitacion.innerText = `Eliminar la ${habitacionUI} pero mantener los pernoctantes que contiene asignados a esta reserva`
                    opcionHabitacion.addEventListener("click", () => {
                        const datosEliminacion = {
                            opcionesPernoctantes: "conservar",
                            habitacionUID: habitacionUID
                        }
                        casaVitini.administracion.reservas.detallesReserva.UIComponentes.propuestaEliminarHabitacionUI(datosEliminacion)
                    })
                    opcionesHabitacion.appendChild(opcionHabitacion)

                    opcionHabitacion = document.createElement("p")
                    opcionHabitacion.classList.add("opcionCambioCama")
                    opcionHabitacion.innerText = `Eliminar la ${habitacionUI} y tambien los pernoctantes que contiene de la reserva`
                    opcionHabitacion.addEventListener("click", () => {
                        const datosEliminacion = {
                            opcionesPernoctantes: "eliminar",
                            habitacionUID: habitacionUID
                        }
                        casaVitini.administracion.reservas.detallesReserva.UIComponentes.propuestaEliminarHabitacionUI(datosEliminacion)
                    })
                    opcionesHabitacion.appendChild(opcionHabitacion)

                    opcionHabitacion = document.createElement("p")
                    opcionHabitacion.classList.add("opcionCambioCama")
                    opcionHabitacion.innerText = `Cerrar opciones de la ${habitacionUI}`
                    opcionesHabitacion.appendChild(opcionHabitacion)

                    document.querySelector("section:not([Estado=Obsoleto]").appendChild(opcionesHabitacion)
                    document.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles)


                },
                eliminarHabitacion: async (datosElimiacion) => {
                    const reserva = document.querySelector("[reserva]").getAttribute("reserva")
                    const habitacionUID = datosElimiacion.habitacionUID
                    const opcionPernoctantes = datosElimiacion.opcionPernoctantes

                    const instanciaUIDPantallaDeCarga = casaVitini.componentes.codigoFechaInstancia()
                    const opcionesPantallaDeCarga = {
                        instanciaUID: instanciaUIDPantallaDeCarga,
                        mensaje: "Eliminando habitación..."
                    }
                    casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                    const pantallaDeCargaRenderizada = document
                        .querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                    const transaccion = {
                        zona: "administracion/reservas/eliminarHabitacionReserva",
                        reserva: Number(reserva),
                        habitacion: Number(habitacionUID),
                        pernoctantes: opcionPernoctantes
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    pantallaDeCargaRenderizada?.remove()

                    if (respuestaServidor?.error) {
                        if (!pantallaDeCargaRenderizada) {
                            return
                        }
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        if (opcionPernoctantes === "eliminar") {
                            document.querySelector(`[habitacionUID="${habitacionUID}"]`)?.remove()
                        }
                        if (opcionPernoctantes === "conservar") {
                            const selectorPernoctantesHabitacion = document
                                .querySelectorAll(`[habitacionUID="${habitacionUID}"] [tipoCliente]`)
                            selectorPernoctantesHabitacion.forEach((pernoctanteSeleccionado) => {

                                const nombreCompleto = pernoctanteSeleccionado.querySelector("[componente=nombreCompleto]").innerText
                                const pasaporte = pernoctanteSeleccionado.querySelector("[componente=pasaporte]").innerText
                                const tipoCliente = pernoctanteSeleccionado.getAttribute("tipoCliente")
                                const pernoctanteUID = pernoctanteSeleccionado.getAttribute("pernoctanteUID")
                                const clienteUID = pernoctanteSeleccionado.getAttribute("clienteUID")
                                const fechaCheckIn = pernoctanteSeleccionado.getAttribute("fechaCheckIn")
                                const fechaCheckOut = pernoctanteSeleccionado.getAttribute("fechaCheckOut")


                                const datosPernoctante = {
                                    tipoPernoctante: tipoCliente,
                                    clienteUID: clienteUID,
                                    pernoctanteUID: pernoctanteUID,
                                    estadoAlojamiento: "noAlojado",
                                    fechaCheckIn: fechaCheckIn,
                                    fechaCheckOutAdelantado: fechaCheckOut
                                }
                                const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(datosPernoctante)
                                const datosNombre = {
                                    nombreCompleto: nombreCompleto,
                                }

                                const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(datosNombre)
                                bloquePernoctantes.appendChild(nombrePernoctante)

                                const datosPasaporte = {
                                    pasaporte: pasaporte,
                                }

                                const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(datosPasaporte)
                                bloquePernoctantes.appendChild(identificacionPernoctante)
                                if (document.querySelector("[reserva]").getAttribute("reserva") === reserva) {
                                    const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                    zonaDestino.appendChild(bloquePernoctantes)
                                }

                            })
                            document.querySelector(`[habitacionUID="${habitacionUID}"]`)?.remove()
                        }
                        casaVitini.administracion.reservas.detallesReserva.transactor.controlEspacioPernoctantesSinAlojamiento()
                    }
                },
                anadirCama: async (elementoCama, metadatos) => {
                    // Cuidado, por que en este caso, no hay una construcion del elemento, solo se sobreescribe le nombre y el UID, este transacto no es como los demas, acuerdate
                    const selectorOpcionesCamaRenderizado = document.querySelector("[apartamentoOpcionesCama='" + metadatos.apartamentoIDV + "'][habitacionOpcionesCama='" + metadatos.habitacionIDV + "']")
                    if (selectorOpcionesCamaRenderizado) {
                        return casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                    }
                    casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()

                    const alturaDinamica = window.scrollY + elementoCama.target.getBoundingClientRect().bottom;
                    const horizontalDinamico = elementoCama.target.offsetLeft;
                    const horizontalDinamicoJerarquico = casaVitini.componentes.medirPorJerarquiaDom.horizontal(elementoCama.target);

                    const anchoDinamico = elementoCama.target.getBoundingClientRect().width;

                    const opcionesCambioCama = document.createElement("div")
                    opcionesCambioCama.classList.add("panelOpcionesCambioCama")
                    opcionesCambioCama.setAttribute("componente", "menuVolatil")
                    opcionesCambioCama.setAttribute("apartamentoOpcionesCama", metadatos.apartamentoIDV)
                    opcionesCambioCama.setAttribute("habitacionOpcionesCama", metadatos.habitacionIDV)

                    opcionesCambioCama.innerText = "Cargando opciones..."
                    opcionesCambioCama.style.top = (alturaDinamica + 4) + "px"
                    opcionesCambioCama.style.left = (horizontalDinamicoJerarquico) + "px"
                    opcionesCambioCama.style.width = anchoDinamico + "px"

                    const transaccion = {
                        zona: "administracion/reservas/listarTipoCamasHabitacion",
                        apartamento: metadatos.apartamentoIDV,
                        habitacion: metadatos.habitacionIDV
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    opcionesCambioCama.innerText = null
                    respuestaServidor["camasDisponibles"].map(cama => {
                        const camaIDV = cama.cama
                        const camaUI = cama.camaUI

                        const tipoCama = document.createElement("p")
                        tipoCama.classList.add("opcionCambioCama")
                        tipoCama.setAttribute("componente", "opcionesCama")
                        tipoCama.setAttribute("camaIDV", camaIDV)

                        tipoCama.innerText = camaUI
                        tipoCama.addEventListener("click", async () => {
                            const reserva = document.querySelector("[reserva]").getAttribute("reserva")
                            const transaccion = {
                                zona: "administracion/reservas/cambiarCamaHabitacion",
                                reserva: Number(reserva),
                                habitacion: Number(metadatos.habitacionUID),
                                nuevaCama: camaIDV
                            }
                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                            if (respuestaServidor?.error) {
                                casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const nuevoUID = respuestaServidor?.nuevoUID

                                const selectorTituloCama = document.querySelector(`[habitacionUID="${metadatos.habitacionUID}"] [contenedor=camaUI]`)
                                selectorTituloCama.innerText = camaUI
                                selectorTituloCama.setAttribute("camaIDV", camaIDV)
                                if (nuevoUID) {
                                    selectorTituloCama.setAttribute("camaUID", nuevoUID)

                                }

                                return casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                            }


                        })




                        opcionesCambioCama.appendChild(tipoCama)

                    })
                    const botonCerrar = document.createElement("p")
                    botonCerrar.classList.add("opcionCambioCama")
                    //botonCerrar.setAttribute("componente", "opcionesCama")
                    //botonCerrar.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles)
                    botonCerrar.innerText = "Cerrar opciones de cama"
                    opcionesCambioCama.appendChild(botonCerrar)

                    document.querySelector("section:not([Estado=Obsoleto]").appendChild(opcionesCambioCama)
                    document.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles)









                },
                mostrasSelectorCambioPernoctanteHabitacion: (pernoctanteUID) => {
                    const habitacionActual = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)?.closest("[habitacionUID]")?.getAttribute("habitacionUID")
                    const selectorHabitaciones = [...document.querySelectorAll("[habitacionIDV]")]
                    document.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarSelectoresCambioHabitacion)
                    const selectorBotonAsignarAHabitacionRenderizado = document.querySelectorAll("[componente=botonMoverCliente]")
                    selectorBotonAsignarAHabitacionRenderizado.forEach(botonRenderizado => {
                        botonRenderizado.remove()
                    });
                    selectorHabitaciones.map((habitacion) => {
                        const habitacionUID = habitacion.getAttribute("habitacionUID")
                        if (habitacionUID !== habitacionActual) {
                            const bloqueSelectorCambio = casaVitini.administracion.reservas.detallesReserva.UIComponentes.selectorCambioHabitacionUI(pernoctanteUID)
                            habitacion.appendChild(bloqueSelectorCambio)
                        }
                    })
                },
                opcionesPernoctante: (pernoctante) => {
                    const pernoctanteElemento = pernoctante.target.closest("[pernoctanteUID]")
                    const pernoctanteUID = pernoctanteElemento.getAttribute("pernoctanteUID")
                    const clienteUID = pernoctanteElemento.getAttribute("clienteUID")

                    const menuYaRenderizado = document.querySelector(`[componente=menuVolatil][pernoctanteUID="${pernoctanteUID}"]`)
                    if (menuYaRenderizado) {
                        document.removeEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles)
                        return casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()

                    } else {
                        document.querySelectorAll("[componente=menuVolatil]").forEach((menuRenderizado) => {
                            menuRenderizado.remove()
                        })

                    }
                    const selectorOpcionesApartamento = document.querySelector(`[componente=menuVolatil][clienteUID="${clienteUID}"]`)
                    if (selectorOpcionesApartamento) {
                        return casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                    }
                    casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()

                    const alturaDinamica = window.scrollY + pernoctanteElemento.getBoundingClientRect().bottom;
                    const horizontalDinamicoJerarquico = casaVitini.componentes.medirPorJerarquiaDom.horizontal(pernoctanteElemento);

                    let tipoCliente = pernoctanteElemento.getAttribute("tipoCliente")
                    let bloqueCliente = pernoctanteElemento
                    const estadoAlojamiento = pernoctanteElemento.getAttribute("estadoAlojamiento")

                    if (!tipoCliente) {
                        tipoCliente = pernoctanteElemento.parentElement.getAttribute("tipoCliente")
                        bloqueCliente = pernoctanteElemento.parentElement

                    }
                    const opcionesClientePool = [...document.querySelectorAll("[componente=opcionesCliente]")]
                    opcionesClientePool.map((opcionClientePool) => {
                        opcionClientePool.parentElement.style.removeProperty("background")
                        opcionClientePool.remove()
                    })

                    const bloqueOpcionesCliente = document.createElement("div")
                    bloqueOpcionesCliente.classList.add("administracionReservasDetallesBloqueOpcionesCliente")
                    bloqueOpcionesCliente.setAttribute("contenedor", "opcionesCliente")
                    bloqueOpcionesCliente.setAttribute("componente", "menuVolatil")
                    bloqueOpcionesCliente.setAttribute("clienteUID", clienteUID)
                    bloqueOpcionesCliente.setAttribute("pernoctanteUID", pernoctanteUID)
                    bloqueOpcionesCliente.setAttribute("tipoCliente", tipoCliente)
                    bloqueOpcionesCliente.style.top = (alturaDinamica + 4) + "px"
                    bloqueOpcionesCliente.style.left = (horizontalDinamicoJerarquico + 4) + "px"

                    if (tipoCliente === "cliente" && estadoAlojamiento === "alojado") {
                        const selectorCheckIn = document
                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`).getAttribute("fechaCheckIn")

                        if (selectorCheckIn) {
                            const botonRealizarCheckin = document.createElement("div")
                            botonRealizarCheckin.classList.add("administracionReservasDetallesBotonOpcionCliente")
                            botonRealizarCheckin.setAttribute("componente", "botonOpcionClientePool")
                            botonRealizarCheckin.setAttribute("tipoEliminacion", "habitacion")
                            botonRealizarCheckin.innerText = "Modificar CheckIN"
                            botonRealizarCheckin.addEventListener("click", () => {
                                casaVitini.administracion.reservas.detallesReserva.UIComponentes.checkin.UI(pernoctanteUID)
                            })
                            bloqueOpcionesCliente.appendChild(botonRealizarCheckin)


                            const botonCheckOutAdelantado = document.createElement("div")
                            botonCheckOutAdelantado.classList.add("administracionReservasDetallesBotonOpcionCliente")
                            botonCheckOutAdelantado.setAttribute("componente", "botonOpcionClientePool")
                            botonCheckOutAdelantado.setAttribute("tipoEliminacion", "habitacion")
                            botonCheckOutAdelantado.innerText = "CheckOut Adelantado"
                            botonCheckOutAdelantado.addEventListener("click", () => {
                                casaVitini.administracion.reservas.detallesReserva.UIComponentes.checkout.UI(pernoctanteUID)
                            })
                            bloqueOpcionesCliente.appendChild(botonCheckOutAdelantado)
                        } else {
                            const botonRealizarCheckin = document.createElement("div")
                            botonRealizarCheckin.classList.add("administracionReservasDetallesBotonOpcionCliente")
                            botonRealizarCheckin.setAttribute("componente", "botonOpcionClientePool")
                            botonRealizarCheckin.innerText = "Realizar Checkin"
                            botonRealizarCheckin.addEventListener("click", () => {
                                casaVitini.administracion.reservas.detallesReserva.UIComponentes.checkin.UI(pernoctanteUID)
                            })
                            bloqueOpcionesCliente.appendChild(botonRealizarCheckin)
                        }





                        // Eliminar pernoctane de la habitacion
                        const botonOpcionCliente = document.createElement("div")
                        botonOpcionCliente.classList.add("administracionReservasDetallesBotonOpcionCliente")
                        botonOpcionCliente.setAttribute("componente", "botonOpcionClientePool")
                        botonOpcionCliente.innerText = "Eliminar pernoctante de la habitacion"
                        botonOpcionCliente.addEventListener("click", () => {
                            const datosEliminacion = {
                                tipoEliminacion: "habitacion",
                                pernoctanteUID: pernoctanteUID
                            }

                            casaVitini.administracion.reservas.detallesReserva.UIComponentes.propuestaEliminarPernoctanteUI(datosEliminacion)
                        })
                        bloqueOpcionesCliente.appendChild(botonOpcionCliente)

                    }

                    if (tipoCliente === "cliente") {
                        // Ir a detalles de clinete
                        botonOpcionCliente = document.createElement("a")
                        botonOpcionCliente.classList.add("administracionReservasDetallesBotonOpcionCliente")
                        botonOpcionCliente.setAttribute("vista", "/administracion/clientes/" + clienteUID)
                        botonOpcionCliente.setAttribute("href", "/administracion/clientes/" + clienteUID)
                        botonOpcionCliente.addEventListener("click", casaVitini.componentes.cambiarVista)
                        botonOpcionCliente.innerText = "Ir a detalles del cliente"
                        bloqueOpcionesCliente.appendChild(botonOpcionCliente)
                    }


                    if (tipoCliente === "clientePool") {
                        // Buscador rapido clinete
                        const campoBuscador = document.createElement("div")
                        campoBuscador.classList.add("administracion_reservas_detallesReservas_botonCheckIn")
                        campoBuscador.setAttribute("buscadorUID", "clientePoolCheckInAsociacion")
                        campoBuscador.innerText = "Verificar comprobación documental"
                        campoBuscador.setAttribute("componente", "buscadorRapido")
                        campoBuscador.addEventListener("click", () => {
                            casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.desplegarUI(pernoctanteUID)
                        })
                        bloqueOpcionesCliente.appendChild(campoBuscador)

                        // Crear cliente nuevo
                        let botonOpcionCliente = document.createElement("div")
                        botonOpcionCliente.classList.add("administracionReservasDetallesBotonOpcionCliente")
                        botonOpcionCliente.innerText = "Crear cliente nuevo"
                        botonOpcionCliente.setAttribute("origen", "opcionesClientePool")
                        botonOpcionCliente.setAttribute("componente", "botonOpcionClientePool")
                        botonOpcionCliente.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.UIComponentes.anadirPernoctanteUI)
                        //bloqueOpcionesCliente.appendChild(botonOpcionCliente)
                    }

                    if (estadoAlojamiento === "alojado") {

                        // Cambiar habitacion
                        botonOpcionCliente = document.createElement("div")
                        botonOpcionCliente.classList.add("administracionReservasDetallesBotonOpcionCliente")
                        botonOpcionCliente.innerText = "Cambiar de habitacion"
                        botonOpcionCliente.setAttribute("componente", "botonOpcionClientePool")
                        botonOpcionCliente.addEventListener("click", () => {
                            casaVitini.administracion.reservas.detallesReserva.transactor.mostrasSelectorCambioPernoctanteHabitacion(pernoctanteUID)
                        })
                        bloqueOpcionesCliente.appendChild(botonOpcionCliente)

                        // Eliminar pernoctane de la habitacion y de la reserva
                        botonOpcionCliente = document.createElement("div")
                        botonOpcionCliente.classList.add("administracionReservasDetallesBotonOpcionCliente")
                        botonOpcionCliente.setAttribute("componente", "botonOpcionClientePool")
                        botonOpcionCliente.innerText = "Eliminar pernoctante de la habitacion y de la reserva"
                        botonOpcionCliente.addEventListener("click", () => {
                            const datosEliminacion = {
                                tipoEliminacion: "reserva",
                                pernoctanteUID: pernoctanteUID
                            }
                            casaVitini.administracion.reservas.detallesReserva.UIComponentes.propuestaEliminarPernoctanteUI(datosEliminacion)
                        })


                        bloqueOpcionesCliente.appendChild(botonOpcionCliente)
                        ///

                    }
                    if (estadoAlojamiento === "noAlojado") {

                        // Cambiar habitacion
                        botonOpcionCliente = document.createElement("div")
                        botonOpcionCliente.classList.add("administracionReservasDetallesBotonOpcionCliente")
                        botonOpcionCliente.innerText = "Asignar a una habitacion"
                        botonOpcionCliente.setAttribute("componente", "botonOpcionClientePool")
                        botonOpcionCliente.addEventListener("click", () => {
                            casaVitini.administracion.reservas.detallesReserva.transactor.mostrasSelectorCambioPernoctanteHabitacion(pernoctanteUID)
                        })
                        bloqueOpcionesCliente.appendChild(botonOpcionCliente)

                        // Eliminar pernoctane de la habitacion y de la reserva
                        botonOpcionCliente = document.createElement("div")
                        botonOpcionCliente.classList.add("administracionReservasDetallesBotonOpcionCliente")
                        botonOpcionCliente.setAttribute("componente", "botonOpcionClientePool")
                        botonOpcionCliente.setAttribute("pernoctanteUID_", pernoctanteUID)
                        //botonOpcionCliente.setAttribute("nombreCompleto_", nombreCompleto)
                        botonOpcionCliente.setAttribute("clienteUID_", clienteUID)
                        //botonOpcionCliente.setAttribute("pasaporte_", pasaporte)
                        botonOpcionCliente.setAttribute("tipoEliminacion", "reserva")
                        botonOpcionCliente.innerText = "Eliminar pernoctancte de la reserva"
                        botonOpcionCliente.addEventListener("click", () => {
                            const datosEliminacion = {
                                tipoEliminacion: "reserva",
                                pernoctanteUID: pernoctanteUID
                            }
                            casaVitini.administracion.reservas.detallesReserva.UIComponentes.propuestaEliminarPernoctanteUI(datosEliminacion)
                        })
                        bloqueOpcionesCliente.appendChild(botonOpcionCliente)
                        ///
                    }

                    //Cerrar opciones del pernoctante
                    botonOpcionCliente = document.createElement("div")
                    botonOpcionCliente.classList.add("administracionReservasDetallesBotonOpcionCliente")
                    botonOpcionCliente.setAttribute("componente", "botonCerrarOpciones")
                    botonOpcionCliente.innerText = "Cerrar opciones del pernoctante"
                    botonOpcionCliente.addEventListener("click", (e) => {
                        e.stopPropagation()
                        let selectorFilasCliente = [...document.querySelectorAll("[componente=contenedorPernocanteHabitacion]")]
                        selectorFilasCliente.map((filaCliente) => {
                            filaCliente.style.removeProperty("background")
                        })

                        const selectorContenedoresOpcionCliente = [...document.querySelectorAll("[contenedor=opcionesCliente]")]

                        selectorContenedoresOpcionCliente.map((contenedor) => {
                            contenedor.remove()
                        })
                        document.querySelector("[componente=bloqueCalendario]")?.remove()
                    })
                    bloqueOpcionesCliente.appendChild(botonOpcionCliente)
                    document.querySelector("section:not([Estado=Obsoleto]").appendChild(bloqueOpcionesCliente)


                    document.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles)

                },
                cambiarPernoctanteHabitacion: async (pernoctanteUID, e) => {
                    const reserva = document.querySelector("[reserva]").getAttribute("reserva")
                    const habitacionUID = e.target.closest("[habitacionUID]").getAttribute("habitacionUID")

                    const pernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                    const clienteUID = pernoctante.getAttribute("clienteUID")
                    const tipoCliente = pernoctante.getAttribute("tipoCliente")
                    const nombrePernoctante = pernoctante.querySelector("[componente=nombreCompleto]").innerText
                    const pasaportePernoctante = pernoctante.querySelector(`[componente=pasaporte]`).innerText
                    const fechaCheckIn = pernoctante.getAttribute("fechaCheckIn")
                    const fechaCheckOutAdelantado = pernoctante.getAttribute("fechaCheckOut")

                    const transaccion = {
                        zona: "administracion/reservas/cambiarPernoctanteDeHabitacion",
                        reserva: Number(reserva),
                        habitacionDestino: Number(habitacionUID),
                        pernoctanteUID: Number(pernoctanteUID)
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        document.querySelectorAll("[componente=botonMoverCliente]").forEach(botonMover => {
                            botonMover.remove()
                        })
                        document.querySelectorAll("[componente=opcionesCliente]").forEach(opcionesCliente => {
                            opcionesCliente.remove()
                        })
                        document.querySelector("[pernoctanteUID='" + pernoctanteUID + "']")
                            .remove()

                        const datoPernoctante = {
                            tipoPernoctante: tipoCliente,
                            clienteUID: clienteUID,
                            pernoctanteUID: pernoctanteUID,
                            estadoAlojamiento: "alojado",
                            fechaCheckIn: fechaCheckIn,
                            fechaCheckOutAdelantado: fechaCheckOutAdelantado,

                        }
                        const bloqueClienteMover = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(datoPernoctante)

                        const datosNombre = {
                            "nombreCompleto": nombrePernoctante
                        }
                        const pernoctanteNombreUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(datosNombre)
                        bloqueClienteMover.appendChild(pernoctanteNombreUI)

                        const datosPasaporte = {
                            "pasaporte": pasaportePernoctante
                        }
                        const pernoctantePasaporteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(datosPasaporte)
                        bloqueClienteMover.appendChild(pernoctantePasaporteUI)

                        const selectorHabitacionDestino = document.querySelector("[habitacionUID='" + habitacionUID + "']")
                        selectorHabitacionDestino.appendChild(bloqueClienteMover)
                        casaVitini.administracion.reservas.detallesReserva.transactor.controlEspacioPernoctantesSinAlojamiento()

                    }
                },
                buscadorRapido: async (busqueda) => {

                    const termino = busqueda.termino
                    const instanciaUID = busqueda.instanciaUID

                    // const buscadorUI = busqueda.buscadorUID
                    const habitacionUID = busqueda.habitacionUID
                    const instanciaUID_anadirPernoctanteUI = busqueda.instanciaUID_anadirPernoctanteUI

                    const transaccion = {
                        zona: "administracion/clientes/buscar",
                        tipoBusqueda: "rapido",
                        buscar: termino
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    const selectorInstanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!selectorInstanciaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor.error)
                    }
                    const clientePoolID = busqueda.clientePoolID
                    const reservaID = document.querySelector("[reserva]").getAttribute("reserva")

                    const resultadosClientes = respuestaServidor?.clientes

                    const selectorBuscadorRapido = [...document.querySelectorAll("[componente=buscadorRapidoCliente]")]
                    selectorBuscadorRapido.map((buscadorRapidoRenderizado) => {
                        buscadorRapidoRenderizado.innerText = null
                    })
                    const buscadorRapidoRenderizado = document.querySelector("[componente=buscadorRapidoCliente]")

                    resultadosClientes.map((clienteEncontrado) => {
                        const clienteUID = clienteEncontrado.uid
                        const nombre = clienteEncontrado.nombre
                        const primerApellido = clienteEncontrado.primerApellido
                        const segundoApellido = clienteEncontrado.segundoApellido
                        const pasaporte = clienteEncontrado.pasaporte

                        const bloqueCliente = document.createElement("div")
                        bloqueCliente.classList.add("administracionReservaDetallesBuscadorRapidoBloqueCliente")
                        bloqueCliente.setAttribute("habitacionUID_resultadoBuscador", habitacionUID)
                        bloqueCliente.setAttribute("componente", "elementoResultadosBuscadorRapido")
                        bloqueCliente.addEventListener("click", () => {
                            const propuestaPernoctante = {
                                clienteUID: clienteUID,
                                nombre: nombre,
                                primerApellido: primerApellido,
                                segundoApellido: segundoApellido,
                                pasaporte: pasaporte,
                                habitacionUID: habitacionUID,
                                instanciaUID_anadirPernoctanteUI: instanciaUID_anadirPernoctanteUI

                            }
                            casaVitini.administracion.reservas.detallesReserva.UIComponentes.propuestaAnadirPernoctanteUI(propuestaPernoctante)
                        })
                        bloqueCliente.addEventListener("click", () => {
                            const selectorListasBuscadorRapidoRenderizadas = document.querySelectorAll("[componente=buscadorRapidoCliente]")
                            selectorListasBuscadorRapidoRenderizadas.forEach((listaRenderizada) => {
                                listaRenderizada.remove()
                            })
                        })


                        let filaNombre = document.createElement("p")
                        filaNombre.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaNombre")
                        filaNombre.innerText = `${nombre} ${primerApellido} ${segundoApellido}`
                        filaNombre.setAttribute("componente", "elementoResultadosBuscadorRapido")
                        bloqueCliente.appendChild(filaNombre)

                        let filaPasaporte = document.createElement("p")
                        filaPasaporte.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaPasaporte")
                        filaPasaporte.innerText = pasaporte
                        filaPasaporte.setAttribute("componente", "elementoResultadosBuscadorRapido")
                        bloqueCliente.appendChild(filaPasaporte)

                        buscadorRapidoRenderizado.appendChild(bloqueCliente)
                    })

                },
                anadirPernoctante: async (cliente) => {

                    const reserva = document.querySelector("[reserva]").getAttribute("reserva")
                    const clienteUID = cliente.clienteUID
                    const habitacionUID = cliente.habitacionUID
                    const nombre = cliente.nombre
                    const primerApellido = cliente.primerApellido
                    const segundoApellido = cliente.segundoApellido
                    const pasaporte = cliente.pasaporte
                    const instanciaUID_anadirPernoctanteUI = cliente.instanciaUID_anadirPernoctanteUI
                    const transaccion = {
                        zona: "administracion/reservas/anadirPernoctanteHabitacion",
                        reserva: Number(reserva),
                        clienteUID: Number(clienteUID),
                        habitacionUID: Number(habitacionUID)
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        const nuevoUID = respuestaServidor?.nuevoUID
                        let metadatos = {
                            tipoPernoctante: "cliente",
                            clienteUID: clienteUID,
                            pernoctanteUID: nuevoUID,
                            estadoAlojamiento: "alojado"
                        }
                        const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatos)
                        metadatos = {
                            nombreCompleto: `${nombre} ${primerApellido} ${segundoApellido}`,
                            clienteUID: clienteUID,
                        }

                        const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatos)
                        bloquePernoctantes.appendChild(nombrePernoctante)

                        metadatos = {
                            pasaporte: pasaporte,
                            clienteUID: clienteUID
                        }
                        const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatos)
                        bloquePernoctantes.appendChild(identificacionPernoctante)

                        const selectorBloqueAnadirPernoctante = document.querySelector(`[instanciaUID="${instanciaUID_anadirPernoctanteUI}"]`)
                        selectorBloqueAnadirPernoctante.remove()
                        const habitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                        habitacionDestino.appendChild(bloquePernoctantes)

                    }

                },
                eliminarPernoctante: async (metadatos) => {
                    const reserva = document.querySelector("[reserva]").getAttribute("reserva")

                    const pernoctanteUID = metadatos.pernoctanteUID
                    const pernoctante = document
                        .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                    const tipoPernoctante = pernoctante.getAttribute("tipoCliente")
                    const tipoEliminacion = metadatos.tipoEliminacion
                    const clienteUID = pernoctante.getAttribute("clienteUID")
                    const nombreCompleto = pernoctante.querySelector("[componente=nombreCompleto]").innerText
                    const pasaporte = pernoctante.querySelector("[componente=pasaporte]").innerHTML
                    const fechaCheckIn = pernoctante.getAttribute("fechaCheckIn")
                    const fechaCheckOut = pernoctante.getAttribute("fechaCheckOut")

                    const instanciaUIDPantallaDeCarga = casaVitini.componentes.codigoFechaInstancia()
                    const transaccion = {
                        zona: "administracion/reservas/eliminarPernoctanteReserva",
                        reserva: Number(reserva),
                        pernoctanteUID: Number(pernoctanteUID),
                        tipoEliminacion: tipoEliminacion
                    }

                    casaVitini.componentes.limpiarAdvertenciasInmersivas()

                    const metadatosPantallaCarga = {
                        mensaje: "Esperando al servidor...",
                        instanciaUID: instanciaUIDPantallaDeCarga,
                    }
                    casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                    const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUIDPantallaDeCarga}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                    selectorPantallaDeCarga.map((pantalla) => {
                        pantalla.remove()
                    })

                    if (respuestaServidor?.error) {
                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        if (tipoEliminacion === "habitacion") {

                            const metadatosPernoctante = {
                                tipoPernoctante: "cliente",
                                clienteUID: clienteUID,
                                pernoctanteUID: pernoctanteUID,
                                tipoPernoctante: tipoPernoctante,
                                estadoAlojamiento: "noAlojado",
                                fechaCheckIn: fechaCheckIn,
                                fechaCheckOutAdelantado: fechaCheckOut
                            }

                            const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatosPernoctante)
                            const metadatosNombre = {
                                nombreCompleto: nombreCompleto,
                                clienteUID: clienteUID,
                            }

                            const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatosNombre)
                            bloquePernoctantes.appendChild(nombrePernoctante)

                            const metadatosPasaporte = {
                                pasaporte: pasaporte,
                                clienteUID: clienteUID
                            }
                            const selectorPernoctanteRenderizado = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            selectorPernoctanteRenderizado.remove()

                            const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatosPasaporte)
                            bloquePernoctantes.appendChild(identificacionPernoctante)

                            const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                            zonaDestino.appendChild(bloquePernoctantes)
                            zonaDestino.classList.remove("elementoOcultoInicialmente")


                        }

                        if (tipoEliminacion === "reserva") {
                            const selectorPernoctanteRenderizado = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            selectorPernoctanteRenderizado.remove()
                        }

                        casaVitini.administracion.reservas.detallesReserva.transactor.controlEspacioPernoctantesSinAlojamiento()

                    }






                },

                ocultarMenusVolatiles: (menuVolatil) => {
                    const selectorMenuDesplegable = menuVolatil?.target.closest("[componente=menuDesplegable]")
                    const selectorMenuVolatil = menuVolatil?.target.closest("[componente=menuVolatil]")

                    if (selectorMenuDesplegable) {
                        return
                    }
                    document.removeEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles)

                    const selectorMenusVolatiles = document.querySelectorAll("[componente=menuVolatil]")
                    selectorMenusVolatiles.forEach((menuVolatilRenderizado) => {
                        menuVolatilRenderizado.remove()
                    })


                    const selectoresErrorUI = [...document.querySelectorAll("[componente=errorUI]")]
                    selectoresErrorUI.map((errorUI) => {
                        errorUI.remove()
                        document.removeEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles)
                    })

                },
                ocultarSelectoresCambioHabitacion: (e) => {
                    const componente = e.target?.getAttribute("componente")
                    if (componente === "botonOpcionClientePool") {
                        return
                    }
                    const selectorBotonMoverCliente = [...document.querySelectorAll("[componente=botonMoverCliente]")]
                    selectorBotonMoverCliente.map(selectorBotonMoverCliente => {
                        selectorBotonMoverCliente.remove()
                    })
                    document.removeEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.ocultarSelectoresCambioHabitacion)

                },
                controlEspacioAlojamiento: () => {

                    const selectorMarcoAlojameinto = document.querySelector("[componente=marcoAlojamiento]")

                    const selectorApartamentos = [...document.querySelectorAll("[componente=marcoAlojamiento] [apartamento]")]
                    if (selectorApartamentos.length > 0) {
                        document.querySelector("[componente=infoSinAlojamiento]")?.remove()
                    } else {
                        const infoNoAlojamiento = document.createElement("div")
                        infoNoAlojamiento.classList.add("reservas_detalles_infoDesgloseNo")
                        infoNoAlojamiento.setAttribute("componente", "infoSinAlojamiento")
                        infoNoAlojamiento.innerText = "Esta reserva no contiene ningun apartamento"
                        selectorMarcoAlojameinto.appendChild(infoNoAlojamiento)
                    }

                },
                controlEspacioPernoctantesSinAlojamiento: () => {
                    const selectorMarcoPernoctantesSinAlojamiento = document.querySelector("[componente=espacioPernoctantesSinAlojamiento]")
                    const selectorPernoctantes = [...selectorMarcoPernoctantesSinAlojamiento.querySelectorAll("[contenedor=pernoctante]")]
                    if (selectorPernoctantes.length > 0) {
                        selectorMarcoPernoctantesSinAlojamiento.classList.remove("elementoOcultoInicialmente")
                    } else {
                        selectorMarcoPernoctantesSinAlojamiento.classList.add("elementoOcultoInicialmente")
                    }
                },
                guardarNuevoClienteYAnadirloComoPernoctnante: async (habitacionUID) => {
                    const reserva = document.querySelector("[reserva]").getAttribute("reserva")
                    const campos = [...document.querySelectorAll(`[habitacionUID="${habitacionUID}"] [formulario=AnadirPernoctante]`)]

                    const transaccion = {
                        zona: "administracion/reservas/crearClienteDesdeReservaYAnadirloAreserva",
                        reserva: Number(reserva),
                        habitacionUID: Number(habitacionUID)
                    }
                    campos.map((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const datoCampo = campo.value
                        transaccion[nombreCampo] = datoCampo
                    })
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const selectorAnadirPernoctanteRedenrizada = document.querySelector(`[habitacionUID="${habitacionUID}"] [componente=anadirPernoctanteUI]`)
                        selectorAnadirPernoctanteRedenrizada?.remove()

                        let metadatos = {
                            tipoPernoctante: "cliente",
                            clienteUID: respuestaServidor?.nuevoUIDCliente,
                            pernoctanteUID: respuestaServidor?.nuevoUIDPernoctante,
                            estadoAlojamiento: "alojado"
                        }

                        const pernoctanteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatos)

                        const primerApellido = transaccion.primerApellido ? transaccion.primerApellido : ""
                        const segundoApellido = transaccion.segundoApellido ? transaccion.segundoApellido : ""

                        metadatos = {
                            clienteUID: respuestaServidor?.nuevoUIDCliente,
                            nombreCompleto: `${transaccion?.nombre} ${primerApellido} ${segundoApellido}`
                        }

                        const pernoctanteNombreUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatos)

                        metadatos = {
                            clienteUID: respuestaServidor?.nuevoUIDCliente,
                            pasaporte: transaccion.pasaporte
                        }
                        const pernoctantePasaporteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatos)

                        pernoctanteUI.appendChild(pernoctanteNombreUI)
                        pernoctanteUI.appendChild(pernoctantePasaporteUI)
                        const selectorHabitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                        selectorHabitacionDestino.appendChild(pernoctanteUI)
                    }

                },
            },
            UIComponentes: {
                apatamentoUI: (metadatos) => {
                    const apartamento = document.createElement("div")
                    apartamento.classList.add("adminitracionReservasDetallesBloqueApartamento")
                    apartamento.setAttribute("apartamento", metadatos.apartamentoIDV)
                    apartamento.setAttribute("apartamentoUID", metadatos.apartamentoUID)
                    apartamento.setAttribute("apartamentoUI", metadatos.apartamentoUI)
                    return apartamento
                },
                apartamentoTituloUI: (metadatos) => {

                    const apartamentoTitulo = document.createElement("div")
                    apartamentoTitulo.classList.add("administracionReservasDetallesTituloApartamento")
                    apartamentoTitulo.setAttribute("componente", "menuDesplegable")
                    apartamentoTitulo.innerText = metadatos.apartamentoUI
                    apartamentoTitulo.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.opcionesApartamento)
                    return apartamentoTitulo
                },
                habitacionUI: (metadatos) => {
                    const habitacionUI = document.createElement("div")
                    habitacionUI.classList.add("adminitracionReservasDetallesBloqueHabitacion")
                    habitacionUI.setAttribute("habitacionIDV", metadatos.habitacionIDV)
                    habitacionUI.setAttribute("habitacionUID", metadatos.habitacionUID)
                    habitacionUI.setAttribute("apartamento", metadatos.apartamentoIDV)
                    return habitacionUI
                },
                habitacionTituloUI: (metadatos) => {
                    const habitacionTituloUI = document.createElement("div")
                    habitacionTituloUI.classList.add("adminitracionReservasDetallesTituloHabitacion")
                    habitacionTituloUI.setAttribute("componente", "menuDesplegable")
                    habitacionTituloUI.setAttribute("habitacionUI", metadatos.habitacionUI)
                    habitacionTituloUI.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.opcionesHabitacion)
                    habitacionTituloUI.innerText = metadatos.habitacionUI
                    return habitacionTituloUI
                },
                camaUI: (metadatos) => {
                    const camaUI = document.createElement("div")
                    camaUI.classList.add("adminitracionReservasDetallesTituloTipoCama")
                    camaUI.setAttribute("contenedor", "camaUI")
                    camaUI.setAttribute("componente", "menuDesplegable")
                    camaUI.innerText = metadatos.camaUI
                    camaUI.addEventListener("click", (elementoCama) => {
                        const metadatos_ = {
                            camaIDV: metadatos.camaIDV,
                            apartamentoIDV: metadatos.apartamentoIDV,
                            habitacionIDV: metadatos.habitacionIDV,
                            habitacionUID: metadatos.habitacionUID
                        }
                        casaVitini.administracion.reservas.detallesReserva.transactor.anadirCama(elementoCama, metadatos_)
                    })
                    return camaUI
                },
                pernoctanteUI: (metadatos) => {
                    const estadoAlojamiento = metadatos.estadoAlojamiento
                    const tipoPernoctante = metadatos.tipoPernoctante
                    const fechaCheckIn = metadatos.fechaCheckIn
                    const fechaCheckOutAdelantado = metadatos.fechaCheckOutAdelantado
                    const clienteUID = metadatos.clienteUID
                    const pernoctanteUID = metadatos.pernoctanteUID

                    const pernoctanteUI = document.createElement("div")

                    if (estadoAlojamiento === "alojado") {
                        pernoctanteUI.classList.add("adminitracionReservasDetallesBloquePernoctantes")
                    }
                    if (estadoAlojamiento === "noAlojado") {
                        pernoctanteUI.classList.add("adminitracionReservasDetallesBloquePernoctantesNoAlojado")
                    }
                    pernoctanteUI.setAttribute("tipoCliente", tipoPernoctante)
                    pernoctanteUI.setAttribute("estadoAlojamiento", estadoAlojamiento)
                    pernoctanteUI.setAttribute("componente", "contenedorPernocanteHabitacion")
                    pernoctanteUI.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.opcionesPernoctante)
                    pernoctanteUI.setAttribute("clienteUID", clienteUID)
                    pernoctanteUI.setAttribute("contenedor", "pernoctante")
                    pernoctanteUI.setAttribute("componente", "menuDesplegable")
                    pernoctanteUI.setAttribute("pernoctanteUID", pernoctanteUID)

                    if (tipoPernoctante === "clientePool") {
                        const tipoPernoctanteUI = document.createElement("div")
                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloPendienteComprobacion")
                        tipoPernoctanteUI.classList.add("parpadea")
                        tipoPernoctanteUI.setAttribute("componente", "pendienteComprobacion")
                        tipoPernoctanteUI.innerText = "Pendiente de comprobación documental"
                        pernoctanteUI.appendChild(tipoPernoctanteUI)
                    }
                    if (tipoPernoctante === "cliente") {
                        if (!fechaCheckIn) {
                            const tipoPernoctanteUI = document.createElement("div")
                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                            //tipoPernoctanteUI.classList.add("parpadea")
                            tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                            tipoPernoctanteUI.innerText = "Pendiente de checkin"
                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                        } else {
                            pernoctanteUI.setAttribute("fechaCheckIn", fechaCheckIn)

                            const tipoPernoctanteUI = document.createElement("div")
                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                            //tipoPernoctanteUI.classList.add("parpadea")
                            tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                            tipoPernoctanteUI.innerText = "> " + fechaCheckIn
                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                        }

                        if (fechaCheckOutAdelantado) {
                            pernoctanteUI.setAttribute("fechaCheckOut", fechaCheckOutAdelantado)

                            const tipoPernoctanteUI = document.createElement("div")
                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                            tipoPernoctanteUI.classList.add("letraRoja")
                            tipoPernoctanteUI.setAttribute("componente", "checkOutInfo")
                            tipoPernoctanteUI.innerText = "< " + fechaCheckOutAdelantado
                            pernoctanteUI.appendChild(tipoPernoctanteUI)

                        } else {
                            const tipoPernoctanteUI = document.createElement("div")
                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                            tipoPernoctanteUI.classList.add("letraRoja")
                            tipoPernoctanteUI.style.display = "none"
                            tipoPernoctanteUI.setAttribute("componente", "checkOutInfo")
                            // tipoPernoctanteUI.innerText = "< " + fechaCheckOutAdelantado
                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                        }
                    }
                    return pernoctanteUI
                },
                pernoctanteNombreUI: (metadatos) => {
                    const pernoctanteNombreUI = document.createElement("div")
                    pernoctanteNombreUI.classList.add("adminitracionReservasDetallesNombrePernoctante")
                    pernoctanteNombreUI.setAttribute("componente", "nombreCompleto")
                    pernoctanteNombreUI.innerText = metadatos.nombreCompleto
                    return pernoctanteNombreUI

                },
                pernoctantePasaporteUI: (metadatos) => {

                    const pernoctantePasaporteUI = document.createElement("div")
                    pernoctantePasaporteUI.classList.add("adminitracionReservasDetallesIdentificacionPernoctante")
                    pernoctantePasaporteUI.setAttribute("componente", "pasaporte")
                    pernoctantePasaporteUI.innerText = metadatos.pasaporte
                    return pernoctantePasaporteUI

                },
                selectorCambioHabitacionUI: (pernoctanteUID) => {

                    const selectorCambioHabitacionUI = document.createElement("div")
                    selectorCambioHabitacionUI.classList.add("reservaDetallesCambioPernoctante")
                    selectorCambioHabitacionUI.classList.add("parpadea")
                    selectorCambioHabitacionUI.setAttribute("componente", "botonMoverCliente")
                    selectorCambioHabitacionUI.innerText = "Cambiar aquí al pernoctante seleccionado"
                    selectorCambioHabitacionUI.addEventListener("click", (e) => {
                        casaVitini.administracion.reservas.detallesReserva.transactor.cambiarPernoctanteHabitacion(pernoctanteUID, e)
                    })
                    return selectorCambioHabitacionUI
                },
                buscadorRapidoUI: (termino) => {

                    const alturaDinamica = window.scrollY + termino.target.getBoundingClientRect().bottom;
                    const horizontalDinamico = casaVitini.componentes.medirPorJerarquiaDom.horizontal(termino.target.closest("[buscadoruid=anadirClienteExitente]"))
                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                    const anchoDinamico = termino.target.getBoundingClientRect().width;
                    //const clientePoolID = termino.target.closest("[clientePoolID]").getAttribute("clientePoolID")

                    const buscadorUI = termino.target.getAttribute("buscadorUID")
                    const habitacionUID = termino.target.closest("[habitacionUID]").getAttribute("habitacionUID")
                    const instanciaUID_anadirPernoctanteUI = termino.target.closest("[instanciaUID]").getAttribute("instanciaUID")


                    const selectorBuscadorRapido = [...document.querySelectorAll("[componente=buscadorRapidoCliente]")]
                    selectorBuscadorRapido.map((buscadorRapidoRenderizado) => {
                        buscadorRapidoRenderizado.remove()
                    })
                    const terminoBusqueda = termino.target.value
                    const campoVacio = termino.target.value.length
                    if (campoVacio === 0) {
                        clearTimeout(casaVitini.componentes.temporizador);
                        return;
                    }
                    const resultadosBusqueda = document.createElement("div")
                    resultadosBusqueda.setAttribute("componente", "buscadorRapidoCliente")
                    resultadosBusqueda.setAttribute("instanciaUID", instanciaUID)
                    resultadosBusqueda.classList.add("administracionReservaDetallesBuscadorRapidoCliente")
                    resultadosBusqueda.style.top = (alturaDinamica + 4) + "px"
                    resultadosBusqueda.style.left = (horizontalDinamico) + "px"
                    resultadosBusqueda.style.width = anchoDinamico + "px"
                    resultadosBusqueda.innerText = null
                    resultadosBusqueda.addEventListener("mousedown", (e) => {
                        if (e.target.closest("[componente]").getAttribute("componente") === "elementoResultadosBuscadorRapido") {
                            e.preventDefault()
                        }
                    })

                    const mensajeBuscando = document.createElement("div")
                    mensajeBuscando.classList.add("administracion_reservas_detallesReserva_infoBuscadorRapido")
                    mensajeBuscando.innerText = "Buscando..."
                    resultadosBusqueda.appendChild(mensajeBuscando)

                    const seccion = document.querySelector("section:not([estado=obsoleto])")
                    seccion.appendChild(resultadosBusqueda)
                    clearTimeout(casaVitini.componentes.temporizador);
                    casaVitini.componentes.temporizador = setTimeout(() => {
                        const busqueda = {
                            termino: terminoBusqueda,
                            instanciaUID: instanciaUID,
                            //buscadorUI: buscadorUI,
                            habitacionUID: habitacionUID,
                            //clientePoolID: clientePoolID
                            instanciaUID_anadirPernoctanteUI: instanciaUID_anadirPernoctanteUI
                        }
                        casaVitini.administracion.reservas.detallesReserva.transactor.buscadorRapido(busqueda)
                    }, 1500);
                },
                anadirPernoctanteUI: (habitacion) => {
                    const habitacionUID = habitacion.habitacionUID
                    const origen = habitacion.origen
                    //const pernoctanteUID = habitacion.target.closest("[pernoctanteUID]")?.getAttribute("pernoctanteUID")
                    const selectorHabitacionActual = document.querySelector(`[habitacionUID="${habitacionUID}"]`).querySelector("[componente=anadirPernoctanteUI]")
                    casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()

                    if (selectorHabitacionActual) {
                        return
                    }

                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                    if (origen === "habitacion") {
                        const selectorAnadirPernoctaneUIRendenrizado = document.querySelector(`[habitacionUI_anadirPernoctante="${habitacionUID}"]`)
                        if (selectorAnadirPernoctaneUIRendenrizado) {
                            return casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                        }
                    }
                    if (origen === "opcionesClientePool") {
                        // const selectorAnadirPernoctaneUIRendenrizado = document.querySelector(`[pernoctanteUID_opcionesClientePool="${pernoctanteUID}"]`)
                        // if (selectorAnadirPernoctaneUIRendenrizado) {
                        // return casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                        // }
                    }

                    const buscadorRapidoClienteUI = document.createElement("div")
                    buscadorRapidoClienteUI.classList.add("buscadorClienteRapidoInsertar")
                    buscadorRapidoClienteUI.setAttribute("instanciaUID", instanciaUID)
                    if (origen === "habitacion") {
                        // buscadorRapidoClienteUI.setAttribute("habitacionUI_anadirPernoctante", habitacionUID)
                    }
                    if (origen === "opcionesClientePool") {
                        //   buscadorRapidoClienteUI.setAttribute("pernoctanteUID_opcionesClientePool", pernoctanteUID)
                    }
                    buscadorRapidoClienteUI.setAttribute("componente", "anadirPernoctanteUI")

                    const campoBuscadorClienteRapido = document.createElement("input")
                    campoBuscadorClienteRapido.classList.add("administracionReservasDetallesCampoBuscadorClientePorBuscador")

                    campoBuscadorClienteRapido.setAttribute("buscadorUID", "anadirClienteExitente")
                    campoBuscadorClienteRapido.placeholder = "Buscar cliente existente para anadirlo"
                    campoBuscadorClienteRapido.addEventListener("input", casaVitini.administracion.reservas.detallesReserva.UIComponentes.buscadorRapidoUI)
                    campoBuscadorClienteRapido.addEventListener("blur", () => {
                        clearTimeout(casaVitini.componentes.temporizador);
                        let selectorBuscadorRapido = [...document.querySelectorAll("[componente=buscadorRapidoCliente]")]
                        selectorBuscadorRapido.map((buscadorRapidoRenderizado) => {
                            buscadorRapidoRenderizado.remove()
                        })

                    })

                    campoBuscadorClienteRapido.addEventListener("focus", casaVitini.administracion.reservas.detallesReserva.UIComponentes.buscadorRapidoUI)

                    if (origen === "habitacion") {
                        buscadorRapidoClienteUI.appendChild(campoBuscadorClienteRapido)
                    }


                    let nuevoClienteUI = document.createElement("div")
                    nuevoClienteUI.classList.add("nuevoClienteUI")

                    let info = document.createElement("p")
                    info.classList.add("nuevoClienteUIInfo")
                    info.innerText = "Crear nuevo pernoctante"

                    let campoNombre = document.createElement("input")
                    campoNombre.classList.add("administracionReservasDetallesCampoBuscadorCliente")
                    campoNombre.setAttribute("campo", "nombre")
                    campoNombre.setAttribute("formulario", "AnadirPernoctante")
                    campoNombre.placeholder = "Nombre (obligatiorio)"
                    buscadorRapidoClienteUI.appendChild(campoNombre)

                    let primerApellido = document.createElement("input")
                    primerApellido.classList.add("administracionReservasDetallesCampoBuscadorCliente")
                    primerApellido.setAttribute("campo", "primerApelliado")
                    primerApellido.setAttribute("formulario", "AnadirPernoctante")
                    primerApellido.placeholder = "Primer apellido"
                    buscadorRapidoClienteUI.appendChild(primerApellido)

                    let segundoApellido = document.createElement("input")
                    segundoApellido.classList.add("administracionReservasDetallesCampoBuscadorCliente")
                    segundoApellido.setAttribute("campo", "segundoApellido")
                    segundoApellido.setAttribute("formulario", "AnadirPernoctante")
                    segundoApellido.placeholder = "Segundo apellido"
                    buscadorRapidoClienteUI.appendChild(segundoApellido)

                    let pasaporte = document.createElement("input")
                    pasaporte.classList.add("administracionReservasDetallesCampoBuscadorCliente")
                    pasaporte.setAttribute("campo", "pasaporte")
                    pasaporte.setAttribute("formulario", "AnadirPernoctante")
                    pasaporte.placeholder = "Pasaporte (obligatorio)"
                    buscadorRapidoClienteUI.appendChild(pasaporte)

                    let telefono = document.createElement("input")
                    telefono.classList.add("administracionReservasDetallesCampoBuscadorCliente")
                    telefono.setAttribute("campo", "telefono")
                    telefono.setAttribute("formulario", "AnadirPernoctante")
                    telefono.placeholder = "Telefono"
                    buscadorRapidoClienteUI.appendChild(telefono)

                    let correoElecotronico = document.createElement("input")
                    correoElecotronico.classList.add("administracionReservasDetallesCampoBuscadorCliente")
                    correoElecotronico.setAttribute("campo", "correoElectronico")
                    correoElecotronico.setAttribute("formulario", "AnadirPernoctante")
                    correoElecotronico.placeholder = "Correo electronico"
                    buscadorRapidoClienteUI.appendChild(correoElecotronico)

                    let botonGuardarNuevoCliente = document.createElement("div")
                    botonGuardarNuevoCliente.classList.add("botonCancelarBuscadoRapidoInsertar")
                    botonGuardarNuevoCliente.innerText = "Guardar nuevo cliente y añadirlo a esta habitación"

                    if (origen === "habitacion") {
                        botonGuardarNuevoCliente.addEventListener("click", () => {
                            casaVitini.administracion.reservas.detallesReserva.transactor.guardarNuevoClienteYAnadirloComoPernoctnante(habitacionUID)
                        })
                    }
                    buscadorRapidoClienteUI.appendChild(botonGuardarNuevoCliente)

                    //buscadorRapidoClienteUI.appendChild(nuevoClienteUI)

                    let botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("botonCancelarBuscadoRapidoInsertar")
                    botonCancelar.innerText = "Cancelar"
                    if (origen === "habitacion") {
                        botonCancelar.addEventListener("click", (e) => {
                            e.target.parentNode.remove()
                        })
                    }
                    if (origen === "opcionesClientePool") {
                        botonCancelar.addEventListener("click", (e) => {
                            e.stopPropagation()
                            e.target.parentNode.remove()
                        })

                    }
                    buscadorRapidoClienteUI.appendChild(botonCancelar)

                    if (origen === "habitacion") {
                        let selectorHabitacion = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                        selectorHabitacion.appendChild(buscadorRapidoClienteUI)
                    }
                    if (origen === "opcionesClientePool") {
                        const selectorOpcionesClientePoolRenderizado = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"][contenedor=opcionesCliente]`)
                        //  selectorOpcionesClientePoolRenderizado.remove()
                        let selectorClientePoolRenderizado = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                        selectorClientePoolRenderizado.appendChild(buscadorRapidoClienteUI)
                    }
                },
                "propuestaCambioPernoctanteUI": (propuesta) => {


                    let clienteUID = propuesta.target.getAttribute("clienteUID")
                    let clientePoolUID = propuesta.target.getAttribute("clientePoolUID")
                    let nombreUI = propuesta.target.getAttribute("nombreUI")
                    let primerApellidoUI = propuesta.target.getAttribute("primerApellidoUI")
                    let segundoApellidoUI = propuesta.target.getAttribute("segundoApellidoUI")
                    let pasaporte = propuesta.target.getAttribute("pasaporte")


                    let bloquePropuestaCambio = document.createElement("div")
                    bloquePropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePool")
                    bloquePropuestaCambio.setAttribute("componente", "contenedorPropuestaCliente")

                    let tituloPropuestaCambio = document.createElement("p")
                    tituloPropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePoolTitulo")
                    tituloPropuestaCambio.setAttribute("componente", "tituloCambioPropuesta")
                    tituloPropuestaCambio.innerText = "¿Confirmas la propuesta seleccionada?"
                    bloquePropuestaCambio.appendChild(tituloPropuestaCambio)

                    let nombreCompletoPropuesta = document.createElement("p")
                    nombreCompletoPropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolnombreCompletoPropuesta")
                    nombreCompletoPropuesta.setAttribute("componente", "nombrePropuesto")
                    nombreCompletoPropuesta.innerText = `${nombreUI} ${primerApellidoUI} ${segundoApellidoUI}`
                    bloquePropuestaCambio.appendChild(nombreCompletoPropuesta)

                    let pasaportePropuesta = document.createElement("p")
                    pasaportePropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolpasaportePropuesta")
                    pasaportePropuesta.innerText = pasaporte
                    bloquePropuestaCambio.appendChild(pasaportePropuesta)

                    let botonOpcionesCliente = document.createElement("p")
                    botonOpcionesCliente.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonOpcionesCliente.setAttribute("componente", "botonConfirmarPropuesta")
                    botonOpcionesCliente.setAttribute("clienteUID_", clienteUID)
                    botonOpcionesCliente.setAttribute("clientePoolUID", clientePoolUID)
                    botonOpcionesCliente.setAttribute("nombreUI", nombreUI)
                    botonOpcionesCliente.setAttribute("primerApellidoUI", primerApellidoUI)
                    botonOpcionesCliente.setAttribute("segundoApellidoUI", segundoApellidoUI)
                    botonOpcionesCliente.setAttribute("pasaporte", pasaporte)

                    botonOpcionesCliente.innerText = "Confirmar"
                    botonOpcionesCliente.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.transactor.confirmarPropuestaCambioCliente)
                    bloquePropuestaCambio.appendChild(botonOpcionesCliente)

                    botonOpcionesCliente = document.createElement("p")
                    botonOpcionesCliente.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonOpcionesCliente.setAttribute("componente", "botonCancelarPropuesta")
                    botonOpcionesCliente.innerText = "Cancelar"
                    botonOpcionesCliente.addEventListener("click", () => {

                        let selectorContenedoresPropuesta = [...document.querySelectorAll("[componente=contenedorPropuestaCliente]")]
                        selectorContenedoresPropuesta.map((contenedorPropueda) => {
                            contenedorPropueda.remove()
                        })
                        document.querySelector("[componente=buscadorRapido]").style.removeProperty("display")
                        let selectorComponentesOcultables = [...document.querySelectorAll("[componente=botonOpcionClientePool]")]
                        selectorComponentesOcultables.map((elementoOcultable) => {
                            elementoOcultable.style.removeProperty("display")
                        })
                    })
                    bloquePropuestaCambio.appendChild(botonOpcionesCliente)


                    document.querySelector("[componente=buscadorRapido]").style.display = "none"
                    let selectorComponentesOcultables = [...document.querySelectorAll("[componente=botonOpcionClientePool]")]
                    selectorComponentesOcultables.map((elementoOcultable) => {
                        elementoOcultable.style.display = "none"
                    })
                    let selectorPasaporte = document.querySelector("[componente=opcionesCliente]")
                    let botonCerrar = document.querySelector("[componente=botonCerrarOpciones]")
                    selectorPasaporte.insertBefore(bloquePropuestaCambio, botonCerrar);







                },
                propuestaAnadirPernoctanteUI: (propuesta) => {

                    //let clientePoolUID = propuesta.target.getAttribute("clientePoolUID")

                    const clienteUID = propuesta.clienteUID
                    const nombre = propuesta.nombre
                    const primerApellido = propuesta.primerApellido
                    const segundoApellido = propuesta.segundoApellido
                    const pasaporte = propuesta.pasaporte
                    const habitacionUID = propuesta.habitacionUID
                    const instanciaUID_anadirPernoctanteUI = propuesta.instanciaUID_anadirPernoctanteUI

                    const bloquePropuestaCambio = document.createElement("div")
                    bloquePropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePool")
                    bloquePropuestaCambio.setAttribute("componente", "contenedorPropuestaCliente")

                    const tituloPropuestaCambio = document.createElement("p")
                    tituloPropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePoolTitulo")
                    tituloPropuestaCambio.setAttribute("componente", "tituloCambioPropuesta")
                    tituloPropuestaCambio.innerText = "¿Confirmas anadir este cliente a esta habitacion?"
                    bloquePropuestaCambio.appendChild(tituloPropuestaCambio)

                    const nombreCompletoPropuesta = document.createElement("p")
                    nombreCompletoPropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolnombreCompletoPropuesta")
                    nombreCompletoPropuesta.setAttribute("componente", "nombrePropuesto")
                    nombreCompletoPropuesta.innerText = `${nombre} ${primerApellido} ${segundoApellido}`
                    bloquePropuestaCambio.appendChild(nombreCompletoPropuesta)

                    const pasaportePropuesta = document.createElement("p")
                    pasaportePropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolpasaportePropuesta")
                    pasaportePropuesta.innerText = pasaporte
                    bloquePropuestaCambio.appendChild(pasaportePropuesta)

                    const botonOpcionesCliente = document.createElement("p")
                    botonOpcionesCliente.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonOpcionesCliente.setAttribute("componente", "botonConfirmarPropuesta")
                    botonOpcionesCliente.innerText = "Confirmar2"
                    botonOpcionesCliente.addEventListener("click", () => {
                        const pernoctancte = {
                            clienteUID: clienteUID,
                            nombre: nombre,
                            primerApellido: primerApellido,
                            segundoApellido: segundoApellido,
                            habitacionUID: habitacionUID,
                            pasaporte: pasaporte,
                            instanciaUID_anadirPernoctanteUI: instanciaUID_anadirPernoctanteUI
                        }
                        casaVitini.administracion.reservas.detallesReserva.transactor.anadirPernoctante(pernoctancte)
                    })
                    bloquePropuestaCambio.appendChild(botonOpcionesCliente)

                    const botonCancelar = document.createElement("p")
                    botonCancelar.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonCancelar.setAttribute("componente", "botonCancelarPropuesta")
                    botonCancelar.innerText = "Cancelar 2"
                    botonCancelar.addEventListener("click", () => {
                        const selectorComponentesOcultables = [...document.querySelectorAll("[componente=anadirPernoctanteUI]")]
                        selectorComponentesOcultables.map((elementoOcultable) => {
                            elementoOcultable.remove()
                        })
                    })
                    bloquePropuestaCambio.appendChild(botonCancelar)


                    //document.querySelector("[componente=buscadorRapido]").style.display = "none"
                    const selectorComponentesOcultables = [...document.querySelectorAll("[componente=botonOpcionClientePool]")]
                    selectorComponentesOcultables.map((elementoOcultable) => {
                        elementoOcultable.style.display = "none"
                    })

                    const selectorBuscadorCliente = document.querySelector(`[instanciaUID="${instanciaUID_anadirPernoctanteUI}"]`)
                    //selectorPasaporte.insertBefore(bloquePropuestaCambio, botonCerrar);
                    selectorBuscadorCliente.innerHTML = null
                    selectorBuscadorCliente.appendChild(bloquePropuestaCambio)


                },
                propuestaEliminarPernoctanteUI: (datosEliminacion) => {


                    const tipoEliminacion = datosEliminacion.tipoEliminacion
                    const pernoctanteUID = datosEliminacion.pernoctanteUID


                    const nombreCompleto = document
                        .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                        .querySelector("[componente=nombreCompleto]")
                        .innerText
                    const pasaporte = document
                        .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                        .querySelector("[componente=pasaporte]")
                        .innerText
                    let mensajeUI
                    if (tipoEliminacion === "habitacion") {
                        mensajeUI = "Confirmas la eliminacion de este pernoctante de la habitacion pero no de la reserva. Este pernoctante pasara a la seccion de pernoctantes asociados a la reserva pero sin alojamiento asignado"
                    }
                    if (tipoEliminacion === "reserva") {
                        mensajeUI = "¿Confirmas la eliminación de este pernoctante de la reserva?"
                    }
                    document.body.style.overflow = 'hidden';

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")

                    const bloquePropuestaCambio = document.createElement("div")
                    bloquePropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePool")
                    bloquePropuestaCambio.setAttribute("componente", "contenedorPropuestaCliente")

                    const tituloPropuestaCambio = document.createElement("p")
                    tituloPropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePoolTitulo")
                    tituloPropuestaCambio.setAttribute("componente", "tituloCambioPropuesta")
                    tituloPropuestaCambio.innerText = mensajeUI
                    bloquePropuestaCambio.appendChild(tituloPropuestaCambio)

                    const nombreCompletoPropuesta = document.createElement("p")
                    nombreCompletoPropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolnombreCompletoPropuesta")
                    nombreCompletoPropuesta.setAttribute("componente", "nombrePropuesto")
                    nombreCompletoPropuesta.innerText = nombreCompleto
                    bloquePropuestaCambio.appendChild(nombreCompletoPropuesta)

                    const pasaportePropuesta = document.createElement("p")
                    pasaportePropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolpasaportePropuesta")
                    pasaportePropuesta.innerText = pasaporte
                    bloquePropuestaCambio.appendChild(pasaportePropuesta)

                    let botonOpcionesCliente = document.createElement("p")
                    botonOpcionesCliente.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonOpcionesCliente.setAttribute("componente", "botonConfirmarPropuesta")
                    let botonMenajeUI
                    if (tipoEliminacion === "habitacion") {
                        botonMenajeUI = "Eliminar de la habitacion"
                    }
                    if (tipoEliminacion === "reserva") {
                        botonMenajeUI = "Eliminar de la reserva"
                    }
                    botonOpcionesCliente.innerText = botonMenajeUI
                    botonOpcionesCliente.addEventListener("click", () => {
                        const metadatosTipoEliminacion = {
                            pernoctanteUID: pernoctanteUID,
                            tipoEliminacion: tipoEliminacion
                        }
                        casaVitini.administracion.reservas.detallesReserva.transactor.eliminarPernoctante(metadatosTipoEliminacion)
                    })
                    bloquePropuestaCambio.appendChild(botonOpcionesCliente)

                    botonOpcionesCliente = document.createElement("p")
                    botonOpcionesCliente.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonOpcionesCliente.setAttribute("componente", "botonCancelarPropuesta")
                    botonOpcionesCliente.innerText = "Cancelar"
                    botonOpcionesCliente.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                    bloquePropuestaCambio.appendChild(botonOpcionesCliente)

                    //document.querySelector("[componente=buscadorRapido]").style.display = "none"
                    const selectorComponentesOcultables = [...document.querySelectorAll("[componente=contenedorPropuestaCliente]")]
                    selectorComponentesOcultables.map((elementoOcultable) => {
                        elementoOcultable.style.display = "none"
                    })

                    contenidoAdvertenciaInmersiva.appendChild(bloquePropuestaCambio)
                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)

                    document.body.appendChild(advertenciaInmersivaIU)

                },
                propuestaEliminarHabitacionUI: (datosEliminacion) => {


                    const opcionPernoctantes = datosEliminacion.opcionesPernoctantes
                    const habitacionUID = datosEliminacion.habitacionUID
                    const habitacionUI = document
                        .querySelector(`[habitacionUID="${habitacionUID}"]`)
                        .querySelector("[habitacionUI]")
                        .getAttribute("habitacionUI")
                    let mensajeUI
                    if (opcionPernoctantes === "conservar") {
                        mensajeUI = `¿Confirmas eliminar la ${habitacionUI} pero conservar los pernoctantes de esta habitación en la reserva?`
                    }
                    if (opcionPernoctantes === "eliminar") {
                        mensajeUI = `¿Confirmas eliminar la ${habitacionUI} junto con los pernoctantes que contiene de la reserva?`
                    }
                    document.body.style.overflow = 'hidden';

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("contenedor", "opcionesCancelacion")

                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                    contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")


                    const bloquePropuestaCambio = document.createElement("div")
                    bloquePropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePool")
                    bloquePropuestaCambio.setAttribute("componente", "contenedorPropuestaCliente")

                    const tituloPropuestaCambio = document.createElement("p")
                    tituloPropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePoolTitulo")
                    tituloPropuestaCambio.setAttribute("componente", "tituloCambioPropuesta")
                    tituloPropuestaCambio.innerText = mensajeUI
                    bloquePropuestaCambio.appendChild(tituloPropuestaCambio)

                    let botonOpcionesCliente = document.createElement("p")
                    botonOpcionesCliente.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonOpcionesCliente.setAttribute("componente", "botonConfirmarPropuesta")
                    let botonMenajeUI
                    if (opcionPernoctantes === "eliminar") {
                        botonMenajeUI = `Eliminar la ${habitacionUI} de la reserva y sus pernoctantes`
                    }
                    if (opcionPernoctantes === "conservar") {
                        botonMenajeUI = `Eliminar la ${habitacionUI} de la reserva pero conservar a sus pernoctantes en la reserva`
                    }
                    botonOpcionesCliente.innerText = botonMenajeUI
                    botonOpcionesCliente.addEventListener("click", () => {
                        casaVitini.componentes.limpiarAdvertenciasInmersivas()
                        const datosEliminacion = {
                            habitacionUID: habitacionUID,
                            opcionPernoctantes: opcionPernoctantes,
                        }
                        casaVitini.administracion.reservas.detallesReserva.transactor.eliminarHabitacion(datosEliminacion)
                    })
                    bloquePropuestaCambio.appendChild(botonOpcionesCliente)

                    botonOpcionesCliente = document.createElement("p")
                    botonOpcionesCliente.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonOpcionesCliente.setAttribute("componente", "botonCancelarPropuesta")
                    botonOpcionesCliente.innerText = "Cancelar"
                    botonOpcionesCliente.addEventListener("click", (e) => {
                        casaVitini.componentes.limpiarAdvertenciasInmersivas()
                    })
                    bloquePropuestaCambio.appendChild(botonOpcionesCliente)


                    contenidoAdvertenciaInmersiva.appendChild(bloquePropuestaCambio)

                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)
                },
                propuestaEliminarApartamentoUI: (datosElimiacion) => {
                    // hacer propesta de eliminar apartamento


                    const apartamentoUID = datosElimiacion.apartamentoUID
                    const apartamentoUI = datosElimiacion.apartamentoUI
                    const tipoBloqueo = datosElimiacion.tipoBloqueo

                    let mensajeUI
                    if (tipoBloqueo === "sinBloqueo") {
                        mensajeUI = `¿Confirmas eliminar el ${apartamentoUI} y liberarlo para que este disponible para reservar publicamente? Los pernoctantes de este apartamento no se eliminaran de la reserva`
                    }
                    if (tipoBloqueo === "permanente") {
                        mensajeUI = `¿Confirmas eliminar el ${apartamentoUI} y bloquearlo indefinidamente? (Hay desbloquearlo manualmente) Los pernoctantes de este apartamento no se eliminaran de la reserva`
                    }
                    if (tipoBloqueo === "rangoTemporal") {
                        mensajeUI = `¿Confirmas eliminar el ${apartamentoUI} y bloquearlo durante el mismo rango de fechas que esta reserva? Los pernoctantes de este apartamento no se eliminaran de la reserva`
                    }

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("contenedor", "opcionesCancelacion")


                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                    contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")

                    const bloquePropuestaCambio = document.createElement("div")
                    bloquePropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePool")
                    bloquePropuestaCambio.setAttribute("componente", "contenedorPropuestaCliente")

                    const tituloPropuestaCambio = document.createElement("p")
                    tituloPropuestaCambio.classList.add("administracionReservaDetallesPropuedaCambioClientePoolTitulo")
                    tituloPropuestaCambio.setAttribute("componente", "tituloCambioPropuesta")
                    tituloPropuestaCambio.innerText = mensajeUI
                    bloquePropuestaCambio.appendChild(tituloPropuestaCambio)


                    let botonOpcionesCliente = document.createElement("p")
                    botonOpcionesCliente.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonOpcionesCliente.setAttribute("componente", "botonConfirmarPropuesta")


                    let botonMenajeUI
                    if (tipoBloqueo === "permanente") {
                        botonMenajeUI = `Eliminar el ${apartamentoUI} de la reserva y bloquearlo indefinidamente`
                    }
                    if (tipoBloqueo === "sinBloqueo") {
                        botonMenajeUI = `Eliminar la ${apartamentoUI} de la reserva y liberarlo para que se pueda reservas`
                    }
                    if (tipoBloqueo === "rangoTemporal") {
                        botonMenajeUI = `Eliminar la ${apartamentoUI} de la reserva y bloquearlo durante el mismo rango que la reserva`
                    }
                    botonOpcionesCliente.innerText = botonMenajeUI
                    botonOpcionesCliente.addEventListener("click", () => {
                        const datosElimiacion = {
                            apartamentoUID: apartamentoUID,
                            tipoBloqueo: tipoBloqueo,
                        }
                        casaVitini.administracion.reservas.detallesReserva.transactor.eliminarApartamento(datosElimiacion)
                    })
                    bloquePropuestaCambio.appendChild(botonOpcionesCliente)

                    botonOpcionesCliente = document.createElement("p")
                    botonOpcionesCliente.classList.add("administracionReservaDetallesPropuedaCambioClientePoolbotonOpcione")
                    botonOpcionesCliente.setAttribute("componente", "botonCancelarPropuesta")
                    botonOpcionesCliente.setAttribute("apartamentoUID_", apartamentoUID)

                    botonOpcionesCliente.innerText = "Cancelar"
                    botonOpcionesCliente.addEventListener("click", () => {
                        return casaVitini.componentes.limpiarAdvertenciasInmersivas()
                    })
                    bloquePropuestaCambio.appendChild(botonOpcionesCliente)


                    contenidoAdvertenciaInmersiva.appendChild(bloquePropuestaCambio)
                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)



                },
                checkin: {
                    UI: async (pernoctanteUID) => {
                        document.body.style.overflow = 'hidden';
                        const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                        const pernoctanteElemento = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                        const nombreCompleto = pernoctanteElemento.querySelector("[componente=nombreCompleto]").innerText
                        const pasaporte = pernoctanteElemento.querySelector("[componente=pasaporte]").innerText

                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("contenedor", "checkin")
                        advertenciaInmersivaIU.setAttribute("instanciaUID", instanciaUID)
                        advertenciaInmersivaIU.style.justifyContent = "flex-start"


                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const contenidoAdvertenciaInmersiva = document.createElement("div")
                        contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                        contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")

                        const contenedor = document.createElement("div")
                        contenedor.classList.add("administracion_reservas_detallesReservas_check_contenedor")

                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = "Realizar checkin"
                        contenedor.appendChild(tituloCancelarReserva)

                        const datosTitular = {
                            nombreCompleto: nombreCompleto,
                            pasaporte: pasaporte
                        }

                        const pernoctanteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.checkin.detallesDelTitularUI(datosTitular)
                        contenedor.appendChild(pernoctanteUI)
                        const instanciaUID_Calendario = casaVitini.componentes.codigoFechaInstancia()








                        const metadatosCalendario = {
                            tipoFecha: "entrada",
                            almacenamientoCalendarioID: "administracionCalendario",
                            perfilMes: "diaEntradaAsistidoCheckIn",
                            calendarioIO: "entrada",
                            mensajeInfo: "Selecciona el día de checkin",
                            alturaDinamica: "10",
                            instanciaUID: instanciaUID_Calendario,
                        }
                        const calendarioIncrustado = casaVitini.componentes.constructorCalendarioIncrustado(metadatosCalendario)
                        contenedor.appendChild(calendarioIncrustado)

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("administracion_reservas_detallesReservas_check_botonConfirmar")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.innerText = "Seleccionar una fecha del checkin"
                        botonCancelar.addEventListener("click", (e) => {
                            const datosCheckIn = {
                                fechaCheckIn: e.target.getAttribute("fechaCheckIn"),
                                pernoctanteUID: pernoctanteUID,
                                instanciaUID: instanciaUID
                            }


                            casaVitini.administracion.reservas.detallesReserva.UIComponentes.checkin.confirmar(datosCheckIn)
                        }
                        )
                        contenedor.appendChild(botonCancelar)

                        const infoEliminarReserva = document.createElement("div")
                        infoEliminarReserva.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        infoEliminarReserva.style.marginTop = "50px"
                        infoEliminarReserva.innerText = "También puedes eliminar irreversiblemente una reserva. La eliminación irreversible de una reserva borra la información de la reserva, así como los pagos asociados a la reserva y toda la información relacionada con la reserva. A diferencia de la cancelación los datos dejaran de estar disponibles."

                        const selectorCheckIn = document
                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            .getAttribute("fechaCheckIn")


                        if (selectorCheckIn) {
                            advertenciaInmersivaIU.setAttribute("fechaCheckIn", selectorCheckIn)
                            const botonEliminarCheckIn = document.createElement("div")
                            botonEliminarCheckIn.classList.add("administracion_reservas_detallesReserva_cancelarReserva_botonV1")
                            botonEliminarCheckIn.setAttribute("componente", "botonConfirmarCancelarReserva")
                            botonEliminarCheckIn.innerText = "Eliminar checkin"
                            botonEliminarCheckIn.addEventListener("click", () => {
                                const eliminarCheckIN = {
                                    pernoctanteUID: pernoctanteUID,
                                    instanciaUID: instanciaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.UIComponentes.checkin.eliminar(eliminarCheckIN)
                            })
                            contenedor.appendChild(botonEliminarCheckIn)
                        }
                        const selectorCheckOutAdelantado = document
                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            .getAttribute("fechaCheckOut")
                        if (selectorCheckOutAdelantado) {
                            advertenciaInmersivaIU.setAttribute("fechaCheckOut", selectorCheckOutAdelantado)

                        }


                        const botonCancelarCheckin = document.createElement("div")
                        botonCancelarCheckin.classList.add("administracion_reservas_detallesReserva_cancelarReserva_botonV1")
                        botonCancelarCheckin.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelarCheckin.innerText = "Cancelar checkin y volver a la reserva"
                        botonCancelarCheckin.addEventListener("click", () => {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            //document.querySelector(`[instanciaUID="${instanciaUID}"]`).remove()
                        })
                        contenedor.appendChild(botonCancelarCheckin)


                        contenidoAdvertenciaInmersiva.appendChild(contenedor)
                        contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)

                        document.body.appendChild(advertenciaInmersivaIU)
                        const fechaEntrada = document.querySelector("[dataReserva=fechaEntrada]").innerText

                        const fechaEntradaArray = fechaEntrada.split("/")
                        const mesEntrada = fechaEntradaArray[1]
                        const anoEntrada = fechaEntradaArray[2]

                        const resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            ano: Number(anoEntrada),
                            mes: Number(mesEntrada)
                        }

                        const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                        calendarioResuelvo.instanciaUID = instanciaUID_Calendario
                        calendarioResuelvo.pernoctanteUID = pernoctanteUID
                        await casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)


                    },
                    detallesDelTitularUI: (detallesDelTitular) => {

                        const nombreCompleto = detallesDelTitular.nombreCompleto
                        const pasaporte = detallesDelTitular.pasaporte

                        const detallesRapidosDelTitular = document.createElement("div")
                        detallesRapidosDelTitular.classList.add("administracion_reservas_detallesReserva_checkin_infoTitular_contenedorGlobal")

                        // Nombre completo titular
                        let contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        let nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Nombre del pernoctante"
                        contenedorDato.appendChild(nombreDato)

                        let valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.setAttribute("componente", "nombreCompleto")
                        valorDato.innerText = nombreCompleto
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)

                        // Pasaporte titular
                        contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Pasaporte del pernoctante"
                        contenedorDato.appendChild(nombreDato)

                        valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.setAttribute("componente", "pasaporte")
                        valorDato.innerText = pasaporte
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)
                        return detallesRapidosDelTitular

                    },
                    seleccionarDia: (dia) => {

                        const diaSeleccionado = dia.target.getAttribute("dia").padStart(2, "0")
                        const diaSeleccionadoComoElemento = dia.target;
                        const instanciaUID_contenedorCheckIn = dia.target.closest("[contenedor=checkin][instanciaUID]")?.getAttribute("instanciaUID")

                        const calendario = diaSeleccionadoComoElemento.closest("[componente=marcoCalendario]")
                        const calendarioIO = calendario.getAttribute("calendarioIO")

                        if (diaSeleccionadoComoElemento.getAttribute("diaEstado") === "seleccionado") {
                            diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")

                            if (calendarioIO === "entrada") {
                                const selectorBotonConfirmar = document
                                    .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckIn}"]`)
                                    .querySelector("[componente=botonConfirmarCancelarReserva]")
                                selectorBotonConfirmar.innerText = "Seleccionar una fecha del checkin"
                                selectorBotonConfirmar.removeAttribute("style")
                                diaSeleccionadoComoElemento.style.background = ""
                                diaSeleccionadoComoElemento.style.color = ""
                                selectorBotonConfirmar.removeAttribute("fechaCheckIn")

                            }
                            if (calendarioIO === "salida") {
                                document.querySelector("[componente=bloquePropuestaNuevaFechaSalida]")?.remove()
                                diaSeleccionadoComoElemento.style.background = ""
                                diaSeleccionadoComoElemento.style.color = ""


                            }
                            diaSeleccionadoComoElemento.removeAttribute("diaEstado")
                            casaVitini.administracion.reservas.detallesReserva.controladorZonaPropuestasCambioFechas()
                            return
                        }
                        document.querySelectorAll("[estado=disponible]").forEach(diaDisponible => {
                            //  diaDisponible.removeAttribute("style")
                            diaDisponible.removeAttribute("diaEstado")
                            diaDisponible.style.background = ""
                            diaDisponible.style.color = ""
                        });


                        diaSeleccionadoComoElemento.style.background = "green"
                        diaSeleccionadoComoElemento.style.color = "white"
                        diaSeleccionadoComoElemento.setAttribute("diaEstado", "seleccionado")

                        const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                        const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")

                        const selectorPropuestaCambioFecha = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]")

                        if (calendarioIO === "entrada") {
                            const selectorBotonConfirmar = document
                                .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckIn}"]`)
                                .querySelector("[componente=botonConfirmarCancelarReserva]")
                            selectorBotonConfirmar.innerText = `Confirmar checkin para el ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                            selectorBotonConfirmar.style.pointerEvents = "all"
                            selectorBotonConfirmar.setAttribute("fechaCheckIn", `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`)
                            selectorBotonConfirmar.style.fontWeight = "bold"
                        }

                        if (calendarioIO === "salida") {
                            document.querySelectorAll("[tipoPropuesta=fechaSalida]").forEach(propuesta => {
                                propuesta.remove()
                            });

                            const bloquePropuestaCambioFecha = document.createElement("div")
                            bloquePropuestaCambioFecha.setAttribute("componente", "bloquePropuestaNuevaFechaSalida")
                            bloquePropuestaCambioFecha.setAttribute("tipoPropuesta", "fechaSalida")

                            bloquePropuestaCambioFecha.classList.add("bloquePropuestaCambioFechaReserva")

                            const tituloPropuestaCambioFecha = document.createElement("div")
                            tituloPropuestaCambioFecha.setAttribute("componente", "tituloPuestaNuevaFechaEntrada")
                            tituloPropuestaCambioFecha.classList.add("marcoPropuestaCambioFechaReserva")
                            tituloPropuestaCambioFecha.innerText = `¿Confirmas la nueva fecha de salida ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}?`
                            bloquePropuestaCambioFecha.appendChild(tituloPropuestaCambioFecha)

                            const botonConfirmarPropuesta = document.createElement("p")
                            botonConfirmarPropuesta.setAttribute("componente", "botonConfirmarPropuestaCambioFechaReserva")
                            botonConfirmarPropuesta.classList.add("botonPropuestaCambioFechaReserva")
                            botonConfirmarPropuesta.setAttribute("sentidoRango", "futuro")
                            botonConfirmarPropuesta.setAttribute("fechaConfirmar", `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`)

                            botonConfirmarPropuesta.addEventListener("click", () => {
                                casaVitini.administracion.reservas.detallesReserva.confirmarCambioFecha(instanciaUID_contenedorCheckIn)
                            })


                            botonConfirmarPropuesta.innerText = "Confirmar el cambio de la fecha de salida de esta reserva"

                            const botonCancelarPropuesta = document.createElement("p")
                            botonCancelarPropuesta.setAttribute("componente", "botonConfirmarPropuestaCambioFechaReserva")
                            botonCancelarPropuesta.classList.add("botonPropuestaCambioFechaReserva")
                            botonCancelarPropuesta.innerText = "Cancelar propuesta"
                            botonCancelarPropuesta.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.cancelarPropuestaCambioFecha)

                            bloquePropuestaCambioFecha.appendChild(botonConfirmarPropuesta)
                            bloquePropuestaCambioFecha.appendChild(botonCancelarPropuesta)


                            selectorPropuestaCambioFecha.appendChild(bloquePropuestaCambioFecha)

                            casaVitini.administracion.reservas.detallesReserva.controladorZonaPropuestasCambioFechas()
                        }
                    },
                    confirmar: async (checkIn) => {

                        const pernoctanteUID = checkIn.pernoctanteUID
                        const fechaCheckIn = checkIn.fechaCheckIn
                        const instanciaUID = checkIn.instanciaUID
                        const instanciaUID_localProceso = casaVitini.componentes.codigoFechaInstancia()


                        const metadatosPantallaCarga = {
                            mensaje: "Esperando al servidor...",
                            instanciaUID: instanciaUID_localProceso,
                        }
                        casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)





                        const estadoReserva = {
                            zona: "administracion/reservas/confirmarFechaCheckIn",
                            pernoctanteUID: Number(pernoctanteUID),
                            fechaCheckIn: fechaCheckIn
                        }

                        const respuestaServidor = await casaVitini.componentes.servidor(estadoReserva)

                        const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                        selectorPantallaDeCarga.map((pantalla) => {
                            pantalla.remove()
                        })
                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                        if (respuestaServidor?.error) {
                            if (!selectorInstanciaRaiz) {
                                return
                            }
                            return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            selectorPernoctante.setAttribute("fechaCheckIn", fechaCheckIn)
                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkInInfo]`)
                            selectorCheckInInfo.innerText = "> " + fechaCheckIn

                        }

                    },
                    eliminar: async (checkIn) => {

                        const pernoctanteUID = checkIn.pernoctanteUID
                        const instanciaUID = checkIn.instanciaUID
                        const instanciaUID_localProceso = casaVitini.componentes.codigoFechaInstancia()

                        const metadatosPantallaCarga = {
                            mensaje: "Esperando al servidor...",
                            instanciaUID: instanciaUID_localProceso,
                        }
                        casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                        const estadoReserva = {
                            zona: "administracion/reservas/eliminarCheckIN",
                            pernoctanteUID: Number(pernoctanteUID),
                        }

                        const respuestaServidor = await casaVitini.componentes.servidor(estadoReserva)
                        const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                        selectorPantallaDeCarga.map((pantalla) => {
                            pantalla.remove()
                        })
                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                        if (respuestaServidor?.error) {
                            if (!selectorInstanciaRaiz) {
                                return
                            }
                            return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            selectorPernoctante.removeAttribute("fechaCheckIn")
                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkInInfo]`)
                            selectorCheckInInfo.innerText = "Pendiente de checkin"

                            selectorPernoctante.removeAttribute("fechaCheckOut")
                            const selectorCheckOutInfo = selectorPernoctante.querySelector(`[componente=checkOutInfo]`)
                            selectorCheckOutInfo.style.display = "none"
                            selectorCheckOutInfo.innerText = null
                        }
                    }
                },
                checkout: {
                    UI: async (pernoctanteUID) => {
                        document.body.style.overflow = 'hidden';
                        const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                        const pernoctanteElemento = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                        const nombreCompleto = pernoctanteElemento.querySelector("[componente=nombreCompleto]").innerText
                        const pasaporte = pernoctanteElemento.querySelector("[componente=pasaporte]").innerText

                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("contenedor", "checkout")
                        advertenciaInmersivaIU.setAttribute("instanciaUID", instanciaUID)
                        advertenciaInmersivaIU.style.justifyContent = "flex-start"


                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const contenidoAdvertenciaInmersiva = document.createElement("div")
                        contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                        contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")

                        const contenedor = document.createElement("div")
                        contenedor.classList.add("administracion_reservas_detallesReservas_check_contenedor")

                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = "Checkout Adelantado"
                        contenedor.appendChild(tituloCancelarReserva)

                        const datosTitular = {
                            nombreCompleto: nombreCompleto,
                            pasaporte: pasaporte
                        }

                        const pernoctanteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.checkout.detallesDelTitularUI(datosTitular)
                        contenedor.appendChild(pernoctanteUI)
                        const instanciaUID_Calendario = casaVitini.componentes.codigoFechaInstancia()

                        const metadatosCalendario = {
                            tipoFecha: "salida",
                            almacenamientoCalendarioID: "administracionCalendario",
                            perfilMes: "diaSalidaAsistidoCheckOutAdelantado",
                            calendarioIO: "salida",
                            mensajeInfo: "Selecciona el día de checkout adelantado",
                            alturaDinamica: "10",
                            instanciaUID: instanciaUID_Calendario,
                        }
                        const calendarioIncrustado = casaVitini.componentes.constructorCalendarioIncrustado(metadatosCalendario)
                        contenedor.appendChild(calendarioIncrustado)

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("administracion_reservas_detallesReservas_check_botonConfirmar")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.innerText = "Seleccionar una fecha del checkout adelantado"
                        botonCancelar.addEventListener("click", (e) => {
                            const datosCheckIn = {
                                fechaCheckOut: e.target.getAttribute("fechaCheckOut"),
                                pernoctanteUID: pernoctanteUID,
                                instanciaUID: instanciaUID
                            }


                            casaVitini.administracion.reservas.detallesReserva.UIComponentes.checkout.confirmar(datosCheckIn)
                        }
                        )
                        contenedor.appendChild(botonCancelar)

                        const infoEliminarReserva = document.createElement("div")
                        infoEliminarReserva.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        infoEliminarReserva.style.marginTop = "50px"
                        infoEliminarReserva.innerText = "También puedes eliminar irreversiblemente una reserva. La eliminación irreversible de una reserva borra la información de la reserva, así como los pagos asociados a la reserva y toda la información relacionada con la reserva. A diferencia de la cancelación los datos dejaran de estar disponibles."

                        const selectorCheckOut = document
                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            .getAttribute("fechaCheckOut")
                        if (selectorCheckOut) {

                            advertenciaInmersivaIU.setAttribute("fechaCheckOut", selectorCheckOut)

                            const botonEliminar = document.createElement("div")
                            botonEliminar.classList.add("administracion_reservas_detallesReserva_cancelarReserva_botonV1")
                            botonEliminar.setAttribute("componente", "botonConfirmarCancelarReserva")
                            botonEliminar.innerText = "Eliminar checkout adelantado"
                            botonEliminar.addEventListener("click", () => {
                                const eliminarCheckOut = {
                                    pernoctanteUID: pernoctanteUID,
                                    instanciaUID: instanciaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.UIComponentes.checkout.eliminar(eliminarCheckOut)
                            })
                            contenedor.appendChild(botonEliminar)
                        }

                        const selectorCheckIn = document
                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            .getAttribute("fechaCheckIn")
                        if (selectorCheckIn) {
                            advertenciaInmersivaIU.setAttribute("fechaCheckIn", selectorCheckIn)

                        }

                        const botonCancelarCheckin = document.createElement("div")
                        botonCancelarCheckin.classList.add("administracion_reservas_detallesReserva_cancelarReserva_botonV1")
                        botonCancelarCheckin.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelarCheckin.innerText = "Cancelar checkout adelantado y volver a la reserva"
                        botonCancelarCheckin.addEventListener("click", () => {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            //document.querySelector(`[instanciaUID="${instanciaUID}"]`).remove()
                        })
                        contenedor.appendChild(botonCancelarCheckin)


                        contenidoAdvertenciaInmersiva.appendChild(contenedor)
                        contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)

                        document.body.appendChild(advertenciaInmersivaIU)
                        const fechaSalida = document.querySelector("[dataReserva=fechaSalida]").innerText

                        const fechaSalidaArray = fechaSalida.split("/")
                        const mesSalida = fechaSalidaArray[1]
                        const anoSalida = fechaSalidaArray[2]

                        const resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesSalida),
                            ano: Number(anoSalida),
                        }

                        const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                        calendarioResuelvo.instanciaUID = instanciaUID_Calendario
                        calendarioResuelvo.pernoctanteUID = pernoctanteUID
                        await casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)


                    },
                    detallesDelTitularUI: (detallesDelTitular) => {

                        const nombreCompleto = detallesDelTitular.nombreCompleto
                        const pasaporte = detallesDelTitular.pasaporte

                        const detallesRapidosDelTitular = document.createElement("div")
                        detallesRapidosDelTitular.classList.add("administracion_reservas_detallesReserva_checkin_infoTitular_contenedorGlobal")

                        // Nombre completo titular
                        let contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        let nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Nombre del pernoctante"
                        contenedorDato.appendChild(nombreDato)

                        let valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.setAttribute("componente", "nombreCompleto")
                        valorDato.innerText = nombreCompleto
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)

                        // Pasaporte titular
                        contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Pasaporte del pernoctante"
                        contenedorDato.appendChild(nombreDato)

                        valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.setAttribute("componente", "pasaporte")
                        valorDato.innerText = pasaporte
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)
                        return detallesRapidosDelTitular

                    },
                    seleccionarDia: (dia) => {

                        const diaSeleccionado = dia.target.getAttribute("dia").padStart(2, "0")
                        const diaSeleccionadoComoElemento = dia.target;
                        const instanciaUID_contenedorCheckOut = dia.target.closest("[contenedor=checkout][instanciaUID]")?.getAttribute("instanciaUID")

                        const calendario = diaSeleccionadoComoElemento.closest("[componente=marcoCalendario]")
                        const calendarioIO = calendario.getAttribute("calendarioIO")

                        if (diaSeleccionadoComoElemento.getAttribute("diaEstado") === "seleccionado") {
                            diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")

                            if (calendarioIO === "salida") {
                                const selectorBotonConfirmar = document
                                    .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckOut}"]`)
                                    .querySelector("[componente=botonConfirmarCancelarReserva]")
                                selectorBotonConfirmar.innerText = "Seleccionar una fecha del checkout adelantado"
                                selectorBotonConfirmar.removeAttribute("style")
                                diaSeleccionadoComoElemento.style.background = ""
                                diaSeleccionadoComoElemento.style.color = ""
                                selectorBotonConfirmar.removeAttribute("fechaCheckOut")

                            }
                            diaSeleccionadoComoElemento.removeAttribute("diaEstado")
                            casaVitini.administracion.reservas.detallesReserva.controladorZonaPropuestasCambioFechas()
                            return
                        }
                        document.querySelectorAll("[estado=disponible]").forEach(diaDisponible => {
                            //  diaDisponible.removeAttribute("style")
                            diaDisponible.removeAttribute("diaEstado")
                            diaDisponible.style.background = ""
                            diaDisponible.style.color = ""
                        });


                        diaSeleccionadoComoElemento.style.background = "green"
                        diaSeleccionadoComoElemento.style.color = "white"
                        diaSeleccionadoComoElemento.setAttribute("diaEstado", "seleccionado")

                        const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                        const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")

                        const selectorPropuestaCambioFecha = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]")


                        if (calendarioIO === "salida") {
                            const selectorBotonConfirmar = document
                                .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckOut}"]`)
                                .querySelector("[componente=botonConfirmarCancelarReserva]")
                            selectorBotonConfirmar.innerText = `Confirmar checkout adelantador para el ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                            selectorBotonConfirmar.style.pointerEvents = "all"
                            selectorBotonConfirmar.setAttribute("fechaCheckOut", `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`)
                            selectorBotonConfirmar.style.fontWeight = "bold"
                        }
                    },
                    confirmar: async (checkOut) => {
                        const pernoctanteUID = checkOut.pernoctanteUID
                        const fechaCheckOut = checkOut.fechaCheckOut
                        const instanciaUID = checkOut.instanciaUID
                        const instanciaUID_localProceso = casaVitini.componentes.codigoFechaInstancia()


                        const metadatosPantallaCarga = {
                            mensaje: "Esperando al servidor...",
                            instanciaUID: instanciaUID_localProceso,
                        }
                        casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                        const estadoReserva = {
                            zona: "administracion/reservas/confirmarFechaCheckOutAdelantado",
                            pernoctanteUID: Number(pernoctanteUID),
                            fechaCheckOut: fechaCheckOut
                        }

                        const respuestaServidor = await casaVitini.componentes.servidor(estadoReserva)

                        const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                        selectorPantallaDeCarga.map((pantalla) => {
                            pantalla.remove()
                        })
                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                        if (respuestaServidor?.error) {
                            if (!selectorInstanciaRaiz) {
                                return
                            }
                            return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            selectorPernoctante.setAttribute("fechaCheckOut", fechaCheckOut)
                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkOutInfo]`)
                            selectorCheckInInfo.innerText = "< " + fechaCheckOut
                            selectorCheckInInfo.removeAttribute("style")


                        }

                    },
                    eliminar: async (checkOut) => {

                        const pernoctanteUID = checkOut.pernoctanteUID
                        const instanciaUID = checkOut.instanciaUID
                        const instanciaUID_localProceso = casaVitini.componentes.codigoFechaInstancia()

                        const metadatosPantallaCarga = {
                            mensaje: "Esperando al servidor...",
                            instanciaUID: instanciaUID_localProceso,
                        }
                        casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                        const estadoReserva = {
                            zona: "administracion/reservas/eliminarCheckOutAdelantado",
                            pernoctanteUID: Number(pernoctanteUID),
                        }

                        const respuestaServidor = await casaVitini.componentes.servidor(estadoReserva)
                        const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                        selectorPantallaDeCarga.map((pantalla) => {
                            pantalla.remove()
                        })
                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                        if (respuestaServidor?.error) {
                            if (!selectorInstanciaRaiz) {
                                return
                            }
                            return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                            selectorPernoctante.removeAttribute("fechacheckout")
                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkOutInfo]`)
                            selectorCheckInInfo.style.display = "none"
                            selectorCheckInInfo.innerText = null
                        }
                    }
                }
            },
            constructorCalendario: async (boton) => {
                const botonID = boton.target.getAttribute("componente")

                const reserva = document.querySelector("[reserva]").getAttribute("reserva")
                const calendario = document.querySelector("[contenedor=calendario]")
                const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
                const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                const instanciaUID_DeLaSeccionRenderizada = document.querySelector("section[instanciaUID]").getAttribute("instanciaUID")
                const alturaDinamicaArriba = casaVitini.componentes.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton.target.closest("[componente]"))

                const estadoReserva = {
                    zona: "administracion/reservas/estadoReserva",
                    reserva: Number(reserva)
                }
                const respuestaServidor = await casaVitini.componentes.servidor(estadoReserva)

                if (respuestaServidor?.estadoReserva === "cancelada") {
                    let error = "No se pueden alterar las fechas de una reserva cancelada"
                    return casaVitini.ui.vistas.advertenciaInmersiva(error)
                }
                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }

                const instanciaUID_seccionRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_DeLaSeccionRenderizada}"]`)

                if (instanciaUID_seccionRenderizada) {
                    if (botonID === "fechaEntrada") {

                        if (calendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                            return
                        }
                        if (calendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                            // return
                        }
                        let fechaEntrada = document.querySelector("[calendario=entrada][fechaEntrada]").getAttribute("fechaEntrada")

                        fechaEntrada = fechaEntrada.split("/")
                        let diaEntrada = fechaEntrada[0]
                        diaEntrada = Number(diaEntrada)
                        let mesEntrada = fechaEntrada[1]
                        mesEntrada = Number(mesEntrada)
                        let anoEntrada = fechaEntrada[2]
                        anoEntrada = Number(anoEntrada)
                        let resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            ano: anoEntrada,
                            mes: mesEntrada
                        }

                        let metadatosCalendario = {
                            tipoFecha: "entrada",
                            almacenamientoCalendarioID: "administracionCalendario",
                            perfilMes: "diaEntradaAsistidoReservaConPasado",
                            calendarioIO: "entrada",
                            mensajeInfo: "Selecciona la fecha de entrada que quieras actualizar en esta reserva",
                            alturaDinamica: alturaDinamicaArriba,
                            instanciaUID: instanciaUID
                        }
                        casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                        document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                        const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                        calendarioResuelvo.instanciaUID = instanciaUID

                        await casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)


                    }
                    if (botonID === "fechaSalida") {

                        if (calendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                            return
                        }
                        if (calendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                            //return

                        }
                        let fechaSalida = document.querySelector("[calendario=salida][fechaSalida]").getAttribute("fechaSalida")
                        fechaSalida = fechaSalida.split("/")
                        let diaSalida = fechaSalida[0]
                        diaSalida = Number(diaSalida)
                        let mesSalida = fechaSalida[1]
                        mesSalida = Number(mesSalida)
                        let anoSalida = fechaSalida[2]
                        anoSalida = Number(anoSalida)

                        let resolucionCalendario = {
                            comando: "construyeObjeto",
                            tipo: "personalizado",
                            ano: anoSalida,
                            mes: mesSalida
                        }
                        let metadatosCalendario = {
                            tipoFecha: "salida",
                            almacenamientoCalendarioID: "administracionCalendario",
                            perfilMes: "diaSalidaAsistidoReservaConPasado",
                            calendarioIO: "salida",
                            mensajeInfo: "Selecciona la fecha de salida que quieras actualizar en esta reserva.",
                            alturaDinamica: alturaDinamicaArriba,
                            instanciaUID: instanciaUID
                        }

                        casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                        document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                        let calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                        calendarioResuelvo.instanciaUID = instanciaUID

                        casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)



                    }
                }

            },
            mostrarDetallesReserva_presentaDetallesReserva: async (urlRaw) => {

                casaVitini.administracion.reservas.detallesReserva.reservaUI(urlRaw)

            },


            seleccionarDia: (dia_) => {

                const diaSeleccionado = dia_.target.getAttribute("dia").padStart(2, "0")
                const diaSeleccionadoComoElemento = dia_.target;
                const calendario = diaSeleccionadoComoElemento.closest("[componente=marcoCalendario]")
                const calendarioIO = calendario.getAttribute("calendarioIO")


                if (diaSeleccionadoComoElemento.getAttribute("diaEstado") === "seleccionado") {
                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")

                    if (calendarioIO === "entrada") {
                        //   diaSeleccionadoComoElemento.removeAttribute("style")
                        document.querySelector("[componente=bloquePropuestaNuevaFechaEntrada]")?.remove()
                        diaSeleccionadoComoElemento.style.background = ""
                        diaSeleccionadoComoElemento.style.color = ""

                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[componente=bloquePropuestaNuevaFechaSalida]")?.remove()
                        diaSeleccionadoComoElemento.style.background = ""
                        diaSeleccionadoComoElemento.style.color = ""


                    }
                    diaSeleccionadoComoElemento.removeAttribute("diaEstado")
                    casaVitini.administracion.reservas.detallesReserva.controladorZonaPropuestasCambioFechas()

                    return
                }
                document.querySelectorAll("[estado=disponible]").forEach(diaDisponible => {
                    //  diaDisponible.removeAttribute("style")
                    diaDisponible.removeAttribute("diaEstado")
                    diaDisponible.style.background = ""
                    diaDisponible.style.color = ""
                });


                diaSeleccionadoComoElemento.style.background = "red"
                diaSeleccionadoComoElemento.style.color = "white"
                diaSeleccionadoComoElemento.setAttribute("diaEstado", "seleccionado")

                const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")

                const selectorPropuestaCambioFecha = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]")

                if (calendarioIO === "entrada") {
                    document.querySelectorAll("[tipoPropuesta=fechaEntrada]").forEach(propuesta => {
                        propuesta.remove()
                    });
                    let bloquePropuestaCambioFecha = document.createElement("div")
                    bloquePropuestaCambioFecha.setAttribute("componente", "bloquePropuestaNuevaFechaEntrada")
                    bloquePropuestaCambioFecha.setAttribute("tipoPropuesta", "fechaEntrada")

                    bloquePropuestaCambioFecha.classList.add("bloquePropuestaCambioFechaReserva")

                    let tituloPropuestaCambioFecha = document.createElement("div")
                    tituloPropuestaCambioFecha.setAttribute("componente", "tituloPuestaNuevaFechaEntrada")
                    tituloPropuestaCambioFecha.classList.add("marcoPropuestaCambioFechaReserva")
                    tituloPropuestaCambioFecha.innerText = `¿Confirmas la nueva fecha de entrada ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}?`
                    bloquePropuestaCambioFecha.appendChild(tituloPropuestaCambioFecha)

                    let botonConfirmarPropuesta = document.createElement("p")
                    botonConfirmarPropuesta.setAttribute("componente", "botonConfirmarPropuestaCambioFechaReserva")
                    botonConfirmarPropuesta.classList.add("botonPropuestaCambioFechaReserva")
                    botonConfirmarPropuesta.setAttribute("sentidoRango", "pasado")
                    botonConfirmarPropuesta.setAttribute("fechaConfirmar", `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`)

                    botonConfirmarPropuesta.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.confirmarCambioFecha)
                    botonConfirmarPropuesta.innerText = "Confirmar el cambio de la fecha de entrada de esta reserva"

                    let botonCancelarPropuesta = document.createElement("p")
                    botonCancelarPropuesta.setAttribute("componente", "botonConfirmarPropuestaCambioFechaReserva")
                    botonCancelarPropuesta.classList.add("botonPropuestaCambioFechaReserva")
                    botonCancelarPropuesta.innerText = "Cancelar propuesta"
                    botonCancelarPropuesta.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.cancelarPropuestaCambioFecha)

                    bloquePropuestaCambioFecha.appendChild(botonConfirmarPropuesta)
                    bloquePropuestaCambioFecha.appendChild(botonCancelarPropuesta)
                    selectorPropuestaCambioFecha.appendChild(bloquePropuestaCambioFecha)
                    casaVitini.administracion.reservas.detallesReserva.controladorZonaPropuestasCambioFechas()
                }

                if (calendarioIO === "salida") {
                    document.querySelectorAll("[tipoPropuesta=fechaSalida]").forEach(propuesta => {
                        propuesta.remove()
                    });

                    const bloquePropuestaCambioFecha = document.createElement("div")
                    bloquePropuestaCambioFecha.setAttribute("componente", "bloquePropuestaNuevaFechaSalida")
                    bloquePropuestaCambioFecha.setAttribute("tipoPropuesta", "fechaSalida")

                    bloquePropuestaCambioFecha.classList.add("bloquePropuestaCambioFechaReserva")

                    const tituloPropuestaCambioFecha = document.createElement("div")
                    tituloPropuestaCambioFecha.setAttribute("componente", "tituloPuestaNuevaFechaEntrada")
                    tituloPropuestaCambioFecha.classList.add("marcoPropuestaCambioFechaReserva")
                    tituloPropuestaCambioFecha.innerText = `¿Confirmas la nueva fecha de salida ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}?`
                    bloquePropuestaCambioFecha.appendChild(tituloPropuestaCambioFecha)

                    const botonConfirmarPropuesta = document.createElement("p")
                    botonConfirmarPropuesta.setAttribute("componente", "botonConfirmarPropuestaCambioFechaReserva")
                    botonConfirmarPropuesta.classList.add("botonPropuestaCambioFechaReserva")
                    botonConfirmarPropuesta.setAttribute("sentidoRango", "futuro")
                    botonConfirmarPropuesta.setAttribute("fechaConfirmar", `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`)

                    botonConfirmarPropuesta.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.confirmarCambioFecha)
                    botonConfirmarPropuesta.innerText = "Confirmar el cambio de la fecha de salida de esta reserva"

                    const botonCancelarPropuesta = document.createElement("p")
                    botonCancelarPropuesta.setAttribute("componente", "botonConfirmarPropuestaCambioFechaReserva")
                    botonCancelarPropuesta.classList.add("botonPropuestaCambioFechaReserva")
                    botonCancelarPropuesta.innerText = "Cancelar propuesta"
                    botonCancelarPropuesta.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.cancelarPropuestaCambioFecha)

                    bloquePropuestaCambioFecha.appendChild(botonConfirmarPropuesta)
                    bloquePropuestaCambioFecha.appendChild(botonCancelarPropuesta)


                    selectorPropuestaCambioFecha.appendChild(bloquePropuestaCambioFecha)

                    casaVitini.administracion.reservas.detallesReserva.controladorZonaPropuestasCambioFechas()
                }
            },
            confirmarCambioFecha: async (propuesta) => {

                const reserva = document.querySelector("[reserva]").getAttribute("reserva")
                const fecha = propuesta.target.getAttribute("fechaConfirmar")
                const sentidoRango = propuesta.target.getAttribute("sentidoRango")
                const transaccion = {
                    zona: "administracion/reservas/confirmarModificarFechaReserva",
                    reserva: Number(reserva),
                    sentidoRango: sentidoRango,
                    fecha: fecha
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const sentidoRangoRespueata = respuestaServidor.sentidoRango
                    const fecha_ISO = respuestaServidor.fecha_ISO
                    const fechaArray_ISO = fecha_ISO.split("-")
                    const fecha_Humano = `${fechaArray_ISO[2]}/${fechaArray_ISO[1]}/${fechaArray_ISO[0]}`

                    if (sentidoRangoRespueata === "pasado") {
                        let selectorFechaEntrada = document.querySelector("[calendario=entrada][fechaEntrada]")
                        let selectorFechaEntradaUI = document.querySelector("[dataReserva=fechaEntrada]")

                        selectorFechaEntrada.setAttribute("fechaEntrada", fecha_Humano)
                        selectorFechaEntradaUI.innerText = fecha_Humano
                    }


                    if (sentidoRangoRespueata === "futuro") {
                        let selectorFechaSalida = document.querySelector("[calendario=salida][fechaSalida]")
                        let selectorFechaSalidaUI = document.querySelector("[dataReserva=fechaSalida]")
                        selectorFechaSalida.setAttribute("fechaSalida", fecha_Humano)
                        selectorFechaSalidaUI.innerText = fecha_Humano
                    }

                    propuesta.target.parentNode.remove()
                    casaVitini.administracion.reservas.detallesReserva.controladorZonaPropuestasCambioFechas()
                    casaVitini.administracion.reservas.detallesReserva.calcularPrecioReserva()

                }

            },
            controladorZonaPropuestasCambioFechas: () => {

                const selectorZonaPropuestas = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]").childElementCount
                if (selectorZonaPropuestas > 0) {
                    document.querySelector("[componente=espacioPropuestaCambioFechaReserva]").style.display = "grid"
                } else {
                    document.querySelector("[componente=espacioPropuestaCambioFechaReserva]").style.display = "none"

                }

            },
            cancelarPropuestaCambioFecha: (propuesta) => {

                propuesta.target.parentNode.remove()
                casaVitini.administracion.reservas.detallesReserva.controladorZonaPropuestasCambioFechas()






            },

            reservaUI: async () => {
                const granuladoURL = casaVitini.componentes.granuladorURL()
                const posicionReservaUID = granuladoURL.directorios.findIndex(directorio => directorio === "reservas") + 1;
                const reservaUID = granuladoURL.directorios[posicionReservaUID]

                const posicionCategoriaGlobalInicial = (posicionReservaUID + 1)
                const categoriaGlobalInicial = granuladoURL.directorios[posicionCategoriaGlobalInicial]

                const transaccion = {
                    zona: "administracion/reservas/detallesReserva",
                    reserva: Number(reservaUID),
                    solo: "globalYFinanciera"
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "No existe ninguna reserva con ese identificador",
                        descripcion: "La reserva que buscas con ese identificador no existe. Comprueba el identificador de la reserva"
                    }
                    return casaVitini.componentes.mensajeSimple(info)
                }

                if (respuestaServidor?.reserva) {
                    const detallesDeLaReserva = respuestaServidor.reserva
                    const desgloseFinanciero = respuestaServidor.desgloseFinanciero
                    const reservaUID = detallesDeLaReserva.reserva
                    const detallesTitular = detallesDeLaReserva.titular
                    const estadoReserva = detallesDeLaReserva.estadoReserva
                    const estadoPago = detallesDeLaReserva.estadoPago
                    const fechaCreacion = detallesDeLaReserva.creacion
                    const origenDeLaReserva = detallesDeLaReserva.origen
                    const fechaEntrada = detallesDeLaReserva.entrada
                    const fechaSalida = detallesDeLaReserva.salida
                    const totalReserva = desgloseFinanciero?.totales?.totalConImpuestos ? desgloseFinanciero.totales.totalConImpuestos + "$" : "Sin información"


                    //const totalRapidoGlobal = desgloseFinanciero.totales.totalConImpuestos
                    let estadoReservaUI
                    if (estadoReserva === "cancelada") {
                        estadoReservaUI = "Cancelada"
                    }
                    if (estadoReserva === "confirmada") {
                        estadoReservaUI = "Confirmada"
                    }
                    if (estadoReserva === "noConfirmada") {
                        estadoReservaUI = "No confirmada"
                    }
                    let estadoPagoUI
                    if (estadoPago === "pagado") {
                        estadoPagoUI = "Pagado"
                    }
                    if (estadoPago === "noPagado") {
                        estadoPagoUI = "No pagado"
                    }
                    if (estadoPago === "pagadoParcialmente") {
                        estadoPagoUI = "Pagado parcialmente"
                    }
                    if (estadoPago === "pagadoSuperadamente") {
                        estadoPagoUI = "Pagado superadamente"
                    }

                    let nombreCompletoTitular = "(Níngun titular asignado)"
                    if (detallesTitular) {
                        nombreCompletoTitular = detallesTitular.nombreTitular
                    }
                    let origenUI
                    if (origenDeLaReserva === "cliente") {
                        origenUI = "Cliente"
                    }
                    if (origenDeLaReserva === "administracion") {
                        origenUI = "Adminitracion"
                    }

                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElasticoRelativo")
                    marcoElastico.setAttribute("componente", "marcoElastico")


                    // Crear el elemento div principal
                    const divPrincipal = document.createElement('div');
                    divPrincipal.setAttribute('componente', 'detalleReserva');
                    divPrincipal.setAttribute('class', 'marcoElasticoRelativo marcoGlobalReserva');



                    // Crear el elemento div.reservaDetallesBloqueGeneral
                    const divBloqueGeneral = document.createElement('div');
                    divBloqueGeneral.setAttribute('class', 'reservaDetallesBloqueGeneral');

                    const divInformacionGeneral = document.createElement('div');
                    divInformacionGeneral.setAttribute('class', 'administracionReservasDetalesMarcoEnvolventeInformacionGeneral');



                    const contenedorReseervaUID = document.createElement('div');
                    contenedorReseervaUID.setAttribute('class', 'administracion_reservas_detallesReserva_contenedorReservaUID');

                    const pTitulo1 = document.createElement('p');
                    pTitulo1.setAttribute('class', 'adminsitracionReservasTituloNombre marginCeroparaP');
                    pTitulo1.textContent = 'Reserva';

                    const pDato1 = document.createElement('p');
                    pDato1.setAttribute('class', 'marginCeroparaP');
                    pDato1.setAttribute('dataReserva', 'reservaID');
                    pDato1.setAttribute("reserva", reservaUID)
                    pDato1.setAttribute("componente", "reservaUID_" + reservaUID)
                    pDato1.textContent = reservaUID;

                    contenedorReseervaUID.appendChild(pTitulo1);
                    contenedorReseervaUID.appendChild(pDato1);



                    const contenedorRestoGlobal = document.createElement("div")
                    contenedorRestoGlobal.classList.add("administracion_reservas_detallesReserva_contenedorRestoGlobal")


                    const bloqueTitular = document.createElement('div');
                    bloqueTitular.setAttribute('class', 'administracion_reservas_detallesReserva_panel_bloqueTitular');
                    bloqueTitular.setAttribute("contenedor", "titularUID")
                    bloqueTitular.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.gestionTitular.desplegarUI)

                    if (detallesTitular?.tipoTitular === "titularCliente") {
                        bloqueTitular.setAttribute("titularUID", detallesTitular.clienteUID)
                    }
                    if (detallesTitular) {
                        bloqueTitular.setAttribute("tipoTitular", detallesTitular.tipoTitular)
                    }

                    const tituloTitular = document.createElement('p');
                    tituloTitular.setAttribute('class', 'adminsitracionReservasTituloNombre marginCeroparaP');
                    tituloTitular.textContent = 'Titular de la reserva';

                    const nombreTitular = document.createElement('p');
                    nombreTitular.setAttribute('class', 'marginCeroparaP');
                    nombreTitular.classList.add('adminsitracion_reservas_detallesReserva_contenedorDatoGlobal');

                    nombreTitular.setAttribute('dataReserva', 'nombreTitular');
                    nombreTitular.textContent = nombreCompletoTitular;

                    bloqueTitular.appendChild(tituloTitular);
                    bloqueTitular.appendChild(nombreTitular);

                    const divBloqueDual2 = document.createElement('div');
                    divBloqueDual2.setAttribute('class', 'administracionReservaBloqueDual');

                    const pTitulo2 = document.createElement('p');
                    pTitulo2.setAttribute('class', 'adminsitracionReservasTituloNombre marginCeroparaP');
                    pTitulo2.textContent = 'Fecha de creación UTC';

                    const pDato2 = document.createElement('p');
                    pDato2.setAttribute('class', 'marginCeroparaP');
                    pDato2.setAttribute('dataReserva', 'nada');
                    pDato2.classList.add('adminsitracion_reservas_detallesReserva_contenedorDatoGlobal');
                    pDato2.textContent = fechaCreacion;

                    divBloqueDual2.appendChild(pTitulo2);
                    divBloqueDual2.appendChild(pDato2);

                    const divBloqueDual3 = document.createElement('div');
                    divBloqueDual3.setAttribute('class', 'administracionReservaBloqueDual');

                    const pTitulo3 = document.createElement('p');
                    pTitulo3.setAttribute('class', 'adminsitracionReservasTituloNombre marginCeroparaP');
                    pTitulo3.textContent = 'Origen de la reserva';

                    const pDato3 = document.createElement('p');
                    pDato3.setAttribute('class', 'marginCeroparaP');
                    pDato3.setAttribute('dataReserva', 'origen');
                    pDato3.classList.add('adminsitracion_reservas_detallesReserva_contenedorDatoGlobal');
                    pDato3.textContent = origenUI;

                    divBloqueDual3.appendChild(pTitulo3);
                    divBloqueDual3.appendChild(pDato3);

                    const divBloqueDual4 = document.createElement('div');
                    divBloqueDual4.setAttribute('class', 'administracionReservaBloqueDual');

                    const pTitulo4 = document.createElement('p');
                    pTitulo4.setAttribute('class', 'adminsitracionReservasTituloNombre marginCeroparaP');
                    pTitulo4.textContent = 'Estado de la reserva';

                    const pDato4 = document.createElement('p');
                    pDato4.setAttribute('class', 'marginCeroparaP');
                    pDato4.setAttribute('dataReserva', 'estado');
                    pDato4.classList.add('adminsitracion_reservas_detallesReserva_contenedorDatoGlobal');
                    pDato4.textContent = estadoReservaUI;

                    divBloqueDual4.appendChild(pTitulo4);
                    divBloqueDual4.appendChild(pDato4);

                    const divBloqueDual5 = document.createElement('div');
                    divBloqueDual5.setAttribute('class', 'administracionReservaBloqueDual');

                    const pTitulo5 = document.createElement('p');
                    pTitulo5.setAttribute('class', 'adminsitracionReservasTituloNombre marginCeroparaP');
                    pTitulo5.textContent = 'Estado del pago';

                    const pDato5 = document.createElement('p');
                    pDato5.setAttribute('class', 'marginCeroparaP');
                    pDato5.setAttribute('dataReserva', 'estadoPago');
                    pDato5.classList.add('adminsitracion_reservas_detallesReserva_contenedorDatoGlobal');
                    pDato5.textContent = estadoPagoUI;

                    divBloqueDual5.appendChild(pTitulo5);
                    divBloqueDual5.appendChild(pDato5);

                    const divBloqueDual6 = document.createElement('div');
                    divBloqueDual6.setAttribute('class', 'administracionReservaBloqueDual');

                    const pTitulo6 = document.createElement('p');
                    pTitulo6.setAttribute('class', 'adminsitracionReservasTituloNombre marginCeroparaP');
                    pTitulo6.textContent = 'Total';

                    const pDato6 = document.createElement('p');
                    pDato6.setAttribute('class', 'marginCeroparaP');
                    pDato6.setAttribute('dataReserva', 'totalReservaConImpuestos');
                    pDato6.classList.add('adminsitracion_reservas_detallesReserva_contenedorDatoGlobal');
                    pDato6.textContent = totalReserva;

                    divBloqueDual6.appendChild(pTitulo6);
                    divBloqueDual6.appendChild(pDato6);

                    divInformacionGeneral.appendChild(contenedorReseervaUID);

                    contenedorRestoGlobal.appendChild(bloqueTitular);
                    contenedorRestoGlobal.appendChild(divBloqueDual2);
                    contenedorRestoGlobal.appendChild(divBloqueDual3);
                    contenedorRestoGlobal.appendChild(divBloqueDual4);
                    contenedorRestoGlobal.appendChild(divBloqueDual5);
                    contenedorRestoGlobal.appendChild(divBloqueDual6);

                    // Anadir divInformacionGeneral a divBloqueGeneral

                    divInformacionGeneral.appendChild(contenedorRestoGlobal);

                    divBloqueGeneral.appendChild(divInformacionGeneral);

                    // Anadir divBloqueGeneral al div principal
                    divPrincipal.appendChild(divBloqueGeneral);

                    // Crear el elemento div.reservaDetallesBloqueFecha
                    const divBloqueFecha = document.createElement('div');
                    divBloqueFecha.setAttribute('class', 'reservaDetallesBloqueFecha');

                    // Crear los elementos div.administracionReservaBloqueDual para las fechas de entrada y salida
                    const divFechaEntrada = document.createElement('div');
                    divFechaEntrada.setAttribute('class', 'administracionReservaBloqueDual fechaEntradaElemento diaEntradaNuevo');
                    divFechaEntrada.setAttribute('componente', 'fechaEntrada');
                    divFechaEntrada.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.constructorCalendario)
                    divFechaEntrada.setAttribute('calendario', 'entrada');
                    divFechaEntrada.setAttribute('fechaEntrada', fechaEntrada);

                    const pTituloEntrada = document.createElement('p');
                    pTituloEntrada.setAttribute('class', 'adminsitracionReservasTituloNombre marginCeroparaP componenteFechaEntrada desactivaEventos');
                    pTituloEntrada.textContent = 'Fecha de entrada';

                    const pFechaEntrada = document.createElement('p');
                    pFechaEntrada.setAttribute('class', 'marginCeroparaP componenteFechaEntrada desactivaEventos');
                    pFechaEntrada.setAttribute('id', 'fechaEntrada');
                    pFechaEntrada.setAttribute('dataReserva', 'fechaEntrada');
                    pFechaEntrada.textContent = fechaEntrada;

                    divFechaEntrada.appendChild(pTituloEntrada);
                    divFechaEntrada.appendChild(pFechaEntrada);
                    divBloqueFecha.appendChild(divFechaEntrada);

                    const divFechaSalida = document.createElement('div');
                    divFechaSalida.setAttribute('class', 'administracionReservaBloqueDual fechaSalidaElemento');
                    divFechaSalida.setAttribute('componente', 'fechaSalida');
                    divFechaSalida.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.constructorCalendario)
                    divFechaSalida.setAttribute('calendario', 'salida');
                    divFechaSalida.setAttribute('fechaSalida', fechaSalida);

                    const pTituloSalida = document.createElement('p');
                    pTituloSalida.setAttribute('class', 'adminsitracionReservasTituloNombre marginCeroparaP componenteFechaSalida desactivaEventos');
                    pTituloSalida.textContent = 'Fecha de salida';

                    const pFechaSalida = document.createElement('p');
                    pFechaSalida.setAttribute('class', 'marginCeroparaP componenteFechaSalida desactivaEventos');
                    pFechaSalida.setAttribute('id', 'fechaSalida');
                    pFechaSalida.setAttribute('dataReserva', 'fechaSalida');
                    pFechaSalida.textContent = fechaSalida;

                    divFechaSalida.appendChild(pTituloSalida);
                    divFechaSalida.appendChild(pFechaSalida);
                    divBloqueFecha.appendChild(divFechaSalida);

                    // Anadir divBloqueFecha al div principal
                    divPrincipal.appendChild(divBloqueFecha);


                    // Crear el elemento div.resertaDetallesPropuestaCambioFechaReserva
                    const divPropuestaCambioFecha = document.createElement('div');
                    divPropuestaCambioFecha.setAttribute('class', 'resertaDetallesPropuestaCambioFechaReserva');
                    divPropuestaCambioFecha.setAttribute('componente', 'espacioPropuestaCambioFechaReserva');

                    // Anadir divPropuestaCambioFecha al div principal
                    divPrincipal.appendChild(divPropuestaCambioFecha);





                    const contenedorCategoriasGlobales = document.createElement("div")
                    contenedorCategoriasGlobales.classList.add("administracion_reservas_detallesReserva_contenedorCategoriasGlobales")

                    const contenedorMenuExpandido = document.createElement("div")
                    contenedorMenuExpandido.classList.add("administracion_reservas_detallesReserva_contenedorMenuExpandido")

                    const metadatosMenuExpandido = {
                        rectangularidad: "horizontal",
                        reservaUID: reservaUID
                    }
                    const contenedorBotones = casaVitini.administracion.reservas.detallesReserva.categoriasGlobalesBotonesUI(metadatosMenuExpandido)
                    contenedorMenuExpandido.appendChild(contenedorBotones);


                    // Menu categorias reserva responsiba
                    const marcoMenuResponsivo = document.createElement('div');
                    marcoMenuResponsivo.setAttribute('class', 'administracion_reserva_detallesReserva_marcoMenuResponsivo');
                    marcoMenuResponsivo.innerText = "Menu reserva 1"
                    marcoMenuResponsivo.addEventListener("click", () => {

                        casaVitini.administracion.reservas.detallesReserva.desplegarMenuResponsivo(reservaUID)
                    })



                    contenedorCategoriasGlobales.appendChild(marcoMenuResponsivo);
                    contenedorCategoriasGlobales.appendChild(contenedorMenuExpandido);

                    divPrincipal.appendChild(contenedorCategoriasGlobales);

                    const contenedorDinamico = document.createElement("div")
                    contenedorDinamico.classList.add("administracion_reservas_detallesReserva_contenedorDinamico")
                    contenedorDinamico.setAttribute("componente", "contenedorDinamico")
                    divPrincipal.appendChild(contenedorDinamico)

                    const reservaDetallesBloqueAlojamineto = document.createElement('div');
                    reservaDetallesBloqueAlojamineto.setAttribute('class', 'reservaDetallesBloqueAlojamineto');
                    reservaDetallesBloqueAlojamineto.setAttribute('componente', 'marcoAlojamiento');

                    //divPrincipal.appendChild(reservaDetallesBloqueAlojamineto);


                    // Crear el elemento div.resertaDetallesEspacioTotales
                    const divEspacioTotales = document.createElement('div');
                    divEspacioTotales.setAttribute('class', 'resertaDtallesEspacioTotales');
                    divEspacioTotales.setAttribute('componente', 'espacioTotalesReserva');

                    // Anadir divEspacioTotales al div principal
                    // divPrincipal.appendChild(divEspacioTotales);

                    // Anadir el div principal al contenedor
                    marcoElastico.appendChild(divPrincipal);
                    //marcoElastico.style.marginTop = "100px"
                    const seccion = document.querySelector("section:not([estado=obsoleto])")
                    seccion.appendChild(marcoElastico)

                    if (categoriaGlobalInicial) {
                        const categoriaCammelCase = categoriaGlobalInicial.replace(/_([a-z])/g, (match, group) => group.toUpperCase());
                        const metadatos = {
                            categoria: categoriaCammelCase,
                            origen: "url",
                            reservaUID: reservaUID
                        }
                        return casaVitini.administracion.reservas.detallesReserva.controladorCategorias(metadatos)
                    } else {


                        const directoriosFusionLimpios = []
                        granuladoURL.directorios.map((directorio, indice) => {
                            if (indice <= posicionReservaUID) {
                                directoriosFusionLimpios.push(directorio)
                            }
                        })
                        const directoriosFusion = "/" + directoriosFusionLimpios.join("/")
                        const componentesExistenteUID = "reservaUID_" + reservaUID
                        const titulo = "Casa Vitini"
                        const estado = {
                            zona: directoriosFusion,
                            EstadoInternoZona: "estado",
                            tipoCambio: "parcial",
                            conpontenteExistente: componentesExistenteUID,
                            funcionPersonalizada: "casaVitini.administracion.reservas.detallesReserva.limpiarMenusCategorias"
                        }

                        window.history.replaceState(estado, titulo, directoriosFusion);


                    }
                }


            },
            controladorCategorias: async (metadatos) => {

                const origen = metadatos.origen
                const categoriaALaQueIr = metadatos.categoria
                const selectorBotonCategoriaRenderizado = document.querySelector(`[categoriaReserva="${categoriaALaQueIr}"]`)
                const estadoCategoria = selectorBotonCategoriaRenderizado?.getAttribute("estadoCategoria")
                const categoriaActual = document.querySelector("[estadoCategoria=actual]")?.getAttribute("categoriaReserva")
                const funcionPersonalizada = `casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.${categoriaALaQueIr}.arranque`

                //casaVitini.administracion.reservas.detallesReserva.limpiarMenusCategorias()

                const contructorDireccionFuncion = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales[categoriaALaQueIr]?.arranque
                if (typeof contructorDireccionFuncion === "function") {


                    await casaVitini.administracion.reservas.detallesReserva.categoriasGlobales[categoriaALaQueIr]?.arranque();
                    const granuladoURL = casaVitini.componentes.granuladorURL()
                    const posicionReservaUID = granuladoURL.directorios.findIndex(directorio => directorio === "reservas") + 1;
                    const directoriosFusionLimpios = []
                    granuladoURL.directorios.map((directorio, indice) => {
                        if (indice <= posicionReservaUID) {
                            directoriosFusionLimpios.push(directorio)
                        }
                    })

                    const reservaUID = granuladoURL.directorios[posicionReservaUID]
                    const posicionCategoriaGlobalInicial = (posicionReservaUID + 1)
                    const categoriaGlobalInicial = granuladoURL.directorios[posicionCategoriaGlobalInicial]
                    const tranformadorASnakeCase = categoriaALaQueIr.replace(/[A-Z]/g, palabra => `_${palabra.toLowerCase()}`);
                    const directoriosFusion = "/" + directoriosFusionLimpios.join("/") + "/" + tranformadorASnakeCase

                    const componentesExistenteUID = "reservaUID_" + reservaUID
                    const titulo = "Casa Vitini"

                    const estado = {
                        zona: directoriosFusion,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        conpontenteExistente: componentesExistenteUID,
                        funcionPersonalizada: funcionPersonalizada
                    }
                    if (!categoriaActual) {

                        //
                        //  window.history.replaceState(estado, titulo, directoriosFusion);
                    }
                    if (categoriaALaQueIr !== categoriaActual) {
                        if (origen === "url") {
                            window.history.replaceState(estado, titulo, directoriosFusion);
                        }
                        if (origen === "botonCategoria" && (estadoCategoria === "otra" || !estadoCategoria)) {
                            window.history.pushState(estado, titulo, directoriosFusion);
                        }
                        if (origen === "botonCategoria" && estadoCategoria === "actual") {
                            window.history.replaceState(estado, titulo, directoriosFusion);
                        }
                    }


                } else {

                    // No existe la categoria
                }

            },
            ocultaCategorias: () => {
                casaVitini.componentes.limpiarAdvertenciasInmersivas();

                casaVitini.administracion.reservas.detallesReserva.limpiarMenusCategorias()
                document.querySelector("[componente=contenedorDinamico]").innerHTML = null
            },
            limpiarMenusCategorias: () => {

                casaVitini.componentes.limpiarAdvertenciasInmersivas();

                document.querySelector("[componente=iconoLineaMiscelanea]").removeAttribute("style")
                const botonesCategoria = [...document.querySelectorAll("[categoriaReserva]")]
                botonesCategoria.map((boton) => {
                    boton.removeAttribute("style")
                    boton.setAttribute("estadoCategoria", "otra")
                })
                document.querySelector("[componente=contenedorDinamico]").innerHTML = null


            },
            calcularPrecioReserva: async () => {
                const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                const instanciaUID = document.querySelector("section").getAttribute("instanciaUID")
                const selectorEstadoPago = document.querySelector("[dataReserva=estadoPago]")
                const selectorTotalConImpuestos = document.querySelector("[dataReserva=totalReservaConImpuestos]")

                selectorEstadoPago.innerText = "Recalculando..."
                selectorTotalConImpuestos.innerText = "Recalculando..."

                const transaccion = {
                    zona: "administracion/reservas/detallesReserva",
                    reserva: Number(reservaUID),
                    solo: "globalYFinanciera"
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.reserva) {
                    const estadoPago = respuestaServidor.reserva.estadoPago


                    const estadoPagoUI = {
                        pagado: "Pagado",
                        noPagado: "No pagado",
                        pagadoSuperadamente: "Pagado superadamente",
                        pagadoParcialmente: "Pagado parcialmente"
                    }

                    const totalConImpuestos = respuestaServidor.desgloseFinanciero?.totales?.totalConImpuestos ?
                        respuestaServidor.desgloseFinanciero?.totales?.totalConImpuestos + "$" :
                        "Sin información"

                    if (instanciaUID) {
                        selectorEstadoPago.innerText = estadoPagoUI[estadoPago]
                        selectorTotalConImpuestos.innerText = totalConImpuestos
                        const section = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                        const selectorListaDePagosRenderizada = section.querySelector("[contenedorID=listaDePagos]")
                        const selectorDesgloseFinancieroUIRenderizado = section.querySelector("[contenedorID=desgloseFinancieroUI]")
                        if (selectorListaDePagosRenderizada) {
                            return casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.desplegarUI()
                        }
                        if (selectorDesgloseFinancieroUIRenderizado) {
                            return casaVitini.administracion.reservas.detallesReserva.desgloseFinancieroUI()
                        }



                    }

                }

            },
            desplegarMenuResponsivo: (reservaUID) => {

                document.body.style.overflow = 'hidden';
                const advertenciaInmersivaIU = document.createElement("div")
                advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                advertenciaInmersivaIU.setAttribute("contenedor", "menuResponsivoDesplegado")

                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("administracion_reservas_detallesReservas_contenedorAdvertencaiInmersiva")

                const contenidoAdvertenciaInmersiva = document.createElement("div")
                contenidoAdvertenciaInmersiva.classList.add("adminsitracion_reservas_detallesReserva_contenedorGlobalResponsivo")
                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")

                const contenedor = document.createElement("div")
                contenedor.classList.add("administracion_reservas_detallesReservas_contenedorBotonesEnPanelGlobalResponsivo")


                // divBotones.appendChild(botonAplicarDescuento);
                const botonCerrar = document.createElement('a');
                botonCerrar.setAttribute('class', 'adminitracion_reservas_DetallesReserva_botonCategoria');
                botonCerrar.textContent = 'Cerrar';
                botonCerrar.addEventListener("click", (e) => {
                    e.target.closest("[contenedor=menuResponsivoDesplegado]").remove()
                })
                contenedor.appendChild(botonCerrar);

                const metadatosMenuResponsivo = {
                    rectangularidad: "vertical",
                    reservaUID: reservaUID
                }


                const contenedorBotonesCategoriasGlobales = casaVitini.administracion.reservas.detallesReserva.categoriasGlobalesBotonesUI(metadatosMenuResponsivo)
                contenedor.appendChild(contenedorBotonesCategoriasGlobales)



                contenidoAdvertenciaInmersiva.appendChild(contenedor)
                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                document.body.appendChild(advertenciaInmersivaIU)


                const selectorPreRenderizacion = contenedor
                    .querySelector("[contenedor=menuResponsivoDesplegado]")
                    .querySelector("[componete=panelDetallesReserva]")




            },
            categoriasGlobales: {
                alojamiento: {
                    arranque: async () => {
                        casaVitini.administracion.reservas.detallesReserva.limpiarMenusCategorias()
                        document.querySelector(`[categoriaReserva=alojamiento]`).setAttribute("estadoCategoria", "actual")
                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                        const botonAlojamiento = document.querySelector("[categoriaReserva=alojamiento]")
                        botonAlojamiento.style.background = "blue"
                        botonAlojamiento.style.color = "white"

                        const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                        contenedorDinamico.innerHTML = null
                        const transaccion = {
                            zona: "administracion/reservas/detallesReserva",
                            reserva: Number(reservaUID),
                            solo: "detallesAlojamiento"
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.alojamiento) {

                            const alojamiento = respuestaServidor.alojamiento
                            const pernoctantesSinHabitacion = respuestaServidor?.pernoctantesSinHabitacion

                            const marcoAlojamiento = document.createElement('div');
                            marcoAlojamiento.setAttribute('class', 'reservaDetallesBloqueAlojamineto');
                            marcoAlojamiento.setAttribute('componente', 'marcoAlojamiento');


                            const divPernoctantesSinAlojamiento = document.createElement('div');
                            divPernoctantesSinAlojamiento.setAttribute('class', 'resertaDetallesPernoctantesSinAlojameinto elementoOcultoInicialmente');
                            divPernoctantesSinAlojamiento.setAttribute('componente', 'espacioPernoctantesSinAlojamiento');

                            const tituloPernoctantesSinHabitacion = document.createElement("div")
                            tituloPernoctantesSinHabitacion.classList.add("administracion_reservas_detallesReservas_tituloPernoctantesSinHabitacion")
                            tituloPernoctantesSinHabitacion.innerText = "Pernoctantes asociados a esta reserva sin habitacíon asignada"
                            divPernoctantesSinAlojamiento.appendChild(tituloPernoctantesSinHabitacion)

                            const contenedorPernoctantesSinHabitacion = document.createElement("div")
                            contenedorPernoctantesSinHabitacion.classList.add("administracion_reservas_detallesReserva_contenedorPernoctantesSinHabitacion")
                            contenedorPernoctantesSinHabitacion.setAttribute('componente', 'contenedorPernoctantesSinHabitacion');

                            divPernoctantesSinAlojamiento.appendChild(contenedorPernoctantesSinHabitacion)

                            marcoAlojamiento.appendChild(divPernoctantesSinAlojamiento)

                            const contenedorAlojamientoUI = document.createElement("div")
                            contenedorAlojamientoUI.classList.add("administracionReservaDetallesBloqueContendioAlojamiento")
                            contenedorAlojamientoUI.setAttribute("componente", "contenedorIntermedioAlojamiento")

                            const botonAnadirApartamento = document.createElement('p');
                            botonAnadirApartamento.setAttribute('class', 'adminitracion_reservas_DetallesReserva_botonCategoria');
                            botonAnadirApartamento.setAttribute('componenteBoton', 'anadirApartamento');
                            botonAnadirApartamento.setAttribute('componente', 'menuDesplegable');
                            botonAnadirApartamento.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.abrirMenuReservas)
                            botonAnadirApartamento.textContent = 'Anadir apartamento';
                            contenedorAlojamientoUI.appendChild(botonAnadirApartamento)

                            const espacioAlojamiento = document.createElement("div")
                            espacioAlojamiento.classList.add("reservasDetallesBloqueAlojamiennto")
                            espacioAlojamiento.setAttribute("componente", "espacioAlojamiento")

                            marcoAlojamiento.appendChild(contenedorAlojamientoUI)
                            marcoAlojamiento.appendChild(espacioAlojamiento)

                            for (const [apartamento, configuracionApartamento] of Object.entries(alojamiento)) {

                                let apartamentoIDV = apartamento
                                let apartamentoUID = configuracionApartamento["apartamentoUID"]

                                let apartamentoUI = configuracionApartamento["apartamentoUI"]
                                let configuracionesHabitacion = configuracionApartamento["habitaciones"]
                                let metadatos
                                metadatos = {
                                    apartamentoIDV: apartamentoIDV,
                                    apartamentoUID: apartamentoUID,
                                    apartamentoUI: apartamentoUI
                                }
                                let apartamentoComponenteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.apatamentoUI(metadatos)
                                metadatos = {
                                    apartamentoUI: apartamentoUI,
                                }
                                let apartamentoTituloComponenteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.apartamentoTituloUI(metadatos)
                                apartamentoComponenteUI.appendChild(apartamentoTituloComponenteUI)

                                delete configuracionApartamento["uid"]

                                for (const [habitacion, configuracionHabitacion] of Object.entries(configuracionesHabitacion)) {

                                    const habitacionIDV = habitacion
                                    const habitacionUID = configuracionHabitacion["habitacionUID"]
                                    const habitacionUI = configuracionHabitacion["habitacionUI"]
                                    const camaIDV = configuracionHabitacion["camaIDV"]
                                    const camaUID = configuracionHabitacion["camaUID"]
                                    const camaUI = configuracionHabitacion["camaUI"]

                                    const pernoctantes = configuracionHabitacion.pernoctantes.pernoctantes
                                    const pernoctantesPool = configuracionHabitacion.pernoctantes.pernoctantesPool

                                    metadatos = {
                                        habitacionIDV: habitacionIDV,
                                        habitacionUID: habitacionUID,
                                        apartamentoIDV: apartamentoIDV
                                    }
                                    const habitacionComponenteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.habitacionUI(metadatos)
                                    metadatos = {
                                        habitacionUI: habitacionUI,
                                    }
                                    const habitacionTituloComponenteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.habitacionTituloUI(metadatos)
                                    habitacionComponenteUI.appendChild(habitacionTituloComponenteUI)

                                    metadatos = {
                                        camaIDV: camaIDV,
                                        camaUID: camaUID,
                                        camaUI: camaUI,
                                        apartamentoIDV: apartamentoIDV,
                                        habitacionIDV: habitacionIDV,
                                        habitacionUID: habitacionUID
                                    }

                                    const camaComponenteUI = casaVitini.administracion.reservas.detallesReserva.UIComponentes.camaUI(metadatos)
                                    habitacionComponenteUI.appendChild(camaComponenteUI)

                                    for (const detallesPernoctante of pernoctantes) {

                                        const nombreCompleto = detallesPernoctante.nombrePernoctante
                                        const pasaporte = detallesPernoctante.pasaportePernoctante
                                        const clienteUID = detallesPernoctante.clienteUID
                                        const pernoctanteUID = detallesPernoctante.pernoctanteUID
                                        const fechaCheckIn = detallesPernoctante.fechaCheckIn
                                        const fechaCheckOutAdelantado = detallesPernoctante.fechaCheckOutAdelantado

                                        // cliente clientePool
                                        let metadatos = {
                                            tipoPernoctante: "cliente",
                                            clienteUID: clienteUID,
                                            pernoctanteUID: pernoctanteUID,
                                            estadoAlojamiento: "alojado",
                                            fechaCheckIn: fechaCheckIn,
                                            fechaCheckOutAdelantado: fechaCheckOutAdelantado,
                                        }

                                        const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatos)
                                        metadatos = {
                                            nombreCompleto: nombreCompleto,
                                            clienteUID: clienteUID
                                        }
                                        const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatos)
                                        bloquePernoctantes.appendChild(nombrePernoctante)

                                        metadatos = {
                                            pasaporte: pasaporte,
                                            clienteUID: clienteUID
                                        }
                                        const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatos)
                                        bloquePernoctantes.appendChild(identificacionPernoctante)


                                        habitacionComponenteUI.appendChild(bloquePernoctantes)
                                    }

                                    for (const detallesPernoctantePool of pernoctantesPool) {
                                        const nombreCompleto = detallesPernoctantePool.nombrePernoctante
                                        const pasaporte = detallesPernoctantePool.pasaportePernoctante
                                        const clientePoolUID = detallesPernoctantePool.clientePoolUID
                                        const pernoctanteUID = detallesPernoctantePool.pernoctanteUID

                                        // cliente clientePool
                                        let metadatos = {
                                            tipoPernoctante: "clientePool",
                                            clienteUID: clientePoolUID,
                                            pernoctanteUID: pernoctanteUID,
                                            estadoAlojamiento: "alojado",


                                        }

                                        const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatos)
                                        metadatos = {
                                            nombreCompleto: nombreCompleto,
                                            clienteUID: clientePoolUID
                                        }
                                        const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatos)
                                        bloquePernoctantes.appendChild(nombrePernoctante)

                                        metadatos = {
                                            pasaporte: pasaporte,
                                            clienteUID: clientePoolUID
                                        }
                                        const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatos)
                                        bloquePernoctantes.appendChild(identificacionPernoctante)

                                        habitacionComponenteUI.appendChild(bloquePernoctantes)
                                    }
                                    apartamentoComponenteUI.appendChild(habitacionComponenteUI)
                                }
                                espacioAlojamiento.appendChild(apartamentoComponenteUI)
                            }


                            pernoctantesSinHabitacion.pernoctantes.map((pernoctante) => {

                                const pernoctanteUID = pernoctante.pernoctanteUID
                                const clienteUID = pernoctante.clienteUID
                                const nombreCompleto = pernoctante.nombrePernoctante
                                const pasaporte = pernoctante.pasaportePernoctante
                                const fechaCheckIn = pernoctante.fechaCheckIn
                                const fechaCheckOutAdelantado = pernoctante.fechaCheckOutAdelantado


                                const metadatosPernoctanteUI = {
                                    tipoPernoctante: "cliente",
                                    clienteUID: clienteUID,
                                    pernoctanteUID: pernoctanteUID,
                                    estadoAlojamiento: "noAlojado",
                                    fechaCheckIn: fechaCheckIn,
                                    fechaCheckOutAdelantado: fechaCheckOutAdelantado
                                }

                                const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatosPernoctanteUI)
                                const metadatosNombreUI = {
                                    nombreCompleto: nombreCompleto,
                                }
                                const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatosNombreUI)
                                bloquePernoctantes.appendChild(nombrePernoctante)

                                const metadatosPasaporte = {
                                    pasaporte: pasaporte,
                                }
                                const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatosPasaporte)
                                bloquePernoctantes.appendChild(identificacionPernoctante)


                                contenedorPernoctantesSinHabitacion.appendChild(bloquePernoctantes)
                                divPernoctantesSinAlojamiento.classList.remove("elementoOcultoInicialmente")


                            })

                            pernoctantesSinHabitacion.pernoctantesPool.map((pernoctante) => {

                                const pernoctanteUID = pernoctante["pernoctanteUID"]
                                const clienteUID = pernoctante["clientePoolUID"]
                                const nombreCompleto = pernoctante["nombreCompleto"]
                                const pasaporte = pernoctante["pasaporte"]

                                const metadatosPernoctanteUI = {
                                    tipoPernoctante: "clientePool",
                                    clienteUID: clienteUID,
                                    pernoctanteUID: pernoctanteUID,
                                    estadoAlojamiento: "noAlojado"
                                }

                                const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatosPernoctanteUI)
                                const metadatosNombreUI = {
                                    nombreCompleto: nombreCompleto,
                                    clienteUID: clienteUID
                                }
                                const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatosNombreUI)
                                bloquePernoctantes.appendChild(nombrePernoctante)

                                const metadatosPasaporte = {
                                    pasaporte: pasaporte,
                                    clienteUID: clienteUID
                                }
                                const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatosPasaporte)
                                bloquePernoctantes.appendChild(identificacionPernoctante)

                                contenedorPernoctantesSinHabitacion.appendChild(bloquePernoctantes)
                                divPernoctantesSinAlojamiento.classList.remove("elementoOcultoInicialmente")

                            })

                            contenedorDinamico.appendChild(marcoAlojamiento)
                            casaVitini.administracion.reservas.detallesReserva.transactor.controlEspacioAlojamiento()

                        }
                    }
                },
                enlacesDePago: {
                    detallesEnlace: {
                        UI: async (detallesEnlace) => {
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")


                            document.querySelector("[componente=iconoCargaEnlace]")?.remove()



                            const uidEnlace = detallesEnlace.reserva
                            const nombreEnlace = detallesEnlace.nombreEnlace
                            const codigo = detallesEnlace.codigo
                            const precio = detallesEnlace.precio
                            const descripcion = detallesEnlace.descripcion
                            const estadoPago = detallesEnlace.estadoPago
                            const caducidadUTC = detallesEnlace.caducidadUTC
                            const caducidadMadrid = detallesEnlace.caducidadMadrid
                            const caducidadNicaragua = detallesEnlace.caducidadNicaragua



                            const contenedorAdvertenciaInmersiva = document.createElement("div")
                            contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                            const contenidoAdvertenciaInmersiva = document.createElement("div")
                            contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")

                            const titulo = document.createElement("p")
                            titulo.classList.add("detallesReservaTituloCancelarReserva")
                            titulo.innerText = "Detalles del enlace de pago"
                            contenidoAdvertenciaInmersiva.appendChild(titulo)

                            const bloque = document.createElement("div")
                            bloque.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                            const info = document.createElement("div")
                            info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                            info.innerText = `Aquí tienes los detalles del enlace de pago generado y vigente`
                            bloque.appendChild(info)


                            const campoNombre = document.createElement("input")
                            campoNombre.classList.add("detallesReserva_campoNombreEnlace")
                            campoNombre.placeholder = "Escribe un nombre para el nuevo enlace o genere el enlace con un nombre generico"
                            campoNombre.setAttribute("campo", "nombreEnlace")
                            campoNombre.value = nombreEnlace
                            bloque.appendChild(campoNombre)

                            const contenedorCacudidaUTC = document.createElement("div")
                            contenedorCacudidaUTC.classList.add("detallesReserva_contenedorCaducidad")

                            const tituloCadicdadUTC = document.createElement("div")
                            tituloCadicdadUTC.classList.add("detallesReserva_caducidadTitulo")
                            tituloCadicdadUTC.classList.add("negrita")
                            tituloCadicdadUTC.innerText = "Caducidad en horario universal (UTC)"
                            contenedorCacudidaUTC.appendChild(tituloCadicdadUTC)

                            const caducidadUIUTC = document.createElement("div")
                            caducidadUIUTC.classList.add("detallesReserva_caduciadaUI")
                            caducidadUIUTC.innerText = caducidadUTC
                            contenedorCacudidaUTC.appendChild(caducidadUIUTC)

                            bloque.append(contenedorCacudidaUTC)



                            const contenedorCadudidaMadrid = document.createElement("div")
                            contenedorCadudidaMadrid.classList.add("detallesReserva_contenedorCaducidad")

                            const tituloCadicdadMadrid = document.createElement("div")
                            tituloCadicdadMadrid.classList.add("detallesReserva_caducidadTitulo")
                            tituloCadicdadMadrid.classList.add("negrita")
                            tituloCadicdadMadrid.innerText = "Caducidad en horario de Madrid"
                            contenedorCadudidaMadrid.appendChild(tituloCadicdadMadrid)

                            const caducidadUIMadrid = document.createElement("div")
                            caducidadUIMadrid.classList.add("detallesReserva_caduciadaUI")
                            caducidadUIMadrid.innerText = caducidadMadrid
                            contenedorCadudidaMadrid.appendChild(caducidadUIMadrid)

                            bloque.append(contenedorCadudidaMadrid)


                            const contenedorCadudidaNicaragua = document.createElement("div")
                            contenedorCadudidaNicaragua.classList.add("detallesReserva_contenedorCaducidad")

                            const tituloCadicdadNicaragua = document.createElement("div")
                            tituloCadicdadNicaragua.classList.add("detallesReserva_caducidadTitulo")
                            tituloCadicdadNicaragua.classList.add("negrita")
                            tituloCadicdadNicaragua.innerText = "Caducidad en horario de Nicaragua"
                            contenedorCadudidaNicaragua.appendChild(tituloCadicdadNicaragua)

                            const caducidadUINIcaragua = document.createElement("div")
                            caducidadUINIcaragua.classList.add("detallesReserva_caduciadaUI")
                            caducidadUINIcaragua.innerText = caducidadNicaragua
                            contenedorCadudidaNicaragua.appendChild(caducidadUINIcaragua)

                            bloque.append(contenedorCadudidaNicaragua)




                            const codigoUI = document.createElement("a")
                            codigoUI.classList.add("detallesReserva_enlacePago_codigoUI")
                            codigoUI.setAttribute("href", "/pagos/" + codigo)
                            codigoUI.setAttribute("vista", "/pago/" + codigo)
                            codigoUI.addEventListener("click", casaVitini.componentes.cambiarVista)
                            codigoUI.innerText = " Ir al enlace"
                            bloque.appendChild(codigoUI)


                            const campoDescripcion = document.createElement("textarea")
                            campoDescripcion.classList.add("detallesReserva_campoDescripcion")
                            campoDescripcion.placeholder = "No es obligatorio pero escriba un descripcion si quieres para definir aun mas a este enlace si lo necesitas"
                            campoDescripcion.setAttribute("campo", "descripcion")
                            campoDescripcion.value = descripcion
                            bloque.appendChild(campoDescripcion)


                            contenidoAdvertenciaInmersiva.appendChild(bloque)

                            const bloqueBotones = document.createElement("div")
                            bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                            const botonConfirmar = document.createElement("div")
                            botonConfirmar.classList.add("detallesReservaCancelarBoton")
                            botonConfirmar.setAttribute("componente", "botonActualizarEnlace")
                            botonConfirmar.innerText = "Actualizar enlace de pago"
                            botonConfirmar.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.acutalizarEnlace)
                            bloqueBotones.appendChild(botonConfirmar)


                            const botonEliminar = document.createElement("div")
                            botonEliminar.classList.add("detallesReservaCancelarBoton")
                            botonEliminar.setAttribute("componente", "botonConfirmarCancelarReserva")
                            botonEliminar.innerText = "Eliminar enlace de pago"
                            botonEliminar.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.eliminarEnlace.UI)
                            bloqueBotones.appendChild(botonEliminar)

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("detallesReservaCancelarBoton")
                            botonCancelar.innerText = "Cerrar detalles del enlace de pago"
                            botonCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                            bloqueBotones.appendChild(botonCancelar)
                            contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)
                            const enlacePagoUIRenderizada = document.querySelector("[componenteUID=enlaceDePagoUI]")
                            enlacePagoUIRenderizada.innerHTML = null
                            contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)

                            enlacePagoUIRenderizada.appendChild(contenedorAdvertenciaInmersiva)





                        }
                    },
                    arranque: async (e) => {
                        casaVitini.administracion.reservas.detallesReserva.limpiarMenusCategorias()
                        document.querySelector(`[categoriaReserva=enlacesDePago]`).setAttribute("estadoCategoria", "actual")

                        const botonEnlacesDePago = document.querySelector("[categoriaReserva=enlacesDePago]")
                        botonEnlacesDePago.style.background = "blue"
                        botonEnlacesDePago.style.color = "white"

                        const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                        contenedorDinamico.innerHTML = null

                        const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const transaccion = {
                            zona: "administracion/enlacesDePago/obtenerEnlaces",
                            reservaUID: Number(reservaUID)
                        }

                        const contenedorEnlacesDePago = document.createElement("div")
                        contenedorEnlacesDePago.setAttribute("class", "administracion_reservas_detallesReserva_enlacesDePago_contenedorEnlacesDePago")
                        contenedorEnlacesDePago.setAttribute("instanciaUID", instanciaUID)
                        contenedorEnlacesDePago.setAttribute("componente", "categoriaEnlacesDePago")

                        const contenedorInformacionGlobal = document.createElement("div")
                        contenedorInformacionGlobal.classList.add("administracion_reservas_detallesReserva_contenedorEnlacesDePago")

                        const titulo = document.createElement("p")
                        titulo.classList.add("detallesReserva_reembolso_tituloGlobal")
                        titulo.innerText = "Enlaces de pago"
                        //contenedorInformacionGlobal.appendChild(titulo)


                        const infoGlobal = document.createElement("div")
                        infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                        infoGlobal.innerText = `Aqui tienes los enlaces de pago generados para realizar pagos para esta reserva atraves de la pasarela.`
                        //contenedorInformacionGlobal.appendChild(infoGlobal)


                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReserva_enlacesDePago_bloqueBotones")

                        const botonEnlacesDePago1 = document.createElement("div")
                        botonEnlacesDePago1.classList.add("detallesReserva_transacciones_botonV1")
                        botonEnlacesDePago1.innerText = "Volver a transacciones"
                        //bloqueBotones.appendChild(botonEnlacesDePago1);

                        const botonCrearPagoManual = document.createElement("div")
                        botonCrearPagoManual.classList.add("detallesReserva_transacciones_botonV1")
                        botonCrearPagoManual.innerText = "Crear un enlace de pago"
                        botonCrearPagoManual.addEventListener("click", () => {
                            casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.crearEnlace.UI(instanciaUID)
                        })
                        bloqueBotones.appendChild(botonCrearPagoManual)

                        const botonCerrar = document.createElement("div")
                        botonCerrar.classList.add("detallesReserva_transacciones_botonV1")
                        botonCerrar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                        botonCerrar.innerText = "Cerrar"
                        //bloqueBotones.appendChild(botonCerrar)

                        contenedorInformacionGlobal.appendChild(bloqueBotones)
                        contenedorEnlacesDePago.appendChild(contenedorInformacionGlobal)
                        const mensajeSpinner = "Esperando a Casa Vitini..."
                        const spinnerPorRenderizar = casaVitini.componentes.spinner(mensajeSpinner)

                        const contenedorListaEnlacesDePagos = document.createElement("div")
                        contenedorListaEnlacesDePagos.classList.add("administracion_reservas_detallesReserva_contenedorListaEnlacesDePago")
                        contenedorListaEnlacesDePagos.setAttribute("componente", "contenedorListaEnlacesDePago")

                        contenedorListaEnlacesDePagos.appendChild(spinnerPorRenderizar)
                        contenedorEnlacesDePago.appendChild(contenedorListaEnlacesDePagos)
                        contenedorDinamico.appendChild(contenedorEnlacesDePago)


                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {

                            const seleccionarInstancia = document.querySelector(`[componente=categoriaEnlacesDePago][instanciaUID="${instanciaUID}"] [componente=contenedorListaEnlacesDePago]`)
                            if (seleccionarInstancia) {

                                seleccionarInstancia.style.justifyContent = "flex-start";
                                seleccionarInstancia.innerHTML = null

                                const enlacesDePagoGenerados = respuestaServidor?.ok
                                if (enlacesDePagoGenerados.length === 0) {

                                    const infoSinEnlaces = document.createElement("div")
                                    infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                                    infoSinEnlaces.setAttribute("componente", "contenedorInfoSinEnlaces")
                                    infoSinEnlaces.innerText = "No hay ningún enlace de pago generado"
                                    contenedorDinamico.appendChild(infoSinEnlaces)
                                }
                                if (enlacesDePagoGenerados.length > 0) {
                                    for (const detallesDelEnlace of enlacesDePagoGenerados) {
                                        const metadatos = {
                                            enlaceUID: detallesDelEnlace.enlaceUID,
                                            nombreEnlace: detallesDelEnlace.nombreEnlace,
                                            enlace: detallesDelEnlace.enlace,
                                            cantidad: detallesDelEnlace.cantidad,
                                            estadoPago: detallesDelEnlace.estadoPago,
                                            instanciaUID: instanciaUID
                                        }
                                        const enlaceUI = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.enlaceUI(metadatos)
                                        seleccionarInstancia.appendChild(enlaceUI)
                                    }
                                }
                            }
                        }
                    },
                    arranque_obsoleto: async () => {
                        document.body.style.overflow = "hidden";

                        const advertenciasInmersivasRenderizadas = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        advertenciasInmersivasRenderizadas.map((advertencia) =>
                            advertencia.remove()
                        )
                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componenteUID", "enlaceDePagoUI")


                        const spinnerContainer = document.createElement('div');
                        spinnerContainer.setAttribute("componente", "iconoCargaEnlace");

                        spinnerContainer.classList.add("lds-spinner");

                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement('div');
                            spinnerContainer.appendChild(div);
                        }


                        const info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.innerText = "Esperando a la Casa Vitini..."


                        const botoCancelar = document.createElement("div")
                        botoCancelar.setAttribute("class", "botonV1AdvertenciaInmersiva")
                        botoCancelar.innerText = "Cancelar"
                        botoCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)


                        const advertenciaInmersivaIURenderizada = document.querySelector("[componenteUID=enlaceDePagoUI]")
                        if (!advertenciaInmersivaIURenderizada) {
                            advertenciaInmersivaIU.appendChild(spinnerContainer)
                            advertenciaInmersivaIU.appendChild(info)
                            advertenciaInmersivaIU.appendChild(botoCancelar)

                            document.body.appendChild(advertenciaInmersivaIU)

                        } else {
                            advertenciaInmersivaIURenderizada.appendChild(spinnerContainer)
                            advertenciaInmersivaIURenderizada.appendChild(info)
                            advertenciaInmersivaIURenderizada.appendChild(botoCancelar)
                        }


                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const transaccion = {
                            zona: "administracion/enlacesDePago/detallesDelEnlace",
                            enlaceUID: Number(reservaUID)
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.noExisteElEnlace === "reservaSinEnlace") {
                            return casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.crearEnlace.UI()
                        }
                        if (respuestaServidor?.error) {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            return casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.UI.detallesEnlace(respuestaServidor?.ok)
                        }


                    },
                    eliminarEnlace: {
                        UI: async (datosElimiacion) => {
                            document.body.style.overflow = 'hidden';
                            const enlaceUID = datosElimiacion.enlaceUID
                            const instanciaUID = datosElimiacion.instanciaUID

                            const advertenciaInmersivaIU = document.createElement("div")
                            advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                            advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                            const contenedorAdvertenciaInmersiva = document.createElement("div")
                            contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                            const contenidoAdvertenciaInmersiva = document.createElement("div")
                            contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")

                            const tituloCancelarReserva = document.createElement("p")
                            tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                            tituloCancelarReserva.innerText = "Eliminar enlae de pago"
                            contenidoAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                            const bloqueBloqueoApartamentos = document.createElement("div")
                            bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                            const tituloBloquoApartamentos = document.createElement("div")
                            tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                            tituloBloquoApartamentos.innerText = "¿Quieres confirmar las eliminacíon de este enlace de pago? Sus implicaciones seran inmediatas y el enlace de acceso temporal pasara a ser obsoleto"

                            bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                            contenidoAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                            const bloqueBotones = document.createElement("div")
                            bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("detallesReservaCancelarBoton")
                            botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                            botonCancelar.innerText = "Confirmar y eliminar enlace"
                            botonCancelar.addEventListener("click", () => {
                                const datosElimiacion = {
                                    enlaceUID: enlaceUID,
                                    instanciaUID: instanciaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.eliminarEnlace.confirmar(datosElimiacion)
                            })
                            bloqueBotones.appendChild(botonCancelar)


                            const botonVolverAlEnlace = document.createElement("div")
                            botonVolverAlEnlace.classList.add("detallesReservaCancelarBoton")
                            botonVolverAlEnlace.setAttribute("componente", "botonConfirmarCancelarReserva")
                            botonVolverAlEnlace.innerText = "Volver a los detalles del enlace"
                            botonVolverAlEnlace.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.desplegarUI)
                            //bloqueBotones.appendChild(botonVolverAlEnlace)

                            const botonCancelarProcesoCancelacion = document.createElement("div")
                            botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                            botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion del enlace"
                            botonCancelarProcesoCancelacion.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)

                            bloqueBotones.appendChild(botonCancelarProcesoCancelacion)


                            contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)
                            contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                            advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                            document.body.appendChild(advertenciaInmersivaIU)
                        },
                        confirmar: async (datosElimiacion) => {
                            const enlaceUID = datosElimiacion.enlaceUID
                            const instanciaUID = datosElimiacion.instanciaUID
                            const transaccion = {
                                zona: "administracion/enlacesDePago/eliminarEnlace",
                                enlaceUID: Number(enlaceUID)
                            }
                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                            if (respuestaServidor?.error) {
                                casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                const contenedorEspacioEnlacesDePago = document.querySelector(`[instanciaUID="${instanciaUID}"]`)


                                document.querySelector(`[enlacePagoUID="${enlaceUID}"]`)?.remove()
                                casaVitini.componentes.limpiarAdvertenciasInmersivas()

                                const contenedorEnlacesDePago = contenedorEspacioEnlacesDePago.querySelector("[componente=contenedorListaEnlacesDePago]")
                                const selectorEnlaces = contenedorEspacioEnlacesDePago.querySelectorAll("[enlacePagoUID]")

                                if (selectorEnlaces.length === 0) {

                                    if (contenedorEspacioEnlacesDePago) {
                                        const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                        const infoSinEnlaces = document.createElement("div")
                                        infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                                        infoSinEnlaces.setAttribute("componente", "contenedorInfoSinEnlaces")
                                        infoSinEnlaces.innerText = "No hay ningún enlace de pago generado"
                                        contenedorDinamico.appendChild(infoSinEnlaces)

                                    }


                                }



                            }

                        }
                    },
                    crearEnlace: {
                        UI: async (instanciaUID) => {
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                            const advertenciaInmersivaIU = document.createElement("div")
                            advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                            advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                            const contenedorAdvertenciaInmersiva = document.createElement("div")
                            contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                            const contenidoAdvertenciaInmersiva = document.createElement("div")
                            contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                            contenidoAdvertenciaInmersiva.setAttribute("espacio", "formularioCrearEnlaceDePago")

                            const titulo = document.createElement("p")
                            titulo.classList.add("detallesReservaTituloCancelarReserva")
                            titulo.innerText = "Generar enlace de pago"
                            contenidoAdvertenciaInmersiva.appendChild(titulo)

                            const bloque = document.createElement("div")
                            bloque.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                            let info = document.createElement("div")
                            info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                            info.innerText = `
                            Genera un enlace de pago para poder enviarlo a un cliente y que realice el pago de la reserva. No es obligatorio escribir un nombre, pero si recomendable por si necesita acordarse de por qué genero este enlace. Si no define ningún nombre, este se llamará "Enlace de pago de la reserva ${reservaUID}". Este es el nombre automático que tendrá este enlace si no define un nombre en específico. Recuerde que todos los enlaces generados y su gestión centralizada la puede encontrar en el panel de administración en el botón de Enlaces de pago desde el menú administración o en su reserva correspondiente dentro del apartado enlaces de pago.`
                            bloque.appendChild(info)


                            let campo = document.createElement("input")
                            campo.classList.add("detallesReserva_campoNombreEnlace")
                            campo.setAttribute("campo", "nombreEnlace")
                            campo.placeholder = "Escribe un nombre para el nuevo enlace si quiere"
                            bloque.appendChild(campo)

                            info = document.createElement("div")
                            info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                            info.innerText = `Determina la cantidad de pago del enlace, recuerda que los precios de cobro deben de escribirse con dos decimales separados por punto. Por ejemplo, para crear un enlace de pago de 35 dólares escribe 35.00`
                            bloque.appendChild(info)

                            campo = document.createElement("input")
                            campo.classList.add("detallesReserva_campoNombreEnlace")
                            campo.classList.add("negrita")
                            campo.setAttribute("campo", "cantidad")
                            campo.placeholder = "Cantidad (Obligatorio)"
                            bloque.appendChild(campo)


                            info = document.createElement("div")
                            info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                            info.innerText = `Determina el tiempo de vigencia del enlace. Por defecto el sistema aplica 72h si no especificas una vigencia concreta. Pasada la vigencia el enlace ya no puede realizar el cobro y desaparece`
                            bloque.appendChild(info)

                            campo = document.createElement("input")
                            campo.classList.add("detallesReserva_campoNombreEnlace")
                            campo.setAttribute("campo", "horasCaducidad")
                            campo.placeholder = "Caducida en horas, por defecto 72h"
                            bloque.appendChild(campo)

                            const campoDescripcion = document.createElement("textarea")
                            campoDescripcion.classList.add("detallesReserva_campoDescripcion")
                            campoDescripcion.setAttribute("campo", "descripcion")
                            campoDescripcion.placeholder = "No es obligatorio pero escriba un descripcion si quieres para definir aun mas a este enlace si lo necesitas"
                            // bloque.appendChild(campoDescripcion)

                            contenidoAdvertenciaInmersiva.appendChild(bloque)

                            const bloqueBotones = document.createElement("div")
                            bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                            const botonConfirmar = document.createElement("div")
                            botonConfirmar.classList.add("detallesReservaCancelarBoton")
                            botonConfirmar.setAttribute("componente", "botonConfirmarCancelarReserva")
                            botonConfirmar.innerText = "Confirmar y crear enlace"
                            botonConfirmar.addEventListener("click", () => {
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.crearEnlace.confirmar(instanciaUID)
                            })
                            bloqueBotones.appendChild(botonConfirmar)

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("detallesReservaCancelarBoton")
                            botonCancelar.innerText = "Cancelar la creacíon del enlace"
                            botonCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                            bloqueBotones.appendChild(botonCancelar)
                            contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)

                            const contenedorGlobal = document.createElement("div")
                            contenedorGlobal.classList.add("detallesReserva_enlaceDePago_contenedorGlobal")



                            contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                            advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)

                            document.body.appendChild(advertenciaInmersivaIU)



                        },
                        confirmar: async (instanciaUID) => {
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                            const nombreEnlace = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=nombreEnlace]")
                            const cantidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=cantidad]")
                            const horasCaducidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=horasCaducidad]")

                            const transaccion = {
                                zona: "administracion/enlacesDePago/crearNuevoEnlace",
                                reservaUID: reservaUID,
                                nombreEnlace: nombreEnlace.value,
                                cantidad: cantidad.value,
                                horasCaducidad: horasCaducidad.value,
                            }
                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                const seleccionarInstancia = document.querySelector(`[componente=categoriaEnlacesDePago][instanciaUID="${instanciaUID}"] [componente=contenedorListaEnlacesDePago]`)
                                if (seleccionarInstancia) {

                                    const metadatos = {
                                        enlaceUID: respuestaServidor.enlaceUID,
                                        nombreEnlace: respuestaServidor.nombreEnlace,
                                        enlace: respuestaServidor.enlace,
                                        cantidad: respuestaServidor.cantidad,
                                        estadoPago: "noPagado",
                                        instanciaUID: instanciaUID
                                    }
                                    const enlaceUI = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.enlaceUI(metadatos)

                                    const primerElemento = seleccionarInstancia.firstChild;
                                    seleccionarInstancia.insertBefore(enlaceUI, primerElemento);

                                    document.querySelector("[componente=contenedorInfoSinEnlaces]")?.remove()


                                }
                            }
                        }
                    },
                    acutalizarEnlace: async () => {

                        const botonActualizar = document.querySelector("[componente=botonActualizarEnlace]")
                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                        const nombreEnlace = document.querySelector("[campo=nombreEnlace]")
                        const descripcion = document.querySelector("[campo=descripcion]")
                        botonActualizar.innerText = "Actualizando, espera..."
                        botonActualizar.style.pointerEvents = "none"


                        const transaccion = {
                            zona: "administracion/enlacesDePago/modificarEnlace",
                            enlaceUID: Number(reservaUID),
                            nombreEnlace: nombreEnlace.value,
                            descripcion: descripcion.value
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const advertenciasInmersivasRenderizadas = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            advertenciasInmersivasRenderizadas.map((advertencia) =>
                                advertencia.remove()
                            )
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            botonActualizar.innerText = "Actualizar enlace de pago"
                            botonActualizar.removeAttribute("style")

                        }
                    },
                    enlaceUI: (metadatos) => {
                        const enlaceUID = metadatos.enlaceUID
                        const nombreEnlace = metadatos.nombreEnlace
                        const enlace = metadatos.enlace
                        const cantidad = metadatos.cantidad
                        const estadoPago = metadatos.estadoPago
                        const instanciaUID = metadatos.instanciaUID

                        const bloqueDatosGenerales = document.createElement("div")
                        bloqueDatosGenerales.classList.add("detallesReserva_transacciones_bloqueDatosGenerales")
                        bloqueDatosGenerales.setAttribute("enlacePagoUID", enlaceUID)

                        const contenedorDatosEnlace = document.createElement("div")
                        contenedorDatosEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_contenedorDatosEnlace")

                        // Enlace UID
                        let bloqueInfoDato = document.createElement("div")
                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")

                        let bloqueInfo = document.createElement("div")
                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                        bloqueInfo.classList.add("negrita")
                        bloqueInfo.innerText = "Enlace UID"
                        bloqueInfoDato.appendChild(bloqueInfo)

                        let bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                        bloqueDato.innerText = enlaceUID
                        bloqueInfoDato.appendChild(bloqueDato)

                        contenedorDatosEnlace.appendChild(bloqueInfoDato)

                        // Cantidad enlace
                        bloqueInfoDato = document.createElement("div")
                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")

                        bloqueInfo = document.createElement("div")
                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                        bloqueInfo.classList.add("negrita")
                        bloqueInfo.innerText = "Cantidad"
                        bloqueInfoDato.appendChild(bloqueInfo)

                        bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                        bloqueDato.innerText = cantidad + "$"
                        bloqueInfoDato.appendChild(bloqueDato)
                        contenedorDatosEnlace.appendChild(bloqueInfoDato)

                        // Nombre del enlace
                        bloqueInfoDato = document.createElement("div")
                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")

                        bloqueInfo = document.createElement("div")
                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                        bloqueInfo.classList.add("negrita")

                        bloqueInfo.innerText = "Nombre del enlace"
                        bloqueInfoDato.appendChild(bloqueInfo)

                        bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                        bloqueDato.innerText = nombreEnlace
                        bloqueInfoDato.appendChild(bloqueDato)
                        contenedorDatosEnlace.appendChild(bloqueInfoDato)


                        // Estado del pago
                        bloqueInfoDato = document.createElement("div")
                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")

                        bloqueInfo = document.createElement("div")
                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                        bloqueInfo.classList.add("negrita")

                        bloqueInfo.innerText = "Estado del pago"
                        bloqueInfoDato.appendChild(bloqueInfo)

                        bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                        bloqueDato.innerText = estadoPago
                        bloqueInfoDato.appendChild(bloqueDato)
                        contenedorDatosEnlace.appendChild(bloqueInfoDato)


                        bloqueDatosGenerales.appendChild(contenedorDatosEnlace)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("administracion_reservas_detallesReservas_enlacesDePago_contenedorBotones")

                        const botonIrAlEnlace = document.createElement("a")
                        botonIrAlEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                        botonIrAlEnlace.innerText = "Ir al enlace"
                        botonIrAlEnlace.setAttribute("href", "/pagos/" + enlace)
                        botonIrAlEnlace.setAttribute("target", "_blank")
                        contenedorBotones.appendChild(botonIrAlEnlace)

                        const botonCopiarEnlace = document.createElement("div")
                        botonCopiarEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                        botonCopiarEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonCopiarPulsacion")

                        botonCopiarEnlace.innerText = "Copiar URL al portapapeles"
                        botonCopiarEnlace.addEventListener("click", () => {

                            const enlaceURL = window.location.hostname + "/pagos/" + enlace
                            navigator.clipboard.writeText(enlaceURL)
                                .then(() => {

                                })
                                .catch((err) => {

                                });
                        })
                        contenedorBotones.appendChild(botonCopiarEnlace)

                        const botonEliminar = document.createElement("div")
                        botonEliminar.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                        botonEliminar.innerText = "Eliminar enlaces"
                        botonEliminar.addEventListener("click", () => {
                            const datosElimiacion = {
                                enlaceUID: enlaceUID,
                                instanciaUID: instanciaUID,
                            }
                            casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.eliminarEnlace.UI(datosElimiacion)
                        })
                        contenedorBotones.appendChild(botonEliminar)

                        bloqueDatosGenerales.appendChild(contenedorBotones)
                        return bloqueDatosGenerales

                    }

                },
                transacciones: {
                    UI: {
                        listaDePagos: async (listaDePagos) => {
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                            const totalReserva = listaDePagos.totalReserva
                            const totalPagado = listaDePagos.totalPagado
                            const faltantePorPagar = listaDePagos.faltantePorPagar
                            const instanciaUID = listaDePagos.instanciaUID

                            const totalReembolsado = listaDePagos.totalReembolsado
                            const porcentajeReembolsado = listaDePagos.porcentajeReembolsado
                            const porcentajePagado = listaDePagos.porcentajePagado


                            const pagos = listaDePagos.pagos // array

                            const contenedorAdvertenciaInmersiva = document.createElement("div")
                            contenedorAdvertenciaInmersiva.classList.add("administracion_reservas_detallesReserva_contenedorListaDePagos")

                            const titulo = document.createElement("p")
                            titulo.classList.add("detallesReserva_reembolso_tituloGlobal")
                            titulo.innerText = "Transacciones"
                            contenedorAdvertenciaInmersiva.appendChild(titulo)

                            const infoGlobal = document.createElement("div")
                            infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                            infoGlobal.innerText = `Estos son las listas de pagos de esta reserva. Los pagos pueden realizarse por la pasarela o si realiza un pago en efectivo deberá añadir un pago manual desd el botón correspondiente. Para ver los detalles de un pago y sus reembolsos si los hubiera pulse en un pago. Para realizar un reembolso entra en los detalles de un pago y desde ahí podrás realizar el reembolso `
                            contenedorAdvertenciaInmersiva.appendChild(infoGlobal)

                            const bloqueTransacciones = document.createElement("div")
                            bloqueTransacciones.classList.add("detallesReserva_transacciones_bloqueGlobal")
                            bloqueTransacciones.setAttribute("contenedor", "transaccionesUI")

                            const bloqueBotones = document.createElement("div")
                            bloqueBotones.classList.add("detallesReserva_transacciones_bloqueBotones")

                            const botonEnlacesDePago = document.createElement("div")
                            botonEnlacesDePago.classList.add("detallesReserva_transacciones_botonV1")
                            botonEnlacesDePago.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.UI.enlacesDePago)
                            botonEnlacesDePago.innerText = "Crear un enlace de pago"
                            //bloqueBotones.appendChild(botonEnlacesDePago)

                            const botonCrearPagoManual = document.createElement("div")
                            botonCrearPagoManual.classList.add("detallesReserva_transacciones_botonV1")
                            botonCrearPagoManual.addEventListener("click", () => {
                                const metadatos = {
                                    instanciaUID_ContenedorTransacciones: instanciaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.crearPagoManual.UI(metadatos)
                            })
                            botonCrearPagoManual.innerText = "Crear pago manual"
                            bloqueBotones.appendChild(botonCrearPagoManual)



                            const botonCerrar = document.createElement("div")
                            botonCerrar.classList.add("detallesReserva_transacciones_botonV1")
                            botonCerrar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                            botonCerrar.innerText = "Cerrar"
                            //bloqueBotones.appendChild(botonCerrar)

                            bloqueTransacciones.appendChild(bloqueBotones)

                            const bloqueDatosGenerales = document.createElement("div")
                            bloqueDatosGenerales.classList.add("detallesReserva_transacciones_bloqueDatosGenerales")

                            // Total reserva
                            let bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")

                            let bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")
                            bloqueInfo.innerText = "Total de la reserva"
                            bloqueInfoDato.appendChild(bloqueInfo)

                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.setAttribute("componentePago", "totalReserva")
                            bloqueDato.innerText = totalReserva + "$"
                            bloqueInfoDato.appendChild(bloqueDato)

                            bloqueDatosGenerales.appendChild(bloqueInfoDato)


                            // Total pagado
                            bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")
                            bloqueInfo.setAttribute("componentePago", "porcentajePagado")
                            bloqueInfo.innerText = `Total pagado (${porcentajePagado})`
                            bloqueInfoDato.appendChild(bloqueInfo)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.setAttribute("componentePago", "totalPagado")
                            bloqueDato.innerText = totalPagado + "$"
                            bloqueInfoDato.appendChild(bloqueDato)
                            bloqueDatosGenerales.appendChild(bloqueInfoDato)


                            // Total reembolsado
                            bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")
                            bloqueInfo.setAttribute("componentePago", "porcentajeReembolsado")
                            bloqueInfo.innerText = `Total reembolsado (${porcentajeReembolsado})`
                            bloqueInfoDato.appendChild(bloqueInfo)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.setAttribute("componentePago", "totalReembolsado")
                            bloqueDato.innerText = totalReembolsado + "$"
                            bloqueInfoDato.appendChild(bloqueDato)
                            bloqueDatosGenerales.appendChild(bloqueInfoDato)

                            // Faltante por pagar
                            bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")

                            bloqueInfo.innerText = "Faltante por pagar"
                            bloqueInfoDato.appendChild(bloqueInfo)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.setAttribute("componentePago", "faltantePorPagar")
                            bloqueDato.innerText = faltantePorPagar + "$"
                            bloqueInfoDato.appendChild(bloqueDato)
                            bloqueDatosGenerales.appendChild(bloqueInfoDato)

                            bloqueTransacciones.appendChild(bloqueDatosGenerales)

                            if (pagos.length === 0) {

                                const infoNoPagos = document.createElement("div")
                                infoNoPagos.classList.add("reservaDetalles_transacciones_textoV1")
                                infoNoPagos.setAttribute("contenedor", "infoNoPagos")
                                infoNoPagos.innerText = "Esta reserva no tiene ningún pago. Los pagos que se realizen por la pasarela de pagos se mostraran automatícamente aquí. Sin enbargo si ha cobrado esta reserva por ejemplo en efectivo o con un TPV deberia de añadir un pago manual. No es obligatorio añadir un pago manual pero si quiere tener un seguimiento centralizado de todos los pago en esta reserva tiene esa opcíon."
                                bloqueTransacciones.appendChild(infoNoPagos)
                            }

                            if (pagos.length > 0) {
                                const bloqueListaDePagos = document.createElement("div")
                                bloqueListaDePagos.classList.add("reservaDetalles_transacciones_bloqueListaDePagos")
                                bloqueListaDePagos.setAttribute("contenedor", "listaDePagos")
                                for (const detallesDelPago of pagos) {
                                    const metadatos = {
                                        pagoUID: detallesDelPago.pagoUID,
                                        plataformaDePago: detallesDelPago.plataformaDePago,
                                        pagoUIDPasarela: detallesDelPago.pagoUIDPasarela,
                                        tarjetaDigitos: detallesDelPago.tarjetaDigitos,
                                        fechaPago: detallesDelPago.fechaPago,
                                        tarjeta: detallesDelPago.tarjeta,
                                        cantidad: detallesDelPago.cantidad,
                                        sumaDeLoReembolsado: detallesDelPago.sumaDeLoReembolsado,
                                        reembolsado: detallesDelPago.reembolsado,
                                        instanciaUID: instanciaUID
                                    }

                                    const pagoUI = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.UI.pagoUI(metadatos)
                                    bloqueListaDePagos.appendChild(pagoUI)

                                }
                                bloqueTransacciones.appendChild(bloqueListaDePagos)

                            }

                            contenedorAdvertenciaInmersiva.appendChild(bloqueTransacciones)

                            const enlacePagoUIRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            enlacePagoUIRenderizada.innerHTML = null
                            enlacePagoUIRenderizada.appendChild(contenedorAdvertenciaInmersiva)





                        },
                        realizarReembolso_quienMeLlama: async () => {
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                            const transaccion = {
                                zona: "administracion/enlacesDePago/detallesDelEnlace",
                                enlaceUID: Number(reservaUID)
                            }

                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                            if (respuestaServidor?.error) {
                                const advertenciasInmersivasRenderizadas = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                                advertenciasInmersivasRenderizadas.map((advertencia) =>
                                    advertencia.remove()
                                )

                                casaVitini.administracion.comportamiento_de_precios.portadaUI()
                                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                document.querySelector("[componente=iconoCargaEnlace]")?.remove()



                                const detallesEnlace = respuestaServidor?.ok
                                const uidEnlace = detallesEnlace.reserva
                                const nombreEnlace = detallesEnlace.nombreEnlace
                                const codigo = detallesEnlace.codigo
                                const precio = detallesEnlace.precio
                                const descripcion = detallesEnlace.descripcion
                                const estadoPago = detallesEnlace.estadoPago
                                const caducidadUTC = detallesEnlace.caducidadUTC
                                const caducidadMadrid = detallesEnlace.caducidadMadrid
                                const caducidadNicaragua = detallesEnlace.caducidadNicaragua

                                const advertenciaInmersivaIU = document.createElement("div")
                                advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                                const contenedorAdvertenciaInmersiva = document.createElement("div")
                                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                                const titulo = document.createElement("p")
                                titulo.classList.add("detallesReservaTituloCancelarReserva")
                                titulo.innerText = "Detalles del enlace de pago"
                                contenedorAdvertenciaInmersiva.appendChild(titulo)

                                const bloque = document.createElement("div")
                                bloque.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                                const info = document.createElement("div")
                                info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                info.innerText = `Aquí tienes los detalles del enlace de pago generado y vigente`
                                bloque.appendChild(info)


                                const campoNombre = document.createElement("input")
                                campoNombre.classList.add("detallesReserva_campoNombreEnlace")
                                campoNombre.placeholder = "Escribe un nombre para el nuevo enlace o genere el enlace con un nombre generico"
                                campoNombre.setAttribute("campo", "nombreEnlace")
                                campoNombre.value = nombreEnlace
                                bloque.appendChild(campoNombre)

                                const contenedorCacudidaUTC = document.createElement("div")
                                contenedorCacudidaUTC.classList.add("detallesReserva_contenedorCaducidad")

                                const tituloCadicdadUTC = document.createElement("div")
                                tituloCadicdadUTC.classList.add("detallesReserva_caducidadTitulo")
                                tituloCadicdadUTC.classList.add("negrita")
                                tituloCadicdadUTC.innerText = "Caducidad en horario universal (UTC)"
                                contenedorCacudidaUTC.appendChild(tituloCadicdadUTC)

                                const caducidadUIUTC = document.createElement("div")
                                caducidadUIUTC.classList.add("detallesReserva_caduciadaUI")
                                caducidadUIUTC.innerText = caducidadUTC
                                contenedorCacudidaUTC.appendChild(caducidadUIUTC)

                                bloque.append(contenedorCacudidaUTC)



                                const contenedorCadudidaMadrid = document.createElement("div")
                                contenedorCadudidaMadrid.classList.add("detallesReserva_contenedorCaducidad")

                                const tituloCadicdadMadrid = document.createElement("div")
                                tituloCadicdadMadrid.classList.add("detallesReserva_caducidadTitulo")
                                tituloCadicdadMadrid.classList.add("negrita")
                                tituloCadicdadMadrid.innerText = "Caducidad en horario de Madrid"
                                contenedorCadudidaMadrid.appendChild(tituloCadicdadMadrid)

                                const caducidadUIMadrid = document.createElement("div")
                                caducidadUIMadrid.classList.add("detallesReserva_caduciadaUI")
                                caducidadUIMadrid.innerText = caducidadMadrid
                                contenedorCadudidaMadrid.appendChild(caducidadUIMadrid)

                                bloque.append(contenedorCadudidaMadrid)


                                const contenedorCadudidaNicaragua = document.createElement("div")
                                contenedorCadudidaNicaragua.classList.add("detallesReserva_contenedorCaducidad")

                                const tituloCadicdadNicaragua = document.createElement("div")
                                tituloCadicdadNicaragua.classList.add("detallesReserva_caducidadTitulo")
                                tituloCadicdadNicaragua.classList.add("negrita")
                                tituloCadicdadNicaragua.innerText = "Caducidad en horario de Nicaragua"
                                contenedorCadudidaNicaragua.appendChild(tituloCadicdadNicaragua)

                                const caducidadUINIcaragua = document.createElement("div")
                                caducidadUINIcaragua.classList.add("detallesReserva_caduciadaUI")
                                caducidadUINIcaragua.innerText = caducidadNicaragua
                                contenedorCadudidaNicaragua.appendChild(caducidadUINIcaragua)

                                bloque.append(contenedorCadudidaNicaragua)




                                const codigoUI = document.createElement("a")
                                codigoUI.classList.add("detallesReserva_enlacePago_codigoUI")
                                codigoUI.setAttribute("href", "/pagos/" + codigo)
                                codigoUI.setAttribute("vista", "/pago/" + codigo)
                                codigoUI.addEventListener("click", casaVitini.componentes.cambiarVista)
                                codigoUI.innerText = " Ir al enlace"
                                bloque.appendChild(codigoUI)


                                const campoDescripcion = document.createElement("textarea")
                                campoDescripcion.classList.add("detallesReserva_campoDescripcion")
                                campoDescripcion.placeholder = "No es obligatorio pero escriba un descripcion si quieres para definir aun mas a este enlace si lo necesitas"
                                campoDescripcion.setAttribute("campo", "descripcion")
                                campoDescripcion.value = descripcion
                                bloque.appendChild(campoDescripcion)


                                contenedorAdvertenciaInmersiva.appendChild(bloque)

                                const bloqueBotones = document.createElement("div")
                                bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                                const botonConfirmar = document.createElement("div")
                                botonConfirmar.classList.add("detallesReservaCancelarBoton")
                                botonConfirmar.setAttribute("componente", "botonActualizarEnlace")
                                botonConfirmar.innerText = "Actualizar enlace de pago"
                                botonConfirmar.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.acutalizarEnlace)
                                bloqueBotones.appendChild(botonConfirmar)


                                const botonEliminar = document.createElement("div")
                                botonEliminar.classList.add("detallesReservaCancelarBoton")
                                botonEliminar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                botonEliminar.innerText = "Eliminar enlace de pago"
                                botonEliminar.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.eliminarEnlace.UI)
                                bloqueBotones.appendChild(botonEliminar)

                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("detallesReservaCancelarBoton")
                                botonCancelar.innerText = "Cerrar detalles del enlace de pago"
                                botonCancelar.addEventListener("click", () => {
                                    let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                                    selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                        advertenciaInmersiva.remove()
                                    })
                                })
                                bloqueBotones.appendChild(botonCancelar)
                                contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                                const enlacePagoUIRenderizada = document.querySelector("[componenteUID=enlaceDePagoUI]")
                                enlacePagoUIRenderizada.innerHTML = null

                                enlacePagoUIRenderizada.appendChild(contenedorAdvertenciaInmersiva)



                            }

                        },
                        pagoUI: (metadatos) => {
                            const pagoUID = metadatos.pagoUID
                            const plataformaDePago = metadatos.plataformaDePago
                            const pagoUIDPasarela = metadatos.pagoUIDPasarela
                            const tarjetaDigitos = metadatos.tarjetaDigitos
                            const fechaPago = metadatos.fechaPago
                            const tarjeta = metadatos.tarjeta
                            const cantidad = metadatos.cantidad
                            const sumaDeLoReembolsado = metadatos.sumaDeLoReembolsado
                            const reembolsado = metadatos.reembolsado
                            const chequeUID = metadatos.chequeUID
                            const instanciaUID = metadatos.instanciaUID


                            const bloqueDetallesDelPago = document.createElement("div")
                            bloqueDetallesDelPago.classList.add("reservaDetalles_transacciones_bloqueDetallesDelPago")
                            bloqueDetallesDelPago.setAttribute("pagoUID", pagoUID)
                            bloqueDetallesDelPago.addEventListener("click", (e) => {
                                const metadatos = {
                                    pagoUID: pagoUID,
                                    instanciaUID: instanciaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.detallesDelPago.UI(metadatos)
                            })

                            // PagoUID
                            let bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")


                            let bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")

                            bloqueInfo.innerText = "Identificador del pago (pagoUID)"
                            bloqueInfoDato.appendChild(bloqueInfo)


                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.innerText = pagoUID
                            bloqueInfoDato.appendChild(bloqueDato)
                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                            // Plataforma de pago
                            bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")
                            bloqueInfo.innerText = "Plataforma de pago"
                            bloqueInfoDato.appendChild(bloqueInfo)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.innerText = plataformaDePago
                            bloqueInfoDato.appendChild(bloqueDato)

                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                            // pagoUIDPasarela
                            bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.innerText = "Identificador del pago dentro de la pasarela"
                            bloqueInfo.classList.add("negrita")

                            bloqueInfoDato.appendChild(bloqueInfo)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.innerText = pagoUIDPasarela
                            bloqueInfoDato.appendChild(bloqueDato)

                            if (plataformaDePago === "pasarela") {
                                bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                            }

                            // tarjetaDigiros
                            bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")
                            bloqueInfo.innerText = "Tarjeta de credito"
                            bloqueInfoDato.appendChild(bloqueInfo)


                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.innerText = `**** **** **** ${tarjetaDigitos} (${tarjeta})`
                            bloqueInfoDato.appendChild(bloqueDato)
                            if (plataformaDePago === "pasarela") {
                                bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                            }

                            // Fecha de pago 
                            bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")
                            bloqueInfo.innerText = "Fecha del pago"
                            bloqueInfoDato.appendChild(bloqueInfo)


                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.innerText = fechaPago
                            bloqueInfoDato.appendChild(bloqueDato)
                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                            // Cantidad del pago 
                            bloqueInfoDato = document.createElement("div")
                            bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")
                            bloqueInfo.innerText = "Cantidad cobrada en dolares"
                            bloqueInfoDato.appendChild(bloqueInfo)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.innerText = cantidad + "$"
                            bloqueInfoDato.appendChild(bloqueDato)
                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                            // Resumen de reembolsos
                            const bloqueSumaDeLoReembolsado = document.createElement("div")
                            bloqueSumaDeLoReembolsado.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")
                            bloqueInfo.innerText = "Resumen de reembolsos"
                            bloqueSumaDeLoReembolsado.appendChild(bloqueInfo)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.innerText = `${sumaDeLoReembolsado}$, reembolsado ${reembolsado}`
                            bloqueSumaDeLoReembolsado.appendChild(bloqueDato)

                            if (sumaDeLoReembolsado) {
                                bloqueDetallesDelPago.appendChild(bloqueSumaDeLoReembolsado)
                            }


                            // Cheque UID
                            const bloqueChequeUID = document.createElement("div")
                            bloqueChequeUID.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                            bloqueInfo = document.createElement("div")
                            bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                            bloqueInfo.classList.add("negrita")
                            bloqueInfo.innerText = "Identificador del cheque"
                            bloqueChequeUID.appendChild(bloqueInfo)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                            bloqueDato.innerText = chequeUID
                            bloqueChequeUID.appendChild(bloqueDato)

                            if (chequeUID) {
                                bloqueDetallesDelPago.appendChild(bloqueChequeUID)
                            }

                            return bloqueDetallesDelPago

                        }

                    },
                    arranque: async () => {
                        casaVitini.administracion.reservas.detallesReserva.limpiarMenusCategorias()
                        document.querySelector(`[categoriaReserva=transacciones]`).setAttribute("estadoCategoria", "actual")

                        const botonTransacciones = document.querySelector("[categoriaReserva=transacciones]")
                        botonTransacciones.style.background = "blue"
                        botonTransacciones.style.color = "white"

                        const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                        contenedorDinamico.innerHTML = null

                        const advertenciasInmersivasRenderizadas = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        advertenciasInmersivasRenderizadas.map((advertencia) =>
                            advertencia.remove()
                        )
                        const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                        const contenedorListaDePagos = document.createElement("div")
                        contenedorListaDePagos.setAttribute("class", "administracion_reservas_detallesReservas_transacciones_contenedorListaDePagos")
                        contenedorListaDePagos.setAttribute("instanciaUID", instanciaUID)
                        contenedorListaDePagos.setAttribute("contenedorID", "listaDePagos")
                        //document.body.style.overflow = 'hidden';


                        const spinnerContainer = document.createElement('div');
                        spinnerContainer.setAttribute("componente", "iconoCargaEnlace");

                        spinnerContainer.classList.add("lds-spinner");

                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement('div');
                            spinnerContainer.appendChild(div);
                        }

                        const info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.innerText = "Esperando a Casa Vitini..."


                        const botoCancelar = document.createElement("div")
                        botoCancelar.setAttribute("class", "botonV1AdvertenciaInmersiva")
                        botoCancelar.innerText = "Cancelar"
                        botoCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)

                        contenedorListaDePagos.appendChild(spinnerContainer)
                        //contenedorListaDePagos.appendChild(info)
                        //contenedorListaDePagos.appendChild(botoCancelar)

                        contenedorDinamico.appendChild(contenedorListaDePagos)

                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const transaccion = {
                            zona: "administracion/reservas/transacciones/obtenerPagosDeLaReserva",
                            reservaUID: Number(reservaUID)
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            const seleccionarInstancia = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (seleccionarInstancia) {
                                seleccionarInstancia.remove()
                            }
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {

                            const seleccionarInstancia = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (seleccionarInstancia) {
                                seleccionarInstancia.style.justifyContent = "flex-start";
                                respuestaServidor.instanciaUID = instanciaUID
                                return casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.UI.listaDePagos(respuestaServidor)
                            }

                        }



                    },
                    detallesDelPago: {
                        UI: async (metadatos) => {
                            const pagoUID = metadatos.pagoUID
                            const instanciaUID = metadatos.instanciaUID

                            document.body.style.overflow = 'hidden';

                            const instanciaUIDDetalleDelPago = casaVitini.componentes.codigoFechaInstancia()
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                            const mensajeSpinner = "Esperando al servidor..."
                            const spinnerPorRenderizar = casaVitini.componentes.spinner(mensajeSpinner)

                            const advertenciaInmersivaIU = document.createElement("div")
                            advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                            advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                            advertenciaInmersivaIU.setAttribute("instanciaUID", instanciaUIDDetalleDelPago)

                            const contenedorAdvertenciaInmersiva = document.createElement("div")
                            contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                            const contenidoAdvertenciaInmersiva = document.createElement("div")
                            contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                            contenidoAdvertenciaInmersiva.setAttribute("espacio", "detallesDelPago")

                            contenidoAdvertenciaInmersiva.appendChild(spinnerPorRenderizar)

                            contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                            advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                            document.body.appendChild(advertenciaInmersivaIU)



                            const ocultaPanales = () => {
                                const selectorContenedores = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)
                                const contenedorNuevoReembolso = selectorContenedores.querySelector("[contenedor=nuevoReembolso]")
                                const contenedorEliminarPago = selectorContenedores.querySelector("[contenedor=eliminarPago]")

                                contenedorNuevoReembolso.innerHTML = null
                                contenedorNuevoReembolso.removeAttribute("style")

                                contenedorEliminarPago.innerHTML = null
                                contenedorEliminarPago.removeAttribute("style")

                            }



                            const transaccion = {
                                zona: "administracion/reservas/transacciones/obtenerDetallesDelPago",
                                pagoUID: pagoUID
                            }

                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)



                            if (respuestaServidor?.error) {
                                casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {

                                const detallesDelPago = respuestaServidor.detallesDelPago
                                const plataformaDePago = detallesDelPago.plataformaDePago
                                const pagoUID = detallesDelPago.pagoUID
                                const pagoUIDPasarela = detallesDelPago.pagoUIDPasarela
                                const tarjetaDigitos = detallesDelPago.tarjetaDigitos
                                const fechaPago = detallesDelPago.fechaPago
                                const tarjeta = detallesDelPago.tarjeta
                                const cantidad = detallesDelPago.cantidad
                                const sumaDeLoReembolsado = detallesDelPago.sumaDeLoReembolsado
                                const reembolsado = detallesDelPago.reembolsado

                                const deglosePorReembolso = respuestaServidor.deglosePorReembolso


                                const selectorInstanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)?.querySelector("[espacio=detallesDelPago]")

                                if (!selectorInstanciaRenderizada) {
                                    return
                                }
                                selectorInstanciaRenderizada.innerHTML = null

                                const bloque = document.createElement("div")
                                bloque.classList.add("administracion_reservas_reservaDetalles_transacciones_reembolsos_bloqueTitulo")

                                const info = document.createElement("div")
                                info.classList.add("administracion_reservas_reservaDetalles_transacciones_reembolsos_tituloDetallesPago")
                                info.innerText = `Detalles del pago ${pagoUID} de la reserva ${reservaUID} junto con sus reembolsos. Desde aquí puedes ver los detalles de este pago y gestionar los reembolsos. Puedes crear reembolsos. Tanto los pagos hechos por la pasarela como los reembolsos enviados a la pasarela no se pueden eliminar. Solo se pueden eliminar los pagos manuales.`
                                bloque.appendChild(info)

                                selectorInstanciaRenderizada.appendChild(bloque)

                                const bloqueDetallesDelPago = document.createElement("div")
                                bloqueDetallesDelPago.classList.add("administracion_reservas_reservaDetalles_transacciones_reembolsos_bloqueDetallePago")
                                bloqueDetallesDelPago.setAttribute("pagoUID", pagoUID)

                                // PagoUID
                                let bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")


                                let bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")

                                bloqueInfo.innerText = "Identificador del pago (pagoUID)"
                                bloqueInfoDato.appendChild(bloqueInfo)


                                let bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.innerText = pagoUID
                                bloqueInfoDato.appendChild(bloqueDato)
                                bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                // Plataforma de pago
                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.innerText = "Plataforma de pago"
                                bloqueInfoDato.appendChild(bloqueInfo)

                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.innerText = plataformaDePago
                                bloqueInfoDato.appendChild(bloqueDato)

                                bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                // pagoUIDPasarela
                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.innerText = "Identificador del pago dentro de la pasarela"
                                bloqueInfo.classList.add("negrita")

                                bloqueInfoDato.appendChild(bloqueInfo)


                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.innerText = pagoUIDPasarela
                                bloqueInfoDato.appendChild(bloqueDato)

                                if (plataformaDePago === "pasarela") {
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                }


                                // tarjetaDigiros
                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.innerText = "Tarjeta de credito"
                                bloqueInfoDato.appendChild(bloqueInfo)


                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.innerText = `**** **** **** ${tarjetaDigitos} (${tarjeta})`
                                bloqueInfoDato.appendChild(bloqueDato)
                                if (plataformaDePago === "pasarela") {
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                }


                                // Fecha de pago 
                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.innerText = "Fecha del pago"
                                bloqueInfoDato.appendChild(bloqueInfo)


                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.innerText = fechaPago
                                bloqueInfoDato.appendChild(bloqueDato)
                                bloqueDetallesDelPago.appendChild(bloqueInfoDato)


                                // Cantidad del pago 
                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.innerText = "Cantidad cobrada en dolares"
                                bloqueInfoDato.appendChild(bloqueInfo)



                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.setAttribute("cantidadPago", cantidad)
                                bloqueDato.innerText = cantidad + "$"
                                bloqueInfoDato.appendChild(bloqueDato)
                                bloqueDetallesDelPago.appendChild(bloqueInfoDato)



                                // Resumen de reembolsos
                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")

                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.innerText = "Resumen de reembolsos"
                                bloqueInfoDato.appendChild(bloqueInfo)

                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.setAttribute("sumaDeLoReembolsado", sumaDeLoReembolsado)
                                bloqueDato.innerText = `${sumaDeLoReembolsado}$, reembolsado ${reembolsado}`
                                bloqueInfoDato.appendChild(bloqueDato)

                                if (sumaDeLoReembolsado) {
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                }

                                selectorInstanciaRenderizada.appendChild(bloqueDetallesDelPago)


                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_contenedorBotones")

                                const botonCrearReembolso = document.createElement("div")
                                botonCrearReembolso.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_botonV1")
                                botonCrearReembolso.innerText = "Crear un reembolso 55"
                                botonCrearReembolso.addEventListener("click", () => {
                                    ocultaPanales()
                                    const selectorContenedorReembolso = document.querySelector("[contenedor=nuevoReembolso]")
                                    selectorContenedorReembolso.innerText = null
                                    const metadatos = {
                                        pagoUID: pagoUID,
                                        instanciaUID: instanciaUID,
                                        instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                    }
                                    casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.reembolsos.realizarReembolso(metadatos)
                                })
                                contenedorBotones.appendChild(botonCrearReembolso)


                                const botonCerrar = document.createElement("div")
                                botonCerrar.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_botonV1")
                                botonCerrar.innerText = "Cerrar detalles del pago"
                                botonCerrar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                                contenedorBotones.appendChild(botonCerrar)

                                const botonEliminarPago = document.createElement("div")
                                botonEliminarPago.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_botonV1")
                                botonEliminarPago.innerText = "Eliminar pago"
                                if (plataformaDePago !== "pasarela") {
                                    contenedorBotones.appendChild(botonEliminarPago)
                                }
                                botonEliminarPago.addEventListener("click", () => {
                                    ocultaPanales()
                                    const selectorContenedorEliminarPago = document.querySelector("[contenedor=eliminarPago]")
                                    selectorContenedorEliminarPago.innerHTML = null
                                    const metadatos = {
                                        instanciaUID: instanciaUID,
                                        instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago

                                    }
                                    const eliminarPagoUI = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.eliminarPagoManual.UI(metadatos)
                                    selectorContenedorEliminarPago.appendChild(eliminarPagoUI)
                                    selectorContenedorEliminarPago.style.display = "flex"
                                })
                                selectorInstanciaRenderizada.appendChild(contenedorBotones)



                                const contenedorEliminarPago = document.createElement("div")
                                contenedorEliminarPago.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_contenedorCrearReembolso")
                                contenedorEliminarPago.setAttribute("contenedor", "eliminarPago")
                                selectorInstanciaRenderizada.appendChild(contenedorEliminarPago)



                                const contenedorCrearReembolso = document.createElement("div")
                                contenedorCrearReembolso.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_contenedorCrearReembolso")
                                contenedorCrearReembolso.setAttribute("contenedor", "nuevoReembolso")
                                selectorInstanciaRenderizada.appendChild(contenedorCrearReembolso)






                                const contenedorReembolsos = document.createElement("div")
                                contenedorReembolsos.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_contenedorReembolso")

                                if (deglosePorReembolso.length === 0) {
                                    const info = document.createElement("div")
                                    info.classList.add("adminsitracion_reservas_detalles_transacciones_reembolsos_infoNoReembolsos")
                                    info.innerText = "Este pago no tiene ningun reembolso"
                                    info.appendChild(contenedorReembolsos)

                                }

                                const botonOpcionesReembolsoUI = (metadatos) => {
                                    const botonEliminarReembolso = document.createElement("div")
                                    botonEliminarReembolso.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_botonV1")
                                    botonEliminarReembolso.innerText = "Opciones del reembolso"
                                    botonEliminarReembolso.addEventListener("click", () => {
                                        opcionesReembolsoUI(metadatos)
                                    })
                                    return botonEliminarReembolso
                                }

                                const restaurarTodasLasOpcionesDeTodosLosReembolsos = (pagoUID, instanciaUIDDetalleDelPago) => {
                                    const reembolsosOpcionesDesplegadas = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)?.querySelectorAll("[contenedor=opcionesDelReembolso][estado=opcionesDesplegadas]")
                                    reembolsosOpcionesDesplegadas.forEach(contenedorOpcionesReembolso => {

                                        contenedorOpcionesReembolso.innerHTML = null
                                        const reembolsoUID = contenedorOpcionesReembolso.closest("[reembolsoUID]").getAttribute("reembolsoUID")
                                        const metadatosOpcionesReembolso = {
                                            instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago,
                                            reembolsoUID: reembolsoUID,
                                            pagoIUD: pagoUID
                                        }

                                        contenedorOpcionesReembolso.appendChild(botonOpcionesReembolsoUI(metadatosOpcionesReembolso))
                                    });
                                }

                                const opcionesReembolsoUI = (metadatos) => {

                                    const reembolsoUID = metadatos.reembolsoUID
                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const pagoUID = metadatos.pagoUID
                                    const instanciaUID = metadatos.instanciaUID

                                    restaurarTodasLasOpcionesDeTodosLosReembolsos(pagoUID, instanciaUIDDetalleDelPago)

                                    const selectorReembolso = document.querySelector(`[reembolsoUID="${reembolsoUID}"]`).querySelector("[contenedor=opcionesDelReembolso]")
                                    selectorReembolso.setAttribute("estado", "opcionesDesplegadas")
                                    selectorReembolso.innerHTML = null

                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add("administracion_reservas_detallesReserva_transacciones_opcionesReembolso")

                                    const campoPalabra = document.createElement("input")
                                    campoPalabra.classList.add("detallesReserva_reembolso_campoConfirmacion")
                                    campoPalabra.setAttribute("campo", "palabra")
                                    campoPalabra.placeholder = "Escribe la palabra eliminar"
                                    selectorReembolso.appendChild(campoPalabra)

                                    const botonEliminarReembolso = document.createElement("div")
                                    botonEliminarReembolso.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_botonV1")
                                    botonEliminarReembolso.innerText = "Confirmar la eliminacíon irreversible del reembolso"
                                    botonEliminarReembolso.addEventListener("click", () => {
                                        const metadatosEliminarReembolso = {
                                            instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago,
                                            reembolsoUID: reembolsoUID,
                                            instanciaUID: instanciaUID

                                        }

                                        casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.reembolsos.eliminarReembolso(metadatosEliminarReembolso)


                                    })
                                    selectorReembolso.appendChild(botonEliminarReembolso)

                                    const botonCerrarOpcionesDeReembolso = document.createElement("div")
                                    botonCerrarOpcionesDeReembolso.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_botonV1")
                                    botonCerrarOpcionesDeReembolso.innerText = "Cerrar opciones del reembolso"
                                    botonCerrarOpcionesDeReembolso.addEventListener("click", () => {
                                        restaurarTodasLasOpcionesDeTodosLosReembolsos(pagoUID, instanciaUIDDetalleDelPago)

                                    })
                                    selectorReembolso.appendChild(botonCerrarOpcionesDeReembolso)

                                }


                                deglosePorReembolso.map((detallesDelReembolso) => {

                                    const reembolsoUID = detallesDelReembolso.reembolsoUID
                                    const plataformaDePago = detallesDelReembolso.plataformaDePago
                                    const cantidad = detallesDelReembolso.cantidad
                                    const reembolsoUIDPasarela = detallesDelReembolso.reembolsoUIDPasarela
                                    const fechaCreacionUTC = detallesDelReembolso.fechaCreacionUTC
                                    const fechaActualizacionUTC = detallesDelReembolso.fechaActualizacionUTC
                                    const fechaCreacionMadrid = detallesDelReembolso.fechaCreacionMadrid
                                    const fechaActualizacionMadrid = detallesDelReembolso.fechaActualizacionMadrid
                                    const fechaCreacionNicaragua = detallesDelReembolso.fechaCreacionNicaragua
                                    const fechaActualizacionNicaragua = detallesDelReembolso.fechaActualizacionNicaragua


                                    const contenedorRembolsoEnDetalle = document.createElement("div")
                                    contenedorRembolsoEnDetalle.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle")
                                    contenedorRembolsoEnDetalle.setAttribute("reembolsoUID", reembolsoUID)

                                    const tituloReembolso = document.createElement("div")
                                    tituloReembolso.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_tituloReembolso")
                                    tituloReembolso.classList.add("negrita")
                                    tituloReembolso.innerText = "Reembolso " + reembolsoUID
                                    contenedorRembolsoEnDetalle.appendChild(tituloReembolso)

                                    // plataformaDePago
                                    let bloque = document.createElement("div")
                                    bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")

                                    let bloqueTitulo = document.createElement("div")
                                    bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                    bloqueTitulo.innerText = "Plataforma de reembolso"
                                    bloque.appendChild(bloqueTitulo)

                                    let bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato");
                                    bloqueDato.classList.add("negrita")
                                    bloqueDato.innerText = plataformaDePago
                                    bloque.appendChild(bloqueDato)
                                    contenedorRembolsoEnDetalle.appendChild(bloque)

                                    // cantidadReembolso
                                    bloque = document.createElement("div")
                                    bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")

                                    bloqueTitulo = document.createElement("div")
                                    bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                    bloqueTitulo.innerText = "Cantidad del reembolso"
                                    bloque.appendChild(bloqueTitulo)

                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato");
                                    bloqueDato.classList.add("negrita")
                                    bloqueDato.innerText = cantidad + "$"
                                    bloque.appendChild(bloqueDato)
                                    contenedorRembolsoEnDetalle.appendChild(bloque)


                                    // reembolsoUIDPasarela
                                    const bloqueReembolsoUIDPasarela = document.createElement("div")
                                    bloqueReembolsoUIDPasarela.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")

                                    bloqueTitulo = document.createElement("div")
                                    bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                    bloqueTitulo.innerText = "Reembolso UID en pasarela"
                                    bloqueReembolsoUIDPasarela.appendChild(bloqueTitulo)

                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                    bloqueDato.classList.add("negrita")
                                    bloqueDato.innerText = reembolsoUIDPasarela
                                    bloqueReembolsoUIDPasarela.appendChild(bloqueDato)
                                    if (plataformaDePago === "pasarela") {
                                        contenedorRembolsoEnDetalle.appendChild(bloqueReembolsoUIDPasarela)
                                    }


                                    // fechaCreacionUTC
                                    bloque = document.createElement("div")
                                    bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")

                                    bloqueTitulo = document.createElement("div")
                                    bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                    bloqueTitulo.innerText = "Fecha de creacíon UTC"
                                    bloque.appendChild(bloqueTitulo)

                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                    bloqueDato.classList.add("negrita")
                                    bloqueDato.innerText = fechaCreacionUTC
                                    bloque.appendChild(bloqueDato)
                                    contenedorRembolsoEnDetalle.appendChild(bloque)

                                    // fechaActualizacionUTC
                                    const fechaActualizacionReembolso = document.createElement("div")
                                    fechaActualizacionReembolso.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")

                                    bloqueTitulo = document.createElement("div")
                                    bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                    bloqueTitulo.innerText = "Fecha de actualizacíon UTC"
                                    fechaActualizacionReembolso.appendChild(bloqueTitulo)

                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                    bloqueDato.classList.add("negrita")
                                    bloqueDato.innerText = fechaActualizacionUTC
                                    fechaActualizacionReembolso.appendChild(bloqueDato)
                                    if (plataformaDePago === "pasarela") {
                                        contenedorRembolsoEnDetalle.appendChild(fechaActualizacionReembolso)
                                    }



                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add("administracion_reservas_detallesReserva_transacciones_reembolsos_detallesReembolso_contenedorBotones")
                                    contenedorBotones.setAttribute("contenedor", "opcionesDelReembolso")
                                    const metadatosOpcionesReembolso = {
                                        instanciaUID: instanciaUID,
                                        instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago,
                                        reembolsoUID: reembolsoUID,
                                        pagoIUD: pagoUID
                                    }
                                    contenedorBotones.appendChild(botonOpcionesReembolsoUI(metadatosOpcionesReembolso))

                                    if (plataformaDePago !== "pasarela") {
                                        contenedorRembolsoEnDetalle.appendChild(contenedorBotones)
                                    }

                                    contenedorReembolsos.appendChild(contenedorRembolsoEnDetalle)
                                })
                                selectorInstanciaRenderizada.appendChild(contenedorReembolsos)
                            }
                        },
                        confirmar: async () => {
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                            const nombreEnlace = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=nombreEnlace]")
                            const cantidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=cantidad]")
                            const horasCaducidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=horasCaducidad]")

                            const transaccion = {
                                zona: "administracion/enlacesDePago/crearNuevoEnlace",
                                reservaUID: reservaUID,
                                nombreEnlace: nombreEnlace.value,
                                cantidad: cantidad.value,
                                horasCaducidad: horasCaducidad.value,
                            }
                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.UI.enlacesDePago()


                            }


                        }
                    },
                    reembolsos: {
                        realizarReembolso: async (metadatos) => {

                            const pagoUID = metadatos.pagoUID
                            const instanciaUID = metadatos.instanciaUID
                            const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago

                            const selectorContenedorCrearReembolso = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedor=nuevoReembolso]`)
                            selectorContenedorCrearReembolso.style.display = "flex"

                            const mostrarContenedorPorTipo = (tipoReembolso) => {

                                const selectorTipoContenedores = [...selectorContenedorCrearReembolso.querySelectorAll("[contenedorTipoReembolso]")]
                                selectorTipoContenedores.map((contenedor) => {
                                    contenedor.style.display = "none"
                                })
                                selectorContenedorCrearReembolso.querySelector(`[contenedorTipoReembolso="${tipoReembolso}"]`).removeAttribute("style")
                            }
                            const reseteaBotonesTipoReembolso = () => {
                                const selectorBotonesTipoReembolso = [...selectorContenedorCrearReembolso.querySelectorAll("[botonTipoReembolso]")]
                                selectorBotonesTipoReembolso.map((botonTipoReembolso) => {
                                    botonTipoReembolso.removeAttribute("style")
                                    botonTipoReembolso.removeAttribute("tipoReembolsoSeleccionado")
                                })
                            }
                            const maximoReembolsable = async () => {
                                const totalPagado = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [cantidadPago]`).getAttribute("cantidadPago")
                                const totalReembolsado = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [sumaDeLoReembolsado]`)?.getAttribute("sumaDeLoReembolsado")
                                const selectorUI = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [componente=totalReembolsable]`)
                                selectorUI.innerText = "Esperando resultado del calculo..."


                                if (!totalReembolsado) {
                                    selectorUI.innerText = `Total reembolsable ${totalPagado}$`
                                    selectorUI.setAttribute("totalReembolsable", totalPagado)
                                    return
                                }
                                try {
                                    const transaccion = {
                                        zona: "administracion/componentes/calculadora",
                                        numero1: totalPagado,
                                        numero2: totalReembolsado,
                                        operador: "-"
                                    }

                                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                                    if (respuestaServidor?.error) {
                                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                                    }

                                    if (respuestaServidor?.ok) {
                                        const resultado = Number(respuestaServidor?.ok).toFixed(2)
                                        selectorUI.innerText = `Total reembolsable ${resultado}$`
                                        selectorUI.setAttribute("totalReembolsable", resultado)
                                    }
                                    // casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.arranque()

                                } catch (errorCapturado) {
                                    const error = errorCapturado.message
                                    casaVitini.ui.vistas.advertenciaInmersiva(error)
                                }

                            }
                            const reglaDeTresPorcentaje = async (porcentaje) => {


                                let totalReembolsable
                                const selectorTotalReembolsableConReeembolsos = document.querySelector(`[instanciaUID="${instanciaUID}"] [totalReembolsable]`)
                                if (selectorTotalReembolsableConReeembolsos) {
                                    totalReembolsable = selectorTotalReembolsableConReeembolsos.getAttribute("totalReembolsable")
                                } else {
                                    const selectorTotalReembolsableSinReembolsos = document.querySelector(`[instanciaUID="${instanciaUID}"] [cantidadPago]`).getAttribute("cantidadPago")
                                    totalReembolsable = selectorTotalReembolsableSinReembolsos

                                }



                                const selectorUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [informacionPorcentaje=informacionPorcentaje]`)
                                selectorUI.innerHTML = "Calculando..."
                                try {
                                    const transaccion = {
                                        zona: "administracion/componentes/calculadora",
                                        numero1: totalReembolsable,
                                        numero2: porcentaje,
                                        operador: "%"
                                    }

                                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


                                    if (respuestaServidor?.error) {
                                        casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const resultado = Number(respuestaServidor?.ok).toFixed(2)
                                        selectorUI.innerText = `El reembolso seria de ${resultado}$ (El ${porcentaje}% de ${totalReembolsable}$ es ${resultado}$`
                                        selectorUI.setAttribute("totalReembolso", resultado)
                                    }
                                } catch (errorCapturado) {
                                    const error = errorCapturado.message
                                    casaVitini.ui.vistas.advertenciaInmersiva(error)
                                }
                                /*  const calculo = (Number(porcentaje) / 100) * Number(maximoReembolsable());
                                  const resultado = parseFloat(calculo.toFixed(2));
                                  return resultado*/
                            };

                            const contenedorEmitirReembolso = document.createElement("div")
                            contenedorEmitirReembolso.classList.add("detallesReserva_rembolso_contenedorEmitirReembolso")

                            const titulo = document.createElement("p")
                            titulo.classList.add("detallesReservaTituloCancelarReserva")
                            titulo.innerText = "Realizar un reembolso"
                            contenedorEmitirReembolso.appendChild(titulo)

                            const bloqueReembolso = document.createElement("div")
                            bloqueReembolso.classList.add("detallesReserva_reemboldo_bloqueEmitirReembolso")

                            let bloqueInterno = document.createElement("div")
                            bloqueInterno.classList.add("detallesReserva_reembolso_bloqueInterno_campoConfiramcion")

                            const info = document.createElement("div")
                            info.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                            info.innerText = `Para realizar el reembolso por favor escribe reembolso en minúsculas en el campo de texto y pulse realizar reembolso. Se exige escribir reembolso como medida para evitar un falso clic en el botón de confirmación al querer hacer clic en el botón de cerrar opciones de emisión de reembolso`
                            bloqueInterno.appendChild(info)
                            bloqueReembolso.appendChild(bloqueInterno)


                            const infoTotalReembolsable = document.createElement("div")
                            infoTotalReembolsable.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                            infoTotalReembolsable.classList.add("negrita")
                            infoTotalReembolsable.setAttribute("componente", "totalReembolsable")
                            //infoTotalReembolsable.innerText = `Total reembolsable ${await maximoReembolsable()}`
                            bloqueInterno.appendChild(infoTotalReembolsable)
                            bloqueReembolso.appendChild(bloqueInterno)

                            const contenedorTipoReembolsos = document.createElement("div")
                            contenedorTipoReembolsos.classList.add("detallesReserva_reembolso_emitirReembolso_contenedorTipoReembolsos")

                            const reembolsoPorCantidad = document.createElement("div")
                            reembolsoPorCantidad.classList.add("detallesReserva_reembolso_emitirReembolso_botonTipoReembolso")
                            reembolsoPorCantidad.innerText = "Por cantidad"
                            reembolsoPorCantidad.setAttribute("botonTipoReembolso", "porCantidad")
                            reembolsoPorCantidad.setAttribute("tipoReembolso", "porCantidad")
                            reembolsoPorCantidad.addEventListener("click", (e) => {
                                reseteaBotonesTipoReembolso()
                                e.target.setAttribute("tipoReembolsoSeleccionado", "porCantidad")
                                e.target.style.background = "blue"
                                e.target.style.color = "white"
                                const tipoReembolso = e.target.getAttribute("tipoReembolso")
                                mostrarContenedorPorTipo(tipoReembolso)
                            })
                            contenedorTipoReembolsos.appendChild(reembolsoPorCantidad)


                            const reembolsoPorPorcentaje = document.createElement("div")
                            reembolsoPorPorcentaje.classList.add("detallesReserva_reembolso_emitirReembolso_botonTipoReembolso")
                            reembolsoPorPorcentaje.innerText = "Por porcentaje"
                            reembolsoPorPorcentaje.setAttribute("botonTipoReembolso", "porPorcentaje")
                            reembolsoPorPorcentaje.setAttribute("tipoReembolso", "porPorcentaje")
                            reembolsoPorPorcentaje.addEventListener("click", (e) => {
                                reseteaBotonesTipoReembolso()
                                e.target.setAttribute("tipoReembolsoSeleccionado", "porPorcentaje")
                                e.target.style.background = "blue"
                                e.target.style.color = "white"
                                const tipoReembolso = e.target.getAttribute("tipoReembolso")
                                mostrarContenedorPorTipo(tipoReembolso)
                            })
                            contenedorTipoReembolsos.appendChild(reembolsoPorPorcentaje)

                            bloqueReembolso.appendChild(contenedorTipoReembolsos)

                            const contenedorDinamicoTipo = document.createElement("div")
                            contenedorDinamicoTipo.classList.add("detallesReserva_rembolso_contenedorDiamicoTipo")


                            const contenedorPorCantidad = document.createElement("div")
                            contenedorPorCantidad.classList.add("detallesReserva_rembolso_contenedorPorCantidad")
                            contenedorPorCantidad.style.display = "none"
                            contenedorPorCantidad.setAttribute("contenedorTipoReembolso", "porCantidad")

                            const infoPorCantidad = document.createElement("div")
                            infoPorCantidad.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                            infoPorCantidad.innerText = `Determina la cantidad total del reembolso.Si quieres emitir por ejemplo un reembolso de 100, entonces debes de escribir tambine los dos decimales separados por punto, por ejemplo 100.00. Luego establece la moneda.`
                            contenedorPorCantidad.appendChild(infoPorCantidad)

                            const campoCantidadReembolso = document.createElement("input")
                            campoCantidadReembolso.classList.add("detallesReserva_reembolso_campo")
                            campoCantidadReembolso.setAttribute("campo", "porCantidad")
                            campoCantidadReembolso.placeholder = "0.00"
                            contenedorPorCantidad.appendChild(campoCantidadReembolso)

                            const campoMonedaReembolso = document.createElement("input")
                            campoMonedaReembolso.classList.add("detallesReserva_reembolso_campo")
                            campoMonedaReembolso.setAttribute("campo", "moneda")
                            campoMonedaReembolso.placeholder = "EUR"
                            //contenedorPorCantidad.appendChild(campoMonedaReembolso)
                            contenedorDinamicoTipo.appendChild(contenedorPorCantidad)

                            const contenedorPorPorcentaje = document.createElement("div")
                            contenedorPorPorcentaje.classList.add("detallesReserva_rembolso_contenedorPorPorcentaje")
                            contenedorPorPorcentaje.style.display = "none"
                            contenedorPorPorcentaje.setAttribute("contenedorTipoReembolso", "porPorcentaje")

                            const infoPorPorcentaje = document.createElement("div")
                            infoPorPorcentaje.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                            infoPorPorcentaje.innerText = `Determina el porcentaje del reembolso.`
                            contenedorPorPorcentaje.appendChild(infoPorPorcentaje)


                            const resultadoPorcentaje = document.createElement("div")
                            resultadoPorcentaje.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                            resultadoPorcentaje.classList.add("negrita")
                            resultadoPorcentaje.setAttribute("informacionPorcentaje", "informacionPorcentaje")
                            resultadoPorcentaje.innerText = `Escribe un porcentaje para ver su calculo`
                            contenedorPorPorcentaje.appendChild(resultadoPorcentaje)


                            const campoPorcentajeReembolso = document.createElement("input")
                            campoPorcentajeReembolso.classList.add("detallesReserva_reembolso_campo")
                            campoPorcentajeReembolso.placeholder = "0%"
                            campoPorcentajeReembolso.addEventListener("input", (e) => {
                                const entrada = e.target.value
                                const selectorInformacionResultadoPorcentaje = document.querySelector("[informacionPorcentaje=informacionPorcentaje]")
                                const controlFormato = /^\d+%$/.test(entrada);

                                if (entrada.length === 0) {
                                    selectorInformacionResultadoPorcentaje.innerText = "Escribe un porcentaje para ver su calculo"
                                    e.target.removeAttribute("totalReembolso")
                                } else {
                                    if (!controlFormato) {
                                        selectorInformacionResultadoPorcentaje.innerText = "No te olvides del signo de porcentaje %, solo numeros enteros sin decimales."
                                        e.target.removeAttribute("totalReembolso")
                                    } else {
                                        const numeroLimpio = entrada.replace("%", "")
                                        reglaDeTresPorcentaje(numeroLimpio)
                                    }
                                }
                            })
                            contenedorPorPorcentaje.appendChild(campoPorcentajeReembolso)

                            contenedorDinamicoTipo.appendChild(contenedorPorPorcentaje)

                            const campoMoneda = document.createElement("input")
                            campoMoneda.classList.add("detallesReserva_reembolso_campo")
                            campoMoneda.setAttribute("campo", "moneda")
                            campoMoneda.placeholder = "Moneda, por ejemplo EUR o USD"
                            //contenedorPorPorcentaje.appendChild(campoMoneda)
                            contenedorDinamicoTipo.appendChild(contenedorPorPorcentaje)



                            const selectorTipoReembolso = document.createElement("select")
                            selectorTipoReembolso.classList.add("usuariosCrearCuenta_campoUsuario")
                            selectorTipoReembolso.setAttribute("campo", "plataformaDePagoEntrada")

                            const opcionPreterminada = document.createElement("option");
                            opcionPreterminada.value = "";
                            opcionPreterminada.selected = "true"
                            opcionPreterminada.disabled = "true"
                            opcionPreterminada.text = "Selecciona como realizar este reeembolso";
                            selectorTipoReembolso.add(opcionPreterminada);

                            let opcion = document.createElement("option");
                            opcion.value = "efectivo";
                            opcion.text = "Efectivo";
                            selectorTipoReembolso.add(opcion);

                            opcion = document.createElement("option");
                            opcion.value = "tarjeta";
                            opcion.text = "Tarjeta TPV";
                            selectorTipoReembolso.add(opcion);

                            opcion = document.createElement("option");
                            opcion.value = "cheque";
                            opcion.text = "Cheque";
                            selectorTipoReembolso.add(opcion);

                            opcion = document.createElement("option");
                            opcion.value = "pasarela";
                            opcion.text = "Pasarela";
                            selectorTipoReembolso.add(opcion);
                            //cheque pasarela, tarjeta TPV
                            contenedorDinamicoTipo.appendChild(selectorTipoReembolso)

                            bloqueReembolso.appendChild(contenedorDinamicoTipo)


                            bloqueInterno = document.createElement("div")
                            bloqueInterno.classList.add("detallesReserva_reembolso_bloqueInterno_campoConfiramcion")

                            const infoCampoConfirmacion = document.createElement("div")
                            infoCampoConfirmacion.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                            infoCampoConfirmacion.innerText = `Para realizar el reembolso por favor escribe reembolso en minúsculas en el campo de texto y pulse realizar reembolso. Se exigue escribir reembolso como medida para evitar un falso click en el boton de confirmacion al querer hacer click en el boton de cerrar opciones de emision de reembolso`
                            bloqueInterno.appendChild(infoCampoConfirmacion)

                            const campoConfirmacion = document.createElement("input")
                            campoConfirmacion.classList.add("detallesReserva_reembolso_campoConfirmacion")
                            campoConfirmacion.setAttribute("campo", "palabra")
                            campoConfirmacion.placeholder = "Escribe la palabra reembolso"
                            bloqueInterno.appendChild(campoConfirmacion)

                            bloqueReembolso.appendChild(bloqueInterno)

                            contenedorEmitirReembolso.appendChild(bloqueReembolso)

                            const bloqueBotones = document.createElement("div")
                            bloqueBotones.classList.add("detallesReserva_reembolso_emitirReembolso_contenedorBotones")

                            const botonConfirmar = document.createElement("div")
                            botonConfirmar.classList.add("detallesReservaCancelarBoton")
                            botonConfirmar.setAttribute("componente", "botonActualizarEnlace")
                            botonConfirmar.innerText = "Realizar reembolso22"
                            botonConfirmar.addEventListener("click", () => {
                                const metadatos = {
                                    pagoUID: pagoUID,
                                    instanciaUID: instanciaUID,
                                    instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                }
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.reembolsos.crearReembolso(metadatos)
                            })
                            bloqueBotones.appendChild(botonConfirmar)

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("detallesReservaCancelarBoton")
                            botonCancelar.innerText = "Cerrar opciones de emitir reembolso"
                            botonCancelar.addEventListener("click", () => {
                                selectorContenedorCrearReembolso.innerHTML = null
                                selectorContenedorCrearReembolso.removeAttribute("style")
                            })
                            bloqueBotones.appendChild(botonCancelar)
                            contenedorEmitirReembolso.appendChild(bloqueBotones)

                            selectorContenedorCrearReembolso.appendChild(contenedorEmitirReembolso)
                            maximoReembolsable();

                        },
                        eliminarReembolso: async (metadatos) => {
                            const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                            const reembolsoUID = metadatos.reembolsoUID
                            const instanciaUID = metadatos.instanciaUID

                            const metadatosPantallaCarga = {
                                mensaje: "Eliminando reembolso...",
                                instanciaUID: instanciaUIDDetalleDelPago,
                            }
                            casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                            const pagoUID = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector("[pagoUID]").getAttribute("pagoUID")
                            const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector(`[reembolsoUID="${reembolsoUID}"] [campo=palabra]`).value
                            const transaccion = {
                                zona: "administracion/reservas/transacciones/eliminarReembolsoManual",
                                reembolsoUID: reembolsoUID,
                                palabra: palabra
                            }

                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                            const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUIDDetalleDelPago}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                            selectorPantallaDeCarga.map((pantalla) => {
                                pantalla.remove()
                            })

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const selectorDetallesDelPagoRenderizado = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)

                                if (selectorDetallesDelPagoRenderizado) {
                                    casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.arranque()
                                    casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                    const metadatos = {
                                        pagoUID: pagoUID,
                                        instanciaUID: instanciaUID
                                    }

                                    casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.detallesDelPago.UI(metadatos)
                                }
                            }
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                        },
                        crearReembolso: async (metadatos) => {


                            const pagoUID = String(metadatos.pagoUID)
                            const instanciaUID = metadatos.instanciaUID
                            const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago

                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                            const tipoReembolso = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [tipoReembolsoSeleccionado]`)?.getAttribute("tipoReembolsoSeleccionado")

                            if (!tipoReembolso) {
                                const error = "Selecciona un tipo de reembolso, ya sea por cantidad o por porcentaje"
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(error)
                            }
                            const metadatosPantallaCarga = {
                                mensaje: "Esperando al servidor...",
                                instanciaUID: instanciaUID,
                            }
                            casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                            const transaccion = {
                                zona: "administracion/reservas/transacciones/realizarReembolso",
                                reservaUID: reservaUID,
                                pagoUID: pagoUID
                            }
                            if (tipoReembolso === "porPorcentaje") {
                                const cantidad = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedortiporeembolso=porPorcentaje] [totalReembolso]`)?.getAttribute("totalReembolso")
                                //const moneda = document.querySelector(`[instanciaUID="${instanciaUID}"] [contenedortiporeembolso=porPorcentaje] [campo=moneda]`)?.value
                                transaccion.cantidad = cantidad
                                //transaccion.moneda = moneda
                            }
                            if (tipoReembolso === "porCantidad") {
                                const cantidad = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedortiporeembolso=porCantidad] [campo=porCantidad]`)?.value
                                //const moneda = document.querySelector(`[instanciaUID="${instanciaUID}"] [contenedortiporeembolso=porCantidad] [campo=moneda]`)?.value
                                transaccion.cantidad = cantidad
                                //transaccion.moneda = moneda
                            }
                            transaccion.tipoReembolso = tipoReembolso
                            const plataformaDePagoEntrada = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedor=nuevoReembolso] [campo=plataformaDePagoEntrada]`).value
                            transaccion.plataformaDePagoEntrada = plataformaDePagoEntrada

                            const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [campo=palabra]`)?.value
                            transaccion.palabra = palabra


                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                            const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                            selectorPantallaDeCarga.map((pantalla) => {
                                pantalla.remove()
                            })



                            if (respuestaServidor?.error) {
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.arranque()
                                const mensaje = respuestaServidor?.ok
                                casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                const metadatos = {
                                    pagoUID: pagoUID,
                                    instanciaUID: instanciaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.detallesDelPago.UI(metadatos)
                                //casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(mensaje)
                            }

                        }
                    },
                    crearPagoManual: {
                        UI: (metadatos) => {
                            const instanciaUID = metadatos.instanciaUID_ContenedorTransacciones

                            const mostrarContenedorTipoPago = (opcion) => {
                                const selectorTodosLosContenedorTipoPago = [...document.querySelectorAll(`[componente=advertenciaInmersiva] [contenedorTipoPago]`)]
                                selectorTodosLosContenedorTipoPago.map((contenedorTipoPago) => {
                                    contenedorTipoPago.removeAttribute("style")
                                })


                                const tipoPago = opcion.target.value

                                const selectorContenedorTipoPago = document.querySelector(`[componente=advertenciaInmersiva] [contenedorTipoPago=${tipoPago}]`)
                                if (selectorContenedorTipoPago) {
                                    selectorContenedorTipoPago.style.display = "flex"
                                }
                            }

                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                            const advertenciaInmersivaIU = document.createElement("div")
                            advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                            advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                            const contenedorAdvertenciaInmersiva = document.createElement("div")
                            contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                            const contenidoAdvertenciaInmersiva = document.createElement("div")
                            contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                            contenidoAdvertenciaInmersiva.setAttribute("espacio", "formularioCrearEnlaceDePago")

                            const titulo = document.createElement("p")
                            titulo.classList.add("detallesReservaTituloCancelarReserva")
                            titulo.innerText = "Crear un pago manual"
                            contenidoAdvertenciaInmersiva.appendChild(titulo)

                            const bloque = document.createElement("div")
                            bloque.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                            let info = document.createElement("div")
                            info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                            info.innerText = `Crea un pago manual cuando necesites crear un pago por fuera de la pasarela. Escoge el tipo de pago, si es efectivo o si es por TPV por ejemplo. Luego rellena los datos y el pago se añadirá a la lista de pagos de la reserva. Los pagos manuales requieren una acción manual.`
                            bloque.appendChild(info)

                            const selectorTipoDePago = document.createElement("select")
                            selectorTipoDePago.classList.add("usuariosCrearCuenta_campoUsuario")
                            selectorTipoDePago.setAttribute("campo", "selectorRol")
                            selectorTipoDePago.addEventListener("change", mostrarContenedorTipoPago)

                            const opcionPreterminada = document.createElement("option");
                            opcionPreterminada.value = "";
                            opcionPreterminada.selected = "true"
                            opcionPreterminada.disabled = "true"
                            opcionPreterminada.text = "Selecciona la plataforma pago";
                            selectorTipoDePago.add(opcionPreterminada);

                            let opcion = document.createElement("option");
                            opcion.value = "efectivo";
                            opcion.text = "Efectivo";
                            selectorTipoDePago.add(opcion);

                            opcion = document.createElement("option");
                            opcion.value = "tarjeta";
                            opcion.text = "Tarjeta TPV";
                            selectorTipoDePago.add(opcion);

                            opcion = document.createElement("option");
                            opcion.value = "cheque";
                            opcion.text = "Cheque";
                            selectorTipoDePago.add(opcion);

                            opcion = document.createElement("option");
                            opcion.value = "pasarela";
                            opcion.text = "Pasarela (Asociar pago)";
                            selectorTipoDePago.add(opcion);
                            //cheque pasarela, tarjeta TPV


                            bloque.appendChild(selectorTipoDePago)

                            const contenedorTipoPago = document.createElement("div")
                            contenedorTipoPago.classList.add("administracion_reservas_detalleReserva_pagoManual_contenedorTipoPago")

                            const contenedorEfectivo = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.efectivo()
                            contenedorTipoPago.appendChild(contenedorEfectivo)

                            const contenedorCheque = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.cheque()
                            contenedorTipoPago.appendChild(contenedorCheque)

                            const contenedorTarjeta = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.tarjeta()
                            contenedorTipoPago.appendChild(contenedorTarjeta)

                            const contenedorPasarela = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.pasarela()
                            contenedorTipoPago.appendChild(contenedorPasarela)


                            bloque.appendChild(contenedorTipoPago)
                            contenidoAdvertenciaInmersiva.appendChild(bloque)


                            const bloqueBotones = document.createElement("div")
                            bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                            const botonConfirmar = document.createElement("div")
                            botonConfirmar.classList.add("detallesReservaCancelarBoton")
                            botonConfirmar.setAttribute("componente", "botonConfirmarCancelarReserva")
                            botonConfirmar.innerText = "Confirmar y crear enlace"
                            botonConfirmar.addEventListener("click", () => {
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.crearPagoManual.confirmar(instanciaUID)
                            })
                            bloqueBotones.appendChild(botonConfirmar)

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("detallesReservaCancelarBoton")
                            botonCancelar.innerText = "Cancelar la creacíon del enlace"
                            botonCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                            bloqueBotones.appendChild(botonCancelar)
                            contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)

                            const contenedorGlobal = document.createElement("div")
                            contenedorGlobal.classList.add("detallesReserva_enlaceDePago_contenedorGlobal")



                            contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                            advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)

                            document.body.appendChild(advertenciaInmersivaIU)



                        },
                        confirmar: async (instanciaUID) => {
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                            const contenedorActivo = document.querySelector('[style*="display: flex"][contenedorTipoPago]')
                            if (!contenedorActivo) {
                                const error = "Selecciona la plataform de pago en le desplegable"
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(error)

                            }
                            const plataformaDePago = contenedorActivo?.getAttribute("contenedorTipoPago")
                            const campos = [...contenedorActivo.querySelectorAll("[campo]")]

                            const transaccion = {
                                zona: "administracion/reservas/transacciones/crearPagoManual",
                                plataformaDePago: plataformaDePago,
                                reservaUID: reservaUID
                            }
                            campos.map((campo) => {
                                const nombreCampo = campo.getAttribute("campo")
                                const valorCampo = campo.value
                                transaccion[nombreCampo] = valorCampo
                            })

                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                const seleccionarInstancia = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                if (seleccionarInstancia) {
                                    const datosPagosGlobal = {
                                        reservaUID: reservaUID,
                                        instanciaUID: instanciaUID
                                    }
                                    casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.actualizarDatosGlobalesPago(datosPagosGlobal)
                                    casaVitini.componentes.limpiarAdvertenciasInmersivas()

                                    const selectorInfoNoPago = seleccionarInstancia.querySelector(`[contenedor=infoNoPagos]`)
                                    if (selectorInfoNoPago) {
                                        selectorInfoNoPago.remove()
                                    }

                                    const selectorContenedorListaDePagos = seleccionarInstancia.querySelector(`[contenedor=listaDePagos]`)
                                    const selectorTransaccionesUI = seleccionarInstancia.querySelector("[contenedor=transaccionesUI]")

                                    if (!selectorContenedorListaDePagos) {
                                        const bloqueListaDePagos = document.createElement("div")
                                        bloqueListaDePagos.classList.add("reservaDetalles_transacciones_bloqueListaDePagos")
                                        bloqueListaDePagos.setAttribute("contenedor", "listaDePagos")
                                        selectorTransaccionesUI.appendChild(bloqueListaDePagos)
                                    }

                                    const detallesDelPago = respuestaServidor.detallesDelPago
                                    const metadatos = {
                                        pagoUID: detallesDelPago.pagoUID,
                                        plataformaDePago: detallesDelPago.plataformaDePago,
                                        tarjetaDigitos: detallesDelPago.tarjetaDigitos,
                                        pagoUIDPasarela: detallesDelPago.pagoUIDPasarela,
                                        cantidad: detallesDelPago.cantidad,
                                        fechaPago: detallesDelPago.fechaPago,
                                        chequeUID: detallesDelPago.chequeUID,
                                        instanciaUID: instanciaUID
                                    }
                                    const enlaceUI = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.UI.pagoUI(metadatos)
                                    const listaDePagosRenderizada = seleccionarInstancia.querySelector(`[contenedor=listaDePagos]`)

                                    if (listaDePagosRenderizada.childElementCount === 0) {
                                        listaDePagosRenderizada.appendChild(enlaceUI);
                                    } else if (listaDePagosRenderizada.childElementCount > 0) {
                                        const primerElemento = listaDePagosRenderizada.firstChild;
                                        listaDePagosRenderizada.insertBefore(enlaceUI, primerElemento);
                                    }

                                }



                            }
                        },

                        contenedoresTipoPago: {
                            efectivo: () => {

                                const contenedor = document.createElement("div")
                                contenedor.classList.add("administracion_reservas_detallesReserva_transacciones_pagoManual_contenedorTipoPago")
                                contenedor.setAttribute("contenedorTipoPago", "efectivo")

                                info = document.createElement("div")
                                info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                info.innerText = `Determina la cantidad del pago, recuerda que debe se tener dos decimales siempre, por ejemplo 10.00`
                                contenedor.appendChild(info)

                                let campo = document.createElement("input")
                                campo.classList.add("detallesReserva_campoNombreEnlace")
                                campo.setAttribute("campo", "cantidad")
                                campo.placeholder = "Cantidad del pago, ejemplo 12.95"

                                contenedor.appendChild(campo)
                                return contenedor

                            },
                            cheque: () => {

                                const contenedor = document.createElement("div")
                                contenedor.classList.add("administracion_reservas_detallesReserva_transacciones_pagoManual_contenedorTipoPago")
                                contenedor.setAttribute("contenedorTipoPago", "cheque")

                                info = document.createElement("div")
                                info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                info.innerText = `Determina la cantidad del pago en modalidad cheque, recuerda que debe se tener dos decimales siempre, por ejemplo 10.00`
                                contenedor.appendChild(info)

                                let campo = document.createElement("input")
                                campo.classList.add("detallesReserva_campoNombreEnlace")
                                campo.setAttribute("campo", "chequeUID")
                                campo.placeholder = "Codigo identificador del cheque"
                                contenedor.appendChild(campo)


                                campo = document.createElement("input")
                                campo.classList.add("detallesReserva_campoNombreEnlace")
                                campo.setAttribute("campo", "cantidad")
                                campo.placeholder = "Cantidad especificada en el cheque, ejemplo 12.95"

                                contenedor.appendChild(campo)
                                return contenedor

                            },
                            tarjeta: () => {

                                const contenedor = document.createElement("div")
                                contenedor.classList.add("administracion_reservas_detallesReserva_transacciones_pagoManual_contenedorTipoPago")
                                contenedor.setAttribute("contenedorTipoPago", "tarjeta")

                                info = document.createElement("div")
                                info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                info.innerText = `Determina la cantidad del pago en tarjeta, inserte los datos de pago hecho por el TPV`
                                contenedor.appendChild(info)

                                let campo = document.createElement("input")
                                campo.classList.add("detallesReserva_campoNombreEnlace")
                                campo.setAttribute("campo", "tarjetaUltimos")
                                campo.placeholder = "Cuatro ultimos digitos de la tarjeta"
                                contenedor.appendChild(campo)


                                campo = document.createElement("input")
                                campo.classList.add("detallesReserva_campoNombreEnlace")
                                campo.setAttribute("campo", "cantidad")
                                campo.placeholder = "Cantidad especificada en el pago por TPV, ejemplo 12.95"

                                contenedor.appendChild(campo)
                                return contenedor

                            },
                            pasarela: () => {

                                const contenedor = document.createElement("div")
                                contenedor.classList.add("administracion_reservas_detallesReserva_transacciones_pagoManual_contenedorTipoPago")
                                contenedor.setAttribute("contenedorTipoPago", "pasarela")

                                info = document.createElement("div")
                                info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                info.innerText = `Si algun pago no se ha sincronizado o si quieres sincronizar un pago, inserta el codigo identificador del pago de la pasarela`
                                contenedor.appendChild(info)

                                let campo = document.createElement("input")
                                campo.classList.add("detallesReserva_campoNombreEnlace")
                                campo.setAttribute("campo", "pagoUIDPasarela")
                                campo.placeholder = "Codigo identificador de pago, por ejemplo h8qikEKdMiyPEtm5pKgjwv1fMSeZY"

                                contenedor.appendChild(campo)
                                return contenedor

                            }
                        }
                    },
                    eliminarPagoManual: {
                        UI: (metadatos) => {
                            const instanciaUID = metadatos.instanciaUID
                            const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                            const contenedor = document.createElement("div")
                            contenedor.classList.add("administracion_reservas_detallesReserva_transacciones_eliminarPagoManual")

                            const infoGlobal = document.createElement("div")
                            infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                            infoGlobal.innerText = `Para eliminar este pago escriba la palabra eliminar en el campo de texto y pulse el botonn eliminar. Recuerda que esto es una operacion irreversible por que estas eliminado el pago de la base de datos. Los reembolsos de este pago tambien se eliminaran`
                            contenedor.appendChild(infoGlobal)

                            const campoEliminar = document.createElement("input")
                            campoEliminar.classList.add("detallesReserva_reembolso_campo")
                            campoEliminar.setAttribute("campo", "palabra")
                            campoEliminar.placeholder = "Escriba la palabra eliminar"
                            contenedor.appendChild(campoEliminar)

                            const botonConfirmar = document.createElement("div")
                            botonConfirmar.classList.add("detallesReservaCancelarBoton")
                            botonConfirmar.setAttribute("componente", "botonActualizarEnlace")
                            botonConfirmar.innerText = "Eliminar irreversiblemente el pago"
                            botonConfirmar.addEventListener("click", () => {
                                const metadatos = {
                                    instanciaUID: instanciaUID,
                                    instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                }
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.eliminarPagoManual.confirmar(metadatos)
                            })
                            contenedor.appendChild(botonConfirmar)

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("detallesReservaCancelarBoton")
                            botonCancelar.setAttribute("componente", "botonActualizarEnlace")
                            botonCancelar.innerText = "Cerrar opciones de eliminación del pago"
                            botonCancelar.addEventListener("click", (e) => {
                                const selectorContenedorEliminar = e.target.closest("[contenedor=eliminarPago]")
                                selectorContenedorEliminar.innerHTML = null
                                selectorContenedorEliminar.removeAttribute("style")
                            })
                            contenedor.appendChild(botonCancelar)



                            return contenedor
                        },
                        confirmar: async (metadatos) => {
                            const instanciaUID = metadatos.instanciaUID
                            const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                            const metadatosPantallaCarga = {
                                mensaje: "Esperando al servidor...",
                                instanciaUID: instanciaUIDDetalleDelPago,
                            }
                            casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)


                            const pagoUID = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector("[pagoUID]").getAttribute("pagoUID")
                            const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector("[contenedor=eliminarPago] [campo=palabra]").value
                            const transaccion = {
                                zona: "administracion/reservas/transacciones/eliminarPagoManual",
                                pagoUID: pagoUID,
                                palabra: palabra,
                                reservaUID: Number(reservaUID)
                            }
                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                            const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUIDDetalleDelPago}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                            selectorPantallaDeCarga.map((pantalla) => {
                                pantalla.remove()
                            })

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)?.remove()
                                const selectorContenedorTransacciones = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                if (selectorContenedorTransacciones) {
                                    selectorContenedorTransacciones.querySelector(`[contenedor=listaDePagos]`).querySelector(`[pagoUID="${pagoUID}"]`)?.remove()
                                }
                                const datosActualizar = {
                                    instanciaUID: instanciaUID,
                                    reservaUID: reservaUID,
                                }
                                casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.actualizarDatosGlobalesPago(datosActualizar)




                                // Eliminar detalles del pago con le uid de detalles del pago
                                // Eliminar el pago renderizado con el uidinstancia y el apguid



                            }
                        }

                    },
                    actualizarDatosGlobalesPago: async (metadatos) => {


                        const reservaUID = metadatos.reservaUID
                        const instanciaUID = metadatos.instanciaUID

                        const selectorTotalReservaEnPanelGlobal = document.querySelector(`[dataReserva=totalReservaConImpuestos]`)
                        const selectorTotalReserva = document.querySelector(`[componentePago=totalReserva]`)
                        const selectorTotalPagado = document.querySelector(`[componentePago=totalPagado]`)
                        const selectorFaltantePorPagar = document.querySelector(`[componentePago=faltantePorPagar]`)
                        const selectorEstadoPago = document.querySelector(`[dataReserva=estadoPago]`)
                        const selectorPorecentajeReembolsado = document.querySelector(`[componentePago=porcentajeReembolsado]`)
                        const selectorPorecentajePagado = document.querySelector(`[componentePago=porcentajePagado]`)
                        const selectorTotalReembolsado = document.querySelector(`[componentePago=totalReembolsado]`)

                        const reservaAcutalRenderizada = document.querySelector("[reserva]").getAttribute("reserva")
                        if (reservaAcutalRenderizada === reservaUID) {
                            selectorTotalReservaEnPanelGlobal.innerHTML = "Recalculando..."
                        }




                        selectorTotalReserva.innerHTML = "Recalculando..."
                        selectorTotalPagado.innerHTML = "Recalculando..."
                        selectorFaltantePorPagar.innerHTML = "Recalculando..."
                        selectorEstadoPago.innerHTML = "Recalculando..."
                        selectorPorecentajeReembolsado.innerHTML = "Total reembolsado"
                        selectorPorecentajePagado.innerHTML = "Total pagado"
                        selectorTotalReembolsado.innerHTML = "Recalculando..."


                        const obtenerPagoaActualizados = {
                            zona: "administracion/reservas/transacciones/obtenerPagosDeLaReserva",
                            reservaUID: reservaUID
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(obtenerPagoaActualizados)
                        const seleccionarInstancia = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                        if (respuestaServidor?.error) {
                            if (seleccionarInstancia) {
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                        }

                        if (respuestaServidor?.ok) {
                            const totalReserva = respuestaServidor.totalReserva
                            const totalPagado = respuestaServidor.totalPagado
                            const faltantePorPagar = respuestaServidor.faltantePorPagar
                            const estadoPago = respuestaServidor.estadoPago
                            const totalReembolsado = respuestaServidor.totalReembolsado
                            const porcentajeReembolsado = respuestaServidor.porcentajeReembolsado
                            const porcentajePagado = respuestaServidor.porcentajePagado

                            if (reservaAcutalRenderizada === reservaUID) {
                                selectorTotalReservaEnPanelGlobal.innerHTML = totalReserva + "$"
                            }
                            if (!seleccionarInstancia) {
                                return
                            }

                            selectorTotalReserva.innerHTML = totalReserva + "$"
                            selectorTotalPagado.innerHTML = totalPagado + "$"
                            selectorFaltantePorPagar.innerHTML = faltantePorPagar + "$"

                            selectorPorecentajeReembolsado.innerHTML = `Total reembolsado (${porcentajeReembolsado})`
                            selectorPorecentajePagado.innerHTML = `Total pagado (${porcentajePagado})`
                            selectorTotalReembolsado.innerHTML = totalReembolsado + "$"

                            let estadoPagoUI
                            if (estadoPago === "pagado") {
                                estadoPagoUI = "Pagado"
                            }
                            if (estadoPago === "noPagado") {
                                estadoPagoUI = "No pagado"
                            }
                            if (estadoPago === "pagadoParcialmente") {
                                estadoPagoUI = "Pagado parcialmente"
                            }
                            if (estadoPago === "pagadoSuperadamente") {
                                estadoPagoUI = "Pagado superadamente"
                            }
                            selectorEstadoPago.innerHTML = estadoPagoUI

                        }
                    },
                },
                desgloseTotal: {
                    arranque: async () => {
                        casaVitini.administracion.reservas.detallesReserva.limpiarMenusCategorias()
                        document.querySelector(`[categoriaReserva=desgloseTotal]`).setAttribute("estadoCategoria", "actual")
                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const botonCategoria = document.querySelector("[categoriaReserva=desgloseTotal]")
                        botonCategoria.style.background = "blue"
                        botonCategoria.style.color = "white"
                        botonCategoria.setAttribute("categoria", "desgloseTotal")
                        const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                        const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                        contenedorDinamico.innerHTML = null


                        const contenedorDesgloseDelTotal = document.createElement("div")
                        contenedorDesgloseDelTotal.classList.add("administracion_reserver_detallesReserva_contenedorDesgloseTotal")
                        contenedorDesgloseDelTotal.setAttribute("instanciaUID", instanciaUID)
                        contenedorDesgloseDelTotal.setAttribute("componente", "contenedorDesgloseTotal")
                        contenedorDinamico.appendChild(contenedorDesgloseDelTotal)

                        const transaccion = {
                            zona: "administracion/reservas/detallesReserva",
                            reserva: Number(reservaUID),
                            solo: "desgloseTotal"
                        }

                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


                        if (respuestaServidor?.error) {
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.desgloseFinanciero) {
                            const selectorInstanciaUID = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (selectorInstanciaUID) {
                                const desgloseFinanciero = respuestaServidor.desgloseFinanciero
                                const totalesPorNoche = desgloseFinanciero.totalesPorNoche
                                const totalesPorApartamento = desgloseFinanciero.totalesPorApartamento
                                const ofertas = desgloseFinanciero.ofertas
                                const impuestos = desgloseFinanciero.impuestos
                                const totales = desgloseFinanciero.totales

                                const desgloseTotales = {
                                    totalesPorApartamento: totalesPorApartamento,
                                    totalesPorNoche: totalesPorNoche,
                                    totales: totales,
                                    impuestos: impuestos,
                                    ofertas: ofertas,
                                    destino: "[componente=contenedorDesgloseTotal]"
                                }
                                casaVitini.componentes.ui.totales(desgloseTotales)

                            }
                        }
                    }
                },
                cancelarReserva: {
                    arranque: () => {
                        document.body.style.overflow = 'hidden';

                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("contenedor", "opcionesCancelacion")


                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const contenidoAdvertenciaInmersiva = document.createElement("div")
                        contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                        contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")

                        const contenedorCancelacion = document.createElement("div")
                        contenedorCancelacion.classList.add("administracion_reservas_detallesReservas_cancelarReserva_contenedorCancelacion")


                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = "Cancelar reserva"
                        contenedorCancelacion.appendChild(tituloCancelarReserva)


                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                        botonCancelarProcesoCancelacion.innerText = "Cerrar y volver atras"
                        botonCancelarProcesoCancelacion.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.cancelarReserva.salirDelProceso)
                        contenedorCancelacion.appendChild(botonCancelarProcesoCancelacion)


                        const bloqueBloqueoApartamentos = document.createElement("div")
                        bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                        const tituloBloquoApartamentos = document.createElement("div")
                        tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        tituloBloquoApartamentos.innerText = "Selecciona que tipo de bloqueo quieres aplicar a los apartamentos de esta reserva tras la cancelación."
                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                        let opcionBloqueoApartamento = document.createElement("p")
                        opcionBloqueoApartamento.classList.add("detallesReservaCancelarOcionBloqueoApartamentos")
                        opcionBloqueoApartamento.setAttribute("componente", "cancelarReservaOpcionBloqueo")
                        opcionBloqueoApartamento.setAttribute("cancelarReservatipoBloqueo", "rangoTemporal")
                        opcionBloqueoApartamento.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.cancelarReserva.seleccionarOpcionBloqueoApartametos)
                        opcionBloqueoApartamento.innerText = "Bloquear los apartamentos de esta reserva tras a cancelación durante el mismo rango que tiene esta reserva"
                        bloqueBloqueoApartamentos.appendChild(opcionBloqueoApartamento)

                        opcionBloqueoApartamento = document.createElement("p")
                        opcionBloqueoApartamento.classList.add("detallesReservaCancelarOcionBloqueoApartamentos")
                        opcionBloqueoApartamento.setAttribute("componente", "cancelarReservaOpcionBloqueo")
                        opcionBloqueoApartamento.setAttribute("cancelarReservatipoBloqueo", "permanente")
                        opcionBloqueoApartamento.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.cancelarReserva.seleccionarOpcionBloqueoApartametos)
                        opcionBloqueoApartamento.innerText = "Bloquear los apartamentos de esta reserva tras a cancelación con un bloqueo permanente. Deberá liberarlos manualmente"
                        bloqueBloqueoApartamentos.appendChild(opcionBloqueoApartamento)

                        opcionBloqueoApartamento = document.createElement("p")
                        opcionBloqueoApartamento.classList.add("detallesReservaCancelarOcionBloqueoApartamentos")
                        opcionBloqueoApartamento.setAttribute("componente", "cancelarReservaOpcionBloqueo")
                        opcionBloqueoApartamento.setAttribute("cancelarReservatipoBloqueo", "sinBloqueo")
                        opcionBloqueoApartamento.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.cancelarReserva.seleccionarOpcionBloqueoApartametos)
                        opcionBloqueoApartamento.innerText = "Liberar los apartamentos de esta reserva tras la cancelación para que pasen a estar disponibles para su reserva"
                        bloqueBloqueoApartamentos.appendChild(opcionBloqueoApartamento)

                        contenedorCancelacion.appendChild(bloqueBloqueoApartamentos)

                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                        const entradaPalabraCancelar = document.createElement("input")
                        entradaPalabraCancelar.classList.add("detallesReservaCancelarEntradaTextoCancelar")
                        entradaPalabraCancelar.placeholder = "Escriba la palabra cancelar"
                        //  advertenciaInmersivaIU.appendChild(entradaPalabraCancelar)
                        const infoBotonCancelar = document.createElement("div")
                        infoBotonCancelar.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        infoBotonCancelar.innerText = "Para que se habilite el botón tienes que seleccionar unas de las tres opciones de arriba."
                        bloqueBloqueoApartamentos.appendChild(infoBotonCancelar)


                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.style.pointerEvents = "none"
                        botonCancelar.style.color = "#313131"
                        botonCancelar.innerText = "Confirmar y cancelar reserva"
                        botonCancelar.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.cancelarReserva.confirmaCancelacion)
                        bloqueBloqueoApartamentos.appendChild(botonCancelar)


                        const infoEliminarReserva = document.createElement("div")
                        infoEliminarReserva.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        infoEliminarReserva.style.marginTop = "50px"

                        infoEliminarReserva.innerText = "También puedes eliminar irreversiblemente una reserva. La eliminación irreversible de una reserva borra la información de la reserva, así como los pagos asociados a la reserva y toda la información relacionada con la reserva. A diferencia de la cancelación los datos dejaran de estar disponibles."
                        bloqueBotones.appendChild(infoEliminarReserva)

                        const botonEliminarReserva = document.createElement("div")
                        botonEliminarReserva.classList.add("administracion_reservas_detallesReserva_cancelarReserva_botonV1")
                        botonEliminarReserva.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonEliminarReserva.innerText = "Eliminar irreversiblemente la reserva"
                        botonEliminarReserva.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.cancelarReserva.eliminarReservaIrreversiblemente.UI)
                        bloqueBotones.appendChild(botonEliminarReserva)

                        contenedorCancelacion.appendChild(bloqueBotones)

                        contenidoAdvertenciaInmersiva.appendChild(contenedorCancelacion)

                        contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)

                        document.body.appendChild(advertenciaInmersivaIU)


                    },
                    seleccionarOpcionBloqueoApartametos: (opcion) => {

                        let selectorOpciones = [...document.querySelectorAll("[componente=cancelarReservaOpcionBloqueo]")]
                        let opcionBloqueo = opcion.target
                        let botonCancelar = document.querySelector("[componente=botonConfirmarCancelarReserva]")

                        if (opcionBloqueo.getAttribute("estado") === "activo") {
                            opcionBloqueo.removeAttribute("estado")
                            botonCancelar.style.pointerEvents = "none"
                            botonCancelar.style.color = "#313131"
                            opcionBloqueo.removeAttribute("style")
                            return
                        }

                        selectorOpciones.map((opcionBloqueo) => {
                            opcionBloqueo.removeAttribute("style")
                            opcionBloqueo.removeAttribute("estado")
                        })

                        opcionBloqueo.style.background = "blue"
                        opcionBloqueo.style.color = "white"
                        opcionBloqueo.setAttribute("estado", "activo")
                        botonCancelar.removeAttribute("style")

                    },
                    confirmaCancelacion: async () => {
                        let reserva = document.querySelector("[reserva]").getAttribute("reserva")
                        let tipoBloqueo = document.querySelector("[componente=cancelarReservaOpcionBloqueo][estado=activo]").getAttribute("cancelarReservatipoBloqueo")

                        const transaccion = {
                            zona: "administracion/reservas/cancelarReserva",
                            reserva: Number(reserva),
                            tipoBloqueo: tipoBloqueo
                        }

                        let respuestaServidor = await casaVitini.componentes.servidor(transaccion)


                        if (respuestaServidor?.error) {

                            casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }


                        if (respuestaServidor?.ok) {
                            document.querySelector("[dataReserva=estado]").innerText = "Cancelada"
                            let selectorBotonesInvisibles = [...document.querySelectorAll("[estadoInvisible=Cancelada]")]
                            selectorBotonesInvisibles.map((boton) => {
                                boton.classList.add("estadoInicialInvisible")
                            })

                            let selectorAdvertenciaInmersiva = document.querySelector("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.innerHTML = null

                            const titulo = document.createElement("p")
                            titulo.classList.add("detallesReservaTituloCancelarReserva")
                            titulo.innerText = "Reserva cancelada"
                            selectorAdvertenciaInmersiva.appendChild(titulo)

                            const boton = document.createElement("div")
                            boton.classList.add("detallesReservaCancelarBoton")
                            boton.innerText = "Aceptar y volver a la reserva ahora cancelada"
                            boton.addEventListener("click", () => {
                                let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                                selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                    advertenciaInmersiva.remove()
                                })
                            })
                            selectorAdvertenciaInmersiva.appendChild(boton)


                        }


                    },
                    eliminarReservaIrreversiblemente: {
                        UI: () => {
                            const instanciaUID = casaVitini.componentes.codigoFechaInstancia()




                            const selectorContenedorOpcionesCancelacion = document.querySelector("[contenedor=opcionesCancelacion]")
                            selectorContenedorOpcionesCancelacion.style.transition = "background 500ms"
                            selectorContenedorOpcionesCancelacion.style.background = "rgba(255, 0, 0, 0.3)"
                            selectorContenedorOpcionesCancelacion.setAttribute("instanciaUID", instanciaUID)

                            const selectorContenido = selectorContenedorOpcionesCancelacion.querySelector("[contenedor=contenidoAdvertenciaInmersiva]")
                            selectorContenido.innerHTML = null


                            const contenedorCancelacion = document.createElement("div")
                            contenedorCancelacion.classList.add("administracion_reservas_detallesReservas_cancelarReserva_contenedorCancelacion")


                            const tituloCancelarReserva = document.createElement("p")
                            tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                            tituloCancelarReserva.innerText = "Eliminar irreversiblemente una reserva"
                            tituloCancelarReserva.style.color = "red"
                            contenedorCancelacion.appendChild(tituloCancelarReserva)


                            const botonCancelarProcesoCancelacion = document.createElement("div")
                            botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                            botonCancelarProcesoCancelacion.innerText = "Cerrar y volver atras"
                            botonCancelarProcesoCancelacion.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.cancelarReserva.salirDelProceso)
                            contenedorCancelacion.appendChild(botonCancelarProcesoCancelacion)


                            const bloqueBloqueoApartamentos = document.createElement("div")
                            bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                            const tituloBloquoApartamentos = document.createElement("div")
                            tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                            tituloBloquoApartamentos.innerText = "Eliminar irreversiblemente una reserva elimina de la base de datos la información de la reserva, los alojamientos asociados, los pernoctantes de la reserva, los pagos y los reembolsos. Esta eliminación es irreversible. Los datos desaparecerán de la base de datos y si no existen en una copia de seguridad no serán recuperables. Si solo desea cancelar una reserva para liberar los apartamentos y hacer que deje de tener vigencia, cancélela y podrá seguir teniendo acceso a los datos de esta sin que tenga vigencia pernoctativa."
                            bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)


                            const infoSeguridad = document.createElement("div")
                            infoSeguridad.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                            infoSeguridad.innerText = "Para eliminar una reserva irreversiblemente junto con toda su información relacionada debe de escribir su contraseña de usuario y su cuenta de debe de tener autorización Administrativa."
                            bloqueBloqueoApartamentos.appendChild(infoSeguridad)

                            const campo = document.createElement("input")
                            campo.classList.add("administracion_reserva_detallesReserva_cancelarReserva_eliminarReserva_campo")
                            campo.setAttribute("campo", "clave")
                            campo.type = "password"
                            campo.placeholder = "Escriba la contraseña de su VitiniID"
                            bloqueBloqueoApartamentos.appendChild(campo)



                            contenedorCancelacion.appendChild(bloqueBloqueoApartamentos)

                            const bloqueBotones = document.createElement("div")
                            bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")


                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("administracion_reserva_detallesReserva_cancelarReserva_eliminarReserva_botonV1")
                            botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                            botonCancelar.innerText = "Eliminar reseva irreversiblemente"
                            botonCancelar.addEventListener("click", () => {

                                return casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.cancelarReserva.eliminarReservaIrreversiblemente.confirmar(instanciaUID)
                            })
                            bloqueBloqueoApartamentos.appendChild(botonCancelar)
                            contenedorCancelacion.appendChild(bloqueBotones)




                            selectorContenido.appendChild(contenedorCancelacion)
                            // selectorContenido.appendChild(selectorContenedorOpcionesCancelacion)


                        },
                        confirmar: async (instanciaUID) => {

                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                            const clave = document.querySelector(`[instanciaUID="${instanciaUID}"] [campo=clave]`)
                            const metadatosPantallaCarga = {
                                mensaje: "Esperando al servidor...",
                                instanciaUID: instanciaUID,
                            }
                            casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                            const transaccion = {
                                zona: "administracion/reservas/eliminarIrreversiblementeReserva",
                                reserva: Number(reservaUID),
                                clave: clave?.value
                            }
                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                            const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                            selectorPantallaDeCarga.map((pantalla) => {
                                pantalla.remove()
                            })
                            if (respuestaServidor?.error) {
                                document.querySelector(`[instanciaUID="${instanciaUID}"] [campo=clave]`).value = null
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const entrada = {
                                    vista: "/administracion",
                                    tipoOrigen: "menuNavegador"
                                }
                                casaVitini.componentes.controladorVista(entrada);
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.ok)
                            }

                        }
                    },

                    salirDelProceso: () => {
                        casaVitini.componentes.limpiarAdvertenciasInmersivas();
                        const granuladoURL = casaVitini.componentes.granuladorURL()
                        const posicionReservaUID = granuladoURL.directorios.findIndex(directorio => directorio === "reservas") + 1;
                        const reservaUID = granuladoURL.directorios[posicionReservaUID]

                        const directoriosFusionLimpios = []
                        granuladoURL.directorios.map((directorio, indice) => {
                            if (indice <= posicionReservaUID) {
                                directoriosFusionLimpios.push(directorio)
                            }
                        })
                        const directoriosFusion = "/" + directoriosFusionLimpios.join("/")
                        const componentesExistenteUID = "reservaUID_" + reservaUID
                        const titulo = "Casa Vitini"
                        const estado = {
                            zona: directoriosFusion,
                            EstadoInternoZona: "estado",
                            tipoCambio: "parcial",
                            conpontenteExistente: componentesExistenteUID,
                            funcionPersonalizada: "casaVitini.administracion.reservas.detallesReserva.limpiarMenusCategorias"
                        }
                        window.history.pushState(estado, titulo, directoriosFusion);






                    },

                },
                miscelanea: {
                    arranque: async () => {
                        casaVitini.administracion.reservas.detallesReserva.limpiarMenusCategorias()
                        document.querySelector(`[categoriaReserva=miscelanea]`).setAttribute("estadoCategoria", "actual")

                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const obtenerPDF = async () => {

                            const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                            const advertenciaInmersivaIU = document.createElement("div")
                            advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                            advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                            advertenciaInmersivaIU.setAttribute("instanciaUID", instanciaUID)

                            const contenedorAdvertenciaInmersiva = document.createElement("div")
                            contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                            const contenidoAdvertenciaInmersiva = document.createElement("div")
                            contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                            contenidoAdvertenciaInmersiva.setAttribute("espacio", "gestionPDF")

                            const mensajeSpinner = "Generando PDF...."
                            const spinner = casaVitini.componentes.spinner(mensajeSpinner)
                            contenidoAdvertenciaInmersiva.appendChild(spinner)

                            contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                            advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                            document.body.appendChild(advertenciaInmersivaIU)

                            const advertenciaInmersivaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                            try {
                                const metadatospdf = {
                                    zona: "administracion/reservas/generarPdf",
                                    reservaUID: Number(reservaUID)
                                }
                                const puerto = '/puerto';
                                const peticion = {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify(metadatospdf)
                                };
                                const respuestaServidor = await fetch(puerto, peticion);
                                const tipoContenido = respuestaServidor.headers.get('Content-Type')

                                if (tipoContenido.includes('application/json')) {
                                    const respuestaEnFomtadoJSO = await respuestaServidor.json()

                                    advertenciaInmersivaRenderizada?.remove()
                                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaEnFomtadoJSO.error)
                                }
                                if (tipoContenido === "application/pdf") {
                                    if (advertenciaInmersivaRenderizada) {

                                        const BLOB = await respuestaServidor.blob();
                                        const selectorZonaGestion = advertenciaInmersivaRenderizada.querySelector("[espacio=gestionPDF]");
                                        selectorZonaGestion.innerHTML = null;
                                        selectorZonaGestion.style.alignItems = "center"
                                        selectorZonaGestion.innerText = "Se ha generado el archivo PDF con el resumen de su reserva. Para descargar el PDF para iniciar la descarga del PDF ";

                                        const PDFGenerado = new Blob([BLOB], { type: 'application/pdf' });

                                        const pdfGenerado = document.createElement('a');
                                        pdfGenerado.href = window.URL.createObjectURL(PDFGenerado);
                                        pdfGenerado.classList.add("plaza_alojamiento_reservaConfirmada_botoDescargaPDF")
                                        pdfGenerado.download = 'Reserva.pdf';
                                        pdfGenerado.innerText = "Descargar reserva en PDF";
                                        selectorZonaGestion.appendChild(pdfGenerado)


                                        const botonCancelarProcesoCancelacion = document.createElement("div")
                                        botonCancelarProcesoCancelacion.classList.add("plaza_alojamiento_reservaConfirmada_botoDescargaPDF")
                                        botonCancelarProcesoCancelacion.innerText = "Cancelar y volver a la reserva"
                                        botonCancelarProcesoCancelacion.addEventListener("click", (e) => {
                                            e.target.closest(`[instanciaUID="${instanciaUID}"]`).remove()

                                        })
                                        selectorZonaGestion.appendChild(botonCancelarProcesoCancelacion)
                                    }
                                }




                            } catch (error) {
                                advertenciaInmersivaRenderizada?.remove()
                                casaVitini.ui.vistas.advertenciaInmersiva(error.message)
                            }
                        }

                        const botonEnlacesDePago = document.querySelector("[categoriaReserva=miscelanea]")
                        botonEnlacesDePago.style.background = "blue"
                        botonEnlacesDePago.querySelector("[componente=iconoLineaMiscelanea]").style.background = "white"
                        const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                        const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                        contenedorDinamico.innerHTML = null

                        const contenedorDesgloseDelTotal = document.createElement("div")
                        contenedorDesgloseDelTotal.classList.add("administracion_reserver_detallesReserva_contenedorDesgloseTotal")
                        contenedorDesgloseDelTotal.setAttribute("instanciaUID", instanciaUID)
                        contenedorDesgloseDelTotal.setAttribute("componente", "contenedorDesgloseTotal")
                        contenedorDinamico.appendChild(contenedorDesgloseDelTotal)

                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("administracion_reservas_detallesReserva_contenedorMisleanea")

                        const titulo = document.createElement("p")
                        titulo.classList.add("detallesReserva_reembolso_tituloGlobal")
                        titulo.innerText = "Miscelánea"
                        contenedorAdvertenciaInmersiva.appendChild(titulo)

                        const infoGlobal = document.createElement("div")
                        infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                        infoGlobal.innerText = `En la miscelánea de la reserva encontrara operaciones y demás propósitos u opciones que por su idiosincrasia especifica no requieren de un contexto dedicado`
                        contenedorAdvertenciaInmersiva.appendChild(infoGlobal)


                        let boton = document.createElement("div")
                        boton.classList.add("administracion_reservas_detallesReserfa_miscelanea_botonOpcion")
                        boton.addEventListener("click", obtenerPDF)
                        boton.innerText = "Generar un PDF del resumen de la reserva"
                        contenedorAdvertenciaInmersiva.appendChild(boton)

                        boton = document.createElement("div")
                        boton.classList.add("administracion_reservas_detallesReserfa_miscelanea_botonOpcion")
                        boton.innerText = "Generar un PDF del resumen de la reserva y enviar por email (implementandose)"
                        //contenedorAdvertenciaInmersiva.appendChild(boton)

                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        instanciaRenderizada.innerHTML = null
                        instanciaRenderizada.appendChild(contenedorAdvertenciaInmersiva)

                    }
                },


            },
            categoriasGlobalesBotonesUI: (metadatos) => {

                const rectangularidad = metadatos.rectangularidad
                const reservaUID = metadatos.reservaUID

                let css
                if (rectangularidad === "horizontal") {
                    css = "administracion_reserva_detallesReserva_marcoMenuExpandido_horizontal"
                }

                if (rectangularidad === "vertical") {
                    css = "administracion_reserva_detallesReserva_marcoMenuExpandido_vertical"
                }


                const divBotones = document.createElement('div');
                divBotones.setAttribute('class', css);
                divBotones.setAttribute("componente", "panelDetallesReserva")
                // Crear el primer botón: p.botonSimpleV2 - Anadir apartamento


                const botonNuevaReserva = document.createElement('a');
                botonNuevaReserva.setAttribute('class', 'adminitracion_reservas_DetallesReserva_botonCategoria');
                botonNuevaReserva.setAttribute('categoriaReserva', 'alojamiento');
                botonNuevaReserva.setAttribute('href', '/administracion/reservas/' + reservaUID + "/alojamiento");
                botonNuevaReserva.addEventListener("click", (e) => {

                    e.preventDefault()
                    const metadatos = {
                        categoria: "alojamiento",
                        origen: "botonCategoria",
                        reservaUID: reservaUID
                    }
                    return casaVitini.administracion.reservas.detallesReserva.controladorCategorias(metadatos)


                })
                botonNuevaReserva.textContent = 'Alojamiento';
                divBotones.appendChild(botonNuevaReserva);

                // Crear el tercer botón: p.botonSimpleV2 - Calcular precio
                const botonCalcularPrecio = document.createElement('a');
                botonCalcularPrecio.setAttribute('class', 'adminitracion_reservas_DetallesReserva_botonCategoria');
                botonCalcularPrecio.setAttribute('componente', 'botonCalcularPrecioReserva');
                botonCalcularPrecio.setAttribute('categoriaReserva', 'enlacesDePago');
                botonCalcularPrecio.setAttribute('href', '/administracion/reservas/' + reservaUID + "/enlaces_de_pago");
                botonCalcularPrecio.addEventListener("click", (e) => {

                    e.preventDefault()
                    const metadatos = {
                        categoria: "enlacesDePago",
                        origen: "botonCategoria",
                        reservaUID: reservaUID
                    }
                    return casaVitini.administracion.reservas.detallesReserva.controladorCategorias(metadatos)
                })
                botonCalcularPrecio.textContent = 'Enlaces de pago';
                divBotones.appendChild(botonCalcularPrecio);

                // divBotones.appendChild(botonAplicarDescuento);
                const botonDetallesDelPago = document.createElement('a');
                botonDetallesDelPago.setAttribute('class', 'adminitracion_reservas_DetallesReserva_botonCategoria');
                botonDetallesDelPago.setAttribute('categoriaReserva', 'transacciones');
                botonDetallesDelPago.setAttribute('href', '/administracion/reservas/' + reservaUID + "/transacciones");
                botonDetallesDelPago.textContent = 'Transacciones';
                botonDetallesDelPago.addEventListener("click", (e) => {
                    e.preventDefault()

                    const metadatos = {
                        categoria: "transacciones",
                        origen: "botonCategoria",
                        reservaUID: reservaUID
                    }
                    return casaVitini.administracion.reservas.detallesReserva.controladorCategorias(metadatos)
                })
                divBotones.appendChild(botonDetallesDelPago);

                // divBotones.appendChild(botonAplicarDescuento);
                const botonEnlacePago = document.createElement('a');
                botonEnlacePago.setAttribute('class', 'adminitracion_reservas_DetallesReserva_botonCategoria');
                botonEnlacePago.setAttribute('categoriaReserva', 'desgloseTotal');
                botonEnlacePago.setAttribute('href', '/administracion/reservas/' + reservaUID + "/desglose_total");
                botonEnlacePago.textContent = 'Desglose del total';
                botonEnlacePago.addEventListener("click", (e) => {
                    e.preventDefault()

                    const metadatos = {
                        categoria: "desgloseTotal",
                        origen: "botonCategoria",
                        reservaUID: reservaUID
                    }
                    return casaVitini.administracion.reservas.detallesReserva.controladorCategorias(metadatos)
                })
                divBotones.appendChild(botonEnlacePago);

                // Crear el quinto botón: p.botonSimpleV2 - Cancelar reserva
                const botonCancelarReserva = document.createElement('a');
                botonCancelarReserva.setAttribute('class', 'adminitracion_reservas_DetallesReserva_botonCategoria');
                botonCancelarReserva.setAttribute('categoriaReserva', 'cancelarReserva');
                botonCancelarReserva.setAttribute('href', '/administracion/reservas/' + reservaUID + "/cancelar_reserva");

                botonCancelarReserva.addEventListener("click", (e) => {
                    e.preventDefault()

                    const metadatos = {
                        categoria: "cancelarReserva",
                        origen: "botonCategoria",
                        reservaUID: reservaUID
                    }
                    return casaVitini.administracion.reservas.detallesReserva.controladorCategorias(metadatos)
                })
                botonCancelarReserva.textContent = 'Cancelar reserva';
                divBotones.appendChild(botonCancelarReserva);

                const botonMiscelanea = document.createElement('a');
                botonMiscelanea.setAttribute('class', 'adminitracion_reservas_DetallesReserva_botonCategoria');
                botonMiscelanea.setAttribute('categoriaReserva', 'miscelanea');
                botonMiscelanea.setAttribute('href', '/administracion/reservas/' + reservaUID + "/miscelanea");
                botonMiscelanea.addEventListener("click", (e) => {
                    e.preventDefault()
                    const metadatos = {
                        categoria: "miscelanea",
                        origen: "botonCategoria",
                        reservaUID: reservaUID
                    }
                    return casaVitini.administracion.reservas.detallesReserva.controladorCategorias(metadatos)

                })
                const lineaMiscelanea = document.createElement("div")
                lineaMiscelanea.setAttribute("componente", "iconoLineaMiscelanea")
                lineaMiscelanea.classList.add("administracion_reservas_detallesReseerva_iconoMiscelanea")
                //lineaMiscelanea.setAttribute('href', '/administracion/reservas/' + reservaUID + "/alojamiento");

                botonMiscelanea.appendChild(lineaMiscelanea);
                divBotones.appendChild(botonMiscelanea);

                // Anadir divBotones al div principal
                return divBotones;

            },
            reembolso_obsoleto: {
                UI: {
                    panelReembolso: async (reembolso) => {
                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const pagoUID = reembolso.pagoUID
                        const urlPagoSquare = reembolso.urlPagoSquare
                        const tarjetaDigitos = reembolso.tarjetaDigitos
                        const plataforma = reembolso.plataforma
                        const totalPagado = reembolso.totalPagado
                        const totalReembolso = reembolso.totalReembolso

                        let totalReembolsadoUI

                        if (totalReembolso.cantidad) {
                            totalReembolsadoUI = totalReembolso.cantidad + " " + totalReembolso.moneda
                        } else {
                            totalReembolsadoUI = 0.00
                        }

                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const contenidoAdvertenciaInmersiva = document.createElement("div")
                        contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("botonAdvertenciaInmersivaV1")
                        botonCancelar.innerText = "Cerrar detalles del reembolso"
                        botonCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                        contenidoAdvertenciaInmersiva.appendChild(botonCancelar)

                        const titulo = document.createElement("p")
                        titulo.classList.add("detallesReserva_reembolso_tituloGlobal")
                        titulo.innerText = "Informacíon del reembolso"
                        contenidoAdvertenciaInmersiva.appendChild(titulo)


                        const infoGlobal = document.createElement("div")
                        infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                        infoGlobal.innerText = `Datos del reembolso obtenidos de la pasarela de pago ahora mismo. Si el reembolso se acaba de emitir hace unos minutos y observa que el estado es procesando. Es por que el reembolso ha llegado con exito a la pasarela de pago y la pasarela de pago esta a la espera que realizar el reembolso. Solo cabe esperar a que se realiaze el reembolso. Esto puede llevar de minutos a incluso una semana dependiendo de variso factores`
                        contenidoAdvertenciaInmersiva.appendChild(infoGlobal)

                        const bloquePagoUID = document.createElement("div")
                        bloquePagoUID.classList.add("detallesReserva_reemboldo_bloque")

                        const infoPagoUID = document.createElement("div")
                        infoPagoUID.classList.add("detallesReserva_reembolso_info")
                        infoPagoUID.classList.add("negrita")
                        infoPagoUID.innerText = `Identificador del pago de la pasarela`
                        bloquePagoUID.appendChild(infoPagoUID)

                        const datoPagoUID = document.createElement("a")
                        datoPagoUID.classList.add("detallesReserva_reembolso_info")
                        datoPagoUID.setAttribute("href", urlPagoSquare)
                        datoPagoUID.setAttribute("target", "_blank")
                        datoPagoUID.innerText = pagoUID
                        bloquePagoUID.appendChild(datoPagoUID)

                        contenidoAdvertenciaInmersiva.appendChild(bloquePagoUID)



                        const bloqueInterno = document.createElement("div")
                        bloqueInterno.classList.add("detallesReserva_reemboldo_bloque")

                        const infoPlataforma = document.createElement("div")
                        infoPlataforma.classList.add("detallesReserva_reembolso_info")
                        infoPlataforma.classList.add("negrita")
                        infoPlataforma.innerText = `Destino del reembolso`
                        bloqueInterno.appendChild(infoPlataforma)

                        const datoPlataforma = document.createElement("div")
                        datoPlataforma.classList.add("detallesReserva_reembolso_info")
                        datoPlataforma.innerText = "**** **** **** " + tarjetaDigitos + " " + plataforma
                        bloqueInterno.appendChild(datoPlataforma)

                        contenidoAdvertenciaInmersiva.appendChild(bloqueInterno)

                        const bloqueReembolsoUID = document.createElement("div")
                        bloqueReembolsoUID.classList.add("detallesReserva_reemboldo_bloque")

                        const infoReembolsoUID = document.createElement("div")
                        infoReembolsoUID.classList.add("detallesReserva_reembolso_info")
                        infoReembolsoUID.classList.add("negrita")
                        infoReembolsoUID.innerText = `Total cobrado al cliente`
                        bloqueReembolsoUID.appendChild(infoReembolsoUID)

                        const datoReembolsoUID = document.createElement("div")
                        datoReembolsoUID.classList.add("detallesReserva_reembolso_info")
                        datoReembolsoUID.setAttribute("totalPagado", totalPagado.cantidad)
                        datoReembolsoUID.innerText = totalPagado.cantidad + " " + totalPagado.moneda
                        bloqueReembolsoUID.appendChild(datoReembolsoUID)

                        contenidoAdvertenciaInmersiva.appendChild(bloqueReembolsoUID)


                        const bloqueEstadoReembolso = document.createElement("div")
                        bloqueEstadoReembolso.classList.add("detallesReserva_reemboldo_bloque")

                        const infoEstadReembolso = document.createElement("div")
                        infoEstadReembolso.classList.add("detallesReserva_reembolso_info")
                        infoEstadReembolso.classList.add("negrita")
                        infoEstadReembolso.innerText = `Total reembolsado (Sumando todos los reembolsos realizados en esta transacccíon)`
                        bloqueEstadoReembolso.appendChild(infoEstadReembolso)

                        const datoEstadoReembolso = document.createElement("div")
                        datoEstadoReembolso.classList.add("detallesReserva_reembolso_info")
                        datoEstadoReembolso.setAttribute("totalReembolsado", totalReembolso?.cantidad || 0)
                        datoEstadoReembolso.innerText = totalReembolsadoUI
                        bloqueEstadoReembolso.appendChild(datoEstadoReembolso)



                        contenidoAdvertenciaInmersiva.appendChild(bloqueEstadoReembolso)



                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("detallesReserva_reembolso_contenedorBotones")

                        const botonOtroReembolso = document.createElement("div")
                        botonOtroReembolso.classList.add("botonAdvertenciaInmersivaV1")
                        botonOtroReembolso.setAttribute("boton", "emitirReembolso")
                        botonOtroReembolso.innerText = "Emitir un reembolso"
                        botonOtroReembolso.addEventListener("click", (e) => {
                            casaVitini.administracion.reservas.detallesReserva.reembolso.UI.reseteaBotones()
                            e.target.style.background = "blue"
                            e.target.style.color = "white"
                            casaVitini.administracion.reservas.detallesReserva.reembolso.UI.realizarReembolso()
                        })
                        contenedorBotones.appendChild(botonOtroReembolso)

                        const botonDesglosePorReembolso = document.createElement("div")
                        botonDesglosePorReembolso.classList.add("botonAdvertenciaInmersivaV1")
                        botonDesglosePorReembolso.innerText = "Desglose por reembolso"
                        botonDesglosePorReembolso.setAttribute("boton", "emitirReembolso")
                        botonDesglosePorReembolso.addEventListener("click", (e) => {
                            casaVitini.administracion.reservas.detallesReserva.reembolso.UI.reseteaBotones()
                            e.target.style.background = "blue"
                            e.target.style.color = "white"
                            casaVitini.administracion.reservas.detallesReserva.reembolso.UI.informacionReembolso()
                        })
                        contenedorBotones.appendChild(botonDesglosePorReembolso)

                        contenidoAdvertenciaInmersiva.appendChild(contenedorBotones)


                        const contenedorDinamico = document.createElement("div")
                        contenedorDinamico.classList.add("reservaDetalles_reembolso_contenedorDinamico")
                        contenedorDinamico.setAttribute("componente", "contenedorDinamicoReembolso")
                        contenidoAdvertenciaInmersiva.appendChild(contenedorDinamico)

                        const enlacePagoUIRenderizada = document.querySelector("[componenteUID=reembolsoUI]")
                        enlacePagoUIRenderizada.innerHTML = null

                        contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)

                        enlacePagoUIRenderizada.appendChild(contenedorAdvertenciaInmersiva)



                    },
                    informacionReembolso: async (reembolso) => {
                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                        const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                        const contenedorReembolsos = document.createElement("div")
                        contenedorReembolsos.classList.add("detallesReserva_reembolso_contenedorReembolsos")
                        contenedorReembolsos.setAttribute("instanciaUID", instanciaUID)

                        const contenedorCarga = document.createElement("div")
                        contenedorCarga.classList.add("detallesReserva_reembolso_contenedorCarga")


                        const spinnerContainer = document.createElement('div');
                        spinnerContainer.setAttribute("componente", "iconoCargaEnlace");

                        spinnerContainer.classList.add("lds-spinner");

                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement('div');
                            spinnerContainer.appendChild(div);
                        }

                        contenedorCarga.appendChild(spinnerContainer)

                        const info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.innerText = "Esperando a la pasarela..."
                        contenedorCarga.appendChild(info)
                        contenedorReembolsos.appendChild(contenedorCarga)

                        const contenedorDinamicoReembolso = document.querySelector("[componente=contenedorDinamicoReembolso]")
                        contenedorDinamicoReembolso.innerHTML = null
                        contenedorDinamicoReembolso.appendChild(contenedorReembolsos)



                        const transacccion = {
                            zona: "administracion/reservas/reembolso/obtenerDetallesDeLosReembolsos",
                            reservaUID: Number(reservaUID)
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transacccion)

                        if (respuestaServidor?.error) {

                            contenedorReembolsos.innerHTML = null
                            const info = document.createElement("div")
                            info.setAttribute("class", "advertenciaInfoFlujoPago")
                            info.setAttribute("componente", "mensajeFlujoPasarela")
                            info.innerText = respuestaServidor?.error
                            contenedorReembolsos.appendChild(info)
                            return
                        }
                        if (respuestaServidor?.ok) {
                            contenedorReembolsos.innerHTML = null


                            const reembolsos = respuestaServidor?.ok.reembolsos


                            const tituloContenedorReembolso = document.createElement("div")
                            tituloContenedorReembolso.classList.add("detallesReserva_reembolso_tituloContenedorReembolso")
                            tituloContenedorReembolso.classList.add("negrita")

                            tituloContenedorReembolso.innerText = "Desglose por reembolso"
                            contenedorReembolsos.appendChild(tituloContenedorReembolso)


                            for (const detallesDelReembolso of reembolsos) {

                                const id = detallesDelReembolso.id
                                const estado = detallesDelReembolso.estado
                                const total = detallesDelReembolso.total
                                const creacionUTC = detallesDelReembolso.creacionUTC
                                const actualizacionUTC = detallesDelReembolso.actualizacionUTC

                                const creacionESP = detallesDelReembolso.creacionESP
                                const actualizacionESP = detallesDelReembolso.actualizacionESP

                                const creacionNIC = detallesDelReembolso.creacionNIC
                                const actualizacionNIC = detallesDelReembolso.actualizacionNIC



                                const contenedorReembolso = document.createElement("div")
                                contenedorReembolso.classList.add("detallesResera_reembolso_contenedorDetallesReembolso")

                                let bloqueReembolso = document.createElement("div")
                                bloqueReembolso.classList.add("detallesReserva_reemboldo_bloqueDetallesReembolso")

                                let info = document.createElement("div")
                                info.classList.add("detallesReserva_reembolso_info")
                                info.classList.add("negrita")
                                info.innerText = `Identificador del reembolso`
                                bloqueReembolso.appendChild(info)

                                let dato = document.createElement("div")
                                dato.classList.add("detallesReserva_reembolso_info")
                                dato.innerText = id
                                bloqueReembolso.appendChild(dato)
                                contenedorReembolso.appendChild(bloqueReembolso)

                                bloqueReembolso = document.createElement("div")
                                bloqueReembolso.classList.add("detallesReserva_reemboldo_bloqueDetallesReembolso")

                                info = document.createElement("div")
                                info.classList.add("detallesReserva_reembolso_info")
                                info.classList.add("negrita")
                                info.innerText = `Estado del reembolso`
                                bloqueReembolso.appendChild(info)

                                dato = document.createElement("div")
                                dato.classList.add("detallesReserva_reembolso_info")
                                dato.innerText = estado
                                bloqueReembolso.appendChild(dato)
                                contenedorReembolso.appendChild(bloqueReembolso)



                                bloqueReembolso = document.createElement("div")
                                bloqueReembolso.classList.add("detallesReserva_reemboldo_bloqueDetallesReembolso")

                                info = document.createElement("div")
                                info.classList.add("detallesReserva_reembolso_info")
                                info.classList.add("negrita")
                                info.innerText = `Total del reembolso`
                                bloqueReembolso.appendChild(info)

                                dato = document.createElement("div")
                                dato.classList.add("detallesReserva_reembolso_info")
                                dato.innerText = total.cantidad + " " + total.moneda
                                bloqueReembolso.appendChild(dato)
                                contenedorReembolso.appendChild(bloqueReembolso)


                                bloqueReembolso = document.createElement("div")
                                bloqueReembolso.classList.add("detallesReserva_reemboldo_bloqueDetallesReembolso")

                                info = document.createElement("div")
                                info.classList.add("detallesReserva_reembolso_info")
                                info.classList.add("negrita")
                                info.innerText = `Fecha de creacion del reembolso`
                                bloqueReembolso.appendChild(info)

                                dato = document.createElement("div")
                                dato.classList.add("detallesReserva_reembolso_info")
                                dato.innerText = creacionUTC + " (UTC)"
                                bloqueReembolso.appendChild(dato)

                                dato = document.createElement("div")
                                dato.classList.add("detallesReserva_reembolso_info")
                                dato.innerText = creacionESP + " (Hora de Madrid)"
                                bloqueReembolso.appendChild(dato)


                                dato = document.createElement("div")
                                dato.classList.add("detallesReserva_reembolso_info")
                                dato.innerText = creacionNIC + " (Hora de Managua)"
                                bloqueReembolso.appendChild(dato)
                                contenedorReembolso.appendChild(bloqueReembolso)

                                bloqueReembolso = document.createElement("div")
                                bloqueReembolso.classList.add("detallesReserva_reemboldo_bloqueDetallesReembolso")

                                info = document.createElement("div")
                                info.classList.add("detallesReserva_reembolso_info")
                                info.classList.add("negrita")
                                info.innerText = `Ultima actualizacion del reembolso`
                                bloqueReembolso.appendChild(info)

                                dato = document.createElement("div")
                                dato.classList.add("detallesReserva_reembolso_info")
                                dato.innerText = actualizacionUTC + " (UTC)"
                                bloqueReembolso.appendChild(dato)

                                dato = document.createElement("div")
                                dato.classList.add("detallesReserva_reembolso_info")
                                dato.innerText = actualizacionESP + " (Hora de Madrid)"
                                bloqueReembolso.appendChild(dato)

                                dato = document.createElement("div")
                                dato.classList.add("detallesReserva_reembolso_info")
                                dato.innerText = actualizacionNIC + " (Hora de Managua)"
                                bloqueReembolso.appendChild(dato)
                                contenedorReembolso.appendChild(bloqueReembolso)

                                contenedorReembolsos.appendChild(contenedorReembolso)

                            }



                        }



                    },
                    realizarReembolso111_borrable: async (metadatos) => {

                        const pagoUID = metadatos.pagoUID
                        const instanciaUID = metadatos.instanciaUID
                        const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago


                        const mostrarContenedorPorTipo = (tipoReembolso) => {

                            const selectorTipoContenedores = [...document.querySelectorAll("[componenteUID=reembolsoUI] [contenedorTipoReembolso]")]
                            selectorTipoContenedores.map((contenedor) => {
                                contenedor.style.display = "none"
                            })
                            document.querySelector(`[componenteUID=reembolsoUI] [contenedorTipoReembolso="${tipoReembolso}"]`).removeAttribute("style")
                        }
                        const reseteaBotonesTipoReembolso = () => {
                            const selectorBotonesTipoReembolso = [...document.querySelectorAll("[componenteUID=reembolsoUI] [botonTipoReembolso]")]
                            selectorBotonesTipoReembolso.map((botonTipoReembolso) => {
                                botonTipoReembolso.removeAttribute("style")
                                botonTipoReembolso.removeAttribute("tipoReembolsoSeleccionado")
                            })
                        }
                        const maximoReembolsable = () => {
                            const totalPagado = document.querySelector("[componenteUID=reembolsoUI] [totalPagado]").getAttribute("totalPagado")
                            const totalReembolsado = document.querySelector("[componenteUID=reembolsoUI] [totalReembolsado]").getAttribute("totalReembolsado")
                            const totalReembolsable = totalPagado - totalReembolsado
                            const totalReembolsableRedondeado = parseFloat(totalReembolsable.toFixed(2));
                            return totalReembolsableRedondeado;
                        }
                        const reglaDeTresPorcentaje = (porcentaje) => {
                            const calculo = (Number(porcentaje) / 100) * Number(maximoReembolsable());
                            const resultado = parseFloat(calculo.toFixed(2));
                            return resultado
                        };

                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const contenedorEmitirReembolso = document.createElement("div")
                        contenedorEmitirReembolso.classList.add("detallesReserva_rembolso_contenedorEmitirReembolso")

                        const titulo = document.createElement("p")
                        titulo.classList.add("detallesReservaTituloCancelarReserva")
                        titulo.innerText = "Realizar un reembolso"
                        contenedorEmitirReembolso.appendChild(titulo)

                        const bloqueReembolso = document.createElement("div")
                        bloqueReembolso.classList.add("detallesReserva_reemboldo_bloqueEmitirReembolso")

                        let bloqueInterno = document.createElement("div")
                        bloqueInterno.classList.add("detallesReserva_reembolso_bloqueInterno_campoConfiramcion")

                        const info = document.createElement("div")
                        info.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                        info.innerText = `Puede hacer un reembolso parcial o total. Puede hacer más de un reembolso si lo desea. La suma total de los reembolsos no puede superar el total del pago. Elige como determinar el monto del reembolso, si por una cantidad determinada o por un porcentaje `
                        bloqueInterno.appendChild(info)
                        bloqueReembolso.appendChild(bloqueInterno)


                        const infoTotalReembolsable = document.createElement("div")
                        infoTotalReembolsable.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                        infoTotalReembolsable.classList.add("negrita")
                        infoTotalReembolsable.innerText = `Total reembolsable ${maximoReembolsable()}`
                        bloqueInterno.appendChild(infoTotalReembolsable)
                        bloqueReembolso.appendChild(bloqueInterno)

                        const contenedorTipoReembolsos = document.createElement("div")
                        contenedorTipoReembolsos.classList.add("detallesReserva_reembolso_emitirReembolso_contenedorTipoReembolsos")

                        const reembolsoPorCantidad = document.createElement("div")
                        reembolsoPorCantidad.classList.add("detallesReserva_reembolso_emitirReembolso_botonTipoReembolso")
                        reembolsoPorCantidad.innerText = "Por cantidad"
                        reembolsoPorCantidad.setAttribute("botonTipoReembolso", "porCantidad")
                        reembolsoPorCantidad.setAttribute("tipoReembolso", "porCantidad")
                        reembolsoPorCantidad.addEventListener("click", (e) => {
                            reseteaBotonesTipoReembolso()
                            e.target.setAttribute("tipoReembolsoSeleccionado", "porCantidad")
                            e.target.style.background = "blue"
                            e.target.style.color = "white"
                            const tipoReembolso = e.target.getAttribute("tipoReembolso")
                            mostrarContenedorPorTipo(tipoReembolso)
                        })
                        contenedorTipoReembolsos.appendChild(reembolsoPorCantidad)


                        const reembolsoPorPorcentaje = document.createElement("div")
                        reembolsoPorPorcentaje.classList.add("detallesReserva_reembolso_emitirReembolso_botonTipoReembolso")
                        reembolsoPorPorcentaje.innerText = "Por porcentaje"
                        reembolsoPorPorcentaje.setAttribute("botonTipoReembolso", "porPorcentaje")
                        reembolsoPorPorcentaje.setAttribute("tipoReembolso", "porPorcentaje")
                        reembolsoPorPorcentaje.addEventListener("click", (e) => {
                            reseteaBotonesTipoReembolso()
                            e.target.setAttribute("tipoReembolsoSeleccionado", "porPorcentaje")
                            e.target.style.background = "blue"
                            e.target.style.color = "white"
                            const tipoReembolso = e.target.getAttribute("tipoReembolso")
                            mostrarContenedorPorTipo(tipoReembolso)
                        })
                        contenedorTipoReembolsos.appendChild(reembolsoPorPorcentaje)

                        bloqueReembolso.appendChild(contenedorTipoReembolsos)

                        const contenedorDinamicoTipo = document.createElement("div")
                        contenedorDinamicoTipo.classList.add("detallesReserva_rembolso_contenedorDiamicoTipo")


                        const contenedorPorCantidad = document.createElement("div")
                        contenedorPorCantidad.classList.add("detallesReserva_rembolso_contenedorPorCantidad")
                        contenedorPorCantidad.style.display = "none"
                        contenedorPorCantidad.setAttribute("contenedorTipoReembolso", "porCantidad")

                        const infoPorCantidad = document.createElement("div")
                        infoPorCantidad.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                        infoPorCantidad.innerText = `Determina la cantidad total del reembolso.Si quieres emitir por ejemplo un reembolso de 100, entonces debes de escribir tambine los dos decimales separados por punto, por ejemplo 100.00. Luego establece la moneda.`
                        contenedorPorCantidad.appendChild(infoPorCantidad)

                        const campoCantidadReembolso = document.createElement("input")
                        campoCantidadReembolso.classList.add("detallesReserva_reembolso_campo")
                        campoCantidadReembolso.setAttribute("campo", "porCantidad")
                        campoCantidadReembolso.placeholder = "0.00"
                        contenedorPorCantidad.appendChild(campoCantidadReembolso)

                        const campoMonedaReembolso = document.createElement("input")
                        campoMonedaReembolso.classList.add("detallesReserva_reembolso_campo")
                        campoMonedaReembolso.setAttribute("campo", "moneda")
                        campoMonedaReembolso.placeholder = "EUR"
                        contenedorPorCantidad.appendChild(campoMonedaReembolso)
                        contenedorDinamicoTipo.appendChild(contenedorPorCantidad)

                        const contenedorPorPorcentaje = document.createElement("div")
                        contenedorPorPorcentaje.classList.add("detallesReserva_rembolso_contenedorPorPorcentaje")
                        contenedorPorPorcentaje.style.display = "none"
                        contenedorPorPorcentaje.setAttribute("contenedorTipoReembolso", "porPorcentaje")

                        const infoPorPorcentaje = document.createElement("div")
                        infoPorPorcentaje.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                        infoPorPorcentaje.innerText = `Determina el porcentaje del reembolso.`
                        contenedorPorPorcentaje.appendChild(infoPorPorcentaje)


                        const resultadoPorcentaje = document.createElement("div")
                        resultadoPorcentaje.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                        resultadoPorcentaje.classList.add("negrita")
                        resultadoPorcentaje.setAttribute("informacionPorcentaje", "informacionPorcentaje")
                        resultadoPorcentaje.innerText = `Escribe un porcentaje para ver su calculo`
                        contenedorPorPorcentaje.appendChild(resultadoPorcentaje)


                        const campoPorcentajeReembolso = document.createElement("input")
                        campoPorcentajeReembolso.classList.add("detallesReserva_reembolso_campo")
                        campoPorcentajeReembolso.placeholder = "0%"
                        campoPorcentajeReembolso.addEventListener("input", (e) => {
                            const entrada = e.target.value
                            const selectorInformacionResultadoPorcentaje = document.querySelector("[informacionPorcentaje=informacionPorcentaje]")
                            const controlFormato = /^\d+%$/.test(entrada);

                            if (entrada.length === 0) {
                                selectorInformacionResultadoPorcentaje.innerText = "Escribe un porcentaje para ver su calculo"
                                e.target.removeAttribute("totalReembolso")
                            } else {
                                if (!controlFormato) {
                                    selectorInformacionResultadoPorcentaje.innerText = "No te olvides del signo de porcentaje %, solo numeros enteros sin decimales."
                                    e.target.removeAttribute("totalReembolso")
                                } else {
                                    const numeroLimpio = entrada.replace("%", "")
                                    e.target.setAttribute("totalReembolso", reglaDeTresPorcentaje(numeroLimpio))
                                    selectorInformacionResultadoPorcentaje.innerText = `El reembolso seria de ${reglaDeTresPorcentaje(numeroLimpio)} (El ${entrada} de ${maximoReembolsable()} es ${reglaDeTresPorcentaje(numeroLimpio)})`
                                }
                            }
                        })
                        contenedorPorPorcentaje.appendChild(campoPorcentajeReembolso)

                        contenedorDinamicoTipo.appendChild(contenedorPorPorcentaje)

                        const campoMoneda = document.createElement("input")
                        campoMoneda.classList.add("detallesReserva_reembolso_campo")
                        campoMoneda.setAttribute("campo", "moneda")
                        campoMoneda.placeholder = "Moneda, por ejemplo EUR o USD"
                        contenedorPorPorcentaje.appendChild(campoMoneda)
                        contenedorDinamicoTipo.appendChild(contenedorPorPorcentaje)

                        bloqueReembolso.appendChild(contenedorDinamicoTipo)


                        bloqueInterno = document.createElement("div")
                        bloqueInterno.classList.add("detallesReserva_reembolso_bloqueInterno_campoConfiramcion")

                        const infoCampoConfirmacion = document.createElement("div")
                        infoCampoConfirmacion.classList.add("detallesReserva_reembolso_emitirReembolso_texto")
                        infoCampoConfirmacion.innerText = `Para realizar el reembolso por favor escribe reembolso en minúsculas en el campo de texto y pulse realizar reembolso. Se exigue escribir reembolso como medida para evitar un falso click en el boton de confirmacion al querer hacer click en el boton de cerrar opciones de emision de reembolso`
                        bloqueInterno.appendChild(infoCampoConfirmacion)

                        const campoConfirmacion = document.createElement("input")
                        campoConfirmacion.classList.add("detallesReserva_reembolso_campoConfirmacion")
                        campoConfirmacion.setAttribute("campo", "palabra")
                        campoConfirmacion.placeholder = "Escribe la palabra reembolso"
                        bloqueInterno.appendChild(campoConfirmacion)

                        bloqueReembolso.appendChild(bloqueInterno)

                        contenedorEmitirReembolso.appendChild(bloqueReembolso)

                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReserva_reembolso_emitirReembolso_contenedorBotones")

                        const botonConfirmar = document.createElement("div")
                        botonConfirmar.classList.add("detallesReservaCancelarBoton")
                        botonConfirmar.setAttribute("componente", "botonActualizarEnlace")
                        botonConfirmar.innerText = "Realizar reembolso11"
                        botonConfirmar.addEventListener("click", () => {
                            const metadatos = {
                                pagoUID: pagoUID,
                                instanciaUID: instanciaUID,
                                instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                            }
                            casaVitini.administracion.reservas.detallesReserva.reembolso.crearReembolso(metadatos)
                        })
                        bloqueBotones.appendChild(botonConfirmar)

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.innerText = "Cerrar opciones de emitir reembolso"
                        botonCancelar.addEventListener("click", () => {
                            casaVitini.administracion.reservas.detallesReserva.reembolso.UI.reseteaBotones()
                            document.querySelector("[componente=contenedorDinamicoReembolso]").innerHTML = null
                        })
                        bloqueBotones.appendChild(botonCancelar)
                        contenedorEmitirReembolso.appendChild(bloqueBotones)

                        const contenedorDinamicoReembolso = document.querySelector("[componente=contenedorDinamicoReembolso]")
                        contenedorDinamicoReembolso.innerHTML = null
                        contenedorDinamicoReembolso.appendChild(contenedorEmitirReembolso)





                    },
                    reseteaBotones: () => {
                        const selectorBotones = [...document.querySelectorAll("[componenteUID=reembolsoUI] [boton]")]
                        selectorBotones.map((boton) => {
                            boton.removeAttribute("style")
                        })
                    }
                },
                desplegarUI: async () => {

                    const advertenciasInmersivasRenderizadas = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                    advertenciasInmersivasRenderizadas.map((advertencia) =>
                        advertencia.remove()
                    )
                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componenteUID", "reembolsoUI")
                    advertenciaInmersivaIU.setAttribute("instanciaUID", instanciaUID)

                    document.body.style.overflow = 'hidden';


                    const spinnerContainer = document.createElement('div');
                    spinnerContainer.setAttribute("componente", "iconoCargaEnlace");

                    spinnerContainer.classList.add("lds-spinner");

                    for (let i = 0; i < 12; i++) {
                        const div = document.createElement('div');
                        spinnerContainer.appendChild(div);
                    }

                    advertenciaInmersivaIU.appendChild(spinnerContainer)

                    const info = document.createElement("div")
                    info.setAttribute("class", "advertenciaInfoFlujoPago")
                    info.setAttribute("componente", "mensajeFlujoPasarela")
                    info.innerText = "Esperando a la pasarela..."
                    advertenciaInmersivaIU.appendChild(info)


                    const botoCancelar = document.createElement("div")
                    botoCancelar.setAttribute("class", "botonV1AdvertenciaInmersiva")
                    botoCancelar.innerText = "Cancelar"
                    botoCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                    advertenciaInmersivaIU.appendChild(botoCancelar)

                    document.body.appendChild(advertenciaInmersivaIU)


                    const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                    const transaccion = {
                        zona: "administracion/reservas/reembolso/obtenerEstado",
                        reservaUID: Number(reservaUID)
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        casaVitini.componentes.limpiarAdvertenciasInmersivas()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const seleccionarInstancia = document.querySelector(`[componenteUID=reembolsoUI][instanciaUID="${instanciaUID}"]`)
                        seleccionarInstancia.style.justifyContent = "flex-start";
                        if (seleccionarInstancia) {
                            const respuestaIDV = respuestaServidor?.ok.respuestaIDV
                            return casaVitini.administracion.reservas.detallesReserva.reembolso.UI.panelReembolso(respuestaServidor?.ok)

                        }


                    }


                },
                eliminarEnlace: {
                    UI: async () => {

                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = "Eliminar enlae de pago"
                        contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                        const bloqueBloqueoApartamentos = document.createElement("div")
                        bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                        const tituloBloquoApartamentos = document.createElement("div")
                        tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        tituloBloquoApartamentos.innerText = "¿Quieres confirmar las eliminacíon de este enlace de pago? Sus implicaciones seran inmediatas y el enlace de acceso temporal pasara a ser obsoleto"

                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                        contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.innerText = "Confirmar y eliminar enlace"
                        botonCancelar.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.eliminarEnlace.confirmar)
                        bloqueBotones.appendChild(botonCancelar)


                        const botonVolverAlEnlace = document.createElement("div")
                        botonVolverAlEnlace.classList.add("detallesReservaCancelarBoton")
                        botonVolverAlEnlace.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonVolverAlEnlace.innerText = "Volver a los detalles del enlace"
                        botonVolverAlEnlace.addEventListener("click", casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.desplegarUI)
                        bloqueBotones.appendChild(botonVolverAlEnlace)

                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                        botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion del enlace"
                        botonCancelarProcesoCancelacion.addEventListener("click", () => {
                            let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        })
                        bloqueBotones.appendChild(botonCancelarProcesoCancelacion)

                        contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                        const enlacePagoUIRenderizada = document.querySelector("[componenteUID=enlaceDePagoUI]")
                        enlacePagoUIRenderizada.innerHTML = null
                        enlacePagoUIRenderizada.appendChild(contenedorAdvertenciaInmersiva)
                    },
                    confirmar: async () => {
                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const transaccion = {
                            zona: "administracion/enlacesDePago/eliminarEnlace",
                            enlaceUID: Number(reservaUID)
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.ok) {
                            casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.arranque()
                            casaVitini.componentes.limpiarAdvertenciasInmersivas()
                            casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor.ok)


                        }


                    }
                },
                crearReembolso: async (metadatos) => {


                    const pagoUID = String(metadatos.pagoUID)
                    const instanciaUID = metadatos.instanciaUID
                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago

                    const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                    const tipoReembolso = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [tipoReembolsoSeleccionado]`)?.getAttribute("tipoReembolsoSeleccionado")

                    if (!tipoReembolso) {
                        const error = "Selecciona un tipo de reembolso, ya sea por cantidad o por porcentaje"
                        return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(error)
                    }
                    const metadatosPantallaCarga = {
                        mensaje: "Esperando al servidor...",
                        instanciaUID: instanciaUID,
                    }
                    casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                    const transaccion = {
                        zona: "administracion/reservas/transacciones/realizarReembolso",
                        reservaUID: reservaUID,
                        pagoUID: pagoUID
                    }
                    if (tipoReembolso === "porPorcentaje") {
                        const cantidad = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedortiporeembolso=porPorcentaje] [totalReembolso]`)?.getAttribute("totalReembolso")
                        //const moneda = document.querySelector(`[instanciaUID="${instanciaUID}"] [contenedortiporeembolso=porPorcentaje] [campo=moneda]`)?.value
                        transaccion.cantidad = cantidad
                        //transaccion.moneda = moneda
                    }
                    if (tipoReembolso === "porCantidad") {
                        const cantidad = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedortiporeembolso=porCantidad] [campo=porCantidad]`)?.value
                        //const moneda = document.querySelector(`[instanciaUID="${instanciaUID}"] [contenedortiporeembolso=porCantidad] [campo=moneda]`)?.value
                        transaccion.cantidad = cantidad
                        //transaccion.moneda = moneda
                    }
                    transaccion.tipoReembolso = tipoReembolso
                    const plataformaDePagoEntrada = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedor=nuevoReembolso] [campo=plataformaDePagoEntrada]`).value
                    transaccion.plataformaDePagoEntrada = plataformaDePagoEntrada

                    const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [campo=palabra]`)?.value
                    transaccion.palabra = palabra


                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                    const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)]
                    selectorPantallaDeCarga.map((pantalla) => {
                        pantalla.remove()
                    })



                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.arranque()
                        const mensaje = respuestaServidor?.ok
                        casaVitini.componentes.limpiarAdvertenciasInmersivas()
                        const metadatos = {
                            pagoUID: pagoUID,
                            instanciaUID: instanciaUID
                        }

                        casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.transacciones.detallesDelPago.UI(metadatos)
                        casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(mensaje)
                    }

                }
            },

            crearEnlace_obsoleto: {
                UI: async (instanciaUID) => {
                    const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                    contenidoAdvertenciaInmersiva.setAttribute("espacio", "formularioCrearEnlaceDePago")

                    const titulo = document.createElement("p")
                    titulo.classList.add("detallesReservaTituloCancelarReserva")
                    titulo.innerText = "Generar enlace de pago"
                    contenidoAdvertenciaInmersiva.appendChild(titulo)

                    const bloque = document.createElement("div")
                    bloque.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                    let info = document.createElement("div")
                    info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    info.innerText = `Genera un enlace de pago para poder enviarlo a un cliente y que realice el pago de la reserva. No es obligatorio escribir un nombre, pero si recomendable por si necesita acordarse de por qué genero este enlace. Si no define ningún nombre, este se llamará "Enlace de pago de la reserva ${reservaUID}". Este es el nombre automático que tendrá este enlace si no define un nombre en específico. Recuerde que todos los enlaces generados y su gestión centralizada la puede encontrar en el panel de administración en el botón de Enlaces de pago desde el menú administración o en su reserva correspondiente dentro del apartado enlaces de pago 
                    `
                    bloque.appendChild(info)


                    let campo = document.createElement("input")
                    campo.classList.add("detallesReserva_campoNombreEnlace")
                    campo.setAttribute("campo", "nombreEnlace")
                    campo.placeholder = "Escribe un nombre para el nuevo enlace si quiere"
                    bloque.appendChild(campo)

                    info = document.createElement("div")
                    info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    info.innerText = `Determina la cantidad de pago del enlace, recuerda que los precios de cobro deben de escribirse con dos decimales separados por punto. Por ejemplo para crear un enlace de pago de 35 dolares escribe 35.00`
                    bloque.appendChild(info)

                    campo = document.createElement("input")
                    campo.classList.add("detallesReserva_campoNombreEnlace")
                    campo.classList.add("negrita")
                    campo.setAttribute("campo", "cantidad")
                    campo.placeholder = "Cantidad (Obligatorio)"
                    bloque.appendChild(campo)


                    info = document.createElement("div")
                    info.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    info.innerText = `Determina el tiempo de vigencia del enlace. Por defecto el sistema aplica 72h si no especificas una vigencia concreta. Pasada la vigencia el enlace ya no puede realizar el cobro y desaparece `
                    bloque.appendChild(info)

                    campo = document.createElement("input")
                    campo.classList.add("detallesReserva_campoNombreEnlace")
                    campo.setAttribute("campo", "horasCaducidad")
                    campo.placeholder = "Caducida en horas, por defecto 72h"
                    bloque.appendChild(campo)

                    const campoDescripcion = document.createElement("textarea")
                    campoDescripcion.classList.add("detallesReserva_campoDescripcion")
                    campoDescripcion.setAttribute("campo", "descripcion")
                    campoDescripcion.placeholder = "No es obligatorio pero escriba un descripcion si quieres para definir aun mas a este enlace si lo necesitas"
                    // bloque.appendChild(campoDescripcion)

                    contenidoAdvertenciaInmersiva.appendChild(bloque)

                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                    const botonConfirmar = document.createElement("div")
                    botonConfirmar.classList.add("detallesReservaCancelarBoton")
                    botonConfirmar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonConfirmar.innerText = "Confirmar y crear enlace"
                    botonConfirmar.addEventListener("click", () => {
                        casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.crearEnlace.confirmar(instanciaUID)
                    })
                    bloqueBotones.appendChild(botonConfirmar)

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.innerText = "Cancelar la creacíon del enlace"
                    botonCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                    bloqueBotones.appendChild(botonCancelar)
                    contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)

                    const contenedorGlobal = document.createElement("div")
                    contenedorGlobal.classList.add("detallesReserva_enlaceDePago_contenedorGlobal")



                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)

                    document.body.appendChild(advertenciaInmersivaIU)



                },
                confirmar: async (instanciaUID) => {
                    const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                    const nombreEnlace = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=nombreEnlace]")
                    const cantidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=cantidad]")
                    const horasCaducidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=horasCaducidad]")

                    const transaccion = {
                        zona: "administracion/enlacesDePago/crearNuevoEnlace",
                        reservaUID: reservaUID,
                        nombreEnlace: nombreEnlace.value,
                        cantidad: cantidad.value,
                        horasCaducidad: horasCaducidad.value,
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        casaVitini.componentes.limpiarAdvertenciasInmersivas()
                        const seleccionarInstancia = document.querySelector(`[componente=categoriaEnlacesDePago][instanciaUID="${instanciaUID}"] [componente=contenedorListaEnlacesDePago]`)
                        if (seleccionarInstancia) {

                            const metadatos = {
                                enlaceUID: respuestaServidor.enlaceUID,
                                nombreEnlace: respuestaServidor.nombreEnlace,
                                enlace: respuestaServidor.enlace,
                                cantidad: respuestaServidor.cantidad,
                                estadoPago: "noPagado"
                            }
                            const enlaceUI = casaVitini.administracion.reservas.detallesReserva.categoriasGlobales.enlacesDePago.enlaceUI(metadatos)


                            const primerElemento = seleccionarInstancia.firstChild;
                            seleccionarInstancia.insertBefore(enlaceUI, primerElemento);


                        }
                    }
                }
            },
            gestionTitular: {
                desplegarUI: async () => {
                    document.body.style.overflow = 'hidden';
                    const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("instanciaUID", instanciaUID)


                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                    contenidoAdvertenciaInmersiva.setAttribute("espacio", "gestionTitular")

                    const mensajeSpinner = "Esperando al servidor...."
                    const spinner = casaVitini.componentes.spinner(mensajeSpinner)
                    contenidoAdvertenciaInmersiva.appendChild(spinner)

                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)


                    const transaccion = {
                        zona: "administracion/reservas/detallesReserva",
                        reserva: Number(reservaUID),
                        solo: "informacionGlobal"
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


                    if (respuestaServidor?.error) {
                        casaVitini.componentes.limpiarAdvertenciasInmersivas()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.reserva) {
                        const detallesTitular = respuestaServidor.reserva.titular
                        const tipoTitular = detallesTitular?.tipoTitular

                        const seleccionarInstanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (seleccionarInstanciaRenderizada) {

                            seleccionarInstanciaRenderizada.querySelector("[contenedor=spinner]")?.remove()
                            seleccionarInstanciaRenderizada.style.justifyContent = "flex-start";
                            const destinoRenderizado = seleccionarInstanciaRenderizada.querySelector("[espacio=gestionTitular]")

                            if (!detallesTitular) {
                                const titulo = "Añadir titular a la reserva"
                                const tituloUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.titulo(titulo)
                                destinoRenderizado.appendChild(tituloUI)

                                const info = "Esta reserva ahora mismo no tiene níngun titular asignado. Para añadir un titular a la reserva puedes buscar con el campo de busqueda inferior un cliente existente para asociarlo como titular. Tambien puedes crear un cliente nuevo rellenando el formulario para crear un cliente y añadirlo como titular a esta reserva"
                                const infoUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.infoUI(info)
                                destinoRenderizado.appendChild(infoUI)

                                const nuevoClienteUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.nuevoCliente.UI(instanciaUID)
                                destinoRenderizado.appendChild(nuevoClienteUI)

                                const botonCerrar = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.botonCerrar()
                                destinoRenderizado.appendChild(botonCerrar)
                            }

                            if (tipoTitular === "titularCliente") {

                                const metadatosRespuestaUnificada = {
                                    clienteUID: detallesTitular.clienteUID,
                                    nombreCompleto: detallesTitular.nombreTitular,
                                    pasaporte: detallesTitular.pasaporteTitular,
                                    email: detallesTitular.emailTitular,
                                    telefono: detallesTitular.telefonoTitular,
                                    instanciaUID: instanciaUID,
                                    reservaUID: reservaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.respuestaUnificadaUI(metadatosRespuestaUnificada)


                            }
                            if (tipoTitular === "titularPool") {
                                const metadatosTitualPool = {
                                    nombreTitular: detallesTitular.nombreTitular,
                                    pasaporteTitular: detallesTitular.pasaporteTitular,
                                    emailTitular: detallesTitular.emailTitular,
                                    telefonoTitular: detallesTitular.telefonoTitular,
                                    instanciaUID: instanciaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.titularPool.UI(metadatosTitualPool)
                            }

                        }

                    }



                },
                componentes: {
                    buscadorRapido: {
                        UI: (instanciaUID) => {
                            if (!instanciaUID) {
                                casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                const error = "El componente buscador en casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.buscadorRapido.UI necesita la instancia que la invoca"
                                return casaVitini.ui.vistas.advertenciaInmersiva(error)
                            }

                            const contenedor = document.createElement("div")
                            contenedor.classList.add("administracion_reservas_detallesReservas_gestionTitular_contenedorBuscador")
                            contenedor.setAttribute("contenedor", "buscador")

                            const info = document.createElement("div")
                            info.classList.add("adminsitracion_reservas_detallesReservas_gestionTitular_infoBuscador")
                            contenedor.appendChild(info)

                            const campoBuscador = document.createElement("input")
                            campoBuscador.classList.add("administracion_reservas_detallesReserva_gestionTitular_campoBuscador")
                            campoBuscador.placeholder = "Buscar un cliente existente"
                            campoBuscador.setAttribute("instanciaUID", instanciaUID)
                            campoBuscador.setAttribute("campo", "buscador")
                            campoBuscador.addEventListener("input", casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.buscadorRapido.listaResultadosUI)
                            contenedor.appendChild(campoBuscador)

                            return contenedor
                        },
                        listaResultadosUI: async (entrada) => {
                            const terminoBusqueda = entrada.target.value
                            const instanciaUIDContenedor = entrada.target.getAttribute("instanciaUID")
                            const instanciaUIDBuscador = casaVitini.componentes.codigoFechaInstancia()

                            if (!instanciaUIDContenedor) {
                                casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                const error = "El componente buscador en casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.buscadorRapido.motor necesita la instancia que la invoca"
                                return casaVitini.ui.vista.advertenciaInmersiva(error)
                            }

                            const alturaDinamica = window.scrollY + entrada.target.getBoundingClientRect().bottom;
                            const horizontalDinamico = entrada.target.offsetLeft;
                            const anchoDinamico = entrada.target.getBoundingClientRect().width;

                            const selectorListaResultadosBuscadorRapidoRenderiaza = [...document.querySelectorAll("[componente=buscadorRapidoCliente]")]
                            selectorListaResultadosBuscadorRapidoRenderiaza.map((listaRenderizada) => {
                                listaRenderizada.remove()
                            })
                            const campoVacio = entrada.target.value.length
                            if (campoVacio === 0) {
                                clearTimeout(casaVitini.componentes.temporizador);
                                return;
                            }

                            const listaResultados = document.createElement("div")
                            listaResultados.setAttribute("componente", "buscadorRapidoCliente")
                            listaResultados.setAttribute("instanciaUIDBuscador", instanciaUIDBuscador)
                            listaResultados.classList.add("administracion_reservas_detallesReservas_gestionTitular_listaBuscador")
                            listaResultados.style.top = (alturaDinamica + 4) + "px"
                            // listaResultados.style.marginLeft = (horizontalDinamico + 4) + "px"
                            listaResultados.style.marginLeft = "0px"

                            listaResultados.style.width = anchoDinamico + "px"
                            listaResultados.innerText = null
                            listaResultados.innerText = "Buscando..."
                            document.addEventListener("mousedown", (e) => {
                                if (e.target.getAttribute("componente") === "elementoResultadosBuscadorRapido") {
                                    e.preventDefault()
                                }
                            })
                            const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUIDContenedor}"] [contenedor=buscador]`)
                            instanciaUIDRenderizada.appendChild(listaResultados)

                            clearTimeout(casaVitini.componentes.temporizador);
                            casaVitini.componentes.temporizador = setTimeout(() => {
                                const metadatos = {
                                    terminoBusqueda: terminoBusqueda,
                                    instanciaUIDBuscador: instanciaUIDBuscador,
                                    instanciaUIDContenedor: instanciaUIDContenedor
                                }
                                casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.buscadorRapido.transactor(metadatos)
                            }, 1500);
                        },
                        transactor: async (metadatos) => {

                            const instanciaUIDBuscador = metadatos.instanciaUIDBuscador
                            const terminoBusqueda = metadatos.terminoBusqueda
                            const instanciaUIDContenedor = metadatos.instanciaUIDContenedor

                            const transaccion = {
                                zona: "administracion/clientes/buscar",
                                tipoBusqueda: "rapido",
                                buscar: terminoBusqueda
                            }
                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                            if (respuestaServidor?.error) {
                                return
                            }

                            const listaBuscadorRenderizada = document.querySelector(`[instanciaUIDBuscador="${instanciaUIDBuscador}"]`)
                            if (!listaBuscadorRenderizada) {
                                return
                            }
                            listaBuscadorRenderizada.innerHTML = null

                            const resultadosClientes = respuestaServidor?.clientes
                            resultadosClientes.map((clienteEncontrado) => {
                                const cliente = clienteEncontrado.uid
                                const nombre = clienteEncontrado.nombre
                                const primerApellido = clienteEncontrado.primerApellido
                                const segundoApellido = clienteEncontrado.segundoApellido
                                const pasaporte = clienteEncontrado.pasaporte

                                const bloqueCliente = document.createElement("div")
                                bloqueCliente.classList.add("administracionReservaDetallesBuscadorRapidoBloqueCliente")
                                bloqueCliente.setAttribute("clienteUID", cliente)
                                bloqueCliente.setAttribute("nombreUI", nombre)
                                bloqueCliente.setAttribute("primerApellidoUI", primerApellido)
                                bloqueCliente.setAttribute("segundoApellidoUI", segundoApellido)
                                bloqueCliente.setAttribute("pasaporte", pasaporte)
                                bloqueCliente.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                bloqueCliente.addEventListener("click", () => {

                                    const metadatos = {
                                        clienteUID: cliente,
                                        instanciaUIDContenedor: instanciaUIDContenedor
                                    }
                                    casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.buscadorRapido.asociarCliente(metadatos)
                                })


                                const filaNombre = document.createElement("p")
                                filaNombre.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaNombre")
                                filaNombre.innerText = `${nombre} ${primerApellido} ${segundoApellido}`
                                filaNombre.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                bloqueCliente.appendChild(filaNombre)

                                const filaPasaporte = document.createElement("p")
                                filaPasaporte.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaPasaporte")
                                filaPasaporte.innerText = pasaporte
                                filaPasaporte.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                bloqueCliente.appendChild(filaPasaporte)

                                listaBuscadorRenderizada.appendChild(bloqueCliente)
                            })
                        },
                        asociarCliente: async (metadatos) => {
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                            const clienteUID = metadatos.clienteUID
                            const instanciaUIDContenedor = metadatos.instanciaUIDContenedor
                            const instanciaUIDPantallaDeCarga = casaVitini.componentes.codigoFechaInstancia()
                            const opcionesPantallaDeCarga = {
                                instanciaUID: instanciaUIDPantallaDeCarga,
                                mensaje: "Asociando cliente a la titularidad de esta reserva"
                            }
                            casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                            const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                            const transaccion = {
                                zona: "administracion/reservas/gestionTitular/asociarTitular",
                                clienteUID: Number(clienteUID),
                                reservaUID: Number(reservaUID)
                            }


                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


                            if (respuestaServidor?.error) {
                                pantallaDeCargaRenderizada?.remove()
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                //casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                pantallaDeCargaRenderizada?.remove()
                                const nuevoClienteUID = respuestaServidor.clienteUID
                                const nombreCompleto = respuestaServidor.nombreCompleto
                                const nombre = respuestaServidor.nombre
                                const primerApellido = respuestaServidor.primerApellido
                                const segundoApellido = respuestaServidor.segundoApellido
                                const clienteUID = respuestaServidor.clienteUID
                                const email = respuestaServidor.email
                                const pasaporte = respuestaServidor.pasaporte
                                const telefono = respuestaServidor.telefono

                                const selectorNombreTitularRenderizado = document.querySelector(`[reserva="${reservaUID}"]`)
                                const selectorNombreTitular = document.querySelector(`[dataReserva=nombreTitular]`)
                                if (selectorNombreTitularRenderizado && selectorNombreTitular) {
                                    selectorNombreTitular.innerText = nombreCompleto

                                    const selectorBloqueTitular = document.querySelector(`[contenedor=titularUID]`)
                                    selectorBloqueTitular.setAttribute("tipoTitular", "titularCliente")
                                    selectorBloqueTitular.setAttribute("titularUID", nuevoClienteUID)

                                }

                                const metadatosRespuestaUnificada = {
                                    clienteUID: clienteUID,
                                    nombreCompleto: nombreCompleto,
                                    pasaporte: pasaporte,
                                    email: email,
                                    telefono: telefono,
                                    instanciaUID: instanciaUIDContenedor,
                                    reservaUID: reservaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.respuestaUnificadaUI(metadatosRespuestaUnificada)
                            }
                        }


                    },
                    nuevoCliente: {
                        UI: (instanciaUID) => {
                            const nuevoClienteUI = document.createElement("div")
                            nuevoClienteUI.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI")
                            nuevoClienteUI.setAttribute("formulario", "nuevoCliente")

                            const buscadorUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.buscadorRapido.UI(instanciaUID)
                            nuevoClienteUI.appendChild(buscadorUI)



                            const info = document.createElement("p")
                            info.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_info")
                            info.classList.add("negrita")
                            info.innerText = "Crear nuevo cliente para añadirlo como titular"
                            nuevoClienteUI.appendChild(info)


                            const campoNombre = document.createElement("input")
                            campoNombre.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            campoNombre.setAttribute("campo", "nombre")
                            campoNombre.setAttribute("formulario", "AnadirPernoctante")
                            campoNombre.placeholder = "Nombre (obligatiorio)"
                            nuevoClienteUI.appendChild(campoNombre)

                            const primerApellido = document.createElement("input")
                            primerApellido.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            primerApellido.setAttribute("campo", "primerApellido")
                            primerApellido.setAttribute("formulario", "AnadirPernoctante")
                            primerApellido.placeholder = "Primer apellido"
                            nuevoClienteUI.appendChild(primerApellido)

                            const segundoApellido = document.createElement("input")
                            segundoApellido.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            segundoApellido.setAttribute("campo", "segundoApellido")
                            segundoApellido.setAttribute("formulario", "AnadirPernoctante")
                            segundoApellido.placeholder = "Segundo apellido"
                            nuevoClienteUI.appendChild(segundoApellido)

                            const pasaporte = document.createElement("input")
                            pasaporte.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            pasaporte.setAttribute("campo", "pasaporte")
                            pasaporte.setAttribute("formulario", "AnadirPernoctante")
                            pasaporte.placeholder = "Pasaporte (obligatorio)"
                            nuevoClienteUI.appendChild(pasaporte)

                            const telefono = document.createElement("input")
                            telefono.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            telefono.setAttribute("campo", "telefono")
                            telefono.setAttribute("formulario", "AnadirPernoctante")
                            telefono.placeholder = "Telefono"
                            nuevoClienteUI.appendChild(telefono)

                            const correoElecotronico = document.createElement("input")
                            correoElecotronico.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            correoElecotronico.setAttribute("campo", "correoElectronico")
                            correoElecotronico.setAttribute("formulario", "AnadirPernoctante")
                            correoElecotronico.placeholder = "Correo electronico"
                            nuevoClienteUI.appendChild(correoElecotronico)

                            const botonGuardarNuevoCliente = document.createElement("div")
                            botonGuardarNuevoCliente.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_botonV1")
                            botonGuardarNuevoCliente.innerText = "Crear nuevo cliente y anadirlo a esta reserva como titular"
                            botonGuardarNuevoCliente.addEventListener("click", () => {
                                casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.nuevoCliente.transactor(instanciaUID)
                            })
                            nuevoClienteUI.appendChild(botonGuardarNuevoCliente)
                            return nuevoClienteUI

                        },
                        transactor: async (instanciaUID) => {

                            const instanciaUIDPantallaDeCarga = casaVitini.componentes.codigoFechaInstancia()

                            const opcionesPantallaDeCarga = {
                                instanciaUID: instanciaUIDPantallaDeCarga,
                                mensaje: "Asociando cliente a la titularidad de esta reserva"
                            }
                            casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                            const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)

                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                            const campos = [...document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`).querySelectorAll("[campo]")]


                            const metadatos = {
                                zona: "administracion/reservas/gestionTitular/crearTitular",
                                reservaUID: Number(reservaUID)
                            }
                            campos.map((campo) => {
                                const nombreCampo = campo.getAttribute("campo")
                                const valorCampo = campo.value
                                metadatos[nombreCampo] = valorCampo
                            })


                            const respuestaServidor = await casaVitini.componentes.servidor(metadatos)


                            if (respuestaServidor?.error) {
                                pantallaDeCargaRenderizada?.remove()
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                //casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                pantallaDeCargaRenderizada?.remove()
                                const nuevoClienteUID = respuestaServidor.clienteUID
                                const nombreCompleto = respuestaServidor.nombreCompleto
                                const clienteUID = respuestaServidor.clienteUID
                                const email = respuestaServidor.email
                                const telefono = respuestaServidor.telefono
                                const pasaporte = respuestaServidor.pasaporte

                                const selectorNombreTitularRenderizado = document.querySelector(`[reserva="${reservaUID}"]`)
                                const selectorNombreTitular = document.querySelector(`[dataReserva=nombreTitular]`)
                                if (selectorNombreTitularRenderizado && selectorNombreTitular) {
                                    selectorNombreTitular.innerText = nombreCompleto

                                    const selectorBloqueTitular = document.querySelector(`[contenedor=titularUID]`)
                                    selectorBloqueTitular.setAttribute("tipoTitular", "titularCliente")
                                    selectorBloqueTitular.setAttribute("titularUID", nuevoClienteUID)


                                }

                                const metadatosRespuestaUnificada = {
                                    clienteUID: clienteUID,
                                    nombreCompleto: nombreCompleto,
                                    pasaporte: pasaporte,
                                    email: email,
                                    telefono: telefono,
                                    instanciaUID: instanciaUID,
                                    reservaUID: reservaUID
                                }

                                casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.respuestaUnificadaUI(metadatosRespuestaUnificada)

                            }





                        }

                    },
                    desasociarClienteComoTitular: async (metadatos) => {


                        const instanciaUID = metadatos.instanciaUID
                        const reservaUID = metadatos.reservaUID

                        const instanciaUIDPantallaDeCarga = casaVitini.componentes.codigoFechaInstancia()
                        const opcionesPantallaDeCarga = {
                            instanciaUID: instanciaUIDPantallaDeCarga,
                            mensaje: "Desasociando cliente como titular de la reserva"
                        }
                        casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                        const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                        const metadatosPantallaDeCarga = {
                            zona: "administracion/reservas/gestionTitular/desasociarClienteComoTitular",
                            reservaUID: Number(reservaUID)
                        }

                        const respuestaServidor = await casaVitini.componentes.servidor(metadatosPantallaDeCarga)


                        if (respuestaServidor?.error) {
                            pantallaDeCargaRenderizada?.remove()
                            return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            pantallaDeCargaRenderizada?.remove()

                            const selectorNombreTitularRenderizado = document.querySelector(`[reserva="${reservaUID}"]`)
                            const selectorNombreTitular = document.querySelector(`[dataReserva=nombreTitular]`)
                            if (selectorNombreTitularRenderizado && selectorNombreTitular) {
                                selectorNombreTitular.innerText = "(Níngun titular asignado)"
                                const selectorBloqueTitular = document.querySelector(`[contenedor=titularUID]`)
                                selectorBloqueTitular.removeAttribute("tipoTitular")
                                selectorBloqueTitular.removeAttribute("titularUID")
                            }
                            const selectorDestinoRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"] [espacio=gestionTitular]`)
                            if (selectorDestinoRenderizado) {
                                selectorDestinoRenderizado.innerHTML = null

                                const titulo = "Añadir titular a la reserva"
                                const tituloUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.titulo(titulo)
                                selectorDestinoRenderizado.appendChild(tituloUI)

                                const info = "Esta reserva ahora mismo no tiene níngun titular asignado. Para añadir un titular a la reserva puedes buscar con el campo de busqueda inferior un cliente existente para asociarlo como titular. Tambien puedes crear un cliente nuevo rellenando el formulario para crear un cliente y añadirlo como titular a esta reserva"
                                const infoUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.infoUI(info)
                                selectorDestinoRenderizado.appendChild(infoUI)

                                const nuevoClienteUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.nuevoCliente.UI(instanciaUID)
                                selectorDestinoRenderizado.appendChild(nuevoClienteUI)

                                const botonCerrar = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.botonCerrar()
                                selectorDestinoRenderizado.appendChild(botonCerrar)




                            }

                        }



                    },
                    detallesDelTitularUI: (detallesDelTitular) => {

                        const clienteUID = detallesDelTitular.clienteUID
                        const nombreTitular = detallesDelTitular.nombreTitular
                        const pasaporteTitular = detallesDelTitular.pasaporteTitular
                        const tipoTitular = detallesDelTitular.tipoTitular
                        const emailTitular = detallesDelTitular.emailTitular ? detallesDelTitular.emailTitular : "(Sin email)"
                        const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin telefono)"


                        const detallesRapidosDelTitular = document.createElement("div")
                        detallesRapidosDelTitular.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedorGlobal")

                        // Nombre completo titular
                        let contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        let nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Nombre completo del titular"
                        contenedorDato.appendChild(nombreDato)

                        let valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.innerText = nombreTitular
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)

                        // Pasaporte titular
                        contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")

                        nombreDato.innerText = "Pasaporte"
                        contenedorDato.appendChild(nombreDato)

                        valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.innerText = pasaporteTitular
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)

                        // telefono titular
                        contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Telefono"
                        contenedorDato.appendChild(nombreDato)

                        valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.innerText = telefonoTitular
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)

                        // email titular
                        contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "e-Mail"
                        contenedorDato.appendChild(nombreDato)

                        valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.innerText = emailTitular
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)
                        return detallesRapidosDelTitular


                    },
                    detallesDelTitularPoolUI: (detallesDelTitular) => {

                        const nombreTitular = detallesDelTitular.nombreTitular
                        const pasaporteTitular = detallesDelTitular.pasaporteTitular
                        const tipoTitular = "Titular pool"
                        const emailTitular = detallesDelTitular.emailTitular ? detallesDelTitular.emailTitular : "(Sin email)"
                        const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin telefono)"


                        const detallesRapidosDelTitular = document.createElement("div")
                        detallesRapidosDelTitular.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedorGlobal")

                        // Nombre completo titular
                        let contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        let nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Nombre completo del titular"
                        contenedorDato.appendChild(nombreDato)

                        let valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.innerText = nombreTitular
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)

                        // Pasaporte titular
                        contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Pasaporte"
                        contenedorDato.appendChild(nombreDato)

                        valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.innerText = pasaporteTitular
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)

                        // telefono titular
                        contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Telefono"
                        contenedorDato.appendChild(nombreDato)

                        valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.innerText = telefonoTitular
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)

                        // email titular
                        contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "e-Mail"
                        contenedorDato.appendChild(nombreDato)

                        valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.innerText = emailTitular
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)
                        return detallesRapidosDelTitular


                    },
                    botonCerrarFormularioNuevoCliente: () => {
                        const boton = document.createElement("div")
                        boton.classList.add("administracion_reservas_detallesReservas_gestionTitular_botonCerrar")
                        boton.innerHTML = "Cerrar gestion del titular de la reserva"
                        boton.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                        return boton
                    },
                    botonCerrar: () => {
                        const boton = document.createElement("div")
                        boton.classList.add("administracion_reservas_detallesReservas_gestionTitular_botonCerrar")
                        boton.innerHTML = "Cerrar gestion del titular de la reserva"
                        boton.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                        return boton
                    },
                    botonDesasociar: (metadatos) => {
                        const boton = document.createElement("div")
                        boton.classList.add("administracion_reservas_detallesReservas_gestionTitular_botonCerrar")
                        boton.innerHTML = "Desasociar cliente como titular"
                        boton.setAttribute("boton", "desasociarTitular")
                        boton.addEventListener("click", () => {
                            casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.desasociarClienteComoTitular(metadatos)
                        })
                        return boton
                    },
                    botonCambiarTitular: (instanciaUID) => {
                        const boton = document.createElement("div")
                        boton.classList.add("administracion_reservas_detallesReservas_gestionTitular_botonCerrar")
                        boton.innerHTML = "Cambiar titular"
                        boton.setAttribute("boton", "cambiarTitular")
                        boton.addEventListener("click", () => {
                            casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.cambiarTitular(instanciaUID)
                        })
                        return boton
                    },
                    botonIrALaFichaDelClinete: (clienteUID) => {
                        const boton = document.createElement("a")
                        boton.classList.add("administracion_reservas_detallesReservas_gestionTitular_botonCerrar")
                        boton.innerHTML = "Ir a la ficha del cliente"
                        boton.setAttribute("href", "/administracion/clientes/" + clienteUID)
                        boton.setAttribute("vista", "/administracion/clientes/" + clienteUID)
                        boton.addEventListener("click", casaVitini.componentes.cambiarVista)
                        return boton
                    },
                    titulo: (titulo) => {
                        const tituloUI = document.createElement("p")
                        tituloUI.classList.add("detallesReservaTituloCancelarReserva")
                        tituloUI.innerText = titulo
                        return tituloUI
                    },
                    infoUI: (info) => {
                        const infoUI = document.createElement("p")
                        infoUI.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        infoUI.innerText = info
                        return infoUI
                    },
                    botonCerrarCambiarTitular: (instanciaUID) => {
                        const boton = document.createElement("div")
                        boton.classList.add("administracion_reservas_detallesReservas_gestionTitular_botonCerrar")
                        boton.innerHTML = "Cerrar formulario para cambiar de titular"
                        boton.setAttribute("boton", "cerrarCambiarTitular")
                        boton.addEventListener("click", () => {
                            casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.cancelarCambiarTitular(instanciaUID)
                        })
                        return boton
                    },
                    cambiarTitular: (instanciaUID) => {
                        const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                        const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                        selectorBotonCambiarTitular.style.display = "none"
                        selectorBotonDesasociar.style.display = "none"

                        const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                        selectorNuevoClienteUI.removeAttribute("style")

                        const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                        selectorbotonCerrarCambiarTitular.removeAttribute("style")


                    },
                    respuestaUnificadaUI: (metadatos) => {

                        const clienteUID = metadatos.clienteUID
                        const nombreCompleto = metadatos.nombreCompleto
                        const pasaporte = metadatos.pasaporte
                        const email = metadatos.emailTitular
                        const telefono = metadatos.telefon
                        const instanciaUID = metadatos.instanciaUID
                        const reservaUID = metadatos.reservaUID

                        const selectorDestinoRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"] [espacio=gestionTitular]`)
                        if (selectorDestinoRenderizado) {
                            selectorDestinoRenderizado.innerHTML = null


                            const titulo = "Detalles del titular"
                            const tituloUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.titulo(titulo)
                            selectorDestinoRenderizado.appendChild(tituloUI)


                            const info = "Vista rapída de los detalles del titular de la reserva. Puedes cambiar el titular de la reserva si lo necesitas o desasociar el titular. Tambien puedes cambiar el titular, esto te permite rellenar los datos mientras ves los datos del actual titular por si fuera necesario"
                            const infoUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.infoUI(info)
                            selectorDestinoRenderizado.appendChild(infoUI)

                            const detallesDelTitular = {
                                clienteUID: clienteUID,
                                nombreTitular: nombreCompleto,
                                pasaporteTitular: pasaporte,
                                tipoTitular: "titularCliente",
                                emailTitular: email,
                                telefonoTitular: telefono,
                            }
                            const detallesDelTitularUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.detallesDelTitularUI(detallesDelTitular)
                            selectorDestinoRenderizado.appendChild(detallesDelTitularUI)

                            const botonIrALaFichaDelClinete = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.botonIrALaFichaDelClinete(detallesDelTitular.clienteUID)
                            selectorDestinoRenderizado.appendChild(botonIrALaFichaDelClinete)

                            const botonCambiarTitular = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.botonCambiarTitular(instanciaUID)
                            selectorDestinoRenderizado.appendChild(botonCambiarTitular)


                            const nuevoClienteUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.nuevoCliente.UI(instanciaUID)
                            nuevoClienteUI.style.display = "none"
                            selectorDestinoRenderizado.appendChild(nuevoClienteUI)



                            const metadatosBotonDesasociar = {
                                instanciaUID: instanciaUID,
                                reservaUID: reservaUID
                            }

                            const botonCerrarCambiarTitular = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.botonCerrarCambiarTitular(instanciaUID)
                            botonCerrarCambiarTitular.style.display = "none"
                            selectorDestinoRenderizado.appendChild(botonCerrarCambiarTitular)


                            const botonDesasociar = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.botonDesasociar(metadatosBotonDesasociar)
                            selectorDestinoRenderizado.appendChild(botonDesasociar)

                            const botonCerrar = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.botonCerrar()
                            selectorDestinoRenderizado.appendChild(botonCerrar)

                        }
                    },
                    cancelarCambiarTitular: (instanciaUID) => {
                        const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                        const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                        selectorBotonCambiarTitular.removeAttribute("style")
                        selectorBotonDesasociar.removeAttribute("style")

                        const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                        selectorNuevoClienteUI.style.display = "none"

                        const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                        selectorbotonCerrarCambiarTitular.style.display = "none"
                    },
                    titularPool: {
                        UI: async (metadatos) => {

                            const nombreTitular = metadatos.nombreTitular
                            const pasaporteTitular = metadatos.pasaporteTitular
                            const emailTitular = metadatos.emailTitular
                            const telefonoTitular = metadatos.telefonoTitular
                            const tipoTitular = metadatos.tipoTitular
                            const instanciaUID = metadatos.instanciaUID
                            const selectorDestinoRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"] [espacio=gestionTitular]`)

                            if (selectorDestinoRenderizado) {


                                const titulo = "Datos del titular no verificado (POOL)"
                                const tituloUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.titulo(titulo)
                                selectorDestinoRenderizado.appendChild(tituloUI)

                                const info = "Vista de los datos del titular Pool. Estos datos provienen del cliente. Por lo tanto, deben de verificarse con la base de datos de clientes."
                                const infoUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.infoUI(info)
                                selectorDestinoRenderizado.appendChild(infoUI)


                                const detallesDelTitular = {
                                    //clienteUID: clienteUID,
                                    nombreTitular: nombreTitular,
                                    pasaporteTitular: pasaporteTitular,
                                    tipoTitular: "titularCliente",
                                    emailTitular: emailTitular,
                                    telefonoTitular: telefonoTitular,
                                }

                                const detallesDelTitularUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.detallesDelTitularUI(detallesDelTitular)
                                selectorDestinoRenderizado.appendChild(detallesDelTitularUI)

                                const info2 = "Primero use en el campo de búsqueda para ver si existe ya una ficha del cliente para poder asociarlo. Si no existiera la ficha del cliente puede crear una en el formulario de abajo. Si selecciona un cliente existente o crea una nueva ficha del cliente desde aquí se asociará automáticamente como titular de esta reserva "
                                const infoUI2 = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.infoUI(info2)
                                selectorDestinoRenderizado.appendChild(infoUI2)



                                const nuevoClienteUI = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.nuevoCliente.UI(instanciaUID)
                                selectorDestinoRenderizado.appendChild(nuevoClienteUI)


                                const botonCerrar = casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.botonCerrar()
                                selectorDestinoRenderizado.appendChild(botonCerrar)


                            }
                            // Obtenemos datos




                        }
                    }



                }

            },
            gestionPernoctantePorComprobar: {
                desplegarUI: async (pernoctanteUID) => {
                    const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("instanciaUID", instanciaUID)
                    advertenciaInmersivaIU.setAttribute("pernoctanteUID", pernoctanteUID)


                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                    contenidoAdvertenciaInmersiva.setAttribute("espacio", "gestionPernoctantePorComprobar")

                    const mensajeSpinner = "Esperando al servidor...."
                    const spinner = casaVitini.componentes.spinner(mensajeSpinner)
                    contenidoAdvertenciaInmersiva.appendChild(spinner)

                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)


                    const transaccion = {
                        zona: "administracion/reservas/detallesDelPernoctantePorComprobar",
                        reservaUID: Number(reservaUID),
                        pernoctanteUID: Number(pernoctanteUID)
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


                    if (respuestaServidor?.error) {
                        casaVitini.componentes.limpiarAdvertenciasInmersivas()
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.pernoctanteUID) {
                        const pernoctanteUID = respuestaServidor.pernoctanteUID
                        const nombreCompleto = respuestaServidor.nombreCompleto
                        const pasaporte = respuestaServidor.pasaporte

                        const seleccionarInstanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (seleccionarInstanciaRenderizada) {

                            seleccionarInstanciaRenderizada.querySelector("[contenedor=spinner]")?.remove()
                            seleccionarInstanciaRenderizada.style.justifyContent = "flex-start";
                            //const destinoRenderizado = seleccionarInstanciaRenderizada.querySelector("[espacio=gestionPernoctantePorComprobar]")

                            const metadatosTitualPool = {
                                instanciaUID: instanciaUID,
                                pernoctanteUID: pernoctanteUID,
                                nombreCompleto: nombreCompleto,
                                pasaporte: pasaporte
                            }
                            casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.titularPool.UI(metadatosTitualPool)
                        }
                    }

                },
                componentes: {
                    buscadorRapido: {
                        UI: (instanciaUID) => {


                            if (!instanciaUID) {
                                casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                const error = "El componente buscador en casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.buscadorRapido.UI necesita la instancia que la invoca"
                                return casaVitini.ui.vistas.advertenciaInmersiva(error)
                            }

                            const contenedor = document.createElement("div")
                            contenedor.classList.add("administracion_reservas_detallesReservas_gestionTitular_contenedorBuscador")
                            contenedor.setAttribute("contenedor", "buscador")


                            const info = document.createElement("div")
                            info.classList.add("adminsitracion_reservas_detallesReservas_gestionTitular_infoBuscador")
                            //contenedor.appendChild(info)

                            const campoBuscador = document.createElement("input")
                            campoBuscador.classList.add("administracion_reservas_detallesReserva_gestionTitular_campoBuscador")
                            campoBuscador.placeholder = "Buscar un cliente existente"
                            campoBuscador.setAttribute("campo", "buscador")

                            campoBuscador.addEventListener("input", (e) => {
                                casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.buscadorRapido.listaResultadosUI(e, instanciaUID)
                            })
                            contenedor.appendChild(campoBuscador)

                            const resultadosBuscador = document.createElement("div")
                            resultadosBuscador.classList.add("administracion_reservas_detallesReserva_gestionTitular_resultadosBuscador")
                            resultadosBuscador.setAttribute("contenedor", "resultadosBuscador")
                            //contenedor.appendChild(resultadosBuscador)


                            return contenedor
                        },
                        listaResultadosUI: async (e, instanciaUID) => {
                            const terminoBusqueda = e.target.value
                            const instanciaUIDBuscador = casaVitini.componentes.codigoFechaInstancia()

                            const alturaDinamica = window.scrollY + e.target.getBoundingClientRect().bottom;
                            const anchoDinamico = e.target.getBoundingClientRect().width;
                            const horizontalDinamicoJerarquico = casaVitini.componentes.medirPorJerarquiaDom.horizontal(e.target);

                            const selectorListaResultadosBuscadorRapidoRenderiaza = [...document.querySelectorAll("[componente=buscadorRapidoCliente]")]
                            selectorListaResultadosBuscadorRapidoRenderiaza.map((listaRenderizada) => {
                                listaRenderizada.remove()
                            })
                            const campoVacio = e.target.value.length
                            if (campoVacio === 0) {
                                clearTimeout(casaVitini.componentes.temporizador);
                                return;
                            }

                            const listaResultados = document.createElement("div")
                            listaResultados.setAttribute("componente", "buscadorRapidoCliente")
                            listaResultados.setAttribute("instanciaUIDBuscador", instanciaUIDBuscador)
                            listaResultados.classList.add("administracion_reservas_detallesReservas_gestionTitular_listaBuscador")
                            listaResultados.style.top = (alturaDinamica + 4) + "px"
                            listaResultados.style.left = (horizontalDinamicoJerarquico + 0) + "px"
                            listaResultados.style.width = anchoDinamico + "px"
                            listaResultados.innerText = null
                            listaResultados.innerText = "Buscando..."
                            document.addEventListener("mousedown", (e) => {
                                if (e.target.getAttribute("componente") === "elementoResultadosBuscadorRapido") {
                                    e.preventDefault()
                                }
                            })
                            const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"] [contenedor=buscador]`)
                            instanciaUIDRenderizada.appendChild(listaResultados)

                            clearTimeout(casaVitini.componentes.temporizador);
                            casaVitini.componentes.temporizador = setTimeout(() => {

                                const metadatos = {
                                    terminoBusqueda: terminoBusqueda,
                                    instanciaUIDBuscador: instanciaUIDBuscador,
                                    instanciaUID: instanciaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.buscadorRapido.transactor(metadatos)
                            }, 1500);
                        },
                        transactor: async (metadatos) => {

                            const instanciaUIDBuscador = metadatos.instanciaUIDBuscador
                            const terminoBusqueda = metadatos.terminoBusqueda
                            const instanciaUID = metadatos.instanciaUID

                            const transaccion = {
                                zona: "administracion/clientes/buscar",
                                tipoBusqueda: "rapido",
                                buscar: terminoBusqueda
                            }
                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                            if (respuestaServidor?.error) {
                                return
                            }

                            const listaBuscadorRenderizada = document.querySelector(`[instanciaUIDBuscador="${instanciaUIDBuscador}"]`)
                            if (!listaBuscadorRenderizada) {
                                return
                            }
                            listaBuscadorRenderizada.innerHTML = null

                            const resultadosClientes = respuestaServidor?.clientes
                            resultadosClientes.map((clienteEncontrado) => {
                                const cliente = clienteEncontrado.uid
                                const nombre = clienteEncontrado.nombre
                                const primerApellido = clienteEncontrado.primerApellido
                                const segundoApellido = clienteEncontrado.segundoApellido
                                const pasaporte = clienteEncontrado.pasaporte

                                const bloqueCliente = document.createElement("div")
                                bloqueCliente.classList.add("administracionReservaDetallesBuscadorRapidoBloqueCliente")
                                bloqueCliente.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                bloqueCliente.addEventListener("click", () => {


                                    const metadatos = {
                                        clienteUID: cliente,
                                        nombre: nombre,
                                        primerApellido: primerApellido,
                                        segundoApellido: segundoApellido,
                                        pasaporte: pasaporte,
                                        instanciaUID: instanciaUID
                                    }
                                    casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.propuestaDeCambioPernoctantePoolPorClienteEnHabitacion(metadatos)
                                })


                                const filaNombre = document.createElement("p")
                                filaNombre.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaNombre")
                                filaNombre.innerText = `${nombre} ${primerApellido} ${segundoApellido}`
                                filaNombre.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                bloqueCliente.appendChild(filaNombre)

                                const filaPasaporte = document.createElement("p")
                                filaPasaporte.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaPasaporte")
                                filaPasaporte.innerText = pasaporte
                                filaPasaporte.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                bloqueCliente.appendChild(filaPasaporte)

                                listaBuscadorRenderizada.appendChild(bloqueCliente)
                            })
                        },
                        asociarCliente: async (metadatos) => {
                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                            const clienteUID = metadatos.clienteUID
                            const instanciaUIDContenedor = metadatos.instanciaUIDContenedor
                            const instanciaUIDPantallaDeCarga = casaVitini.componentes.codigoFechaInstancia()
                            const opcionesPantallaDeCarga = {
                                instanciaUID: instanciaUIDPantallaDeCarga,
                                mensaje: "Asociando cliente a la titularidad de esta reserva"
                            }
                            casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                            const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                            const transaccion = {
                                zona: "administracion/reservas/gestionTitular/asociarTitular",
                                clienteUID: Number(clienteUID),
                                reservaUID: Number(reservaUID)
                            }


                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


                            if (respuestaServidor?.error) {
                                pantallaDeCargaRenderizada?.remove()
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                //casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                pantallaDeCargaRenderizada?.remove()
                                const nuevoClienteUID = respuestaServidor.clienteUID
                                const nombreCompleto = respuestaServidor.nombreCompleto
                                const nombre = respuestaServidor.nombre
                                const primerApellido = respuestaServidor.primerApellido
                                const segundoApellido = respuestaServidor.segundoApellido
                                const clienteUID = respuestaServidor.clienteUID
                                const email = respuestaServidor.email
                                const pasaporte = respuestaServidor.pasaporte
                                const telefono = respuestaServidor.telefono

                                const selectorNombreTitularRenderizado = document.querySelector(`[reserva="${reservaUID}"]`)
                                const selectorNombreTitular = document.querySelector(`[dataReserva=nombreTitular]`)
                                if (selectorNombreTitularRenderizado && selectorNombreTitular) {
                                    selectorNombreTitular.innerText = nombreCompleto

                                    const selectorBloqueTitular = document.querySelector(`[contenedor=titularUID]`)
                                    selectorBloqueTitular.setAttribute("tipoTitular", "titularCliente")
                                    selectorBloqueTitular.setAttribute("titularUID", nuevoClienteUID)

                                }

                                const metadatosRespuestaUnificada = {
                                    clienteUID: clienteUID,
                                    nombreCompleto: nombreCompleto,
                                    pasaporte: pasaporte,
                                    email: email,
                                    telefono: telefono,
                                    instanciaUID: instanciaUIDContenedor,
                                    reservaUID: reservaUID
                                }
                                casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.respuestaUnificadaUI(metadatosRespuestaUnificada)
                            }
                        }


                    },
                    nuevoCliente: {
                        UI: (instanciaUID) => {
                            const nuevoClienteUI = document.createElement("div")
                            nuevoClienteUI.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI")
                            nuevoClienteUI.setAttribute("formulario", "nuevoCliente")




                            const info = document.createElement("p")
                            info.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_info")
                            info.classList.add("negrita")
                            info.innerText = "Crear nuevo cliente para añadirlo como pernoctante"
                            nuevoClienteUI.appendChild(info)


                            const campoNombre = document.createElement("input")
                            campoNombre.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            campoNombre.setAttribute("campo", "nombre")
                            campoNombre.setAttribute("formulario", "AnadirPernoctante")
                            campoNombre.placeholder = "Nombre (obligatiorio)"
                            nuevoClienteUI.appendChild(campoNombre)

                            const primerApellido = document.createElement("input")
                            primerApellido.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            primerApellido.setAttribute("campo", "primerApellido")
                            primerApellido.setAttribute("formulario", "AnadirPernoctante")
                            primerApellido.placeholder = "Primer apellido"
                            nuevoClienteUI.appendChild(primerApellido)

                            const segundoApellido = document.createElement("input")
                            segundoApellido.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            segundoApellido.setAttribute("campo", "segundoApellido")
                            segundoApellido.setAttribute("formulario", "AnadirPernoctante")
                            segundoApellido.placeholder = "Segundo apellido"
                            nuevoClienteUI.appendChild(segundoApellido)

                            const pasaporte = document.createElement("input")
                            pasaporte.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            pasaporte.setAttribute("campo", "pasaporte")
                            pasaporte.setAttribute("formulario", "AnadirPernoctante")
                            pasaporte.placeholder = "Pasaporte (obligatorio)"
                            nuevoClienteUI.appendChild(pasaporte)

                            const telefono = document.createElement("input")
                            telefono.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            telefono.setAttribute("campo", "telefono")
                            telefono.setAttribute("formulario", "AnadirPernoctante")
                            telefono.placeholder = "Telefono"
                            nuevoClienteUI.appendChild(telefono)

                            const correoElecotronico = document.createElement("input")
                            correoElecotronico.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_campo")
                            correoElecotronico.setAttribute("campo", "correoElectronico")
                            correoElecotronico.setAttribute("formulario", "AnadirPernoctante")
                            correoElecotronico.placeholder = "Correo electronico"
                            nuevoClienteUI.appendChild(correoElecotronico)

                            const botonGuardarNuevoCliente = document.createElement("div")
                            botonGuardarNuevoCliente.classList.add("administracion_reservas_detallesReservas_gestionTitular_nuevoClienteUI_botonV1")
                            botonGuardarNuevoCliente.innerText = "Crear nuevo cliente y añadirlo como pernoctante"
                            botonGuardarNuevoCliente.addEventListener("click", () => {
                                casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.guardarNuevoClienteYSustituirloPorElClientePoolActual(instanciaUID)
                            })
                            nuevoClienteUI.appendChild(botonGuardarNuevoCliente)
                            return nuevoClienteUI

                        },
                        transactor: async (instanciaUID) => {

                            const instanciaUIDPantallaDeCarga = casaVitini.componentes.codigoFechaInstancia()

                            const opcionesPantallaDeCarga = {
                                instanciaUID: instanciaUIDPantallaDeCarga,
                                mensaje: "Asociando cliente a la titularidad de esta reserva"
                            }
                            casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                            const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)

                            const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                            const campos = [...document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`).querySelectorAll("[campo]")]


                            const metadatos = {
                                zona: "administracion/reservas/gestionTitular/crearTitular",
                                reservaUID: Number(reservaUID)
                            }
                            campos.map((campo) => {
                                const nombreCampo = campo.getAttribute("campo")
                                const valorCampo = campo.value
                                metadatos[nombreCampo] = valorCampo
                            })


                            const respuestaServidor = await casaVitini.componentes.servidor(metadatos)


                            if (respuestaServidor?.error) {
                                pantallaDeCargaRenderizada?.remove()
                                return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                //casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                pantallaDeCargaRenderizada?.remove()
                                const nuevoClienteUID = respuestaServidor.clienteUID
                                const nombreCompleto = respuestaServidor.nombreCompleto
                                const clienteUID = respuestaServidor.clienteUID
                                const email = respuestaServidor.email
                                const telefono = respuestaServidor.telefono
                                const pasaporte = respuestaServidor.pasaporte

                                const selectorNombreTitularRenderizado = document.querySelector(`[reserva="${reservaUID}"]`)
                                const selectorNombreTitular = document.querySelector(`[dataReserva=nombreTitular]`)
                                if (selectorNombreTitularRenderizado && selectorNombreTitular) {
                                    selectorNombreTitular.innerText = nombreCompleto

                                    const selectorBloqueTitular = document.querySelector(`[contenedor=titularUID]`)
                                    selectorBloqueTitular.setAttribute("tipoTitular", "titularCliente")
                                    selectorBloqueTitular.setAttribute("titularUID", nuevoClienteUID)


                                }

                                const metadatosRespuestaUnificada = {
                                    clienteUID: clienteUID,
                                    nombreCompleto: nombreCompleto,
                                    pasaporte: pasaporte,
                                    email: email,
                                    telefono: telefono,
                                    instanciaUID: instanciaUID,
                                    reservaUID: reservaUID
                                }

                                casaVitini.administracion.reservas.detallesReserva.gestionTitular.componentes.respuestaUnificadaUI(metadatosRespuestaUnificada)

                            }





                        }
                    },
                    detallesDelTitularUI: (detallesDelTitular) => {

                        const nombreCompleto = detallesDelTitular.nombreCompleto
                        const pasaporte = detallesDelTitular.pasaporte

                        const detallesRapidosDelTitular = document.createElement("div")
                        detallesRapidosDelTitular.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedorGlobal")

                        // Nombre completo titular
                        let contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        let nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Nombre completo del pernoctante a comprobar"
                        contenedorDato.appendChild(nombreDato)

                        let valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.setAttribute("componente", "nombreCompleto")
                        valorDato.innerText = nombreCompleto
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)

                        // Pasaporte titular
                        contenedorDato = document.createElement("div")
                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")

                        nombreDato = document.createElement("div")
                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                        nombreDato.innerText = "Pasaporte del pernoctante a comprobar           "
                        contenedorDato.appendChild(nombreDato)

                        valorDato = document.createElement("div")
                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                        valorDato.classList.add("negrita")
                        valorDato.setAttribute("componente", "pasaporte")
                        valorDato.innerText = pasaporte
                        contenedorDato.appendChild(valorDato)

                        detallesRapidosDelTitular.appendChild(contenedorDato)
                        return detallesRapidosDelTitular

                    },
                    botonCerrarFormularioNuevoCliente: () => {
                        const boton = document.createElement("div")
                        boton.classList.add("administracion_reservas_detallesReservas_gestionTitular_botonCerrar")
                        boton.innerHTML = "Cerrar gestion del titular de la reserva"
                        boton.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                        return boton
                    },
                    botonCerrar: () => {
                        const boton = document.createElement("div")
                        boton.classList.add("administracion_reservas_detallesReservas_gestionTitular_botonCerrar")
                        boton.innerHTML = "Cerrar gestion del pernoctante de la reserva"
                        boton.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                        return boton
                    },
                    titulo: (titulo) => {
                        const tituloUI = document.createElement("p")
                        tituloUI.classList.add("detallesReservaTituloCancelarReserva")
                        tituloUI.innerText = titulo
                        return tituloUI
                    },
                    infoUI: (info) => {
                        const infoUI = document.createElement("p")
                        infoUI.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        infoUI.innerText = info
                        return infoUI
                    },
                    titularPool: {
                        UI: async (metadatos) => {
                            const instanciaUID = metadatos.instanciaUID
                            const pernoctanteUID = metadatos.pernoctanteUID
                            const nombreCompleto = metadatos.nombreCompleto
                            const pasaporte = metadatos.pasaporte
                            const selectorDestinoRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"] [espacio=gestionPernoctantePorComprobar]`)

                            if (selectorDestinoRenderizado) {

                                document.querySelector(`[instanciaUID="${instanciaUID}"]`).setAttribute("pernoctanteUID", pernoctanteUID)
                                const titulo = "Pernoctane por comprobar (POOL)"
                                const tituloUI = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.titulo(titulo)
                                selectorDestinoRenderizado.appendChild(tituloUI)

                                const info = "Los datos del pernoctante deben de comprobarse antes de guardarse en la base de datos de los clientes."
                                const infoUI = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.infoUI(info)
                                selectorDestinoRenderizado.appendChild(infoUI)


                                const detallesDelTitular = {
                                    nombreCompleto: nombreCompleto,
                                    pasaporte: pasaporte
                                }

                                const detallesDelTitularUI = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.detallesDelTitularUI(detallesDelTitular)
                                selectorDestinoRenderizado.appendChild(detallesDelTitularUI)

                                const info2 = "Primero use en el campo de búsqueda para ver si existe ya una ficha del cliente para poder asociarlo. Si no existiera la ficha del cliente puede crear una en el formulario de abajo. Si selecciona un cliente existente o crea una nueva ficha del cliente desde aquí se asociará automáticamente como titular de esta reserva"
                                const infoUI2 = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.infoUI(info2)
                                selectorDestinoRenderizado.appendChild(infoUI2)

                                const buscadorUI = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.buscadorRapido.UI(instanciaUID)
                                selectorDestinoRenderizado.appendChild(buscadorUI)




                                const nuevoClienteUI = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.nuevoCliente.UI(instanciaUID)
                                selectorDestinoRenderizado.appendChild(nuevoClienteUI)


                                const botonCerrar = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.botonCerrar()
                                selectorDestinoRenderizado.appendChild(botonCerrar)



                                // Obtenemos datos


                            }

                        }
                    },
                    propuestaDeCambioPernoctantePoolPorClienteEnHabitacion: (propuesta) => {
                        const clienteUID = propuesta.clienteUID
                        const nombre = propuesta.nombre
                        const primerApellido = propuesta.primerApellido
                        const segundoApellido = propuesta.segundoApellido
                        const pasaporte = propuesta.pasaporte
                        const instanciaUID = propuesta.instanciaUID

                        const nombreCompletoPool = document.querySelector(`[instanciaUID="${instanciaUID}"]`).querySelector("[componente=nombreCompleto]").innerText
                        const pasaportePool = document.querySelector(`[instanciaUID="${instanciaUID}"]`).querySelector("[componente=pasaporte]").innerText

                        const pernoctanteUID = document
                            .querySelector(`[instanciaUID="${instanciaUID}"]`)
                            .getAttribute("pernoctanteUID")
                        const contenedorRenderizad = document
                            .querySelector(`[instanciaUID="${instanciaUID}"]`)
                            .querySelector("[espacio=gestionPernoctantePorComprobar]")


                        const contenidoAdvertenciaInmersiva = document.createElement("div")
                        contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                        contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")

                        const titulo = "Propuesta de verificacion"
                        const tituloUI = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.titulo(titulo)
                        contenidoAdvertenciaInmersiva.appendChild(tituloUI)

                        let info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.innerText = "Revise los datos y si estan verificados documentalmente puede proceder a guardarlos. Este proceso reemplazara los datos verificados por los anteriores datos no verificados."
                        contenidoAdvertenciaInmersiva.appendChild(info)



                        info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.innerText = "Pernoctante no verificado por el que se va a proceder a la sustitucion."
                        contenidoAdvertenciaInmersiva.appendChild(info)
                        const datosDetallesDelTitularUI = {
                            nombreCompleto: nombreCompletoPool,
                            pasaporte: pasaportePool
                        }

                        const detallesDelTitularUI = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.detallesDelTitularUI(datosDetallesDelTitularUI)
                        contenidoAdvertenciaInmersiva.appendChild(detallesDelTitularUI)

                        info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.innerText = "Pernoctante final que sustituira al anterior con datos verificados."
                        contenidoAdvertenciaInmersiva.appendChild(info)
                        const datosPernoctanteVerificado = {
                            nombreCompleto: `${nombre}${primerApellido}${segundoApellido}`,
                            pasaporte: pasaporte
                        }

                        const pernoctanteVerificadoUI = casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.detallesDelTitularUI(datosPernoctanteVerificado)
                        contenidoAdvertenciaInmersiva.appendChild(pernoctanteVerificadoUI)





                        const botonAceptarPropuesta = document.createElement("div")
                        botonAceptarPropuesta.setAttribute("class", "errorBoton")
                        botonAceptarPropuesta.innerText = "Aceptar propuesta"
                        botonAceptarPropuesta.addEventListener("click", () => {
                            const confimarPropuesta = {
                                clienteUID: clienteUID,
                                instanciaUID: instanciaUID
                            }
                            casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.confirmarPropuesta(confimarPropuesta)
                        })
                        contenidoAdvertenciaInmersiva.appendChild(botonAceptarPropuesta)

                        const botonAtras = document.createElement("div")
                        botonAtras.setAttribute("class", "errorBoton")
                        botonAtras.innerText = "Volver a atras"
                        botonAtras.addEventListener("click", (e) => {

                            const metadatosTitualPool = {
                                instanciaUID: instanciaUID,
                                pernoctanteUID: pernoctanteUID,
                                nombreCompleto: nombreCompletoPool,
                                pasaporte: pasaportePool
                            }
                            contenedorRenderizad.innerHTML = null
                            casaVitini.administracion.reservas.detallesReserva.gestionPernoctantePorComprobar.componentes.titularPool.UI(metadatosTitualPool)

                        })

                        contenidoAdvertenciaInmersiva.appendChild(botonAtras)

                        const botonCancelar = document.createElement("div")
                        botonCancelar.setAttribute("class", "errorBoton")
                        botonCancelar.innerText = "Cancelar y cerrar"
                        botonCancelar.addEventListener("click", () => {
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).remove()
                        })
                        contenidoAdvertenciaInmersiva.appendChild(botonCancelar)


                        // contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                        // advertenciaInmersivaUI.appendChild(contenedorAdvertenciaInmersiva)

                        contenedorRenderizad.innerHTML = null
                        contenedorRenderizad.appendChild(contenidoAdvertenciaInmersiva)



                    },
                    confirmarPropuesta: async (propuesta) => {
                        const instanciaUID = propuesta.instanciaUID
                        const clienteUID = propuesta.clienteUID
                        const pernoctanteUID_DesdeInstancia = document.querySelector(`[instanciaUID="${instanciaUID}"]`).getAttribute("pernoctanteUID")
                        const instanciaUID_pantallaPropuestaConfirmada = casaVitini.componentes.codigoFechaInstancia()


                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const metadatosPantallaCarga = {
                            mensaje: "Esperando al servidor...",
                            instanciaUID: instanciaUID_pantallaPropuestaConfirmada,
                        }
                        casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                        const transaccion = {
                            zona: "administracion/reservas/cambiarTipoCliente",
                            reservaUID: Number(reservaUID),
                            pernoctanteUID: Number(pernoctanteUID_DesdeInstancia),
                            clienteUID: Number(clienteUID)
                        }


                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                        const selectorPantallaDeCarga = [...document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaPropuestaConfirmada}"]`)]

                        if (!selectorPantallaDeCarga) {
                            return
                        }
                        selectorPantallaDeCarga.forEach((pantalla) => {
                            pantalla.remove()
                        })
                        if (respuestaServidor?.error) {
                            return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.ok) {
                            const habitacionUID = respuestaServidor.habitacionUID
                            const pernoctanteUID = respuestaServidor.pernoctanteUID
                            const nombreCompleto = respuestaServidor.nombreCompleto
                            const pasaporte = respuestaServidor.pasaporte

                            const selectorInstanciaRaiz = document.querySelectorAll(`[instanciaUID="${instanciaUID}"]`)
                            selectorInstanciaRaiz.forEach((pantalla) => {
                                pantalla.remove()
                            })



                            const selectorContenedorPernoctanteAntiguo = document.querySelector(`[contenedor=pernoctante][pernoctanteUID="${pernoctanteUID}"]`)
                            selectorContenedorPernoctanteAntiguo.remove()

                            if (habitacionUID) {
                                const selectorHabitacion = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                let metadatos = {
                                    tipoPernoctante: "cliente",
                                    clienteUID: clienteUID,
                                    pernoctanteUID: pernoctanteUID,
                                    estadoAlojamiento: "alojado",

                                }

                                const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatos)
                                metadatos = {
                                    nombreCompleto: nombreCompleto,
                                }
                                const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatos)
                                bloquePernoctantes.appendChild(nombrePernoctante)

                                metadatos = {
                                    pasaporte: pasaporte,
                                }
                                const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatos)
                                bloquePernoctantes.appendChild(identificacionPernoctante)
                                selectorHabitacion.appendChild(bloquePernoctantes)

                            } else {
                                const metadatosBloquePernoctantes = {
                                    tipoPernoctante: "cliente",
                                    clienteUID: clienteUID,
                                    pernoctanteUID: pernoctanteUID,
                                    estadoAlojamiento: "noAlojado"
                                }
                                const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatosBloquePernoctantes)
                                const metadatosNombreUi = {
                                    nombreCompleto: nombreCompleto,
                                }
                                const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatosNombreUi)
                                bloquePernoctantes.appendChild(nombrePernoctante)

                                const metadatosPasaporte = {
                                    pasaporte: pasaporte,
                                }

                                const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatosPasaporte)
                                bloquePernoctantes.appendChild(identificacionPernoctante)
                                const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                zonaDestino.appendChild(bloquePernoctantes)

                                casaVitini.administracion.reservas.detallesReserva.transactor.controlEspacioPernoctantesSinAlojamiento()
                            }
                        }
                    },
                    guardarNuevoClienteYSustituirloPorElClientePoolActual: async (instanciaUID) => {
                        const pernoctanteUID_DesdeInstancia = document.querySelector(`[instanciaUID="${instanciaUID}"]`).getAttribute("pernoctanteUID")
                        const instanciaUID_pantallaPropuestaConfirmada = casaVitini.componentes.codigoFechaInstancia()
                        const reservaUID = document.querySelector("[reserva]").getAttribute("reserva")
                        const campos = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`).querySelectorAll("[campo]")


                        const metadatosPantallaCarga = {
                            mensaje: "Esperando al servidor...",
                            instanciaUID: instanciaUID_pantallaPropuestaConfirmada,
                        }
                        casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                        const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaPropuestaConfirmada}"]`)

                        const transaccion = {
                            zona: "administracion/reservas/guardarNuevoClienteYSustituirloPorElClientePoolActual",
                            reserva: Number(reservaUID),
                            pernoctanteUID: Number(pernoctanteUID_DesdeInstancia)
                        }

                        campos.forEach((campo) => {
                            const nombreCampo = campo.getAttribute("campo")
                            const valorCampo = campo.value
                            transaccion[nombreCampo] = valorCampo
                        })


                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                        if (!selectorPantallaDeCarga) {
                            return
                        }
                        selectorPantallaDeCarga.forEach((pantalla) => {
                            pantalla.remove()
                        })
                        if (respuestaServidor?.error) {
                            return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.ok) {

                            const nuevoClienteUID = respuestaServidor.nuevoClienteUID
                            const nombreCompleto = respuestaServidor.nombreCompleto
                            const pasaporte = respuestaServidor.pasaporte
                            const habitacionUID = respuestaServidor.habitacionUID


                            const selectorInstanciaRaiz = document.querySelectorAll(`[instanciaUID="${instanciaUID}"]`)
                            selectorInstanciaRaiz.forEach((pantalla) => {
                                pantalla.remove()
                            })



                            const selectorContenedorPernoctanteAntiguo = document.querySelector(`[contenedor=pernoctante][pernoctanteUID="${pernoctanteUID_DesdeInstancia}"]`)
                            selectorContenedorPernoctanteAntiguo.remove()

                            if (habitacionUID) {
                                const selectorHabitacion = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                let metadatos = {
                                    tipoPernoctante: "cliente",
                                    clienteUID: nuevoClienteUID,
                                    pernoctanteUID: pernoctanteUID_DesdeInstancia,
                                    estadoAlojamiento: "alojado",

                                }

                                const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatos)
                                metadatos = {
                                    nombreCompleto: nombreCompleto,
                                }
                                const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatos)
                                bloquePernoctantes.appendChild(nombrePernoctante)

                                metadatos = {
                                    pasaporte: pasaporte,
                                }
                                const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatos)
                                bloquePernoctantes.appendChild(identificacionPernoctante)
                                selectorHabitacion.appendChild(bloquePernoctantes)

                            } else {
                                const metadatosBloquePernoctantes = {
                                    tipoPernoctante: "cliente",
                                    clienteUID: nuevoClienteUID,
                                    pernoctanteUID: pernoctanteUID_DesdeInstancia,
                                    estadoAlojamiento: "noAlojado"
                                }
                                const bloquePernoctantes = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteUI(metadatosBloquePernoctantes)
                                const metadatosNombreUi = {
                                    nombreCompleto: nombreCompleto,
                                }
                                const nombrePernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctanteNombreUI(metadatosNombreUi)
                                bloquePernoctantes.appendChild(nombrePernoctante)

                                const metadatosPasaporte = {
                                    pasaporte: pasaporte,
                                }

                                const identificacionPernoctante = casaVitini.administracion.reservas.detallesReserva.UIComponentes.pernoctantePasaporteUI(metadatosPasaporte)
                                bloquePernoctantes.appendChild(identificacionPernoctante)
                                const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                zonaDestino.appendChild(bloquePernoctantes)

                                casaVitini.administracion.reservas.detallesReserva.transactor.controlEspacioPernoctantesSinAlojamiento()
                            }
                        }




                    },
                }
            }
        },
    },
    administracion: {
        arranque: () => {
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            const botones = [...document.querySelectorAll("[componente=botonAdministracion]")]
            botones.map((boton) => {
                boton.addEventListener("click", (boton) => {
                    boton.preventDefault()
                    const vista = boton.target.getAttribute("vista")
                    const navegacion = {
                        vista: vista,
                        tipoOrigen: "menuNavegador"
                    }
                    casaVitini.componentes.controladorVista(navegacion)
                })
            })
        },
    },
    situacion: {
        arranque: async () => {
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            const granuladoURL = casaVitini.componentes.granuladorURL()
            const directorioUltimo = granuladoURL.directorios[granuladoURL.directorios.length - 1]

            const marcoElastico = document.querySelector("[componente=marcoElastico]")
            const horaLocalPeticion = {
                zona: "componentes/fechaLocal"
            }
            const horaLocal = await casaVitini.componentes.servidor(horaLocalPeticion)
            if (horaLocal?.error) {
                casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (horaLocal.fechaISO) {

                const zonaHoraria = horaLocal.zonaHoraria
                const dia = horaLocal.dia
                const mes = horaLocal.mes
                const ano = horaLocal.ano
                const hora = horaLocal.hora
                const minuto = horaLocal.minuto
                const fechaISO = horaLocal.fechaISO

                const fechaUI = `Hoy son las ${hora}:${minuto}, ${dia} del ${mes} del ${ano}`


                const contenedorFecha = document.createElement("div")
                contenedorFecha.classList.add("adminitracion_situacion_portada_contenedorFecha")
                contenedorFecha.innerText = fechaUI
                marcoElastico.appendChild(contenedorFecha)

            }


            marcoElastico.style.gap = "4px"


            if (directorioUltimo === "situacion") {
                const transaccion = {
                    zona: "administracion/situacion/obtenerSituacion"
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const situacion = respuestaServidor?.ok

                    const fechaTZ = respuestaServidor.fechaTZ
                    const horaTZ = respuestaServidor.horaTZ
                    const horaEntrada = respuestaServidor.horaEntrada
                    const horaSalida = respuestaServidor.horaSalida


                    const espacioSituacion = document.createElement("div")
                    espacioSituacion.classList.add("espacioSituacion")
                    espacioSituacion.setAttribute("componente", "espacioSituacion")



                    for (const [apartamentoIDV, detallesApartamento] of Object.entries(situacion)) {
                        const reservas = detallesApartamento.reservas
                        let estadoApartamento = detallesApartamento.estadoApartamento
                        let estadoPernoctacion = detallesApartamento.estadoPernoctacion
                        const calendariosSincronizados = detallesApartamento?.calendariosSincronizados || {}
                        if (estadoApartamento === "disponible") {
                            estadoApartamento = "Disponible"
                        }
                        if (estadoApartamento === "noDisponible") {
                            estadoApartamento = "No disponible"
                        }
                        if (estadoPernoctacion === "ocupado") {
                            estadoPernoctacion = "Ocupado"
                        }
                        if (estadoPernoctacion === "libre") {
                            estadoPernoctacion = "Libre"
                        }

                        const apartamentoUI = document.createElement("div")
                        apartamentoUI.classList.add("situacionApartamentoUI")

                        const apartamentoTitulo = document.createElement("a")
                        apartamentoTitulo.classList.add("situacionApartamentoTitutlo")
                        apartamentoTitulo.innerText = detallesApartamento.apartamentoUI
                        apartamentoTitulo.setAttribute("vista", `/administracion/situacion/${apartamentoIDV}`)
                        apartamentoTitulo.setAttribute("href", `/administracion/situacion/${apartamentoIDV}`)
                        apartamentoTitulo.addEventListener("click", casaVitini.componentes.cambiarVista)
                        apartamentoUI.appendChild(apartamentoTitulo)


                        const apartamentoEstado = document.createElement("p")
                        apartamentoEstado.classList.add("situacionApartamentoEstado")
                        apartamentoEstado.innerText = estadoApartamento
                        apartamentoUI.appendChild(apartamentoEstado)


                        const apartamentoEstadoPernoctacion = document.createElement("p")
                        apartamentoEstadoPernoctacion.classList.add("situacionApartamentoEstadoPernoctacion")
                        apartamentoEstadoPernoctacion.innerText = estadoPernoctacion
                        apartamentoUI.appendChild(apartamentoEstadoPernoctacion)

                        for (const detallesReservas of reservas) {

                            const reservaUID = detallesReservas.reserva
                            const diaLimite = detallesReservas.diaLimite
                            const fechaEntrada = detallesReservas.fechaEntrada
                            const fechaSalida = detallesReservas.fechaSalida
                            const porcentajeTranscurrido = detallesReservas.porcentajeTranscurrido
                            const tiempoRestante = detallesReservas.tiempoRestante
                            const numeroDiasReserva = detallesReservas.numeroDiasReserva

                            const contenedorReserva = document.createElement("div")
                            contenedorReserva.classList.add("administracion_situacion_portada_contenedorReserva")

                            let bloqueEntidad = document.createElement("a")
                            bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                            bloqueEntidad.setAttribute("vista", `/administracion/reservas/${reservaUID}`)
                            bloqueEntidad.setAttribute("href", `/administracion/reservas/${reservaUID}`)
                            bloqueEntidad.addEventListener("click", (e) => {
                                e.preventDefault()
                                e.stopPropagation()
                                const navegacion = {
                                    vista: `/administracion/reservas/${reservaUID}`,
                                    tipoOrigen: "menuNavegador"

                                }
                                return casaVitini.componentes.controladorVista(navegacion)
                            })
                            bloqueEntidad.classList.add("administracion_situacion_portada_contenedorSelecccionable")


                            let tituloEntidad = document.createElement("div")
                            tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                            tituloEntidad.innerText = "Reserva"
                            bloqueEntidad.appendChild(tituloEntidad)

                            let apartamentoReserva = document.createElement("a")
                            apartamentoReserva.classList.add("adminsitracion_situacion_portada_datoEntidad")
                            apartamentoReserva.innerText = reservaUID
                            bloqueEntidad.appendChild(apartamentoReserva)
                            contenedorReserva.appendChild(bloqueEntidad)


                            if (diaLimite === "diaDeSalida") {

                                let bloqueEntidad = document.createElement("div")
                                bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")

                                const aviso = document.createElement("div")
                                aviso.classList.add("administracion_situacion_portada_tituloEntidad")
                                aviso.classList.add("negrita")
                                aviso.innerText = "<<< Dia de salida"
                                bloqueEntidad.appendChild(aviso)

                                const tituloEntidad = document.createElement("div")
                                tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                                tituloEntidad.innerText = "Hoy es el dia final de la reserva y los pernoctantes deben de abandonar el alojamiento antes de las " + horaSalida
                                bloqueEntidad.appendChild(tituloEntidad)

                                const datoEntidad = document.createElement("div")
                                datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                                datoEntidad.innerText = tiempoRestante
                                // bloqueEntidad.appendChild(datoEntidad)
                                contenedorReserva.appendChild(bloqueEntidad)
                            }

                            if (diaLimite === "diaDeEntrada") {

                                let bloqueEntidad = document.createElement("div")
                                bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")

                                const aviso = document.createElement("div")
                                aviso.classList.add("administracion_situacion_portada_tituloEntidad")
                                aviso.classList.add("negrita")
                                aviso.innerText = ">>> Dia de entrada"
                                bloqueEntidad.appendChild(aviso)

                                const tituloEntidad = document.createElement("div")
                                tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                                tituloEntidad.innerText = "Hoy es el dia de entrada de la reserva y el alojamiento debe de esta preparado antes de las " + horaEntrada + " para la llega de los nuevos pernoctantes"
                                bloqueEntidad.appendChild(tituloEntidad)

                                const datoEntidad = document.createElement("div")
                                datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                                datoEntidad.innerText = tiempoRestante
                                // bloqueEntidad.appendChild(datoEntidad)
                                contenedorReserva.appendChild(bloqueEntidad)
                            }









                            const contenedorFechas = document.createElement("div")
                            contenedorFechas.classList.add("administracion_situacion_portada_contenedorFechas")

                            bloqueEntidad = document.createElement("div")
                            bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")

                            tituloEntidad = document.createElement("div")
                            tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                            tituloEntidad.innerText = "Fecha de entrada"
                            bloqueEntidad.appendChild(tituloEntidad)


                            let apartamentoFechaEntrada = document.createElement("div")
                            apartamentoFechaEntrada.classList.add("adminsitracion_situacion_portada_datoEntidad")
                            apartamentoFechaEntrada.innerText = fechaEntrada
                            bloqueEntidad.appendChild(apartamentoFechaEntrada)

                            contenedorFechas.appendChild(bloqueEntidad)



                            bloqueEntidad = document.createElement("div")
                            bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                            bloqueEntidad.classList.add("administracion_situacion_portada_fechaDeSalida")

                            tituloEntidad = document.createElement("div")
                            tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                            tituloEntidad.innerText = "Fecha de salida"
                            bloqueEntidad.appendChild(tituloEntidad)

                            let apartamentoFechaSalida = document.createElement("div")
                            apartamentoFechaSalida.classList.add("adminsitracion_situacion_portada_datoEntidad")
                            apartamentoFechaSalida.innerText = fechaSalida
                            bloqueEntidad.appendChild(apartamentoFechaSalida)

                            contenedorFechas.appendChild(bloqueEntidad)

                            contenedorReserva.appendChild(contenedorFechas)


                            bloqueEntidad = document.createElement("div")
                            bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")

                            let apartamentoEstadoReserva = document.createElement("div")
                            apartamentoEstadoReserva.classList.add("situacionApartamentoEstadoReserva")

                            let barraProgresso = document.createElement("div")
                            barraProgresso.classList.add("situacionBarraProgressoReserva")
                            barraProgresso.style.width = porcentajeTranscurrido
                            apartamentoEstadoReserva.appendChild(barraProgresso)
                            bloqueEntidad.appendChild(apartamentoEstadoReserva)
                            contenedorReserva.appendChild(bloqueEntidad)





                            bloqueEntidad = document.createElement("div")
                            bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")

                            tituloEntidad = document.createElement("div")
                            tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                            tituloEntidad.innerText = "Duración de la reserva"
                            bloqueEntidad.appendChild(tituloEntidad)

                            let datoEntidad = document.createElement("div")
                            datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                            datoEntidad.innerText = numeroDiasReserva
                            bloqueEntidad.appendChild(datoEntidad)
                            contenedorReserva.appendChild(bloqueEntidad)


                            bloqueEntidad = document.createElement("div")
                            bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")

                            tituloEntidad = document.createElement("div")
                            tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                            tituloEntidad.innerText = "Tiempo restante de la reserva"
                            bloqueEntidad.appendChild(tituloEntidad)

                            datoEntidad = document.createElement("div")
                            datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                            datoEntidad.innerText = tiempoRestante
                            bloqueEntidad.appendChild(datoEntidad)
                            contenedorReserva.appendChild(bloqueEntidad)





                            apartamentoUI.appendChild(contenedorReserva)


                        }



                        if (calendariosSincronizados.airbnb) {
                            const eventosAirbnb = calendariosSincronizados.airbnb.eventos
                            for (const detallesDelEvento of eventosAirbnb) {

                                const fechaInicio_ISO = detallesDelEvento.fechaInicio
                                const fechaFinal_ISO = detallesDelEvento.fechaFinal
                                const uid = detallesDelEvento.uid
                                const descripcion = detallesDelEvento?.descripcion || null
                                const nombreEvento = detallesDelEvento.nombreEvento

                                const fechaInicioArray = fechaInicio_ISO.split("-")
                                const fechaInicio_Humano = `${fechaInicioArray[2]}/${fechaInicioArray[1]}/${fechaInicioArray[0]}`

                                const fechaFinalArray = fechaFinal_ISO.split("-")
                                const fechaFinal_Humano = `${fechaFinalArray[2]}/${fechaFinalArray[1]}/${fechaFinalArray[0]}`
                                let urlEvento
                                if (descripcion) {
                                    const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                                    const match = descripcion.match(regex);
                                    urlEvento = match?.[1] ?? "No se encontró la URL en el texto proporcionado.";
                                }

                                const contenedorEvento = document.createElement("div")
                                contenedorEvento.classList.add("contenedorEvento")


                                const contenedorTitulo = document.createElement("div")
                                contenedorTitulo.classList.add("contenedorTitulo")

                                const tituloPlataformaOrigen = document.createElement("p")
                                tituloPlataformaOrigen.classList.add("tituloPlataformaOrigen")
                                tituloPlataformaOrigen.innerText = "Evento de Airbnb"
                                contenedorTitulo.appendChild(tituloPlataformaOrigen)

                                const descripcionEvento = document.createElement("p")
                                descripcionEvento.classList.add("descripcionEvento")
                                descripcionEvento.innerText = "Este evento proviene de un calendario sincronizado con Airbnb. Para ver los detalles de este evento pulsa en el boton inferior que le permitira ir directamente a los detalles del evento en la web de Airbnb."
                                contenedorTitulo.appendChild(descripcionEvento)
                                contenedorEvento.appendChild(contenedorTitulo)


                                const contenedorFechas = document.createElement("div")
                                contenedorFechas.classList.add("contenedorFechas")


                                const contenedorFechaInicio = document.createElement("div")
                                contenedorFechaInicio.classList.add("contenedorFecha_")

                                const tituloFechaInicio = document.createElement("p")
                                tituloFechaInicio.classList.add("tituloFecha")
                                tituloFechaInicio.innerText = "Fecha de inicio"

                                const fechaInicioUI = document.createElement("p")
                                fechaInicioUI.classList.add("fechaDatoUI")
                                fechaInicioUI.innerText = fechaInicio_Humano

                                contenedorFechaInicio.appendChild(tituloFechaInicio)
                                contenedorFechaInicio.appendChild(fechaInicioUI)
                                contenedorFechas.appendChild(contenedorFechaInicio)



                                const contenedorFechaFin = document.createElement("div")
                                contenedorFechaFin.classList.add("contenedorFecha_")

                                const tituloFechaFin = document.createElement("p")
                                tituloFechaFin.classList.add("tituloFecha")
                                tituloFechaFin.innerText = "Fecha fin"

                                const fechaFinUI = document.createElement("p")
                                fechaFinUI.classList.add("fechaDatoUI")
                                fechaFinUI.innerText = fechaFinal_Humano

                                contenedorFechaFin.appendChild(tituloFechaFin)
                                contenedorFechaFin.appendChild(fechaFinUI)
                                contenedorFechas.appendChild(contenedorFechaFin)

                                contenedorEvento.appendChild(contenedorFechas)

                                if (descripcion) {
                                    const botonIrAlEvento = document.createElement("a")
                                    botonIrAlEvento.classList.add("botonIrAlEvento")
                                    botonIrAlEvento.href = urlEvento
                                    botonIrAlEvento.innerText = "Abrir evento. (Se ira a la web de Airbnb)"
                                    contenedorEvento.appendChild(botonIrAlEvento)
                                } else {
                                    const botonIrAlEvento = document.createElement("div")
                                    botonIrAlEvento.classList.add("sinInfo")
                                    botonIrAlEvento.innerText = "Airbnb no proporciona ninguna informacion sobre este evento. Probablamente este evento sea de un calendario que Airbnbn ha sincronizado con otra plataforma. Para ver mas informacion de este evento por favor dirigase a la web de Airbnb por que Airbnbn no proporciona ninguna forma de enlazar este evento."
                                    contenedorEvento.appendChild(botonIrAlEvento)
                                }

                                apartamentoUI.appendChild(contenedorEvento)



                            }

                        }


                        espacioSituacion.appendChild(apartamentoUI)


                    }
                    marcoElastico.appendChild(espacioSituacion)

                }
            } else {
                const transaccion = {
                    zona: "administracion/situacion/detallesSituacionApartamento",
                    apartamentoIDV: directorioUltimo
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "No existe el identificador del apartamento",
                        descripcion: "Estas buscando la situacion de un apartamento que no existe o existe y no tiene una configuracion disponible"
                    }
                    return casaVitini.componentes.mensajeSimple(info)
                }
                if (respuestaServidor?.ok) {
                    const detallesApartamento = respuestaServidor?.ok

                    let apartamentoUI = detallesApartamento.apartamentoUI
                    let apartamentoIDV = detallesApartamento.apartamentoIDV
                    const zonaHoraria = detallesApartamento.zonaHoraria
                    const horaEntradaTZ = detallesApartamento.horaEntradaTZ
                    const horaSalidaTZ = detallesApartamento.horaSalidaTZ
                    let estadoPernoctacion = detallesApartamento.estadoPernoctacion
                    let reservas = detallesApartamento.reservas
                    const calendariosSincronizados = detallesApartamento.calendariosSincronizados


                    const espacioEventosAirbnb = document.createElement("div")
                    espacioEventosAirbnb.classList.add("espacioEventosAirbnb")
                    espacioEventosAirbnb.setAttribute("componente", "espacioEventosAirbnb")

                    if (estadoPernoctacion === "ocupado") {
                        estadoPernoctacion = "Ocupado"
                    }
                    if (estadoPernoctacion === "libre") {
                        estadoPernoctacion = "Libre"
                    }
                    let espacioSituacionDetallesApartamento = document.createElement("div")
                    espacioSituacionDetallesApartamento.classList.add("espacioSituacionDetallesApartamento")
                    espacioSituacionDetallesApartamento.setAttribute("componente", "espacioSituacionDetallesApartamento")

                    let detallesGenerales = document.createElement("div")
                    detallesGenerales.classList.add("situacionDetallesGenerales")

                    let detallesReserva = document.createElement("div")
                    detallesReserva.classList.add("situacionDetallesReserva")

                    let bloqueApartamentoUI = document.createElement("div")
                    bloqueApartamentoUI.classList.add("situacionDetallesbloqueApartamentoUI")

                    let tituloApartamentoUI = document.createElement("div")
                    tituloApartamentoUI.classList.add("situacionDetallesApartmentoTitulo")
                    tituloApartamentoUI.innerText = apartamentoUI
                    bloqueApartamentoUI.appendChild(tituloApartamentoUI)


                    let bloqueEstado = document.createElement("div")
                    bloqueEstado.classList.add("situacionDetalleBloqueSimpleInterno")

                    let titutloEstadoApartamentoUI = document.createElement("div")
                    titutloEstadoApartamentoUI.classList.add("situacionDetalleTituloBloqueSimple")
                    titutloEstadoApartamentoUI.innerText = "Estado"
                    bloqueEstado.appendChild(titutloEstadoApartamentoUI)

                    let estadoApartamentoUI = document.createElement("div")
                    estadoApartamentoUI.classList.add("situacionDetallesEstadoApartamento")
                    estadoApartamentoUI.innerText = "estadoApartamento"
                    bloqueEstado.appendChild(estadoApartamentoUI)
                    // bloqueApartamentoUI.appendChild(bloqueEstado)


                    let estadoPernoctacionUI = document.createElement("div")
                    estadoPernoctacionUI.classList.add("situacionDetallesEstadoPernoctacion")
                    estadoPernoctacionUI.innerText = estadoPernoctacion
                    bloqueApartamentoUI.appendChild(estadoPernoctacionUI)

                    detallesGenerales.appendChild(bloqueApartamentoUI)


                    marcoElastico.appendChild(detallesGenerales)

                    for (const detallesReservas of reservas) {
                        const reservaUID = detallesReservas.reservaUID
                        const fechaEntrada = detallesReservas.fechaEntrada
                        const fechaSalida = detallesReservas.fechaSalida
                        const diaLimite = detallesReservas.diaLimite
                        const tiempoRestante = detallesReservas.tiempoRestante
                        const cantidadDias = detallesReservas.cantidadDias
                        const porcentajeTranscurrido = detallesReservas.porcentajeTranscurrido
                        const habitaciones = detallesReservas.habitaciones


                        const bloqueReservaUI = document.createElement("div")
                        bloqueReservaUI.classList.add("administracion_situracion_detallesApartamento_bloqueReserva")

                        const reservaUI = document.createElement("a")
                        reservaUI.classList.add("administracion_situracion_detallesApartamento_reservaUI")
                        reservaUI.setAttribute("vista", `/administracion/reservas/${reservaUID}`)
                        reservaUI.setAttribute("href", `/administracion/reservas/${reservaUID}`)
                        reservaUI.addEventListener("click", casaVitini.componentes.cambiarVista)
                        reservaUI.innerText = "Reserva " + reservaUID
                        bloqueReservaUI.appendChild(reservaUI)

                        if (diaLimite === "diaDeSalida") {

                            const bloqueEntidad = document.createElement("div")
                            bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")

                            const aviso = document.createElement("div")
                            aviso.classList.add("administracion_situacion_portada_tituloEntidad")
                            aviso.classList.add("negrita")
                            aviso.innerText = "<<< Dia de salida"
                            bloqueEntidad.appendChild(aviso)

                            const tituloEntidad = document.createElement("div")
                            tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                            tituloEntidad.innerText = "Hoy es el dia final de la reserva y los pernoctantes deben de abandonar el alojamiento antes de las " + horaSalidaTZ
                            bloqueEntidad.appendChild(tituloEntidad)

                            const datoEntidad = document.createElement("div")
                            datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                            datoEntidad.innerText = tiempoRestante
                            // bloqueEntidad.appendChild(datoEntidad)
                            bloqueReservaUI.appendChild(bloqueEntidad)
                        }

                        if (diaLimite === "diaDeEntrada") {

                            const bloqueEntidad = document.createElement("div")
                            bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")

                            const aviso = document.createElement("div")
                            aviso.classList.add("administracion_situacion_portada_tituloEntidad")
                            aviso.classList.add("negrita")
                            aviso.innerText = ">>> Dia de entrada"
                            bloqueEntidad.appendChild(aviso)

                            const tituloEntidad = document.createElement("div")
                            tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                            tituloEntidad.innerText = "Hoy es el dia de entrada de la reserva y el alojamiento debe de esta preparado antes de las " + horaEntradaTZ + " para la llega de los nuevos pernoctantes"
                            bloqueEntidad.appendChild(tituloEntidad)

                            const datoEntidad = document.createElement("div")
                            datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                            datoEntidad.innerText = tiempoRestante
                            // bloqueEntidad.appendChild(datoEntidad)
                            bloqueReservaUI.appendChild(bloqueEntidad)
                        }

                        const apartamentoEstadoReserva = document.createElement("div")
                        apartamentoEstadoReserva.classList.add("situacionApartamentoEstadoReserva")

                        const barraProgresso = document.createElement("div")
                        barraProgresso.classList.add("situacionBarraProgressoReserva")
                        barraProgresso.style.width = porcentajeTranscurrido
                        apartamentoEstadoReserva.appendChild(barraProgresso)
                        bloqueReservaUI.appendChild(apartamentoEstadoReserva)

                        const contenedorFechas = document.createElement("div")
                        contenedorFechas.classList.add("administracion_situacion_detallesApartamento_contenedorFechas")

                        const bloqueFechaEntrada = document.createElement("div")
                        bloqueFechaEntrada.classList.add("situacionDetalleBloqueSimpleExterno")

                        const fechaEntradaTitulo = document.createElement("div")
                        fechaEntradaTitulo.classList.add("situacionDetalleTituloBloqueSimple")
                        fechaEntradaTitulo.innerText = "Fecha de entrada"
                        bloqueFechaEntrada.appendChild(fechaEntradaTitulo)

                        const fechaEntradaUI = document.createElement("div")
                        fechaEntradaUI.classList.add("situacionDetallesfechaUI")
                        fechaEntradaUI.innerText = fechaEntrada
                        bloqueFechaEntrada.appendChild(fechaEntradaUI)

                        contenedorFechas.appendChild(bloqueFechaEntrada)
                        bloqueReservaUI.appendChild(contenedorFechas)


                        const bloqueFechaSalida = document.createElement("div")
                        bloqueFechaSalida.classList.add("situacionDetalleBloqueSimpleExterno")

                        const fechaSalidaTitulo = document.createElement("div")
                        fechaSalidaTitulo.classList.add("situacionDetalleTituloBloqueSimple")
                        fechaSalidaTitulo.innerText = "Fecha de salida"

                        bloqueFechaSalida.appendChild(fechaSalidaTitulo)

                        const fechaSalidaUI = document.createElement("di")
                        fechaSalidaUI.classList.add("situacionDetallesfechaUI")
                        fechaSalidaUI.innerText = fechaSalida
                        bloqueFechaSalida.appendChild(fechaSalidaUI)

                        contenedorFechas.appendChild(bloqueFechaSalida)
                        bloqueReservaUI.appendChild(contenedorFechas)

                        if (Object.keys(habitaciones).length > 0) {
                            const espacioHabitaciones = document.createElement("div")
                            espacioHabitaciones.classList.add("sitaucionDetallesEspacioHabitaciones")

                            for (const detallesHabitacion of habitaciones) {

                                const habitacionUI = detallesHabitacion.habitacionUI
                                const pernoctantes = detallesHabitacion.pernoctantes

                                const habitacionBloque = document.createElement("div")
                                habitacionBloque.classList.add("administracion_situacion_detallesApartamento_contenedorHabitacion")


                                const tituloHabitacion = document.createElement("p")
                                tituloHabitacion.classList.add("situacionDetallestituloHabitacion")
                                tituloHabitacion.innerText = habitacionUI
                                habitacionBloque.appendChild(tituloHabitacion)

                                if (pernoctantes) {
                                    for (const pernoctante of pernoctantes) {
                                        const nombreCompleto = pernoctante.nombreCompleto
                                        const tipoCliente = pernoctante.tipoPernoctante
                                        const uidCliente = pernoctante.uidCliente
                                        const fechaCheckIn = pernoctante.fechaCheckIn
                                        const fechaCheckOut = pernoctante.fechaCheckOut


                                        let tipoClienteUI
                                        if (tipoCliente === "cliente") {
                                            tipoClienteUI = "Cliente de Casa Vitini"
                                        }
                                        if (tipoCliente === "clientePool") {
                                            tipoClienteUI = "Cliente por validar"
                                        }


                                        const marcoPernoctante = document.createElement("a")
                                        marcoPernoctante.classList.add("administracion_situacion_detallesApartamento_contenedorCliente")
                                        if (tipoCliente === "cliente") {
                                            marcoPernoctante.setAttribute("vista", `/administracion/clientes/${uidCliente}`)
                                            marcoPernoctante.setAttribute("href", `/administracion/clientes/${uidCliente}`)
                                            marcoPernoctante.addEventListener("click", casaVitini.administracion.situacion.resolutorEnlacesCliente)
                                        }
                                        marcoPernoctante.setAttribute("clienteUID", uidCliente)

                                        if (!fechaCheckIn) {
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                                            //tipoPernoctanteUI.classList.add("parpadea")
                                            tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                                            tipoPernoctanteUI.innerText = "Pendiente de checkin"
                                            marcoPernoctante.appendChild(tipoPernoctanteUI)
                                        } else {
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                                            //tipoPernoctanteUI.classList.add("parpadea")
                                            tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                                            tipoPernoctanteUI.innerText = "> " + fechaCheckIn
                                            marcoPernoctante.appendChild(tipoPernoctanteUI)

                                        }
                                        if (fechaCheckOut) {

                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                                            tipoPernoctanteUI.classList.add("letraRoja")
                                            tipoPernoctanteUI.setAttribute("componente", "checkOutInfo")
                                            tipoPernoctanteUI.innerText = "< " + fechaCheckOut
                                            marcoPernoctante.appendChild(tipoPernoctanteUI)

                                        }

                                        if (tipoCliente === "clientePool") {
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloPendienteComprobacion")
                                            tipoPernoctanteUI.classList.add("parpadea")
                                            tipoPernoctanteUI.setAttribute("componente", "pendienteComprobacion")
                                            tipoPernoctanteUI.innerText = "Pendiente de comprobación documental"
                                            marcoPernoctante.appendChild(tipoPernoctanteUI)

                                        }





                                        const nombreCompletoPernoctante = document.createElement("div")
                                        nombreCompletoPernoctante.classList.add("administracion_situacion_detallesApartamento_nombrePernoctante")
                                        nombreCompletoPernoctante.innerText = nombreCompleto
                                        marcoPernoctante.appendChild(nombreCompletoPernoctante)

                                        const tipoClientePernoctante = document.createElement("div")
                                        tipoClientePernoctante.classList.add("administracion_situacion_detallesApartamento_tipoCliente")
                                        tipoClientePernoctante.innerText = tipoClienteUI
                                        marcoPernoctante.appendChild(tipoClientePernoctante)
                                        habitacionBloque.appendChild(marcoPernoctante)


                                    }
                                }


                                espacioHabitaciones.appendChild(habitacionBloque)


                            }
                            bloqueReservaUI.appendChild(espacioHabitaciones)
                        }


                        marcoElastico.appendChild(bloqueReservaUI)

                    }

                    const eventosAirbnb = calendariosSincronizados.airbnb.eventos


                    for (const detallesDelEvento of eventosAirbnb) {

                        const fechaInicio_ISO = detallesDelEvento.fechaInicio
                        const fechaFinal_ISO = detallesDelEvento.fechaFinal
                        const uid = detallesDelEvento.uid
                        const descripcion = detallesDelEvento?.descripcion || null
                        const nombreEvento = detallesDelEvento.nombreEvento

                        const fechaInicioArray = fechaInicio_ISO.split("-")
                        const fechaInicio_Humano = `${fechaInicioArray[2]}/${fechaInicioArray[1]}/${fechaInicioArray[0]}`

                        const fechaFinalArray = fechaFinal_ISO.split("-")
                        const fechaFinal_Humano = `${fechaFinalArray[2]}/${fechaFinalArray[1]}/${fechaFinalArray[0]}`
                        let urlEvento
                        if (descripcion) {
                            const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                            const match = descripcion.match(regex);
                            urlEvento = match?.[1] ?? "No se encontró la URL en el texto proporcionado.";
                        }

                        const contenedorEvento = document.createElement("div")
                        contenedorEvento.classList.add("contenedorEvento")


                        const contenedorTitulo = document.createElement("div")
                        contenedorTitulo.classList.add("contenedorTitulo")

                        const tituloPlataformaOrigen = document.createElement("p")
                        tituloPlataformaOrigen.classList.add("tituloPlataformaOrigen")
                        tituloPlataformaOrigen.innerText = "Evento de Airbnb"
                        contenedorTitulo.appendChild(tituloPlataformaOrigen)

                        const descripcionEvento = document.createElement("p")
                        descripcionEvento.classList.add("descripcionEvento")
                        descripcionEvento.innerText = "Este evento proviene de un calendario sincronizado con Airbnb. Para ver los detalles de este evento pulsa en el boton inferior que le permitira ir directamente a los detalles del evento en la web de Airbnb."
                        contenedorTitulo.appendChild(descripcionEvento)
                        contenedorEvento.appendChild(contenedorTitulo)


                        const contenedorFechas = document.createElement("div")
                        contenedorFechas.classList.add("contenedorFechas")


                        const contenedorFechaInicio = document.createElement("div")
                        contenedorFechaInicio.classList.add("contenedorFecha_")

                        const tituloFechaInicio = document.createElement("p")
                        tituloFechaInicio.classList.add("tituloFecha")
                        tituloFechaInicio.innerText = "Fecha de inicio"

                        const fechaInicioUI = document.createElement("p")
                        fechaInicioUI.classList.add("fechaDatoUI")
                        fechaInicioUI.innerText = fechaInicio_Humano

                        contenedorFechaInicio.appendChild(tituloFechaInicio)
                        contenedorFechaInicio.appendChild(fechaInicioUI)
                        contenedorFechas.appendChild(contenedorFechaInicio)



                        const contenedorFechaFin = document.createElement("div")
                        contenedorFechaFin.classList.add("contenedorFecha_")

                        const tituloFechaFin = document.createElement("p")
                        tituloFechaFin.classList.add("tituloFecha")
                        tituloFechaFin.innerText = "Fecha fin"

                        const fechaFinUI = document.createElement("p")
                        fechaFinUI.classList.add("fechaDatoUI")
                        fechaFinUI.innerText = fechaFinal_Humano

                        contenedorFechaFin.appendChild(tituloFechaFin)
                        contenedorFechaFin.appendChild(fechaFinUI)
                        contenedorFechas.appendChild(contenedorFechaFin)

                        contenedorEvento.appendChild(contenedorFechas)

                        if (descripcion) {
                            const botonIrAlEvento = document.createElement("a")
                            botonIrAlEvento.classList.add("botonIrAlEvento")
                            botonIrAlEvento.href = urlEvento
                            botonIrAlEvento.innerText = "Abrir evento. (Se ira a la web de Airbnb)"
                            contenedorEvento.appendChild(botonIrAlEvento)
                        } else {
                            const botonIrAlEvento = document.createElement("div")
                            botonIrAlEvento.classList.add("sinInfo")
                            botonIrAlEvento.innerText = "Airbnb no proporciona ninguna informacion sobre este evento. Probablamente este evento sea de un calendario que Airbnbn ha sincronizado con otra plataforma. Para ver mas informacion de este evento por favor dirigase a la web de Airbnb por que Airbnbn no proporciona ninguna forma de enlazar este evento."
                            contenedorEvento.appendChild(botonIrAlEvento)
                        }

                        espacioEventosAirbnb.appendChild(contenedorEvento)



                    }
                    marcoElastico.appendChild(espacioEventosAirbnb)

                    /*
                                        for (const [habitacionIDV, detallesHabitacion] of Object.entries(habitaciones)) {
                    
                                            let habitacionUI = detallesHabitacion.habitacionUI
                                            let pernoctantes = detallesHabitacion.pernoctantes
                    
                                            let habitacionBloque = document.createElement("div")
                                            habitacionBloque.classList.add("situacionDetallesHabitacionBloque")
                    
                    
                                            let tituloHabitacion = document.createElement("p")
                                            tituloHabitacion.classList.add("situacionDetallestituloHabitacion")
                                            tituloHabitacion.innerText = habitacionUI
                                            habitacionBloque.appendChild(tituloHabitacion)
                    
                                            if (pernoctantes) {
                                                for (const pernoctante of pernoctantes) {
                                                    let nombreCompleto = pernoctante.nombreCompleto
                                                    let tipoCliente = pernoctante.tipoPernoctante
                                                    let uidCliente = pernoctante.uidCliente
                    
                                                    let marcoPernoctante = document.createElement("div")
                                                    marcoPernoctante.classList.add("situacionDetallesMarcoPernoctante")
                                                    marcoPernoctante.setAttribute("clienteUID", uidCliente)
                                                    habitacionBloque.appendChild(marcoPernoctante)
                    
                    
                                                    let nombreCompletoPernoctante = document.createElement("p")
                                                    nombreCompletoPernoctante.classList.add("situacionDetallesNombreCompletoPernoctante")
                                                    nombreCompletoPernoctante.innerText = nombreCompleto
                                                    habitacionBloque.appendChild(nombreCompletoPernoctante)
                    
                    
                                                    let tipoClientePernoctante = document.createElement("p")
                                                    tipoClientePernoctante.classList.add("situacionDetallesTipoClientePernoctante")
                                                    tipoClientePernoctante.innerText = tipoCliente
                                                    habitacionBloque.appendChild(tipoClientePernoctante)
                    
                                                }
                                            }
                    
                    
                    
                    
                    
                                            espacioHabitaciones.appendChild(habitacionBloque)
                    
                    
                    
                    
                    
                    
                    
                                        }
                                        detallesReserva.appendChild(espacioHabitaciones)*/
                    //  marcoElastico.appendChild(detallesReserva)

                    const calenadariosSincronizados = detallesApartamento.calendariosSincronizados
                    const eventosAirbnbn = calenadariosSincronizados.airbnb.eventos
                    for (const detallesDelEvento of eventosAirbnbn) {
                        /*
                            {
                        "fechaFinal": "2024-05-05",
                        "fechaInicio": "2024-03-31",
                        "uid": "1418fb94e984-26727370fa33ec474081b9bde4f2d585@airbnb.com",
                        "descripcion": "Reservation URL: https://www.airbnb.com/hosting/reservations/details/HMRS2MPY3K\nPhone Number (Last 4 Digits): 4118",
                        "nombreEvento": "Reserved"
                            }
                        */

                        const fechaInicio_ISO = detallesDelEvento.fechaInicio
                        const fechaFinal_ISO = detallesDelEvento.fechaFinal
                        const uid = detallesDelEvento.uid
                        const descripcion = detallesDelEvento?.descripcion || null
                        const nombreEvento = detallesDelEvento.nombreEvento

                        const fechaInicioArray = fechaInicio_ISO.split("-")
                        const fechaInicio_Humano = `${fechaInicioArray[2]}/${fechaInicioArray[1]}/${fechaInicioArray[0]}`

                        const fechaFinalArray = fechaFinal_ISO.split("-")
                        const fechaFinal_Humano = `${fechaFinalArray[2]}/${fechaFinalArray[1]}/${fechaFinalArray[0]}`

                        if (descripcion) {
                            const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                            const match = descripcion.match(regex);

                            const urlEvento = match?.[1] ?? "No se encontró la URL en el texto proporcionado.";
                        }







                    }



                }
            }
        },
        resolutorEnlacesCliente: (cliente) => {
            cliente.preventDefault()
            cliente.stopPropagation()

            const clienteUID = cliente.target.closest("[clienteUID]").getAttribute("clienteUID")
            const vista = "/administracion/clientes/" + clienteUID
            const navegacion = {
                "vista": vista,
                "tipoOrigen": "menuNavegador"

            }
            return casaVitini.componentes.controladorVista(navegacion)

        }
    },
    configuracion: {
        arranque: async () => {
            document.body.removeAttribute("style")
            const marcoElastico = document.querySelector("[componente=marcoElastico]")
            marcoElastico.style.gap = "4px"
            const botones = [...document.querySelectorAll("[componente=botonConfiguracion]")]
            botones.map((boton) => {
                boton.addEventListener("click", (boton) => {
                    boton.preventDefault()
                    const vista = boton.target.closest("[vista]").getAttribute("vista")
                    const navegacion = {
                        vista: vista,
                        tipoOrigen: "menuNavegador"
                    }
                    casaVitini.componentes.controladorVista(navegacion)
                })
            })

        },
        zonaHoraria: {
            arranque: async () => {
                document.body.removeAttribute("style")
                const marcoElastico = document.querySelector("[componente=marcoElastico]")
                marcoElastico.style.gap = "4px"
                const transaccion = {
                    zona: "administracion/configuracion/obtenerConfiguracion"
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const configuracionGlobal = respuestaServidor?.ok

                    const zonaHoraria = configuracionGlobal.zonaHoraria

                    const listaZonasHorarias = respuestaServidor.listaZonasHorarias

                    const horaEntradaTZ = configuracionGlobal.horaEntradaTZ
                    const horaSalidaTZ = configuracionGlobal.horaSalidaTZ

                    const contenedorConfiguracionGlobal = document.createElement("div")
                    contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")

                    const informacion = document.createElement("div")
                    informacion.classList.add("administracion_configuracion_informacion")
                    informacion.innerText = "Determine la configuración global del sistema. Esta configuración se aplica a todo el sistema y a todos los usuarios. "
                    contenedorConfiguracionGlobal.appendChild(informacion)

                    // Zona horaria Global

                    let bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")

                    let tituloConfiguracion = document.createElement("div")
                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.innerText = "Zona horaria de Casa Vitini"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)

                    let descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.innerText = "La zona horaria local se aplica sobre el reloj UTC para que pueda ver la hora y las fechas en la zona horaria. Por ejemplo, en el apartado de Situación, en la renderización de los calendarios y etc. La zona horaria debe de configurarse con la misma zona horaria de las instalaciones físicas de pernoctacion de Casa Vitini. Entonces el sistema de Casa Vitini puede implantarse en cualquier ordenador sin importar su reloj en zona horaria local. Es fundamental que la zona horaria del sistema sea la misma que la zona horaria de las instalaciones físicas de pernoctación de Casa Vitini. El motivo de esto es que los pernoctante puedan obtener calendarios locales a la zona horaria de Casa Vitini y realizar las reservas en zona horaria local de Casa Vitini."
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)

                    const listaZonaHoraria = document.createElement("select")
                    listaZonaHoraria.classList.add("administracion_configuracion_valorConfiguracionInput")
                    listaZonaHoraria.setAttribute("campo", "zonaHoraria")
                    listaZonaHoraria.setAttribute("valorInicial", zonaHoraria)
                    listaZonaHoraria.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)

                    for (const zonaHorariaIterada of listaZonasHorarias) {

                        const zonaHorariaUI = zonaHorariaIterada.replaceAll("/", " / ").replaceAll("_", " ")
                        const zonaHorariaOpcion = document.createElement("option");
                        zonaHorariaOpcion.text = zonaHorariaUI;
                        zonaHorariaOpcion.value = zonaHorariaIterada;
                        if (zonaHoraria === zonaHorariaIterada) {
                            zonaHorariaOpcion.selected = true;
                        }
                        listaZonaHoraria.add(zonaHorariaOpcion);

                    }
                    bloqueConfiguracion.appendChild(listaZonaHoraria)
                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)

                    marcoElastico.appendChild(contenedorConfiguracionGlobal)

                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.setAttribute("contenedor", "botones")
                    contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")

                    const botonGuardarCambios = document.createElement("div")
                    botonGuardarCambios.classList.add("administracion_configuracion_boton")
                    botonGuardarCambios.innerText = "Guardar cambios"
                    botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.guardarCambios)
                    contenedorBotones.appendChild(botonGuardarCambios)

                    const botonCancelarCambios = document.createElement("div")
                    botonCancelarCambios.classList.add("administracion_configuracion_boton")
                    botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.cancelarCambios)
                    botonCancelarCambios.innerText = "Cancelar cambios"
                    contenedorBotones.appendChild(botonCancelarCambios)

                    marcoElastico.appendChild(contenedorBotones)
                }
            },
            cancelarCambios: () => {
                const campos = [...document.querySelectorAll("[campo]")]
                campos.map((campo) => {

                    campo.value = campo.getAttribute("valorInicial")
                })
                const contenedorBotones = document.querySelector("[contenedor=botones]")
                contenedorBotones.removeAttribute("style")
            },
            controlCampo: () => {

                const campos = [...document.querySelectorAll("[campo]")]
                let estadoFinal = null
                campos.map((campo) => {
                    if (campo.value !== campo.getAttribute("valorInicial")) {
                        estadoFinal = "visible"
                    }

                })
                const contenedorBotones = document.querySelector("[contenedor=botones]")

                if (estadoFinal === "visible") {
                    contenedorBotones.style.display = "flex"
                } else {
                    contenedorBotones.removeAttribute("style")
                }







            },
            guardarCambios: async () => {
                const campos = [...document.querySelectorAll("[campo]")]
                const transacccion = {
                    zona: "administracion/configuracion/guardarConfiguracion"
                }

                campos.map((campo) => {

                    const nombreCampo = campo.getAttribute("campo")
                    const valorCampo = campo.value
                    transacccion[nombreCampo] = valorCampo
                })

                const respuestaServidor = await casaVitini.componentes.servidor(transacccion)


                if (respuestaServidor?.error) {
                    casaVitini.administracion.configuracion.cancelarCambios()
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                    campos.map((campo) => {
                        campo.setAttribute("valorInicial", campo.value)
                    })

                }

            }
        },
        horaDeEntradaSalida: {
            arranque: async () => {
                document.body.removeAttribute("style")
                const marcoElastico = document.querySelector("[componente=marcoElastico]")
                marcoElastico.style.gap = "4px"
                const transaccion = {
                    zona: "administracion/configuracion/obtenerConfiguracion"
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const configuracionGlobal = respuestaServidor?.ok

                    const zonaHoraria = configuracionGlobal.zonaHoraria

                    const listaZonasHorarias = respuestaServidor.listaZonasHorarias

                    const horaEntradaTZ = configuracionGlobal.horaEntradaTZ
                    const horaSalidaTZ = configuracionGlobal.horaSalidaTZ

                    const contenedorConfiguracionGlobal = document.createElement("div")
                    contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")

                    const informacion = document.createElement("div")
                    informacion.classList.add("administracion_configuracion_informacion")
                    informacion.innerText = "Determine la configuración global del sistema. Esta configuración se aplica a todo el sistema y a todos los usuarios. "
                    contenedorConfiguracionGlobal.appendChild(informacion)

                    // Zona horaria Global

                    let bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")

                    let tituloConfiguracion = document.createElement("div")
                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.innerText = "Zona horaria de Casa Vitini"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)

                    let descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.innerText = "La zona horaria local se aplica sobre el reloj UTC para que pueda ver la hora y las fechas en la zona horaria. Por ejemplo, en el apartado de Situación, en la renderización de los calendarios y etc. La zona horaria debe de configurarse con la misma zona horaria de las instalaciones físicas de pernoctacion de Casa Vitini. Entonces el sistema de Casa Vitini puede implantarse en cualquier ordenador sin importar su reloj en zona horaria local. Es fundamental que la zona horaria del sistema sea la misma que la zona horaria de las instalaciones físicas de pernoctación de Casa Vitini. El motivo de esto es que los pernoctante puedan obtener calendarios locales a la zona horaria de Casa Vitini y realizar las reservas en zona horaria local de Casa Vitini."
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)

                    const listaZonaHoraria = document.createElement("select")
                    listaZonaHoraria.classList.add("administracion_configuracion_valorConfiguracionInput")
                    listaZonaHoraria.setAttribute("campo", "zonaHoraria")
                    listaZonaHoraria.setAttribute("valorInicial", zonaHoraria)
                    listaZonaHoraria.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)

                    for (const zonaHorariaIterada of listaZonasHorarias) {

                        const zonaHorariaUI = zonaHorariaIterada.replaceAll("/", " / ").replaceAll("_", " ")
                        const zonaHorariaOpcion = document.createElement("option");
                        zonaHorariaOpcion.text = zonaHorariaUI;
                        zonaHorariaOpcion.value = zonaHorariaIterada;
                        if (zonaHoraria === zonaHorariaIterada) {
                            zonaHorariaOpcion.selected = true;
                        }
                        listaZonaHoraria.add(zonaHorariaOpcion);

                    }
                    bloqueConfiguracion.appendChild(listaZonaHoraria)
                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                    // Hora de entrada TZ
                    bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")

                    tituloConfiguracion = document.createElement("div")
                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.innerText = "Hora de entrada"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)

                    descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.innerText = "Hora de entrada en zona horaria. Esta es la hora de entrada en la zona horaria seleccionada. Sirve para determinar la hora de entrada de las reservas en el día de entrada"
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)

                    let valorConfiguracion = document.createElement("input")
                    valorConfiguracion.setAttribute("campo", "horaEntradaTZ")
                    valorConfiguracion.setAttribute("valorInicial", horaEntradaTZ)
                    valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                    valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                    valorConfiguracion.value = horaEntradaTZ
                    valorConfiguracion.placeholder = "Selecciona una hora de entrada, por ejemplo 17:00"
                    bloqueConfiguracion.appendChild(valorConfiguracion)

                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)

                    // Hora de salida TZ
                    bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")

                    tituloConfiguracion = document.createElement("div")

                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.innerText = "Hora de salida"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)

                    descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.innerText = "Hora de salida en zona horaria. Esta es la hora de salida en la zona horaria seleccionada. Sirve para determinar la hora de salida de las reservas en el día de salida "
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)

                    valorConfiguracion = document.createElement("input")
                    valorConfiguracion.setAttribute("campo", "horaSalidaTZ")
                    valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                    valorConfiguracion.setAttribute("valorInicial", horaSalidaTZ)
                    valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                    valorConfiguracion.value = horaSalidaTZ
                    valorConfiguracion.placeholder = "Selecciona una hora de salida, por ejemplo 19:00 "
                    bloqueConfiguracion.appendChild(valorConfiguracion)

                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                    marcoElastico.appendChild(contenedorConfiguracionGlobal)

                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.setAttribute("contenedor", "botones")
                    contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")

                    const botonGuardarCambios = document.createElement("div")
                    botonGuardarCambios.classList.add("administracion_configuracion_boton")
                    botonGuardarCambios.innerText = "Guardar cambios"
                    botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.guardarCambios)
                    contenedorBotones.appendChild(botonGuardarCambios)

                    const botonCancelarCambios = document.createElement("div")
                    botonCancelarCambios.classList.add("administracion_configuracion_boton")
                    botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.cancelarCambios)
                    botonCancelarCambios.innerText = "Cancelar cambios"
                    contenedorBotones.appendChild(botonCancelarCambios)

                    marcoElastico.appendChild(contenedorBotones)
                }
            },
            cancelarCambios: () => {
                const campos = [...document.querySelectorAll("[campo]")]
                campos.map((campo) => {

                    campo.value = campo.getAttribute("valorInicial")
                })
                const contenedorBotones = document.querySelector("[contenedor=botones]")
                contenedorBotones.removeAttribute("style")
            },
            controlCampo: () => {

                const campos = [...document.querySelectorAll("[campo]")]
                let estadoFinal = null
                campos.map((campo) => {
                    if (campo.value !== campo.getAttribute("valorInicial")) {
                        estadoFinal = "visible"
                    }

                })
                const contenedorBotones = document.querySelector("[contenedor=botones]")

                if (estadoFinal === "visible") {
                    contenedorBotones.style.display = "flex"
                } else {
                    contenedorBotones.removeAttribute("style")
                }







            },
            guardarCambios: async () => {
                const campos = [...document.querySelectorAll("[campo]")]
                const transacccion = {
                    zona: "administracion/configuracion/guardarConfiguracion"
                }

                campos.map((campo) => {

                    const nombreCampo = campo.getAttribute("campo")
                    const valorCampo = campo.value
                    transacccion[nombreCampo] = valorCampo
                })

                const respuestaServidor = await casaVitini.componentes.servidor(transacccion)


                if (respuestaServidor?.error) {
                    casaVitini.administracion.configuracion.cancelarCambios()
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                    campos.map((campo) => {
                        campo.setAttribute("valorInicial", campo.value)
                    })

                }

            }
        },
        arranqueAntiguo: async () => {
            document.body.removeAttribute("style")
            const marcoElastico = document.querySelector("[componente=marcoElastico]")
            marcoElastico.style.gap = "4px"
            const transaccion = {
                zona: "administracion/configuracion/obtenerConfiguracion"
            }

            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                casaVitini.administracion.reservas.detallesReserva.transactor.ocultarMenusVolatiles()
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {
                const configuracionGlobal = respuestaServidor?.ok

                const zonaHoraria = configuracionGlobal.zonaHoraria

                const listaZonasHorarias = respuestaServidor.listaZonasHorarias

                const horaEntradaTZ = configuracionGlobal.horaEntradaTZ
                const horaSalidaTZ = configuracionGlobal.horaSalidaTZ

                const contenedorConfiguracionGlobal = document.createElement("div")
                contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")

                const informacion = document.createElement("div")
                informacion.classList.add("administracion_configuracion_informacion")
                informacion.innerText = "Determine la configuración global del sistema. Esta configuración se aplica a todo el sistema y a todos los usuarios. "
                contenedorConfiguracionGlobal.appendChild(informacion)

                // Zona horaria Global

                let bloqueConfiguracion = document.createElement("div")
                bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")

                let tituloConfiguracion = document.createElement("div")
                tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                tituloConfiguracion.innerText = "Zona horaria de Casa Vitini"
                bloqueConfiguracion.appendChild(tituloConfiguracion)

                let descripcionConfiguracion = document.createElement("div")
                descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                descripcionConfiguracion.innerText = "La zona horaria local se aplica sobre el reloj UTC para que pueda ver la hora y las fechas en la zona horaria. Por ejemplo, en el apartado de Situación, en la renderización de los calendarios y etc. La zona horaria debe de configurarse con la misma zona horaria de las instalaciones físicas de pernoctacion de Casa Vitini. Entonces el sistema de Casa Vitini puede implantarse en cualquier ordenador sin importar su reloj en zona horaria local. Es fundamental que la zona horaria del sistema sea la misma que la zona horaria de las instalaciones físicas de pernoctación de Casa Vitini. El motivo de esto es que los pernoctante puedan obtener calendarios locales a la zona horaria de Casa Vitini y realizar las reservas en zona horaria local de Casa Vitini."
                bloqueConfiguracion.appendChild(descripcionConfiguracion)

                const listaZonaHoraria = document.createElement("select")
                listaZonaHoraria.classList.add("administracion_configuracion_valorConfiguracionInput")
                listaZonaHoraria.setAttribute("campo", "zonaHoraria")
                listaZonaHoraria.setAttribute("valorInicial", zonaHoraria)
                listaZonaHoraria.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)

                for (const zonaHorariaIterada of listaZonasHorarias) {

                    const zonaHorariaUI = zonaHorariaIterada.replaceAll("/", " / ").replaceAll("_", " ")
                    const zonaHorariaOpcion = document.createElement("option");
                    zonaHorariaOpcion.text = zonaHorariaUI;
                    zonaHorariaOpcion.value = zonaHorariaIterada;
                    if (zonaHoraria === zonaHorariaIterada) {
                        zonaHorariaOpcion.selected = true;
                    }
                    listaZonaHoraria.add(zonaHorariaOpcion);

                }
                bloqueConfiguracion.appendChild(listaZonaHoraria)
                contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                // Hora de entrada TZ
                bloqueConfiguracion = document.createElement("div")
                bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")

                tituloConfiguracion = document.createElement("div")
                tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                tituloConfiguracion.innerText = "Hora de entrada"
                bloqueConfiguracion.appendChild(tituloConfiguracion)

                descripcionConfiguracion = document.createElement("div")
                descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                descripcionConfiguracion.innerText = "Hora de entrada en zona horaria. Esta es la hora de entrada en la zona horaria seleccionada. Sirve para determinar la hora de entrada de las reservas en el día de entrada"
                bloqueConfiguracion.appendChild(descripcionConfiguracion)

                let valorConfiguracion = document.createElement("input")
                valorConfiguracion.setAttribute("campo", "horaEntradaTZ")
                valorConfiguracion.setAttribute("valorInicial", horaEntradaTZ)
                valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                valorConfiguracion.value = horaEntradaTZ
                valorConfiguracion.placeholder = "Selecciona una hora de entrada, por ejemplo 17:00"
                bloqueConfiguracion.appendChild(valorConfiguracion)

                contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)

                // Hora de salida TZ
                bloqueConfiguracion = document.createElement("div")
                bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")

                tituloConfiguracion = document.createElement("div")

                tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                tituloConfiguracion.innerText = "Hora de salida"
                bloqueConfiguracion.appendChild(tituloConfiguracion)

                descripcionConfiguracion = document.createElement("div")
                descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                descripcionConfiguracion.innerText = "Hora de salida en zona horaria. Esta es la hora de salida en la zona horaria seleccionada. Sirve para determinar la hora de salida de las reservas en el día de salida "
                bloqueConfiguracion.appendChild(descripcionConfiguracion)

                valorConfiguracion = document.createElement("input")
                valorConfiguracion.setAttribute("campo", "horaSalidaTZ")
                valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                valorConfiguracion.setAttribute("valorInicial", horaSalidaTZ)
                valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                valorConfiguracion.value = horaSalidaTZ
                valorConfiguracion.placeholder = "Selecciona una hora de salida, por ejemplo 19:00 "
                bloqueConfiguracion.appendChild(valorConfiguracion)

                contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                marcoElastico.appendChild(contenedorConfiguracionGlobal)

                const contenedorBotones = document.createElement("div")
                contenedorBotones.setAttribute("contenedor", "botones")
                contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")

                const botonGuardarCambios = document.createElement("div")
                botonGuardarCambios.classList.add("administracion_configuracion_boton")
                botonGuardarCambios.innerText = "Guardar cambios"
                botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.guardarCambios)
                contenedorBotones.appendChild(botonGuardarCambios)

                const botonCancelarCambios = document.createElement("div")
                botonCancelarCambios.classList.add("administracion_configuracion_boton")
                botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.cancelarCambios)
                botonCancelarCambios.innerText = "Cancelar cambios"
                contenedorBotones.appendChild(botonCancelarCambios)

                marcoElastico.appendChild(contenedorBotones)
            }
        },
        cancelarCambios: () => {
            const campos = [...document.querySelectorAll("[campo]")]
            campos.map((campo) => {

                campo.value = campo.getAttribute("valorInicial")
            })
            const contenedorBotones = document.querySelector("[contenedor=botones]")
            contenedorBotones.removeAttribute("style")
        },
        controlCampo: () => {

            const campos = [...document.querySelectorAll("[campo]")]
            let estadoFinal = null
            campos.map((campo) => {
                if (campo.value !== campo.getAttribute("valorInicial")) {
                    estadoFinal = "visible"
                }

            })
            const contenedorBotones = document.querySelector("[contenedor=botones]")

            if (estadoFinal === "visible") {
                contenedorBotones.style.display = "flex"
            } else {
                contenedorBotones.removeAttribute("style")
            }







        },
        guardarCambios: async () => {
            const campos = [...document.querySelectorAll("[campo]")]
            const transacccion = {
                zona: "administracion/configuracion/guardarConfiguracion"
            }

            campos.map((campo) => {

                const nombreCampo = campo.getAttribute("campo")
                const valorCampo = campo.value
                transacccion[nombreCampo] = valorCampo
            })

            const respuestaServidor = await casaVitini.componentes.servidor(transacccion)


            if (respuestaServidor?.error) {
                casaVitini.administracion.configuracion.cancelarCambios()
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {
                const contenedorBotones = document.querySelector("[contenedor=botones]")
                contenedorBotones.removeAttribute("style")
                campos.map((campo) => {
                    campo.setAttribute("valorInicial", campo.value)
                })

            }

        },
        calendariosSincronizados: {
            arranque: async () => {
                document.body.removeAttribute("style")
                const marcoElastico = document.querySelector("[componente=marcoElastico]")
                marcoElastico.style.gap = "4px"
                const granuladoURL = casaVitini.componentes.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

                if (comandoInicial === "calendarios_sincronizados" && !granuladoURL.parametros.calendario) {
                    //await new Promise(resolve => setTimeout(resolve, 2000));



                    const divContenedorAirBnb = document.createElement('div');
                    divContenedorAirBnb.classList.add('contenedorAirBnb');

                    const divBarraHerramientas = document.createElement('div');
                    divBarraHerramientas.classList.add('barraHerramientas');

                    const pTituloContenedor = document.createElement('p');
                    pTituloContenedor.classList.add('tituloContenedor');
                    pTituloContenedor.textContent = 'Calendarios sincronizados con Airbnb';

                    const aBotonMas = document.createElement('a');
                    aBotonMas.classList.add('botonMas');
                    aBotonMas.setAttribute('vista', '/administracion/configuracion/calendarios_sincronizados/crear_calendario');
                    aBotonMas.setAttribute('href', '/administracion/configuracion/calendarios_sincronizados/crear_calendario');
                    aBotonMas.setAttribute('componente', 'botonGlobal');
                    aBotonMas.addEventListener("click", (boton) => {
                        boton.preventDefault()
                        const vista = boton.target.closest("[vista]").getAttribute("vista")
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.componentes.controladorVista(navegacion)
                    })
                    aBotonMas.textContent = 'Añadir calendario';

                    const divContenedorCalendarios = document.createElement('div');
                    divContenedorCalendarios.classList.add('contenedorCalendarios');
                    divContenedorCalendarios.setAttribute('componente', 'contendorCalendariosAirbnb');

                    const pTituloInfo = document.createElement('p');
                    pTituloInfo.classList.add('tituloInfo');
                    pTituloInfo.textContent = 'Esperando información...';

                    // Construir la estructura del DOM
                    divBarraHerramientas.appendChild(pTituloContenedor);
                    divBarraHerramientas.appendChild(aBotonMas);

                    divContenedorAirBnb.appendChild(divBarraHerramientas);
                    divContenedorAirBnb.appendChild(divContenedorCalendarios);
                    divContenedorCalendarios.appendChild(pTituloInfo);

                    const selectorEspacioCalendarios = document.querySelector("[componente=calendariosSincronizados]")
                    selectorEspacioCalendarios.appendChild(divContenedorAirBnb);

                    const transaccion = {
                        zona: "/administracion/configuracion/calendariosSincronizados/obtenerCalendarios",
                        plataformaCalendarios: "airbnb"
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {

                        const calendariosEncontrados = respuestaServidor.ok
                        const selectorContenedor = document.querySelector("[componente=contendorCalendariosAirbnb]")
                        selectorContenedor.innerHTML = null
                        if (calendariosEncontrados.length === 0) {
                            const infoNoCalendarios = document.createElement("p")
                            infoNoCalendarios.classList.add("tituloInfo")
                            infoNoCalendarios.innerText = "No hay ningun calendario sincronizado"
                            selectorContenedor.appendChild(infoNoCalendarios)
                        } else {
                            for (const detallesDelCalendario of calendariosEncontrados) {
                                const uid = detallesDelCalendario.uid
                                const url = detallesDelCalendario.url
                                const nombre = detallesDelCalendario.nombre
                                const apartamentoIDV = detallesDelCalendario.apartamentoIDV
                                const apartamentoUI = detallesDelCalendario.apartamentoUI
                                const plataformaOrigen = detallesDelCalendario.plataformaOrigen
                                const dataIcal = detallesDelCalendario.dataIcal

                                const contenedorCalendarioIndiviudal = document.createElement("div")
                                contenedorCalendarioIndiviudal.classList.add("contenedorCalendarioIndividual")
                                contenedorCalendarioIndiviudal.setAttribute("calendarioUID", uid)


                                const datosCalendario = document.createElement("div")
                                datosCalendario.classList.add("contenedorDatosCalendario")

                                const nombreCalendario = document.createElement("div")
                                nombreCalendario.classList.add("nombreCalendario")
                                nombreCalendario.innerText = nombre
                                datosCalendario.appendChild(nombreCalendario)

                                titulo = document.createElement("p")
                                titulo.classList.add("tituloDatoCalendario")
                                titulo.innerText = "Apartamento sincronizado"
                                datosCalendario.appendChild(titulo)

                                const apartamentoEnlazado = document.createElement("div")
                                apartamentoEnlazado.classList.add("apartamentoEnlazado")
                                apartamentoEnlazado.innerText = apartamentoUI + ` (${apartamentoIDV})`
                                datosCalendario.appendChild(apartamentoEnlazado)

                                titulo = document.createElement("p")
                                titulo.classList.add("tituloDatoCalendario")
                                titulo.innerText = "URL del calendario"
                                datosCalendario.appendChild(titulo)

                                const urlCalendario = document.createElement("div")
                                urlCalendario.classList.add("urlCalendario")
                                urlCalendario.innerText = url
                                datosCalendario.appendChild(urlCalendario)

                                contenedorCalendarioIndiviudal.appendChild(datosCalendario)


                                const contenedorBotonesCalendario = document.createElement("div")
                                contenedorBotonesCalendario.classList.add("contenedorBotonesCalendario")

                                const botonEliminar = document.createElement("div")
                                botonEliminar.classList.add("botonCalendario")
                                botonEliminar.innerText = "Eliminar calendario"
                                botonEliminar.addEventListener("click", () => {
                                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                                    const contenedorElimianr = document.createElement("div")
                                    contenedorElimianr.classList.add("contenedorEliminar")

                                    const titulo = document.createElement("div")
                                    titulo.classList.add("tituloInmersivo")
                                    titulo.innerText = `Eliminar el calendario sincronizado de Airbnb`
                                    contenedorElimianr.appendChild(titulo)

                                    const mensaje = document.createElement("div")
                                    mensaje.classList.add("mensaje")
                                    mensaje.innerText = `¿Estas de acuerdo en eliminar el calendario con nombre ${nombre} enlazado al ${apartamentoUI}?`
                                    contenedorElimianr.appendChild(mensaje)

                                    const botonEliminar = document.createElement("div")
                                    botonEliminar.classList.add("boton")
                                    botonEliminar.innerText = "Eliminar calendario definitivamente"
                                    botonEliminar.addEventListener("click", async () => {
                                        casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                        const metadatosPantallaCarga = {
                                            mensaje: "Actualizando calendario...",
                                            instanciaUID: instanciaUID,
                                        }
                                        document.body.style.overflow = 'hidden';
                                        casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                        const transaccion = {
                                            zona: "administracion/configuracion/calendariosSincronizados/airbnb/eliminarCalendario",
                                            calendarioUID: uid
                                        }
                                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                                        document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`).forEach((pantalla) => {
                                            document.body.style.removeProperty("overflow")
                                            pantalla.remove()
                                        })
                                        const selectorCalendariosSincronizados = document.querySelector(`[componente=calendariosSincronizados]`)
                                        if (respuestaServidor?.error) {
                                            if (selectorCalendariosSincronizados) {
                                                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor.error)
                                            }
                                        }
                                        if (respuestaServidor?.ok) {
                                            if (selectorCalendariosSincronizados) {
                                                selectorCalendariosSincronizados.querySelector(`[calendarioUID="${uid}"]`).remove()
                                            }
                                        }

                                    })
                                    contenedorElimianr.appendChild(botonEliminar)

                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("boton")
                                    botonCancelar.innerText = "Cancelar y volver a la lista de calendarios"
                                    botonCancelar.addEventListener("click", () => {
                                        return casaVitini.componentes.limpiarAdvertenciasInmersivas()
                                    })
                                    contenedorElimianr.appendChild(botonCancelar)

                                    const pantallaInmersiva = casaVitini.componentes.ui.pantallaInmersivaPersonalizada()
                                    pantallaInmersiva.querySelector("[contenedor=contenidoAdvertenciaInmersiva]").appendChild(contenedorElimianr)
                                    document.body.appendChild(pantallaInmersiva)

                                })
                                contenedorBotonesCalendario.appendChild(botonEliminar)

                                const botonModificar = document.createElement("a")
                                botonModificar.classList.add("botonCalendario")
                                botonModificar.innerText = "Modificar calendario"
                                botonModificar.href = `/administracion/configuracion/calendarios_sincronizados/calendario:${uid}`
                                botonModificar.addEventListener("click", (boton) => {
                                    boton.preventDefault()
                                    const vista = `/administracion/configuracion/calendarios_sincronizados/calendario:${uid}`
                                    const navegacion = {
                                        vista: vista,
                                        tipoOrigen: "menuNavegador"
                                    }
                                    casaVitini.componentes.controladorVista(navegacion)
                                })
                                contenedorBotonesCalendario.appendChild(botonModificar)

                                contenedorCalendarioIndiviudal.appendChild(contenedorBotonesCalendario)
                                selectorContenedor.appendChild(contenedorCalendarioIndiviudal)

                            }
                        }
                    }

                } else if (granuladoURL.parametros.calendario) {

                    const calenadrioUID = granuladoURL.parametros.calendario
                    // descargamos aqui el archivo, verificamos la plataforma y en base a ello damos la plantilla correspondiente
                    const transaccion = {
                        zona: "/administracion/configuracion/calendariosSincronizados/detallesDelCalendario",
                        calendarioUID: calenadrioUID
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        const selectorEspacioCalendarios = document.querySelector("[componente=calendariosSincronizados]")
                        const marcoError = document.createElement("div")
                        marcoError.classList.add("marcoError")

                        const errorInfo = document.createElement("div")
                        errorInfo.classList.add("errorInfoCalendarios")
                        errorInfo.innerText = "No existe ningún calendario con este identificador, por favor revisa el identificador."
                        marcoError.appendChild(errorInfo)
                        selectorEspacioCalendarios.appendChild(marcoError)
                    }

                    if (respuestaServidor?.ok) {
                        const detallesDelCalendario = respuestaServidor.ok
                        const plataformaOrigen = detallesDelCalendario.plataformaOrigen
                        if (plataformaOrigen === "airbnb") {
                            return casaVitini.administracion.configuracion.calendariosSincronizados.airbnb.editarCalendarioUI(detallesDelCalendario)
                        }
                    }
                }

            },
            airbnb: {
                crearCalendario: {
                    arranque: async () => {
                        const instanciaUID = casaVitini.componentes.codigoFechaInstancia()
                        const selectorEspacioFormulario = document.querySelector("[componente=espacioFormulario_Airbnb]")
                        selectorEspacioFormulario.innerHTML = null
                        const formularioUI = await casaVitini.administracion.configuracion.calendariosSincronizados.airbnb.formularioCalendario()
                        formularioUI.setAttribute("instanciaUID", instanciaUID)

                        selectorEspacioFormulario.appendChild(formularioUI)

                        const botonCrearCalendario = document.createElement("div")
                        botonCrearCalendario.classList.add("botonCrearCalendario")
                        botonCrearCalendario.innerText = "Crear y sincronizar calenadrio"
                        botonCrearCalendario.addEventListener("click", async () => {

                            const transaccion = {
                                zona: "administracion/configuracion/calendariosSincronizados/airbnb/crearCalendario"
                            }

                            document.querySelectorAll("[campo]").forEach((campo) => {
                                const nombreCampo = campo.getAttribute("campo")
                                const valorCampo = campo.value
                                transaccion[nombreCampo] = valorCampo
                            })

                            const metadatosPantallaCarga = {
                                mensaje: "Creando calendario...",
                                instanciaUID: instanciaUID,
                            }
                            document.body.style.overflow = 'hidden';
                            casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                            document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`).forEach((pantalla) => {
                                document.body.style.removeProperty("overflow")
                                pantalla.remove()
                            })
                            const selectorInstanciaFormularioUI = document.querySelector(`[componente=formularioUI][instanciaUID="${instanciaUID}"]`)
                            if (respuestaServidor?.error) {
                                if (selectorInstanciaFormularioUI) {
                                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor.error)

                                }
                            }
                            if (respuestaServidor?.ok) {
                                if (selectorInstanciaFormularioUI) {
                                    const nuevoUID = respuestaServidor.nuevoUID
                                    const vista = `/administracion/configuracion/calendarios_sincronizados/calendario:${nuevoUID}`
                                    const navegacion = {
                                        vista: vista,
                                        tipoOrigen: "menuNavegador"
                                    }
                                    casaVitini.componentes.controladorVista(navegacion)
                                }
                            }
                        })
                        selectorEspacioFormulario.appendChild(botonCrearCalendario)

                    }


                },
                formularioCalendario: async () => {

                    const formularioUI = document.createElement("div")
                    formularioUI.classList.add("formularioUI")
                    formularioUI.setAttribute("componente", "formularioUI")


                    let definicion = document.createElement("p")
                    definicion.classList.add("plataforma")
                    definicion.innerText = "Plataforma Airbnb"
                    //formularioUI.appendChild(definicion)

                    definicion = document.createElement("p")
                    definicion.classList.add("definicion")
                    definicion.innerText = "Define un nombre para el calendario, utiliza este nombre en el futuro para poder recordar algo descriptivo de este calendario pon el nombre que creas mas recordativo"
                    formularioUI.appendChild(definicion)

                    const nombreCalendario = document.createElement("input")
                    nombreCalendario.classList.add("nombreCalendario")
                    nombreCalendario.setAttribute("campo", "nombre")
                    nombreCalendario.placeholder = "Escribe un nombre para este calendario"
                    formularioUI.appendChild(nombreCalendario)


                    definicion = document.createElement("p")
                    definicion.classList.add("definicion")
                    definicion.innerText = "Selecciona el apartamento con el que vas a enlazar este calendario. Los calendarios de Airbnb se enlazan por apartamento, cada calenadrio de airbnb es un apartamento"

                    formularioUI.appendChild(definicion)

                    const tipoApartamentoUI = document.createElement("select")
                    tipoApartamentoUI.classList.add("listaApartamentos")
                    tipoApartamentoUI.setAttribute("campo", "apartamentoIDV")
                    tipoApartamentoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)

                    const tipoApartamentoInicio = document.createElement("option");
                    tipoApartamentoInicio.value = "";
                    tipoApartamentoInicio.selected = true;
                    tipoApartamentoInicio.disabled = true;
                    tipoApartamentoInicio.text = "Seleccionar el apartamento a enlazar";
                    tipoApartamentoUI.add(tipoApartamentoInicio);

                    const apartamentosArray = await casaVitini.administracion.componentes.obtenerApartamentos()

                    if (apartamentosArray.length === 0) {
                        const opcion = document.createElement("option");
                        opcion.value = "";
                        opcion.disabled = true;
                        opcion.text = "No hay ningun apartamento disponible";
                        tipoApartamentoUI.add(opcion);
                    }

                    if (apartamentosArray.length > 0) {

                        apartamentosArray.map((detallesApartamento) => {
                            const apartamentoIDV = detallesApartamento.apartamentoIDV
                            const aparatmentoUI = detallesApartamento.apartamentoUI
                            const opcion = document.createElement("option");
                            opcion.value = apartamentoIDV;
                            opcion.text = aparatmentoUI;
                            tipoApartamentoUI.add(opcion);
                        })
                    }

                    formularioUI.appendChild(tipoApartamentoUI)


                    definicion = document.createElement("p")
                    definicion.classList.add("definicion")
                    definicion.innerText = "Copia aquí la url del calendario de Airbnb, la url debe de ser la que comparte Airbnb para sincronizar calendarios en formato iCal, la url debe de estar en https"
                    formularioUI.appendChild(definicion)

                    const urlCalendario = document.createElement("input")
                    urlCalendario.classList.add("nombreCalendario")
                    urlCalendario.setAttribute("campo", "url")
                    urlCalendario.placeholder = "Escribe la url del calendario"
                    formularioUI.appendChild(urlCalendario)

                    return formularioUI


                },
                editarCalendarioUI: async (detallesDelCalendario) => {

                    const uid = detallesDelCalendario.uid
                    const nombre = detallesDelCalendario.nombre
                    const url = detallesDelCalendario.url
                    const apartamentoIDV = detallesDelCalendario.apartamentoIDV
                    const plataformaOrigen = detallesDelCalendario.plataformaOrigen
                    const apartamentoUI = detallesDelCalendario.apartamentoUI
                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                    const plataformaOrigenUI = plataformaOrigen.charAt(0).toUpperCase() + plataformaOrigen.slice(1);
                    const selectorTitulo = document.querySelector("[componente=titutoGlobal]")
                    selectorTitulo.innerText = `Detalles del calendario de ${plataformaOrigenUI}`

                    const selectorEspacioCalendarios = document.querySelector("[componente=calendariosSincronizados]")

                    const formularioUI = await casaVitini.administracion.configuracion.calendariosSincronizados.airbnb.formularioCalendario();
                    formularioUI.setAttribute("instanciaUID", instanciaUID)
                    formularioUI.setAttribute("calendarioUID", uid)

                    const nombreInput = formularioUI.querySelector("[campo=nombre]");
                    nombreInput.value = nombre;
                    nombreInput.setAttribute("valorInicial", nombre);

                    const apartamentoIDVSelect = formularioUI.querySelector("[campo=apartamentoIDV]");
                    apartamentoIDVSelect.value = apartamentoIDV;
                    apartamentoIDVSelect.setAttribute("valorInicial", apartamentoIDV);

                    const urlInput = formularioUI.querySelector("[campo=url]");
                    urlInput.value = url;
                    urlInput.setAttribute("valorInicial", url);

                    selectorEspacioCalendarios.appendChild(formularioUI);

                    const marcoBotones = document.createElement("div")
                    marcoBotones.classList.add("marcoBotones")

                    const botonCrearCalendario = document.createElement("div")
                    botonCrearCalendario.classList.add("botonCrearCalendario")
                    botonCrearCalendario.innerText = "Guardar cambios"
                    botonCrearCalendario.addEventListener("click", async () => {

                        const transaccion = {
                            zona: "administracion/configuracion/calendariosSincronizados/airbnb/actualizarCalendario",
                            calendarioUID: uid
                        }

                        document.querySelectorAll("[campo]").forEach((campo) => {
                            const nombreCampo = campo.getAttribute("campo")
                            const valorCampo = campo.value
                            const valorInicial = campo.getAttribute("valorInicial")

                            if (valorCampo.trim() !== valorInicial.trim()) {
                                transaccion[nombreCampo] = valorCampo
                            }
                        })

                        const metadatosPantallaCarga = {
                            mensaje: "Actualizando calendario...",
                            instanciaUID: instanciaUID,
                        }
                        document.body.style.overflow = 'hidden';
                        casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`).forEach((pantalla) => {
                            document.body.style.removeProperty("overflow")
                            pantalla.remove()
                        })
                        const selectorInstanciaFormularioUI = document.querySelector(`[componente=formularioUI][instanciaUID="${instanciaUID}"]`)
                        if (respuestaServidor?.error) {
                            if (selectorInstanciaFormularioUI) {
                                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor.error)
                            }
                        }
                        if (respuestaServidor?.ok) {
                            if (selectorInstanciaFormularioUI) {
                                document.querySelectorAll("[campo]").forEach((campo) => {
                                    const valorCampo = campo.value
                                    const valorInicial = campo.getAttribute("valorInicial")
                                    if (valorCampo !== valorInicial) {
                                        campo.setAttribute("valorInicial", valorCampo)
                                    }
                                })
                            }
                        }
                    })
                    marcoBotones.appendChild(botonCrearCalendario)

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("botonCrearCalendario")
                    botonCancelar.innerText = "Restablecer cambios"
                    botonCancelar.addEventListener("click", async () => {
                        document.querySelectorAll("[campo]").forEach((campo) => {
                            const valorInicial = campo.getAttribute("valorInicial")
                            campo.value = valorInicial
                        })


                    })
                    marcoBotones.appendChild(botonCancelar)

                    selectorEspacioCalendarios.appendChild(marcoBotones)



                }


            },


        }
    },
    clientes: {
        arranque: async () => {
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            const granuladoURL = casaVitini.componentes.granuladorURL()
            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]


            if (comandoInicial === "clientes" && !granuladoURL.parametros.buscar) {


                casaVitini.administracion.clientes.buscadorUI()
            }
            if (granuladoURL.parametros.buscar) {

                casaVitini.administracion.clientes.buscadorUI()
                if (!granuladoURL.parametros.buscar) {
                    return
                }
                const transaccion = {
                    zona: "administracion/clientes/buscar",
                    tipoBusqueda: "rapido",
                    tipoConstruccionGrid: "total",
                    origen: "url",
                    ...granuladoURL.parametros,
                    //granuladoURL: granuladorURL


                }
                transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                transaccion.buscar = decodeURI(transaccion.buscar)

                if (transaccion.nombre_columna) {
                    transaccion.nombreColumna = transaccion.nombre_columna.replace(/_([a-z])/g, (match, group) => group.toUpperCase());
                    delete transaccion.nombre_columna
                }
                if (transaccion.sentido_columna) {
                    transaccion.sentidoColumna = transaccion.sentido_columna
                    delete transaccion.sentido_columna
                }
                const campoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
                campoBuscador.value = transaccion.buscar
                return casaVitini.administracion.clientes.mostrarClientesResueltos(transaccion)
            }
            const soloDigitos = /^\d+$/;
            if (soloDigitos.test(comandoInicial)) {
                const cliente = comandoInicial
                await casaVitini.administracion.clientes.detallesCliente.UI(cliente)

                const transaccion = {
                    zona: "administracion/clientes/reservasDelCliente",
                    cliente: Number(cliente),
                    origen: "url",
                    tipoConstruccionGrid: "total",
                    ...granuladoURL.parametros,
                    //granuladoURL: granuladorURL
                }

                transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                if (transaccion.nombre_columna) {
                    transaccion.nombreColumna = transaccion.nombre_columna.replace(/_([a-z])/g, (match, group) => group.toUpperCase());
                    delete transaccion.nombre_columna
                }
                if (transaccion.sentido_columna) {
                    transaccion.sentidoColumna = transaccion.sentido_columna
                    delete transaccion.sentido_columna
                }

                await casaVitini.administracion.clientes.detallesCliente.mostrarReservasDelClienteResueltas(transaccion)
            }


        },
        nuevo: {
            arranque: () => {
                document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

                let selectorBotonCrearCliente = document.querySelector("[componente=botonCrearCliente]")
                selectorBotonCrearCliente.addEventListener("click", casaVitini.administracion.clientes.nuevo.crearCliente)




            },
            crearCliente: async () => {
                const selectorCampos = [...document.querySelectorAll("[campo]")]
                const transaccion = {
                    zona: "administracion/clientes/crearCliente"
                }
                selectorCampos.map((campo) => {
                    const nombreCampo = campo.getAttribute("campo")
                    const datosCampo = campo.value
                    transaccion[nombreCampo] = datosCampo
                })


                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)

                }


                if (respuestaServidor?.ok) {
                    const nuevoUIDCliente = respuestaServidor?.nuevoUIDCliente
                    const vista = `/administracion/clientes/${nuevoUIDCliente}`
                    const navegacion = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.componentes.controladorVista(navegacion)
                }


            }
        },
        buscadorUI: () => {
            let espacioClientes = document.querySelector("[componente=espacioClientes]")
            let campoBuscador = document.createElement("input")
            campoBuscador.classList.add("campoBuscadorClientes")
            campoBuscador.setAttribute("componente", "zonaNavegacionPaginadaClientes")
            campoBuscador.setAttribute("componenteCampo", "buscadorPorId")
            campoBuscador.setAttribute("placeholder", "Busque un cliente por nombre, por pasaporte, por email")
            campoBuscador.addEventListener("input", casaVitini.administracion.clientes.buscadorClientesPorCampo)
            espacioClientes.appendChild(campoBuscador)
        },
        buscadorClientesPorCampo: async (cliente) => {

            const espacioClientes = document.querySelector("[componente=espacioClientes]")
            const terminoBusqueda = cliente.target.value
            document.querySelector("[componente=estadoBusqueda]")?.remove()
            document.querySelector("[gridUID=gridClientes]")?.remove()
            document.querySelector("[componenteID=navegacionPaginacion]")?.remove()

            const estadoBusquedaUI = document.createElement("div")
            estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
            estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
            estadoBusquedaUI.innerText = "Buscando..."
            espacioClientes.appendChild(estadoBusquedaUI)
            const granuladorURL = casaVitini.componentes.granuladorURL()
            if (granuladorURL.parametros.buscar) {
                history.replaceState(null, null, granuladorURL.directoriosFusion);
            }

            const campoVacio = cliente.target.value.length
            if (campoVacio === 0) {
                clearTimeout(casaVitini.componentes.temporizador);
                document.querySelector("[componente=estadoBusqueda]")?.remove()
                document.querySelector("[componenteID=gridClientes]")?.remove()
                document.querySelector("[gridUI_enlazado=gridClientes]")?.remove()

                document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                const vistaActual = document.getElementById("uiNavegacion").getAttribute("vistaActual")
                const resetUrl = "/administracion/clientes"
                const titulo = "casavitini"
                const estado = {
                    zona: vistaActual,
                    estadoInternoZona: "estado",
                    tipoCambio: "total"
                }

                window.history.replaceState(estado, titulo, resetUrl);

                return;
            }
            clearTimeout(casaVitini.componentes.temporizador);
            casaVitini.componentes.temporizador = setTimeout(async () => {
                const transaccion = {
                    zona: "administracion/clientes/buscar",
                    tipoBusqueda: "rapido",
                    pagina: 1,
                    buscar: terminoBusqueda,
                    origen: "botonMostrarClientes",
                    tipoConstruccionGrid: "total",
                    granuladoURL: granuladorURL

                }
                return casaVitini.administracion.clientes.mostrarClientesResueltos(transaccion)

            }, 1500);
        },
        mostrarClientesResueltos: async (transaccion) => {
            const origen = transaccion.origen
            delete transaccion.origen

            const granuladoURL = casaVitini.componentes.granuladorURL()
            delete transaccion.granuladoURL

            const tipoConstruccionGrid = transaccion.tipoConstruccionGrid
            delete transaccion.tipoConstruccionGrid

            const paginaTipo = transaccion.paginaTipo
            delete transaccion.paginaTipo


            const resolverClientes = await casaVitini.administracion.clientes.resolverClientes(transaccion)

            if (resolverClientes.totalClientes === 0) {
                const espacioClientes = document.querySelector("[componente=espacioClientes]")
                document.querySelector("[gridUID=gridClientes]")?.remove()
                document.querySelector("[componente=estadoBusqueda]")?.remove()

                const estadoBusquedaUI = document.createElement("div")
                estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                estadoBusquedaUI.innerText = "No se han encontrado clientes"
                espacioClientes.appendChild(estadoBusquedaUI)
                return
            }
            document.querySelector("[componente=estadoBusqueda]")?.remove()

            const clientes = resolverClientes.clientes

            const buscar = resolverClientes.buscar
            const paginasTotales = resolverClientes.paginasTotales
            const paginaActual = resolverClientes.pagina
            const nombreColumna = resolverClientes.nombreColumna
            const sentidoColumna = resolverClientes.sentidoColumna

            const columnasGrid = [
                {
                    columnaUI: "UID",
                    columnaIDV: "uid",
                    columnaClase: "idColumna"
                },
                {
                    columnaUI: "Nombre",
                    columnaIDV: "nombre",
                    columnaClase: "entradaColumna"
                },
                {
                    columnaUI: "Primer Apellido",
                    columnaIDV: "primerApellido",
                    columnaClase: "salidaColuma"
                },
                {
                    columnaUI: "Segundo Apellido",
                    columnaIDV: "segundoApellido",
                    columnaClase: "estadoColumna"
                },
                {
                    columnaUI: "Pasaporte",
                    columnaIDV: "pasaporte",
                    columnaClase: "pagoColumna"
                },
                {
                    columnaUI: "Telefono",
                    columnaIDV: "telefono",
                    columnaClase: "pagoColumna"
                },
            ]

            const parametrosFinales = {
                buscar: buscar
            }

            if (paginaActual > 1 && paginasTotales > 1) {
                parametrosFinales.pagina = paginaActual
            }
            if (nombreColumna) {
                parametrosFinales.pagina = paginaActual
                parametrosFinales.nombre_columna = nombreColumna.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
                parametrosFinales.sentido_columna = sentidoColumna
            }
            const estructuraParametrosFinales = []
            for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                const estructura = `${parametroFinal}:${valorFinal}`
                estructuraParametrosFinales.push(estructura)
            }
            let parametrosURLFInal = ""
            if (estructuraParametrosFinales.length > 0) {
                parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
            }

            const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal



            const metadatosGrid = {
                filas: clientes,
                sentidoColumna: sentidoColumna,
                nombreColumna: nombreColumna,
                tipoConstruccionGrid: tipoConstruccionGrid,
                buscar: buscar,
                pagina: paginaActual,
                destino: "[componente=espacioClientes]",
                columnasGrid: columnasGrid,
                gridUID: "gridClientes",
                numeroColumnas: 6,
                metodoColumna: "casaVitini.administracion.clientes.ordenarPorColumna",
                metodoFila: "casaVitini.administracion.clientes.resolverFila",
                mascaraHref: {
                    urlStatica: "/administracion/clientes/",
                    parametro: "uid"
                },
                //mascaraURL: constructorURLFinal
            }
            casaVitini.componentes.ui.grid(metadatosGrid)
            const metadatosPaginador = {
                paginaActual: paginaActual,
                paginasTotales: paginasTotales,
                destino: "[componente=espacioClientes]",
                metodoBoton: "casaVitini.administracion.clientes.cambiarPagina",
                gridUID: "gridClientes",
                granuladoURL: {
                    parametros: parametrosFinales,
                    directoriosFusion: granuladoURL.directoriosFusion
                }
            }
            casaVitini.componentes.ui.paginador(metadatosPaginador)

            transaccion.tipoConstruccionGrid = "soloLista"
            const titulo = "ADminstar reservas"
            const estado = {
                zona: constructorURLFinal,
                EstadoInternoZona: "estado",
                tipoCambio: "parcial",
                conpontenteExistente: "zonaNavegacionPaginadaClientes",
                funcionPersonalizada: "casaVitini.administracion.clientes.mostrarClientesResueltos",
                datosPaginacion: transaccion
            }
            if (origen === "url" || origen === "botonMostrarClientes") {
                window.history.replaceState(estado, titulo, constructorURLFinal);
            }
            if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                window.history.pushState(estado, titulo, constructorURLFinal);
            }
            if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                window.history.replaceState(estado, titulo, constructorURLFinal);
            }
        },
        resolverClientes: async (transaccion) => {
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }

            return respuestaServidor
        },
        ordenarPorColumna: async (columna) => {

            const nombreColumna = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("nombreColumna")

            const selectorColumnasentido = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("sentidoColumna")
            const numeroPagina = columna.target.closest("[gridUID]").getAttribute("numeroPagina")
            const terminoBusqueda = columna.target.closest("[gridUID]").getAttribute("terminoBusqueda")
            let sentidoColumna

            const transaccion = {
                zona: "administracion/clientes/buscar",
                tipoBusqueda: "rapido",
                pagina: Number(numeroPagina),
                buscar: terminoBusqueda,
                tipoConstruccionGrid: "soloLista",
                origen: "tituloColumna",
                granuladoURL: casaVitini.componentes.granuladorURL()

            }
            if (selectorColumnasentido === "ascendente") {
                transaccion.sentidoColumna = "descendente"
                transaccion.nombreColumna = nombreColumna
            }
            if (!selectorColumnasentido) {
                transaccion.sentidoColumna = "ascendente"
                transaccion.nombreColumna = nombreColumna
            }


            casaVitini.administracion.clientes.mostrarClientesResueltos(transaccion)
        },
        cambiarPagina: async (cambiarPagina) => {

            const gridUID = cambiarPagina.gridUID
            const gridEnlazado = document.querySelector(`[gridUID=${gridUID}]`)
            const tipoBoton = cambiarPagina.componenteID
            const nombreColumna = gridEnlazado.getAttribute("nombreColumnaSeleccionada")
            const sentidoColumna = gridEnlazado.getAttribute("sentidoColumna")
            const terminoBusqueda = gridEnlazado.getAttribute("terminoBusqueda")
            const paginaActual = Number(gridEnlazado.getAttribute("numeroPagina"))
            const paginaTipo = cambiarPagina.paginaTipo

            const transacccion = {
                tipoConstruccionGrid: "soloLista",
                zona: "administracion/clientes/buscar",
                nombreColumna: nombreColumna,
                sentidoColumna: sentidoColumna,
                buscar: terminoBusqueda,
                tipoBusqueda: "rapido",
                origen: "botonNumeroPagina",
                paginaTipo: paginaTipo,
                granuladoURL: casaVitini.componentes.granuladorURL()
            }

            if (tipoBoton === "numeroPagina") {
                const numeroPagina = cambiarPagina.numeroPagina
                transacccion.pagina = Number(numeroPagina)
            }
            if (tipoBoton === "botonAdelantePaginacion") {
                transacccion.pagina = paginaActual + 1
            }
            if (tipoBoton === "botonAtrasPaginacion") {
                transacccion.pagina = paginaActual - 1
            }
            return casaVitini.administracion.clientes.mostrarClientesResueltos(transacccion)
        },
        detallesCliente: {
            UI: async (cliente) => {
                const transaccion = {
                    zona: "administracion/clientes/detallesCliente",
                    cliente: Number(cliente)
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "No existe ningun cliente con ese identificador",
                        descripcion: "Revisa el identificador del cliente por que este no existe. Quizas borrastes el cliente que buscas. Quizas te equivocastes al escribir el identificador del cliente"
                    }
                    return casaVitini.componentes.mensajeSimple(info)
                }
                if (respuestaServidor?.ok) {

                    let detallesCliente = respuestaServidor?.ok
                    let uid = detallesCliente.uid
                    let nombre = detallesCliente.nombre
                    let primerApellido = detallesCliente.primerApellido
                    let segundoApellido = detallesCliente.segundoApellido
                    let pasaporte = detallesCliente.pasaporte
                    let telefono = detallesCliente.telefono
                    let email = detallesCliente.email
                    let notas = detallesCliente.notas



                    let deatallesClienteUI = document.createElement("div")
                    deatallesClienteUI.classList.add("detallesClienteUI")
                    deatallesClienteUI.setAttribute("clienteUID", uid)
                    deatallesClienteUI.setAttribute("componente", "clienteUID" + uid)

                    let bloqueHorizontal = document.createElement("div")
                    bloqueHorizontal.classList.add("detallesClienteBloqueHorizontal")

                    let bloqueVertical = document.createElement("div")
                    bloqueVertical.classList.add("detallesClienteBloqueVertical")

                    // Nombre
                    let bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detallesClienteBloqueDato")
                    bloqueVertical.appendChild(bloqueDato)


                    let nombreTitulo = document.createElement("p")
                    nombreTitulo.classList.add("detallesClienteTituloDato")
                    nombreTitulo.innerText = "Nombre"
                    bloqueDato.appendChild(nombreTitulo)

                    let nombreDato = document.createElement("p")
                    nombreDato.classList.add("detallesClienteDatoCampo")
                    nombreDato.setAttribute("componenteDetalle", "nombre")
                    nombreDato.innerText = nombre
                    bloqueDato.appendChild(nombreDato)

                    // primerApelliado
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detallesClienteBloqueDato")
                    bloqueVertical.appendChild(bloqueDato)

                    let primerApelliadoTitulo = document.createElement("p")
                    primerApelliadoTitulo.classList.add("detallesClienteTituloDato")
                    primerApelliadoTitulo.innerText = "Primer apellido"

                    bloqueDato.appendChild(primerApelliadoTitulo)

                    let primerApelliadoDato = document.createElement("p")
                    primerApelliadoDato.classList.add("detallesClienteDatoCampo")
                    primerApelliadoDato.innerText = primerApellido
                    primerApelliadoDato.setAttribute("componenteDetalle", "primerApellido")
                    bloqueDato.appendChild(primerApelliadoDato)

                    // segundoApellido
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detallesClienteBloqueDato")
                    bloqueVertical.appendChild(bloqueDato)

                    let segundoApellidoTitulo = document.createElement("p")
                    segundoApellidoTitulo.classList.add("detallesClienteTituloDato")
                    segundoApellidoTitulo.innerText = "Segundo apellido"

                    bloqueDato.appendChild(segundoApellidoTitulo)

                    let segundoApellidoDato = document.createElement("p")
                    segundoApellidoDato.classList.add("detallesClienteDatoCampo")
                    segundoApellidoDato.innerText = segundoApellido
                    segundoApellidoDato.setAttribute("componenteDetalle", "segundoApellido")

                    bloqueDato.appendChild(segundoApellidoDato)
                    bloqueHorizontal.appendChild(bloqueVertical)


                    bloqueVertical = document.createElement("div")
                    bloqueVertical.classList.add("detallesClienteBloqueVertical")


                    // pasaporte
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detallesClienteBloqueDato")
                    bloqueVertical.appendChild(bloqueDato)

                    let pasaporteTitulo = document.createElement("p")
                    pasaporteTitulo.classList.add("detallesClienteTituloDato")

                    pasaporteTitulo.innerText = "Pasaporte"
                    bloqueDato.appendChild(pasaporteTitulo)

                    let pasaporteDato = document.createElement("p")
                    pasaporteDato.classList.add("detallesClienteDatoCampo")
                    pasaporteDato.setAttribute("componenteDetalle", "pasaporte")
                    pasaporteDato.innerText = pasaporte
                    bloqueDato.appendChild(pasaporteDato)

                    // telefono
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detallesClienteBloqueDato")
                    bloqueVertical.appendChild(bloqueDato)

                    let telefonoTitulo = document.createElement("p")
                    telefonoTitulo.classList.add("detallesClienteTituloDato")
                    telefonoTitulo.innerText = "Telefono"

                    bloqueDato.appendChild(telefonoTitulo)

                    let telefonoDato = document.createElement("p")
                    telefonoDato.classList.add("detallesClienteDatoCampo")
                    telefonoDato.setAttribute("componenteDetalle", "telefono")
                    telefonoDato.innerText = telefono
                    bloqueDato.appendChild(telefonoDato)

                    // correoElectronico
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detallesClienteBloqueDato")
                    bloqueVertical.appendChild(bloqueDato)

                    let correoElectronicoTitulo = document.createElement("p")
                    correoElectronicoTitulo.classList.add("detallesClienteTituloDato")
                    correoElectronicoTitulo.innerText = "Correo electronico"

                    bloqueDato.appendChild(correoElectronicoTitulo)

                    let correoElectronicoDato = document.createElement("p")
                    correoElectronicoDato.classList.add("detallesClienteDatoCampo")
                    correoElectronicoDato.innerText = email
                    correoElectronicoDato.setAttribute("componenteDetalle", "email")
                    bloqueDato.appendChild(correoElectronicoDato)

                    bloqueHorizontal.appendChild(bloqueVertical)
                    deatallesClienteUI.appendChild(bloqueHorizontal)

                    bloqueHorizontal = document.createElement("div")
                    bloqueHorizontal.classList.add("detallesClienteBloqueHorizontalNotas")
                    // notas
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detallesClienteBloqueDato")
                    bloqueHorizontal.appendChild(bloqueDato)

                    let notasTitulo = document.createElement("p")
                    notasTitulo.classList.add("detallesClienteTituloDato")
                    notasTitulo.innerText = "Notas"

                    bloqueDato.appendChild(notasTitulo)

                    let notasDato = document.createElement("p")
                    notasDato.classList.add("detallesClienteDatoCampo")
                    notasDato.setAttribute("componenteDetalle", "notas")

                    notasDato.innerText = notas
                    bloqueDato.appendChild(notasDato)
                    deatallesClienteUI.appendChild(bloqueHorizontal)

                    let selectorEspacioClientes = document.querySelector("[componente=espacioClientes]")
                    selectorEspacioClientes.appendChild(deatallesClienteUI)

                    deatallesClienteUI = document.createElement("div")
                    deatallesClienteUI.classList.add("detallesClienteUIBotones")

                    let boton = document.createElement("div")
                    boton.classList.add("detallesClienteBoton")
                    boton.setAttribute("boton", "editar")
                    boton.innerText = "Editar datos"
                    boton.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.editar)
                    deatallesClienteUI.appendChild(boton)


                    boton = document.createElement("div")
                    boton.classList.add("detallesClienteBoton")
                    boton.classList.add("estadoInicialInvisible")
                    boton.setAttribute("boton", "dejarDeEditar")
                    boton.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.dejarDeEditar)
                    boton.innerText = "Dejar de editar sin guardar cambios"
                    deatallesClienteUI.appendChild(boton)


                    boton = document.createElement("div")
                    boton.classList.add("detallesClienteBoton")
                    boton.classList.add("estadoInicialInvisible")
                    boton.setAttribute("boton", "guardarCambios")
                    boton.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.guardarCambios)
                    boton.innerText = "Guardar cambios"
                    deatallesClienteUI.appendChild(boton)

                    boton = document.createElement("div")
                    boton.classList.add("detallesClienteBoton")
                    boton.classList.add("estadoInicialInvisible")
                    boton.setAttribute("boton", "eliminarCliente")
                    boton.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.eliminarCliente.UI)
                    boton.innerText = "Eliminar cliente"
                    deatallesClienteUI.appendChild(boton)


                    selectorEspacioClientes.appendChild(deatallesClienteUI)


                }

            },
            mostrarReservasDelClienteResueltas: async (transaccion) => {

                const origen = transaccion.origen
                delete transaccion.origen

                const granuladoURL = casaVitini.componentes.granuladorURL()
                delete transaccion.granuladoURL

                const tipoConstruccionGrid = transaccion.tipoConstruccionGrid
                delete transaccion.tipoConstruccionGrid

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.totalReservas === 0) {
                    const espacioClientes = document.querySelector("[componente=espacioClientes]")
                    document.querySelector("[gridUID=gridClientes]")?.remove()
                    document.querySelector("[componente=estadoBusqueda]")?.remove()

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.innerText = "Este cliente no tiene nínguna reserva asociada a el"
                    espacioClientes.appendChild(estadoBusquedaUI)
                    return
                }
                document.querySelector("[componente=estadoBusqueda]")?.remove()

                const reservasDelCliente = respuestaServidor.reservas
                const paginasTotales = respuestaServidor.paginasTotales
                const paginaActual = respuestaServidor.pagina
                const nombreColumna = respuestaServidor.nombreColumna
                const sentidoColumna = respuestaServidor.sentidoColumna

                const columnasGrid = [
                    {
                        columnaUI: "Como",
                        columnaIDV: "como",
                        columnaClase: "idColumna"
                    },
                    {
                        columnaUI: "Reserva",
                        columnaIDV: "reserva",
                        columnaClase: "entradaColumna"
                    },
                    {
                        columnaUI: "Fecha de entrada",
                        columnaIDV: "entrada",
                        columnaClase: "salidaColuma"
                    },
                    {
                        columnaUI: "Fecha de salida",
                        columnaIDV: "salida",
                        columnaClase: "estadoColumna"
                    }
                ]
                const parametrosFinales = {}

                if (respuestaServidor?.pagina > 1 && paginasTotales > 1) {
                    parametrosFinales.pagina = paginaActual
                }
                if (nombreColumna) {
                    parametrosFinales.pagina = paginaActual
                    parametrosFinales.nombre_columna = nombreColumna.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
                    parametrosFinales.sentido_columna = sentidoColumna

                }
                const estructuraParametrosFinales = []
                for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                    const estructura = `${parametroFinal}:${valorFinal}`
                    estructuraParametrosFinales.push(estructura)
                }
                let parametrosURLFInal = ""
                if (estructuraParametrosFinales.length > 0) {
                    parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                }
                const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                const metadatosGrid = {
                    filas: reservasDelCliente,
                    sentidoColumna: sentidoColumna,
                    nombreColumna: nombreColumna,
                    tipoConstruccionGrid: tipoConstruccionGrid,
                    //buscar: buscar,
                    pagina: paginaActual,
                    destino: "[componente=espacioClientes]",
                    columnasGrid: columnasGrid,
                    gridUID: "gridReservaDelCliente",
                    numeroColumnas: 4,
                    metodoColumna: "casaVitini.administracion.clientes.detallesCliente.ordenarPorColumna",
                    metodoFila: "casaVitini.administracion.clientes.resolverFila",
                    mascaraHref: {
                        urlStatica: "/administracion/reservas/",
                        parametro: "reserva"
                    },
                    //mascaraURL: constructorURLFinal
                }

                casaVitini.componentes.ui.grid(metadatosGrid)
                const metadatosPaginador = {
                    paginaActual: paginaActual,
                    paginasTotales: paginasTotales,
                    destino: "[componente=espacioClientes]",
                    metodoBoton: "casaVitini.administracion.clientes.detallesCliente.cambiarPagina",
                    gridUID: "gridReservaDelCliente",
                    granuladoURL: {
                        parametros: parametrosFinales,
                        directoriosFusion: granuladoURL.directoriosFusion
                    }
                }

                casaVitini.componentes.ui.paginador(metadatosPaginador)
                const clienteUID = document.querySelector("[clienteUID]").getAttribute("clienteUID")

                transaccion.tipoConstruccionGrid = "soloLista"
                const titulo = "ADminstar reservas"
                const estado = {
                    zona: constructorURLFinal,
                    EstadoInternoZona: "estado",
                    tipoCambio: "parcial",
                    conpontenteExistente: "clienteUID" + clienteUID,
                    funcionPersonalizada: "casaVitini.administracion.clientes.detallesCliente.mostrarReservasDelClienteResueltas",
                    datosPaginacion: transaccion
                }
                if (origen === "url" || origen === "botonMostrarClientes") {
                    window.history.replaceState(estado, titulo, constructorURLFinal);
                }
                if (origen === "botonNumeroPagina" || origen === "tituloColumna") {
                    window.history.pushState(estado, titulo, constructorURLFinal);
                }
            },
            ordenarPorColumna: async (columna) => {

                const nombreColumna = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("nombreColumna")

                const selectorColumnasentido = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("sentidoColumna")
                const numeroPagina = columna.target.closest("[gridUID]").getAttribute("numeroPagina")
                const terminoBusqueda = columna.target.closest("[gridUID]").getAttribute("terminoBusqueda")
                let sentidoColumna
                const clienteUID = document.querySelector("[clienteUID]").getAttribute("clienteUID")
                const transaccion = {
                    zona: "administracion/clientes/reservasDelCliente",
                    pagina: Number(numeroPagina),
                    cliente: Number(clienteUID),
                    tipoConstruccionGrid: "soloLista",
                    origen: "tituloColumna"
                }
                if (selectorColumnasentido === "ascendente") {
                    transaccion.sentidoColumna = "descendente"
                    transaccion.nombreColumna = nombreColumna
                }
                if (!selectorColumnasentido) {
                    transaccion.sentidoColumna = "ascendente"
                    transaccion.nombreColumna = nombreColumna
                }

                transaccion.granuladoURL = casaVitini.componentes.granuladorURL()

                casaVitini.administracion.clientes.detallesCliente.mostrarReservasDelClienteResueltas(transaccion)
            },
            cambiarPagina: async (cambiarPagina) => {



                const gridUID = cambiarPagina.gridUID
                const gridEnlazado = document.querySelector(`[gridUID=${gridUID}]`)



                const tipoBoton = cambiarPagina.componenteID
                const nombreColumna = gridEnlazado.getAttribute("nombreColumnaSeleccionada")
                const sentidoColumna = gridEnlazado.getAttribute("sentidoColumna")
                const terminoBusqueda = gridEnlazado.getAttribute("terminoBusqueda")
                const paginaActual = Number(gridEnlazado.getAttribute("numeroPagina"))

                const clienteUID = document.querySelector("[clienteUID]").getAttribute("clienteUID")

                const transacccion = {
                    zona: "administracion/clientes/reservasDelCliente",
                    nombreColumna: nombreColumna,
                    sentidoColumna: sentidoColumna,
                    cliente: Number(clienteUID),
                    tipoConstruccionGrid: "soloLista",
                    origen: "botonNumeroPagina",
                    granuladoURL: casaVitini.componentes.granuladorURL()
                }

                if (tipoBoton === "numeroPagina") {
                    const numeroPagina = cambiarPagina.numeroPagina
                    transacccion.pagina = Number(numeroPagina)
                }
                if (tipoBoton === "botonAdelantePaginacion") {
                    const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                    let mueveNavegadorHaciaAdelante = "Desactivado";
                    if (Number(posicionRelativa) === 10) {
                        mueveNavegadorHaciaAdelante = "Activado"
                    }
                    transacccion.pagina = paginaActual + 1
                    transacccion.moverHaciaAdelanteNavegacion = mueveNavegadorHaciaAdelante
                    transacccion.sentidoNavegacion = "Adelante"
                }
                if (tipoBoton === "botonAtrasPaginacion") {
                    const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                    let mueveNavegadorHaciaAtras = "Desactivado";
                    if (Number(posicionRelativa) === 1) {
                        mueveNavegadorHaciaAtras = "Activado"
                    }
                    transacccion.pagina = paginaActual - 1
                    transacccion.mueveNavegadorHaciaAtras = mueveNavegadorHaciaAtras
                    transacccion.sentidoNavegacion = "Atras"
                }


                return casaVitini.administracion.clientes.detallesCliente.mostrarReservasDelClienteResueltas(transacccion)


            },
            editar: () => {

                let camposLectura = [...document.querySelectorAll("[componenteDetalle]")]
                camposLectura.map((campo) => {

                    let datoCampo = campo.innerText
                    let idCampo = campo.getAttribute("componenteDetalle")
                    campo.style.display = "none"
                    let tipoElemento
                    if (idCampo === "notas") {
                        tipoElemento = "textarea"
                    } else {
                        tipoElemento = "input"
                    }

                    let campoEditable = document.createElement(tipoElemento)
                    campoEditable.classList.add("detallesClienteCampoEditable")
                    campoEditable.value = datoCampo
                    campoEditable.setAttribute("componenteEditable", idCampo)
                    let selectorContenedor = campo.parentNode
                    selectorContenedor.appendChild(campoEditable)



                })

                document.querySelector("[boton=editar]").classList.add("estadoInicialInvisible")

                document.querySelector("[boton=dejarDeEditar]").classList.remove("estadoInicialInvisible")
                document.querySelector("[boton=eliminarCliente]").classList.remove("estadoInicialInvisible")
                document.querySelector("[boton=guardarCambios]").classList.remove("estadoInicialInvisible")


            },
            dejarDeEditar: () => {
                let camposEditables = [...document.querySelectorAll("[componenteEditable]")]
                camposEditables.map((campo) => {
                    campo.remove()
                })
                let camposLectura = [...document.querySelectorAll("[componenteDetalle]")]
                camposLectura.map((campo) => {
                    campo.removeAttribute("style")
                })

                document.querySelector("[boton=editar]").classList.remove("estadoInicialInvisible")
                document.querySelector("[boton=dejarDeEditar]").classList.add("estadoInicialInvisible")
                document.querySelector("[boton=guardarCambios]").classList.add("estadoInicialInvisible")
                document.querySelector("[boton=guardarCambios]").classList.add("estadoInicialInvisible")

            },
            guardarCambios: async () => {

                const campoEditable = [...document.querySelectorAll("[componenteEditable]")]
                const clienteUID = document.querySelector("[clienteUID]").getAttribute("clienteUID")

                const datosParaActualizar = {
                    zona: "administracion/clientes/modificarCliente",
                    cliente: Number(clienteUID)
                }
                campoEditable.map((campo) => {
                    const campoID = campo.getAttribute("componenteEditable")
                    const campoDato = campo.value
                    const campoEditable = document.querySelector(`[componenteEditable=${campoID}]`)
                    const campoLectura = document.querySelector(`[componenteDetalle=${campoID}]`)

                    if (campoEditable.value !== campoLectura.innerText) {
                        datosParaActualizar[campoID] = campoDato
                    }

                })

                const respuestaServidor = await casaVitini.componentes.servidor(datosParaActualizar)
                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.ok) {
                    const detallesCliente = respuestaServidor?.detallesCliente[0]

                    for (const [detalle, dato] of Object.entries(detallesCliente)) {
                        const selectorCampoLectura = document.querySelector(`[componenteDetalle=${detalle}]`)
                        selectorCampoLectura.innerText = dato
                        selectorCampoLectura.removeAttribute("style")
                    }

                    const camposEditables = [...document.querySelectorAll("[componenteEditable]")]
                    camposEditables.map((campo) => {
                        campo.remove()
                    })
                    document.querySelector("[boton=editar]").classList.remove("estadoInicialInvisible")
                    document.querySelector("[boton=dejarDeEditar]").classList.add("estadoInicialInvisible")
                    document.querySelector("[boton=guardarCambios]").classList.add("estadoInicialInvisible")

                }



            },
            eliminarCliente: {
                UI: () => {
                    document.body.style.overflow = 'hidden';

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("contenedor", "opcionesCancelacion")


                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                    contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")

                    const contenedorCancelacion = document.createElement("div")
                    contenedorCancelacion.classList.add("administracion_reservas_detallesReservas_cancelarReserva_contenedorCancelacion")


                    const tituloCancelarReserva = document.createElement("p")
                    tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                    tituloCancelarReserva.innerText = "Eliminar irreversiblemente al cliente"
                    contenedorCancelacion.appendChild(tituloCancelarReserva)

                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cerrar y volver atras"
                    botonCancelarProcesoCancelacion.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                    contenedorCancelacion.appendChild(botonCancelarProcesoCancelacion)


                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = "Eliminar irreversiblemnete a un cliente elimina la informacion de este cliente en su ficha y en las reservas donde estuvo. Es decir desaparecera de las reservas donde estuvo este cliente."
                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                    contenedorCancelacion.appendChild(bloqueBloqueoApartamentos)

                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                    const entradaPalabraCancelar = document.createElement("input")
                    entradaPalabraCancelar.classList.add("detallesReservaCancelarEntradaTextoCancelar")
                    entradaPalabraCancelar.placeholder = "Escriba la palabra cancelar"
                    //  advertenciaInmersivaIU.appendChild(entradaPalabraCancelar)
                    const infoBotonCancelar = document.createElement("div")
                    infoBotonCancelar.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    infoBotonCancelar.innerText = "Para que se habilite el boton tienes que seleccionar unas de las tres opciones de arriba."
                    bloqueBloqueoApartamentos.appendChild(infoBotonCancelar)


                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = "Confirmar y eliminar cliente"
                    botonCancelar.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.eliminarCliente.confirmar)
                    bloqueBloqueoApartamentos.appendChild(botonCancelar)

                    contenidoAdvertenciaInmersiva.appendChild(contenedorCancelacion)

                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)

                    document.body.appendChild(advertenciaInmersivaIU)


                },
                confirmar: async () => {

                    const campoEditable = [...document.querySelectorAll("[componenteEditable]")]
                    const clienteUID = document.querySelector("[clienteUID]").getAttribute("clienteUID")
                    const instanciaUID = casaVitini.componentes.codigoFechaInstancia()
                    const metadatosPantallaCarga = {
                        mensaje: "Esperando al servidor...",
                        instanciaUID: instanciaUID,
                    }
                    casaVitini.ui.vistas.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                    const selectorPantallaDeCargaSuperpuestaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    const datosParaActualizar = {
                        zona: "administracion/clientes/eliminar",
                        clienteUID: Number(clienteUID)
                    }
                    campoEditable.map((campo) => {
                        const campoID = campo.getAttribute("componenteEditable")
                        const campoDato = campo.value
                        const campoEditable = document.querySelector(`[componenteEditable=${campoID}]`)
                        const campoLectura = document.querySelector(`[componenteDetalle=${campoID}]`)

                        if (campoEditable.value !== campoLectura.innerText) {
                            datosParaActualizar[campoID] = campoDato
                        }

                    })

                    const respuestaServidor = await casaVitini.componentes.servidor(datosParaActualizar)
                    selectorPantallaDeCargaSuperpuestaRenderizada?.remove()

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                    }


                    if (respuestaServidor?.ok) {
                        const navegacion = {
                            vista: "administracion/clientes",
                            tipoOrigen: "menuNavegador"

                        }
                        casaVitini.componentes.controladorVista(navegacion)
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.ok)
                        const detallesCliente = respuestaServidor?.detallesCliente[0]

                        for (const [detalle, dato] of Object.entries(detallesCliente)) {
                            const selectorCampoLectura = document.querySelector(`[componenteDetalle=${detalle}]`)
                            selectorCampoLectura.innerText = dato
                            selectorCampoLectura.removeAttribute("style")
                        }

                        const camposEditables = [...document.querySelectorAll("[componenteEditable]")]
                        camposEditables.map((campo) => {
                            campo.remove()
                        })
                        document.querySelector("[boton=editar]").classList.remove("estadoInicialInvisible")
                        document.querySelector("[boton=dejarDeEditar]").classList.add("estadoInicialInvisible")
                        document.querySelector("[boton=guardarCambios]").classList.add("estadoInicialInvisible")

                    }



                },

            },

        },
        resolverFila: (transaccion) => {
            transaccion.preventDefault()
            transaccion.stopPropagation()
            const href = transaccion.target.closest("[href]").getAttribute("href")
            const navegacion = {
                vista: href,
                tipoOrigen: "menuNavegador"

            }
            return casaVitini.componentes.controladorVista(navegacion)
        },
    },
    precios: {
        arranque: async () => {
            const granuladoURL = casaVitini.componentes.granuladorURL()
            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            if (comandoInicial === "precios" && Object.keys(granuladoURL.parametros).length === 0) {
                casaVitini.administracion.precios.portadaUI()
            }

            if (granuladoURL.parametros && comandoInicial !== "precios") {
                const info = {
                    titulo: "No existe ninguna perfil de precio base con ese identificador",
                    descripcion: "Revisa el identificado por que no existe el perfil de precio que solicitas"
                }
                return casaVitini.componentes.mensajeSimple(info)
            }

            if (granuladoURL.parametros.apartamentos) {
                const transaccion = {
                    zona: "administracion/precios/detallePrecioBaseApartamento",
                    apartamentoIDV: granuladoURL.parametros.apartamentos
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                return casaVitini.administracion.precios.detallesApartamenro(respuestaServidor)
            }
            if (granuladoURL.parametros.impuestos) {
                const transaccion = {
                    zona: "administracion/impuestos/detalleImpuesto",
                    impuestoUID: Number(granuladoURL.parametros.impuestos)
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                return casaVitini.administracion.precios.detalleImpuesto(respuestaServidor)
            }



        },
        portadaUI: async () => {

            const selectorEspacioPreciosEImpuestos = document.querySelector("[componente=precios]")
            const transaccion = {
                zona: "administracion/precios/listaPreciosApartamentos"
            }
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {
                let preciosApartmentos = respuestaServidor?.ok

                let bloqueGlobalApartamentos = document.createElement("div")
                bloqueGlobalApartamentos.classList.add("preciosEImpuestosBloqueGlobal")

                let contenedorTituloYOpciones = document.createElement("div")
                contenedorTituloYOpciones.classList.add("preciosEImpuestosTituloYOpciones")

                let tituloBloque = document.createElement("p")
                tituloBloque.classList.add("preciosEImpuestosBloqueTitulo")
                tituloBloque.innerText = "Precios de los apartmentos"
                contenedorTituloYOpciones.appendChild(tituloBloque)
                bloqueGlobalApartamentos.appendChild(contenedorTituloYOpciones)

                let bloqueHorizontal = document.createElement("div")
                bloqueHorizontal.classList.add("precioEImpuestosBloqueHorizotnal")

                preciosApartmentos.map((detalleApartamento) => {

                    let uidPrecioApartamento = detalleApartamento.uid
                    let apartamentoIDV = detalleApartamento.apartamento
                    let precio = detalleApartamento.precio
                    let moneda = detalleApartamento.moneda
                    let apartamentoUI = detalleApartamento.apartamentoUI
                    let totalImpuestos = detalleApartamento.totalImpuestos
                    let totalDiaBruto = detalleApartamento.totalDiaBruto

                    let bloqueApartamento = document.createElement("a")
                    bloqueApartamento.classList.add("preciosEImpuestosBloqueApartamento")
                    bloqueApartamento.setAttribute("href", "/administracion/precios/apartamentos:" + apartamentoIDV)
                    bloqueApartamento.setAttribute("vista", "/administracion/precios/apartamentos:" + apartamentoIDV)
                    bloqueApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                    bloqueApartamento.addEventListener("click", casaVitini.administracion.precios.entrarDetallesApartamento)

                    let tituloApartamento = document.createElement("p")
                    tituloApartamento.classList.add("preciosEImpuestosTituloApartamento")
                    tituloApartamento.innerText = apartamentoUI
                    bloqueApartamento.appendChild(tituloApartamento)



                    if (precio) {
                        // Total neto por dia
                        let bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("precioEImpuestosBloqueDato")

                        let tituloDato = document.createElement("p")
                        tituloDato.classList.add("precioEImpuestosOpcionApartamentoTitulo")
                        tituloDato.innerText = "Precio: Total neto por día"
                        bloqueDato.appendChild(tituloDato)

                        let datoUI = document.createElement("p")
                        datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                        datoUI.innerText = precio
                        bloqueDato.appendChild(datoUI)
                        bloqueApartamento.appendChild(bloqueDato)

                        // Total solo de impuestos
                        bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("precioEImpuestosBloqueDato")

                        tituloDato = document.createElement("p")
                        tituloDato.classList.add("precioEImpuestosOpcionApartamentoTitulo")
                        tituloDato.innerText = "Total impuestos aplicados"
                        bloqueDato.appendChild(tituloDato)

                        datoUI = document.createElement("p")
                        datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                        datoUI.innerText = totalImpuestos
                        bloqueDato.appendChild(datoUI)
                        bloqueApartamento.appendChild(bloqueDato)

                        // Total bruto apartamento
                        bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("precioEImpuestosBloqueDato")

                        tituloDato = document.createElement("p")
                        tituloDato.classList.add("precioEImpuestosOpcionApartamentoTitulo")
                        tituloDato.innerText = "Total bruto por dia"
                        bloqueDato.appendChild(tituloDato)

                        datoUI = document.createElement("p")
                        datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                        datoUI.innerText = totalDiaBruto
                        bloqueDato.appendChild(datoUI)
                        bloqueApartamento.appendChild(bloqueDato)

                    } else {
                        // Inforamcion apartamento sin perfil de precio
                        let bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("precioEImpuestosBloqueDato")

                        datoUI = document.createElement("p")
                        datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                        datoUI.innerText = "Este apartamento tiene una configuracion de apartamento pero no tiene ningún perfil de precio creado, por lo tanto no esta disponible para reservar al ser un requistio para contruir una configuracion valida. Para crear un perfil de precio para este aparmtamento pulse aqui. Luego de establecer el precio habilite la configuracion yendo a la configuracion del apartmento y poniendola en disponible"
                        bloqueDato.appendChild(datoUI)

                        bloqueApartamento.appendChild(bloqueDato)
                    }









                    bloqueHorizontal.appendChild(bloqueApartamento)
                })
                bloqueGlobalApartamentos.appendChild(bloqueHorizontal)
                selectorEspacioPreciosEImpuestos.appendChild(bloqueGlobalApartamentos)
            }






        },
        gridPrecios: async (entrada) => {






        },
        detallesApartamenro: async (respuestaServidor) => {

            if (respuestaServidor?.error) {
                const info = {
                    titulo: "No existe ninguna perfil de precio base con ese identificador",
                    descripcion: "Revisa el identificado por que no existe el perfil de precio que solicitas"
                }
                return casaVitini.componentes.mensajeSimple(info)
            }
            if (respuestaServidor?.ok) {
                let detallesApartamento = respuestaServidor?.ok

                let apartamentoUI = detallesApartamento.apartamentoUI
                let apartamentoIDV = detallesApartamento.apartamentoIDV
                let precioNetoPorDia = detallesApartamento.precioNetoPorDia
                let totalImpuestos = detallesApartamento.totalImpuestos
                let totalBrutoPordia = detallesApartamento.totalBrutoPordia
                let impuestos = detallesApartamento.impuestos

                let selectorEspacioPreciosEImpuestos = document.querySelector("[componente=precios]")

                let bloqueContenedorHorizontal = document.createElement("div")
                bloqueContenedorHorizontal.classList.add("preciosEImpuestosDetalleApartamentoBloqueHorizontal")

                let bloqueDetallesApartamento = document.createElement("div")
                bloqueDetallesApartamento.classList.add("preciosEImpuestosDetalleApartamentoDetallesApartmento")
                bloqueDetallesApartamento.setAttribute("componente", "contenedorDetallesApartamento")
                bloqueDetallesApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                let tituloApartamento = document.createElement("p")
                tituloApartamento.classList.add("preciosEImpuestosDetalleApartamentoTituloApartamento")
                tituloApartamento.innerText = apartamentoUI
                bloqueDetallesApartamento.appendChild(tituloApartamento)
                // precio neto por dia
                let bloqueDato = document.createElement("div")
                bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDato")

                let tituloDato = document.createElement("div")
                tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                tituloDato.innerText = "Precio neto por noche"
                bloqueDato.appendChild(tituloDato)

                let precioDato = document.createElement("p")
                precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumero")
                precioDato.setAttribute("componentePrecio", "precioNetoPorDia")
                precioDato.innerText = precioNetoPorDia
                bloqueDato.appendChild(precioDato)
                bloqueDetallesApartamento.appendChild(bloqueDato)

                // total impuestos
                bloqueDato = document.createElement("div")
                bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDato")

                tituloDato = document.createElement("div")
                tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                tituloDato.innerText = "Total impuestos por noche"
                bloqueDato.appendChild(tituloDato)


                precioDato = document.createElement("p")
                precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumero")
                precioDato.setAttribute("componentePrecio", "totalImpuestos")
                precioDato.innerText = totalImpuestos
                bloqueDato.appendChild(precioDato)
                bloqueDetallesApartamento.appendChild(bloqueDato)

                // total bruto por dia
                bloqueDato = document.createElement("div")
                bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDato")

                tituloDato = document.createElement("div")
                tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")

                tituloDato.innerText = "Total bruto por noche"
                bloqueDato.appendChild(tituloDato)


                precioDato = document.createElement("p")
                precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumero")
                precioDato.setAttribute("componentePrecio", "totalBrutoPordia")

                precioDato.innerText = totalBrutoPordia
                bloqueDato.appendChild(precioDato)
                bloqueDetallesApartamento.appendChild(bloqueDato)


                let bloqueBotones = document.createElement("div")
                bloqueBotones.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueBotones")
                bloqueBotones.setAttribute("componente", "bloqueBotones")

                let boton = document.createElement("div")
                boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                boton.innerText = "Modificar precio"
                boton.setAttribute("componente", "botonModificar")
                boton.addEventListener("click", casaVitini.administracion.precios.nuevoPrecioApartamentoUI)
                bloqueBotones.appendChild(boton)

                boton = document.createElement("div")
                boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                boton.innerText = "Eliminar perfil de precio"
                boton.setAttribute("componente", "botonEliminarPerfilPrecio")
                boton.addEventListener("click", casaVitini.administracion.precios.eliminarPerfilPrecio.UI)
                bloqueBotones.appendChild(boton)

                boton = document.createElement("div")
                boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                boton.classList.add("elementoOcultoInicialmente")
                boton.setAttribute("componente", "botonCancelar")
                boton.addEventListener("click", casaVitini.administracion.precios.cancelarModificarPrecio)

                boton.innerText = "Cancelar"
                bloqueBotones.appendChild(boton)

                boton = document.createElement("div")
                boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                boton.classList.add("elementoOcultoInicialmente")
                boton.setAttribute("componente", "botonPrevisualizar")
                boton.innerText = "Simular nuevo precio"
                boton.addEventListener("click", casaVitini.administracion.precios.previsualizarPrecioApartamento)
                bloqueBotones.appendChild(boton)


                boton = document.createElement("div")
                boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                boton.classList.add("elementoOcultoInicialmente")
                boton.setAttribute("componente", "botonCancelarSimulacion")
                boton.innerText = "Dejar de simular precio"
                boton.addEventListener("click", casaVitini.administracion.precios.cancelarSimulacion)
                bloqueBotones.appendChild(boton)

                boton = document.createElement("div")
                boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                boton.classList.add("elementoOcultoInicialmente")
                boton.innerText = "Establecer nuevo precio neto"
                boton.addEventListener("click", casaVitini.administracion.precios.establecerNuevoPrecioNetoApartamento)
                boton.setAttribute("componente", "botonGuardar")
                bloqueBotones.appendChild(boton)

                boton = document.createElement("a")
                boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                boton.innerText = "Ir a la configuración del apartamento"
                boton.setAttribute("href", "administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                boton.setAttribute("vista", "administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                boton.addEventListener("click", casaVitini.componentes.cambiarVista)
                bloqueBotones.appendChild(boton)

                bloqueDetallesApartamento.appendChild(bloqueBotones)






                bloqueContenedorHorizontal.appendChild(bloqueDetallesApartamento)
                selectorEspacioPreciosEImpuestos.appendChild(bloqueContenedorHorizontal)


                let bloqueDetalles = document.createElement("div")
                bloqueDetalles.classList.add("preciosEImpuestosDetalleApartamentoDetallesApartmento")
                bloqueDetalles.setAttribute("componente", "bloqueDetallesImpuestos")


                let tituloImpuesto = document.createElement("div")
                tituloImpuesto.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloImpuesto")
                tituloImpuesto.innerText = "Impuestos Aplicados"
                bloqueDetalles.appendChild(tituloImpuesto)


                impuestos.map((detalleImpuesto) => {

                    let nombreImpuesto = detalleImpuesto.nombreImpuesto
                    let tipoImpositivo = detalleImpuesto.tipoImpositivo
                    let tipoValor = detalleImpuesto.tipoValor
                    let totalImpuesto = detalleImpuesto.totalImpuesto

                    let bloqueImpuesto = document.createElement("div")
                    bloqueImpuesto.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueImpuesto")

                    let tituloDato = document.createElement("div")
                    tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                    tituloDato.innerText = nombreImpuesto
                    bloqueImpuesto.appendChild(tituloDato)

                    let bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDatoImpuesto")

                    let tituloBloque = document.createElement("p")
                    tituloBloque.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloBloque")
                    tituloBloque.innerText = "Tipo impositivo"
                    bloqueDato.appendChild(tituloBloque)


                    let precioDato = document.createElement("p")
                    precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumeroImpuesto")
                    precioDato.innerText = tipoImpositivo
                    bloqueDato.appendChild(precioDato)

                    bloqueImpuesto.appendChild(bloqueDato)

                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDatoImpuesto")

                    tituloBloque = document.createElement("p")
                    tituloBloque.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloBloque")
                    tituloBloque.innerText = "Tipo valor"
                    bloqueDato.appendChild(tituloBloque)

                    precioDato = document.createElement("p")
                    precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumeroImpuesto")
                    precioDato.innerText = tipoValor
                    bloqueDato.appendChild(precioDato)
                    bloqueImpuesto.appendChild(bloqueDato)


                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDatoImpuesto")
                    bloqueDato.setAttribute("componente", "contenedorTotalImpuesto")
                    tituloBloque = document.createElement("p")
                    tituloBloque.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloBloque")
                    tituloBloque.innerText = "Total impuesto"
                    bloqueDato.appendChild(tituloBloque)

                    precioDato = document.createElement("p")
                    precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumeroImpuesto")
                    precioDato.setAttribute("componente", "totalImpuetoFinal")
                    precioDato.setAttribute("componentePrecio", nombreImpuesto)
                    precioDato.innerText = totalImpuesto
                    bloqueDato.appendChild(precioDato)

                    bloqueImpuesto.appendChild(bloqueDato)


                    bloqueDetalles.appendChild(bloqueImpuesto)




                })



                bloqueContenedorHorizontal.appendChild(bloqueDetalles)


            }

        },
        nuevoPrecioApartamentoUI: () => {

            let selectorBloqueBotones = document.querySelector("[componente=bloqueBotones]")
            let selectorcontenedorDetallesApartamento = document.querySelector("[componente=contenedorDetallesApartamento]")

            document.querySelector("[componente=botonModificar]").classList.add("elementoOcultoInicialmente")
            document.querySelector("[componente=botonEliminarPerfilPrecio]").classList.add("elementoOcultoInicialmente")

            document.querySelector("[componente=botonCancelar]").classList.remove("elementoOcultoInicialmente")
            document.querySelector("[componente=botonGuardar]").classList.remove("elementoOcultoInicialmente")
            document.querySelector("[componente=botonPrevisualizar]").classList.remove("elementoOcultoInicialmente")

            let contenedorNuevoPrecioUI = document.createElement("div")
            contenedorNuevoPrecioUI.classList.add("preciosEImpuestosDetalleApartamentoDetallesEntradaContenedorNuevoPrecioUI")
            contenedorNuevoPrecioUI.setAttribute("componente", "contenedorNuevoPrecio")
            let info = document.createElement("div")
            info.classList.add("preciosEImpuestosDetalleApartamentoDetallesEntradaContenedorInfo")
            info.innerText = "Escriba el nuevo precio en el campo de precio. Puedes previsualizar el precio antes de aplicarlo."

            contenedorNuevoPrecioUI.appendChild(info)

            let entradaNuevoPrecio = document.createElement("input")
            entradaNuevoPrecio.classList.add("preciosEImpuestosDetalleApartamentoDetallesEntradaNuevoPrecio")
            entradaNuevoPrecio.setAttribute("componente", "campoNuevoPrecio")
            entradaNuevoPrecio.placeholder = "00.00"
            contenedorNuevoPrecioUI.appendChild(entradaNuevoPrecio)
            selectorcontenedorDetallesApartamento.insertBefore(contenedorNuevoPrecioUI, selectorBloqueBotones);
        },
        previsualizarPrecioApartamento: async () => {

            let selectorCampoNuevoPrecio = document.querySelector("[componente=campoNuevoPrecio]")
            if (selectorCampoNuevoPrecio.value.length === 0 || selectorCampoNuevoPrecio.value === 0) {
                const error = "Establezca un precio primero"
                return casaVitini.ui.vistas.advertenciaInmersiva(error)
            }

            let selectorApartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
            const transaccion = {
                zona: "administracion/precios/previsualizarPrecioApartamento",
                "apartamentoIDV": selectorApartamentoIDV,
                "propuestaPrecio": Number(selectorCampoNuevoPrecio.value)
            }
            let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }

            if (respuestaServidor?.ok) {
                document.querySelector("[componente=botonCancelarSimulacion]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").style.background = "green"
                document.querySelector("[componente=botonPrevisualizar]").style.color = "white"


                let propuestaDetalles = respuestaServidor?.ok


                let precioNetoPorDiaPropuesto = propuestaDetalles.precioNetoPorDiaPropuesto
                selectorPrecioNetoPorDia = document.querySelector("[componentePrecio=precioNetoPorDia]")
                selectorPrecioNetoPorDia.style.color = "green"
                selectorPrecioNetoPorDia.innerText = precioNetoPorDiaPropuesto + " (Simulacíon)"


                let totalImpuestos = propuestaDetalles.totalImpuestos
                selectorTotalImpuestos = document.querySelector("[componentePrecio=totalImpuestos]")
                selectorTotalImpuestos.style.color = "green"

                selectorTotalImpuestos.innerText = totalImpuestos + " (Simulacíon)"

                let totalBrutoPordia = propuestaDetalles.totalBrutoPordia
                let selectorTotalBrutoPorDia = document.querySelector("[componentePrecio=totalBrutoPordia]")
                selectorTotalBrutoPorDia.style.color = "green"

                selectorTotalBrutoPorDia.innerText = totalBrutoPordia + " (Simulacíon)"

                let impuestosPorPropuesta = propuestaDetalles.impuestos
                impuestosPorPropuesta.map((impuestoPropuesta) => {
                    let nombreImpuesto = impuestoPropuesta.nombreImpuesto
                    let totalImpuesto = impuestoPropuesta.totalImpuesto
                    let selectorTotalImpuesto = document.querySelector(`[componentePrecio="${nombreImpuesto}"]`)
                    selectorTotalImpuesto.style.color = "green"
                    selectorTotalImpuesto.innerText = totalImpuesto + " (Simulacíon)"



                })





            }










        },
        establecerNuevoPrecioNetoApartamento: async () => {

            const selectorCampoNuevoPrecio = document.querySelector("[componente=campoNuevoPrecio]")
            if (selectorCampoNuevoPrecio.value.length === 0 || selectorCampoNuevoPrecio.value === 0) {
                const error = "Establezca un precio primero"
                return casaVitini.ui.vistas.advertenciaInmersiva(error)
            }


            const selectorApartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
            const transaccion = {
                zona: "administracion/precios/establecerNuevoPrecioApartamento",
                apartamentoIDV: selectorApartamentoIDV,
                nuevoPrecio: selectorCampoNuevoPrecio.value
            }
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }


            if (respuestaServidor?.ok) {

                document.querySelector("[componente=botonCancelarSimulacion]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").removeAttribute("style")

                document.querySelector("[componente=botonModificar]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[componente=botonEliminarPerfilPrecio]").classList.remove("elementoOcultoInicialmente")

                document.querySelector("[componente=botonCancelar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonGuardar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").classList.add("elementoOcultoInicialmente")

                document.querySelector("[componente=contenedorNuevoPrecio]")?.remove()


                let propuestaDetalles = respuestaServidor?.ok

                let precioNetoPorDia = propuestaDetalles.precioNetoPorDia
                let selectorPrecioNetoPorDia = document.querySelector("[componentePrecio=precioNetoPorDia]")
                selectorPrecioNetoPorDia.removeAttribute("style")
                selectorPrecioNetoPorDia.innerText = precioNetoPorDia


                let totalImpuestos = propuestaDetalles.totalImpuestos
                selectorTotalImpuestos = document.querySelector("[componentePrecio=totalImpuestos]")
                selectorTotalImpuestos.removeAttribute("style")

                selectorTotalImpuestos.innerText = totalImpuestos

                let totalBrutoPordia = propuestaDetalles.totalBrutoPordia
                let selectorTotalBrutoPorDia = document.querySelector("[componentePrecio=totalBrutoPordia]")
                selectorTotalBrutoPorDia.removeAttribute("style")

                selectorTotalBrutoPorDia.innerText = totalBrutoPordia

                let impuestosPorPropuesta = propuestaDetalles.impuestos
                impuestosPorPropuesta.map((impuestoPropuesta) => {
                    let nombreImpuesto = impuestoPropuesta.nombreImpuesto
                    let totalImpuesto = impuestoPropuesta.totalImpuesto
                    let selectorTotalImpuesto = document.querySelector(`[componentePrecio="${nombreImpuesto}"]`)
                    selectorTotalImpuesto.removeAttribute("style")
                    selectorTotalImpuesto.innerText = totalImpuesto



                })





            }









        },
        cancelarSimulacion: async () => {

            let apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
            const transaccion = {
                zona: "administracion/precios/detallePrecioBaseApartamento",
                "apartamentoIDV": apartamentoIDV
            }
            let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {
                document.querySelector("[componente=botonCancelarSimulacion]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").removeAttribute("style")

                let detallesApartamento = respuestaServidor?.ok

                let precioNetoPorDia = detallesApartamento.precioNetoPorDia
                let totalImpuestos = detallesApartamento.totalImpuestos
                let totalBrutoPordia = detallesApartamento.totalBrutoPordia
                let impuestos = detallesApartamento.impuestos


                let selectorPrecioNetoDiaUI = document.querySelector("[componentePrecio=precioNetoPorDia]")
                selectorPrecioNetoDiaUI.removeAttribute("style")

                selectorPrecioNetoDiaUI.innerText = precioNetoPorDia
                let totalImpuestosUI = document.querySelector("[componentePrecio=totalImpuestos]")
                totalImpuestosUI.removeAttribute("style")

                totalImpuestosUI.innerText = totalImpuestos
                let totalBrutoPordiaUI = document.querySelector("[componentePrecio=totalBrutoPordia]")
                totalBrutoPordiaUI.removeAttribute("style")

                totalBrutoPordiaUI.innerText = totalBrutoPordia


                impuestos.map((detalleImpuesto) => {

                    let nombreImpuesto = detalleImpuesto.nombreImpuesto
                    let totalImpuesto = detalleImpuesto.totalImpuesto

                    let selectorTotalImpuesto = document.querySelector(`[componentePrecio="${nombreImpuesto}"]`)
                    selectorTotalImpuesto.removeAttribute("style")

                    selectorTotalImpuesto.innerText = totalImpuesto


                })










            }








        },
        cancelarModificarPrecio: async () => {

            let apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
            const transaccion = {
                zona: "administracion/precios/detallePrecioBaseApartamento",
                "apartamentoIDV": apartamentoIDV
            }
            let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }


            if (respuestaServidor?.ok) {

                document.querySelector("[componente=botonCancelarSimulacion]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").removeAttribute("style")

                document.querySelector("[componente=botonModificar]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[componente=botonEliminarPerfilPrecio]").classList.remove("elementoOcultoInicialmente")

                document.querySelector("[componente=botonCancelar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonGuardar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").classList.add("elementoOcultoInicialmente")

                document.querySelector("[componente=contenedorNuevoPrecio]")?.remove()


                let propuestaDetalles = respuestaServidor?.ok

                let precioNetoPorDia = propuestaDetalles.precioNetoPorDia
                let selectorPrecioNetoPorDia = document.querySelector("[componentePrecio=precioNetoPorDia]")
                selectorPrecioNetoPorDia.removeAttribute("style")
                selectorPrecioNetoPorDia.innerText = precioNetoPorDia


                let totalImpuestos = propuestaDetalles.totalImpuestos
                selectorTotalImpuestos = document.querySelector("[componentePrecio=totalImpuestos]")
                selectorTotalImpuestos.removeAttribute("style")

                selectorTotalImpuestos.innerText = totalImpuestos

                let totalBrutoPordia = propuestaDetalles.totalBrutoPordia
                let selectorTotalBrutoPorDia = document.querySelector("[componentePrecio=totalBrutoPordia]")
                selectorTotalBrutoPorDia.removeAttribute("style")

                selectorTotalBrutoPorDia.innerText = totalBrutoPordia

                let impuestosPorPropuesta = propuestaDetalles.impuestos
                impuestosPorPropuesta.map((impuestoPropuesta) => {
                    let nombreImpuesto = impuestoPropuesta.nombreImpuesto
                    let totalImpuesto = impuestoPropuesta.totalImpuesto
                    let selectorTotalImpuesto = document.querySelector(`[componentePrecio="${nombreImpuesto}"]`)
                    selectorTotalImpuesto.removeAttribute("style")
                    selectorTotalImpuesto.innerText = totalImpuesto



                })





            }









        },
        eliminarPerfilPrecio: {
            "UI": () => {


                const advertenciaInmersivaIU = document.createElement("div")
                advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                const tituloCancelarReserva = document.createElement("p")
                tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                tituloCancelarReserva.innerText = "Confirmar la eliminacíon del perfil del precio del apartamento"
                contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)


                const bloqueBloqueoApartamentos = document.createElement("div")
                bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                const tituloBloquoApartamentos = document.createElement("div")
                tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                tituloBloquoApartamentos.innerText = "Vas a eliminar el perfil del precio de un apartamento, su aplicacion sera inmediata e impedira reservar el apartamento por que no se pueden reservar apartamento sin precio. Si estar de acuerdo con esta operacion confirma cuando quieras de lo contrailer cancela este proceso"
                bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                const bloqueBotones = document.createElement("div")
                bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                const botonCancelar = document.createElement("div")
                botonCancelar.classList.add("detallesReservaCancelarBoton")
                botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                botonCancelar.innerText = "Comfirmar la eliminacion"
                botonCancelar.addEventListener("click", casaVitini.administracion.precios.eliminarPerfilPrecio.confirmarEliminarPrecio)
                bloqueBotones.appendChild(botonCancelar)

                const botonCancelarProcesoCancelacion = document.createElement("div")
                botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion "
                botonCancelarProcesoCancelacion.addEventListener("click", () => {
                    let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                    selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                        advertenciaInmersiva.remove()
                    })
                })
                bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)

                document.body.appendChild(advertenciaInmersivaIU)




            },
            "confirmarEliminarPrecio": async () => {
                let apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                const transaccion = {
                    zona: "administracion/precios/eliminarPerfilPrecioApartamento",
                    "apartamentoIDV": apartamentoIDV
                }
                let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    casaVitini.componentes.limpiarAdvertenciasInmersivas()
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.ok) {
                    let entrada = {
                        "vista": "/administracion/precios",
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.componentes.controladorVista(entrada)
                }
            }
        },
        entrarDetallesApartamento: (apartamento) => {
            apartamento.stopPropagation()
            apartamento.preventDefault()
            const apartamentoIDV = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV");


            const vista = "/administracion/precios/apartamentos:" + apartamentoIDV
            const entrada = {
                "vista": vista,
                "tipoOrigen": "menuNavegador"
            }
            return casaVitini.componentes.controladorVista(entrada)
        },
    },
    impuestos: {
        arranque: async () => {
            const granuladoURL = casaVitini.componentes.granuladorURL()
            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            if (comandoInicial === "impuestos") {
                const transaccion = {
                    zona: "administracion/impuestos/listaImpuestos",
                    origen: "url",
                    tipoConstruccionGrid: "total",
                    ...granuladoURL.parametros
                }
                transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1

                if (transaccion.nombre_columna) {
                    transaccion.nombreColumna = transaccion.nombre_columna.replace(/_([a-z])/g, (match, group) => group.toUpperCase());
                    delete transaccion.nombre_columna
                }
                if (transaccion.sentido_columna) {
                    transaccion.sentidoColumna = transaccion.sentido_columna
                    delete transaccion.sentido_columna
                }


                casaVitini.administracion.impuestos.contenedorBotones()
                return casaVitini.administracion.impuestos.mostrarImpuestosResueltos(transaccion)
            }
            const soloDigitos = /^\d+$/;
            if (soloDigitos.test(comandoInicial)) {
                const transaccion = {
                    zona: "administracion/impuestos/detalleImpuesto",
                    impuestoUID: Number(comandoInicial)
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                return casaVitini.administracion.impuestos.detalleImpuesto(respuestaServidor)
            }
            const info = {
                titulo: "Impuesto inexistente",
                descripcion: "El impuesto al que hace referncia la URL no existe. Revisa el identifcador. Quizas fue un impuesto que tuvistes hace un tiempo y que borrastes"
            }
            return casaVitini.componentes.mensajeSimple(info)
        },
        mostrarImpuestosResueltos: async (transaccion) => {
            const origen = transaccion.origen
            delete transaccion.origen

            const granuladoURL = casaVitini.componentes.granuladorURL()


            const tipoConstruccionGrid = transaccion.tipoConstruccionGrid
            delete transaccion.tipoConstruccionGrid




            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }

            if (respuestaServidor?.totalImpuestos === 0) {
                const espacioClientes = document.querySelector("[componente=precios]")
                document.querySelector("[gridUID=gridImpuestos]")?.remove()
                document.querySelector("[componente=estadoBusqueda]")?.remove()

                const estadoBusquedaUI = document.createElement("div")
                estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                estadoBusquedaUI.innerText = "No hay impuestos configurados"
                espacioClientes.appendChild(estadoBusquedaUI)
                return
            }

            const impuestos = respuestaServidor.impuestos
            const sentidoColumna = respuestaServidor.sentidoColumna
            const nombreColumna = respuestaServidor.nombreColumna
            const pagina = respuestaServidor.pagina
            const paginasTotales = respuestaServidor.paginasTotales

            const columnasGrid = [
                {
                    columnaUI: "UID",
                    columnaIDV: "idv",
                    columnaClase: "idColumna"
                },
                {
                    columnaUI: "Impuesto",
                    columnaIDV: "impuesto",
                    columnaClase: "entradaColumna"
                },
                {
                    columnaUI: "Tipo Impositivo",
                    columnaIDV: "tipoImpositivo",
                    columnaClase: "salidaColuma"
                },
                {
                    columnaUI: "Tipo Valor",
                    columnaIDV: "tipoValor",
                    columnaClase: "estadoColumna"
                },
                {
                    columnaUI: "Aplicacion",
                    columnaIDV: "aplicacionSobre",
                    columnaClase: "pagoColumna"
                },
                {
                    columnaUI: "Moneda",
                    columnaIDV: "moneda",
                    columnaClase: "pagoColumna"
                }
            ]


            const parametrosFinales = {}

            if (pagina > 1 && paginasTotales > 1) {
                parametrosFinales.pagina = pagina
            }
            if (nombreColumna) {
                parametrosFinales.pagina = pagina
                parametrosFinales.nombre_columna = nombreColumna.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
                parametrosFinales.sentido_columna = sentidoColumna
            }
            const estructuraParametrosFinales = []
            for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                const estructura = `${parametroFinal}:${valorFinal}`
                estructuraParametrosFinales.push(estructura)
            }
            let parametrosURLFInal = ""
            if (estructuraParametrosFinales.length > 0) {
                parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
            }

            const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal


            const metadatosGrid = {
                filas: impuestos,
                sentidoColumna: sentidoColumna,
                nombreColumna: nombreColumna,
                tipoConstruccionGrid: tipoConstruccionGrid,
                pagina: pagina,
                destino: "[componente=espacioImpuestos]",
                columnasGrid: columnasGrid,
                gridUID: "gridImpuestos",
                numeroColumnas: 6,
                metodoColumna: "casaVitini.administracion.impuestos.ordenarPorColumna",
                metodoFila: "casaVitini.administracion.impuestos.resolverFila",
                mascaraHref: {
                    urlStatica: "/administracion/impuestos/",
                    parametro: "idv"
                },
                //mascaraURL: constructorURLFinal

            }
            casaVitini.componentes.ui.grid(metadatosGrid)


            const metadatosPaginador = {
                paginaActual: pagina,
                paginasTotales: paginasTotales,
                destino: "[componente=espacioImpuestos]",
                metodoBoton: "casaVitini.administracion.impuestos.cambiarPagina",
                prefijoHref: "/administracion/impuestos/",
                gridUID: "gridImpuestos",
                granuladoURL: {
                    parametros: parametrosFinales,
                    directoriosFusion: granuladoURL.directoriosFusion
                }
            }

            casaVitini.componentes.ui.paginador(metadatosPaginador)





            transaccion.tipoConstruccionGrid = "soloLista"
            const titulo = "ADminstar reservas"
            const estado = {
                zona: constructorURLFinal,
                EstadoInternoZona: "estado",
                tipoCambio: "parcial",
                conpontenteExistente: "contenedorBotonesImpuestos",
                funcionPersonalizada: "casaVitini.administracion.impuestos.mostrarImpuestosResueltos",
                datosPaginacion: transaccion
            }
            if (origen === "url" || origen === "botonMostrarClientes") {
                window.history.replaceState(estado, titulo, constructorURLFinal);
            }
            if (origen === "botonNumeroPagina" || origen === "tituloColumna") {
                window.history.pushState(estado, titulo, constructorURLFinal);
            }



        },
        resolverFila: (transaccion) => {
            transaccion.preventDefault()
            transaccion.stopPropagation()
            const impuestoUID = transaccion.target.parentNode.getAttribute("href")
            const navegacion = {
                vista: impuestoUID,
                tipoOrigen: "menuNavegador"
            }
            return casaVitini.componentes.controladorVista(navegacion)
        },
        detalleImpuesto: async (respuestaServidor) => {


            if (respuestaServidor?.error) {
                const info = {
                    titulo: "Impuesto inexistente",
                    descripcion: "El impuesto al que hace referncia la URL no existe. Revisa el identifcador. Quizas fue un impuesto que tuvistes hace un tiempo y que borrastes"
                }
                return casaVitini.componentes.mensajeSimple(info)
            }

            if (respuestaServidor?.ok) {

                let detallesImpuesto = respuestaServidor?.ok
                let impuestoUID = detallesImpuesto.impuestoUID
                let nombreImpuesto = detallesImpuesto.nombreImpuesto
                let tipoImpositivo = detallesImpuesto.tipoImpositivo

                let tipoValorUI = detallesImpuesto.tipoValorUI
                let tipoValorIDV = detallesImpuesto.tipoValorIDV
                let aplicacionSobreUI = detallesImpuesto.aplicacionSobreUI
                let aplicacionSobreIDV = detallesImpuesto.aplicacionSobreIDV
                let monedaUI = detallesImpuesto.monedaUI
                let monedaIDV = detallesImpuesto.monedaIDV

                let selectorEspacioPreciosEImpuestos = document.querySelector("[componente=impuestos]")

                let bloqueDetallesImpuesto = document.createElement("div")
                bloqueDetallesImpuesto.classList.add("detalleImpuestoBloque")
                bloqueDetallesImpuesto.setAttribute("impuestoUID", impuestoUID)
                bloqueDetallesImpuesto.setAttribute("componente", "bloqueDetalles")

                let nombreImpuestoUI = document.createElement("p")
                nombreImpuestoUI.classList.add("detalleImpuestoNombre")
                nombreImpuestoUI.setAttribute("detalleImpuesto", "nombreImpuesto")
                nombreImpuestoUI.innerText = nombreImpuesto
                bloqueDetallesImpuesto.appendChild(nombreImpuestoUI)

                let bloqueDato = document.createElement("div")
                bloqueDato.classList.add("detalleImpuestoBloqueDato")
                bloqueDato.setAttribute("bloqueDato", "tipoImpositivo")


                let tituloDato = document.createElement("p")
                tituloDato.classList.add("detalleImpuestoTituloDato")
                tituloDato.innerText = "Tipo impositivo"
                bloqueDato.appendChild(tituloDato)

                let datoLectura = document.createElement("p")
                datoLectura.classList.add("detalleImpuestoDatoLectura")
                datoLectura.setAttribute("detalleImpuesto", "tipoImpositivo")
                datoLectura.innerText = tipoImpositivo
                bloqueDato.appendChild(datoLectura)
                bloqueDetallesImpuesto.appendChild(bloqueDato)

                bloqueDato = document.createElement("div")
                bloqueDato.classList.add("detalleImpuestoBloqueDato")
                bloqueDato.setAttribute("bloqueDato", "tipoValor")


                tituloDato = document.createElement("p")
                tituloDato.classList.add("detalleImpuestoTituloDato")
                tituloDato.innerText = "Tipo valor"
                bloqueDato.appendChild(tituloDato)

                datoLectura = document.createElement("p")
                datoLectura.classList.add("detalleImpuestoDatoLectura")
                datoLectura.setAttribute("detalleImpuesto", "tipoValor")
                datoLectura.setAttribute("tipoValorIDV", tipoValorIDV)

                datoLectura.innerText = tipoValorUI
                bloqueDato.appendChild(datoLectura)
                bloqueDetallesImpuesto.appendChild(bloqueDato)

                bloqueDato = document.createElement("div")
                bloqueDato.classList.add("detalleImpuestoBloqueDato")
                bloqueDato.setAttribute("bloqueDato", "aplicacionSobre")

                tituloDato = document.createElement("p")
                tituloDato.classList.add("detalleImpuestoTituloDato")
                tituloDato.innerText = "Aplicacion"
                bloqueDato.appendChild(tituloDato)

                datoLectura = document.createElement("p")
                datoLectura.classList.add("detalleImpuestoDatoLectura")
                datoLectura.setAttribute("detalleImpuesto", "aplicacionSobre")
                datoLectura.setAttribute("aplicacionSobreIDV", aplicacionSobreIDV)

                datoLectura.innerText = aplicacionSobreUI
                bloqueDato.appendChild(datoLectura)
                bloqueDetallesImpuesto.appendChild(bloqueDato)

                bloqueDato = document.createElement("div")
                bloqueDato.classList.add("detalleImpuestoBloqueDato")
                bloqueDato.setAttribute("bloqueDato", "moneda")


                tituloDato = document.createElement("p")
                tituloDato.classList.add("detalleImpuestoTituloDato")
                tituloDato.innerText = "Moneda"
                bloqueDato.appendChild(tituloDato)

                datoLectura = document.createElement("p")
                datoLectura.classList.add("detalleImpuestoDatoLectura")
                datoLectura.setAttribute("detalleImpuesto", "moneda")
                datoLectura.setAttribute("monedaIDV", monedaIDV)
                datoLectura.innerText = monedaUI
                bloqueDato.appendChild(datoLectura)
                bloqueDetallesImpuesto.appendChild(bloqueDato)

                selectorEspacioPreciosEImpuestos.appendChild(bloqueDetallesImpuesto)

                let bloqueBotones = document.createElement("div")
                bloqueBotones.classList.add("detalleImpuestoBloqueBotones")

                let boton = document.createElement("p")
                boton.classList.add("detalleImpuestoBoton")
                boton.setAttribute("boton", "editarImpuesto")

                boton.innerText = "Editar impuesto"
                boton.addEventListener("click", casaVitini.administracion.impuestos.editarImpuesto)
                bloqueBotones.appendChild(boton)

                boton = document.createElement("p")
                boton.classList.add("detalleImpuestoBoton")
                boton.classList.add("elementoOcultoInicialmente")
                boton.setAttribute("boton", "guardarCambios")
                boton.addEventListener("click", casaVitini.administracion.impuestos.guardarModificacionesImpuesto)
                boton.innerText = "Guardar cambios"
                bloqueBotones.appendChild(boton)

                boton = document.createElement("p")
                boton.classList.add("detalleImpuestoBoton")
                boton.classList.add("elementoOcultoInicialmente")
                boton.setAttribute("boton", "cancelarCambios")
                boton.addEventListener("click", casaVitini.administracion.impuestos.cancelarCambiosImpuesto)

                boton.innerText = "Cancelar cambios"
                bloqueBotones.appendChild(boton)

                boton = document.createElement("p")
                boton.classList.add("detalleImpuestoBoton")
                boton.classList.add("elementoOcultoInicialmente")
                boton.setAttribute("boton", "eliminarImpuesto")
                boton.addEventListener("click", casaVitini.administracion.impuestos.eliminarPerfilImpuestos.UI)
                boton.innerText = "Eliminar impuesto"
                bloqueBotones.appendChild(boton)

                selectorEspacioPreciosEImpuestos.appendChild(bloqueBotones)

            }


        },
        editarImpuesto: async () => {
            document.querySelector("[boton=editarImpuesto]").classList.add("elementoOcultoInicialmente")
            document.querySelector("[boton=guardarCambios]").classList.remove("elementoOcultoInicialmente")
            document.querySelector("[boton=cancelarCambios]").classList.remove("elementoOcultoInicialmente")
            document.querySelector("[boton=eliminarImpuesto]").classList.remove("elementoOcultoInicialmente")
            const impuestoUID = document.querySelector("[impuestoUID]").getAttribute("impuestoUID")
            const transaccion = {
                zona: "administracion/impuestos/opcionesEditarImpuesto",
                impuestoUID: Number(impuestoUID)
            }

            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }


            if (respuestaServidor?.ok) {
                let opcionesTipoValor = respuestaServidor?.ok.tipoValor
                let opcionesAplicacionSobre = respuestaServidor?.ok.aplicacionSobre
                let opcionesMoneda = respuestaServidor?.ok.moneda

                let selectorDatoLectura = [...document.querySelectorAll("[detalleImpuesto]")]
                selectorDatoLectura.map((detalleImpuesto) => {
                    detalleImpuesto.style.display = "none"
                    let nombreDetalles = detalleImpuesto.getAttribute("detalleImpuesto")
                    let datoDetalle = detalleImpuesto.innerText
                    let campoEditable = document.createElement("input")
                    campoEditable.classList.add("detalleImpuestoCampoEditable")
                    campoEditable.setAttribute("componente", "campoEditable")
                    campoEditable.setAttribute("campoEditable", nombreDetalles)
                    campoEditable.setAttribute("datoActual", datoDetalle)
                    campoEditable.placeholder = datoDetalle

                    if (nombreDetalles === "nombreImpuesto") {
                        let selectorBloqueDetalles = document.querySelector("[componente=bloqueDetalles")
                        let selectorPrimerBloqueDAtos = document.querySelector("[bloqueDato=tipoImpositivo]")
                        selectorBloqueDetalles.insertBefore(campoEditable, selectorPrimerBloqueDAtos);
                    }

                    if (nombreDetalles === "tipoValor") {
                        let tipoValorIDV = detalleImpuesto.getAttribute("tipoValorIDV")
                        let contenedorOpciones = document.createElement("select")
                        contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                        contenedorOpciones.setAttribute("componente", "campoEditable")
                        contenedorOpciones.setAttribute("campoEditable", nombreDetalles)
                        contenedorOpciones.setAttribute("datoActual", tipoValorIDV)

                        opcionesTipoValor.map((opcionTipoValor) => {
                            let tipoValorIDV = opcionTipoValor.tipoValorIDV
                            let tipoValorUI = opcionTipoValor.tipoValorUI
                            let simbolo = opcionTipoValor.simbolo

                            let opcion = document.createElement("option");
                            opcion.value = tipoValorIDV;
                            opcion.text = tipoValorUI;
                            opcion.setAttribute("opcion", tipoValorIDV)
                            contenedorOpciones.add(opcion);
                        })

                        contenedorOpciones.value = tipoValorIDV;

                        let selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(contenedorOpciones)
                        if (nombreDetalles === "tipoImpositivo") {
                            let selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                            selectorBloqueDato.appendChild(campoEditable)
                        }
                    }


                    if (nombreDetalles === "aplicacionSobre") {
                        let aplicacionSobreIDV = detalleImpuesto.getAttribute("aplicacionSobreIDV")
                        let contenedorOpciones = document.createElement("select")
                        contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                        contenedorOpciones.setAttribute("componente", "campoEditable")
                        contenedorOpciones.setAttribute("campoEditable", nombreDetalles)
                        contenedorOpciones.setAttribute("datoActual", aplicacionSobreIDV)


                        opcionesAplicacionSobre.map((opcionAplicacionSobre) => {
                            let aplicacionIDV = opcionAplicacionSobre.aplicacionIDV
                            let aplicacionUI = opcionAplicacionSobre.aplicacionUI

                            let opcion = document.createElement("option");
                            opcion.value = aplicacionIDV;
                            opcion.text = aplicacionUI;
                            opcion.setAttribute("opcion", aplicacionIDV)
                            contenedorOpciones.add(opcion);

                        })
                        contenedorOpciones.value = aplicacionSobreIDV;

                        let selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(contenedorOpciones)
                        if (nombreDetalles === "tipoImpositivo") {
                            let selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                            selectorBloqueDato.appendChild(campoEditable)
                        }


                    }

                    if (nombreDetalles === "moneda") {
                        let monedaIDV = detalleImpuesto.getAttribute("monedaIDV")

                        let contenedorOpciones = document.createElement("select")
                        contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                        contenedorOpciones.setAttribute("componente", "campoEditable")
                        contenedorOpciones.setAttribute("campoEditable", nombreDetalles)
                        contenedorOpciones.setAttribute("datoActual", monedaIDV)

                        opcionesMoneda.map((opcionMoneda) => {
                            let monedaIDV = opcionMoneda.monedaIDV
                            let monedaUI = opcionMoneda.monedaUI
                            let simbolo = opcionMoneda.simbolo

                            let opcion = document.createElement("option");
                            opcion.value = monedaIDV;
                            opcion.text = `${monedaUI} (${simbolo})`;
                            opcion.setAttribute("opcion", monedaIDV)
                            contenedorOpciones.add(opcion);
                        })
                        contenedorOpciones.value = monedaIDV;

                        let selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(contenedorOpciones)
                        if (nombreDetalles === "tipoImpositivo") {
                            let selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                            selectorBloqueDato.appendChild(campoEditable)
                        }

                    }

                    if (nombreDetalles === "tipoImpositivo") {
                        let selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(campoEditable)
                    }
                })
            }

        },
        cancelarCambiosImpuesto: () => {

            document.querySelector("[boton=editarImpuesto]").classList.remove("elementoOcultoInicialmente")
            document.querySelector("[boton=guardarCambios]").classList.add("elementoOcultoInicialmente")
            document.querySelector("[boton=cancelarCambios]").classList.add("elementoOcultoInicialmente")
            document.querySelector("[boton=eliminarImpuesto]").classList.add("elementoOcultoInicialmente")

            let selectorCamposEditables = [...document.querySelectorAll("[componente=campoEditable]")]
            selectorCamposEditables.map((campoEditable) => {
                campoEditable.remove()

            })

            let selectorDatoLectura = [...document.querySelectorAll("[detalleImpuesto]")]
            selectorDatoLectura.map((detalleImpuesto) => {
                detalleImpuesto.removeAttribute("style")

            })

        },
        guardarModificacionesImpuesto: async () => {
            const impuestoUID = document.querySelector("[impuestoUID]").getAttribute("impuestoUID")

            const transaccion = {
                zona: "administracion/impuestos/guardarModificacionImpuesto",
                "impuestoUID": Number(impuestoUID)
            }

            const selectorCamposEditables = [...document.querySelectorAll("[componente=campoEditable]")]
            selectorCamposEditables.map(campoEditable => {
                let datoActual = campoEditable.getAttribute("datoActual")
                let nombreCampoEditable = campoEditable.getAttribute("campoEditable")
                let datoCampoEditable = campoEditable.value

                if (datoCampoEditable && datoCampoEditable !== datoActual) {
                    transaccion[nombreCampoEditable] = datoCampoEditable

                }
            })

            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }

            if (respuestaServidor?.ok) {
                let detalleImpuestoActualizado = respuestaServidor?.detallesImpuesto

                let nombreImpuesto = detalleImpuestoActualizado.nombreImpuesto
                let tipoImpositivo = detalleImpuestoActualizado.tipoImpositivo
                let tipoValorIDV = detalleImpuestoActualizado.tipoValorIDV
                let tipoValorUI = detalleImpuestoActualizado.tipoValorUI
                let aplicacionSobreIDV = detalleImpuestoActualizado.aplicacionSobreIDV
                let aplicacionSobreUI = detalleImpuestoActualizado.aplicacionSobreUI
                let monedaIDV = detalleImpuestoActualizado.monedaIDV
                let monedaUI = detalleImpuestoActualizado.monedaUI

                let selectorCamposEditables = [...document.querySelectorAll("[componente=campoEditable]")]
                selectorCamposEditables.map(campoEditable => campoEditable.remove())


                let selectorNombreImpuesto = document.querySelector("[detalleImpuesto=nombreImpuesto]")
                //selectorNombreImpuesto.setAttribute("detalleImpuesto", nombreImpuesto)
                selectorNombreImpuesto.innerText = nombreImpuesto

                let selectotipoImpositivo = document.querySelector("[detalleImpuesto=tipoImpositivo]")
                //        selectotipoImpositivo.setAttribute("detalleImpuesto", tipoImpositivo)
                selectotipoImpositivo.innerText = tipoImpositivo

                let selectortipoValor = document.querySelector("[detalleImpuesto=tipoValor]")
                selectortipoValor.setAttribute("tipoValorIDV", tipoValorIDV)
                selectortipoValor.innerText = tipoValorUI

                let selectoraplicacionSobre = document.querySelector("[detalleImpuesto=aplicacionSobre]")
                selectoraplicacionSobre.setAttribute("aplicacionSobreIDV", aplicacionSobreIDV)
                selectoraplicacionSobre.innerText = aplicacionSobreUI

                let selectorMoneda = document.querySelector("[detalleImpuesto=moneda]")
                selectorMoneda.setAttribute("monedaIDV", monedaIDV)
                selectorMoneda.innerText = monedaUI

                let selectorDatoLectura = [...document.querySelectorAll("[detalleImpuesto]")]
                selectorDatoLectura.map((detalleImpuesto) => {
                    detalleImpuesto.removeAttribute("style")
                })
                document.querySelector("[boton=editarImpuesto]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[boton=guardarCambios]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[boton=cancelarCambios]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[boton=eliminarImpuesto]").classList.add("elementoOcultoInicialmente")
            }

        },
        eliminarPerfilImpuestos: {
            "UI": () => {

                const advertenciaInmersivaIU = document.createElement("div")
                advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                const tituloCancelarReserva = document.createElement("p")
                tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                tituloCancelarReserva.innerText = "Elimiar impuesto"
                contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                const bloqueBloqueoApartamentos = document.createElement("div")
                bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                const tituloBloquoApartamentos = document.createElement("div")
                tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                tituloBloquoApartamentos.innerText = "Vas a eliminar un impuesto y su aplicacion sera inmediata en los precios de las reservas"

                bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                const bloqueBotones = document.createElement("div")
                bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                const botonCancelar = document.createElement("div")
                botonCancelar.classList.add("detallesReservaCancelarBoton")
                botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                botonCancelar.innerText = "Confirmar y eliminar impuesto"
                botonCancelar.addEventListener("click", casaVitini.administracion.impuestos.eliminarPerfilImpuestos.confirmarEliminacion)
                bloqueBotones.appendChild(botonCancelar)

                const botonCancelarProcesoCancelacion = document.createElement("div")
                botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion del impuesto"
                botonCancelarProcesoCancelacion.addEventListener("click", () => {
                    let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                    selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                        advertenciaInmersiva.remove()
                    })
                })
                bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                document.body.appendChild(advertenciaInmersivaIU)
            },
            confirmarEliminacion: async () => {
                const impuestoUID = document.querySelector("[impuestoUID]").getAttribute("impuestoUID")
                const transaccion = {
                    zona: "administracion/impuestos/eliminarPerfilImpuesto",
                    impuestoUID: Number(impuestoUID)
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.ok) {
                    const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                    selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                        advertenciaInmersiva.remove()
                    })

                    const entrada = {
                        vista: "/administracion/impuestos",
                        tipoOrigen: "menuNavegador"
                    }
                    casaVitini.componentes.controladorVista(entrada)
                }
            }
        },
        crearImpuesto: {
            arranque: async () => {
                const transacion = {
                    zona: "administracion/impuestos/opcionesCrearImpuesto"
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transacion)
                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    let opcionesDisponbiles = respuestaServidor?.ok
                    let opcionesTipoValor = opcionesDisponbiles.tipoValor
                    let opcionesAplicacionSobre = opcionesDisponbiles.aplicacionSobre
                    let opcionesMoneda = opcionesDisponbiles.moneda

                    const selectorEspacioImpuestos = document.querySelector("[componente=espacioImpuestos]")

                    const contenedorNuevoImpuesto = document.createElement("div")
                    contenedorNuevoImpuesto.classList.add("contenedorAdvertencaiInmersiva")

                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = "Para crear un nuevo impuesto rellene los datos de este, estableca un nombre, una cantidad y seleccione las opciones restantes"
                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                    let campoCraerNuevoImpuesto = document.createElement("input")
                    campoCraerNuevoImpuesto.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto")
                    campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "nombreImpuesto")
                    campoCraerNuevoImpuesto.placeholder = "Escribo el nombre del nuevo impuesto"
                    bloqueBloqueoApartamentos.appendChild(campoCraerNuevoImpuesto)

                    campoCraerNuevoImpuesto = document.createElement("input")
                    campoCraerNuevoImpuesto.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto")
                    campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "tipoImpositivo")
                    campoCraerNuevoImpuesto.placeholder = "0.00"
                    bloqueBloqueoApartamentos.appendChild(campoCraerNuevoImpuesto)

                    let contenedorOpciones = document.createElement("select")
                    contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                    contenedorOpciones.setAttribute("comNuevoImpuesto", "tipoValor")

                    opcionesTipoValor.map((opcionTipoValor) => {
                        let tipoValorIDV = opcionTipoValor.tipoValorIDV
                        let tipoValorUI = opcionTipoValor.tipoValorUI
                        const opcion = document.createElement("option");
                        opcion.value = tipoValorIDV;
                        opcion.text = tipoValorUI;
                        opcion.setAttribute("opcion", tipoValorIDV)
                        contenedorOpciones.add(opcion);
                    })
                    bloqueBloqueoApartamentos.appendChild(contenedorOpciones)

                    contenedorOpciones = document.createElement("select")
                    contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                    contenedorOpciones.setAttribute("comNuevoImpuesto", "aplicacionSobre")
                    opcionesAplicacionSobre.map((opcionAplicacionSobre) => {
                        let aplicacionIDV = opcionAplicacionSobre.aplicacionIDV
                        let aplicacionUI = opcionAplicacionSobre.aplicacionUI
                        const opcion = document.createElement("option");
                        opcion.value = aplicacionIDV;
                        opcion.text = aplicacionUI;
                        opcion.setAttribute("opcion", aplicacionIDV)
                        contenedorOpciones.add(opcion);
                    })
                    bloqueBloqueoApartamentos.appendChild(contenedorOpciones)

                    contenedorOpciones = document.createElement("select")
                    contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                    contenedorOpciones.setAttribute("comNuevoImpuesto", "moneda")
                    opcionesMoneda.map((opcionMoneda) => {
                        let monedaIDV = opcionMoneda.monedaIDV
                        let monedaUI = opcionMoneda.monedaUI
                        let simbolo = opcionMoneda.simbolo
                        const opcion = document.createElement("option");
                        opcion.value = monedaIDV;
                        opcion.text = `${monedaUI} (${simbolo})`;
                        opcion.setAttribute("opcion", monedaIDV)
                        contenedorOpciones.add(opcion);
                    })
                    bloqueBloqueoApartamentos.appendChild(contenedorOpciones)
                    contenedorNuevoImpuesto.appendChild(bloqueBloqueoApartamentos)

                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = "Crear nuevo impuesto"
                    botonCancelar.addEventListener("click", casaVitini.administracion.impuestos.crearImpuesto.confirmarCrearImpuesto)
                    bloqueBotones.appendChild(botonCancelar)

                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cancelar"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    //bloqueBotones.appendChild(botonCancelarProcesoCancelacion)



                    contenedorNuevoImpuesto.appendChild(bloqueBotones)
                    selectorEspacioImpuestos.appendChild(contenedorNuevoImpuesto)
                }

            },
            confirmarCrearImpuesto: async () => {
                const transaccion = {
                    zona: "administracion/impuestos/crearNuevoImpuesto"
                }
                let selectorCampos = [...document.querySelectorAll("[comNuevoImpuesto]")]
                selectorCampos.map((campoNuevoImpuesto) => {
                    let nombreCampo = campoNuevoImpuesto.getAttribute("comNuevoImpuesto")
                    let datoCampo = campoNuevoImpuesto.value
                    transaccion[nombreCampo] = datoCampo
                })

                let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)

                }

                if (respuestaServidor?.ok) {
                    const nuevoUIDIMpuesto = respuestaServidor?.nuevoImpuestoUID

                    const entrada = {
                        vista: "/administracion/impuestos/impuesto:" + nuevoUIDIMpuesto,
                        tipoOrigen: "menuNavegador"
                    }
                    casaVitini.componentes.controladorVista(entrada)

                }
            }
        },
        cambiarPagina: async (cambiarPagina) => {



            const gridUID = cambiarPagina.gridUID
            const gridEnlazado = document.querySelector(`[gridUID=${gridUID}]`)



            const tipoBoton = cambiarPagina.componenteID
            const nombreColumna = gridEnlazado.getAttribute("nombreColumnaSeleccionada")
            const sentidoColumna = gridEnlazado.getAttribute("sentidoColumna")
            const terminoBusqueda = gridEnlazado.getAttribute("terminoBusqueda")
            const paginaActual = Number(gridEnlazado.getAttribute("numeroPagina"))

            const transacccion = {
                nombreColumna: nombreColumna,
                sentidoColumna: sentidoColumna,
                buscar: terminoBusqueda,
                tipoBusqueda: "rapido",
            }

            if (tipoBoton === "numeroPagina") {
                const numeroPagina = cambiarPagina.numeroPagina
                transacccion.pagina = Number(numeroPagina)
                transacccion.origen = "botonNumeroPagina"
            }
            if (tipoBoton === "botonAdelantePaginacion") {
                const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                let mueveNavegadorHaciaAdelante = "Desactivado";
                if (Number(posicionRelativa) === 10) {
                    mueveNavegadorHaciaAdelante = "Activado"
                }
                transacccion.pagina = paginaActual + 1

                transacccion.origen = "botonNumeroPagina"
                transacccion.moverHaciaAdelanteNavegacion = mueveNavegadorHaciaAdelante
                transacccion.sentidoNavegacion = "Adelante"
            }
            if (tipoBoton === "botonAtrasPaginacion") {
                const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                let mueveNavegadorHaciaAtras = "Desactivado";
                if (Number(posicionRelativa) === 1) {
                    mueveNavegadorHaciaAtras = "Activado"
                }
                transacccion.pagina = paginaActual - 1
                transacccion.origen = "botonNumeroPagina"
                transacccion.mueveNavegadorHaciaAtras = mueveNavegadorHaciaAtras
                transacccion.sentidoNavegacion = "Atras"
            }
            transacccion.tipoConstruccionGrid = "soloLista"
            transacccion.zona = "administracion/impuestos/listaImpuestos"

            return casaVitini.administracion.impuestos.mostrarImpuestosResueltos(transacccion)


        },
        ordenarPorColumna: async (columna) => {
            const nombreColumna = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("nombreColumna")
            const selectorColumnasentido = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("sentidoColumna")
            const numeroPagina = columna.target.closest("[gridUID]").getAttribute("numeroPagina")

            const transaccion = {
                zona: "administracion/impuestos/listaImpuestos",
                pagina: Number(numeroPagina),
                tipoConstruccionGrid: "soloLista",
                origen: "tituloColumna"
            }
            if (selectorColumnasentido === "ascendente") {
                transaccion.sentidoColumna = "descendente"
                transaccion.nombreColumna = nombreColumna
            }
            if (!selectorColumnasentido) {
                transaccion.sentidoColumna = "ascendente"
                transaccion.nombreColumna = nombreColumna
            }

            casaVitini.administracion.impuestos.mostrarImpuestosResueltos(transaccion)
        },
        contenedorBotones: () => {
            const espacioImpuestos = document.querySelector("[componente=espacioImpuestos]")

            const contenedorBotones = document.createElement("div")
            contenedorBotones.classList.add("administracion_impuestos_contenedorBotones")
            contenedorBotones.setAttribute("componente", "contenedorBotonesImpuestos")

            const botonCrearImpuesto = document.createElement("a")
            botonCrearImpuesto.classList.add("administracion_impuestos_botonV1")
            botonCrearImpuesto.innerText = "Crear impuesto"
            botonCrearImpuesto.setAttribute("href", "/administracion/impuestos/crear_nuevo_impuesto")
            botonCrearImpuesto.setAttribute("vista", "/administracion/impuestos/crear_nuevo_impuesto")
            botonCrearImpuesto.addEventListener("click", casaVitini.componentes.cambiarVista)

            contenedorBotones.appendChild(botonCrearImpuesto)
            espacioImpuestos.appendChild(contenedorBotones)
        }
    },
    gestion_de_ofertas: {
        arranque: async () => {
            const granuladoURL = casaVitini.componentes.granuladorURL()
            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            if (comandoInicial === "gestion_de_ofertas" && Object.keys(granuladoURL.parametros).length === 0) {
                return casaVitini.administracion.gestion_de_ofertas.portadaUI()
            }
            if (granuladoURL.parametros.oferta) {
                return casaVitini.administracion.gestion_de_ofertas.detallesOferta.UI(granuladoURL.parametros.oferta)
            }

            const info = {
                titulo: "No existe ninguna oferta con ese identificador",
                descripcion: "La oferta que buscas con ese identificador no existe. Comprueba el identificador de la reserva"
            }
            return casaVitini.componentes.mensajeSimple(info)

        },
        "portadaUI": async () => {
            const espacioOfertas = document.querySelector("[componente=espacioOfertas]")

            const contenedor = document.createElement("div")
            contenedor.classList.add("gestionDeOfertasContenedor")

            const contenedorBotones = document.createElement("div")
            contenedorBotones.classList.add("gestionDeOfertasContenedorBotones")

            const botonCrearOfertas = document.createElement("a")
            botonCrearOfertas.classList.add("gestionDeOfertasBotonCrearOferta")
            botonCrearOfertas.innerText = "Crear una nueva oferta"
            botonCrearOfertas.setAttribute("href", "/administracion/gestion_de_ofertas/crear_oferta")
            botonCrearOfertas.setAttribute("vista", "/administracion/gestion_de_ofertas/crear_oferta")
            botonCrearOfertas.addEventListener("click", casaVitini.componentes.cambiarVista)

            contenedorBotones.appendChild(botonCrearOfertas)
            contenedor.appendChild(contenedorBotones)

            const contenedorOfertas = document.createElement("div")
            contenedorOfertas.classList.add("gestionDeOfertasContedorOfertas")
            contenedorOfertas.setAttribute("componente", "espacioListaOfertas")
            contenedor.appendChild(contenedorOfertas)

            espacioOfertas.appendChild(contenedor)

            const transaccion = {
                zona: "administracion/ofertas/listasOfertasAdministracion"
            }
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {
                const espacioListaOfertas = document.querySelector("[componente=espacioListaOfertas]")

                const ofertasEncontradas = respuestaServidor?.ok
                if (typeof ofertasEncontradas === "string") {

                    const ofertaUI = document.createElement("a")
                    ofertaUI.classList.add("ofertaUINoHay")
                    const tituloOferta = document.createElement("p")
                    tituloOferta.classList.add("ofertaUITituloOferta")
                    tituloOferta.innerText = "No hay ofertas configuradas"
                    ofertaUI.appendChild(tituloOferta)
                    espacioListaOfertas.appendChild(ofertaUI)

                }

                if (Array.isArray(ofertasEncontradas) && ofertasEncontradas.length > 0) {
                    ofertasEncontradas.map((detalleOferta) => {

                        const ofertaUID = detalleOferta.uid
                        const nombreOferta = detalleOferta.nombreOferta
                        const fechaInicio = detalleOferta.fechaInicio
                        const fechaFin = detalleOferta.fechaFin
                        const tipoOferta = detalleOferta.tipoOferta
                        const numero = detalleOferta.numero
                        const simboloNumero = detalleOferta.simboloNumero
                        const descuentoAplicadoA = detalleOferta.descuentoAplicadoA
                        const estadoOferta = detalleOferta.estadoOferta
                        const cantidad = detalleOferta.cantidad
                        const tipoDescuento = detalleOferta.tipoDescuento

                        let textoDefinicionOferta
                        let textoDefinicionDescuento


                        let detalleDescuento
                        if (tipoDescuento === "porcentaje") {
                            detalleDescuento = `un descuento con una rebaja del ${cantidad}%`
                        }
                        if (tipoDescuento === "cantidadFija") {
                            detalleDescuento = `una rebaja fija de ${cantidad}$`
                        }
                        const tipoOfertaUI = {
                            porNumeroDeApartamentos: "Por numero de apartamentos",
                            porApartamentosEspecificos: "Por apartamentos especificos",
                            porDiasDeAntelacion: "Por dias de antelacion",
                            porDiasDeReserva: "Por dias de reserva",
                            porRangoDeFechas: "Por rango de fecha",
                        }

                        textoDefinicionDescuento = `Esta oferta aplicara1 ${detalleDescuento} al total neto de la reserva`

                        if (tipoOferta === "porNumeroDeApartamentos") {
                            if (simboloNumero === "numeroExacto") {
                                textoDefinicionOferta = `Esta oferta se aplicará cuando se realice una reserva cuya fecha de entrada sea igual superior a ${fechaInicio} y fecha de salida sea inferior o igual a ${fechaFin} y se seleccionen ${numero} apartamentos en concreto, ni más ni menos `
                            }
                            if (simboloNumero === "aPartirDe") {
                                textoDefinicionOferta = `Esta oferta se aplicará cuando se realice una reserva cuya fecha de entrada sea igual superior a ${fechaInicio} y fecha de salida sea inferior o igual a ${fechaFin} y se seleccionen ${numero} apartamentos o mas `
                            }
                        }

                        if (tipoOferta === "porDiasDeAntelacion") {
                            if (simboloNumero === "numeroExacto") {
                                textoDefinicionOferta = `Esta oferta se aplicará cuando se realice una reserva entre el ${fechaInicio} y el ${fechaFin} y cuya fecha de entrada tenga ${numero} días de antelación exactos `
                            }
                            if (simboloNumero === "aPartirDe") {
                                textoDefinicionOferta = `Esta oferta se aplicará cuando se realice una reserva entre el ${fechaInicio} y el ${fechaFin} y cuya fecha de entrada tenga ${numero} días de antelación o mas `
                            }
                        }

                        if (tipoOferta === "porDiasDeReserva") {


                            if (simboloNumero === "numeroExacto") {
                                let textoFinalDias
                                if (numero === "1") {
                                    textoFinalDias = ` ${numero} día exacto`
                                } else {
                                    textoFinalDias = ` ${numero} días exactos`
                                }

                                textoDefinicionOferta = `Esta oferta se aplicará cuando se realice una reserva entre el ${fechaInicio} y el ${fechaFin} y la reserva tenga ${textoFinalDias}.`
                            }
                            if (simboloNumero === "aPartirDe") {
                                let textoFinalDias
                                if (numero === "1") {
                                    textoFinalDias = ` ${numero} día o mas`
                                } else {
                                    textoFinalDias = ` ${numero} días o mas`
                                }
                                textoDefinicionOferta = `Esta oferta se aplicará cuando se realice una reserva entre el ${fechaInicio} y el ${fechaFin} y la reserva tenga ${textoFinalDias}`
                            }
                        }


                        if (tipoOferta === "porRangoDeFechas") {
                            textoDefinicionOferta = `Esta oferta aplicara ${detalleDescuento} al total neto de cada día con noche de la reserva que este dentro del rango de esta oferta. Es decir, se aplicada un descuento al neto de cada día con noche de la reserva que este entre el ${fechaInicio} y el ${fechaFin}.`


                        }
                        if (tipoOferta === "porApartamentosEspecificos") {

                            let apartamentosDedicados = detalleOferta.apartamentosDedicados
                            let apartamentosSeleccionados = []
                            apartamentosDedicados.map((apartamento) => {
                                let apartamentoUI = apartamento.apartamentoUI
                                apartamentosSeleccionados.push(apartamentoUI)
                            })

                            if (apartamentosSeleccionados.length === 1) {
                                textoDefinicionOferta = `Esta oferta se aplicará cuando se realice una reserva entre el ${fechaInicio} y el ${fechaFin} y se seleccione el ${numero} en concreto.`
                            }

                            if (apartamentosSeleccionados.length === 2) {
                                textoDefinicionOferta = `Esta oferta se aplicará cuando se realice una reserva entre el ${fechaInicio} y el ${fechaFin} y se seleccione el ${apartamentosSeleccionados[0]} y el ${apartamentosSeleccionados[1]} en concreto.`
                            }
                            if (apartamentosSeleccionados.length > 2) {
                                let funsionApartamentos = apartamentosSeleccionados.join(", el "); // Fusiona los elementos con comas
                                funsionApartamentos = funsionApartamentos.replace(/,([^,]*)$/, ' y $1');
                                textoDefinicionOferta = `Esta oferta se aplicará cuando se realice una reserva entre el ${fechaInicio} y el ${fechaFin} y se seleccione el ${funsionApartamentos} en concreto`
                            }

                        }

                        if (descuentoAplicadoA === "totalNetoApartmentoDedicado") {
                            let apartamentosDedicados = detalleOferta.apartamentosDedicados
                            let mensajesDescuentoApartamentos = []
                            apartamentosDedicados.map((apartamento) => {
                                let apartamentoUI = apartamento.apartamentoUI
                                let tipoDescuento = apartamento.tipoDescuento
                                let cantidadApartamento = apartamento.cantidadApartamento
                                let infoFinal;
                                if (tipoDescuento === "cantidadFija") {
                                    infoFinal = `una rebaja fija de ${cantidadApartamento}$ al neto del ${apartamentoUI}`
                                }
                                if (tipoDescuento === "porcentaje") {
                                    infoFinal = `un descuento de ${cantidadApartamento}% al neto del ${apartamentoUI}`
                                }
                                mensajesDescuentoApartamentos.push(infoFinal)
                            })

                            let funsionDescuentos = mensajesDescuentoApartamentos.join(", "); // Fusiona los elementos con comas
                            funsionDescuentos = funsionDescuentos.replace(/,([^,]*)$/, ' y $1');
                            textoDefinicionDescuento = `Esta oferta aplicara ${funsionDescuentos}`
                        }

                        const ofertaUI = document.createElement("a")
                        ofertaUI.classList.add("ofertaUI")
                        ofertaUI.setAttribute("ofertaUID", ofertaUID)
                        ofertaUI.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                        ofertaUI.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                        ofertaUI.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.traductorCambioVista)
                        const tituloOferta = document.createElement("p")
                        tituloOferta.classList.add("ofertaUITituloOferta")
                        tituloOferta.innerText = nombreOferta
                        ofertaUI.appendChild(tituloOferta)

                        const contenedorGlobalOferta = document.createElement("div")
                        contenedorGlobalOferta.classList.add("ofertaUIContenedorGlobalOferta")

                        //-------------------------------------
                        const contenedorDetalleOferta = document.createElement("div")
                        contenedorDetalleOferta.classList.add("ofertaUIContenedorDetalles")

                        //-------------------------------------
                        const fechaInicioContenedor = document.createElement("div")
                        fechaInicioContenedor.classList.add("ofertaUIFechaContenedor")

                        const tituloFechaInicio = document.createElement("div")
                        tituloFechaInicio.classList.add("ofertaUITituloFecha")
                        tituloFechaInicio.innerText = "Fecha de inicio"
                        fechaInicioContenedor.appendChild(tituloFechaInicio)

                        const datoFechaInicio = document.createElement("div")
                        datoFechaInicio.classList.add("ofertaUIDatoFecha")
                        datoFechaInicio.innerText = fechaInicio
                        fechaInicioContenedor.appendChild(datoFechaInicio)

                        contenedorDetalleOferta.appendChild(fechaInicioContenedor)

                        const fechaFinContenedor = document.createElement("div")
                        fechaFinContenedor.classList.add("ofertaUIFechaContenedor")

                        const tituloFechaFin = document.createElement("div")
                        tituloFechaFin.classList.add("ofertaUITituloFecha")
                        tituloFechaFin.innerText = "Fecha de Fin"
                        fechaFinContenedor.appendChild(tituloFechaFin)

                        const datoFechaFin = document.createElement("div")
                        datoFechaFin.classList.add("ofertaUIDatoFecha")
                        datoFechaFin.innerText = fechaFin
                        fechaFinContenedor.appendChild(datoFechaFin)

                        contenedorDetalleOferta.appendChild(fechaFinContenedor)

                        contenedorGlobalOferta.appendChild(contenedorDetalleOferta)

                        ofertaUI.appendChild(contenedorGlobalOferta)
                        //--------------------------------------
                        let contenedorPropiedadesOferta = document.createElement("div")
                        contenedorPropiedadesOferta.classList.add("ofertaUIContenedorPropiedades")

                        ///
                        let bloqueOpcion = document.createElement("div")
                        bloqueOpcion.classList.add("ofertaUIBloqueOpcion")

                        let tituloOpcion = document.createElement("p")
                        tituloOpcion.classList.add("ofertaUITituloOpcion")
                        tituloOpcion.innerText = "Tipo Oferta"
                        bloqueOpcion.appendChild(tituloOpcion)

                        let datoOpcion = document.createElement("p")
                        datoOpcion.classList.add("ofertaUIDatoOpcion")
                        datoOpcion.innerText = tipoOfertaUI[tipoOferta]
                        bloqueOpcion.appendChild(datoOpcion)

                        contenedorPropiedadesOferta.appendChild(bloqueOpcion)
                        //
                        bloqueOpcion = document.createElement("div")
                        bloqueOpcion.classList.add("ofertaUIBloqueOpcion")

                        tituloOpcion = document.createElement("p")
                        tituloOpcion.classList.add("ofertaUITituloOpcion")
                        tituloOpcion.innerText = "Estado de la oferta"
                        bloqueOpcion.appendChild(tituloOpcion)

                        datoOpcion = document.createElement("p")
                        datoOpcion.classList.add("ofertaUIDatoOpcion")
                        datoOpcion.innerText = estadoOferta
                        bloqueOpcion.appendChild(datoOpcion)

                        contenedorPropiedadesOferta.appendChild(bloqueOpcion)

                        contenedorGlobalOferta.appendChild(contenedorPropiedadesOferta)

                        contenedorPropiedadesOferta = document.createElement("div")
                        contenedorPropiedadesOferta.classList.add("ofertaUIContenedorPropiedades")

                        let informacionOfertaUI = document.createElement("div")
                        informacionOfertaUI.classList.add("informacionOfertaUI")

                        let tituloDefinicion = document.createElement("p")
                        tituloDefinicion.classList.add("ofertaUITituloDefinicion")
                        tituloDefinicion.innerText = "Definición oferta"
                        informacionOfertaUI.appendChild(tituloDefinicion)
                        contenedorPropiedadesOferta.appendChild(informacionOfertaUI)

                        let definicionOferta = document.createElement("p")
                        definicionOferta.classList.add("ofertaUIDefinicionOferta")
                        definicionOferta.innerText = textoDefinicionOferta
                        informacionOfertaUI.appendChild(definicionOferta)
                        contenedorPropiedadesOferta.appendChild(informacionOfertaUI)

                        informacionOfertaUI = document.createElement("div")
                        informacionOfertaUI.classList.add("informacionOfertaUI")

                        tituloDefinicion = document.createElement("p")
                        tituloDefinicion.classList.add("ofertaUITituloDefinicion")
                        tituloDefinicion.innerText = "Definición del descuento"
                        informacionOfertaUI.appendChild(tituloDefinicion)
                        contenedorPropiedadesOferta.appendChild(informacionOfertaUI)

                        definicionOferta = document.createElement("p")
                        definicionOferta.classList.add("ofertaUIDefinicionOferta")
                        definicionOferta.innerText = textoDefinicionDescuento
                        informacionOfertaUI.appendChild(definicionOferta)
                        contenedorPropiedadesOferta.appendChild(informacionOfertaUI)

                        contenedorGlobalOferta.appendChild(contenedorPropiedadesOferta)
                        espacioListaOfertas.appendChild(ofertaUI)
                    })
                }
            }


        },
        crearOferta: {
            arranque: () => {
                document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

                const selector = document.querySelector("[componente=espacioOfertas]")
                const ofertaUI = casaVitini.administracion.gestion_de_ofertas.detalleUI()
                selector.appendChild(ofertaUI)
                selector.setAttribute("modo", "crearOferta")
            },
            constructorCalendario: async (boton) => {
                let botonID = boton.target.closest("[componente]").getAttribute("componente")
                const alturaDinamicaArriba = casaVitini.componentes.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton.target.closest("[componente]"))
                const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
                const calendario = document.querySelector("[contenedor=calendario]")
                let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                if (botonID === "inicioOferta") {
                    if (calendario?.getAttribute("calendarioIO") === "entrada") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        return
                    }
                    if (calendario?.getAttribute("calendarioIO") === "salida") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        // return
                    }
                    let resolucionCalendario
                    if (fechaEntradaSelecionda) {
                        fechaEntradaSelecionda = JSON.parse(fechaEntradaSelecionda)

                        let mesEntradaSeleccionado = fechaEntradaSelecionda.mes
                        let anoEntradaSeleccionado = fechaEntradaSelecionda.ano
                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesEntradaSeleccionado),
                            ano: Number(anoEntradaSeleccionado)
                        }
                    } else {
                        resolucionCalendario = {
                            tipo: "actual",
                            comando: "construyeObjeto"
                        }

                    }
                    let metadatosCalendario = {
                        tipoFecha: "entrada",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaEntradaAsistidoConPasadoCrearOferta",
                        calendarioIO: "entrada",
                        mensajeInfo: "Selecciona la fecha de entrada para esta reserva nueva",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }


                    casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                    calendarioResuelvo.instanciaUID = instanciaUID
                    await casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)
                }
                if (botonID === "finOferta") {
                    if (calendario?.getAttribute("calendarioIO") === "salida") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        return
                    }
                    if (calendario?.getAttribute("calendarioIO") === "entrada") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        //return

                    }
                    let resolucionCalendario


                    if (fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                        fechaEntradaSelecionda = JSON.parse(fechaEntradaSelecionda)

                        let mesEntradaSeleccionado = fechaEntradaSelecionda.mes
                        let anoEntradaSeleccionado = fechaEntradaSelecionda.ano
                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesEntradaSeleccionado),
                            ano: Number(anoEntradaSeleccionado)
                        }
                    }



                    if (fechaSalidaSelecionda) {
                        fechaSalidaSelecionda = JSON.parse(fechaSalidaSelecionda)


                        let mesSalidaSeleccionado = fechaSalidaSelecionda.mes
                        let anoSalidaSeleccionado = fechaSalidaSelecionda.ano
                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesSalidaSeleccionado),
                            ano: Number(anoSalidaSeleccionado)
                        }
                    }


                    if (!fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                        resolucionCalendario = {
                            tipo: "actual",
                            comando: "construyeObjeto"
                        }
                    }

                    let metadatosCalendario = {
                        tipoFecha: "salida",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaSalidaAsistidoConPasadoCrearOferta",
                        calendarioIO: "salida",
                        mensajeInfo: "Selecciona la fecha de salida para esta reserva nueva",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID


                    }
                    casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)
                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                    calendarioResuelvo.instanciaUID = instanciaUID
                    casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)



                }
            },
            seleccionarDia: (dia) => {
                let diaSeleccionadoComoElemento = dia.target;
                let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                let calendarioIO = calendario.getAttribute("calendarioIO")
                let botonAtras = document.getElementById("botonAtras")
                let botonAdelante = document.getElementById("botonAdelante")
                let fechaEntrada = document.getElementById("fechaEntrada")
                let fechaSalida = document.getElementById("fechaSalida")

                let diaSeleccionado = dia.target.getAttribute("dia")
                diaSeleccionado = diaSeleccionado.padStart(2, "0")
                diaSeleccionado = Number(diaSeleccionado)
                let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                anoSeleccionado = anoSeleccionado.padStart(4, "0")
                anoSeleccionado = Number(anoSeleccionado)
                let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                mesSeleccionado = mesSeleccionado.padStart(2, "0")
                mesSeleccionado = Number(mesSeleccionado)
                let fechaSeleccionada = {
                    dia: diaSeleccionado,
                    mes: mesSeleccionado,
                    ano: anoSeleccionado
                }
                let fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                let selectorDias = [...document.querySelectorAll("[calendarioIO] [dia]")]
                selectorDias.map((dia) => {
                    // dia.classList.remove("calendarioDiaDisponible")
                    dia.classList.remove("calendarioDiaReserva")
                    dia.classList.remove("calendarioDiaSeleccionado")
                })
                if (diaSeleccionadoComoElemento.getAttribute("diaEstado") === "seleccionado") {
                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                        document.querySelector("[dataReserva=fechaEntrada]").innerText = "Seleccionar fecha de entrada"
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                        document.querySelector("[dataReserva=fechaSalida]").innerText = "Seleccionar fecha de salida"
                    }
                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                    diaSeleccionadoComoElemento.removeAttribute("diaEstado")
                    return
                }
                let diasDisponibles = [...document.querySelectorAll("[estado=disponible]")]
                diasDisponibles.map(diaDisponible => {
                    diaDisponible.removeAttribute("diaEstado")
                    diaDisponible.style.background = ""
                    diaDisponible.style.color = ""
                })

                diaSeleccionadoComoElemento.setAttribute("diaEstado", "seleccionado")
                diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")

                let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                let diaSeleccionadoEntrada
                let mesSeleccionadoEntrada
                let anoSeleccionadoEntrada
                let datosFechaEntradaSeleccionada
                if (fechaEntradaSelecionda) {
                    fechaEntradaSelecionda = JSON.parse(fechaEntradaSelecionda)
                    diaSeleccionadoEntrada = fechaEntradaSelecionda.dia
                    diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                    mesSeleccionadoEntrada = fechaEntradaSelecionda.mes
                    mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                    anoSeleccionadoEntrada = fechaEntradaSelecionda.ano
                    anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                    datosFechaEntradaSeleccionada = "existen"
                }

                let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                let diaSeleccionadoSalida
                let mesSeleccionadoSalida
                let anoSeleccionadoSalida
                let datosFechaSalidaSeleccionada
                if (fechaSalidaSelecionda) {
                    fechaSalidaSelecionda = JSON.parse(fechaSalidaSelecionda)
                    diaSeleccionadoSalida = fechaSalidaSelecionda.dia
                    diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                    mesSeleccionadoSalida = fechaSalidaSelecionda.mes
                    mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                    anoSeleccionadoSalida = fechaSalidaSelecionda.ano
                    anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                    datosFechaSalidaSeleccionada = "existen"
                }

                if (calendarioIO === "entrada") {
                    document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", JSON.stringify(fechaSeleccionada))
                    document.querySelector("[calendario=entrada]").setAttribute("fechaInicioFinal", fechaSeleccionadaUI)
                    document.querySelector("[data=fechaInicioData]").innerText = fechaSeleccionadaUI
                    if (fechaSalidaSelecionda) {
                        if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {
                                    //  dia.classList.remove("calendarioDiaDisponible")
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        } else {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        }
                    }
                }

                if (calendarioIO === "salida") {
                    document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", JSON.stringify(fechaSeleccionada))
                    document.querySelector("[calendario=salida]").setAttribute("fechaFinFinal", fechaSeleccionadaUI)
                    document.querySelector("[data=fechaFinData]").innerText = fechaSeleccionadaUI
                    if (fechaEntradaSelecionda) {
                        if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        } else {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        }

                    }
                }
            },
            crearOfertaConfirmar: async (crearOferta) => {

                const fechaInicio = document.querySelector("[calendario=entrada]").getAttribute("fechaInicioFinal") || "00/00/0000"
                const fechaFin = document.querySelector("[calendario=salida]").getAttribute("fechaFinFinal") || "00/00/0000"
                const tipoOferta = document.querySelector("[ofertaEnPrimerPlano=Activado]").getAttribute("zonaOferta")
                const nombreOferta = document.querySelector("[campoOferta=nombreOferta]").value


                const fechaInicio_array = fechaInicio.split("/")
                const diaFechaInicio = fechaInicio_array[0]
                const mesFechaInicio = fechaInicio_array[1]
                const anoFechaInicio = fechaInicio_array[2]
                const fechaInicio_formateada = `${diaFechaInicio.padStart(2, "0")}/${mesFechaInicio.padStart(2, "0")}/${anoFechaInicio}`



                const fechaFin_array = fechaFin.split("/")
                const diaFechaFin = fechaFin_array[0]
                const mesFechaFin = fechaFin_array[1]
                const anoFechaFin = fechaFin_array[2]
                const fechaFin_formateada = `${diaFechaFin.padStart(2, "0")}/${mesFechaFin.padStart(2, "0")}/${anoFechaFin}`


                const transaccion = {
                    zona: "administracion/ofertas/crearOferta",
                    nombreOferta: nombreOferta,
                    fechaInicio: fechaInicio_formateada,
                    fechaFin: fechaFin_formateada,
                    tipoOferta: tipoOferta
                }

                const selectoresCamposOferta = [...document.querySelectorAll(`[zonaOferta="${tipoOferta}"] [campoOferta]`)]
                selectoresCamposOferta.map((campoOferta) => {
                    const nombreCampo = campoOferta.getAttribute("campoOferta")
                    const datoCampo = campoOferta.value
                    transaccion[nombreCampo] = datoCampo

                })
                const apartamentosSeleccionados = []
                const selectorApartamentosSeleccionados = [...document.querySelectorAll("[descuentoDedicadoUI]")]
                selectorApartamentosSeleccionados.map((apartamentoSeleccionado) => {
                    const apartamentoUI = apartamentoSeleccionado.getAttribute("descuentoDedicadoUI")
                    const apartamentoIDV = apartamentoSeleccionado.getAttribute("descuentoDedicadoIDV")
                    const tipoDescuento = apartamentoSeleccionado.querySelector("[campoApartamentoSeleccionado=tipoDescuento]").value !== "no" ? apartamentoSeleccionado.querySelector("[campoApartamentoSeleccionado=tipoDescuento]").value : null
                    const cantidad = apartamentoSeleccionado.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                    const apartamento = {
                        apartamentoUI: apartamentoUI,
                        apartamentoIDV: apartamentoIDV,
                        tipoDescuento: tipoDescuento,
                        cantidad: cantidad
                    }
                    apartamentosSeleccionados.push(apartamento)
                })
                transaccion["apartamentosSeleccionados"] = apartamentosSeleccionados


                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.ok) {
                    const nuevoUIDOferta = respuestaServidor?.nuevoUIDOferta
                    const vista = `/administracion/gestion_de_ofertas/oferta:${nuevoUIDOferta}`
                    const navegacion = {
                        vista: vista,
                        tipoOrigen: "menuNavegador"
                    }
                    return casaVitini.componentes.controladorVista(navegacion)

                }

            },
            apartamentosDisponbiles: async (apartamento) => {
                apartamento.preventDefault()
                apartamento.stopPropagation()
                let selectorApartamentoUIRenderizado = document.querySelector("[comMenu=menuVolatilApartamentoDisponbiles]")

                if (selectorApartamentoUIRenderizado) {
                    selectorApartamentoUIRenderizado.remove()
                    return
                }

                let alturaDinamica = apartamento.target.getBoundingClientRect().bottom;
                let horizontalDinamico = apartamento.target.getBoundingClientRect().left;
                let anchoDinamico = apartamento.target.getBoundingClientRect().width;

                document.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.ocultarMenusVolatiles)

                let apartamentosUI = document.createElement("div")
                apartamentosUI.classList.add("crearOfertaMenuVolatilAnadirApartamento")
                apartamentosUI.setAttribute("comMenu", "menuVolatilApartamentoDisponbiles")
                apartamentosUI.setAttribute("componente", "menuVolatil")
                apartamentosUI.style.top = (alturaDinamica + 6) + "px"
                apartamentosUI.style.left = (horizontalDinamico) + "px"
                apartamentosUI.style.width = (anchoDinamico - 10) + "px"

                apartamentosUI.innerText = "Obteniendo apartamentos..."
                let seccion = document.querySelector("section:not([estado=obsoleto])")
                document.body.appendChild(apartamentosUI)

                const transaccion = {
                    zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    selectorApartamentoUIRenderizado = document.querySelector("[comMenu=menuVolatilApartamentoDisponbiles]")

                    selectorApartamentoUIRenderizado.innerHTML = null
                    let apartamentosDisponbiles = respuestaServidor?.ok
                    apartamentosDisponbiles.map((apartamentoDisponible) => {

                        let apartamentoIDV = apartamentoDisponible.apartamentoIDV
                        let apartamentoUI = apartamentoDisponible.apartamentoUI
                        let estadoUI = apartamentoDisponible.estadoUI

                        let apartamentoDetallesUI = document.createElement("div")
                        apartamentoDetallesUI.classList.add("crearOfertaApartamentoUI")
                        apartamentoDetallesUI.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.insertarApartamento)
                        apartamentoDetallesUI.setAttribute("apartamentoIDV", apartamentoIDV)
                        apartamentoDetallesUI.setAttribute("apartamentoUI", apartamentoUI)
                        apartamentoDetallesUI.setAttribute("apartamentoComoOpcion", apartamentoIDV)


                        let apartamentoTitulo = document.createElement("p")
                        apartamentoTitulo.classList.add("crearOfertaApartamentoTItulo")
                        apartamentoTitulo.innerText = apartamentoUI
                        apartamentoDetallesUI.appendChild(apartamentoTitulo)

                        let apartamentoEstadoUI = document.createElement("p")
                        apartamentoEstadoUI.classList.add("crearOfertaApartamentoEstado")
                        apartamentoEstadoUI.setAttribute("estadouI", estadoUI)
                        apartamentoEstadoUI.innerText = estadoUI
                        apartamentoDetallesUI.appendChild(apartamentoEstadoUI)

                        let selectorApartamentoYaRenderizado = document.querySelector(`[apartamentoSeleccionado=${apartamentoIDV}]`)
                        if (!selectorApartamentoYaRenderizado) {
                            selectorApartamentoUIRenderizado.appendChild(apartamentoDetallesUI)
                        }

                    })
                    let selectorApartamentoYaRenderizado = [...document.querySelectorAll(`[apartamentoComoOpcion]`)]
                    if (selectorApartamentoYaRenderizado.length === 0) {
                        let info = document.createElement("p")
                        info.classList.add("crearApartamentoInfoSinApartamento")
                        info.setAttribute("componente", "infoSinApartamento")
                        info.innerText = "Todos los apartamentos disponibles estan insertados en la oferta"
                        selectorApartamentoUIRenderizado.appendChild(info)
                    }



                }
            },
            "ocultarMenusVolatiles": (menuVolatil) => {
                let componente = menuVolatil?.target.getAttribute("componente")
                if (componente === "menuDesplegable") {
                    return
                }
                if (componente !== "menuVolatil") {
                    let selectorMenusVolatiles = [...document.querySelectorAll("[componente=menuVolatil]")]
                    document.removeEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.ocultarMenusVolatiles)
                    selectorMenusVolatiles.map(menuVolatil => {
                        menuVolatil.remove()
                    })
                }
            },
            "insertarApartamento": async (apartamento) => {
                let apartamentoIDV = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV")
                let apartamentoUI = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoUI")
                document.querySelector("[componente=infoSinApartamento]").style.display = "none"
                let detallesApartamento = {
                    "apartamentoIDV": apartamentoIDV,
                    "apartamentoUI": apartamentoUI
                }
                let apartamentoSeleccionadoUI = await casaVitini.administracion.gestion_de_ofertas.crearOferta.insertarApartamentoUI(detallesApartamento)
                let zonaApartamentos = document.querySelector("[componente=zonaAnadirApartamento]")
                zonaApartamentos.appendChild(apartamentoSeleccionadoUI)
                // Descuento dedicado
                let opciones = {
                    "apartamentoIDV": apartamentoIDV,
                    "apartamentoUI": apartamentoUI
                }
                let descuentoDedicadoUI = await casaVitini.administracion.gestion_de_ofertas.crearOferta.insertarOpcionesApartamento(opciones)
                let zonaDescuentoDedicados = document.querySelector("[parteOferta=descuentosDedicados]")
                document.querySelector("[componente=infoDescuentoDedicados]").style.display = "none"
                zonaDescuentoDedicados.appendChild(descuentoDedicadoUI)


            },
            "insertarApartamentoUI": async (detallesApartmento) => {

                let apartamentoIDV = detallesApartmento.apartamentoIDV
                let apartamentoUI = detallesApartmento.apartamentoUI

                let apartamentoSeleccionadoUI = document.createElement("div")
                apartamentoSeleccionadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                apartamentoSeleccionadoUI.setAttribute("apartamentoSeleccionado", apartamentoIDV)
                let tituloApartamento = document.createElement("div")
                tituloApartamento.classList.add("crearOfertaApartamentoSeleccionadoUITitulo")
                tituloApartamento.innerText = apartamentoUI
                apartamentoSeleccionadoUI.appendChild(tituloApartamento)

                let botonEliminarApartamento = document.createElement("div")
                botonEliminarApartamento.classList.add("crearOfertaBoton")
                botonEliminarApartamento.innerText = "Eliminar apartamento de esta oferta"
                botonEliminarApartamento.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.eliminarApartamenro)
                apartamentoSeleccionadoUI.appendChild(botonEliminarApartamento)

                return apartamentoSeleccionadoUI

            },
            "insertarOpcionesApartamento": async (opcionesApartamento) => {



                const transaccion = {
                    zona: "administracion/ofertas/opcionesCrearOferta"
                }
                let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    let apartamentoIDV = opcionesApartamento.apartamentoIDV
                    let apartamentoUI = opcionesApartamento.apartamentoUI

                    let cantidad = opcionesApartamento.cantidad ? opcionesApartamento.cantidad : "0.00"
                    let tipoDescuentoIDVPersonalizado = opcionesApartamento.tipoDescuentoIDV ? opcionesApartamento.tipoDescuentoIDV : null


                    let tipoDescuentoOpciones = respuestaServidor?.ok.tipoDescuento

                    let descuentoDedicadoUI = document.createElement("div")
                    descuentoDedicadoUI.classList.add("crearOfertaDescuentoDedicadoUI")
                    descuentoDedicadoUI.setAttribute("descuentoDedicadoUI", apartamentoUI)
                    descuentoDedicadoUI.setAttribute("descuentoDedicadoIDV", apartamentoIDV)


                    tituloApartamento = document.createElement("div")
                    tituloApartamento.classList.add("crearOfertaDescuentoDedicadoUITitulo")
                    tituloApartamento.innerText = apartamentoUI
                    descuentoDedicadoUI.appendChild(tituloApartamento)

                    let cantidadUI = document.createElement("input")
                    cantidadUI.classList.add("crearOferDescuentoDedicadoCantidad")
                    cantidadUI.setAttribute("campoApartamentoSeleccionado", "cantidad")
                    cantidadUI.placeholder = "Inserta la cantidad"
                    cantidadUI.value = cantidad

                    descuentoDedicadoUI.appendChild(cantidadUI)

                    let tipoDescuento = document.createElement("select")
                    tipoDescuento.classList.add("crearOfertaDescuentoDedicadoListaTipoDescuento")
                    tipoDescuento.setAttribute("campoApartamentoSeleccionado", "tipoDescuento")

                    let opcionPredeterminada = document.createElement("option")

                    if (!tipoDescuentoIDVPersonalizado) {
                        opcionPredeterminada.selected = true;
                    }
                    opcionPredeterminada.disabled = true;
                    opcionPredeterminada.value = ""
                    opcionPredeterminada.text = "Selecciona el tipo de descuento"
                    tipoDescuento.appendChild(opcionPredeterminada)
                    tipoDescuentoOpciones.map((tipoDescuentoOpcion) => {
                        let tipoDescuentoIDV = tipoDescuentoOpcion.tipoDescuentoIDV
                        let tipoDescuentoUI = tipoDescuentoOpcion.tipoDescuentoUI
                        let opcion = document.createElement("option");

                        if (tipoDescuentoIDVPersonalizado === tipoDescuentoIDV) {
                            opcion.selected = true;
                        }
                        opcion.value = tipoDescuentoIDV;
                        opcion.text = tipoDescuentoUI;
                        opcion.setAttribute("tipoDescuentoIDV", tipoDescuentoIDV)
                        tipoDescuento.appendChild(opcion);

                    })
                    descuentoDedicadoUI.appendChild(tipoDescuento)
                    return descuentoDedicadoUI
                }
            },
            "eliminarApartamenro": (apartamento) => {
                let apartamentoIDV = apartamento.target.parentNode.getAttribute("apartamentoSeleccionado")

                apartamento.target.parentNode.remove()
                let conteoApartamentos = [...document.querySelectorAll("[apartamentoSeleccionado]")]
                if (conteoApartamentos.length === 0) {
                    document.querySelector("[componente=infoSinApartamento]").removeAttribute("style")
                }
                document.querySelector(`[descuentoDedicadoIDV="${apartamentoIDV}"]`).remove()
                let conteoDescuentoDedicados = [...document.querySelector("[parteOferta=descuentosDedicados]").querySelectorAll("[descuentoDedicadoUI]")]
                if (conteoDescuentoDedicados.length === 0) {
                    document.querySelector("[componente=infoDescuentoDedicados]").removeAttribute("style")
                }


            },
            "opcionesOferta": (opcion) => {


                let opciones = opcion.target.value
                // Primer oculta todo
                let selectorOpciones = [...document.querySelectorAll("[controladorDesliegue]")]
                selectorOpciones.map((opcion) => {
                    opcion.classList.add("estadoInicialInvisible")
                })
                // Luego despliega
                let zonaDespliegue
                if (opciones === "totalNetoApartmentoDedicado") {
                    zonaDespliegue = "descuentosDedicados"
                }
                if (opciones === "totalNetoApartmento") {
                    zonaDespliegue = "descuentoGlobal"
                }
                if (opciones === "totalNetoReserva") {
                    zonaDespliegue = "descuentoGlobal"
                }

                document.querySelector(`[controladorDesliegue="${zonaDespliegue}"]`)?.classList.remove("estadoInicialInvisible")




            }
        },
        "detallesOferta": {
            "UI": async (ofertaUID) => {

                const transaccion = {
                    zona: "administracion/ofertas/detallesOferta",
                    ofertaUID: Number(ofertaUID)
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "No existe ninguna oferta con ese identificador",
                        descripcion: "La oferta que buscas con ese identificador no existe. Comprueba el identificador de la reserva"
                    }
                    return casaVitini.componentes.mensajeSimple(info)
                }
                if (respuestaServidor?.ok) {
                    const detallesOferta = respuestaServidor?.ok

                    let nombreOferta = detallesOferta.nombreOferta
                    let ofertaUID = detallesOferta.uid

                    let fechaInicio = detallesOferta.fechaInicio
                    let fechaFin = detallesOferta.fechaFin

                    let numero = detallesOferta.numero
                    let simboloNumero = detallesOferta.simboloNumero

                    let descuentoAplicadoAIDV = detallesOferta.descuentoAplicadoAIDV
                    let descuentoAplicadoAUI = detallesOferta.descuentoAplicadoAUI

                    let estadoOfertaIDV = detallesOferta.estadoOfertaIDV
                    let estadoOfertaUI = detallesOferta.estadoOfertaUI

                    let tipoOfertaIDV = detallesOferta.tipoOfertaIDV
                    let tipoOfertaUI = detallesOferta.tipoOfertaUI

                    let tipoDescuentoIDV = detallesOferta.tipoDescuentoIDV
                    let tipoDescuentoUI = detallesOferta.tipoDescuentoUI

                    let cantidad = detallesOferta.cantidad
                    const espacioOfertasGlobal = document.querySelector("[componente=espacioOfertas]")
                    espacioOfertasGlobal.setAttribute("ofertaUID", ofertaUID)
                    espacioOfertasGlobal.setAttribute("modo", "editarOferta")

                    let soloLecturaUI = document.createElement("div")
                    soloLecturaUI.classList.add("editarOfertaSoloLecturaUI")

                    let soloLecturaInfo = document.createElement("p")
                    soloLecturaInfo.classList.add("editarOfertaSoloLecutraInfo")
                    soloLecturaInfo.setAttribute("componente", "soloLecturaInfo")
                    soloLecturaInfo.innerText = "Modo solo lectura"
                    soloLecturaUI.appendChild(soloLecturaInfo)
                    espacioOfertasGlobal.appendChild(soloLecturaUI)

                    let ofertaUI = casaVitini.administracion.gestion_de_ofertas.detalleUI("editarOferta")
                    espacioOfertasGlobal.appendChild(ofertaUI)
                    document.querySelector("[componente=espacioCrearOferta]").classList.add("eventosDesactivadosInicialmente")

                    let selectorEstadoOfertaUI = document.querySelector("[componente=estadoOferta]")
                    if (estadoOfertaIDV === "desactivada") {
                        selectorEstadoOfertaUI.setAttribute("estadoOferta", estadoOfertaIDV)
                        selectorEstadoOfertaUI.style.background = "#ff000091"

                        selectorEstadoOfertaUI.innerHTML = "Oferta desactivada"
                    }
                    if (estadoOfertaIDV === "activada") {
                        selectorEstadoOfertaUI.setAttribute("estadoOferta", estadoOfertaIDV)
                        selectorEstadoOfertaUI.style.background = "#00ff006e"

                        selectorEstadoOfertaUI.innerHTML = "Oferta activada"
                    }
                    let campoNombreOferta = document.querySelector("[campoOferta=nombreOferta]")
                    campoNombreOferta.value = nombreOferta
                    let selectorFechaInicio = document.querySelector("[calendario=entrada]")
                    selectorFechaInicio.setAttribute("fechaInicioFinal", fechaInicio)
                    let fechaInicioArray = fechaInicio.split("/")
                    let objetoFechaInicio = {
                        dia: fechaInicioArray[0],
                        mes: fechaInicioArray[1],
                        ano: fechaInicioArray[2]
                    }
                    objetoFechaInicio = JSON.stringify(objetoFechaInicio)
                    selectorFechaInicio.setAttribute("memoriaVolatil", objetoFechaInicio)
                    let selectorFechaInicioUI = document.querySelector("[data=fechaInicioData]")
                    selectorFechaInicioUI.innerText = fechaInicio

                    let selectorFechaFin = document.querySelector("[calendario=salida]")
                    selectorFechaFin.setAttribute("fechaFinFinal", fechaFin)
                    let fechaFinArray = fechaFin.split("/")
                    let objetoFechaFin = {
                        dia: fechaFinArray[0],
                        mes: fechaFinArray[1],
                        ano: fechaFinArray[2]
                    }
                    objetoFechaFin = JSON.stringify(objetoFechaFin)

                    selectorFechaFin.setAttribute("memoriaVolatil", objetoFechaFin)
                    let selectorFechaFinUI = document.querySelector("[data=fechaFinData]")
                    selectorFechaFinUI.innerText = fechaFin

                    const espacioOfertas = document.querySelector("[componente=espacioCrearOferta]")
                    if (tipoOfertaIDV === "porNumeroDeApartamentos") {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porNumeroDeApartamentos()
                        espacioOfertas.appendChild(opcionesUI)
                    }
                    if (tipoOfertaIDV === "porApartamentosEspecificos") {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porApartamentosEspecificos()
                        espacioOfertas.appendChild(opcionesUI)
                    }
                    if (tipoOfertaIDV === "porDiasDeAntelacion") {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porDiasDeAntelacion()
                        espacioOfertas.appendChild(opcionesUI)
                    }
                    if (tipoOfertaIDV === "porDiasDeReserva") {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porDiasDeReserva()
                        espacioOfertas.appendChild(opcionesUI)
                    }
                    if (tipoOfertaIDV === "porRangoDeFechas") {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porRangoDeFechas()
                        espacioOfertas.appendChild(opcionesUI)
                    }
                    document.querySelector(`[zonaOferta=${tipoOfertaIDV}]`).setAttribute("ofertaEnPrimerPlano", "Activado")
                    const selectorTipoOfertaRenderizado = document.querySelector(`[tipoOferta=${tipoOfertaIDV}]`)
                    selectorTipoOfertaRenderizado.style.background = "blue"
                    selectorTipoOfertaRenderizado.style.color = "white"

                    if (tipoOfertaIDV === "porNumeroDeApartamentos" || tipoOfertaIDV === "porDiasDeAntelacion" || tipoOfertaIDV === "porDiasDeReserva") {
                        document.querySelector(`[zonaOferta=${tipoOfertaIDV}] [campoOferta=simboloNumero] [value=${simboloNumero}]`).selected = true
                        document.querySelector(`[zonaOferta=${tipoOfertaIDV}] [campoOferta=numero]`).value = numero
                        document.querySelector(`[zonaOferta=${tipoOfertaIDV}] [campoOferta=tipoDescuento] [value=${tipoDescuentoIDV}]`).selected = true
                        document.querySelector(`[zonaOferta=${tipoOfertaIDV}] [campoOferta=cantidad]`).value = cantidad
                    }

                    if (tipoOfertaIDV === "porRangoDeFechas") {
                        document.querySelector(`[zonaOferta=${tipoOfertaIDV}] [campoOferta=tipoDescuento] [value=${tipoDescuentoIDV}]`).selected = true
                        document.querySelector(`[zonaOferta=${tipoOfertaIDV}] [campoOferta=cantidad]`).value = cantidad
                    }



                    if (tipoOfertaIDV === "porApartamentosEspecificos") {
                        document.querySelector(`[zonaOferta=${tipoOfertaIDV}] [campoOferta=contextoAplicacion] [value=${descuentoAplicadoAIDV}]`).selected = true
                        if (descuentoAplicadoAIDV === "totalNetoReserva") {
                            document.querySelector(`[controladorDesliegue=descuentoGlobal]`).classList.remove("estadoInicialInvisible")
                            document.querySelector(`[zonaOferta=${tipoOfertaIDV}] [campoOferta=tipoDescuento] [value=${tipoDescuentoIDV}]`).selected = true
                            document.querySelector(`[zonaOferta=${tipoOfertaIDV}] [campoOferta=cantidad]`).value = cantidad


                        }

                        if (descuentoAplicadoAIDV === "totalNetoApartmentoDedicado") {
                            document.querySelector(`[controladorDesliegue=descuentosDedicados]`).classList.remove("estadoInicialInvisible")


                        }

                        let apartamentosDedicados = detallesOferta.apartamentosDedicados

                        for (const apartamentoDedicadoDetalles of apartamentosDedicados) {
                            let apartamentoDedicadoIDV = apartamentoDedicadoDetalles.apartamentoIDV
                            let apartamentoDedicadoUI = apartamentoDedicadoDetalles.apartamentoUI
                            let apartamentoDedicadoTipoDescuento = apartamentoDedicadoDetalles.tipoDescuento
                            let apartamentoDedicadoCantidadApartamento = apartamentoDedicadoDetalles.cantidadApartamento

                            let metadatosApartamentoUI = {
                                apartamentoIDV: apartamentoDedicadoIDV,
                                apartamentoUI: apartamentoDedicadoUI,
                                tipoDescuentoIDV: apartamentoDedicadoTipoDescuento,
                                cantidad: apartamentoDedicadoCantidadApartamento
                            }
                            let insertarApartamentoUI = await casaVitini.administracion.gestion_de_ofertas.crearOferta.insertarApartamentoUI(metadatosApartamentoUI)
                            document.querySelector("[componente=infoSinApartamento]").style.display = "none"
                            let zonaApartamentos = document.querySelector("[componente=zonaAnadirApartamento]")
                            zonaApartamentos.appendChild(insertarApartamentoUI)

                            let insertarOpcionesApartamento = await casaVitini.administracion.gestion_de_ofertas.crearOferta.insertarOpcionesApartamento(metadatosApartamentoUI)
                            document.querySelector("[componente=infoDescuentoDedicados]").style.display = "none"
                            let zonaDescuentoDedicados = document.querySelector("[parteOferta=descuentosDedicados]")
                            zonaDescuentoDedicados.appendChild(insertarOpcionesApartamento)
                        }
                    }
                    const botonesModificarOferta = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesModificarOferta()
                    espacioOfertasGlobal.appendChild(botonesModificarOferta)
                }

            },
            "guardarCambiosOferta": async (oferta) => {
                const ofertaUID = document.querySelector("[ofertaUID]").getAttribute("ofertaUID")
                const fechaInicio = document.querySelector("[calendario=entrada]").getAttribute("fechaInicioFinal")
                const fechaFin = document.querySelector("[calendario=salida]").getAttribute("fechaFinFinal")
                const tipoOferta = document.querySelector("[ofertaEnPrimerPlano=Activado]").getAttribute("zonaOferta")
                const nombreOferta = document.querySelector("[campoOferta=nombreOferta]").value


                const fechaInicio_array = fechaInicio.split("/")
                const diaFechaInicio = fechaInicio_array[0]
                const mesFechaInicio = fechaInicio_array[1]
                const anoFechaInicio = fechaInicio_array[2]
                const fechaInicio_formateada = `${diaFechaInicio.padStart(2, "0")}/${mesFechaInicio.padStart(2, "0")}/${anoFechaInicio}`



                const fechaFin_array = fechaFin.split("/")
                const diaFechaFin = fechaFin_array[0]
                const mesFechaFin = fechaFin_array[1]
                const anoFechaFin = fechaFin_array[2]
                const fechaFin_formateada = `${diaFechaFin.padStart(2, "0")}/${mesFechaFin.padStart(2, "0")}/${anoFechaFin}`

                const transaccion = {
                    zona: "administracion/ofertas/actualizarOferta",
                    ofertaUID: Number(ofertaUID),
                    nombreOferta: nombreOferta,
                    fechaInicio: fechaInicio_formateada,
                    fechaFin: fechaFin_formateada,
                    tipoOferta: tipoOferta
                }

                const selectoresCamposOferta = [...document.querySelectorAll(`[zonaOferta="${tipoOferta}"] [campoOferta]`)]
                selectoresCamposOferta.map((campoOferta) => {
                    const nombreCampo = campoOferta.getAttribute("campoOferta")
                    const datoCampo = campoOferta.value
                    transaccion[nombreCampo] = datoCampo
                })
                const apartamentosSeleccionados = []
                const selectorApartamentosSeleccionados = [...document.querySelectorAll("[descuentoDedicadoIDV]")]
                selectorApartamentosSeleccionados.map((apartamentoSeleccionado) => {

                    const apartamentoIDV = apartamentoSeleccionado.getAttribute("descuentoDedicadoIDV")
                    const apartamentoUI = apartamentoSeleccionado.getAttribute("descuentoDedicadoUI")

                    const tipoDescuento = apartamentoSeleccionado.querySelector("[campoApartamentoSeleccionado=tipoDescuento]").value
                    const cantidad = apartamentoSeleccionado.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                    const apartamento = {
                        apartamentoUI: apartamentoUI,
                        apartamentoIDV: apartamentoIDV,
                        tipoDescuento: tipoDescuento,
                        cantidad: cantidad
                    }
                    apartamentosSeleccionados.push(apartamento)
                })

                transaccion["apartamentosSeleccionados"] = apartamentosSeleccionados

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const modo = {
                        modo: "botonCancelarCambios"
                    }
                    return casaVitini.administracion.gestion_de_ofertas.detallesOferta.ofertaModos(modo)
                }
            },
            "ofertaModos": (modo) => {
                let botonModo
                if (modo.target) {
                    botonModo = modo.target.getAttribute("componente")
                }
                if (modo.modo) {
                    botonModo = modo.modo
                }
                if (botonModo === "botonEditarOferta") {
                    let selectorBotonesEditar = [...document.querySelectorAll("[componente=botonEditarOferta]")]
                    selectorBotonesEditar.map((boton) => {
                        boton.classList.add("elementoOcultoInicialmente")
                    })
                    let selectorBotonesGuardarCambios = [...document.querySelectorAll("[componente=botonGuardarCambios]")]
                    selectorBotonesGuardarCambios.map((boton) => {
                        boton.classList.remove("elementoOcultoInicialmente")
                    })
                    let selectorBotonesCancelarCambios = [...document.querySelectorAll("[componente=botonCancelarCambios]")]
                    selectorBotonesCancelarCambios.map((boton) => {
                        boton.classList.remove("elementoOcultoInicialmente")
                    })
                    let selectorBotonesEliminarOferta = [...document.querySelectorAll("[componente=botonElimnarOferta]")]
                    selectorBotonesEliminarOferta.map((boton) => {
                        boton.classList.remove("elementoOcultoInicialmente")
                    })

                    document.querySelector("[componente=espacioCrearOferta]").classList.remove("eventosDesactivadosInicialmente")
                    document.querySelector("[componente=soloLecturaInfo]").classList.add("elementoOcultoInicialmente")
                }

                if (botonModo === "botonCancelarCambios") {
                    let selectorBotonesEditar = [...document.querySelectorAll("[componente=botonEditarOferta]")]
                    selectorBotonesEditar.map((boton) => {
                        boton.classList.remove("elementoOcultoInicialmente")
                    })

                    let selectorBotonesGuardarCambios = [...document.querySelectorAll("[componente=botonGuardarCambios]")]
                    selectorBotonesGuardarCambios.map((boton) => {
                        boton.classList.add("elementoOcultoInicialmente")
                    })

                    let selectorBotonesCancelarCambios = [...document.querySelectorAll("[componente=botonCancelarCambios]")]
                    selectorBotonesCancelarCambios.map((boton) => {
                        boton.classList.add("elementoOcultoInicialmente")
                    })
                    let selectorBotonesEliminarOferta = [...document.querySelectorAll("[componente=botonElimnarOferta]")]
                    selectorBotonesEliminarOferta.map((boton) => {
                        boton.classList.add("elementoOcultoInicialmente")
                    })
                    document.querySelector("[componente=espacioCrearOferta]").classList.add("eventosDesactivadosInicialmente")
                    document.querySelector("[componente=soloLecturaInfo]").classList.remove("elementoOcultoInicialmente")
                }





            },
            "estadoOferta": async (estadoOferta) => {
                let ofertaUID = document.querySelector("[ofertaUID]").getAttribute("ofertaUID")
                let selectorEstadoOfertaUI = document.querySelector("[estadoOferta]")
                let estadoActualMemoriaVolatil = selectorEstadoOfertaUI.innerText
                selectorEstadoOfertaUI.innerText = "Esperando al servidor...."

                let estadoOfertaActual = estadoOferta.target.getAttribute("estadoOferta")
                let estadoOfertaPropuesto
                if (estadoOfertaActual === "desactivada") {
                    estadoOfertaPropuesto = "activada"
                }
                if (estadoOfertaActual === "activada") {
                    estadoOfertaPropuesto = "desactivada"
                }

                const transaccion = {
                    zona: "administracion/ofertas/actualizarEstadoOferta",
                    ofertaUID: Number(ofertaUID),
                    estadoOferta: estadoOfertaPropuesto
                }
                let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    document.querySelector("[estadoOferta]").innerText = estadoActualMemoriaVolatil
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    let estadoOfertaComfirmado = respuestaServidor?.estadoOferta
                    selectorEstadoOfertaUI.setAttribute("estadoOferta", estadoOfertaComfirmado)
                    let estadoOfertaUI
                    if (estadoOfertaComfirmado === "activada") {

                        selectorEstadoOfertaUI.style.background = "#00ff006e"

                        estadoOfertaUI = "Oferta activada"
                    }
                    if (estadoOfertaComfirmado === "desactivada") {
                        selectorEstadoOfertaUI.style.background = "#ff000091"
                        estadoOfertaUI = "Oferta desactivada"
                    }
                    selectorEstadoOfertaUI.innerText = estadoOfertaUI
                }




            },
            "eliminarOferta": {
                "UI": async () => {
                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const tituloCancelarReserva = document.createElement("p")
                    tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                    tituloCancelarReserva.innerText = "Confirmar eliminar reserva"
                    contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = "Var a eliminar la oferta y su aplicacion sera inmediata en los precios, ¿Estas de acuerdo?"

                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                    contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = "Confirmar y eliminar oferta"
                    botonCancelar.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.eliminarOferta.confirmar)
                    bloqueBotones.appendChild(botonCancelar)

                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion de la oferta"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)
                },
                "confirmar": async () => {
                    let ofertaUID = document.querySelector("[ofertaUID]").getAttribute("ofertaUID")

                    const transaccion = {
                        zona: "administracion/ofertas/eliminarOferta",
                        "ofertaUID": Number(ofertaUID)
                    }

                    let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        let vista = `/administracion/gestion_de_ofertas`
                        let navegacion = {
                            "vista": vista,
                            "tipoOrigen": "menuNavegador"
                        }
                        return casaVitini.componentes.controladorVista(navegacion)

                    }

                }
            }
        },
        "traductorCambioVista": (oferta) => {
            oferta.preventDefault()
            oferta.stopPropagation()
            let vista = oferta.target.closest("[vista]").getAttribute("vista")

            let entrada = {
                "vista": vista,
                "tipoOrigen": "menuNavegador"
            }
            return casaVitini.componentes.controladorVista(entrada)



        },
        "detalleUI": () => {

            // Crear el elemento div principal
            const divPrincipal = document.createElement('div');
            divPrincipal.setAttribute('componente', 'espacioCrearOferta');
            divPrincipal.classList.add('espacioClientes');


            const divContenedorNombreYEstado = document.createElement('div');
            divContenedorNombreYEstado.classList.add('crearOfertaContenedorHorizontalV2');

            const botonEstadoOferta = document.createElement("div")
            botonEstadoOferta.classList.add("creatOfertaBotonEstado")
            botonEstadoOferta.setAttribute("componente", "estadoOferta")
            botonEstadoOferta.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.estadoOferta)
            botonEstadoOferta.style.pointerEvents = "all"
            botonEstadoOferta.innerText = "Oferta desactivada"
            divContenedorNombreYEstado.appendChild(botonEstadoOferta)

            // Crear el input
            const input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
            input.setAttribute('campoOferta', 'nombreOferta');
            input.setAttribute('placeholder', 'Escriba un nombre a esta oferta, el nombre sera publico');
            divContenedorNombreYEstado.appendChild(input)
            divPrincipal.appendChild(divContenedorNombreYEstado)

            // Crear el div contenedor
            const divContenedor = document.createElement('div');
            divContenedor.classList.add('administracion_ofertas_crearOfertas_contenedorFecha');

            // Crear el primer div contenedor horizontal
            const divContenedorHorizontal = document.createElement('div');
            divContenedorHorizontal.classList.add('crearOfertaContenedorHorizontal');

            // Crear el div contenedor de fecha de inicio
            const divContenedorFechaInicio = document.createElement('div');
            divContenedorFechaInicio.classList.add('contenedorFecha');
            divContenedorFechaInicio.setAttribute('calendario', 'entrada');
            divContenedorFechaInicio.setAttribute('componente', 'inicioOferta');
            divContenedorFechaInicio.setAttribute('paralizadorEvento', 'ocultadorCalendarios');
            divContenedorFechaInicio.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.constructorCalendario)

            // Crear el párrafo de la fecha de inicio
            const pFechaInicio = document.createElement('p');
            pFechaInicio.classList.add('tituloFecha');
            pFechaInicio.textContent = 'Fecha de inicio';

            // Crear el párrafo de la fecha de inicio seleccionada
            const pFechaInicioSeleccionada = document.createElement('p');
            pFechaInicioSeleccionada.classList.add('fechaInicio');
            pFechaInicioSeleccionada.setAttribute('data', 'fechaInicioData');
            pFechaInicioSeleccionada.textContent = '(Seleccionar)';

            // Agregar los elementos al div contenedor de fecha de inicio
            divContenedorFechaInicio.appendChild(pFechaInicio);
            divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);

            // Crear el div contenedor de fecha de fin
            const divContenedorFechaFin = document.createElement('div');
            divContenedorFechaFin.classList.add('contenedorFecha');
            divContenedorFechaFin.setAttribute('calendario', 'salida');
            divContenedorFechaFin.setAttribute('paralizadorEvento', 'ocultadorCalendarios');
            divContenedorFechaFin.setAttribute('componente', 'finOferta');
            divContenedorFechaFin.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.constructorCalendario)

            // Crear el párrafo de la fecha de fin
            const pFechaFin = document.createElement('p');
            pFechaFin.classList.add('tituloFecha');
            pFechaFin.textContent = 'Fecha fin';

            // Crear el párrafo de la fecha de fin seleccionada
            const pFechaFinSeleccionada = document.createElement('p');
            pFechaFinSeleccionada.classList.add('fechaFin');
            pFechaFinSeleccionada.setAttribute('data', 'fechaFinData');
            pFechaFinSeleccionada.textContent = '(Seleccionar)';

            // Agregar los elementos al div contenedor de fecha de fin
            divContenedorFechaFin.appendChild(pFechaFin);
            divContenedorFechaFin.appendChild(pFechaFinSeleccionada);

            // Agregar los elementos al primer div contenedor horizontal
            divContenedorHorizontal.appendChild(divContenedorFechaInicio);
            divContenedorHorizontal.appendChild(divContenedorFechaFin);

            // Agregar el primer div contenedor horizontal al div contenedor
            divContenedor.appendChild(divContenedorHorizontal);

            // Agregar el div contenedor al div principal
            divPrincipal.appendChild(divContenedor);

            // Crear el segundo div contenedor
            const divContenedorTipoOfertas = document.createElement('div');
            divContenedorTipoOfertas.classList.add('crearOfertaConentenedor');

            // Crear el párrafo del título de tipo de oferta
            const pTituloTipoOferta = document.createElement('p');
            pTituloTipoOferta.classList.add('crearOfertaTitulo');
            pTituloTipoOferta.textContent = 'Escoge tipo de oferta';

            // Crear el div contenedor horizontal de tipo de ofertas
            const divContenedorHorizontalTipoOfertas = document.createElement('div');
            divContenedorHorizontalTipoOfertas.classList.add('crearOfertaContenedorHorizontalTipoOfertas');

            // Crear las opciones de tipo de oferta
            const opcionesTipoOferta = [
                {
                    tipo: 'porNumeroDeApartamentos',
                    titulo: 'Por número de apartamentos ',
                    descripcion: 'Aplicar oferta cuando una reserva que se realiza dentro del periodo de la oferta cumple con el número de apartamentos requeridos por este tipo de oferta.'
                },
                {
                    tipo: 'porApartamentosEspecificos',
                    titulo: 'Por apartamentos específicos ',
                    descripcion: 'Aplicar oferta cuando una reserva que se realiza dentro del período de la oferta contiene los apartamentos en específico que requiere esta oferta.'
                },
                {
                    tipo: 'porDiasDeAntelacion',
                    titulo: 'Por días de antelación ',
                    descripcion: 'Aplicar oferta cuando una reserva que se realiza dentro del periodo de la oferta cumple con el requisito de los días de antelación que requiere la oferta.'
                },
                {
                    tipo: 'porDiasDeReserva',
                    titulo: 'Por dias de la reserva',
                    descripcion: 'Aplicar oferta cuando una reserva que se realiza dentro del periodo de la oferta cumple con los requisitos de días de duración que requiere la oferta '
                },
                {
                    tipo: 'porRangoDeFechas',
                    titulo: 'Por rango de fechas de la reserva',
                    descripcion: 'Aplicar esta oferta cuando se realiza una reserva cuyo rango determinado por la fecha de entrada y la fecha de salida se cruza con el rango de duración de la oferta determinado.'
                }

            ];

            // Crear las opciones de tipo de oferta y agregarlos al div contenedor horizontal de tipo de ofertas
            for (const opcion of opcionesTipoOferta) {
                const divOpcionTipoOferta = document.createElement('div');
                divOpcionTipoOferta.classList.add('opcionTipoOFerta');
                divOpcionTipoOferta.setAttribute('tipoOferta', opcion.tipo);
                divOpcionTipoOferta.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.componenteUI.desplegarOpcionesOferta)

                const pTituloTipoOferta = document.createElement('p');
                pTituloTipoOferta.classList.add('crearOfertaTituloTipoOferta');
                pTituloTipoOferta.textContent = opcion.titulo;

                const pDescripcionTipoOferta = document.createElement('p');
                pDescripcionTipoOferta.classList.add('crearOfertaDescripcionTipoOferta');
                pDescripcionTipoOferta.textContent = opcion.descripcion;

                divOpcionTipoOferta.appendChild(pTituloTipoOferta);
                divOpcionTipoOferta.appendChild(pDescripcionTipoOferta);
                divContenedorHorizontalTipoOfertas.appendChild(divOpcionTipoOferta);
            }

            // Agregar el div contenedor horizontal de tipo de ofertas al segundo div contenedor
            divContenedorTipoOfertas.appendChild(pTituloTipoOferta);
            divContenedorTipoOfertas.appendChild(divContenedorHorizontalTipoOfertas);

            // Agregar el segundo div contenedor al div principal
            divPrincipal.appendChild(divContenedorTipoOfertas);


            // Agregar el div principal al documento body
            return divPrincipal;

        },
        "componenteUI": {
            "porNumeroDeApartamentos": () => {
                const divOfertaConXApartamentos_O1 = document.createElement('div');
                divOfertaConXApartamentos_O1.setAttribute('zonaOferta', 'porNumeroDeApartamentos');
                divOfertaConXApartamentos_O1.classList.add('espaciadoInterno');


                // Crear el elemento div para el espacio de opciones
                const divEspacioOpciones_O1 = document.createElement('div');
                divEspacioOpciones_O1.classList.add('crearOfeartaEspacioOpciones');

                // Crear el primer contenedor de opciones
                const divContenedor1_O1 = document.createElement('div');
                divContenedor1_O1.classList.add('crearOfertaConentenedor');

                // Crear el elemento p para el título de la primera opción
                const pTituloOpcion1_O1 = document.createElement('p');
                pTituloOpcion1_O1.classList.add('crearOfertaTituloOpcion');
                pTituloOpcion1_O1.textContent = 'Determina cuántos apartamentos en concreto debe seleccionar el cliente o a partir de cuantos apartmentos necesita escoger el cliente para acceder esta oferta';

                // Crear el select para el tipo de descuento
                const seleccionaTipoNumero = document.createElement('select');
                seleccionaTipoNumero.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                seleccionaTipoNumero.setAttribute('campoOferta', 'simboloNumero');

                // Crear las opciones del select
                const optionO1 = document.createElement('option');
                optionO1.selected = true;
                optionO1.disabled = true;
                optionO1.setAttribute('value', '');

                optionO1.textContent = 'Selecciona si apartir de o un numero exacto de apartamentos';

                const optionO2 = document.createElement('option');
                optionO2.value = 'numeroExacto';
                optionO2.textContent = 'Con un numero exacto de apartamentos';

                const opcion03 = document.createElement('option');
                opcion03.value = 'aPartirDe';
                opcion03.textContent = 'A partir de un numero exacto de apartamentos';

                seleccionaTipoNumero.appendChild(optionO1);
                seleccionaTipoNumero.appendChild(optionO2);
                seleccionaTipoNumero.appendChild(opcion03);

                // Crear el input para el número de apartamentos
                const inputNumeroApartamentos_O1 = document.createElement('input');
                inputNumeroApartamentos_O1.setAttribute('type', 'text');
                inputNumeroApartamentos_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                inputNumeroApartamentos_O1.placeholder = '0';
                inputNumeroApartamentos_O1.setAttribute('campoOferta', 'numero');

                // Agregar el título y el input al primer contenedor
                divContenedor1_O1.appendChild(pTituloOpcion1_O1);
                divContenedor1_O1.appendChild(seleccionaTipoNumero);
                divContenedor1_O1.appendChild(inputNumeroApartamentos_O1);

                // Crear el segundo contenedor de opciones
                const divContenedor2_O1 = document.createElement('div');
                divContenedor2_O1.classList.add('crearOfertaConentenedor');

                // Crear el elemento p para el título de la segunda opción
                const pTituloOpcion2_O1 = document.createElement('p');
                pTituloOpcion2_O1.classList.add('crearOfertaTituloOpcion');
                pTituloOpcion2_O1.textContent = 'Determina si esta oferta será un descuento por porcentaje o una rebaja fija del precio y luego determina esa cantidad';

                // Crear el select para el tipo de descuento
                const selectTipoDescuento_O1 = document.createElement('select');
                selectTipoDescuento_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                selectTipoDescuento_O1.setAttribute('campoOferta', 'tipoDescuento');

                // Crear las opciones del select
                const optionPredeterminada_O1 = document.createElement('option');
                optionPredeterminada_O1.selected = true;
                optionPredeterminada_O1.setAttribute('value', '');

                optionPredeterminada_O1.disabled = true;
                optionPredeterminada_O1.textContent = 'Selecciona el tipo de descuento';

                const optionPorcentaje_O1 = document.createElement('option');
                optionPorcentaje_O1.value = 'porcentaje';
                optionPorcentaje_O1.textContent = 'Descuento por porcentaje';

                const optionCantidadFija_O1 = document.createElement('option');
                optionCantidadFija_O1.value = 'cantidadFija';
                optionCantidadFija_O1.textContent = 'Descuento por cantidad fija';




                // Agregar las opciones al select
                selectTipoDescuento_O1.appendChild(optionPredeterminada_O1);
                selectTipoDescuento_O1.appendChild(optionPorcentaje_O1);
                selectTipoDescuento_O1.appendChild(optionCantidadFija_O1);


                // Crear el input para la cantidad de descuento
                const inputCantidadDescuento_O1 = document.createElement('input');
                inputCantidadDescuento_O1.setAttribute('type', 'text');
                inputCantidadDescuento_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                inputCantidadDescuento_O1.placeholder = '00.00';
                inputCantidadDescuento_O1.setAttribute('campoOferta', 'cantidad');

                // Agregar el título, el select y el input al segundo contenedor
                divContenedor2_O1.appendChild(pTituloOpcion2_O1);
                divContenedor2_O1.appendChild(selectTipoDescuento_O1);
                divContenedor2_O1.appendChild(inputCantidadDescuento_O1);


                // Agregar los contenedores de opciones al espacio de opciones
                divEspacioOpciones_O1.appendChild(divContenedor1_O1);
                divEspacioOpciones_O1.appendChild(divContenedor2_O1);
                divOfertaConXApartamentos_O1.appendChild(divEspacioOpciones_O1);
                return divOfertaConXApartamentos_O1
            },
            "porApartamentosEspecificos": () => {

                // Crear el elemento div principal
                const porApartamentoDedicado = document.createElement('div');
                porApartamentoDedicado.classList.add('espaciadoInterno');
                porApartamentoDedicado.setAttribute('zonaOferta', 'porApartamentosEspecificos');


                // Crear el primer div interno
                const divCrearOfertaEspacioOpciones_3 = document.createElement('div');
                divCrearOfertaEspacioOpciones_3.classList.add('crearOfeartaEspacioOpciones');
                porApartamentoDedicado.appendChild(divCrearOfertaEspacioOpciones_3);

                // Crear el segundo div interno dentro del primer div interno
                const divCrearOfertaConentenedor1_3 = document.createElement('div');
                divCrearOfertaConentenedor1_3.classList.add('crearOfertaConentenedor');
                divCrearOfertaConentenedor1_3.setAttribute('parteOferta', 'apartamentosDedicados');
                divCrearOfertaEspacioOpciones_3.appendChild(divCrearOfertaConentenedor1_3);

                // Crear el párrafo dentro del segundo div interno
                const pCrearOfertaTituloOpcion1_3 = document.createElement('p');
                pCrearOfertaTituloOpcion1_3.classList.add('crearOfertaTituloOpcion');
                pCrearOfertaTituloOpcion1_3.textContent =
                    'Añade que apartamentos en concreto debe de seleccionar el cliente para que se aplique esta oferta';
                divCrearOfertaConentenedor1_3.appendChild(pCrearOfertaTituloOpcion1_3);

                // Crear el párrafo 'Anadir apartamento' dentro del segundo div interno
                const pCrearOFertaBotonAnadirApartamento_3 = document.createElement('p');
                pCrearOFertaBotonAnadirApartamento_3.classList.add('crearOFertaBotonAnadirApartamento');
                pCrearOFertaBotonAnadirApartamento_3.setAttribute('componente', 'botonAnadirApartamentoOferta');
                pCrearOFertaBotonAnadirApartamento_3.textContent = 'Anadir apartamento';
                pCrearOFertaBotonAnadirApartamento_3.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.apartamentosDisponbiles)

                divCrearOfertaConentenedor1_3.appendChild(pCrearOFertaBotonAnadirApartamento_3);

                // Crear el div 'crearOfertaZonaAnadirApartamento' dentro del segundo div interno
                const divCrearOfertaZonaAnadirApartamento_3 = document.createElement('div');
                divCrearOfertaZonaAnadirApartamento_3.classList.add('crearOfertaZonaAnadirApartamento');
                divCrearOfertaZonaAnadirApartamento_3.setAttribute('componente', 'zonaAnadirApartamento');

                // Crear el párrafo 'No hay ningun apartamento...' dentro del div 'crearOfertaZonaAnadirApartamento'
                const pCrearApartamentoInfoSinApartamento_3 = document.createElement('p');
                pCrearApartamentoInfoSinApartamento_3.classList.add('crearApartamentoInfoSinApartamento');
                pCrearApartamentoInfoSinApartamento_3.setAttribute('componente', 'infoSinApartamento');
                pCrearApartamentoInfoSinApartamento_3.textContent =
                    'No hay ningun apartamento dentro de esta reserva, pulse el boton anadir apartamento para anadir apartamentos en especiico';
                divCrearOfertaZonaAnadirApartamento_3.appendChild(pCrearApartamentoInfoSinApartamento_3);

                divCrearOfertaConentenedor1_3.appendChild(divCrearOfertaZonaAnadirApartamento_3);

                // Crear el tercer div interno dentro del primer div interno
                const divCrearOfertaConentenedor2_3 = document.createElement('div');
                divCrearOfertaConentenedor2_3.classList.add('crearOfertaConentenedor');
                divCrearOfertaConentenedor2_3.setAttribute('parteOferta', 'aplicacionDescuento');
                divCrearOfertaEspacioOpciones_3.appendChild(divCrearOfertaConentenedor2_3);

                // Crear el párrafo dentro del tercer div interno
                const pCrearOfertaTituloOpcion2_3 = document.createElement('p');
                pCrearOfertaTituloOpcion2_3.classList.add('crearOfertaTituloOpcion');
                pCrearOfertaTituloOpcion2_3.textContent =
                    'Determina donde se aplica el descuento de esta oferta, este tipo de oferta que has seleccionado se basa en los apartamentos concretos que tiene que escoger el cliente. Es por eso que aparte de la opción de descuento al neto de la reserva, puedes establecer descuentos individuales por apartamento dedicado';
                divCrearOfertaConentenedor2_3.appendChild(pCrearOfertaTituloOpcion2_3);

                // Crear el select dentro del tercer div interno
                const selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3 = document.createElement('select');
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.setAttribute('campoOferta', 'contextoAplicacion');
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.setAttribute('componente', 'selecionOpcionesOferta');
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.addEventListener("change", casaVitini.administracion.gestion_de_ofertas.crearOferta.opcionesOferta)

                // Crear las opciones del select
                const optionPredeterminada_O3 = document.createElement('option');
                optionPredeterminada_O3.selected = true;
                optionPredeterminada_O3.setAttribute('value', '');

                optionPredeterminada_O3.disabled = true;
                optionPredeterminada_O3.setAttribute('value', '');

                optionPredeterminada_O3.textContent = '¿Donde se aplica el descuento de esta oferta?';

                const optiontotalNetoApartmentoDedicado_O2 = document.createElement('option');
                optiontotalNetoApartmentoDedicado_O2.value = 'totalNetoApartmentoDedicado';
                optiontotalNetoApartmentoDedicado_O2.setAttribute("opcionesOferta", "descuentosDedicados")
                optiontotalNetoApartmentoDedicado_O2.textContent = 'Aplicacion individual por apartamento';
                /*
                const optiontotalNetoApartmento_O2 = document.createElement('option');
                optiontotalNetoApartmento_O2.value = 'totalNetoApartmento';
                optiontotalNetoApartmento_O2.setAttribute("opcionesOferta", "descuentoGlobal")
                optiontotalNetoApartmento_O2.textContent = 'Descuento compartido por los apartamentos';
                */
                const optiontotalNetoReserva_O3 = document.createElement('option');
                optiontotalNetoReserva_O3.value = 'totalNetoReserva';
                optiontotalNetoReserva_O3.setAttribute("opcionesOferta", "descuentoGlobal")
                optiontotalNetoReserva_O3.textContent = 'Aplicacion al neto de la reserva';

                // Agregar las opciones al select
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.appendChild(optionPredeterminada_O3);
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.appendChild(optiontotalNetoApartmentoDedicado_O2);
                //selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.appendChild(optiontotalNetoApartmento_O2);
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.appendChild(optiontotalNetoReserva_O3);



                divCrearOfertaConentenedor2_3.appendChild(selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3);

                // Crear el cuarto div interno con la clase estadoInicialInvisible
                const divCrearOfertaConentenedor3_3 = document.createElement('div');
                divCrearOfertaConentenedor3_3.classList.add('crearOfertaConentenedor', 'estadoInicialInvisible');
                divCrearOfertaConentenedor3_3.setAttribute('controladorDesliegue', 'descuentoGlobal');
                divCrearOfertaConentenedor3_3.setAttribute('parteOferta', 'tipoDescuentoGlobalOferta');
                divCrearOfertaEspacioOpciones_3.appendChild(divCrearOfertaConentenedor3_3);

                // Crear el párrafo dentro del cuarto div interno
                const pCrearOfertaTituloOpcion3_3 = document.createElement('p');
                pCrearOfertaTituloOpcion3_3.classList.add('crearOfertaTituloOpcion');
                pCrearOfertaTituloOpcion3_3.textContent =
                    'Determina si esta oferta sera un descuento por porcentaje o una rebaja fija del precio y luego determina esa cantidad';
                divCrearOfertaConentenedor3_3.appendChild(pCrearOfertaTituloOpcion3_3);

                // Crear el select dentro del cuarto div interno
                const selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto2_3 = document.createElement('select');
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto2_3.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto2_3.setAttribute('campoOferta', 'tipoDescuento');



                // Crear las opciones del select
                const optionPredeterminada_3 = document.createElement('option');
                optionPredeterminada_3.selected = true;
                optionPredeterminada_3.disabled = true;
                optionPredeterminada_3.setAttribute('value', '');
                optionPredeterminada_3.textContent = 'Selecciona el tipo de descuento';

                const optionPorcentaje_3 = document.createElement('option');
                optionPorcentaje_3.value = 'porcentaje';
                optionPorcentaje_3.textContent = 'Descuento por porcentaje';

                const optionCantidadFija_3 = document.createElement('option');
                optionCantidadFija_3.value = 'cantidadFija';
                optionCantidadFija_3.textContent = 'Descuento por cantidad fija';


                // Agregar las opciones al select
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto2_3.appendChild(optionPredeterminada_3);
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto2_3.appendChild(optionPorcentaje_3);
                selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto2_3.appendChild(optionCantidadFija_3);



                divCrearOfertaConentenedor3_3.appendChild(selectPreciosEImpuestosbotonOpcionCrearNuevoImpuesto2_3);

                // Crear el input dentro del cuarto div interno
                const inputPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3 = document.createElement('input');
                inputPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.setAttribute('type', 'text');
                inputPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                inputPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.setAttribute('placeholder', '00.00');
                inputPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3.setAttribute('campoOferta', 'cantidad');
                divCrearOfertaConentenedor3_3.appendChild(inputPreciosEImpuestosbotonOpcionCrearNuevoImpuesto_3);

                // Crear el quinto div interno con la clase estadoInicialInvisible
                const divCrearOfertaConentenedor4_3 = document.createElement('div');
                divCrearOfertaConentenedor4_3.classList.add('crearOfertaConentenedor', 'estadoInicialInvisible');
                divCrearOfertaConentenedor4_3.setAttribute('controladorDesliegue', 'descuentosDedicados');
                divCrearOfertaConentenedor4_3.setAttribute('parteOferta', 'descuentosDedicados');
                divCrearOfertaEspacioOpciones_3.appendChild(divCrearOfertaConentenedor4_3);

                // Crear el párrafo dentro del quinto div interno
                const pCrearOfertaTituloOpcion4_3 = document.createElement('p');
                pCrearOfertaTituloOpcion4_3.classList.add('crearOfertaTituloOpcion');
                pCrearOfertaTituloOpcion4_3.textContent =
                    'Determina los descuentos individuales para cada apartamento seleccionado en esta oferta';
                divCrearOfertaConentenedor4_3.appendChild(pCrearOfertaTituloOpcion4_3);

                // Crear el segundo párrafo dentro del quinto div interno
                const pCrearOfertaTituloOpcion5_3 = document.createElement('p');
                pCrearOfertaTituloOpcion5_3.classList.add('crearOfertaTituloOpcion');
                pCrearOfertaTituloOpcion5_3.setAttribute('componente', 'infoDescuentoDedicados');
                pCrearOfertaTituloOpcion5_3.textContent =
                    'Ahora mismo no tienes ningun apartamento selecioando poder aplicarle un descuento individual. Pulsa en el boton Anadir apartamentos para comenzar a personalizar los descuentos por apartamento.';
                divCrearOfertaConentenedor4_3.appendChild(pCrearOfertaTituloOpcion5_3);
                return porApartamentoDedicado



            },
            "porDiasDeAntelacion": () => {
                const divOfertaConXApartamentos_O1 = document.createElement('div');
                divOfertaConXApartamentos_O1.setAttribute('zonaOferta', 'porDiasDeAntelacion');
                divOfertaConXApartamentos_O1.classList.add('espaciadoInterno');


                // Crear el elemento div para el espacio de opciones
                const divEspacioOpciones_O1 = document.createElement('div');
                divEspacioOpciones_O1.classList.add('crearOfeartaEspacioOpciones');

                // Crear el primer contenedor de opciones
                const divContenedor1_O1 = document.createElement('div');
                divContenedor1_O1.classList.add('crearOfertaConentenedor');

                // Crear el elemento p para el título de la primera opción
                const pTituloOpcion1_O1 = document.createElement('p');
                pTituloOpcion1_O1.classList.add('crearOfertaTituloOpcion');
                pTituloOpcion1_O1.textContent = 'Determina cuántos dias de antelacion en concreto debe de tener la reserva o a partir de cuantos dias de antelacion se aplica esta oferta';

                // Crear el select para el tipo de descuento
                const seleccionaTipoNumero = document.createElement('select');
                seleccionaTipoNumero.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                seleccionaTipoNumero.setAttribute('campoOferta', 'simboloNumero');

                // Crear las opciones del select
                const optionO1 = document.createElement('option');
                optionO1.selected = true;
                optionO1.disabled = true;
                optionO1.setAttribute('value', '');
                optionO1.textContent = 'Selecciona si apartir de o un numero exacto de dias';

                const optionO2 = document.createElement('option');
                optionO2.value = 'numeroExacto';
                optionO2.textContent = 'Con un numero exacto de dias de antelacion';

                const opcion03 = document.createElement('option');
                opcion03.value = 'aPartirDe';
                opcion03.textContent = 'A partir de un numero exacto de de dias de antelacion';

                seleccionaTipoNumero.appendChild(optionO1);
                seleccionaTipoNumero.appendChild(optionO2);
                seleccionaTipoNumero.appendChild(opcion03);

                // Crear el input para el número de apartamentos
                const inputNumeroApartamentos_O1 = document.createElement('input');
                inputNumeroApartamentos_O1.setAttribute('type', 'text');
                inputNumeroApartamentos_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                inputNumeroApartamentos_O1.placeholder = "Determina el numero de dias de antelacion";
                inputNumeroApartamentos_O1.setAttribute('campoOferta', 'numero');

                // Agregar el título y el input al primer contenedor
                divContenedor1_O1.appendChild(pTituloOpcion1_O1);
                divContenedor1_O1.appendChild(seleccionaTipoNumero);
                divContenedor1_O1.appendChild(inputNumeroApartamentos_O1);

                // Crear el segundo contenedor de opciones
                const divContenedor2_O1 = document.createElement('div');
                divContenedor2_O1.classList.add('crearOfertaConentenedor');

                // Crear el elemento p para el título de la segunda opción
                const pTituloOpcion2_O1 = document.createElement('p');
                pTituloOpcion2_O1.classList.add('crearOfertaTituloOpcion');
                pTituloOpcion2_O1.textContent = 'Determina si esta oferta será un descuento por porcentaje o una rebaja fija del precio y luego determina esa cantidad';

                // Crear el select para el tipo de descuento
                const selectTipoDescuento_O1 = document.createElement('select');
                selectTipoDescuento_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                selectTipoDescuento_O1.setAttribute('campoOferta', 'tipoDescuento');

                // Crear las opciones del select
                const optionPredeterminada_O1 = document.createElement('option');
                optionPredeterminada_O1.selected = true;
                optionPredeterminada_O1.setAttribute('value', '');

                optionPredeterminada_O1.disabled = true;
                optionPredeterminada_O1.textContent = 'Selecciona el tipo de descuento';

                const optionPorcentaje_O1 = document.createElement('option');
                optionPorcentaje_O1.value = 'porcentaje';
                optionPorcentaje_O1.textContent = 'Descuento por porcentaje';

                const optionCantidadFija_O1 = document.createElement('option');
                optionCantidadFija_O1.value = 'cantidadFija';
                optionCantidadFija_O1.textContent = 'Descuento por cantidad fija';




                // Agregar las opciones al select
                selectTipoDescuento_O1.appendChild(optionPredeterminada_O1);
                selectTipoDescuento_O1.appendChild(optionPorcentaje_O1);
                selectTipoDescuento_O1.appendChild(optionCantidadFija_O1);


                // Crear el input para la cantidad de descuento
                const inputCantidadDescuento_O1 = document.createElement('input');
                inputCantidadDescuento_O1.setAttribute('type', 'text');
                inputCantidadDescuento_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                inputCantidadDescuento_O1.placeholder = '00.00';
                inputCantidadDescuento_O1.setAttribute('campoOferta', 'cantidad');

                // Agregar el título, el select y el input al segundo contenedor
                divContenedor2_O1.appendChild(pTituloOpcion2_O1);
                divContenedor2_O1.appendChild(selectTipoDescuento_O1);
                divContenedor2_O1.appendChild(inputCantidadDescuento_O1);


                // Agregar los contenedores de opciones al espacio de opciones
                divEspacioOpciones_O1.appendChild(divContenedor1_O1);
                divEspacioOpciones_O1.appendChild(divContenedor2_O1);
                divOfertaConXApartamentos_O1.appendChild(divEspacioOpciones_O1);
                return divOfertaConXApartamentos_O1
            },
            "porDiasDeReserva": () => {
                const divOfertaConXApartamentos_O1 = document.createElement('div');
                divOfertaConXApartamentos_O1.setAttribute('zonaOferta', 'porDiasDeReserva');
                divOfertaConXApartamentos_O1.classList.add('espaciadoInterno');


                // Crear el elemento div para el espacio de opciones
                const divEspacioOpciones_O1 = document.createElement('div');
                divEspacioOpciones_O1.classList.add('crearOfeartaEspacioOpciones');

                // Crear el primer contenedor de opciones
                const divContenedor1_O1 = document.createElement('div');
                divContenedor1_O1.classList.add('crearOfertaConentenedor');

                // Crear el elemento p para el título de la primera opción
                const pTituloOpcion1_O1 = document.createElement('p');
                pTituloOpcion1_O1.classList.add('crearOfertaTituloOpcion');
                pTituloOpcion1_O1.textContent = 'Determina cuántos dias debe tener la reserva en concreto o a partir de cuantos dias debe de tener la reserva';

                // Crear el select para el tipo de descuento
                const seleccionaTipoNumero = document.createElement('select');
                seleccionaTipoNumero.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                seleccionaTipoNumero.setAttribute('campoOferta', 'simboloNumero');

                // Crear las opciones del select
                const optionO1 = document.createElement('option');
                optionO1.selected = true;
                optionO1.disabled = true;
                optionO1.setAttribute('value', '');

                optionO1.textContent = 'Selecciona si apartir de o un numero exacto de días';

                const optionO2 = document.createElement('option');
                optionO2.value = 'numeroExacto';
                optionO2.textContent = 'Con un numero exacto de días de de duración de la reserva';

                const opcion03 = document.createElement('option');
                opcion03.value = 'aPartirDe';
                opcion03.textContent = 'A partir de un numero exacto de de días de duración de la reserva';

                seleccionaTipoNumero.appendChild(optionO1);
                seleccionaTipoNumero.appendChild(optionO2);
                seleccionaTipoNumero.appendChild(opcion03);

                // Crear el input para el número de apartamentos
                const inputNumeroApartamentos_O1 = document.createElement('input');
                inputNumeroApartamentos_O1.setAttribute('type', 'text');
                inputNumeroApartamentos_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                inputNumeroApartamentos_O1.placeholder = "Determina el numero de dias de la reserva";
                inputNumeroApartamentos_O1.setAttribute('campoOferta', 'numero');

                // Agregar el título y el input al primer contenedor
                divContenedor1_O1.appendChild(pTituloOpcion1_O1);
                divContenedor1_O1.appendChild(seleccionaTipoNumero);
                divContenedor1_O1.appendChild(inputNumeroApartamentos_O1);

                // Crear el segundo contenedor de opciones
                const divContenedor2_O1 = document.createElement('div');
                divContenedor2_O1.classList.add('crearOfertaConentenedor');

                // Crear el elemento p para el título de la segunda opción
                const pTituloOpcion2_O1 = document.createElement('p');
                pTituloOpcion2_O1.classList.add('crearOfertaTituloOpcion');
                pTituloOpcion2_O1.textContent = 'Determina si esta oferta será un descuento por porcentaje o una rebaja fija del precio y luego determina esa cantidad';

                // Crear el select para el tipo de descuento
                const selectTipoDescuento_O1 = document.createElement('select');
                selectTipoDescuento_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                selectTipoDescuento_O1.setAttribute('campoOferta', 'tipoDescuento');

                // Crear las opciones del select
                const optionPredeterminada_O1 = document.createElement('option');
                optionPredeterminada_O1.selected = true;
                optionPredeterminada_O1.disabled = true;
                optionPredeterminada_O1.setAttribute('value', '');
                optionPredeterminada_O1.textContent = 'Selecciona el tipo de descuento';

                const optionPorcentaje_O1 = document.createElement('option');
                optionPorcentaje_O1.value = 'porcentaje';
                optionPorcentaje_O1.textContent = 'Descuento por porcentaje';

                const optionCantidadFija_O1 = document.createElement('option');
                optionCantidadFija_O1.value = 'cantidadFija';
                optionCantidadFija_O1.textContent = 'Descuento por cantidad fija';



                // Agregar las opciones al select
                selectTipoDescuento_O1.appendChild(optionPredeterminada_O1);
                selectTipoDescuento_O1.appendChild(optionPorcentaje_O1);
                selectTipoDescuento_O1.appendChild(optionCantidadFija_O1);


                // Crear el input para la cantidad de descuento
                const inputCantidadDescuento_O1 = document.createElement('input');
                inputCantidadDescuento_O1.setAttribute('type', 'text');
                inputCantidadDescuento_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                inputCantidadDescuento_O1.placeholder = '00.00';
                inputCantidadDescuento_O1.setAttribute('campoOferta', 'cantidad');

                // Agregar el título, el select y el input al segundo contenedor
                divContenedor2_O1.appendChild(pTituloOpcion2_O1);
                divContenedor2_O1.appendChild(selectTipoDescuento_O1);
                divContenedor2_O1.appendChild(inputCantidadDescuento_O1);


                // Agregar los contenedores de opciones al espacio de opciones
                divEspacioOpciones_O1.appendChild(divContenedor1_O1);
                divEspacioOpciones_O1.appendChild(divContenedor2_O1);
                divOfertaConXApartamentos_O1.appendChild(divEspacioOpciones_O1);
                return divOfertaConXApartamentos_O1
            },
            "porRangoDeFechas": () => {
                const divOfertaConXApartamentos_O1 = document.createElement('div');
                divOfertaConXApartamentos_O1.setAttribute('zonaOferta', 'porRangoDeFechas');
                divOfertaConXApartamentos_O1.classList.add('espaciadoInterno');


                // Crear el elemento div para el espacio de opciones
                const divEspacioOpciones_O1 = document.createElement('div');
                divEspacioOpciones_O1.classList.add('crearOfeartaEspacioOpciones');

                // Crear el primer contenedor de opciones
                const divContenedor1_O1 = document.createElement('div');
                divContenedor1_O1.classList.add('crearOfertaConentenedor');

                // Crear el elemento p para el título de la primera opción
                const pTituloOpcion1_O1 = document.createElement('p');
                pTituloOpcion1_O1.classList.add('crearOfertaTituloOpcion');
                pTituloOpcion1_O1.textContent = 'Determina cuántos dias debe tener la reserva en concreto o a partir de cuantos dias debe de tener la reserva';

                // Crear el select para el tipo de descuento
                const seleccionaTipoNumero = document.createElement('select');
                seleccionaTipoNumero.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                seleccionaTipoNumero.setAttribute('campoOferta', 'simboloNumero');

                // Crear las opciones del select
                const optionO1 = document.createElement('option');
                optionO1.selected = true;
                optionO1.disabled = true;
                optionO1.setAttribute('value', '');

                optionO1.textContent = 'Selecciona si apartir de o un numero exacto de dias';

                const optionO2 = document.createElement('option');
                optionO2.value = 'numeroExacto';
                optionO2.textContent = 'Con un numero exacto de dias de de duracion de la reserva';

                const opcion03 = document.createElement('option');
                opcion03.value = 'aPartirDe';
                opcion03.textContent = 'A partir de un numero exacto de de dias de duracion de la reserva';

                seleccionaTipoNumero.appendChild(optionO1);
                seleccionaTipoNumero.appendChild(optionO2);
                seleccionaTipoNumero.appendChild(opcion03);

                // Crear el input para el número de apartamentos
                const inputNumeroApartamentos_O1 = document.createElement('input');
                inputNumeroApartamentos_O1.setAttribute('type', 'text');
                inputNumeroApartamentos_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                inputNumeroApartamentos_O1.placeholder = "Determina el numero de dias de la reserva";
                inputNumeroApartamentos_O1.setAttribute('campoOferta', 'numero');

                // Agregar el título y el input al primer contenedor
                divContenedor1_O1.appendChild(pTituloOpcion1_O1);
                divContenedor1_O1.appendChild(seleccionaTipoNumero);
                divContenedor1_O1.appendChild(inputNumeroApartamentos_O1);






                // Crear el segundo contenedor de opciones
                const divContenedor2_O1 = document.createElement('div');
                divContenedor2_O1.classList.add('crearOfertaConentenedor');

                // Crear el elemento p para el título de la segunda opción
                const pTituloOpcion2_O1 = document.createElement('p');
                pTituloOpcion2_O1.classList.add('crearOfertaTituloOpcion');
                pTituloOpcion2_O1.textContent = 'Determina si esta oferta será un descuento por porcentaje o una rebaja fija del precio y luego determina esa cantidad';

                // Crear el select para el tipo de descuento
                const selectTipoDescuento_O1 = document.createElement('select');
                selectTipoDescuento_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                selectTipoDescuento_O1.setAttribute('campoOferta', 'tipoDescuento');

                // Crear las opciones del select
                const optionPredeterminada_O1 = document.createElement('option');
                optionPredeterminada_O1.selected = true;
                optionPredeterminada_O1.disabled = true;
                optionPredeterminada_O1.setAttribute('value', '');
                optionPredeterminada_O1.textContent = 'Selecciona el tipo de descuento';

                const optionPorcentaje_O1 = document.createElement('option');
                optionPorcentaje_O1.value = 'porcentaje';
                optionPorcentaje_O1.textContent = 'Descuento por porcentaje';

                const optionCantidadFija_O1 = document.createElement('option');
                optionCantidadFija_O1.value = 'cantidadFija';
                optionCantidadFija_O1.textContent = 'Descuento por cantidad fija';



                // Agregar las opciones al select
                selectTipoDescuento_O1.appendChild(optionPredeterminada_O1);
                selectTipoDescuento_O1.appendChild(optionPorcentaje_O1);
                selectTipoDescuento_O1.appendChild(optionCantidadFija_O1);


                // Crear el input para la cantidad de descuento
                const inputCantidadDescuento_O1 = document.createElement('input');
                inputCantidadDescuento_O1.setAttribute('type', 'text');
                inputCantidadDescuento_O1.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
                inputCantidadDescuento_O1.placeholder = '00.00';
                inputCantidadDescuento_O1.setAttribute('campoOferta', 'cantidad');

                // Agregar el título, el select y el input al segundo contenedor
                divContenedor2_O1.appendChild(pTituloOpcion2_O1);
                divContenedor2_O1.appendChild(selectTipoDescuento_O1);
                divContenedor2_O1.appendChild(inputCantidadDescuento_O1);


                // Agregar los contenedores de opciones al espacio de opciones
                //  divEspacioOpciones_O1.appendChild(divContenedor1_O1);
                divEspacioOpciones_O1.appendChild(divContenedor2_O1);
                divOfertaConXApartamentos_O1.appendChild(divEspacioOpciones_O1);
                return divOfertaConXApartamentos_O1
            },
            "botonesCrearOferta": () => {
                const divBotones_O1 = document.createElement('div');
                divBotones_O1.classList.add('crearOfertaEpacioBotones');
                divBotones_O1.setAttribute("componente", "espacioBotones")

                // Crear el botón para crear la oferta
                const pBotonCrearOferta_O1 = document.createElement('p');
                pBotonCrearOferta_O1.classList.add('crearOfervaBotonV1');
                pBotonCrearOferta_O1.textContent = 'Crear oferta';
                pBotonCrearOferta_O1.setAttribute('componente', 'botonCrearOferta');
                pBotonCrearOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.crearOfertaConfirmar)
                divBotones_O1.appendChild(pBotonCrearOferta_O1)
                return divBotones_O1
            },
            "botonesModificarOferta": () => {
                const divBotones_O1 = document.createElement('div');
                divBotones_O1.classList.add('crearOfertaEpacioBotones');
                divBotones_O1.setAttribute("componente", "espacioBotones")


                const botonModificarOferta = document.createElement("div")
                botonModificarOferta.classList.add('crearOfervaBotonV1');
                botonModificarOferta.setAttribute('componente', 'botonEditarOferta');
                botonModificarOferta.setAttribute('tipoOferta', 'conXApartamentosEnConcreto');
                botonModificarOferta.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.ofertaModos)
                botonModificarOferta.textContent = 'Modificar oferta';

                const pBotonGuardarOferta_O1 = document.createElement("div")
                pBotonGuardarOferta_O1.classList.add('crearOfervaBotonV1');
                pBotonGuardarOferta_O1.setAttribute('componente', 'botonGuardarCambios');
                pBotonGuardarOferta_O1.classList.add('elementoOcultoInicialmente');
                pBotonGuardarOferta_O1.setAttribute('tipoOferta', 'conXApartamentosEnConcreto');
                pBotonGuardarOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.guardarCambiosOferta)
                pBotonGuardarOferta_O1.textContent = 'Guardar cambios';

                const pBotonCancelarCambiosOferta_O1 = document.createElement('p');
                pBotonCancelarCambiosOferta_O1.classList.add('crearOfervaBotonV1');
                pBotonCancelarCambiosOferta_O1.classList.add('elementoOcultoInicialmente');
                pBotonCancelarCambiosOferta_O1.setAttribute('componente', 'botonCancelarCambios');
                pBotonCancelarCambiosOferta_O1.setAttribute('tipoOferta', 'conXApartamentosEnConcreto');
                pBotonCancelarCambiosOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.ofertaModos)
                pBotonCancelarCambiosOferta_O1.textContent = 'Cancelar cambios y dejar de editar';


                const pBotonEliminarOferta_O1 = document.createElement('p');
                pBotonEliminarOferta_O1.classList.add('crearOfervaBotonV1');
                pBotonEliminarOferta_O1.classList.add('elementoOcultoInicialmente');
                pBotonEliminarOferta_O1.setAttribute('componente', 'botonElimnarOferta');
                pBotonEliminarOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.eliminarOferta.UI)
                pBotonEliminarOferta_O1.textContent = 'Eliminar oferta';

                divBotones_O1.appendChild(botonModificarOferta);
                divBotones_O1.appendChild(pBotonGuardarOferta_O1);
                divBotones_O1.appendChild(pBotonCancelarCambiosOferta_O1);
                divBotones_O1.appendChild(pBotonEliminarOferta_O1);

                return divBotones_O1


            },
            "desplegarOpcionesOferta": (opcionOferta) => {
                const tipoOferta = opcionOferta.target.closest("[tipoOferta]").getAttribute("tipoOferta")
                const modoOferta = document.querySelector("[modo]").getAttribute("modo")
                const selectoresBotonDeplegarOpcionesOferta = [...document.querySelectorAll("[tipoOferta]")]
                selectoresBotonDeplegarOpcionesOferta.map((boton) => {
                    boton.removeAttribute("style")
                })

                opcionOferta.target.closest("[tipoOferta]").style.background = "blue"
                opcionOferta.target.closest("[tipoOferta]").style.color = "white"

                const selectorOpcionesOfertaRenderiadas = [...document.querySelectorAll(`[zonaOferta]`)]
                selectorOpcionesOfertaRenderiadas.map((opciones) => {
                    opciones.classList.add("elementoOcultoInicialmente")
                    opciones.removeAttribute("ofertaEnPrimerPlano")
                })

                const espacioCrearOferta = document.querySelector("[componente=espacioCrearOferta]")
                if (tipoOferta === "porNumeroDeApartamentos") {
                    let selectorZonaOfertaRenderizada = document.querySelector(`[zonaOferta=porNumeroDeApartamentos]`)
                    if (!selectorZonaOfertaRenderizada) {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porNumeroDeApartamentos()
                        espacioCrearOferta.appendChild(opcionesUI)
                    } else {
                        selectorZonaOfertaRenderizada.classList.remove("elementoOcultoInicialmente")
                    }
                    document.querySelector(`[zonaOferta=porNumeroDeApartamentos]`).setAttribute("ofertaEnPrimerPlano", "Activado")
                }
                if (tipoOferta === "porApartamentosEspecificos") {
                    let selectorZonaOfertaRenderizada = document.querySelector(`[zonaOferta=porApartamentosEspecificos]`)
                    if (!selectorZonaOfertaRenderizada) {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porApartamentosEspecificos()
                        espacioCrearOferta.appendChild(opcionesUI)
                    } else {
                        selectorZonaOfertaRenderizada.classList.remove("elementoOcultoInicialmente")
                    }
                    document.querySelector(`[zonaOferta=porApartamentosEspecificos]`).setAttribute("ofertaEnPrimerPlano", "Activado")
                }
                if (tipoOferta === "porDiasDeAntelacion") {
                    let selectorZonaOfertaRenderizada = document.querySelector(`[zonaOferta=porDiasDeAntelacion]`)
                    if (!selectorZonaOfertaRenderizada) {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porDiasDeAntelacion()
                        espacioCrearOferta.appendChild(opcionesUI)
                    } else {
                        selectorZonaOfertaRenderizada.classList.remove("elementoOcultoInicialmente")
                    }
                    document.querySelector(`[zonaOferta=porDiasDeAntelacion]`).setAttribute("ofertaEnPrimerPlano", "Activado")

                }
                if (tipoOferta === "porDiasDeReserva") {
                    let selectorZonaOfertaRenderizada = document.querySelector(`[zonaOferta=porDiasDeReserva]`)
                    if (!selectorZonaOfertaRenderizada) {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porDiasDeReserva()
                        espacioCrearOferta.appendChild(opcionesUI)
                    } else {
                        selectorZonaOfertaRenderizada.classList.remove("elementoOcultoInicialmente")
                    }
                    document.querySelector(`[zonaOferta=porDiasDeReserva]`).setAttribute("ofertaEnPrimerPlano", "Activado")

                }
                if (tipoOferta === "porRangoDeFechas") {
                    let selectorZonaOfertaRenderizada = document.querySelector(`[zonaOferta=porRangoDeFechas]`)
                    if (!selectorZonaOfertaRenderizada) {
                        const opcionesUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.porRangoDeFechas()
                        espacioCrearOferta.appendChild(opcionesUI)
                    } else {
                        selectorZonaOfertaRenderizada.classList.remove("elementoOcultoInicialmente")
                    }
                    document.querySelector(`[zonaOferta=porRangoDeFechas]`).setAttribute("ofertaEnPrimerPlano", "Activado")

                }
                const espacioOfertas = document.querySelector("[componente=espacioOfertas]")

                const espacioBotonesRenderizado = document.querySelector("[componente=espacioBotones]")

                if (modoOferta === "crearOferta" && !espacioBotonesRenderizado) {

                    const botonesCrearOferta = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesCrearOferta()
                    espacioOfertas.appendChild(botonesCrearOferta)
                }
                if (modoOferta === "editarOferta" && !espacioBotonesRenderizado) {
                    const botonesCrearOferta = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesModificarOferta()
                    espacioOfertas.appendChild(botonesCrearOferta)
                }


            },

        }

    },
    comportamiento_de_precios: {
        "arranque": async () => {
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            const granuladoURL = casaVitini.componentes.granuladorURL()
            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

            if (comandoInicial === "comportamiento_de_precios" && Object.keys(granuladoURL.parametros).length === 0) {
                return casaVitini.administracion.comportamiento_de_precios.portadaUI()
            }

            if (granuladoURL.parametros.comportamiento) {
                return casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.UI(granuladoURL.parametros.comportamiento)
            }
            const info = {
                titulo: "No existe ninguna reserva con ese identificador",
                descripcion: "La reserva que buscas con ese identificador no existe. Comprueba el identificador de la reserva"
            }
            return casaVitini.componentes.mensajeSimple(info)
        },
        "portadaUI": async () => {
            let espacioOfertas = document.querySelector("[componente=espacioOfertas]")

            let contenedor = document.createElement("div")
            contenedor.classList.add("gestionDeOfertasContenedor")

            let contenedorBotones = document.createElement("div")
            contenedorBotones.classList.add("gestionDeOfertasContenedorBotones")

            let botonCrearOfertas = document.createElement("a")
            botonCrearOfertas.classList.add("gestionDeOfertasBotonCrearOferta")
            botonCrearOfertas.innerText = "Crear un comportamiento de precios"
            botonCrearOfertas.setAttribute("href", "/administracion/comportamiento_de_precios/crear_comportamiento")
            botonCrearOfertas.setAttribute("vista", "/administracion/comportamiento_de_precios/crear_comportamiento")
            botonCrearOfertas.addEventListener("click", casaVitini.componentes.cambiarVista)

            contenedorBotones.appendChild(botonCrearOfertas)
            contenedor.appendChild(contenedorBotones)

            let contenedorOfertas = document.createElement("div")
            contenedorOfertas.classList.add("comportamintoDePreciosSuperBloque")
            contenedorOfertas.setAttribute("componente", "espacioListaOfertas")
            contenedor.appendChild(contenedorOfertas)

            espacioOfertas.appendChild(contenedor)

            const transaccion = {
                zona: "administracion/comportamientoDePrecios/listaComportamientosPrecios"
            }
            let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {
                let espacioListaOfertas = document.querySelector("[componente=espacioListaOfertas]")

                let ofertasEncontradas = respuestaServidor?.ok
                if (typeof ofertasEncontradas === "string") {


                    let ofertaUI = document.createElement("a")
                    ofertaUI.classList.add("ofertaUINoHay")
                    let tituloOferta = document.createElement("p")
                    tituloOferta.classList.add("ofertaUITituloOferta")
                    tituloOferta.innerText = "No hay ningun comportamiento de precios configurado. Pulsa en el boton crear nuevo comportameinto de precio para crear uno"
                    ofertaUI.appendChild(tituloOferta)
                    espacioListaOfertas.appendChild(ofertaUI)


                }

                if (Array.isArray(ofertasEncontradas) && ofertasEncontradas.length > 0) {
                    ofertasEncontradas.map((detalleOferta) => {

                        let uid = detalleOferta.uid
                        let nombreComportamiento = detalleOferta.nombreComportamiento
                        let fechaInicio = detalleOferta.fechaInicio
                        let fechaFinal = detalleOferta.fechaFinal





                        let comportamientoUI = document.createElement("a")
                        comportamientoUI.classList.add("comportamientoUI")
                        comportamientoUI.setAttribute("comportamientoUI", uid)
                        comportamientoUI.setAttribute("href", "/administracion/comportamiento_de_precios/comportamiento:" + uid)
                        comportamientoUI.setAttribute("vista", "/administracion/comportamiento_de_precios/comportamiento:" + uid)
                        comportamientoUI.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.traductorCambioVista)
                        let tituloComportamiento = document.createElement("p")
                        tituloComportamiento.classList.add("ofertaUITituloOferta")
                        tituloComportamiento.innerText = nombreComportamiento
                        comportamientoUI.appendChild(tituloComportamiento)

                        let contenedorGlobalOferta = document.createElement("div")
                        contenedorGlobalOferta.classList.add("ofertaUIContenedorComportamiento")

                        //-------------------------------------
                        let contenedorDetalleOferta = document.createElement("div")
                        contenedorDetalleOferta.classList.add("ofertaUIContenedorDetalles")



                        //-------------------------------------
                        let fechaInicioContenedor = document.createElement("div")
                        fechaInicioContenedor.classList.add("comportamientoUIFechaContenedor")

                        let tituloFechaInicio = document.createElement("div")
                        tituloFechaInicio.classList.add("ofertaUITituloFecha")
                        tituloFechaInicio.innerText = "Fecha de inicio"
                        fechaInicioContenedor.appendChild(tituloFechaInicio)

                        let datoFechaInicio = document.createElement("div")
                        datoFechaInicio.classList.add("ofertaUIDatoFecha")
                        datoFechaInicio.innerText = fechaInicio
                        fechaInicioContenedor.appendChild(datoFechaInicio)

                        contenedorGlobalOferta.appendChild(fechaInicioContenedor)

                        let fechaFinContenedor = document.createElement("div")
                        fechaFinContenedor.classList.add("comportamientoUIFechaContenedor")

                        let tituloFechaFin = document.createElement("div")
                        tituloFechaFin.classList.add("ofertaUITituloFecha")
                        tituloFechaFin.innerText = "Fecha de Fin"
                        fechaFinContenedor.appendChild(tituloFechaFin)

                        let datoFechaFin = document.createElement("div")
                        datoFechaFin.classList.add("ofertaUIDatoFecha")
                        datoFechaFin.innerText = fechaFinal
                        fechaFinContenedor.appendChild(datoFechaFin)

                        contenedorGlobalOferta.appendChild(fechaFinContenedor)

                        // contenedorGlobalOferta.appendChild(contenedorDetalleOferta)

                        comportamientoUI.appendChild(contenedorGlobalOferta)
                        //--------------------------------------



                        espacioListaOfertas.appendChild(comportamientoUI)


                    })













                }

            }

        },
        crearComportamiento: {
            arranque: () => {
                document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

                let selector = document.querySelector("[componente=espacioBuscadorReservas]")
                let ofertaUI = casaVitini.administracion.comportamiento_de_precios.detalleUI("crearOferta")
                selector.appendChild(ofertaUI)
            },
            desplegarOpcionesOferta: (opcionOferta) => {

                let tipoOferta = opcionOferta.target.closest("[tipoOferta]").getAttribute("tipoOferta")

                let selectorZonaOferta = [...document.querySelectorAll("[zonaOferta]")]
                selectorZonaOferta.map((zonaOferta) => {
                    zonaOferta.classList.add("estadoInicialInvisible")

                })
                document.querySelector(`[zonaOferta=${tipoOferta}]`).classList.remove("estadoInicialInvisible")
                let selectoresBotonDeplegarOpcionesOferta = [...document.querySelectorAll("[tipoOferta]")]
                selectoresBotonDeplegarOpcionesOferta.map((boton) => {
                    boton.removeAttribute("style")
                })

                opcionOferta.target.closest("[tipoOferta]").style.background = "blue"
                opcionOferta.target.closest("[tipoOferta]").style.color = "white"

            },
            constructorCalendario: async (boton) => {
                let botonID = boton.target.closest("[componente]").getAttribute("componente")
                const alturaDinamicaArriba = casaVitini.componentes.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton.target.closest("[componente]"))
                const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
                const calendario = document.querySelector("[contenedor=calendario]")
                let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                if (botonID === "inicioOferta") {
                    if (calendario?.getAttribute("calendarioIO") === "entrada") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        return
                    }
                    if (calendario?.getAttribute("calendarioIO") === "salida") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        // return
                    }
                    let resolucionCalendario
                    if (fechaEntradaSelecionda) {
                        fechaEntradaSelecionda = JSON.parse(fechaEntradaSelecionda)

                        let mesEntradaSeleccionado = fechaEntradaSelecionda.mes
                        let anoEntradaSeleccionado = fechaEntradaSelecionda.ano
                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesEntradaSeleccionado),
                            ano: Number(anoEntradaSeleccionado)
                        }
                    } else {
                        resolucionCalendario = {
                            tipo: "actual",
                            comando: "construyeObjeto"
                        }

                    }
                    let metadatosCalendario = {
                        tipoFecha: "entrada",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaEntradaAsistidoConPasadoComportamientoDePrecios",
                        calendarioIO: "entrada",
                        mensajeInfo: "Selecciona la fecha de inicio en el que el comportamiento se empeza a aplicar",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                    calendarioResuelvo.instanciaUID = instanciaUID

                    await casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)
                }
                if (botonID === "finOferta") {
                    if (calendario?.getAttribute("calendarioIO") === "salida") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        return
                    }
                    if (calendario?.getAttribute("calendarioIO") === "entrada") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        //return

                    }
                    let resolucionCalendario

                    if (fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                        fechaEntradaSelecionda = JSON.parse(fechaEntradaSelecionda)

                        let mesEntradaSeleccionado = fechaEntradaSelecionda.mes
                        let anoEntradaSeleccionado = fechaEntradaSelecionda.ano
                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesEntradaSeleccionado),
                            ano: Number(anoEntradaSeleccionado)
                        }
                    }

                    if (fechaSalidaSelecionda) {
                        fechaSalidaSelecionda = JSON.parse(fechaSalidaSelecionda)
                        let mesSalidaSeleccionado = fechaSalidaSelecionda.mes
                        let anoSalidaSeleccionado = fechaSalidaSelecionda.ano
                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            mes: Number(mesSalidaSeleccionado),
                            ano: Number(anoSalidaSeleccionado)
                        }
                    }

                    if (!fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                        resolucionCalendario = {
                            tipo: "actual",
                            comando: "construyeObjeto"
                        }
                    }

                    let metadatosCalendario = {
                        tipoFecha: "salida",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaSalidaAsistidoConPasadoComportamientoDePrecios",
                        calendarioIO: "salida",
                        mensajeInfo: "Selecciona la fecha final de comportamiento en el que se dejara de aplicar",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                    calendarioResuelvo.instanciaUID = instanciaUID

                    casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)
                }
            },
            seleccionarDia: (dia) => {
                let diaSeleccionadoComoElemento = dia.target;
                let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                let calendarioIO = calendario.getAttribute("calendarioIO")
                let botonAtras = document.getElementById("botonAtras")
                let botonAdelante = document.getElementById("botonAdelante")
                let fechaEntrada = document.getElementById("fechaEntrada")
                let fechaSalida = document.getElementById("fechaSalida")

                let diaSeleccionado = dia.target.getAttribute("dia")
                diaSeleccionado = diaSeleccionado.padStart(2, "0")
                diaSeleccionado = Number(diaSeleccionado)
                let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                anoSeleccionado = anoSeleccionado.padStart(4, "0")
                anoSeleccionado = Number(anoSeleccionado)
                let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                mesSeleccionado = mesSeleccionado.padStart(2, "0")
                mesSeleccionado = Number(mesSeleccionado)
                let fechaSeleccionada = {
                    "dia": diaSeleccionado,
                    "mes": mesSeleccionado,
                    "ano": anoSeleccionado
                }
                let fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                let selectorDias = [...document.querySelectorAll("[calendarioIO] [dia]")]
                selectorDias.map((dia) => {
                    // dia.classList.remove("calendarioDiaDisponible")
                    dia.classList.remove("calendarioDiaReserva")
                    dia.classList.remove("calendarioDiaSeleccionado")
                })
                if (diaSeleccionadoComoElemento.getAttribute("diaEstado") === "seleccionado") {
                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                        document.querySelector("[data=fechaInicioData]").innerText = "Seleccionar fecha de entrada"
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                        document.querySelector("[data=fechaFinData]").innerText = "Seleccionar fecha de salida"
                    }
                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                    diaSeleccionadoComoElemento.removeAttribute("diaEstado")
                    return
                }
                let diasDisponibles = [...document.querySelectorAll("[estado=disponible]")]
                diasDisponibles.map(diaDisponible => {
                    diaDisponible.removeAttribute("diaEstado")
                    diaDisponible.style.background = ""
                    diaDisponible.style.color = ""
                })

                diaSeleccionadoComoElemento.setAttribute("diaEstado", "seleccionado")
                diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")

                let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                let diaSeleccionadoEntrada
                let mesSeleccionadoEntrada
                let anoSeleccionadoEntrada
                let datosFechaEntradaSeleccionada
                if (fechaEntradaSelecionda) {
                    fechaEntradaSelecionda = JSON.parse(fechaEntradaSelecionda)
                    diaSeleccionadoEntrada = fechaEntradaSelecionda.dia
                    diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                    mesSeleccionadoEntrada = fechaEntradaSelecionda.mes
                    mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                    anoSeleccionadoEntrada = fechaEntradaSelecionda.ano
                    anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                    datosFechaEntradaSeleccionada = "existen"
                }

                let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                let diaSeleccionadoSalida
                let mesSeleccionadoSalida
                let anoSeleccionadoSalida
                let datosFechaSalidaSeleccionada
                if (fechaSalidaSelecionda) {
                    fechaSalidaSelecionda = JSON.parse(fechaSalidaSelecionda)
                    diaSeleccionadoSalida = fechaSalidaSelecionda.dia
                    diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                    mesSeleccionadoSalida = fechaSalidaSelecionda.mes
                    mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                    anoSeleccionadoSalida = fechaSalidaSelecionda.ano
                    anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                    datosFechaSalidaSeleccionada = "existen"
                }

                if (calendarioIO === "entrada") {
                    document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", JSON.stringify(fechaSeleccionada))
                    document.querySelector("[calendario=entrada]").setAttribute("fechaInicioFinal", fechaSeleccionadaUI)
                    document.querySelector("[data=fechaInicioData]").innerText = fechaSeleccionadaUI
                    if (fechaSalidaSelecionda) {
                        if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {
                                    //  dia.classList.remove("calendarioDiaDisponible")
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        } else {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        }
                    }
                }

                if (calendarioIO === "salida") {
                    document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", JSON.stringify(fechaSeleccionada))
                    document.querySelector("[calendario=salida]").setAttribute("fechaFinFinal", fechaSeleccionadaUI)
                    document.querySelector("[data=fechaFinData]").innerText = fechaSeleccionadaUI
                    if (fechaEntradaSelecionda) {
                        if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        } else {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        }

                    }
                }
            },
            "crearComortamientoConfirmar": async () => {
                let nombreComportamiento = document.querySelector("[campoOferta=nombreOferta]").value
                let fechaInicio = document.querySelector("[calendario=entrada]").getAttribute("fechaInicioFinal")
                let fechaFin = document.querySelector("[calendario=salida]").getAttribute("fechaFinFinal")

                const transaccion = {
                    zona: "administracion/comportamientoDePrecios/crearComportamiento",
                    "nombreComportamiento": nombreComportamiento,
                    "fechaInicio": fechaInicio,
                    "fechaFin": fechaFin,
                }
                transaccion.comportamientos = []
                let selectoresApartamentos = [...document.querySelectorAll(`[descuentoDedicadoIDV]`)]
                selectoresApartamentos.map((apartamentos) => {
                    let apartamentoIDV = apartamentos.getAttribute("descuentoDedicadoIDV")
                    let cantidad = apartamentos.querySelector("[campoapartamentoseleccionado=cantidad]").value
                    let simbolo = apartamentos.querySelector("[campoapartamentoseleccionado=simbolo]").value
                    let apartamentoFinal = {
                        "apartamentoIDV": apartamentoIDV,
                        "cantidad": cantidad,
                        "simbolo": simbolo
                    }
                    transaccion.comportamientos.push(apartamentoFinal)
                })


                let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.ok) {
                    let nuevoUIDComportamiento = respuestaServidor?.nuevoUIDComportamiento
                    let vista = `/administracion/comportamiento_de_precios/comportamiento:${nuevoUIDComportamiento}`
                    let navegacion = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    return casaVitini.componentes.controladorVista(navegacion)

                }

            },
            "apartamentosDisponbiles": async (apartamento) => {
                apartamento.preventDefault()
                apartamento.stopPropagation()
                let selectorApartamentoUIRenderizado = document.querySelector("[comMenu=menuVolatilApartamentoDisponbiles]")

                if (selectorApartamentoUIRenderizado) {
                    selectorApartamentoUIRenderizado.remove()
                    return
                }

                let alturaDinamica = apartamento.target.getBoundingClientRect().bottom;
                let horizontalDinamico = apartamento.target.getBoundingClientRect().left;
                let anchoDinamico = apartamento.target.getBoundingClientRect().width;

                document.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.ocultarMenusVolatiles)

                let apartamentosUI = document.createElement("div")
                apartamentosUI.classList.add("crearOfertaMenuVolatilAnadirApartamento")
                apartamentosUI.setAttribute("comMenu", "menuVolatilApartamentoDisponbiles")
                apartamentosUI.setAttribute("componente", "menuVolatil")
                apartamentosUI.style.top = (alturaDinamica + 6) + "px"
                apartamentosUI.style.left = (horizontalDinamico) + "px"
                apartamentosUI.style.width = (anchoDinamico - 10) + "px"

                apartamentosUI.innerText = "Obteniendo apartamentos..."
                let seccion = document.querySelector("section:not([estado=obsoleto])")
                document.body.appendChild(apartamentosUI)
                //zona: "apartamentosDisponiblesParaCrearOfertas"

                const transaccion = {
                    zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                }
                let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    selectorApartamentoUIRenderizado = document.querySelector("[comMenu=menuVolatilApartamentoDisponbiles]")

                    selectorApartamentoUIRenderizado.innerHTML = null
                    let apartamentosDisponbiles = respuestaServidor?.ok
                    apartamentosDisponbiles.map((apartamentoDisponible) => {

                        let apartamentoIDV = apartamentoDisponible.apartamentoIDV
                        let apartamentoUI = apartamentoDisponible.apartamentoUI
                        let estadoUI = apartamentoDisponible.estadoUI

                        let apartamentoDetallesUI = document.createElement("div")
                        apartamentoDetallesUI.classList.add("crearOfertaApartamentoUI")
                        apartamentoDetallesUI.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarApartamento)
                        apartamentoDetallesUI.setAttribute("apartamentoIDV", apartamentoIDV)
                        apartamentoDetallesUI.setAttribute("apartamentoUI", apartamentoUI)
                        apartamentoDetallesUI.setAttribute("apartamentoComoOpcion", apartamentoIDV)


                        let apartamentoTitulo = document.createElement("p")
                        apartamentoTitulo.classList.add("crearOfertaApartamentoTItulo")
                        apartamentoTitulo.innerText = apartamentoUI
                        apartamentoDetallesUI.appendChild(apartamentoTitulo)

                        let apartamentoEstadoUI = document.createElement("p")
                        apartamentoEstadoUI.classList.add("crearOfertaApartamentoEstado")
                        apartamentoEstadoUI.setAttribute("estadouI", estadoUI)
                        apartamentoEstadoUI.innerText = estadoUI
                        apartamentoDetallesUI.appendChild(apartamentoEstadoUI)

                        let selectorApartamentoYaRenderizado = document.querySelector(`[descuentodedicadoidv=${apartamentoIDV}]`)
                        if (!selectorApartamentoYaRenderizado) {
                            selectorApartamentoUIRenderizado.appendChild(apartamentoDetallesUI)
                        }

                    })
                    let selectorApartamentoYaRenderizado = [...document.querySelectorAll(`[apartamentoComoOpcion]`)]
                    if (selectorApartamentoYaRenderizado.length === 0) {
                        let info = document.createElement("p")
                        info.classList.add("crearApartamentoInfoSinApartamento")
                        info.setAttribute("componente", "infoSinApartamento")
                        info.innerText = "Todos los apartamentos disponibles estan insertados en la oferta"
                        selectorApartamentoUIRenderizado.appendChild(info)
                    }



                }
            },
            "ocultarMenusVolatiles": (menuVolatil) => {
                let componente = menuVolatil?.target.getAttribute("componente")
                if (componente === "menuDesplegable") {
                    return
                }
                if (componente !== "menuVolatil") {
                    let selectorMenusVolatiles = [...document.querySelectorAll("[componente=menuVolatil]")]
                    document.removeEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.ocultarMenusVolatiles)
                    selectorMenusVolatiles.map(menuVolatil => {
                        menuVolatil.remove()
                    })
                }
            },
            insertarApartamento: async (apartamento) => {
                let apartamentoIDV = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV")
                let apartamentoUI = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoUI")
                let detallesApartamento = {
                    "apartamentoIDV": apartamentoIDV,
                    "apartamentoUI": apartamentoUI
                }

                // Descuento dedicado
                let opciones = {
                    "apartamentoIDV": apartamentoIDV,
                    "apartamentoUI": apartamentoUI
                }
                let descuentoDedicadoUI = await casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarOpcionesApartamento(opciones)
                let zonaDescuentoDedicados = document.querySelector("[componente=comportamientoSuperBloque]")
                document.querySelector("[componente=infoDescuentoDedicados]").style.display = "none"
                document.querySelector("[componente=comportamientoSuperBloque]").style.display = "grid"

                zonaDescuentoDedicados.appendChild(descuentoDedicadoUI)


            },
            "insertarApartamentoUI": async (detallesApartmento) => {

                let apartamentoIDV = detallesApartmento.apartamentoIDV
                let apartamentoUI = detallesApartmento.apartamentoUI

                let apartamentoSeleccionadoUI = document.createElement("div")
                apartamentoSeleccionadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                apartamentoSeleccionadoUI.setAttribute("apartamentoSeleccionado", apartamentoIDV)
                let tituloApartamento = document.createElement("div")
                tituloApartamento.classList.add("crearOfertaApartamentoSeleccionadoUITitulo")
                tituloApartamento.innerText = apartamentoUI
                apartamentoSeleccionadoUI.appendChild(tituloApartamento)

                let botonEliminarApartamento = document.createElement("div")
                botonEliminarApartamento.classList.add("crearOfertaBoton")
                botonEliminarApartamento.innerText = "Eliminar apartamento de esta oferta333"
                botonEliminarApartamento.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.eliminarApartamenro)
                apartamentoSeleccionadoUI.appendChild(botonEliminarApartamento)

                return apartamentoSeleccionadoUI

            },
            "insertarOpcionesApartamento": (opcionesApartamento) => {

                let apartamentoIDV = opcionesApartamento.apartamentoIDV
                let apartamentoUI = opcionesApartamento.apartamentoUI

                let cantidad = opcionesApartamento.cantidad ? opcionesApartamento.cantidad : null
                let simbolo = opcionesApartamento.simbolo ? opcionesApartamento.simbolo : null

                let descuentoDedicadoUI = document.createElement("div")
                descuentoDedicadoUI.classList.add("administracion_comportamientosPrecios_crearComportamiento_contenedorapartamento")
                descuentoDedicadoUI.setAttribute("descuentoDedicadoUI", apartamentoUI)
                descuentoDedicadoUI.setAttribute("descuentoDedicadoIDV", apartamentoIDV)

                tituloApartamento = document.createElement("div")
                tituloApartamento.classList.add("crearOfertaDescuentoDedicadoUITitulo")
                tituloApartamento.innerText = apartamentoUI
                descuentoDedicadoUI.appendChild(tituloApartamento)

                let cantidadUI = document.createElement("input")
                cantidadUI.classList.add("crearOferDescuentoDedicadoCantidad")
                cantidadUI.setAttribute("campoApartamentoSeleccionado", "cantidad")
                cantidadUI.placeholder = "Inserta la cantidad"
                cantidadUI.value = cantidad

                descuentoDedicadoUI.appendChild(cantidadUI)

                let tipoDescuento = document.createElement("select")
                tipoDescuento.classList.add("crearOfertaDescuentoDedicadoListaTipoDescuento")
                tipoDescuento.setAttribute("campoApartamentoSeleccionado", "simbolo")

                let opcionPredeterminada = document.createElement("option")

                if (!simbolo) {
                    opcionPredeterminada.selected = true;
                }
                opcionPredeterminada.disabled = true;
                opcionPredeterminada.value = "no"
                opcionPredeterminada.text = "Selecciona el tipo de comportamiento"
                tipoDescuento.appendChild(opcionPredeterminada)
                const opciones = [
                    { value: "aumentoPorcentaje", text: "Aumentar precio por porcentaje" },
                    { value: "aumentoCantidad", text: "Aumentar precio por cantidad" },
                    { value: "reducirCantidad", text: "Reducir precio por cantidad" },
                    { value: "reducirPorcentaje", text: "Reducir precio por porcentaje" },
                    { value: "precioEstablecido", text: "Establecer el precio" }
                ];

                for (const opcionData of opciones) {
                    let opcion = document.createElement("option");
                    if (simbolo === opcionData.value) {
                        opcion.selected = true;
                    }
                    opcion.value = opcionData.value;
                    opcion.text = opcionData.text;
                    opcion.setAttribute("apartamentoIDV", apartamentoIDV);
                    tipoDescuento.appendChild(opcion);
                }


                descuentoDedicadoUI.appendChild(tipoDescuento)

                let botonEliminarApartamento = document.createElement("div")
                botonEliminarApartamento.classList.add("crearComportamientoBotonEliminarApartamento")
                botonEliminarApartamento.innerText = "Eliminar apartamento de esta oferta"
                botonEliminarApartamento.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.eliminarApartamenro)
                descuentoDedicadoUI.appendChild(botonEliminarApartamento)

                return descuentoDedicadoUI

            },
            "eliminarApartamenro": (apartamento) => {
                let apartamentoIDV = apartamento.target.parentNode.getAttribute("apartamentoSeleccionado")

                apartamento.target.parentNode.remove()
                let conteoDescuentoDedicados = [...document.querySelector("[componente=comportamientoSuperBloque]").querySelectorAll("[descuentoDedicadoUI]")]
                if (conteoDescuentoDedicados.length === 0) {
                    document.querySelector("[componente=infoDescuentoDedicados]").removeAttribute("style")
                    document.querySelector("[componente=comportamientoSuperBloque]").style.display = "flex"
                }







            },
            "opcionesOferta": (opcion) => {


                let opciones = opcion.target.value
                // Primer oculta todo
                let selectorOpciones = [...document.querySelectorAll("[controladorDesliegue]")]
                selectorOpciones.map((opcion) => {
                    opcion.classList.add("estadoInicialInvisible")
                })
                // Luego despliega
                let zonaDespliegue
                if (opciones === "totalNetoApartmentoDedicado") {
                    zonaDespliegue = "descuentosDedicados"
                }
                if (opciones === "totalNetoApartmento") {
                    zonaDespliegue = "descuentoGlobal"
                }
                if (opciones === "totalNetoReserva") {
                    zonaDespliegue = "descuentoGlobal"
                }

                document.querySelector(`[controladorDesliegue="${zonaDespliegue}"]`)?.classList.remove("estadoInicialInvisible")




            }
        },
        detallesComportamiento: {
            UI: async (uid) => {

                const transaccion = {
                    zona: "administracion/comportamientoDePrecios/detallesComportamiento",
                    comportamientoUID: Number(uid)
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "No existe ninguna reserva con ese identificador",
                        descripcion: "La reserva que buscas con ese identificador no existe. Comprueba el identificador de la reserva"
                    }
                    return casaVitini.componentes.mensajeSimple(info)
                }
                if (respuestaServidor?.ok) {
                    const detalles = respuestaServidor?.ok

                    const nombreComportamiento = detalles.nombreComportamiento
                    const uid = detalles.uid

                    const fechaInicio = detalles.fechaInicio
                    const fechaFinal = detalles.fechaFinal
                    const estado = detalles.estado
                    const apartamentos = detalles.apartamentos

                    const espacioOfertas = document.querySelector("[componente=espacioOfertas]")
                    espacioOfertas.setAttribute("comportamientoUID", uid)

                    const soloLecturaUI = document.createElement("div")
                    soloLecturaUI.classList.add("editarOfertaSoloLecturaUI")

                    const soloLecturaInfo = document.createElement("p")
                    soloLecturaInfo.classList.add("editarOfertaSoloLecutraInfo")
                    soloLecturaInfo.setAttribute("componente", "soloLecturaInfo")
                    soloLecturaInfo.innerText = "Modo solo lectura"
                    soloLecturaUI.appendChild(soloLecturaInfo)
                    espacioOfertas.appendChild(soloLecturaUI)

                    let ofertaUI = casaVitini.administracion.comportamiento_de_precios.detalleUI("editarOferta")
                    espacioOfertas.appendChild(ofertaUI)


                    const selectorEstadoComportamiento = document.querySelector("[componente=estadoComportamiento]")
                    if (estado === "desactivado") {
                        selectorEstadoComportamiento.setAttribute("estado", estado)
                        selectorEstadoComportamiento.innerHTML = "Comportamiento desactivado"
                        selectorEstadoComportamiento.style.background = "#ff000091"


                    }
                    if (estado === "activado") {
                        selectorEstadoComportamiento.setAttribute("estado", estado)
                        selectorEstadoComportamiento.style.background = "#00ff006e"
                        selectorEstadoComportamiento.innerHTML = "Comportamiento activado"
                    }
                    let campoNombreOferta = document.querySelector("[campoOferta=nombreOferta]")
                    campoNombreOferta.value = nombreComportamiento
                    let selectorFechaInicio = document.querySelector("[calendario=entrada]")
                    selectorFechaInicio.setAttribute("fechaInicioFinal", fechaInicio)
                    let fechaInicioArray = fechaInicio.split("/")
                    let objetoFechaInicio = {
                        dia: fechaInicioArray[0],
                        mes: fechaInicioArray[1],
                        ano: fechaInicioArray[2]
                    }
                    objetoFechaInicio = JSON.stringify(objetoFechaInicio)
                    selectorFechaInicio.setAttribute("memoriaVolatil", objetoFechaInicio)
                    let selectorFechaInicioUI = document.querySelector("[data=fechaInicioData]")
                    selectorFechaInicioUI.innerText = fechaInicio

                    let selectorFechaFin = document.querySelector("[calendario=salida]")
                    selectorFechaFin.setAttribute("fechaFinFinal", fechaFinal)
                    let fechaFinArray = fechaFinal.split("/")
                    let objetoFechaFin = {
                        dia: fechaFinArray[0],
                        mes: fechaFinArray[1],
                        ano: fechaFinArray[2]
                    }
                    objetoFechaFin = JSON.stringify(objetoFechaFin)
                    selectorFechaFin.setAttribute("memoriaVolatil", objetoFechaFin)
                    let selectorFechaFinUI = document.querySelector("[data=fechaFinData]")
                    selectorFechaFinUI.innerText = fechaFinal


                    for (const detalleApartamento of apartamentos) {

                        let apartamentoIDV_ = detalleApartamento.apartamentoIDV
                        let apartamentoUI_ = detalleApartamento.apartamentoUI
                        let cantidad_ = detalleApartamento.cantidad
                        let simbolo = detalleApartamento.simbolo

                        let metadatosApartamentoUI = {
                            apartamentoIDV: apartamentoIDV_,
                            apartamentoUI: apartamentoUI_,
                            simbolo: simbolo,
                            cantidad: cantidad_
                        }

                        let insertarOpcionesApartamento = casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarOpcionesApartamento(metadatosApartamentoUI)
                        document.querySelector("[componente=infoDescuentoDedicados]").style.display = "none"
                        let zonaDescuentoDedicados = document.querySelector("[componente=comportamientoSuperBloque]")
                        zonaDescuentoDedicados.appendChild(insertarOpcionesApartamento)
                        document.querySelector("[componente=comportamientoSuperBloque]").style.display = "grid"
                    }
                }

            },
            "guardarCambiosComportamiento": async (oferta) => {


                let comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                let nombreComportamiento = document.querySelector("[campoOferta=nombreOferta]").value
                let fechaInicio = document.querySelector("[calendario=entrada]").getAttribute("fechaInicioFinal")
                let fechaFinal = document.querySelector("[calendario=salida]").getAttribute("fechaFinFinal")


                const transaccion = {
                    zona: "administracion/comportamientoDePrecios/actualizarComportamiento",
                    comportamientoUID: Number(comportamientoUID),
                    nombreComportamiento: nombreComportamiento,
                    fechaInicio: fechaInicio,
                    fechaFinal: fechaFinal
                }

                transaccion.comportamientos = []
                let selectoresApartamentos = [...document.querySelectorAll(`[descuentoDedicadoIDV]`)]
                selectoresApartamentos.map((apartamentos) => {
                    let apartamentoIDV = apartamentos.getAttribute("descuentoDedicadoIDV")
                    let cantidad = apartamentos.querySelector("[campoapartamentoseleccionado=cantidad]").value
                    let simbolo = apartamentos.querySelector("[campoapartamentoseleccionado=simbolo]").value
                    let apartamentoFinal = {
                        apartamentoIDV: apartamentoIDV,
                        cantidad: cantidad,
                        simbolo: simbolo
                    }
                    transaccion.comportamientos.push(apartamentoFinal)
                })

                let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)

                }
                if (respuestaServidor?.ok) {
                    const modo = {
                        modo: "botonCancelarCambios"
                    }
                    return casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.comportamientoModos(modo)
                }

            },
            comportamientoModos: (modo) => {
                let botonModo
                if (modo.target) {
                    botonModo = modo.target.getAttribute("componente")
                }
                if (modo.modo) {
                    botonModo = modo.modo
                }
                if (botonModo === "botonEditarOferta") {
                    let selectorBotonesEditar = [...document.querySelectorAll("[componente=botonEditarOferta]")]
                    selectorBotonesEditar.map((boton) => {
                        boton.classList.add("elementoOcultoInicialmente")
                    })
                    let selectorBotonesGuardarCambios = [...document.querySelectorAll("[componente=botonGuardarCambios]")]
                    selectorBotonesGuardarCambios.map((boton) => {
                        boton.classList.remove("elementoOcultoInicialmente")
                    })
                    let selectorBotonesCancelarCambios = [...document.querySelectorAll("[componente=botonCancelarCambios]")]
                    selectorBotonesCancelarCambios.map((boton) => {
                        boton.classList.remove("elementoOcultoInicialmente")
                    })
                    let selectorBotonesEliminarOferta = [...document.querySelectorAll("[componente=botonElimnarOferta]")]
                    selectorBotonesEliminarOferta.map((boton) => {
                        boton.classList.remove("elementoOcultoInicialmente")
                    })

                    document.querySelector("[componente=espacioCrearOferta]").classList.remove("eventosDesactivadosInicialmente")
                    document.querySelector("[componente=soloLecturaInfo]").classList.add("elementoOcultoInicialmente")
                }

                if (botonModo === "botonCancelarCambios") {
                    let selectorBotonesEditar = [...document.querySelectorAll("[componente=botonEditarOferta]")]
                    selectorBotonesEditar.map((boton) => {
                        boton.classList.remove("elementoOcultoInicialmente")
                    })

                    let selectorBotonesGuardarCambios = [...document.querySelectorAll("[componente=botonGuardarCambios]")]
                    selectorBotonesGuardarCambios.map((boton) => {
                        boton.classList.add("elementoOcultoInicialmente")
                    })

                    let selectorBotonesCancelarCambios = [...document.querySelectorAll("[componente=botonCancelarCambios]")]
                    selectorBotonesCancelarCambios.map((boton) => {
                        boton.classList.add("elementoOcultoInicialmente")
                    })
                    let selectorBotonesEliminarOferta = [...document.querySelectorAll("[componente=botonElimnarOferta]")]
                    selectorBotonesEliminarOferta.map((boton) => {
                        boton.classList.add("elementoOcultoInicialmente")
                    })
                    document.querySelector("[componente=espacioCrearOferta]").classList.add("eventosDesactivadosInicialmente")
                    document.querySelector("[componente=soloLecturaInfo]").classList.remove("elementoOcultoInicialmente")
                }





            },
            estadoComportamiento: async (estadoOferta) => {
                let comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                let selectorEstadoComportamientoUI = document.querySelector("[componente=estadoComportamiento]")
                let estadoActualMemoriaVolatil = selectorEstadoComportamientoUI.innerText
                selectorEstadoComportamientoUI.innerText = "Esperando al servidor...."

                let estadoOfertaActual = estadoOferta.target.getAttribute("estado")
                let estadoComportamientoPropuesto
                if (estadoOfertaActual === "desactivado") {
                    estadoComportamientoPropuesto = "activado"
                }
                if (estadoOfertaActual === "activado") {
                    estadoComportamientoPropuesto = "desactivado"
                }

                const transaccion = {
                    zona: "administracion/comportamientoDePrecios/actualizarEstadoComportamiento",
                    comportamientoUID: Number(comportamientoUID),
                    estadoPropuesto: estadoComportamientoPropuesto
                }

                let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    document.querySelector("[componente=estadoComportamiento]").innerText = estadoActualMemoriaVolatil
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    let estadoComportamientoConfirmado = respuestaServidor?.estadoComportamiento
                    selectorEstadoComportamientoUI.setAttribute("estado", estadoComportamientoConfirmado)
                    let estadoComportamientoUI
                    if (estadoComportamientoConfirmado === "activado") {
                        selectorEstadoComportamientoUI.style.background = "#00ff006e"

                        estadoComportamientoUI = "Comportamiento activado"
                    }
                    if (estadoComportamientoConfirmado === "desactivado") {
                        selectorEstadoComportamientoUI.style.background = "#ff000091"
                        estadoComportamientoUI = "Comportamiento desactivado"
                    }
                    selectorEstadoComportamientoUI.innerText = estadoComportamientoUI
                }




            },
            "eliminarComportamiento": {
                "UI": async () => {
                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const tituloCancelarReserva = document.createElement("p")
                    tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                    tituloCancelarReserva.innerText = "Confirmar eliminar reserva"
                    contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = "Var a eliminar un comportamiento de precios configurado, ¿Estas de acuerdo?"

                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                    contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = "Confirmar y eliminar comportamiento"
                    botonCancelar.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.eliminarComportamiento.confirmar)
                    bloqueBotones.appendChild(botonCancelar)

                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion del comportamiento"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)
                },
                "confirmar": async () => {
                    let comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/eliminarComportamiento",
                        "comportamientoUID": Number(comportamientoUID)
                    }
                    let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        let vista = `/administracion/comportamiento_de_precios`
                        let navegacion = {
                            "vista": vista,
                            "tipoOrigen": "menuNavegador"
                        }
                        return casaVitini.componentes.controladorVista(navegacion)

                    }

                }
            }
        },
        "traductorCambioVista": (oferta) => {
            oferta.preventDefault()
            oferta.stopPropagation()
            let vista = oferta.target.closest("[vista]").getAttribute("vista")

            let entrada = {
                "vista": vista,
                "tipoOrigen": "menuNavegador"
            }
            return casaVitini.componentes.controladorVista(entrada)



        },
        "detalleUI": (modo) => {

            if (modo !== "editarOferta" && modo !== "crearOferta") {
                const error = "En que modo quieres que despliegue la interfa de oferta en editarOferat o en crearOferta"
                return casaVitini.ui.vistas.advertenciaInmersiva(error)

            }



            // Crear el elemento div principal
            const divPrincipal = document.createElement('div');
            divPrincipal.setAttribute('componente', 'espacioCrearOferta');
            divPrincipal.classList.add('espacioComportamiento');

            if (modo === "editarOferta") {
                divPrincipal.classList.add("eventosDesactivadosInicialmente")
            }
            const divContenedorNombreYEstado = document.createElement('div');
            divContenedorNombreYEstado.classList.add('crearOfertaContenedorHorizontalV2');

            const botonEstadoOferta = document.createElement("div")
            botonEstadoOferta.classList.add("creatOfertaBotonEstado")
            botonEstadoOferta.setAttribute("componente", "estadoComportamiento")
            botonEstadoOferta.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.estadoComportamiento)
            botonEstadoOferta.style.pointerEvents = "all"
            botonEstadoOferta.innerText = "Comportamiento desactivado"
            divContenedorNombreYEstado.appendChild(botonEstadoOferta)


            // Crear el input
            const input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
            input.setAttribute('campoOferta', 'nombreOferta');
            input.setAttribute('placeholder', 'Escribe un nombre para idenfiticar el comportamiento');
            divContenedorNombreYEstado.appendChild(input)
            divPrincipal.appendChild(divContenedorNombreYEstado)



            // Crear el div contenedor
            const divContenedor = document.createElement('div');
            divContenedor.classList.add('crearComportameintoContendorFechas');

            // Crear el primer div contenedor horizontal
            const divContenedorHorizontal = document.createElement('div');
            divContenedorHorizontal.classList.add('crearOfertaContenedorHorizontal');

            // Crear el div contenedor de fecha de inicio
            const divContenedorFechaInicio = document.createElement('div');
            divContenedorFechaInicio.classList.add('contenedorFecha');
            divContenedorFechaInicio.setAttribute('calendario', 'entrada');
            divContenedorFechaInicio.setAttribute('componente', 'inicioOferta');
            divContenedorFechaInicio.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.constructorCalendario)
            divContenedorFechaInicio.setAttribute('paralizadorEvento', 'ocultadorCalendarios');


            // Crear el párrafo de la fecha de inicio
            const pFechaInicio = document.createElement('p');
            pFechaInicio.classList.add('tituloFecha');
            pFechaInicio.textContent = 'Fecha de inicio';

            // Crear el párrafo de la fecha de inicio seleccionada
            const pFechaInicioSeleccionada = document.createElement('p');
            pFechaInicioSeleccionada.classList.add('fechaInicio');
            pFechaInicioSeleccionada.setAttribute('data', 'fechaInicioData');
            pFechaInicioSeleccionada.textContent = '(Seleccionar)';

            // Agregar los elementos al div contenedor de fecha de inicio
            divContenedorFechaInicio.appendChild(pFechaInicio);
            divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);

            // Crear el div contenedor de fecha de fin
            const divContenedorFechaFin = document.createElement('div');
            divContenedorFechaFin.classList.add('contenedorFecha');
            divContenedorFechaFin.setAttribute('calendario', 'salida');
            divContenedorFechaFin.setAttribute('componente', 'finOferta');
            divContenedorFechaFin.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.constructorCalendario)
            divContenedorFechaFin.setAttribute('paralizadorEvento', 'ocultadorCalendarios');

            // Crear el párrafo de la fecha de fin
            const pFechaFin = document.createElement('p');
            pFechaFin.classList.add('tituloFecha');
            pFechaFin.textContent = 'Fecha fin';

            // Crear el párrafo de la fecha de fin seleccionada
            const pFechaFinSeleccionada = document.createElement('p');
            pFechaFinSeleccionada.classList.add('fechaFin');
            pFechaFinSeleccionada.setAttribute('data', 'fechaFinData');
            pFechaFinSeleccionada.textContent = '(Seleccionar)';

            // Agregar los elementos al div contenedor de fecha de fin
            divContenedorFechaFin.appendChild(pFechaFin);
            divContenedorFechaFin.appendChild(pFechaFinSeleccionada);

            // Agregar los elementos al primer div contenedor horizontal
            divContenedorHorizontal.appendChild(divContenedorFechaInicio);
            divContenedorHorizontal.appendChild(divContenedorFechaFin);

            // Agregar el primer div contenedor horizontal al div contenedor
            divContenedor.appendChild(divContenedorHorizontal);

            // Agregar el div contenedor al div principal
            divPrincipal.appendChild(divContenedor);



            const contenedorBotones = document.createElement("div")
            contenedorBotones.classList.add("crearComportameintoEspacioBotones")

            // Crear el párrafo 'Anadir apartamento' dentro del segundo div interno
            const pCrearOFertaBotonAnadirApartamento_31 = document.createElement('p');
            pCrearOFertaBotonAnadirApartamento_31.classList.add('crearOFertaBotonAnadirApartamento');
            pCrearOFertaBotonAnadirApartamento_31.setAttribute('componente', 'botonAnadirApartamentoOferta');
            pCrearOFertaBotonAnadirApartamento_31.textContent = 'Anadir apartamento';
            pCrearOFertaBotonAnadirApartamento_31.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.apartamentosDisponbiles)
            contenedorBotones.appendChild(pCrearOFertaBotonAnadirApartamento_31);




            divPrincipal.appendChild(contenedorBotones)








            // Crear el elemento div principal
            const porApartamentoDedicado = document.createElement('div');
            porApartamentoDedicado.classList.add('espaciadoInterno');
            porApartamentoDedicado.setAttribute('zonaOferta', 'porApartamentoDedicado');

            // Crear el primer div interno
            const divCrearOfertaEspacioOpciones_3 = document.createElement('div');
            divCrearOfertaEspacioOpciones_3.classList.add('administracion_comportamientoPreciso_crearComportameinto_espacioContenedorApartamentos');
            divCrearOfertaEspacioOpciones_3.setAttribute("componente", "comportamientoSuperBloque")
            porApartamentoDedicado.appendChild(divCrearOfertaEspacioOpciones_3);






            // Crear el segundo párrafo dentro del quinto div interno
            const pCrearOfertaTituloOpcion5_3 = document.createElement('p');
            pCrearOfertaTituloOpcion5_3.classList.add('crearComportamientoConentenedor');
            pCrearOfertaTituloOpcion5_3.setAttribute('componente', 'infoDescuentoDedicados');
            pCrearOfertaTituloOpcion5_3.textContent =
                'Ahora mismo no tienes ningun apartamento seleccionado para poder aplicarle un comportamiento de precio. Pulsa en el boton Anadir apartamento para comenzar.';
            divCrearOfertaEspacioOpciones_3.appendChild(pCrearOfertaTituloOpcion5_3);

            // Crear el segundo div principal
            const divCrearOfertaEpacioBotones_3 = document.createElement('div');
            divCrearOfertaEpacioBotones_3.classList.add('crearOfertaEpacioBotones');
            divCrearOfertaEpacioBotones_3.style.pointerEvents = "all"

            porApartamentoDedicado.appendChild(divCrearOfertaEpacioBotones_3);

            // Crear el párrafo 'Crear oferta' dentro del segundo div principal
            const pCrearOfervaBotonV1_3 = document.createElement('p');
            pCrearOfervaBotonV1_3.classList.add('crearOfervaBotonV1');
            pCrearOfervaBotonV1_3.setAttribute('tipoOferta', 'porApartamentoDedicado');
            if (modo === "crearOferta") {
                pCrearOfervaBotonV1_3.setAttribute('componente', 'botonCrearOferta');
                pCrearOfervaBotonV1_3.textContent = 'Crear comportamiento';
                pCrearOfervaBotonV1_3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.crearComortamientoConfirmar)
            }
            if (modo === "editarOferta") {
                pCrearOfervaBotonV1_3.setAttribute('componente', 'botonEditarOferta');
                pCrearOfervaBotonV1_3.textContent = 'Editar comportamiento';
                pCrearOfervaBotonV1_3.style.pointerEvents = "all"
                pCrearOfervaBotonV1_3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.comportamientoModos)
            }
            divCrearOfertaEpacioBotones_3.appendChild(pCrearOfervaBotonV1_3);

            const pBotonGuardarOferta_03 = document.createElement('p');
            pBotonGuardarOferta_03.classList.add('crearOfervaBotonV1');
            pBotonGuardarOferta_03.classList.add('elementoOcultoInicialmente');
            pBotonGuardarOferta_03.setAttribute('componente', 'botonGuardarCambios');
            pBotonGuardarOferta_03.setAttribute('tipoOferta', 'porApartamentoDedicado');
            pBotonGuardarOferta_03.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.guardarCambiosComportamiento)
            pBotonGuardarOferta_03.textContent = 'Guardar comportamiento';

            const pBotonCancelarCambiosOferta_O3 = document.createElement('p');
            pBotonCancelarCambiosOferta_O3.classList.add('crearOfervaBotonV1');
            pBotonCancelarCambiosOferta_O3.classList.add('elementoOcultoInicialmente');
            pBotonCancelarCambiosOferta_O3.setAttribute('componente', 'botonCancelarCambios');
            pBotonCancelarCambiosOferta_O3.setAttribute('tipoOferta', 'porApartamentoDedicado');
            pBotonCancelarCambiosOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.comportamientoModos)
            pBotonCancelarCambiosOferta_O3.textContent = 'Cancelar cambios y dejar de editar';


            const pBotonEliminarOferta_O3 = document.createElement('p');
            pBotonEliminarOferta_O3.classList.add('crearOfervaBotonV1');
            pBotonEliminarOferta_O3.classList.add('elementoOcultoInicialmente');
            pBotonEliminarOferta_O3.setAttribute('componente', 'botonElimnarOferta');
            pBotonEliminarOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.eliminarComportamiento.UI)
            pBotonEliminarOferta_O3.textContent = 'Eliminar comportamiento';

            divCrearOfertaEpacioBotones_3.appendChild(pBotonGuardarOferta_03);
            divCrearOfertaEpacioBotones_3.appendChild(pBotonCancelarCambiosOferta_O3);
            divCrearOfertaEpacioBotones_3.appendChild(pBotonEliminarOferta_O3);


            divPrincipal.appendChild(porApartamentoDedicado);
            // Agregar el div principal al documento body
            return divPrincipal;

        },

    },
    enlacesDePago: {
        arranque: async () => {
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            const granuladoURL = casaVitini.componentes.granuladorURL()
            const directorioUltimo = granuladoURL.directorios[granuladoURL.directorios.length - 1]
            const parametros = granuladoURL.parametros

            if (directorioUltimo === "enlaces_de_pago") {
                return casaVitini.administracion.enlacesDePago.portadaUI()
            } else {
                if (parametros.enlace) {
                    return casaVitini.administracion.enlacesDePago.detallesEnlace.UI(parametros.enlace)
                }
            }
            const info = {
                titulo: "No existe ningun enlace de pago con ese identificador",
                descripcion: "El enlace de pago que buscas con ese identificador no existe. Comprueba el identificador de la reserva"
            }
            return casaVitini.componentes.mensajeSimple(info)

        },
        portadaUI: async () => {
            const espacio = document.querySelector("[componente=enlacesDePago]")

            const contenedor = document.createElement("div")
            contenedor.classList.add("enlacesDePago_contenedor")

            const contenedorBotones = document.createElement("div")
            contenedorBotones.classList.add("enlacesDePago_contenedorBotones")

            const botonCrearEnlace = document.createElement("a")
            botonCrearEnlace.classList.add("gestionDeOfertasBotonCrearOferta")
            botonCrearEnlace.innerText = "Crear un enlace de pago"
            botonCrearEnlace.setAttribute("href", "/administracion/enlaces_de_pago/crear_enlace")
            botonCrearEnlace.setAttribute("vista", "/administracion/enlaces_de_pago/crear_enlace")
            botonCrearEnlace.addEventListener("click", casaVitini.componentes.cambiarVista)

            //contenedorBotones.appendChild(botonCrearEnlace)
            contenedor.appendChild(contenedorBotones)

            const contenedorOfertas = document.createElement("div")
            contenedorOfertas.classList.add("comportamintoDePreciosSuperBloque")
            contenedorOfertas.setAttribute("componente", "espacioEnlacesRenderizados")
            contenedor.appendChild(contenedorOfertas)

            espacio.appendChild(contenedor)

            const transaccion = {
                zona: "administracion/enlacesDePago/obtenerEnlaces"
            }
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {

                const espacioEnlacesRenderizados = document.querySelector("[componente=espacioEnlacesRenderizados]")

                const enlacesCreados = respuestaServidor?.ok
                if (enlacesCreados.length === 0) {
                    const enlaceUI = document.createElement("a")
                    enlaceUI.classList.add("ofertaUINoHay")
                    const tituloOferta = document.createElement("p")
                    tituloOferta.classList.add("ofertaUITituloOferta")
                    tituloOferta.innerText = "No hay ningún enlace creado. Desde aquí puedes ver todos los enlaces de pago generados desde las reservas de una forma centralizada. Puedes generar un enlace de pago desde la reserva."
                    enlaceUI.appendChild(tituloOferta)
                    espacioEnlacesRenderizados.appendChild(enlaceUI)
                }
                if (Array.isArray(enlacesCreados) && enlacesCreados.length > 0) {
                    enlacesCreados.map((detalleOferta) => {

                        const enlaceUID = detalleOferta.enlace
                        const nombreEnlace = detalleOferta.nombreEnlace
                        const reservaUID = detalleOferta.reservaUID
                        const precio = detalleOferta.cantidad
                        const descripcion = detalleOferta.descripcion
                        const estadoPago = detalleOferta.estadoPago


                        const estadoPagoUI = {
                            pagaodo: "Enlace pagado",
                            noPagado: "Enlace no pagado"
                        }
                        const descripcionFinalUI = descripcion ? descripcion : "Este enlace no tiene descripción"

                        const enlaceUI = document.createElement("a")
                        enlaceUI.classList.add("enlaceUI")
                        enlaceUI.setAttribute("enlaceUID", enlaceUID)
                        //enlaceUI.addEventListener("click", casaVitini.administracion.enlacesDePago.traductorCambioVista)

                        const tituloEnlace = document.createElement("p")
                        tituloEnlace.classList.add("ofertaUITituloOferta")
                        tituloEnlace.setAttribute("valorInicial", nombreEnlace)
                        tituloEnlace.innerText = nombreEnlace
                        enlaceUI.appendChild(tituloEnlace)

                        const precioUI = document.createElement("p")
                        precioUI.classList.add("ofertaUITituloOferta")
                        precioUI.innerText = precio + "$ " + estadoPagoUI[estadoPago]
                        enlaceUI.appendChild(precioUI)


                        const tituloReserva = document.createElement("a")
                        tituloReserva.classList.add("enlaceUIContenedor_vinculo")
                        tituloReserva.setAttribute("href", "/administracion/reservas/" + reservaUID)
                        tituloReserva.setAttribute("vista", "/administracion/reservas/" + reservaUID)
                        tituloReserva.addEventListener("click", casaVitini.componentes.cambiarVista)
                        tituloReserva.innerText = `Reserva ${reservaUID} (Ir a la reserva)`
                        enlaceUI.appendChild(tituloReserva)

                        const irAlEnlace = document.createElement("a")
                        irAlEnlace.classList.add("enlaceUIContenedor_vinculo")
                        irAlEnlace.setAttribute("href", "/pagos/" + enlaceUID)
                        irAlEnlace.setAttribute("vista", "/pagos/" + enlaceUID)
                        irAlEnlace.addEventListener("click", casaVitini.componentes.cambiarVista)
                        irAlEnlace.innerText = "Ir al enlace"
                        enlaceUI.appendChild(irAlEnlace)


                        const enlaceUIContenedor = document.createElement("div")
                        enlaceUIContenedor.classList.add("enlaceUIContenedor")

                        const descripcionUI = document.createElement("div")
                        descripcionUI.classList.add("ofertaUITituloFecha")
                        descripcionUI.innerText = "Descripcíon del enlace"
                        enlaceUIContenedor.appendChild(descripcionUI)

                        const datoFechaFin = document.createElement("div")
                        datoFechaFin.classList.add("ofertaUIDatoFecha")
                        datoFechaFin.setAttribute("valorInicial", descripcion)
                        datoFechaFin.innerText = descripcionFinalUI
                        enlaceUIContenedor.appendChild(datoFechaFin)
                        enlaceUI.appendChild(enlaceUIContenedor)

                        espacioEnlacesRenderizados.appendChild(enlaceUI)


                    })













                }

            }

        },
        detallesEnlace: {
            UI: async (uid) => {
                const transaccion = {
                    zona: "administracion/enlacesDePago/detallesDelEnlace",
                    enlaceUID: Number(uid)
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "No existe ningun enlace de pago con ese identificador",
                        descripcion: "El enlace de pago que buscas con ese identificador no existe. Comprueba el identificador de la reserva"
                    }
                    return casaVitini.componentes.mensajeSimple(info)
                }
                if (respuestaServidor?.ok) {

                    const detallesEnlace = respuestaServidor?.ok

                    const uidEnlace = detallesEnlace.reserva
                    const nombreEnlace = detallesEnlace.nombreEnlace
                    const codigo = detallesEnlace.codigo
                    const reserva = detallesEnlace.reserva
                    const precio = detallesEnlace.precio
                    const descripcion = detallesEnlace.descripcion
                    const estadoPago = detallesEnlace.estadoPago

                    let estadoUIFinal
                    if (estadoPago === "sinInformacion") {
                        estadoUIFinal = "Estado del pago sin informacion."
                    }
                    if (estadoPago === "pagado") {
                        estadoUIFinal = "Pago realizado"
                    }
                    if (estadoPago === "noPagado") {
                        estadoUIFinal = "No pagado"
                    }
                    const espacioDetallesEnlace = document.querySelector("[componente=enlacesDePago]")
                    espacioDetallesEnlace.setAttribute("comportamientoUID", uid)

                    const contenedorDetallesEnlace = document.createElement("div")
                    contenedorDetallesEnlace.classList.add("detallesEnlace_contenedor")
                    contenedorDetallesEnlace.setAttribute("enlaceUID", uidEnlace)

                    const nombreEnlaceUI = document.createElement("input")
                    nombreEnlaceUI.classList.add("detallesEnlace_nombreEnlace")
                    nombreEnlaceUI.setAttribute("campo", "nombreEnlace")
                    nombreEnlaceUI.setAttribute("valorInicial", nombreEnlace)
                    nombreEnlaceUI.addEventListener("input", casaVitini.administracion.enlacesDePago.controladorBotones)
                    nombreEnlaceUI.placeholder = "Escribe un nombre para este enlace y poder identificarlo rapidamente"
                    nombreEnlaceUI.value = nombreEnlace

                    contenedorDetallesEnlace.appendChild(nombreEnlaceUI)

                    const precioUI = document.createElement("div")
                    precioUI.classList.add("detallesEnlace_precio")
                    precioUI.innerText = precio + "$"
                    contenedorDetallesEnlace.appendChild(precioUI)

                    const estadoPagoUI = document.createElement("div")
                    estadoPagoUI.classList.add("detallesEnlace_estadoPago")
                    estadoPagoUI.innerText = estadoUIFinal
                    contenedorDetallesEnlace.appendChild(estadoPagoUI)

                    const codigoUI = document.createElement("a")
                    codigoUI.classList.add("detallesEnlace_codigo")
                    codigoUI.setAttribute("href", "/pago:" + codigo)
                    codigoUI.setAttribute("vista", "/pago:" + codigo)
                    codigoUI.addEventListener("click", casaVitini.componentes.cambiarVista)
                    codigoUI.innerText = "Ir al enlace del pago"
                    contenedorDetallesEnlace.appendChild(codigoUI)


                    const reservaUI = document.createElement("a")
                    reservaUI.classList.add("detallesEnlace_codigo")
                    reservaUI.setAttribute("href", "/administracion/reservas/" + reserva)
                    reservaUI.setAttribute("vista", "/administracion/reservas/" + reserva)
                    reservaUI.addEventListener("click", casaVitini.componentes.cambiarVista)
                    reservaUI.innerText = `Ir a la reserva (${reserva})`
                    contenedorDetallesEnlace.appendChild(reservaUI)

                    const descripcionUI = document.createElement("textarea")
                    descripcionUI.classList.add("detallesEnlace_descripcion")
                    descripcionUI.setAttribute("campo", "descripcion")
                    descripcionUI.setAttribute("valorInicial", descripcion)
                    descripcionUI.addEventListener("input", casaVitini.administracion.enlacesDePago.controladorBotones)
                    descripcionUI.placeholder = "No es obligatorio escribir una descripcion pero si lo necesitas puedes definir un poco mas a este enlace a parte de por su nombre"
                    descripcionUI.value = descripcion
                    contenedorDetallesEnlace.appendChild(descripcionUI)


                    espacioDetallesEnlace.appendChild(contenedorDetallesEnlace)


                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("detalesEnlace_contenedorBotones")

                    const botonGuardar = document.createElement("div")
                    botonGuardar.classList.add("detallesEnlace_botonV1")
                    botonGuardar.classList.add("ocultoInicial")
                    botonGuardar.setAttribute("boton", "guardarCambios")
                    botonGuardar.addEventListener("click", casaVitini.administracion.enlacesDePago.guardarCambios)
                    botonGuardar.innerText = "Guardar cambios"
                    contenedorBotones.appendChild(botonGuardar)

                    const botonCancelarCambios = document.createElement("div")
                    botonCancelarCambios.classList.add("detallesEnlace_botonV1")
                    botonCancelarCambios.classList.add("ocultoInicial")
                    botonCancelarCambios.setAttribute("boton", "cancelarCambios")
                    botonCancelarCambios.innerText = "Cancelar cambios"
                    botonCancelarCambios.addEventListener("click", casaVitini.administracion.enlacesDePago.cancelarCambios)
                    contenedorBotones.appendChild(botonCancelarCambios)


                    const botonEliminarEnlace = document.createElement("div")
                    botonEliminarEnlace.classList.add("detallesEnlace_botonV1")
                    botonEliminarEnlace.setAttribute("boton", "eliminarEnlace")
                    botonEliminarEnlace.addEventListener("click", casaVitini.administracion.enlacesDePago.eliminarEnlace.UI)
                    botonEliminarEnlace.innerText = "Eliminar enlace"
                    contenedorBotones.appendChild(botonEliminarEnlace)

                    espacioDetallesEnlace.appendChild(contenedorBotones)


















                }


                // Acabar el resto de detalles oferta
            }

        },
        cancelarCambios: () => {
            const campos = [...document.querySelectorAll("[campo]")]

            campos.map((campo) => {
                const valorInicial = campo.getAttribute("valorInicial")
                campo.value = valorInicial
            })
            const botonGuardarCambios = document.querySelector("[boton=guardarCambios]")
            const cancelarCambios = document.querySelector("[boton=cancelarCambios]")
            const eliminarEnlace = document.querySelector("[boton=eliminarEnlace]")

            botonGuardarCambios.removeAttribute("style")
            cancelarCambios.removeAttribute("style")
        },
        eliminarEnlace: {
            UI: async () => {
                const advertenciaInmersivaIU = document.createElement("div")
                advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                const tituloCancelarReserva = document.createElement("p")
                tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                tituloCancelarReserva.innerText = "Eliminar enlae de pago"
                contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                const bloqueBloqueoApartamentos = document.createElement("div")
                bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                const tituloBloquoApartamentos = document.createElement("div")
                tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                tituloBloquoApartamentos.innerText = "¿Quieres confirmar las eliminacíon de este enlace de pago? Sus implicaciones seran inmediatas y el enlace de acceso temporal pasara a ser obsoleto"

                bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                const bloqueBotones = document.createElement("div")
                bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                const botonCancelar = document.createElement("div")
                botonCancelar.classList.add("detallesReservaCancelarBoton")
                botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                botonCancelar.innerText = "Confirmar y eliminar enlace"
                botonCancelar.addEventListener("click", casaVitini.administracion.enlacesDePago.eliminarEnlace.confirmar)
                bloqueBotones.appendChild(botonCancelar)

                const botonCancelarProcesoCancelacion = document.createElement("div")
                botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion del enlace"
                botonCancelarProcesoCancelacion.addEventListener("click", () => {
                    let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                    selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                        advertenciaInmersiva.remove()
                    })
                })
                bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                document.body.appendChild(advertenciaInmersivaIU)
            },
            confirmar: async () => {
                let comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                const transaccion = {
                    zona: "administracion/comportamientoDePrecios/eliminarComportamiento",
                    "comportamientoUID": Number(comportamientoUID)
                }
                let respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                    selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                        advertenciaInmersiva.remove()
                    })
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.ok) {
                    let vista = `/administracion/comportamiento_de_precios`
                    let navegacion = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    return casaVitini.componentes.controladorVista(navegacion)

                }

            }
        },
        traductorCambioVista: (oferta) => {
            oferta.preventDefault()
            oferta.stopPropagation()
            const vista = oferta.target.closest("[vista]").getAttribute("vista")

            const entrada = {
                "vista": vista,
                "tipoOrigen": "menuNavegador"
            }
            return casaVitini.componentes.controladorVista(entrada)
        },
        detalleUI: (modo) => {

            if (modo !== "editarOferta" && modo !== "crearOferta") {
                const error = "En que modo quieres que despliegue la interfa de oferta en editarOferat o en crearOferta"
                return casaVitini.ui.vistas.advertenciaInmersiva(error)

            }



            // Crear el elemento div principal
            const divPrincipal = document.createElement('div');
            divPrincipal.setAttribute('componente', 'espacioCrearOferta');
            divPrincipal.classList.add('espacioClientes');

            if (modo === "editarOferta") {
                divPrincipal.classList.add("eventosDesactivadosInicialmente")
            }
            const divContenedorNombreYEstado = document.createElement('div');
            divContenedorNombreYEstado.classList.add('crearOfertaContenedorHorizontalV2');

            const botonEstadoOferta = document.createElement("div")
            botonEstadoOferta.classList.add("creatOfertaBotonEstado")
            botonEstadoOferta.setAttribute("componente", "estadoComportamiento")
            botonEstadoOferta.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.estadoComportamiento)
            botonEstadoOferta.style.pointerEvents = "all"
            botonEstadoOferta.innerText = "Comportamiento desactivado"
            divContenedorNombreYEstado.appendChild(botonEstadoOferta)


            // Crear el input
            const input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.classList.add('preciosEImpuestosbotonOpcionCrearNuevoImpuesto');
            input.setAttribute('campoOferta', 'nombreOferta');
            input.setAttribute('placeholder', 'Escribe un nombre para idenfiticar el comportamiento');
            divContenedorNombreYEstado.appendChild(input)
            divPrincipal.appendChild(divContenedorNombreYEstado)



            // Crear el div contenedor
            const divContenedor = document.createElement('div');
            divContenedor.classList.add('crearOfertaConentenedor');

            // Crear el primer div contenedor horizontal
            const divContenedorHorizontal = document.createElement('div');
            divContenedorHorizontal.classList.add('crearOfertaContenedorHorizontal');

            // Crear el div contenedor de fecha de inicio
            const divContenedorFechaInicio = document.createElement('div');
            divContenedorFechaInicio.classList.add('contenedorFecha');
            divContenedorFechaInicio.setAttribute('calendario', 'entrada');
            divContenedorFechaInicio.setAttribute('componente', 'inicioOferta');
            divContenedorFechaInicio.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.constructorCalendario)


            // Crear el párrafo de la fecha de inicio
            const pFechaInicio = document.createElement('p');
            pFechaInicio.classList.add('tituloFecha');
            pFechaInicio.textContent = 'Fecha de inicio';

            // Crear el párrafo de la fecha de inicio seleccionada
            const pFechaInicioSeleccionada = document.createElement('p');
            pFechaInicioSeleccionada.classList.add('fechaInicio');
            pFechaInicioSeleccionada.setAttribute('data', 'fechaInicioData');
            pFechaInicioSeleccionada.textContent = '(Seleccionar)';

            // Agregar los elementos al div contenedor de fecha de inicio
            divContenedorFechaInicio.appendChild(pFechaInicio);
            divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);

            // Crear el div contenedor de fecha de fin
            const divContenedorFechaFin = document.createElement('div');
            divContenedorFechaFin.classList.add('contenedorFecha');
            divContenedorFechaFin.setAttribute('calendario', 'salida');
            divContenedorFechaFin.setAttribute('componente', 'finOferta');
            divContenedorFechaFin.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.constructorCalendario)

            // Crear el párrafo de la fecha de fin
            const pFechaFin = document.createElement('p');
            pFechaFin.classList.add('tituloFecha');
            pFechaFin.textContent = 'Fecha fin';

            // Crear el párrafo de la fecha de fin seleccionada
            const pFechaFinSeleccionada = document.createElement('p');
            pFechaFinSeleccionada.classList.add('fechaFin');
            pFechaFinSeleccionada.setAttribute('data', 'fechaFinData');
            pFechaFinSeleccionada.textContent = '(Seleccionar)';

            // Agregar los elementos al div contenedor de fecha de fin
            divContenedorFechaFin.appendChild(pFechaFin);
            divContenedorFechaFin.appendChild(pFechaFinSeleccionada);

            // Agregar los elementos al primer div contenedor horizontal
            divContenedorHorizontal.appendChild(divContenedorFechaInicio);
            divContenedorHorizontal.appendChild(divContenedorFechaFin);

            // Agregar el primer div contenedor horizontal al div contenedor
            divContenedor.appendChild(divContenedorHorizontal);

            // Agregar el div contenedor al div principal
            divPrincipal.appendChild(divContenedor);



            const contenedorBotones = document.createElement("div")
            contenedorBotones.classList.add("crearComportameintoEspacioBotones")

            // Crear el párrafo 'Anadir apartamento' dentro del segundo div interno
            const pCrearOFertaBotonAnadirApartamento_31 = document.createElement('p');
            pCrearOFertaBotonAnadirApartamento_31.classList.add('crearOFertaBotonAnadirApartamento');
            pCrearOFertaBotonAnadirApartamento_31.setAttribute('componente', 'botonAnadirApartamentoOferta');
            pCrearOFertaBotonAnadirApartamento_31.textContent = 'Anadir apartamento';
            pCrearOFertaBotonAnadirApartamento_31.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.apartamentosDisponbiles)
            contenedorBotones.appendChild(pCrearOFertaBotonAnadirApartamento_31);




            divPrincipal.appendChild(contenedorBotones)








            // Crear el elemento div principal
            const porApartamentoDedicado = document.createElement('div');
            porApartamentoDedicado.classList.add('espaciadoInterno');
            porApartamentoDedicado.setAttribute('zonaOferta', 'porApartamentoDedicado');

            // Crear el primer div interno
            const divCrearOfertaEspacioOpciones_3 = document.createElement('div');
            divCrearOfertaEspacioOpciones_3.classList.add('crearOfeartaEspacioOpcionesV3');
            divCrearOfertaEspacioOpciones_3.setAttribute("componente", "comportamientoSuperBloque")
            porApartamentoDedicado.appendChild(divCrearOfertaEspacioOpciones_3);






            // Crear el segundo párrafo dentro del quinto div interno
            const pCrearOfertaTituloOpcion5_3 = document.createElement('p');
            pCrearOfertaTituloOpcion5_3.classList.add('crearComportamientoConentenedor');
            pCrearOfertaTituloOpcion5_3.setAttribute('componente', 'infoDescuentoDedicados');
            pCrearOfertaTituloOpcion5_3.textContent =
                'Ahora mismo no tienes ningun apartamento seleccionado para poder aplicarle un comportamiento de precio. Pulsa en el boton Anadir apartamento para comenzar.';
            divCrearOfertaEspacioOpciones_3.appendChild(pCrearOfertaTituloOpcion5_3);

            // Crear el segundo div principal
            const divCrearOfertaEpacioBotones_3 = document.createElement('div');
            divCrearOfertaEpacioBotones_3.classList.add('crearOfertaEpacioBotones');
            divCrearOfertaEpacioBotones_3.style.pointerEvents = "all"

            porApartamentoDedicado.appendChild(divCrearOfertaEpacioBotones_3);

            // Crear el párrafo 'Crear oferta' dentro del segundo div principal
            const pCrearOfervaBotonV1_3 = document.createElement('p');
            pCrearOfervaBotonV1_3.classList.add('crearOfervaBotonV1');
            pCrearOfervaBotonV1_3.setAttribute('tipoOferta', 'porApartamentoDedicado');
            if (modo === "crearOferta") {
                pCrearOfervaBotonV1_3.setAttribute('componente', 'botonCrearOferta');
                pCrearOfervaBotonV1_3.textContent = 'Crear comportamiento';
                pCrearOfervaBotonV1_3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.crearComortamientoConfirmar)
            }
            if (modo === "editarOferta") {
                pCrearOfervaBotonV1_3.setAttribute('componente', 'botonEditarOferta');
                pCrearOfervaBotonV1_3.textContent = 'Editar comportamiento';
                pCrearOfervaBotonV1_3.style.pointerEvents = "all"
                pCrearOfervaBotonV1_3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.ofertaModos)
            }
            divCrearOfertaEpacioBotones_3.appendChild(pCrearOfervaBotonV1_3);

            const pBotonGuardarOferta_03 = document.createElement('p');
            pBotonGuardarOferta_03.classList.add('crearOfervaBotonV1');
            pBotonGuardarOferta_03.classList.add('elementoOcultoInicialmente');
            pBotonGuardarOferta_03.setAttribute('componente', 'botonGuardarCambios');
            pBotonGuardarOferta_03.setAttribute('tipoOferta', 'porApartamentoDedicado');
            pBotonGuardarOferta_03.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.guardarCambiosComportamiento)
            pBotonGuardarOferta_03.textContent = 'Guardar comportamiento';

            const pBotonCancelarCambiosOferta_O3 = document.createElement('p');
            pBotonCancelarCambiosOferta_O3.classList.add('crearOfervaBotonV1');
            pBotonCancelarCambiosOferta_O3.classList.add('elementoOcultoInicialmente');
            pBotonCancelarCambiosOferta_O3.setAttribute('componente', 'botonCancelarCambios');
            pBotonCancelarCambiosOferta_O3.setAttribute('tipoOferta', 'porApartamentoDedicado');
            pBotonCancelarCambiosOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.ofertaModos)
            pBotonCancelarCambiosOferta_O3.textContent = 'Cancelar cambios y dejar de editar';


            const pBotonEliminarOferta_O3 = document.createElement('p');
            pBotonEliminarOferta_O3.classList.add('crearOfervaBotonV1');
            pBotonEliminarOferta_O3.classList.add('elementoOcultoInicialmente');
            pBotonEliminarOferta_O3.setAttribute('componente', 'botonElimnarOferta');
            pBotonEliminarOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.eliminarComportamiento.UI)
            pBotonEliminarOferta_O3.textContent = 'Eliminar comportamiento';

            divCrearOfertaEpacioBotones_3.appendChild(pBotonGuardarOferta_03);
            divCrearOfertaEpacioBotones_3.appendChild(pBotonCancelarCambiosOferta_O3);
            divCrearOfertaEpacioBotones_3.appendChild(pBotonEliminarOferta_O3);


            divPrincipal.appendChild(porApartamentoDedicado);
            // Agregar el div principal al documento body
            return divPrincipal;

        },
    },
    bloqueos_temporales: {
        arranque: async () => {
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            const granuladoURL = casaVitini.componentes.granuladorURL()
            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

            if (comandoInicial === "gestion_de_bloqueos_temporales") {
                return casaVitini.administracion.bloqueos_temporales.portadaUI()
            }
            let interruptor = "ignorar"
            const directoriosFiltrados = []
            granuladoURL.directorios.map((directorio) => {
                if (interruptor === "noIgnorar") {
                    directoriosFiltrados.push(directorio)
                }
                if (directorio === "gestion_de_bloqueos_temporales") {
                    interruptor = "noIgnorar"
                }
            })

            if (directoriosFiltrados.length === 1) {

                return casaVitini.administracion.bloqueos_temporales.bloqueosPorApartamento.UI(directoriosFiltrados[0])
            }
            if (directoriosFiltrados.length === 2) {

                return casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.UI(directoriosFiltrados)
            }
            const info = {
                titulo: "No existe ningun bloqueo temporal con ese identificador",
                descripcion: "El bloqueo temporal que buscas con ese identificador no existe. Comprueba el identificador de la reserva"
            }
            return casaVitini.componentes.mensajeSimple(info)
        },
        portadaUI: async () => {
            const selectorEspacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
            const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")
            const selectorTitulo = document.querySelector("[componente=titulo]")
            selectorTitulo.innerText = "Bloqueos de los Apartamentos"

            const contenedorBotonesPortada = document.createElement("div")
            contenedorBotonesPortada.classList.add("portadaBloqueos_espacioBotones")


            const botonCrearBloqueoUI = document.createElement("a")
            botonCrearBloqueoUI.classList.add("portadaBloqueos_botonV1")
            botonCrearBloqueoUI.innerHTML = "Crear un bloqueo"
            botonCrearBloqueoUI.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/crear_bloqueo")
            botonCrearBloqueoUI.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/crear_bloqueo")
            botonCrearBloqueoUI.addEventListener("click", (boton) => {
                boton.preventDefault()
                const vista = boton.target.getAttribute("vista")
                const navegacion = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                casaVitini.componentes.controladorVista(navegacion)
            })
            contenedorBotonesPortada.appendChild(botonCrearBloqueoUI)
            selectorEspacioBotonesGlobales.appendChild(contenedorBotonesPortada)


            const transaccion = {
                zona: "administracion/bloqueos/listarApartamentosConBloqueos"
            }
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {
                const apartamentosConBloqueos = respuestaServidor?.ok
                if (apartamentosConBloqueos.length === 0) {
                    const informacionUI = document.createElement("div")
                    informacionUI.innerText = "No hay ningun bloqueo configurado"
                    selectorEspacioBloqueos.appendChild(informacionUI)
                }

                apartamentosConBloqueos.map((detalleDelApartamento) => {
                    const apartamentoIDV = detalleDelApartamento.apartamentoIDV
                    const apartamentoUI = detalleDelApartamento.apartamentoUI
                    const numeroDeBloqueos = detalleDelApartamento.numeroDeBloqueos

                    let mensajeNumeroBloqueos
                    if (numeroDeBloqueos === 1) {
                        mensajeNumeroBloqueos = `Hay ${numeroDeBloqueos} bloqueo configurado para este apartamento`
                    }
                    if (numeroDeBloqueos > 1) {
                        mensajeNumeroBloqueos = `Hay ${numeroDeBloqueos} bloqueos configurados para este apartamento`
                    }
                    const bloqueApartamentoUI = document.createElement("a")
                    bloqueApartamentoUI.classList.add("gestionBloqueoApartamento_bloqueApartamentoUI")
                    bloqueApartamentoUI.setAttribute("apartamentoIDV", apartamentoIDV)
                    bloqueApartamentoUI.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV)
                    bloqueApartamentoUI.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV)
                    bloqueApartamentoUI.addEventListener("click", casaVitini.administracion.bloqueos_temporales.traductorCambioVista)

                    const tituloApartamentoUI = document.createElement("div")
                    tituloApartamentoUI.classList.add("gestionBloqueoApartamento_tituloApartamentoUI")
                    tituloApartamentoUI.classList.add("negrita")
                    tituloApartamentoUI.innerText = apartamentoUI
                    bloqueApartamentoUI.appendChild(tituloApartamentoUI)

                    const numeroBloqueosUI = document.createElement("div")
                    numeroBloqueosUI.classList.add("gestionBloqueoApartamento_numeroBloqueosUI")
                    numeroBloqueosUI.innerText = mensajeNumeroBloqueos
                    bloqueApartamentoUI.appendChild(numeroBloqueosUI)

                    selectorEspacioBloqueos.appendChild(bloqueApartamentoUI)


                })
            }
        },
        traductorCambioVista: (apartamento) => {
            apartamento.preventDefault()
            apartamento.stopPropagation()
            const vista = apartamento.target.closest("[vista]").getAttribute("vista")

            const entrada = {
                "vista": vista,
                "tipoOrigen": "menuNavegador"
            }
            return casaVitini.componentes.controladorVista(entrada)
        },
        bloqueosPorApartamento: {
            UI: async (apartamento) => {

                const selectorTitulo = document.querySelector("[componente=titulo]")
                selectorTitulo.innerText = "Bloqueos temporales"
                const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")

                const transaccion = {
                    zona: "administracion/bloqueos/listaBloquoeosDelApartamento",
                    "apartamentoIDV": apartamento
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {

                    const apartamentoIDV = respuestaServidor?.apartamentoIDV
                    const apartamentoUI = respuestaServidor?.apartamentoUI
                    const bloqueos = respuestaServidor?.ok
                    selectorTitulo.innerText = "Bloqueos temporales del " + apartamentoUI

                    bloqueos.map((detalleBloqueo) => {

                        const tipoBloqueo = detalleBloqueo.tipoBloqueo
                        const entrada = detalleBloqueo.entrada
                        const salida = detalleBloqueo.salida
                        const motivo = detalleBloqueo.motivo
                        const zona = detalleBloqueo.zona
                        const uidBloqueo = detalleBloqueo.uidBloqueo

                        // Contenedor bloqueo
                        const bloqueBloqueoUI = document.createElement("a")
                        bloqueBloqueoUI.classList.add("listaBloqueos_bloqueBloqueoUI")
                        bloqueBloqueoUI.setAttribute("bloqueoUID", uidBloqueo)
                        bloqueBloqueoUI.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV + "/" + uidBloqueo)
                        bloqueBloqueoUI.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV + "/" + uidBloqueo)
                        bloqueBloqueoUI.addEventListener("click", casaVitini.administracion.bloqueos_temporales.bloqueosPorApartamento.traductorCambioVista)

                        let tipoBloqueoDefinicion
                        if (tipoBloqueo === "rangoTemporal") {
                            tipoBloqueoDefinicion = "Rango temporal"
                        }
                        if (tipoBloqueo === "permanente") {
                            tipoBloqueoDefinicion = "Permanente"
                        }


                        if (tipoBloqueo === "rangoTemporal") {
                            // Contendor fechas
                            const contenedorFecha = document.createElement("div")
                            contenedorFecha.classList.add("listaBloqueo_contenedorFecha")


                            const contenedorFechaInicio = document.createElement("div")
                            contenedorFechaInicio.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual")

                            const tipoEntradaUITituloUI = document.createElement("div")
                            tipoEntradaUITituloUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_titulo")
                            tipoEntradaUITituloUI.classList.add("negrita")
                            tipoEntradaUITituloUI.innerText = "Fecha de inicio del bloqueo"
                            contenedorFechaInicio.appendChild(tipoEntradaUITituloUI)

                            const entradaUI = document.createElement("div")
                            entradaUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_fecha")
                            entradaUI.innerText = entrada
                            contenedorFechaInicio.appendChild(entradaUI)

                            contenedorFecha.appendChild(contenedorFechaInicio)


                            const contenedorFechaFin = document.createElement("div")
                            contenedorFechaFin.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual")

                            const tipoSalidaUITituloUI = document.createElement("div")
                            tipoSalidaUITituloUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_titulo")
                            tipoSalidaUITituloUI.classList.add("negrita")
                            tipoSalidaUITituloUI.innerText = "Fecha de fin del bloqueo"
                            contenedorFechaFin.appendChild(tipoSalidaUITituloUI)

                            const salidaUI = document.createElement("div")
                            salidaUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_fecha")
                            salidaUI.innerText = salida
                            contenedorFechaFin.appendChild(salidaUI)

                            contenedorFecha.appendChild(contenedorFechaFin)


                            bloqueBloqueoUI.appendChild(contenedorFecha)
                        }
                        // Contenedor Tipo bloqueo
                        const contenedorTipoBloqueo = document.createElement("div")
                        contenedorTipoBloqueo.classList.add("listaBloqueos_contenedorTipoBloqueo")

                        const tipoBloqueoTituloUI = document.createElement("div")
                        tipoBloqueoTituloUI.classList.add("administracion_bloqueos_listaBloqueos_titutloTipoBloqueo")
                        tipoBloqueoTituloUI.classList.add("negrita")
                        tipoBloqueoTituloUI.innerText = "Tipo bloqueo"
                        contenedorTipoBloqueo.appendChild(tipoBloqueoTituloUI)

                        const tipoBloqueoUI = document.createElement("div")
                        tipoBloqueoUI.classList.add("listaBloqueos_tipoBloqueo")
                        tipoBloqueoUI.innerText = tipoBloqueoDefinicion
                        contenedorTipoBloqueo.appendChild(tipoBloqueoUI)

                        bloqueBloqueoUI.appendChild(contenedorTipoBloqueo)
                        /// Contendor Zona
                        const contenedorZonaUI = document.createElement("div")
                        contenedorZonaUI.classList.add("listaBloqueo_contenedorZonaUI")

                        const tituloZonaUI = document.createElement("div")
                        tituloZonaUI.classList.add("litaBloqueos_tituloZona")
                        tituloZonaUI.classList.add("negrita")
                        tituloZonaUI.innerText = "Contexto de aplicacion"
                        contenedorZonaUI.appendChild(tituloZonaUI)

                        let zonaDefinicionUI
                        if (zona === "privado") {
                            zonaDefinicionUI = "Privado - Solo se aplica a la zona de administracíon"
                        }
                        if (zona === "publico") {
                            zonaDefinicionUI = "Público - Solo se aplica a la zona publica"
                        } if (zona === "global") {
                            zonaDefinicionUI = "Global - Se aplica a toda la zona, tando pública como administrativa"
                        }
                        const zonaUI = document.createElement("div")
                        zonaUI.classList.add("listaBloqueos_zonaUI")
                        zonaUI.innerText = zonaDefinicionUI
                        contenedorZonaUI.appendChild(zonaUI)

                        bloqueBloqueoUI.appendChild(contenedorZonaUI)

                        let motivoFinal
                        if (motivo === null) {
                            motivoFinal = "Este bloqueo no tiene ningún motivo definido, seria recomendable definir un motivo para poder identificar rapidamente por que existe este bloqueo"
                        } else {
                            motivoFinal = motivo
                        }

                        // Motivo

                        // Contenedor motivo bloqueo
                        const contenedorMotivoBloqueo = document.createElement("div")
                        contenedorMotivoBloqueo.classList.add("listaBloqueos_contenedorTipoBloqueo")

                        const motivoBloqueoTituloUI = document.createElement("div")
                        motivoBloqueoTituloUI.classList.add("administracion_bloqueos_listaBloqueos_titutloTipoBloqueo")
                        motivoBloqueoTituloUI.classList.add("negrita")
                        motivoBloqueoTituloUI.innerText = "Motivo del bloqueo"
                        contenedorMotivoBloqueo.appendChild(motivoBloqueoTituloUI)

                        const motivoUI = document.createElement("div")
                        motivoUI.classList.add("listaBloqueos_motivo")
                        motivoUI.innerText = motivoFinal
                        contenedorMotivoBloqueo.appendChild(motivoUI)

                        bloqueBloqueoUI.appendChild(contenedorMotivoBloqueo)


                        selectorEspacioBloqueos.appendChild(bloqueBloqueoUI)
                    })
                }
            },
            "traductorCambioVista": (uidBloqueo) => {
                uidBloqueo.preventDefault()
                uidBloqueo.stopPropagation()
                const vista = uidBloqueo.target.closest("[vista]").getAttribute("vista")

                const entrada = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                return casaVitini.componentes.controladorVista(entrada)



            }
        },
        detallesDelBloqueo: {
            UI: async (url) => {
                const apartmentoIDV = url[0]
                const uidBloqueo = url[1]
                const selectorTitulo = document.querySelector("[componente=titulo]")
                selectorTitulo.innerText = "Detalles del bloqueo"
                const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")

                const transaccion = {
                    zona: "administracion/bloqueos/detallesDelBloqueo",
                    apartamentoIDV: apartmentoIDV,
                    bloqueoUID: Number(uidBloqueo)
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {

                    const apartamentoIDV = respuestaServidor?.apartamentoIDV
                    const apartamentoUI = respuestaServidor?.apartamentoUI
                    const detallesDelBloqueo = respuestaServidor?.ok
                    const tipoBloqueo = detallesDelBloqueo.tipoBloqueo
                    const entrada = detallesDelBloqueo.entrada
                    const salida = detallesDelBloqueo.salida
                    const motivo = detallesDelBloqueo.motivo
                    const zona = detallesDelBloqueo.zona
                    const uidBloqueo = detallesDelBloqueo.uidBloqueo
                    selectorTitulo.innerText = "Detalles del bloqueo " + uidBloqueo + " del " + apartamentoUI


                    const contenedorGlobal = document.createElement("div")
                    contenedorGlobal.classList.add("detallesBloqueos_contenedorGlobal")
                    contenedorGlobal.setAttribute("componente", "contenedorGlobal")

                    // Contenedor bloqueo
                    const bloqueBloqueoUI = document.createElement("div")
                    bloqueBloqueoUI.classList.add("detallesBloqueos_bloqueBloqueoUI")
                    bloqueBloqueoUI.setAttribute("componente", "contenedorDelBloqueo")
                    bloqueBloqueoUI.style.pointerEvents = "none"
                    bloqueBloqueoUI.setAttribute("bloqueoUID", uidBloqueo)
                    bloqueBloqueoUI.setAttribute("apartamentoIDV", apartamentoIDV)


                    let tipoBloqueoDefinicion
                    if (tipoBloqueo === "rangoTemporal") {
                        tipoBloqueoDefinicion = "Rango temporal"
                    }
                    if (tipoBloqueo === "permanente") {
                        tipoBloqueoDefinicion = "Permanente"
                    }
                    // Contenedor Tipo bloqueo
                    const contenedorTipoBloqueo = document.createElement("div")
                    contenedorTipoBloqueo.classList.add("detallesloqueos_contenedorBloquesGlobales")

                    const contenedorTipoBloqueoV2 = document.createElement("div")
                    contenedorTipoBloqueoV2.classList.add("detallesBloqueo_contenedorTipoBloqueoV2")

                    const tipoBloqueoTituloUI = document.createElement("div")
                    tipoBloqueoTituloUI.classList.add("listaBloqueos_titulo")
                    tipoBloqueoTituloUI.classList.add("negrita")
                    tipoBloqueoTituloUI.innerText = "Tipo bloqueo"
                    contenedorTipoBloqueoV2.appendChild(tipoBloqueoTituloUI)

                    const tipoBloqueoUI = document.createElement("select")
                    tipoBloqueoUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                    tipoBloqueoUI.setAttribute("datoBloqueo", "tipoBloqueo")
                    tipoBloqueoUI.setAttribute("datoInicial", tipoBloqueo)

                    tipoBloqueoUI.innerText = tipoBloqueoDefinicion
                    tipoBloqueoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)

                    const opcion_permamente = document.createElement("option");
                    opcion_permamente.value = "permanente";
                    if (tipoBloqueo === "permanente") {
                        opcion_permamente.selected = true;
                    }
                    opcion_permamente.text = "Permanente";
                    tipoBloqueoUI.add(opcion_permamente);

                    const opcion_rangoTemporal = document.createElement("option");
                    if (tipoBloqueo === "rangoTemporal") {
                        opcion_rangoTemporal.selected = true;
                    }
                    opcion_rangoTemporal.value = "rangoTemporal";
                    opcion_rangoTemporal.text = "Rango temporal";
                    tipoBloqueoUI.add(opcion_rangoTemporal);

                    contenedorTipoBloqueoV2.appendChild(tipoBloqueoUI)
                    contenedorTipoBloqueo.appendChild(contenedorTipoBloqueoV2)
                    bloqueBloqueoUI.appendChild(contenedorTipoBloqueo)

                    const contenedorZonaUI = document.createElement("div")
                    contenedorZonaUI.classList.add("detallesBloqueo_contenedorZonaUI")

                    const tituloZonaUI = document.createElement("div")
                    tituloZonaUI.classList.add("listaBloqueos_titulo")
                    tituloZonaUI.classList.add("negrita")
                    tituloZonaUI.innerText = "Contexto de aplicacion"
                    contenedorZonaUI.appendChild(tituloZonaUI)

                    let zonaDefinicionUI
                    if (zona === "privado") {
                        zonaDefinicionUI = "Privado - Solo se aplica a la zona de administracíon"
                    }
                    if (zona === "publico") {
                        zonaDefinicionUI = "Público - Solo se aplica a la zona publica"
                    } if (zona === "global") {
                        zonaDefinicionUI = "Global - Se aplica a toda la zona, tando pública como administrativa"
                    }
                    const zonaUI = document.createElement("select")
                    zonaUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                    zonaUI.setAttribute("datoBloqueo", "zonaUI")
                    zonaUI.setAttribute("datoInicial", zona)

                    const opcion_publico = document.createElement("option");
                    if (zona === "publico") {
                        opcion_publico.selected = true;
                    }
                    opcion_publico.value = "publico";
                    opcion_publico.text = "Público - Zona pública";
                    zonaUI.add(opcion_publico);


                    const opcion_privado = document.createElement("option");
                    if (zona === "privado") {
                        opcion_privado.selected = true;
                    }
                    opcion_privado.value = "privado";
                    opcion_privado.text = "Privado - Zona administrativa";
                    zonaUI.add(opcion_privado);

                    const opcion_global = document.createElement("option");
                    if (zona === "global") {
                        opcion_global.selected = true;
                    }
                    opcion_global.value = "global";
                    opcion_global.text = "Global - Zona pública y administrativa";
                    zonaUI.add(opcion_global);

                    contenedorZonaUI.appendChild(zonaUI)
                    contenedorTipoBloqueo.appendChild(contenedorZonaUI)


                    if (tipoBloqueo === "rangoTemporal") {
                        const metadatosContructorRangoTemporalUI = {
                            entrada: entrada,
                            salida: salida,
                            modo: "estadoConDatos"
                        }
                        const selectorRangoUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.selectorRangoTemporalUI(metadatosContructorRangoTemporalUI)
                        bloqueBloqueoUI.appendChild(selectorRangoUI)

                    }
                    if (tipoBloqueo === "permanente") {
                        const metadatosContructorRangoTemporalUI = {
                            modo: "estadoInicial"
                        }
                        const selectorRangoUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.selectorRangoTemporalUI(metadatosContructorRangoTemporalUI)
                        bloqueBloqueoUI.appendChild(selectorRangoUI)

                    }
                    /// Contendor Zona
                    const motivoUI = document.createElement("textarea")
                    motivoUI.classList.add("detalleBloqueos_motivo")
                    motivoUI.setAttribute("componente", "contenedorMotivo")
                    motivoUI.setAttribute("datoBloqueo", "motivoUI")
                    if (motivo === null) {
                        motivoUI.setAttribute("datoInicial", "")
                    } else {
                        motivoUI.setAttribute("datoInicial", motivo)
                    }

                    motivoUI.innerText = motivo
                    motivoUI.rows = 10
                    if (motivo === null) {
                        motivoUI.placeholder = "Este bloqueo no tiene ningún motivo definido, seria recomendable definir un motivo para poder identificar rapidamente por que existe este bloqueo"
                    }
                    bloqueBloqueoUI.appendChild(motivoUI)


                    contenedorGlobal.appendChild(bloqueBloqueoUI)
                    selectorEspacioBloqueos.appendChild(contenedorGlobal)



                    casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.modificar()

                }
            },
            "traductorCambioVista": (uidBloqueo) => {
                uidBloqueo.preventDefault()
                uidBloqueo.stopPropagation()
                const vista = uidBloqueo.target.closest("[vista]").getAttribute("vista")

                const entrada = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                return casaVitini.componentes.controladorVista(entrada)



            },
            "traductorConstructorCalendario": (calendario) => {
                const componente = calendario.target.closest("[calendario]")
                return casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.constructorCalendario(componente)



            },
            "constructorCalendario": async (boton) => {
                let botonID = boton.getAttribute("componente")
                const alturaDinamicaArriba = casaVitini.componentes.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton) + 20
                const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
                const calendario = document.querySelector("[contenedor=calendario]")
                const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

                if (botonID === "fechaEntrada") {

                    if (calendario?.getAttribute("calendarioIO") === "entrada") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        return
                    }
                    if (calendario?.getAttribute("calendarioIO") === "salida") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        // return
                    }
                    let fechaEntrada = document.querySelector("[calendario=entrada][componente=fechaEntrada]").getAttribute("memoriaVolatil")


                    let resolucionCalendario

                    if (fechaEntrada) {
                        fechaEntrada = fechaEntrada.split("/")
                        let diaEntrada = fechaEntrada[0]
                        diaEntrada = Number(diaEntrada)
                        let mesEntrada = fechaEntrada[1]
                        mesEntrada = Number(mesEntrada)
                        let anoEntrada = fechaEntrada[2]
                        anoEntrada = Number(anoEntrada)

                        resolucionCalendario = {
                            tipo: "personalizado",
                            comando: "construyeObjeto",
                            ano: anoEntrada,
                            mes: mesEntrada
                        }
                    }

                    if (!fechaEntrada) {
                        resolucionCalendario = {
                            tipo: "actual",
                            comando: "construyeObjeto"
                        }
                    }

                    let metadatosCalendario = {
                        tipoFecha: "entrada",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaEntradaAsistidoBloqueosConPasado",
                        calendarioIO: "entrada",
                        mensajeInfo: "Selecciona la fecha de inicio del bloqueo",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                    calendarioResuelvo.instanciaUID = instanciaUID

                    await casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)
                }
                if (botonID === "fechaSalida") {

                    if (calendario?.getAttribute("calendarioIO") === "salida") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        return
                    }
                    if (calendario?.getAttribute("calendarioIO") === "entrada") {
                        bloqueCalendario.remove()
                        document.removeEventListener("click", casaVitini.componentes.ocultarElementos)
                        //return

                    }

                    let fechaSalida = document.querySelector("[calendario=salida][componente=fechaSalida]").getAttribute("memoriaVolatil")
                    let resolucionCalendario
                    if (fechaSalida) {
                        fechaSalida = fechaSalida.split("/")
                        let diaSalida = fechaSalida[0]
                        diaSalida = Number(diaSalida)
                        let mesSalida = fechaSalida[1]
                        mesSalida = Number(mesSalida)
                        let anoSalida = fechaSalida[2]
                        anoSalida = Number(anoSalida)

                        resolucionCalendario = {
                            comando: "construyeObjeto",
                            tipo: "personalizado",
                            ano: anoSalida,
                            mes: mesSalida
                        }
                    }

                    if (!fechaSalida) {
                        resolucionCalendario = {
                            comando: "construyeObjeto",
                            tipo: "actual"
                        }
                    }

                    let metadatosCalendario = {
                        tipoFecha: "salida",
                        almacenamientoCalendarioID: "administracionCalendario",
                        perfilMes: "diaSalidaAsistidoBloqueosConPasado",
                        calendarioIO: "salida",
                        mensajeInfo: "Selecciona la fecha de final del bloqueo.",
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID: instanciaUID
                    }
                    casaVitini.componentes.constructorCalendarioNuevo(metadatosCalendario)
                    document.addEventListener("click", casaVitini.componentes.ocultarElementos)

                    const calendarioResuelvo = await casaVitini.componentes.resolverCalendarioNuevo(resolucionCalendario)
                    calendarioResuelvo.instanciaUID = instanciaUID
                    casaVitini.componentes.constructorMesNuevo(calendarioResuelvo)


                }
            },
            "selectorRangoTemporalUI": (rango) => {

                const fechaInicio = rango.entrada
                const fechaFin = rango.salida
                const modo = rango.modo

                if (modo !== "estadoInicial" && modo !== "estadoConDatos") {
                    const error = "selectorRAngoTemporalUI necesita un modo, puede ser estadoInicial o estadoConDatos"
                    return casaVitini.ui.vistas.advertenciaInmersiva(error)
                }

                // Contendor fechas
                let memoriaVolatilEntrada;
                let memoriaVolatilSalida;
                let fechaInicioUI = ""
                let fechaFinUI = ""
                if (modo === "estadoConDatos") {
                    const entradaArray = fechaInicio.split("/")
                    const salidaArray = fechaFin.split("/")
                    fechaInicioUI = fechaInicio
                    fechaFinUI = fechaFin
                }
                if (modo === "estadoInicial") {
                    fechaInicioUI = "(Seleccionar fecha de inicio)"
                    fechaFinUI = "(Seleccionar fecha de fin)"
                }
                const contenedorFecha = document.createElement("div")
                contenedorFecha.classList.add("detallesDelBloqueo_contenedorFecha")
                contenedorFecha.setAttribute("componente", "contenedorFechas")
                if (modo === "estadoInicial") {
                    contenedorFecha.style.display = "none"

                }
                const contenedorFechaEntrada = document.createElement("div")
                contenedorFechaEntrada.classList.add("detallesBloqueo_contenedorFechaEntrada")
                contenedorFechaEntrada.setAttribute("calendario", "entrada")
                contenedorFechaEntrada.setAttribute("componente", "fechaEntrada")
                contenedorFechaEntrada.setAttribute("paralizadorEvento", "ocultadorCalendarios")



                if (modo === "estadoConDatos") {
                    contenedorFechaEntrada.setAttribute("memoriaVolatil", fechaInicio)
                    contenedorFechaEntrada.setAttribute("memoriaVolatilInicial", fechaInicio)
                }
                contenedorFechaEntrada.addEventListener("click", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.traductorConstructorCalendario)

                const tipoEntradaUITituloUI = document.createElement("div")
                tipoEntradaUITituloUI.classList.add("listaBloqueos_titulo")
                tipoEntradaUITituloUI.classList.add("negrita")
                tipoEntradaUITituloUI.innerText = "Fecha de inicio del bloqueo"
                contenedorFechaEntrada.appendChild(tipoEntradaUITituloUI)

                const entradaUI = document.createElement("div")
                entradaUI.classList.add("listaBloqueos_fecha")
                entradaUI.setAttribute("fechaUI", "fechaInicio")
                entradaUI.innerText = fechaInicioUI
                contenedorFechaEntrada.appendChild(entradaUI)

                contenedorFecha.appendChild(contenedorFechaEntrada)

                const contenedorFechaSalida = document.createElement("div")
                contenedorFechaSalida.classList.add("detallesBloqueo_contenedorFechaSalida")
                contenedorFechaSalida.setAttribute("calendario", "salida")
                contenedorFechaSalida.setAttribute("componente", "fechaSalida")
                contenedorFechaSalida.setAttribute("paralizadorEvento", "ocultadorCalendarios")

                if (modo === "estadoConDatos") {
                    contenedorFechaSalida.setAttribute("memoriaVolatil", fechaFin)
                    contenedorFechaSalida.setAttribute("memoriaVolatilInicial", fechaFin)
                }

                contenedorFechaSalida.addEventListener("click", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.traductorConstructorCalendario)

                const tipoSalidaUITituloUI = document.createElement("div")
                tipoSalidaUITituloUI.classList.add("listaBloqueos_titulo")
                tipoSalidaUITituloUI.classList.add("negrita")
                tipoSalidaUITituloUI.innerText = "Fecha de fin del bloqueo"
                contenedorFechaSalida.appendChild(tipoSalidaUITituloUI)

                const salidaUI = document.createElement("div")
                salidaUI.classList.add("listaBloqueos_fecha")
                salidaUI.setAttribute("fechaUI", "fechaFin")

                salidaUI.innerText = fechaFinUI
                contenedorFechaSalida.appendChild(salidaUI)

                contenedorFecha.appendChild(contenedorFechaSalida)
                return contenedorFecha

            },
            "controladorSelectorRangoTemporalUI": (tipoBloqueoUI) => {
                const tipoBloqueo = tipoBloqueoUI.target.value
                const selectorContenedorFechas = document.querySelector("[componente=contenedorFechas]")
                if (tipoBloqueo === "permanente") {
                    if (selectorContenedorFechas) {
                        selectorContenedorFechas.style.display = "none"
                    }
                }
                if (tipoBloqueo === "rangoTemporal") {
                    if (selectorContenedorFechas) {
                        selectorContenedorFechas.style.display = "flex"
                    }
                }
            },
            "botonesDetallesBloqueoUI": (configuracion) => {

                if (configuracion !== "crear" && configuracion !== "modificar" && configuracion !== "guardarEliminar") {
                    const error = "Este componente necesita un tipo de configuracion, esta puede ser, crear, modificar o guardarEliminar"
                    return casaVitini.ui.vistas.advertenciaInmersiva(error)

                }

                const selectorContenedorBotonesRenderizado = document.querySelector("[componente=contenedorBotones]")
                selectorContenedorBotonesRenderizado?.remove()

                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("detallesBloqueo_contenedorBotones")
                contenedorBotones.setAttribute("componente", "contenedorBotones")


                if (configuracion === "crear") {
                    const botonCrear = document.createElement("div")
                    botonCrear.classList.add("detallesBloqueo_botonV1")
                    botonCrear.innerText = "Crear bloqueo"
                    botonCrear.addEventListener("click", () => {
                        casaVitini.administracion.bloqueos_temporales.crearBloqueo.transactor()
                    })
                    contenedorBotones.appendChild(botonCrear)

                }

                if (configuracion === "modificar") {
                    const botonModificiar = document.createElement("div")
                    botonModificiar.classList.add("detallesBloqueo_botonV1")
                    botonModificiar.innerText = "Modificiar bloqueo"
                    botonModificiar.addEventListener("click", () => {
                        casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.guardarEliminar()
                    })
                    contenedorBotones.appendChild(botonModificiar)
                }

                if (configuracion === "guardarEliminar") {
                    const botonGuardarCambios = document.createElement("div")
                    botonGuardarCambios.classList.add("detallesBloqueo_botonV1")
                    botonGuardarCambios.innerText = "Guardar cambios"
                    botonGuardarCambios.addEventListener("click", () => {
                        casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.guardarCambios()
                    })
                    contenedorBotones.appendChild(botonGuardarCambios)

                    const botonEliminarBloqueo = document.createElement("div")
                    botonEliminarBloqueo.classList.add("detallesBloqueo_botonV1")
                    botonEliminarBloqueo.innerText = "Eliminar bloqueo"
                    botonEliminarBloqueo.addEventListener("click", () => {
                        casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.eliminarBloqueo.UI()

                    })
                    contenedorBotones.appendChild(botonEliminarBloqueo)

                    const botonCancelarCambios = document.createElement("div")
                    botonCancelarCambios.classList.add("detallesBloqueo_botonV1")
                    botonCancelarCambios.innerText = "Cancelar cambios"
                    botonCancelarCambios.addEventListener("click", () => {
                        casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.modificar()
                        casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.cancelarCambios()
                    })
                    contenedorBotones.appendChild(botonCancelarCambios)


                }

                return contenedorBotones




            },
            "controladorBotonesGlobales": {
                // Crear es para la seccion de crear

                "crear": () => {
                    const selectorContendorGlobal = document.querySelector("[componente=contenedorGlobal]")
                    const botonesGlobalesUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.botonesDetallesBloqueoUI("crear")
                    selectorContendorGlobal.append(botonesGlobalesUI)
                },
                "modificar": () => {
                    const selectorContendorGlobal = document.querySelector("[componente=contenedorGlobal]")
                    const botonesGlobalesUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.botonesDetallesBloqueoUI("modificar")
                    selectorContendorGlobal.append(botonesGlobalesUI)

                    const selectorContendorBloqueo = document.querySelector("[componente=contenedorDelBloqueo]")
                    selectorContendorBloqueo.style.pointerEvents = "none"
                },
                "guardarEliminar": () => {
                    const selectorContendorGlobal = document.querySelector("[componente=contenedorGlobal]")
                    const botonesGlobalesUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.botonesDetallesBloqueoUI("guardarEliminar")
                    selectorContendorGlobal.append(botonesGlobalesUI)

                    const selectorContendorBloqueo = document.querySelector("[componente=contenedorDelBloqueo]")
                    selectorContendorBloqueo.style.pointerEvents = "all"

                }
            },
            "guardarCambios": async () => {
                const selectorBloqueUID = document.querySelector("[bloqueoUID]")
                const bloqueUID = selectorBloqueUID.getAttribute("bloqueoUID")
                const selectorTipoBloqueo = document.querySelector("[datoBloqueo=tipoBloqueo]")
                const tipoBloqueo = selectorTipoBloqueo.value
                const selectorZona = document.querySelector("[datoBloqueo=zonaUI]")
                const zona = selectorZona.value
                const selectorFechaFin = document.querySelector("[datoBloqueo=fechaFin]")
                const fechaFin = selectorFechaFin?.getAttribute("fechaFinPropuesta") || null
                const selectorFechaInicio = document.querySelector("[datoBloqueo=fechaInicio]")
                const fechaInicio = selectorFechaInicio?.getAttribute("fechaInicioPropuesta") || null
                const selectorMotivo = document.querySelector("[datoBloqueo=motivoUI]")
                const motivo = selectorMotivo.value || null


                const transaccion = {
                    zona: "administracion/bloqueos/modificarBloqueo",
                    bloqueoUID: Number(bloqueUID),
                    tipoBloqueo: tipoBloqueo,
                    zonaBloqueo: zona,
                    fechaInicio: fechaInicio,
                    fechaFin: fechaFin,
                    motivo: motivo
                }

                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }


                if (respuestaServidor?.ok) {

                    const fechaInicioPropuesta = document.querySelector("[fechaInicioPropuesta]")?.getAttribute("fechaInicioPropuesta")
                    const fechaFinPropuesta = document.querySelector("[fechaFinPropuesta]")?.getAttribute("fechaFinPropuesta")


                    if (fechaInicioPropuesta) {
                        const fechaInicioArray = fechaInicioPropuesta.split("/")
                        const datosMemoriaVolatil = {
                            dia: fechaInicioArray[0],
                            mes: fechaInicioArray[1],
                            ano: fechaInicioArray[2]
                        }
                        const memoriaVolatilInicial = document.querySelector("[calendario=entrada]")
                        memoriaVolatilInicial.setAttribute("memoriaVolatilInicial", JSON.stringify(datosMemoriaVolatil))
                        document.querySelector("[fechaInicioPropuesta]").remove()
                        document.querySelector("[fechaUI=fechaInicio]").innerText = fechaInicioPropuesta
                    }

                    if (fechaFinPropuesta) {
                        const fechaFinArray = fechaFinPropuesta.split("/")
                        const datosMemoriaVolatil = {
                            dia: fechaFinArray[0],
                            mes: fechaFinArray[1],
                            ano: fechaFinArray[2]
                        }
                        const memoriaVolatilInicial = document.querySelector("[calendario=salida]")
                        memoriaVolatilInicial.setAttribute("memoriaVolatilInicial", JSON.stringify(datosMemoriaVolatil))
                        document.querySelector("[fechaFinPropuesta]").remove()
                        document.querySelector("[fechaUI=fechaFin]").innerText = fechaFinPropuesta
                    }


                    selectorTipoBloqueo.setAttribute("datoInicial", tipoBloqueo)
                    selectorZona.setAttribute("datoInicial", zona)
                    selectorMotivo.setAttribute("datoInicial", motivo)


                    casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.modificar()
                    const selectorContendorBloqueo = document.querySelector("[componente=contenedorDelBloqueo]")
                    selectorContendorBloqueo.style.pointerEvents = "none"

                }

            },
            "eliminarBloqueo": {
                "UI": async () => {
                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const tituloCancelarReserva = document.createElement("p")
                    tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                    tituloCancelarReserva.innerText = "Confirmar eliminar el bloqueo"
                    contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = "Var a eliminar el bloqueo y sus implicaciones seran inmediatas, ¿Estas de acuerdo?"

                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                    contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = "Confirmar y eliminar el bloqueo"
                    botonCancelar.addEventListener("click", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.eliminarBloqueo.confirmar)
                    bloqueBotones.appendChild(botonCancelar)

                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion del bloqueo"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)
                },
                confirmar: async () => {
                    const bloqueoUID = document.querySelector("[bloqueoUID]").getAttribute("bloqueoUID")
                    const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                    const transaccion = {
                        zona: "administracion/bloqueos/eliminarBloqueo",
                        bloqueoUID: Number(bloqueoUID)

                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        const tipoRetroceso = respuestaServidor?.tipoRetroceso
                        let vistaFinal
                        if (tipoRetroceso === "aPortada") {
                            vistaFinal = `/administracion/gestion_de_bloqueos_temporales`
                        }
                        if (tipoRetroceso === "aApartamento") {
                            vistaFinal = `/administracion/gestion_de_bloqueos_temporales/` + apartamentoIDV
                        }
                        const navegacion = {
                            "vista": vistaFinal,
                            "tipoOrigen": "menuNavegador"
                        }
                        return casaVitini.componentes.controladorVista(navegacion)
                    }



                }
            },
            "cancelarCambios": () => {

                // Revertir cambios

                const tipoBloqueo = document.querySelector("[datoBloqueo=tipoBloqueo]")
                const zona = document.querySelector("[datoBloqueo=zonaUI]")
                const motivo = document.querySelector("[datoBloqueo=motivoUI]")

                const tipoBloqueoInicial = tipoBloqueo.getAttribute("datoInicial")
                const zonaInicial = zona.getAttribute("datoInicial")
                const motivoInicial = motivo.getAttribute("datoInicial")

                tipoBloqueo.value = tipoBloqueoInicial
                zona.value = zonaInicial
                motivo.value = motivoInicial

                const contenedorFechas = document.querySelector("[componente=contenedorFechas]")
                if (tipoBloqueoInicial === "rangoTemporal") {
                    contenedorFechas.style.display = "flex"
                }
                if (tipoBloqueoInicial === "permanente") {
                    contenedorFechas.style.display = "none"
                }
                // Em en el caso de la fecha hay que eliminar las propuestas

                const selectorNuevasPropuestas = [...document.querySelectorAll("[componente=bloqueNuevaPropuesta]")]
                selectorNuevasPropuestas.map((nuevaPropuesta) => {
                    nuevaPropuesta.remove()
                })




            }
        },
        componentes: {
            seleccionarDia: (dia) => {
                let diaSeleccionadoComoElemento = dia.target;
                let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                let calendarioIO = calendario.getAttribute("calendarioIO")

                let diaSeleccionado = dia.target.getAttribute("dia")
                const diaSeleccionadoTexto = diaSeleccionado.padStart(2, "0")
                const diaSeleccionadoNumero = Number(diaSeleccionado)
                let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                const mesSeleccionadoTexto = mesSeleccionado.padStart(2, "0")
                const mesmesSeleccionadoNumero = Number(mesSeleccionado)
                let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                anoSeleccionado = Number(anoSeleccionado)


                let fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                const fechaSeleccionadaTexto = `${diaSeleccionadoTexto}/${mesSeleccionadoTexto}/${anoSeleccionado}`
                let selectorDias = [...document.querySelectorAll("[calendarioIO] [dia]")]


                const memoriaVolatilInicialEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatilInicial")
                let diaInicialEntrada
                let mesInicialEntrada
                let anoInicialEntrada
                if (memoriaVolatilInicialEntrada) {
                    const memoriaVolatilInicialEntradaFormateada = memoriaVolatilInicialEntrada.split("/")
                    diaInicialEntrada = memoriaVolatilInicialEntradaFormateada[0]
                    mesInicialEntrada = memoriaVolatilInicialEntradaFormateada[1]
                    anoInicialEntrada = memoriaVolatilInicialEntradaFormateada[2]
                }


                const memoriaVolatilInicialSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatilInicial")
                let diaSalidaEntrada
                let mesSalidaEntrada
                let anoSalidaEntrada
                if (memoriaVolatilInicialSalida) {
                    const memoriaVolatilInicialSalidaFormateada = memoriaVolatilInicialSalida.split("/")
                    diaSalidaEntrada = memoriaVolatilInicialSalidaFormateada[0]
                    mesSalidaEntrada = memoriaVolatilInicialSalidaFormateada[1]
                    anoSalidaEntrada = memoriaVolatilInicialSalidaFormateada[2]
                }


                const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                let diaSeleccionadoEntrada
                let mesSeleccionadoEntrada
                let anoSeleccionadoEntrada
                if (fechaEntradaVolatil_Humana) {
                    const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("/")
                    diaSeleccionadoEntrada = Number(fechaEntradaAarray[0])
                    mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                    anoSeleccionadoEntrada = Number(fechaEntradaAarray[2])
                    datosFechaEntradaSeleccionada = "existen"
                }

                const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                let diaSeleccionadoSalida
                let mesSeleccionadoSalida
                let anoSeleccionadoSalida
                let datosFechaSalidaSeleccionada
                if (fechaSalidaVolatil_Humana) {
                    const fechaSaliraArray = fechaSalidaVolatil_Humana.split("/")
                    diaSeleccionadoSalida = Number(fechaSaliraArray[0])
                    mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                    anoSeleccionadoSalida = Number(fechaSaliraArray[2])
                    datosFechaSalidaSeleccionada = "existen"
                }

                selectorDias.map((dia) => {
                    // dia.classList.remove("calendarioDiaDisponible")
                    dia.classList.remove("calendarioDiaReserva")
                    dia.classList.remove("calendarioDiaSeleccionado")
                })
                if (diaSeleccionadoComoElemento.getAttribute("diaEstado") === "seleccionado") {
                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                    if (calendarioIO === "entrada") {

                        document.querySelector("[calendario=entrada][componente=fechaEntrada] [componente=bloqueNuevaPropuesta]")?.remove()


                        if (!memoriaVolatilInicialEntrada) {
                            document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                        }

                        if (memoriaVolatilInicialEntrada) {
                            document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", memoriaVolatilInicialEntrada)

                            if (mesInicialEntrada === mesSeleccionado && anoSeleccionado === anoInicialEntrada) {
                                selectorDias.map((dia) => {
                                    if (Number(dia.getAttribute("dia")) === Number(diaInicialEntrada)) {
                                        dia.classList.add("calendarioDiaSeleccionado")

                                    }
                                    if (Number(dia.getAttribute("dia")) > Number(diaInicialEntrada) && Number(dia.getAttribute("dia")) < diaSalidaEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }


                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida][componente=fechaSalida] [componente=bloqueNuevaPropuesta]")?.remove()

                        if (!memoriaVolatilInicialSalida) {
                            document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                        }

                        if (memoriaVolatilInicialSalida) {
                            document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", memoriaVolatilInicialSalida)
                            if (mesSalidaEntrada === mesSeleccionado && anoSeleccionado === anoSalidaEntrada) {
                                selectorDias.map((dia) => {
                                    if (Number(dia.getAttribute("dia")) === Number(diaSalidaEntrada)) {
                                        dia.classList.add("calendarioDiaSeleccionado")

                                    }
                                    if (Number(dia.getAttribute("dia")) < Number(diaSalidaEntrada) && Number(dia.getAttribute("dia")) > diaInicialEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }

                    }
                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                    diaSeleccionadoComoElemento.removeAttribute("diaEstado")
                    return
                }
                let diasDisponibles = [...document.querySelectorAll("[estado=disponible]")]
                diasDisponibles.map(diaDisponible => {
                    diaDisponible.removeAttribute("diaEstado")
                    diaDisponible.style.background = ""
                    diaDisponible.style.color = ""
                })

                diaSeleccionadoComoElemento.setAttribute("diaEstado", "seleccionado")
                diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")

                if (calendarioIO === "entrada") {
                    document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaTexto)

                    if (fechaSalidaVolatil_Humana) {
                        if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        } else {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        }
                    }


                    const selectorBloqueFechaEntrada = document.querySelector("[calendario=entrada][componente=fechaEntrada]")
                    document.querySelector("[calendario=entrada][componente=fechaEntrada] [componente=bloqueNuevaPropuesta]")?.remove()

                    const bloqueNuevaPropuesta = document.createElement("div")
                    bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                    bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                    bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaInicio")
                    bloqueNuevaPropuesta.setAttribute("fechaInicioPropuesta", fechaSeleccionadaTexto)
                    bloqueNuevaPropuesta.innerText = `Nueva fecha de inicio de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propueda, guarde los cambios. Para cancelar pulse ne cancelar cambios.`
                    selectorBloqueFechaEntrada.appendChild(bloqueNuevaPropuesta)
                }

                if (calendarioIO === "salida") {
                    document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaTexto)
                    //document.querySelector("[calendario=salida]").setAttribute("fechaFinFinal", fechaSeleccionadaUI)
                    if (fechaEntradaVolatil_Humana) {
                        if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        } else {
                            selectorDias.map((dia) => {
                                if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                    dia.classList.add("calendarioDiaReserva")
                                }
                            })
                        }
                    }

                    const selectorBloqueFechaSalida = document.querySelector("[calendario=salida][componente=fechaSalida]")
                    document.querySelector("[calendario=salida][componente=fechaSalida] [componente=bloqueNuevaPropuesta]")?.remove()

                    const bloqueNuevaPropuesta = document.createElement("div")
                    bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                    bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                    bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaFin")
                    bloqueNuevaPropuesta.setAttribute("fechaFinPropuesta", fechaSeleccionadaTexto)
                    bloqueNuevaPropuesta.innerText = `Nueva fecha de fin de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propueda, guarde los cambios. Para cancelar pulse ne cancelar cambios.`
                    selectorBloqueFechaSalida.appendChild(bloqueNuevaPropuesta)
                }
            },
        },
        crearBloqueo: {
            arranque: () => {
                document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';
                casaVitini.administracion.bloqueos_temporales.crearBloqueo.UI()

            },
            UI: async () => {

                const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")

                const contenedorGlobal = document.createElement("div")
                contenedorGlobal.classList.add("detallesBloqueos_contenedorGlobal")
                contenedorGlobal.setAttribute("componente", "contenedorGlobal")
                // Contenedor bloqueo
                const bloqueBloqueoUI = document.createElement("div")
                bloqueBloqueoUI.classList.add("detallesBloqueos_bloqueBloqueoUI")
                bloqueBloqueoUI.setAttribute("componente", "contenedorDelBloqueo")




                // Contenedor selector apartmetnos
                const contenedorOpcionesTroncales = document.createElement("div")
                contenedorOpcionesTroncales.classList.add("detallesloqueos_contenedorBloquesGlobales")

                const contenedorApartamentosV2 = document.createElement("div")
                contenedorApartamentosV2.classList.add("detallesBloqueo_contenedorTipoBloqueoV2")

                const tipoApartamentoTituloUI = document.createElement("div")
                tipoApartamentoTituloUI.classList.add("listaBloqueos_titulo")
                tipoApartamentoTituloUI.classList.add("negrita")
                tipoApartamentoTituloUI.innerText = "Apartamento:"
                contenedorApartamentosV2.appendChild(tipoApartamentoTituloUI)

                const tipoApartamentoUI = document.createElement("select")
                tipoApartamentoUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                tipoApartamentoUI.setAttribute("datoBloqueo", "apartamento")
                tipoApartamentoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)

                const tipoApartamentoInicio = document.createElement("option");
                tipoApartamentoInicio.value = "";
                tipoApartamentoInicio.selected = true;
                tipoApartamentoInicio.disabled = true;
                tipoApartamentoInicio.text = "Seleccionar el apartamento";
                tipoApartamentoUI.add(tipoApartamentoInicio);

                const apartamentosArray = await casaVitini.administracion.bloqueos_temporales.crearBloqueo.obtenerApartamentos()

                if (apartamentosArray.length === 0) {
                    const opcion = document.createElement("option");
                    opcion.value = "";
                    opcion.disabled = true;
                    opcion.text = "No hay ningun apartamento disponible";
                    tipoApartamentoUI.add(opcion);
                }

                if (apartamentosArray.length > 0) {

                    apartamentosArray.map((detallesApartamento) => {
                        const apartamentoIDV = detallesApartamento.apartamentoIDV
                        const aparatmentoUI = detallesApartamento.apartamentoUI
                        const opcion = document.createElement("option");
                        opcion.value = apartamentoIDV;
                        opcion.text = aparatmentoUI;
                        tipoApartamentoUI.add(opcion);


                    })

                }


                contenedorApartamentosV2.appendChild(tipoApartamentoUI)
                contenedorOpcionesTroncales.appendChild(contenedorApartamentosV2)


                const contenedorTipoBloqueoV2 = document.createElement("div")
                contenedorTipoBloqueoV2.classList.add("detallesBloqueo_contenedorTipoBloqueoV2")

                const tipoBloqueoTituloUI = document.createElement("div")
                tipoBloqueoTituloUI.classList.add("listaBloqueos_titulo")
                tipoBloqueoTituloUI.classList.add("negrita")
                tipoBloqueoTituloUI.innerText = "Tipo bloqueo"
                contenedorTipoBloqueoV2.appendChild(tipoBloqueoTituloUI)

                const tipoBloqueoUI = document.createElement("select")
                tipoBloqueoUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                tipoBloqueoUI.setAttribute("datoBloqueo", "tipoBloqueo")
                tipoBloqueoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)

                const tipoBloqueoInicio = document.createElement("option");
                tipoBloqueoInicio.value = "";
                tipoBloqueoInicio.selected = true;
                tipoBloqueoInicio.disabled = true;
                tipoBloqueoInicio.text = "Seleccionar el tipo de bloqueo";
                tipoBloqueoUI.add(tipoBloqueoInicio);

                const opcion_permamente = document.createElement("option");
                opcion_permamente.value = "permanente";
                opcion_permamente.text = "Permanente";
                tipoBloqueoUI.add(opcion_permamente);

                const opcion_rangoTemporal = document.createElement("option");
                opcion_rangoTemporal.value = "rangoTemporal";
                opcion_rangoTemporal.text = "Rango temporal";
                tipoBloqueoUI.add(opcion_rangoTemporal);

                contenedorTipoBloqueoV2.appendChild(tipoBloqueoUI)
                contenedorOpcionesTroncales.appendChild(contenedorTipoBloqueoV2)





                const contenedorZonaUI = document.createElement("div")
                contenedorZonaUI.classList.add("detallesBloqueo_contenedorZonaUI")

                const tituloZonaUI = document.createElement("div")
                tituloZonaUI.classList.add("litaBloqueos_tituloZona")
                tituloZonaUI.classList.add("negrita")
                tituloZonaUI.innerText = "Contexto de aplicacion"
                contenedorZonaUI.appendChild(tituloZonaUI)

                const zonaUI = document.createElement("select")
                zonaUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                zonaUI.setAttribute("datoBloqueo", "zonaUI")


                const zonaInicio = document.createElement("option");
                zonaInicio.value = "";
                zonaInicio.selected = true;
                zonaInicio.disabled = true;
                zonaInicio.text = "Seleccionar en que zona se aplica en bloqueo";
                zonaUI.add(zonaInicio);



                const opcion_publico = document.createElement("option");
                opcion_publico.value = "publico";
                opcion_publico.text = "Público - Zona pública";
                zonaUI.add(opcion_publico);


                const opcion_privado = document.createElement("option");
                opcion_privado.value = "privado";
                opcion_privado.text = "Privado - Zona administrativa";
                zonaUI.add(opcion_privado);

                const opcion_global = document.createElement("option");
                opcion_global.value = "global";
                opcion_global.text = "Global - Zona pública y administrativa";
                zonaUI.add(opcion_global);

                contenedorZonaUI.appendChild(zonaUI)
                contenedorOpcionesTroncales.appendChild(contenedorZonaUI)
                bloqueBloqueoUI.appendChild(contenedorOpcionesTroncales)

                const metadatosContructorRangoTemporalUI = {
                    modo: "estadoInicial"
                }
                const selectorRangoUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.selectorRangoTemporalUI(metadatosContructorRangoTemporalUI)
                bloqueBloqueoUI.appendChild(selectorRangoUI)

                /// Contendor Zona
                const motivoUI = document.createElement("textarea")
                motivoUI.classList.add("detalleBloqueos_motivo")
                motivoUI.setAttribute("componente", "contenedorMotivo")
                motivoUI.setAttribute("datoBloqueo", "motivoUI")
                motivoUI.rows = 10
                motivoUI.placeholder = "Escriba una breve descripcion de por que existe este bloqueo, esto ayudara a recordar rapidamente por que existe este bloqueo, no es obligatorio pero si recomendable."

                bloqueBloqueoUI.appendChild(motivoUI)

                contenedorGlobal.appendChild(bloqueBloqueoUI)
                selectorEspacioBloqueos.appendChild(contenedorGlobal)

                casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.crear()
            },
            transactor: async () => {
                const apartamentoIDV = document.querySelector("[datoBloqueo=apartamento]").value
                const tipoBloqueo = document.querySelector("[datoBloqueo=tipoBloqueo]").value
                const zonaUI = document.querySelector("[datoBloqueo=zonaUI]").value
                const fechaInicio = document.querySelector("[datoBloqueo=fechaInicio]")?.getAttribute("fechaInicioPropuesta") || null
                const fechaFin = document.querySelector("[datoBloqueo=fechaFin]")?.getAttribute("fechaFinPropuesta") || null
                const motivo = document.querySelector("[datoBloqueo=motivoUI]").value || null



                // Formatear la fecha en ISO, el servidro solo aceptaISO por seguridad




                const transaccion = {
                    zona: "administracion/bloqueos/crearNuevoBloqueo",
                    apartamentoIDV: apartamentoIDV,
                    tipoBloqueo: tipoBloqueo,
                    zonaUI: zonaUI,
                    fechaInicio: fechaInicio,
                    fechaFin: fechaFin,
                    motivo: motivo,
                }


                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)


                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const nuevoUID = respuestaServidor?.nuevoBloqueoUID
                    const vistaFinal = `/administracion/gestion_de_bloqueos_temporales/` + apartamentoIDV + "/" + nuevoUID
                    const navegacion = {
                        vista: vistaFinal,
                        tipoOrigen: "menuNavegador"
                    }
                    return casaVitini.componentes.controladorVista(navegacion)
                }


            },
            obtenerApartamentos: async () => {
                const transaccion = {
                    zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    return respuestaServidor?.ok
                }
            }
        }
    },
    arquitectura_del_alojamiento: {
        arranque: async () => {
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            const granuladoURL = casaVitini.componentes.granuladorURL()
            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

            if (comandoInicial === "arquitectura_del_alojamiento" && Object.keys(granuladoURL.parametros).length === 0) {
                return casaVitini.administracion.arquitectura_del_alojamiento.portadaUI()
            }
        },
        portadaUI: () => {
            const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
            const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")


            const contenedorBotonesPortada = document.createElement("dv")
            contenedorBotonesPortada.classList.add("confAlojamiento_contenedor")

            const botonAlojameintoUI = document.createElement("a")
            botonAlojameintoUI.classList.add("confAlojamiento_botonPortadaUI")
            botonAlojameintoUI.innerText = "Configuracion del alojamiento"
            botonAlojameintoUI.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones")
            botonAlojameintoUI.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones")
            botonAlojameintoUI.addEventListener("click", casaVitini.componentes.cambiarVista)
            contenedorBotonesPortada.appendChild(botonAlojameintoUI)

            const botonEntidadesAlojamientoUI = document.createElement("a")
            botonEntidadesAlojamientoUI.classList.add("confAlojamiento_botonPortadaUI")
            botonEntidadesAlojamientoUI.innerText = "Entidades de alojamiento"
            botonEntidadesAlojamientoUI.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades")
            botonEntidadesAlojamientoUI.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades")
            botonEntidadesAlojamientoUI.addEventListener("click", casaVitini.componentes.cambiarVista)
            contenedorBotonesPortada.appendChild(botonEntidadesAlojamientoUI)
            espacioConfiguracionDelAlojamiento.appendChild(contenedorBotonesPortada)
        },
        entidades: {
            arranque: () => {
                document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

                const urlRaw = window.location.pathname;
                let url = urlRaw.toLowerCase()
                url = url.split("/")
                url = url.filter((url) => url)
                delete url[0]
                delete url[1]
                delete url[2]

                url = url.filter((url) => url)
                if (url.length === 0) {
                    casaVitini.administracion.arquitectura_del_alojamiento.entidades.portadaUI()
                }
                if (url.length === 1) {
                    // casaVitini.administracion.configuracion_de_alojamiento.bloqueosPorApartamento.UI(url)
                }
                if (url.length === 2) {
                    // casaVitini.administracion.configuracion_de_alojamiento.detallesDelBloqueo.UI(url)
                }



            },
            portadaUI: async () => {

                const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")

                const transaccion = {
                    zona: "administracion/arquitectura/entidades/listarEntidadesAlojamiento"
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }


                if (respuestaServidor?.ok) {

                    const apartamentos = respuestaServidor?.ok?.apartamentos || []
                    const habitaciones = respuestaServidor?.ok?.habitaciones || []
                    const camas = respuestaServidor?.ok?.camas || []

                    // Contenedor global
                    const contenedorGlobal = document.createElement("div")
                    contenedorGlobal.classList.add("confAlojamiento_entidades_contenedorGlobal")


                    // Apartmentos
                    const contenedorApartamentos = document.createElement("div")
                    contenedorApartamentos.classList.add("confAlojamiento_entidades_contenedor")

                    const contenedorBotonSeccionEntidad = document.createElement("div")
                    contenedorBotonSeccionEntidad.classList.add("confAlojamiento_entidades_contenedorBotones")

                    const botonAnadirApartamento = document.createElement("a")
                    botonAnadirApartamento.classList.add("confAlojamiento_entidades_botonContenedor")
                    botonAnadirApartamento.innerText = "Crear un nuevo apartamento"
                    botonAnadirApartamento.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                    botonAnadirApartamento.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                    botonAnadirApartamento.addEventListener("click", casaVitini.componentes.cambiarVista)
                    contenedorBotonSeccionEntidad.appendChild(botonAnadirApartamento)

                    contenedorApartamentos.appendChild(contenedorBotonSeccionEntidad)

                    const contenedorApartamentosExistentes = document.createElement("div")
                    contenedorApartamentosExistentes.classList.add("confAlojamiento_entidades_contenedorEntidades")

                    if (apartamentos.length === 0) {
                        const infoNoApartamentoUI = document.createElement("div")
                        infoNoApartamentoUI.classList.add("confAlojamiento_entidades_carteInfo")
                        infoNoApartamentoUI.innerText = "No hay nigún apartamto"
                        contenedorApartamentosExistentes.appendChild(infoNoApartamentoUI)
                    }
                    if (apartamentos.length > 0) {
                        apartamentos.map((detalleApartamento) => {
                            const apartamentoIDV = detalleApartamento.apartamento
                            const apartamentoUI = detalleApartamento.apartamentoUI
                            const estado = detalleApartamento.estado

                            const contenedorDetalleApartamento = document.createElement("a")
                            contenedorDetalleApartamento.classList.add("confAlojamiento_entidades_contenedorDetalles")
                            contenedorDetalleApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                            contenedorDetalleApartamento.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/apartamento:" + apartamentoIDV)
                            contenedorDetalleApartamento.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/apartamento:" + apartamentoIDV)
                            contenedorDetalleApartamento.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)

                            const tituloApartamento = document.createElement("div")
                            tituloApartamento.classList.add("confAlojamiento_entidades_titulo")
                            tituloApartamento.classList.add("negrita")

                            tituloApartamento.innerText = apartamentoUI
                            contenedorDetalleApartamento.appendChild(tituloApartamento)

                            const tituloApartamentoIDV = document.createElement("div")
                            tituloApartamentoIDV.classList.add("confAlojamiento_entidades_tituloIDV")
                            tituloApartamentoIDV.innerText = apartamentoIDV
                            contenedorDetalleApartamento.appendChild(tituloApartamentoIDV)



                            contenedorApartamentosExistentes.appendChild(contenedorDetalleApartamento)
                        })

                        contenedorApartamentos.appendChild(contenedorApartamentosExistentes)

                    }
                    contenedorGlobal.appendChild(contenedorApartamentos)

                    // Habitaciones
                    const contenedorHabitaciones = document.createElement("div")
                    contenedorHabitaciones.classList.add("confAlojamiento_entidades_contenedor")

                    const contenedorBotonSeccionHabitacion = document.createElement("div")
                    contenedorBotonSeccionHabitacion.classList.add("confAlojamiento_entidades_contenedorBotones")

                    const botonAnadirHabitacion = document.createElement("a")
                    botonAnadirHabitacion.classList.add("confAlojamiento_entidades_botonContenedor")
                    botonAnadirHabitacion.innerText = "Crear una nueva habitacion"
                    botonAnadirHabitacion.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:habitacion")
                    botonAnadirHabitacion.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:habitacion")
                    botonAnadirHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)
                    contenedorBotonSeccionHabitacion.appendChild(botonAnadirHabitacion)

                    contenedorHabitaciones.appendChild(contenedorBotonSeccionHabitacion)

                    const contenedorHabitacionesExistentes = document.createElement("div")
                    contenedorHabitacionesExistentes.classList.add("confAlojamiento_entidades_contenedorEntidades")

                    if (habitaciones.length === 0) {
                        const infoNoApartamentoUI = document.createElement("div")
                        infoNoApartamentoUI.classList.add("confAlojamiento_entidades_carteInfo")
                        infoNoApartamentoUI.innerText = "No hay ninguna habitacion construida"
                        contenedorHabitacionesExistentes.appendChild(infoNoApartamentoUI)
                    }
                    if (habitaciones.length > 0) {
                        habitaciones.map((detallesHabitacion) => {
                            const habitacionIDV = detallesHabitacion.habitacion
                            const habitacionUI = detallesHabitacion.habitacionUI

                            const contenedorDetalleHabitacion = document.createElement("a")
                            contenedorDetalleHabitacion.classList.add("confAlojamiento_entidades_contenedorDetalles")
                            contenedorDetalleHabitacion.setAttribute("habitacionIDV", habitacionIDV)
                            contenedorDetalleHabitacion.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/habitacion:" + habitacionIDV)
                            contenedorDetalleHabitacion.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/habitacion:" + habitacionIDV)
                            contenedorDetalleHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)

                            const tituloHabitacion = document.createElement("div")
                            tituloHabitacion.classList.add("confAlojamiento_entidades_titulo")
                            tituloHabitacion.classList.add("negrita")
                            tituloHabitacion.innerText = habitacionUI
                            contenedorDetalleHabitacion.appendChild(tituloHabitacion)

                            const titulohabitacionIDV = document.createElement("div")
                            titulohabitacionIDV.classList.add("confAlojamiento_entidades_tituloIDV")
                            titulohabitacionIDV.innerText = habitacionIDV
                            contenedorDetalleHabitacion.appendChild(titulohabitacionIDV)

                            contenedorHabitacionesExistentes.appendChild(contenedorDetalleHabitacion)

                        })
                        contenedorHabitaciones.appendChild(contenedorHabitacionesExistentes)
                    }
                    contenedorGlobal.appendChild(contenedorHabitaciones)


                    // Camas
                    const contenedorCamas = document.createElement("div")
                    contenedorCamas.classList.add("confAlojamiento_entidades_contenedor")

                    const contenedorBotonSeccionCamas = document.createElement("div")
                    contenedorBotonSeccionCamas.classList.add("confAlojamiento_entidades_contenedorBotones")

                    const botonAnadirCamas = document.createElement("a")
                    botonAnadirCamas.classList.add("confAlojamiento_entidades_botonContenedor")
                    botonAnadirCamas.innerText = "Crear una nueva cama"
                    botonAnadirCamas.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:cama")
                    botonAnadirCamas.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:cama")
                    botonAnadirCamas.addEventListener("click", casaVitini.componentes.cambiarVista)
                    contenedorBotonSeccionCamas.appendChild(botonAnadirCamas)

                    contenedorCamas.appendChild(contenedorBotonSeccionCamas)

                    const contenedorCamasExistentes = document.createElement("div")
                    contenedorCamasExistentes.classList.add("confAlojamiento_entidades_contenedorEntidades")

                    if (camas.length === 0) {
                        const infoNoApartamentoUI = document.createElement("div")
                        infoNoApartamentoUI.classList.add("confAlojamiento_entidades_carteInfo")
                        infoNoApartamentoUI.innerText = "No hay ninguna habitacion construida"
                        contenedorCamasExistentes.appendChild(infoNoApartamentoUI)
                    }
                    if (camas.length > 0) {
                        camas.map((detallesCama) => {
                            const camaIDV = detallesCama.cama
                            const camaUI = detallesCama.camaUI

                            const contenedorDetalleCama = document.createElement("a")
                            contenedorDetalleCama.classList.add("confAlojamiento_entidades_contenedorDetalles")
                            contenedorDetalleCama.setAttribute("camaIDV", camaIDV)
                            contenedorDetalleCama.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/cama:" + camaIDV)
                            contenedorDetalleCama.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/cama:" + camaIDV)
                            contenedorDetalleCama.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)

                            const tituloCama = document.createElement("div")
                            tituloCama.classList.add("confAlojamiento_entidades_titulo")
                            tituloCama.classList.add("negrita")
                            tituloCama.innerText = camaUI
                            contenedorDetalleCama.appendChild(tituloCama)

                            const tituloCamaIDV = document.createElement("div")
                            tituloCamaIDV.classList.add("confAlojamiento_entidades_tituloIDV")
                            tituloCamaIDV.innerText = camaIDV
                            contenedorDetalleCama.appendChild(tituloCamaIDV)

                            contenedorCamasExistentes.appendChild(contenedorDetalleCama)

                        })
                        contenedorCamas.appendChild(contenedorCamasExistentes)
                    }
                    contenedorGlobal.appendChild(contenedorCamas)

                    espacioConfiguracionDelAlojamiento.appendChild(contenedorGlobal)
                }

            },
            traductorCambioVista: (entidad) => {
                entidad.preventDefault()
                entidad.stopPropagation()
                const vista = entidad.target.closest("[vista]").getAttribute("vista")
                const entrada = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                return casaVitini.componentes.controladorVista(entrada)
            },
            crearEntidad: {
                arranque: () => {
                    document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

                    const urlRaw = window.location.pathname;
                    let url = urlRaw.toLowerCase()
                    url = url.split("/")
                    url = url.filter((url) => url)
                    delete url[0]
                    delete url[1]
                    delete url[2]
                    delete url[3]


                    url = url.filter((url) => url)


                    const entradaTipoEntidad = url[0].split(":")


                    if (entradaTipoEntidad[0] === "tipo") {
                        const tipoEntidad = entradaTipoEntidad[1]
                        casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.portadaUI(tipoEntidad)
                    } else {
                        // Carter de informacion dicieno que si no se defino un tipo de entidad entonces no se muestra nada
                    }



                },
                portadaUI: async (entidad) => {

                    const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                    const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                    const selectorTitulo = document.querySelector("[componente=titulo]")

                    if (entidad === "apartamento") {
                        selectorTitulo.innerText = "Crear un nuevo apartamento como entidad"
                        // Los apartamento nuevo como entidad se insertan con el estao no disponible
                        const contenedorEntidad = document.createElement("div")
                        contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                        contenedorEntidad.setAttribute("tipoEntidad", "apartamento")

                        const bloqueTituloApartamento = document.createElement("div")
                        bloqueTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoTituloApartamento = document.createElement("div")
                        infoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoTituloApartamento.innerText = "Escriba el nombre del apartamento, el nombre debe de ser unico, no puedne existir dos apartamentos con el mismo nombre"
                        bloqueTituloApartamento.appendChild(infoTituloApartamento)

                        const campoTituloApartamento = document.createElement("input")
                        campoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoTituloApartamento.setAttribute("campo", "apartamentoUI")
                        campoTituloApartamento.placeholder = "Nombre del apartamento"
                        bloqueTituloApartamento.appendChild(campoTituloApartamento)

                        contenedorEntidad.appendChild(bloqueTituloApartamento)


                        const bloqueApartamentoIDV = document.createElement("div")
                        bloqueApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoApartamentoIDV = document.createElement("div")
                        infoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoApartamentoIDV.innerText = "Escriba un identificador visual para el apartamento, este solo puede estar compuesto por minúsculas y numeros nada mas ni si quiera espacios o caracteres de puntuacion. Si quiere puede dejar en blanco este campo y el sistema lo rellenara con  un identificador visual automaticamente. Pero es recomendable que lo haga usted y sigua un patron sencillo para poder identificar visualmente el apartmento y si por alguna situacion no se pudiera acceder al identificador de interfaz de usuario."
                        bloqueApartamentoIDV.appendChild(infoApartamentoIDV)

                        const campoApartamentoIDV = document.createElement("input")
                        campoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoApartamentoIDV.setAttribute("campo", "apartamentoIDV")

                        campoApartamentoIDV.placeholder = "Identificador visual del apartamento (ApartamentoIDV)"
                        bloqueApartamentoIDV.appendChild(campoApartamentoIDV)

                        contenedorEntidad.appendChild(bloqueApartamentoIDV)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")

                        const botonCrearEntidad = document.createElement("div")
                        botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonCrearEntidad.innerText = "Crear nuevo apartamento como entidad"
                        botonCrearEntidad.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.crearEntidadTransactor)
                        contenedorBotones.appendChild(botonCrearEntidad)

                        contenedorEntidad.appendChild(contenedorBotones)

                        espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)

                    }

                    if (entidad === "habitacion") {
                        selectorTitulo.innerText = "Crear una nueva habitacion como entidad"
                        // Los apartamento nuevo como entidad se insertan con el estao no disponible
                        const contenedorEntidad = document.createElement("div")
                        contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                        contenedorEntidad.setAttribute("tipoEntidad", "habitacion")

                        const bloqueTituloHabitacion = document.createElement("div")
                        bloqueTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoTituloHabitacion = document.createElement("div")
                        infoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoTituloHabitacion.innerText = "Escriba el nombre de la nueva habitacíon. El nombre debe de ser único e irrepetible"
                        bloqueTituloHabitacion.appendChild(infoTituloHabitacion)

                        const campoTituloHabitacion = document.createElement("input")
                        campoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoTituloHabitacion.setAttribute("campo", "habitacionUI")
                        campoTituloHabitacion.placeholder = "Nombre del la habitacíon"
                        bloqueTituloHabitacion.appendChild(campoTituloHabitacion)

                        contenedorEntidad.appendChild(bloqueTituloHabitacion)


                        const bloqueHabitacionIDV = document.createElement("div")
                        bloqueHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoHabitacionIDV = document.createElement("div")
                        infoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoHabitacionIDV.innerText = "Escriba un identificador visual para la nueva habitacíon, este solo puede estar compuesto por minúsculas y numeros, nada mas ni si quiera espacios o caracteres de puntuacion. Si quiere puede dejar en blanco este campo y el sistema lo rellenara con identificador visual automaticamente. Pero es recomendable que lo haga ustes y sigua un patron sencillo para poder identificar visualmente el apartmento y por alguna situacion no se pudiera acceder al identificador de interfaz"
                        bloqueHabitacionIDV.appendChild(infoHabitacionIDV)

                        const campoHabitacionIDV = document.createElement("input")
                        campoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoHabitacionIDV.setAttribute("campo", "habitacionIDV")
                        campoHabitacionIDV.placeholder = "Identificador visual de la habitacíon (HabitacionIDV)"
                        bloqueHabitacionIDV.appendChild(campoHabitacionIDV)

                        contenedorEntidad.appendChild(bloqueHabitacionIDV)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")

                        const botonCrearEntidad = document.createElement("div")
                        botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonCrearEntidad.innerText = "Crear nueva habitacíon como entidad"
                        botonCrearEntidad.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.crearEntidadTransactor)
                        contenedorBotones.appendChild(botonCrearEntidad)

                        contenedorEntidad.appendChild(contenedorBotones)

                        espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)

                    }

                    if (entidad === "cama") {
                        selectorTitulo.innerText = "Crear una nueva cama como entidad"
                        // Los apartamento nuevo como entidad se insertan con el estao no disponible
                        const contenedorEntidad = document.createElement("div")
                        contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                        contenedorEntidad.setAttribute("tipoEntidad", "cama")


                        const bloqueTituloCama = document.createElement("div")
                        bloqueTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoTituloCama = document.createElement("div")
                        infoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoTituloCama.innerText = "Escriba el nombre de la nueva cama. El nombre debe de ser único e irrepetible"
                        bloqueTituloCama.appendChild(infoTituloCama)

                        const campoTituloCama = document.createElement("input")
                        campoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoTituloCama.setAttribute("campo", "camaUI")

                        campoTituloCama.placeholder = "Nombre del la cama"
                        bloqueTituloCama.appendChild(campoTituloCama)

                        contenedorEntidad.appendChild(bloqueTituloCama)


                        const bloqueCamaIDV = document.createElement("div")
                        bloqueCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoCamaIDV = document.createElement("div")
                        infoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoCamaIDV.innerText = "Escriba un identificador visual para la nueva cama, este solo puede estar compuesto por minúsculas y numeros, nada mas ni si quiera espacios o caracteres de puntuacion. Si quiere puede dejar en blanco este campo y el sistema lo rellenara con identificador visual automaticamente. Pero es recomendable que lo haga ustes y sigua un patron sencillo para poder identificar visualmente el apartmento y por alguna situacion no se pudiera acceder al identificador de interfaz"
                        bloqueCamaIDV.appendChild(infoCamaIDV)

                        const campoCamaIDV = document.createElement("input")
                        campoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoCamaIDV.placeholder = "Identificador visual de la cama (CamaIDV)"
                        campoCamaIDV.setAttribute("campo", "camaIDV")
                        bloqueCamaIDV.appendChild(campoCamaIDV)

                        contenedorEntidad.appendChild(bloqueCamaIDV)






                        const bloqueCapacidadPernoctativa = document.createElement("div")
                        bloqueCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoCaapacidadPernoctativa = document.createElement("div")
                        infoCaapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoCaapacidadPernoctativa.innerText = "Escriba la capacidad pernoctativa de la cama."
                        bloqueCapacidadPernoctativa.appendChild(infoCaapacidadPernoctativa)

                        const campoCapacidadPernoctativa = document.createElement("input")
                        campoCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoCapacidadPernoctativa.placeholder = "Escriba el numero de plazas de la cama, por ejemplo 2"
                        campoCapacidadPernoctativa.setAttribute("campo", "capacidad")
                        bloqueCapacidadPernoctativa.appendChild(campoCapacidadPernoctativa)

                        contenedorEntidad.appendChild(bloqueCapacidadPernoctativa)


                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")

                        const botonCrearEntidad = document.createElement("div")
                        botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonCrearEntidad.innerText = "Crear nueva cama como entidad"
                        botonCrearEntidad.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.crearEntidadTransactor)
                        contenedorBotones.appendChild(botonCrearEntidad)

                        contenedorEntidad.appendChild(contenedorBotones)

                        espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)

                    }










                },
                crearEntidadTransactor: async () => {
                    const transaccion = {
                        zona: "administracion/arquitectura/entidades/crearEntidadAlojamiento"
                    }
                    const selectorTipoEntidad = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                    transaccion.tipoEntidad = selectorTipoEntidad

                    const selectorCampos = [...document.querySelectorAll("[campo]")]
                    selectorCampos.map((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const datoCampo = campo.value
                        transaccion[nombreCampo] = datoCampo
                    })

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const nuevoUID = respuestaServidor?.nuevoUID
                        const vista = `/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/${selectorTipoEntidad}:${nuevoUID}`
                        const navegacion = {
                            "vista": vista,
                            "tipoOrigen": "menuNavegador"
                        }
                        return casaVitini.componentes.controladorVista(navegacion)
                    }
                }
            },
            editarEntidad: {
                arranque: () => {
                    document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';
                    const granuladorURL = casaVitini.componentes.granuladorURL()
                    const parametros = granuladorURL.parametros
                    return casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.portadaUI(Object.entries(parametros)[0])
                },
                portadaUI: async (entidadMatriz) => {

                    const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                    const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                    const selectorTitulo = document.querySelector("[componente=titulo]")

                    const tipoEntidad = entidadMatriz[0]
                    const entidadIDV = entidadMatriz[1]

                    let transaccion


                    if (tipoEntidad === "apartamento") {
                        if (!entidadIDV) {
                            // Se tiene que especificar que pasa si no se especificael identificado del apartmentoIDV
                        }
                        transaccion = {
                            zona: "administracion/arquitectura/entidades/detallesDeEntidadDeAlojamiento",
                            tipoEntidad: "apartamento",
                            entidadIDV: entidadIDV
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ningun apartamento como entidad con ese identificador",
                                descripcion: "No exita la entidad que buscas. Por favor revisa el identificador que soliticas por que este no existe. Quizas este identificador fue de una entidad de alojamiento que tuvistes en el pasado y que borrastes."
                            }
                            return casaVitini.componentes.mensajeSimple(info)
                        }

                        if (respuestaServidor?.ok) {


                            const apartamentoIDV = respuestaServidor?.ok[0].apartamento
                            const apartamentoUI = respuestaServidor?.ok[0].apartamentoUI
                            //const superficie = respuestaServidor?.ok[0].superficie
                            const caracteristicas = respuestaServidor.caracteristicas


                            selectorTitulo.innerText = "Editar apartamento como entidad"

                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                            contenedorEntidad.setAttribute("tipoEntidad", "apartamento")
                            contenedorEntidad.setAttribute("entidadIDV", apartamentoIDV)


                            const contenedorEntidadDatos = document.createElement("div")
                            contenedorEntidadDatos.classList.add("confAlojamiento_entidades_editarEntidad_contenedorEntidadDatos")
                            contenedorEntidadDatos.setAttribute("componente", "contenedorEntidadDatos")

                            const bloqueTituloApartamento = document.createElement("div")
                            bloqueTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                            const infoTituloApartamento = document.createElement("div")
                            infoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoTituloApartamento.innerText = "Nombre del apartamento"
                            bloqueTituloApartamento.appendChild(infoTituloApartamento)

                            const campoTituloApartamento = document.createElement("input")
                            campoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoTituloApartamento.placeholder = "Escriba un nombre para el apartamento"
                            campoTituloApartamento.setAttribute("valorInicial", apartamentoUI)
                            campoTituloApartamento.setAttribute("campo", "apartamentoUI")
                            campoTituloApartamento.value = apartamentoUI
                            bloqueTituloApartamento.appendChild(campoTituloApartamento)

                            contenedorEntidadDatos.appendChild(bloqueTituloApartamento)

                            const bloqueApartamentoIDV = document.createElement("div")
                            bloqueApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                            const infoApartamentoIDV = document.createElement("div")
                            infoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoApartamentoIDV.innerText = "Identificador visual del apartamento"
                            bloqueApartamentoIDV.appendChild(infoApartamentoIDV)

                            const campoApartamentoIDV = document.createElement("input")
                            campoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoApartamentoIDV.placeholder = "Identificador visual del apartamento (apartamentoIDV)"
                            campoApartamentoIDV.setAttribute("valorInicial", apartamentoIDV)
                            campoApartamentoIDV.setAttribute("componente", "entidadIDV")
                            campoApartamentoIDV.setAttribute("campo", "apartamentoIDV")
                            campoApartamentoIDV.value = apartamentoIDV
                            bloqueApartamentoIDV.appendChild(campoApartamentoIDV)

                            contenedorEntidadDatos.appendChild(bloqueApartamentoIDV)

                            const superBloqueCaracteristicas = document.createElement("div")
                            superBloqueCaracteristicas.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                            const infoSuperficie = document.createElement("div")
                            infoSuperficie.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoSuperficie.innerText = "Características del apartamento"
                            superBloqueCaracteristicas.appendChild(infoSuperficie)

                            const contenedorCaracteristicas = document.createElement("div")
                            contenedorCaracteristicas.classList.add("administracion_arquitectura_entidades_detallesEntidad_contenedorCaracteristicas")
                            contenedorCaracteristicas.setAttribute("contenedor", "caracteristicas")
                            superBloqueCaracteristicas.appendChild(contenedorCaracteristicas)


                            const caracteristicasUI = (nombreCaracteristica) => {

                                const nombreCaracteristica_ = nombreCaracteristica || ""

                                const caracteristicaFila = document.createElement("div")
                                caracteristicaFila.classList.add("administracion_arquitectura_entidades_detallesEntidad_filaCaracteristica")
                                caracteristicaFila.setAttribute("contenedor", "caracteristica")

                                const campoCaracteristica = document.createElement("input")
                                campoCaracteristica.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoCaracteristica.placeholder = "Escriba la superficie del apartamento"
                                campoCaracteristica.setAttribute("valorInicial", nombreCaracteristica_)
                                campoCaracteristica.placeholder = "Escriba la característica"
                                campoCaracteristica.setAttribute("campo", "caracteristica")
                                campoCaracteristica.value = nombreCaracteristica_ || ""
                                caracteristicaFila.appendChild(campoCaracteristica)

                                const botonBorrar = document.createElement("div")
                                botonBorrar.classList.add("administracion_arquitectura_entidades_detallesEntidad_botonBorrarFila")
                                botonBorrar.innerText = "Borrar"
                                botonBorrar.addEventListener("click", (e) => {
                                    e.target.closest("[contenedor=caracteristica]").remove()

                                })
                                caracteristicaFila.appendChild(botonBorrar)

                                return caracteristicaFila
                            }

                            for (const caracteristica of caracteristicas) {
                                const filaCaracteristicaUI = caracteristicasUI(caracteristica.caracteristica)
                                superBloqueCaracteristicas.appendChild(filaCaracteristicaUI)
                            }

                            const botonAnadirCaracteristica = document.createElement("div")
                            botonAnadirCaracteristica.classList.add("administracion_arquitectura_entidades_detallesEntidad_botonAnadir")
                            botonAnadirCaracteristica.innerText = "Añadir caracteristica"
                            botonAnadirCaracteristica.addEventListener("click", () => {

                                const selectorContenedorCaracteristicas = document.querySelector("[contenedor=caracteristicas]")
                                const filaCaracteristicaUI = caracteristicasUI()
                                selectorContenedorCaracteristicas.appendChild(filaCaracteristicaUI)

                            })
                            superBloqueCaracteristicas.appendChild(botonAnadirCaracteristica)
                            contenedorEntidadDatos.appendChild(superBloqueCaracteristicas)
                            contenedorEntidad.appendChild(contenedorEntidadDatos)

                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                            contenedorBotones.setAttribute("componente", "contenedorBotonEditar")

                            const botonCrearEntidad = document.createElement("div")
                            botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                            botonCrearEntidad.innerText = "Editar apartamento como entidad"
                            botonCrearEntidad.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("editar")
                            })
                            contenedorBotones.appendChild(botonCrearEntidad)
                            contenedorEntidad.appendChild(contenedorBotones)

                            const botonesOpcionesEdicion = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.botonesEdicion()
                            contenedorEntidad.appendChild(botonesOpcionesEdicion)

                            espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                        }
                        return
                    }
                    if (tipoEntidad === "habitacion") {


                        if (!entidadIDV) {
                            // Se tiene que especificar que pasa si no se especificael identificado del apartmentoIDV
                        }

                        transaccion = {
                            zona: "administracion/arquitectura/entidades/detallesDeEntidadDeAlojamiento",
                            tipoEntidad: "habitacion",
                            entidadIDV: entidadIDV
                        }

                        respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ninguna habitación como entidad con ese identificador",
                                descripcion: "No exita la entidad que buscas. Por favor revisa el identificador que soliticas por que este no existe. Quizas este identificador fue de una entidad de alojamiento que tuvistes en el pasado y que borrastes."
                            }
                            return casaVitini.componentes.mensajeSimple(info)
                        }

                        if (respuestaServidor?.ok) {


                            const habitacionIDV = respuestaServidor?.ok[0].habitacion
                            const habitacionUI = respuestaServidor?.ok[0].habitacionUI


                            selectorTitulo.innerText = "Editar habitacíon como entidad"

                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                            contenedorEntidad.setAttribute("tipoEntidad", "habitacion")
                            contenedorEntidad.setAttribute("entidadIDV", habitacionIDV)


                            const contenedorEntidadDatos = document.createElement("div")
                            contenedorEntidadDatos.classList.add("confAlojamiento_entidades_editarEntidad_contenedorEntidadDatos")
                            contenedorEntidadDatos.setAttribute("componente", "contenedorEntidadDatos")

                            const bloqueTituloHabitacion = document.createElement("div")
                            bloqueTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                            const infoTituloHabitacion = document.createElement("div")
                            infoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoTituloHabitacion.innerText = "Nombre de la habitacíon"
                            bloqueTituloHabitacion.appendChild(infoTituloHabitacion)

                            const campoTituloHabitacion = document.createElement("input")
                            campoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoTituloHabitacion.placeholder = "Escriba un nombre para la habitacíon"
                            campoTituloHabitacion.setAttribute("valorInicial", habitacionUI)
                            campoTituloHabitacion.setAttribute("campo", "habitacionUI")
                            campoTituloHabitacion.value = habitacionUI
                            bloqueTituloHabitacion.appendChild(campoTituloHabitacion)

                            contenedorEntidadDatos.appendChild(bloqueTituloHabitacion)

                            const bloqueHabitacionIDV = document.createElement("div")
                            bloqueHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                            const infoHabitacionIDV = document.createElement("div")
                            infoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoHabitacionIDV.innerText = "Identificador visual de la nueva habitacíon"
                            bloqueHabitacionIDV.appendChild(infoHabitacionIDV)

                            const campoHabitacionIDV = document.createElement("input")
                            campoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoHabitacionIDV.placeholder = "Identificador visual de la habitacíon (HabitacionIDV)"
                            campoHabitacionIDV.setAttribute("valorInicial", habitacionIDV)
                            campoHabitacionIDV.setAttribute("componente", "entidadIDV")

                            campoHabitacionIDV.setAttribute("campo", "habitacionIDV")
                            campoHabitacionIDV.value = habitacionIDV
                            bloqueHabitacionIDV.appendChild(campoHabitacionIDV)

                            contenedorEntidadDatos.appendChild(bloqueHabitacionIDV)
                            contenedorEntidad.appendChild(contenedorEntidadDatos)

                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                            contenedorBotones.setAttribute("componente", "contenedorBotonEditar")

                            const botonCrearEntidad = document.createElement("div")
                            botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                            botonCrearEntidad.innerText = "Editar habitacíon como entidad"
                            botonCrearEntidad.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("editar")
                            })
                            contenedorBotones.appendChild(botonCrearEntidad)
                            contenedorEntidad.appendChild(contenedorBotones)

                            const botonesOpcionesEdicion = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.botonesEdicion()
                            contenedorEntidad.appendChild(botonesOpcionesEdicion)

                            espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                        }
                        return
                    }
                    if (tipoEntidad === "cama") {

                        if (!entidadIDV) {
                            // Se tiene que especificar que pasa si no se especificael identificado del apartmentoIDV
                        }
                        transaccion = {
                            zona: "administracion/arquitectura/entidades/detallesDeEntidadDeAlojamiento",
                            tipoEntidad: "cama",
                            entidadIDV: entidadIDV
                        }
                        respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ninguna cama como entidad con ese identificador",
                                descripcion: "No exita la entidad que buscas. Por favor revisa el identificador que soliticas por que este no existe. Quizas este identificador fue de una entidad de alojamiento que tuvistes en el pasado y que borrastes."
                            }
                            return casaVitini.componentes.mensajeSimple(info)
                        }

                        if (respuestaServidor?.ok) {


                            const camaIDV = respuestaServidor?.ok[0].cama
                            const camaUI = respuestaServidor?.ok[0].camaUI
                            const capacidad = respuestaServidor?.ok[0].capacidad
                            /// Atencion los IDV deben de ser minuscuasl todos!!!!
                            selectorTitulo.innerText = "Editar habitacíon como entidad"

                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                            contenedorEntidad.setAttribute("tipoEntidad", "cama")
                            contenedorEntidad.setAttribute("entidadIDV", camaIDV)


                            const contenedorEntidadDatos = document.createElement("div")
                            contenedorEntidadDatos.classList.add("confAlojamiento_entidades_editarEntidad_contenedorEntidadDatos")
                            contenedorEntidadDatos.setAttribute("componente", "contenedorEntidadDatos")

                            const bloqueTituloCama = document.createElement("div")
                            bloqueTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                            const infoTituloCama = document.createElement("div")
                            infoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoTituloCama.innerText = "Nombre de la cama"
                            bloqueTituloCama.appendChild(infoTituloCama)

                            const campoTituloCama = document.createElement("input")
                            campoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoTituloCama.placeholder = "Escriba un nombre para la cama"
                            campoTituloCama.setAttribute("valorInicial", camaUI)
                            campoTituloCama.setAttribute("campo", "camaUI")
                            campoTituloCama.value = camaUI
                            bloqueTituloCama.appendChild(campoTituloCama)

                            contenedorEntidadDatos.appendChild(bloqueTituloCama)

                            const bloqueCamaIDV = document.createElement("div")
                            bloqueCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                            const infoCamaIDV = document.createElement("div")
                            infoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoCamaIDV.innerText = "Identificador visual de la nueva cama"
                            bloqueCamaIDV.appendChild(infoCamaIDV)

                            const campoCamaIDV = document.createElement("input")
                            campoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoCamaIDV.placeholder = "Identificador visual de la cama (camaIDV)"
                            campoCamaIDV.setAttribute("valorInicial", camaIDV)
                            campoCamaIDV.setAttribute("componente", "entidadIDV")
                            campoCamaIDV.setAttribute("campo", "camaIDV")
                            campoCamaIDV.value = camaIDV
                            bloqueCamaIDV.appendChild(campoCamaIDV)

                            contenedorEntidadDatos.appendChild(bloqueCamaIDV)
                            contenedorEntidad.appendChild(contenedorEntidadDatos)






                            const bloqueCapacidadPernoctativa = document.createElement("div")
                            bloqueCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                            const infoCapacidadPernoctativa = document.createElement("div")
                            infoCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoCapacidadPernoctativa.innerText = "Capacidad pernoctativa de la cama"
                            bloqueCapacidadPernoctativa.appendChild(infoCapacidadPernoctativa)

                            const campoCapacidadPernoctativa = document.createElement("input")
                            campoCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoCapacidadPernoctativa.placeholder = "Escriba la capaciad pernoctativa de la cama por ejemplo 2"
                            campoCapacidadPernoctativa.setAttribute("valorInicial", capacidad)
                            campoCapacidadPernoctativa.setAttribute("campo", "capacidad")
                            campoCapacidadPernoctativa.value = capacidad
                            bloqueCapacidadPernoctativa.appendChild(campoCapacidadPernoctativa)

                            contenedorEntidadDatos.appendChild(bloqueCapacidadPernoctativa)
                            contenedorEntidad.appendChild(contenedorEntidadDatos)










                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                            contenedorBotones.setAttribute("componente", "contenedorBotonEditar")

                            const botonCrearEntidad = document.createElement("div")
                            botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                            botonCrearEntidad.innerText = "Editar cama como entidad"
                            botonCrearEntidad.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("editar")
                            })
                            contenedorBotones.appendChild(botonCrearEntidad)
                            contenedorEntidad.appendChild(contenedorBotones)

                            const botonesOpcionesEdicion = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.botonesEdicion()
                            contenedorEntidad.appendChild(botonesOpcionesEdicion)

                            espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                        }
                        return
                    }

                    const info = {
                        titulo: "No existe ninguna habitación como entidad con ese identificador",
                        descripcion: "No exita la entidad que buscas. Por favor revisa el identificador que soliticas por que este no existe. Quizas este identificador fue de una entidad de alojamiento que tuvistes en el pasado y que borrastes."
                    }
                    return casaVitini.componentes.mensajeSimple(info)


                    return

                    if (entidad === "apartamento") {
                        selectorTitulo.innerText = "Crear un nuevo apartamento como entidad"
                        // Los apartamento nuevo como entidad se insertan con el estao no disponible
                        const contenedorEntidad = document.createElement("div")
                        contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")

                        const bloqueTituloApartamento = document.createElement("div")
                        bloqueTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoTituloApartamento = document.createElement("div")
                        infoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoTituloApartamento.innerText = "Escriba el nombre del apartamento, el nombre debe de ser unico, no puedne existir dos apartamentos con el mismo nombre"
                        bloqueTituloApartamento.appendChild(infoTituloApartamento)

                        const campoTituloApartamento = document.createElement("input")
                        campoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoTituloApartamento.placeholder = "Nombre del apartamento"
                        bloqueTituloApartamento.appendChild(campoTituloApartamento)

                        contenedorEntidad.appendChild(bloqueTituloApartamento)


                        const bloqueApartamentoIDV = document.createElement("div")
                        bloqueApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoApartamentoIDV = document.createElement("div")
                        infoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoApartamentoIDV.innerText = "Escriba un identificador visual para el apartmento, este solo puede estar compuesto por minúsculas y numeros. Nada mas ni si quiera espacios o caracteres de puntuacion, si quiere puede dejar en blanco este campo y el sistema lo rellenara con identificador visual automaticamente. Pero es recomendable que lo haga ustes y sigua un patron sencillo para poder identificar visualmente el apartmento y por alguna situacion no se pudiera acceder al identificador de interfaz"
                        bloqueApartamentoIDV.appendChild(infoApartamentoIDV)

                        const campoApartamentoIDV = document.createElement("input")
                        campoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoApartamentoIDV.placeholder = "Identificador visual del apartamento (ApartamentoIDV)"
                        bloqueApartamentoIDV.appendChild(campoApartamentoIDV)

                        contenedorEntidad.appendChild(bloqueApartamentoIDV)

                        const bloqueApartamentoSuperficie = document.createElement("div")
                        bloqueApartamentoSuperficie.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoApartamentoSuperficie = document.createElement("div")
                        infoApartamentoSuperficie.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoApartamentoSuperficie.innerText = "Escriba la superficie que tiene este apartamento en metro cuadrados, por ejemplo 50m2"
                        bloqueApartamentoSuperficie.appendChild(infoApartamentoSuperficie)

                        const campoApartamentoSuperficie = document.createElement("input")
                        campoApartamentoSuperficie.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoApartamentoSuperficie.placeholder = "Escriba la superficie del apartamento por ejemplo 50m2"
                        bloqueApartamentoSuperficie.appendChild(campoApartamentoSuperficie)

                        contenedorEntidad.appendChild(bloqueApartamentoSuperficie)



                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")

                        const botonCrearEntidad = document.createElement("div")
                        botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonCrearEntidad.innerText = "Crear nuevo apartamento como entidad"
                        contenedorBotones.appendChild(botonCrearEntidad)

                        contenedorEntidad.appendChild(contenedorBotones)

                        espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)

                    }
                    if (entidad === "habitacion") {
                        selectorTitulo.innerText = "Crear una nueva habitacion como entidad"
                        // Los apartamento nuevo como entidad se insertan con el estao no disponible
                        const contenedorEntidad = document.createElement("div")
                        contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")

                        const bloqueTituloHabitacion = document.createElement("div")
                        bloqueTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoTituloHabitacion = document.createElement("div")
                        infoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoTituloHabitacion.innerText = "Escriba el nombre de la nueva habitacíon. El nombre debe de ser único e irrepetible"
                        bloqueTituloHabitacion.appendChild(infoTituloHabitacion)

                        const campoTituloHabitacion = document.createElement("input")
                        campoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoTituloHabitacion.placeholder = "Nombre del la habitacíon"
                        bloqueTituloHabitacion.appendChild(campoTituloHabitacion)

                        contenedorEntidad.appendChild(bloqueTituloHabitacion)


                        const bloqueHabitacionIDV = document.createElement("div")
                        bloqueHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoHabitacionIDV = document.createElement("div")
                        infoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoHabitacionIDV.innerText = "Escriba un identificador visual para la nueva habitacíon, este solo puede estar compuesto por minúsculas y numeros, nada mas ni si quiera espacios o caracteres de puntuacion. Si quiere puede dejar en blanco este campo y el sistema lo rellenara con identificador visual automaticamente. Pero es recomendable que lo haga ustes y sigua un patron sencillo para poder identificar visualmente el apartmento y por alguna situacion no se pudiera acceder al identificador de interfaz"
                        bloqueHabitacionIDV.appendChild(infoHabitacionIDV)

                        const campoHabitacionIDV = document.createElement("input")
                        campoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoHabitacionIDV.placeholder = "Identificador visual de la habitacíon (HabitacionIDV)"
                        bloqueHabitacionIDV.appendChild(campoHabitacionIDV)

                        contenedorEntidad.appendChild(bloqueHabitacionIDV)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")

                        const botonCrearEntidad = document.createElement("div")
                        botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonCrearEntidad.innerText = "Crear nueva habitacíon como entidad"
                        contenedorBotones.appendChild(botonCrearEntidad)

                        contenedorEntidad.appendChild(contenedorBotones)

                        espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)

                    }
                    if (entidad === "cama") {
                        selectorTitulo.innerText = "Crear una nueva cama como entidad"
                        // Los apartamento nuevo como entidad se insertan con el estao no disponible
                        const contenedorEntidad = document.createElement("div")
                        contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")

                        const bloqueTituloCama = document.createElement("div")
                        bloqueTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoTituloCama = document.createElement("div")
                        infoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoTituloCama.innerText = "Escriba el nombre de la nueva cama. El nombre debe de ser único e irrepetible"
                        bloqueTituloCama.appendChild(infoTituloCama)

                        const campoTituloCama = document.createElement("input")
                        campoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoTituloCama.placeholder = "Nombre del la cama"
                        bloqueTituloCama.appendChild(campoTituloCama)

                        contenedorEntidad.appendChild(bloqueTituloCama)


                        const bloqueCamaIDV = document.createElement("div")
                        bloqueCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")

                        const infoCamaIDV = document.createElement("div")
                        infoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                        infoCamaIDV.innerText = "Escriba un identificador visual para la nueva cama, este solo puede estar compuesto por minúsculas y numeros, nada mas ni si quiera espacios o caracteres de puntuacion. Si quiere puede dejar en blanco este campo y el sistema lo rellenara con identificador visual automaticamente. Pero es recomendable que lo haga ustes y sigua un patron sencillo para poder identificar visualmente el apartmento y por alguna situacion no se pudiera acceder al identificador de interfaz"
                        bloqueCamaIDV.appendChild(infoCamaIDV)

                        const campoCamaIDV = document.createElement("input")
                        campoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoCamaIDV.placeholder = "Identificador visual de la cama (CamaIDV)"
                        bloqueCamaIDV.appendChild(campoCamaIDV)

                        contenedorEntidad.appendChild(bloqueCamaIDV)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")

                        const botonCrearEntidad = document.createElement("div")
                        botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonCrearEntidad.innerText = "Crear nueva cama como entidad"
                        contenedorBotones.appendChild(botonCrearEntidad)

                        contenedorEntidad.appendChild(contenedorBotones)

                        espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)

                    }










                },
                botonesEdicion: () => {

                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                    contenedorBotones.setAttribute("componente", "contenedorOpcionesDeEdicion")
                    contenedorBotones.style.display = "none"

                    const botonGuardarCambios = document.createElement("div")
                    botonGuardarCambios.classList.add("confAlojamiento_entidades_createEntiad_boton")
                    botonGuardarCambios.innerText = "Guardar cambios"
                    botonGuardarCambios.addEventListener("click", () => {
                        casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.guardarCambios()
                    })
                    contenedorBotones.appendChild(botonGuardarCambios)


                    const botonEliminarEntidad = document.createElement("div")
                    botonEliminarEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                    botonEliminarEntidad.innerText = "Eliminar entidad"
                    botonEliminarEntidad.addEventListener("click", () => {
                        casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.eliminarEntidad.UI()
                    })
                    contenedorBotones.appendChild(botonEliminarEntidad)

                    const botonCancelarCambios = document.createElement("div")
                    botonCancelarCambios.classList.add("confAlojamiento_entidades_createEntiad_boton")
                    botonCancelarCambios.innerText = "Cancelar cambios"
                    botonCancelarCambios.addEventListener("click", () => {
                        casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("cancelar")
                    })
                    contenedorBotones.appendChild(botonCancelarCambios)

                    return contenedorBotones

                },
                controladorModoEditar: (modo) => {

                    if (modo !== "editar" && modo !== "cancelar" && modo !== "guardado") {
                        const error = "El compon1ente controladorModoEditar no comprende el parametro"
                        return casaVitini.ui.vistas.advertenciaInmersiva(error)
                    }

                    const selectorContenedorBotonEditar = document.querySelector("[componente=contenedorBotonEditar]")
                    const selectorContenedorOpcionesEdicion = document.querySelector("[componente=contenedorOpcionesDeEdicion]")
                    const selectorContenedorEntidadDatos = document.querySelector("[componente=contenedorEntidadDatos]")

                    if (modo === "editar") {
                        selectorContenedorBotonEditar.style.display = "none"
                        selectorContenedorOpcionesEdicion.style.display = "flex"
                        selectorContenedorEntidadDatos.style.pointerEvents = "all"
                    }

                    if (modo === "guardado") {
                        selectorContenedorBotonEditar.style.display = "flex"
                        selectorContenedorOpcionesEdicion.style.display = "none"
                        selectorContenedorEntidadDatos.style.pointerEvents = "none"
                    }

                    if (modo === "cancelar") {
                        selectorContenedorBotonEditar.style.display = "flex"
                        selectorContenedorOpcionesEdicion.style.display = "none"
                        selectorContenedorEntidadDatos.removeAttribute("style")
                        const selectorCampos = [...document.querySelectorAll("[campo]")]
                        selectorCampos.map((campo) => {

                            const valorInicial = campo.getAttribute("valorInicial")
                            if (valorInicial) {
                                campo.value = valorInicial

                            } else {
                                campo.parentElement.remove()
                            }

                        })
                    }

                },
                guardarCambios: async () => {
                    const metadatos = {
                        zona: "administracion/arquitectura/entidades/modificarEntidadAlojamiento"
                    }
                    const selectorTipoEntidada = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                    const entidadIDV = document.querySelector("[entidadIDV]").getAttribute("entidadIDV")
                    metadatos["tipoEntidad"] = selectorTipoEntidada
                    metadatos["entidadIDV"] = entidadIDV
                    const selectorCampos = [...document.querySelectorAll("[campo]")]
                    selectorCampos.map((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const datoCampo = campo.value
                        metadatos[nombreCampo] = datoCampo
                    })
                    const caracteristicas = []
                    const selectorCaracteristicas = document.querySelectorAll("[campo=caracteristica]")
                    selectorCaracteristicas.forEach((caracteristica) => {

                        const valorInicial = caracteristica.getAttribute("valorInicial") ?? null;
                        const valorActual = caracteristica.value.trim()

                        if (!valorInicial && valorActual.length === 0) {


                            caracteristica.parentElement.remove()
                        } else {
                            caracteristicas.push(caracteristica.value)
                        }

                    })
                    metadatos.caracteristicas = caracteristicas

                    const respuestaServidor = await casaVitini.componentes.servidor(metadatos)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {


                        const selectorComponenteEntidadIDV = document.querySelector("[componente=entidadIDV]").value
                        document.querySelector("[entidadIDV]").setAttribute("entidadIDV", selectorComponenteEntidadIDV)

                        const selectorCampos = [...document.querySelectorAll("[campo]")]
                        selectorCampos.map((campo) => {
                            const datoCampo = campo.value
                            campo.setAttribute("valorInicial", datoCampo)
                        })
                        // Se tiene que volver a recoger el entidadIDV para que ahora se recoga actualizado del campo modificado
                        const entidadIDV = document.querySelector("[entidadIDV]").getAttribute("entidadIDV")
                        const urlVista = "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/" + selectorTipoEntidada + ":" + entidadIDV;
                        const titulo = 'Casa Vitini';
                        const estado = {
                            "zona": urlVista,
                            "estadoInternoZona": "estado",
                            "tipoCambio": "total"
                        }
                        window.history.replaceState(estado, titulo, urlVista);


                        casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("guardado")



                    }

                },
                eliminarEntidad: {
                    "UI": async () => {

                        const tipoEntidad = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")

                        let entidadUI
                        let textoDescriptivo
                        let tituloAdvertencia
                        if (tipoEntidad === "apartamento") {
                            entidadUI = document.querySelector("[campo=apartamentoUI]").getAttribute("valorInicial")
                            tituloAdvertencia = "Confirmar eliminar el apartamento como entidad"
                            textoDescriptivo = "Vas a eliminar este apartmento como entidad. Esto implica eliminar el apartamento como entidad, el perfil de precio del apartamento, los comportamientos de precios y los bloqueos asociados a este apartamento. Sus implicaciones son inmediatas. ¿Quieres confirmar la eliminacion de este apartamento como entidad?"
                        }

                        if (tipoEntidad === "habitacion") {
                            entidadUI = document.querySelector("[campo=habitacionUI]").getAttribute("valorInicial")
                            tituloAdvertencia = "Confirmar eliminar la habitacion como entidad"
                            textoDescriptivo = "Vas a eliminar esta habitacion como entidad. Esto implica eliminar la habitacion como entidad y su existencia en las configuraciones de alojamiento. Esto implica que los apartamento que contenian esta habitacion dejaran de mostrarla por su inexistencia. Sus implicaciones son inmediatas. ¿Quieres confirmar la eliminacion de esta habitacion como entidad?"
                        }

                        if (tipoEntidad === "cama") {
                            entidadUI = document.querySelector("[campo=camaUI]").getAttribute("valorInicial")
                            tituloAdvertencia = "Confirmar eliminar la cama como entidad"
                            textoDescriptivo = "Vas a eliminar esta cama como entidad. Esto implica eliminar la cama como entidad y su existencia en las configuraciones de alojamiento. Esto implica que las habitaciones que contenian esta cama dejaran de mostrarla por su inexistencia. Sus implicaciones son inmediatas. ¿Quieres confirmar la eliminacion de esta cama como entidad?"
                        }


                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = tituloAdvertencia
                        contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                        const bloqueBloqueoApartamentos = document.createElement("div")
                        bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                        const tituloBloquoApartamentos = document.createElement("div")
                        tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        tituloBloquoApartamentos.innerText = textoDescriptivo

                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                        contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.innerText = "Confirmar y eliminar la entidad"
                        botonCancelar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.eliminarEntidad.confirmar)
                        bloqueBotones.appendChild(botonCancelar)

                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                        botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion de la entidad"
                        botonCancelarProcesoCancelacion.addEventListener("click", () => {
                            let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        })
                        bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                        contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                        document.body.appendChild(advertenciaInmersivaIU)
                    },
                    confirmar: async () => {
                        const tipoEntidad = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                        const entidadIDV = document.querySelector("[entidadIDV]").getAttribute("entidadIDV")
                        const transaccion = {
                            zona: "administracion/arquitectura/entidades/eliminarEntidadAlojamiento",
                            "tipoEntidad": tipoEntidad,
                            "entidadIDV": entidadIDV
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.ok) {
                            const vista = `/administracion/arquitectura_del_alojamiento/entidades`
                            const navegacion = {
                                "vista": vista,
                                "tipoOrigen": "menuNavegador"
                            }
                            return casaVitini.componentes.controladorVista(navegacion)

                        }

                    }
                }

            }
        },
        configuraciones: {
            arranque: async () => {
                document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

                const urlRaw = window.location.pathname;
                let url = urlRaw.toLowerCase()
                url = url.split("/")
                url = url.filter((url) => url)
                delete url[0]
                delete url[1]
                delete url[2]

                url = url.filter((url) => url)
                if (url.length === 0) {
                    casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.portadaUI()
                }
                if (url.length === 1) {

                    const apartamentoIDV = url
                    casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.portadaUI(apartamentoIDV)
                }
                if (url.length === 2) {
                    // casaVitini.administracion.configuracion_de_alojamiento.detallesDelBloqueo.UI(url)
                }
            },
            portadaUI: async () => {
                const selectorEspacioConfiguracionDelALojamiento = document.querySelector(" [componente=espacioConfiguracionDelAlojamiento]")


                const espacioBotonesGlobales = document.createElement("div")
                espacioBotonesGlobales.classList.add("espacioBotonesGlobales")
                espacioBotonesGlobales.setAttribute("componente", "espacioBotonesGlobales")

                const botonCrearConfiguracion = document.createElement("a")
                botonCrearConfiguracion.classList.add("arquitecturaConfApartamento_portada_boton")
                botonCrearConfiguracion.innerText = "Crear nueva configuracion de alojamiento"
                botonCrearConfiguracion.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones/crear")
                botonCrearConfiguracion.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones/crear")
                botonCrearConfiguracion.addEventListener("click", casaVitini.componentes.cambiarVista)

                espacioBotonesGlobales.appendChild(botonCrearConfiguracion)
                selectorEspacioConfiguracionDelALojamiento.appendChild(espacioBotonesGlobales)


                const contenedorConfiguracionesPortada = document.createElement("div")
                contenedorConfiguracionesPortada.classList.add("adminsitracion_arquitectura_configruaciones_portada_contenedorCongfiguraciones")

                const transaccion = {
                    zona: "administracion/arquitectura/configuraciones/listarConfiguracionApartamentos"
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const configuracionesApartamentos = respuestaServidor?.ok

                    if (configuracionesApartamentos.length === 0) {

                        /// CARTEL de no existen configuraciones
                    }

                    if (configuracionesApartamentos.length > 0) {


                        for (const detalleApartamento of configuracionesApartamentos) {

                            const apartamentoIDV = detalleApartamento.apartamentoIDV
                            const apartamentoUI = detalleApartamento.apartamentoUI
                            const estadoConfiguracion = detalleApartamento.estadoConfiguracion

                            let estadoConfiguracionUI
                            if (estadoConfiguracion === "disponible") {
                                estadoConfiguracionUI = "Disponible"
                            }

                            if (estadoConfiguracion === "nodisponible") {
                                estadoConfiguracionUI = "No disponible"
                            }

                            const contenedorApartamento = document.createElement("a")
                            contenedorApartamento.classList.add("arquitecturaConfiguracionesAlojamiento_contenedorConfiguracion")
                            contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                            contenedorApartamento.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                            contenedorApartamento.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                            contenedorApartamento.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.traductorCambioVista)

                            const contenedorTitulo = document.createElement("div")
                            contenedorTitulo.classList.add("arquitecturaConfAlojamiento_configuracionesTitulo")
                            contenedorTitulo.classList.add("negrita")
                            contenedorTitulo.innerText = apartamentoUI
                            contenedorApartamento.appendChild(contenedorTitulo)

                            const contenedorExplicacion = document.createElement("div")
                            contenedorExplicacion.classList.add("arquitecturaConfAlojamiento_configuracionesTitulo")
                            contenedorExplicacion.innerText = estadoConfiguracionUI
                            contenedorApartamento.appendChild(contenedorExplicacion)

                            contenedorConfiguracionesPortada.appendChild(contenedorApartamento)




                        }


                        selectorEspacioConfiguracionDelALojamiento.appendChild(contenedorConfiguracionesPortada)



                    }



                    //selectorEspacioConfiguracionDelALojamiento.appendChild(espacioConfiguracionesAlojamientoUI)


                }








            },
            traductorCambioVista: (configuracion) => {
                configuracion.preventDefault()
                configuracion.stopPropagation()
                const vista = configuracion.target.closest("[vista]").getAttribute("vista")
                const entrada = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                return casaVitini.componentes.controladorVista(entrada)
            },
            detallesConfiguracion: {
                portadaUI: async (IDV) => {

                    const apartamentoIDV = IDV[0]
                    const selectorTitulo = document.querySelector(" [componente=titulo]")
                    selectorTitulo.innerText = "Configuración del apartamento"

                    const selectorEspacioConfiguracion = document.querySelector("[componente=espacioConfiguracionDelAlojamiento]")
                    const transaccion = {
                        zona: "administracion/arquitectura/configuraciones/detalleConfiguracionAlojamiento",
                        apartamentoIDV: apartamentoIDV
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        if (typeof respuestaServidor?.ok === "string") {
                            // Mensaje de no existir la configuracion
                        }

                        if (Array.isArray(respuestaServidor?.ok)) {

                            const habitacionesEncontradas = respuestaServidor?.ok
                            const apartamentoIDV = respuestaServidor?.apartamentoIDV
                            const apartamentoUI = respuestaServidor?.apartamentoUI
                            const estadoConfiguracion = respuestaServidor?.estadoConfiguracion

                            let estadoConfiguracionUI
                            if (estadoConfiguracion === "nodisponible") {
                                estadoConfiguracionUI = "No disponible"
                            }

                            if (estadoConfiguracion === "disponible") {
                                estadoConfiguracionUI = "Disponible"
                            }


                            const contenedorApartamento = document.createElement("div")
                            contenedorApartamento.classList.add("arquitecturaConfApartamento_contenedor")
                            contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)


                            const contenedorTituloYBoton = document.createElement("div")
                            contenedorTituloYBoton.classList.add("arquitecturaConfApartamento_contenedorTituloYBotones")

                            const tituloApartamento = document.createElement("div")
                            tituloApartamento.classList.add("arquitecturaConfApartamento_titulo")
                            tituloApartamento.classList.add("negrita")
                            tituloApartamento.innerText = apartamentoUI
                            contenedorTituloYBoton.appendChild(tituloApartamento)



                            const contenedorBotonesGlobalesApartamento = document.createElement("div")
                            contenedorBotonesGlobalesApartamento.classList.add("arquitecturaConfApartamento_contenedorBotonesGlobales")


                            const botonIrPerfilPrecio = document.createElement("a")
                            botonIrPerfilPrecio.classList.add("arquitecturaConfApartamento_boton")
                            botonIrPerfilPrecio.innerText = "Ir al perfil del precio"
                            botonIrPerfilPrecio.setAttribute("vista", "/administracion/precios/apartamentos:" + apartamentoIDV)
                            botonIrPerfilPrecio.setAttribute("href", "/administracion/precios/apartamentos:" + apartamentoIDV)
                            botonIrPerfilPrecio.addEventListener("click", casaVitini.componentes.cambiarVista)

                            contenedorBotonesGlobalesApartamento.appendChild(botonIrPerfilPrecio)





                            const botonAddHabitacion = document.createElement("div")
                            botonAddHabitacion.classList.add("arquitecturaConfApartamento_boton")
                            botonAddHabitacion.innerText = "Anadir habitacion"
                            botonAddHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addHabitacion.UI)

                            contenedorBotonesGlobalesApartamento.appendChild(botonAddHabitacion)
                            contenedorTituloYBoton.appendChild(contenedorBotonesGlobalesApartamento)


                            const botonEstadoApartamento = document.createElement("div")
                            botonEstadoApartamento.classList.add("arquitecturaConfApartamento_boton")
                            botonEstadoApartamento.setAttribute("estadoActual", estadoConfiguracion)
                            botonEstadoApartamento.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.actualizarEstadoConfiguracion.UI)

                            const tituloEstado = document.createElement("p")
                            tituloEstado.classList.add("arquitecturaConfApartamento_infoEstadoV")
                            tituloEstado.classList.add("negrita")
                            tituloEstado.innerText = "Estado"
                            // botonEstadoApartamento.appendChild(tituloEstado)

                            const infoEstado = document.createElement("p")
                            infoEstado.classList.add("arquitecturaConfApartamento_infoEstado")
                            infoEstado.classList.add("negrita")
                            infoEstado.setAttribute("componente", "estadoActualUI")
                            infoEstado.innerText = estadoConfiguracionUI

                            botonEstadoApartamento.appendChild(infoEstado)
                            contenedorBotonesGlobalesApartamento.appendChild(botonEstadoApartamento)






                            contenedorApartamento.appendChild(contenedorTituloYBoton)


                            const contenedorImg = document.createElement("div")
                            contenedorImg.classList.add("arquitecturaConfApartamento_contenedorImg")
                            contenedorImg.setAttribute("componente", "contenedorImagenConfiguracion")
                            contenedorApartamento.appendChild(contenedorImg)



                            const contenedorHabitaciones = document.createElement("div")
                            contenedorHabitaciones.classList.add("arquitecturaConfApartamento_contenedorHabitaciones")
                            contenedorHabitaciones.setAttribute("componente", "contenedorHabitaciones")

                            for (const detalleHabitacion of habitacionesEncontradas) {
                                const uidHabitacion = detalleHabitacion.uid
                                const habitacionIDV = detalleHabitacion.habitacionIDV
                                const habitacionUI = detalleHabitacion.habitacionUI
                                const camas = detalleHabitacion.camas

                                const metadatosHabitacion = {
                                    habitacionUI: habitacionUI,
                                    habitacionIDV: habitacionIDV,
                                    habitacionUID: uidHabitacion,
                                }
                                const contenedorHabitacionUI = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.habitacionUI(metadatosHabitacion)

                                const contenedorCamas = document.createElement("div")
                                contenedorCamas.classList.add("arquitecturaConfApartamento_contenedorCamas")


                                if (camas.length === 0) {
                                    const infoNoCamas = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.noCamaInfoUI()
                                    contenedorHabitacionUI.appendChild(infoNoCamas)

                                }

                                if (camas.length > 0) {
                                    for (const detallesCama of camas) {
                                        const camaUID = detallesCama.uid
                                        const camaIDV = detallesCama.camaIDV
                                        const camaUI = detallesCama.camaUI
                                        const capacidad = detallesCama.capacidad

                                        const metadatosCama = {
                                            camaUID: camaUID,
                                            camaIDV: camaIDV,
                                            camaUI: camaUI,
                                            capacidad: capacidad
                                        }

                                        const contenedorCama = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.camaUI(metadatosCama)
                                        contenedorHabitacionUI.appendChild(contenedorCama)
                                    }
                                }

                                //contenedorHabitacion.appendChild(contenedorCamas)
                                contenedorHabitaciones.appendChild(contenedorHabitacionUI)

                            }
                            contenedorApartamento.appendChild(contenedorHabitaciones)
                            selectorEspacioConfiguracion.appendChild(contenedorApartamento)

                            const contenedorBotonesGlobalesInferiores = document.createElement("div")
                            contenedorBotonesGlobalesInferiores.classList.add("arquitecturaConfApartamento_espacioEliminarConfiguracionApartamento")

                            const botonEliminarConfiguracion = document.createElement("div")
                            botonEliminarConfiguracion.classList.add("arquitecturaConfApartamento_eliminarConfiguracionApartamento")
                            botonEliminarConfiguracion.innerText = "Eliminar configuracion del apartamento"
                            botonEliminarConfiguracion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarConfiguracion.UI)


                            contenedorBotonesGlobalesInferiores.appendChild(botonEliminarConfiguracion)
                            const selectorEspacioGlobalConfiguracion = document.querySelector("[componente=espacioConfiguracionDelAlojamiento]")

                            selectorEspacioGlobalConfiguracion.appendChild(contenedorBotonesGlobalesInferiores)

                            casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.obtenerImgen(apartamentoIDV)


                        }



                    }

                },
                addHabitacion: {
                    UI: async (elementoBoton) => {


                        const selectorMenuRenderizado = document.querySelector("[menuIDV=addHabitacion]")
                        if (selectorMenuRenderizado) {
                            selectorMenuRenderizado.remove()
                            document.removeEventListener("click", casaVitini.componentes.ocultarMenusVolatiles)
                            return
                        }



                        const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                        const selectorContenedorApartmento = document.querySelector("[apartamentoIDV]")
                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/listarHabitacionesDisponbilesApartamentoConfiguracion",
                            apartamentoIDV: apartamentoIDV
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {

                            const habitacionesDisponbiles = respuestaServidor?.ok

                            const alturaDinamica = window.scrollY + elementoBoton.target.getBoundingClientRect().bottom + 4;
                            const horizontalDinamico = elementoBoton.target.getBoundingClientRect().left;


                            const posicionador = () => {
                                let posicionFinal
                                const anchoDinamicoBoton = elementoBoton.target.getBoundingClientRect().width;
                                const anchoDinamicoMenu = contenedorMenu.getBoundingClientRect().width;
                                const posicionHorizontalFinal = (anchoDinamicoBoton - anchoDinamicoMenu)


                                if (anchoDinamicoBoton < anchoDinamicoMenu) {
                                    posicionFinal = (horizontalDinamico - Math.abs(posicionHorizontalFinal))


                                } else {

                                    posicionFinal = (horizontalDinamico)
                                }
                                contenedorMenu.style.left = posicionFinal + "px"
                            }




                            const contenedorMenu = document.createElement("div")
                            contenedorMenu.classList.add("confApartamento_contenedorMenuAddApartamentos")
                            contenedorMenu.innerText = null
                            contenedorMenu.setAttribute("componente", "menuVolatil")
                            contenedorMenu.setAttribute("menuIDV", "addHabitacion")

                            contenedorMenu.innerText = "Cargando..."
                            //contenedorMenu.style.top = alturaDinamica + "px"
                            selectorContenedorApartmento.appendChild(contenedorMenu)


                            //   posicionador()





                            if (habitacionesDisponbiles.length === 0) {
                                const error = "Ya estan todas las habitaciones insertadas en esta configuracion de apartamento"
                                casaVitini.componentes.ocultarMenusVolatiles()
                                return casaVitini.ui.vistas.advertenciaInmersiva(error)

                            }

                            if (habitacionesDisponbiles.length > 0) {
                                contenedorMenu.innerText = null

                                for (const detallesHabitacion of habitacionesDisponbiles) {
                                    const habitacionIDV = detallesHabitacion.habitacionIDV
                                    const habitacionUI = detallesHabitacion.habitacionUI

                                    const tituloHabitacion = document.createElement("div")
                                    tituloHabitacion.classList.add("confApartamento_contenedorMenu_tituloApartamento")
                                    tituloHabitacion.setAttribute("habitacionIDV", habitacionIDV)
                                    tituloHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addHabitacion.transactor)
                                    tituloHabitacion.innerText = habitacionUI
                                    contenedorMenu.appendChild(tituloHabitacion)

                                }
                                //   posicionador()


                                document.addEventListener("click", casaVitini.componentes.ocultarMenusVolatiles)
                                window.addEventListener("resize", casaVitini.componentes.ocultarMenusVolatilesPorRedimension)




                            }





                        }





                    },
                    transactor: async (habitacion) => {
                        const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                        const habitacionIDV = habitacion.target.getAttribute("habitacionIDV")


                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/addHabitacionToConfiguracionApartamento",
                            apartamentoIDV: apartamentoIDV,
                            habitacionIDV: habitacionIDV
                        }

                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {

                            const metadatosHabitacion = {
                                habitacionUID: respuestaServidor?.habitacionUID,
                                habitacionIDV: respuestaServidor?.habitacionIDV,
                                habitacionUI: respuestaServidor?.habitacionUI
                            }
                            const contenedorHabitacion = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.habitacionUI(metadatosHabitacion)

                            const infoNoCamas = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.noCamaInfoUI()
                            contenedorHabitacion.appendChild(infoNoCamas)

                            const selectorContenedorHabitaciones = document.querySelector("[componente=contenedorHabitaciones]")
                            selectorContenedorHabitaciones.appendChild(contenedorHabitacion)

                        }






                    }
                },
                addCama: {
                    UI: async (elementoBoton) => {


                        const selectorHabitacion = elementoBoton.target.closest("[habitacionUID]")
                        const habitacionUID = selectorHabitacion.getAttribute("habitacionUID")
                        const selectorMenuRenderizado = document.querySelector(`[menuIDV=addCama][habitacionUID="${habitacionUID}"]`)
                        const selectorContenedorApartmento = document.querySelector("[apartamentoIDV]")

                        document.querySelector("[menuIDV=addHabitacion]")?.remove()


                        if (selectorMenuRenderizado) {
                            selectorMenuRenderizado.remove()
                            document.removeEventListener("click", casaVitini.componentes.ocultarMenusVolatiles)
                            return
                        }
                        const selectorMenusRenderizados = [...document.querySelectorAll("[menuIDV=addCama]")]
                        selectorMenusRenderizados.map((menu) => {
                            menu.remove()
                        })
                        document.removeEventListener("click", casaVitini.componentes.ocultarMenusVolatiles)

                        const selectorContenedorHabitaciones = document.querySelector("[habitacionUID]")
                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/listarCamasDisponbilesApartamentoConfiguracion",
                            habitacionUID: Number(habitacionUID)
                        }

                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {

                            const camasDisponibles = respuestaServidor?.ok

                            const alturaDinamica = window.scrollY + elementoBoton.target.getBoundingClientRect().bottom + 4;
                            const horizontalDinamico = elementoBoton.target.getBoundingClientRect().left;

                            const posicionador = () => {
                                let posicionFinalHorizontal
                                const anchoDinamicoBoton = elementoBoton.target.getBoundingClientRect().width;
                                const anchoDinamicoMenu = document.querySelector(`[menuIDV=addCama][habitacionUID="${habitacionUID}"]`).getBoundingClientRect().width;
                                const posicionHorizontalFinal = (anchoDinamicoBoton - anchoDinamicoMenu)

                                if (anchoDinamicoBoton < anchoDinamicoMenu) {
                                    posicionFinalHorizontal = (horizontalDinamico - Math.abs(posicionHorizontalFinal))
                                } else {
                                    posicionFinalHorizontal = (horizontalDinamico)
                                }
                                contenedorMenu.style.left = posicionFinalHorizontal + "px"
                            }

                            const contenedorMenu = document.createElement("div")
                            contenedorMenu.classList.add("confApartamento_contenedorMenuAddCama")
                            contenedorMenu.innerText = null
                            contenedorMenu.setAttribute("componente", "menuVolatil")
                            contenedorMenu.setAttribute("menuIDV", "addCama")
                            contenedorMenu.setAttribute("habitacionUID", habitacionUID)

                            contenedorMenu.innerText = "Cargando..."
                            contenedorMenu.style.top = alturaDinamica + "px"
                            document.body.appendChild(contenedorMenu)

                            posicionador()

                            if (camasDisponibles.length === 0) {
                                const error = "Ya estan todas las camas insertadas en esta habitacion"
                                casaVitini.componentes.ocultarMenusVolatiles()
                                return casaVitini.ui.vistas.advertenciaInmersiva(error)
                            }

                            if (camasDisponibles.length > 0) {
                                contenedorMenu.innerText = null

                                for (const detallesCama of camasDisponibles) {
                                    const camaIDV = detallesCama.camaIDV
                                    const camaUI = detallesCama.camaUI

                                    const tituloHabitacion = document.createElement("div")
                                    tituloHabitacion.classList.add("confApartamento_contenedorMenu_tituloApartamento")
                                    tituloHabitacion.setAttribute("camaIDV", camaIDV)
                                    tituloHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addCama.transactor)
                                    tituloHabitacion.innerText = camaUI
                                    contenedorMenu.appendChild(tituloHabitacion)

                                }
                                posicionador()

                                document.addEventListener("click", casaVitini.componentes.ocultarMenusVolatiles)
                                window.addEventListener("resize", casaVitini.componentes.ocultarMenusVolatilesPorRedimension)




                            }





                        }





                    },
                    transactor: async (habitacion) => {
                        const habitacionUID = habitacion.target.closest("[habitacionUID]").getAttribute("habitacionUID")
                        const camaIDV = habitacion.target.getAttribute("camaIDV")

                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/addCamaToConfiguracionApartamentoHabitacion",
                            camaIDV: camaIDV,
                            habitacionUID: Number(habitacionUID)
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            document.querySelector(`[habitacionUID="${habitacionUID}"] [componente=infoVolatilCamasHabitacion]`)?.remove()
                            const metadatos = {
                                camaUID: respuestaServidor?.nuevoUID,
                                camaIDV: respuestaServidor?.camaIDV,
                                camaUI: respuestaServidor?.camaUI,
                                capacidad: respuestaServidor?.capaciad

                            }
                            const componenteCama = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.camaUI(metadatos)
                            const selectorContenedorHabitacion = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                            selectorContenedorHabitacion.appendChild(componenteCama)
                        }






                    }
                },
                eliminarConfiguracion: {
                    UI: async () => {




                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = "Eliminar configuracion del apartamento"
                        contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                        const bloqueBloqueoApartamentos = document.createElement("div")
                        bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                        const tituloBloquoApartamentos = document.createElement("div")
                        tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        tituloBloquoApartamentos.innerText = "Confirma la eliminacíon de todo la configuracíon de apartamento. Esto implida la configuracion del apartamento, el perfil de precios y los bloqueos vigentes. Si este apartamento aparece en un comportamientos de precios, sera eliminado el apartamento del comportamiento de precios pero el resto del comportamiento seguira vigente a no ser que sea el unico apartamento en algun comportamiento de precios.Sus implicaciones seran inmediatas"

                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                        contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.innerText = "Confirmar y eliminar la configuracíon"
                        botonCancelar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarConfiguracion.confirmar)
                        bloqueBotones.appendChild(botonCancelar)

                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                        botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion de la configuracíon"
                        botonCancelarProcesoCancelacion.addEventListener("click", () => {
                            let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        })
                        bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                        contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                        document.body.appendChild(advertenciaInmersivaIU)
                    },
                    confirmar: async () => {
                        const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")

                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/eliminarConfiguracionDeAlojamiento",
                            "apartamentoIDV": apartamentoIDV
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.ok) {
                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            const navegacion = {
                                "vista": "/administracion/arquitectura_del_alojamiento/configuraciones",
                                "tipoOrigen": "menuNavegador"
                            }
                            return casaVitini.componentes.controladorVista(navegacion)

                        }

                    }
                },
                eliminarHabitacion: {
                    UI: async (habitacion) => {

                        const habitacionUID = habitacion.target.closest("[habitacionUID]").getAttribute("habitacionUID")



                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = "Eliminar habitacíon del apartamento"
                        contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                        const bloqueBloqueoApartamentos = document.createElement("div")
                        bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                        const tituloBloquoApartamentos = document.createElement("div")
                        tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        tituloBloquoApartamentos.innerText = "Confirma la eliminacíon de esta habitacíon. Si quieres eliminarla. Sus implicaciones seran inmediatas"

                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                        contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.innerText = "Confirmar y eliminar la habitacíon"
                        botonCancelar.setAttribute("habitacionParaEliminar", habitacionUID)
                        botonCancelar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarHabitacion.confirmar)
                        bloqueBotones.appendChild(botonCancelar)

                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                        botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion de la habitacíon"
                        botonCancelarProcesoCancelacion.addEventListener("click", () => {
                            let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        })
                        bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                        contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                        document.body.appendChild(advertenciaInmersivaIU)
                    },
                    confirmar: async (habitacionParaEliminar) => {
                        const habitacionUID = habitacionParaEliminar.target.getAttribute("habitacionParaEliminar")

                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/eliminarHabitacionDeConfiguracionDeAlojamiento",
                            "habitacionUID": Number(habitacionUID)
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.ok) {
                            document.querySelector(`[habitacionUID="${habitacionUID}"]`)?.remove()
                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        }

                    }
                },
                eliminarCama: {
                    UI: async (cama) => {

                        const camaUID = cama.target.closest("[camaUID]").getAttribute("camaUID")

                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = "Eliminar cama de la habitacíon"
                        contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                        const bloqueBloqueoApartamentos = document.createElement("div")
                        bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                        const tituloBloquoApartamentos = document.createElement("div")
                        tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        tituloBloquoApartamentos.innerText = "Confirma la eliminacíon de esta cama si quieres eliminarla. Sus implicaciones seran inmediatas"

                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                        contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.innerText = "Confirmar y eliminar la cama"
                        botonCancelar.setAttribute("camaParaEliminar", camaUID)
                        botonCancelar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarCama.confirmar)
                        bloqueBotones.appendChild(botonCancelar)

                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                        botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion de la cama"
                        botonCancelarProcesoCancelacion.addEventListener("click", () => {
                            let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        })
                        bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                        contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                        document.body.appendChild(advertenciaInmersivaIU)
                    },
                    confirmar: async (camaParaEliminar) => {
                        const camaUID = camaParaEliminar.target.getAttribute("camaParaEliminar")
                        const habitacionUID = document.querySelector(`[camaUID="${camaUID}"]`).closest("[habitacionUID]").getAttribute("habitacionUID")


                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/eliminarCamaDeConfiguracionDeAlojamiento",
                            "camaUID": Number(camaUID)
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.ok) {
                            document.querySelector(`[camaUID="${camaUID}"]`)?.remove()

                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })

                            const selectorCamasEnHabitacion = [...document.querySelectorAll(`[habitacionUID="${habitacionUID}"] [camaUID]`)]
                            if (selectorCamasEnHabitacion.length === 0) {

                                const selectorContenedorHabitacion = document.querySelector(`[habitacionUID="${habitacionUID}"]`)

                                const infoNoCamas = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.noCamaInfoUI()
                                selectorContenedorHabitacion.appendChild(infoNoCamas)
                            }

                        }

                    }
                },
                actualizarEstadoConfiguracion: {
                    UI: async () => {

                        const estadoActual = document.querySelector("[estadoActual]").getAttribute("estadoActual")

                        let tituloBoton
                        let valorBoton
                        if (estadoActual === "nodisponible") {
                            tituloBoton = "Cambiar estado a Disponible"
                            valorBoton = "disponible"
                        }

                        if (estadoActual === "disponible") {
                            tituloBoton = "Cambiar estado a No disponible"
                            valorBoton = "nodisponible"
                        }

                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.innerText = "Actualizar el estado de la configuracion"
                        contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                        const bloqueBloqueoApartamentos = document.createElement("div")
                        bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                        const tituloBloquoApartamentos = document.createElement("div")
                        tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        tituloBloquoApartamentos.innerText = "Selecione el nuevo estado de la configuracíon. Su aplicacíon sera inmediata. Es recomendable que cambie al estado disponible cuando se asegure de que tiene la configuracíon del apartmento correctamente configurada"

                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                        contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.innerText = tituloBoton
                        botonCancelar.setAttribute("nuevoEstado", valorBoton)
                        botonCancelar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.actualizarEstadoConfiguracion.transactor)
                        bloqueBotones.appendChild(botonCancelar)

                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                        botonCancelarProcesoCancelacion.innerText = "Cancelar el cambio de estado"
                        botonCancelarProcesoCancelacion.addEventListener("click", () => {
                            let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        })
                        bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                        contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                        document.body.appendChild(advertenciaInmersivaIU)
                    },
                    transactor: async (nuevoEstado) => {
                        const nuevoEstado_ = nuevoEstado.target.getAttribute("nuevoEstado")
                        const apartamentoIDV = document.querySelector(`[apartamentoIDV]`).getAttribute("apartamentoIDV")

                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/cambiarEstadoConfiguracionAlojamiento",
                            "apartamentoIDV": apartamentoIDV,
                            "nuevoEstado": nuevoEstado_
                        }
                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.ok) {
                            const selectorEstadoActualIDV = document.querySelector("[estadoActual]")
                            selectorEstadoActualIDV.setAttribute("estadoActual", nuevoEstado_)



                            let estadoConfiguracionUI
                            if (nuevoEstado_ === "nodisponible") {
                                estadoConfiguracionUI = "No disponible"
                            }

                            if (nuevoEstado_ === "disponible") {
                                estadoConfiguracionUI = "Disponible"
                            }

                            const selectorEstadoActualUI = document.querySelector("[componente=estadoActualUI]")
                            selectorEstadoActualUI.innerText = estadoConfiguracionUI


                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })


                        }

                    }
                },
                gestionImagen: {
                    subirImagen: () => {
                        const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                        const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                        const selectorEspacio = document.querySelector("[componente=espacioConfiguracionDelAlojamiento]")
                        const campoEntrada = document.createElement("input")
                        campoEntrada.id = "campoEntrada"
                        campoEntrada.type = "file"
                        campoEntrada.style.display = "none"
                        campoEntrada.addEventListener('change', (event) => {
                            const archivoSeleccionado = event.target.files[0];
                            if (archivoSeleccionado) {

                                contenedorImagen.innerHTML = null
                                const iconoProceso = casaVitini.componentes.iconoProceso()
                                contenedorImagen.appendChild(iconoProceso)
                                const iconoProcesoRenderizado = document.querySelector("[componente=iconoProceso]")

                                const lector = new FileReader();
                                lector.onload = async (eventoCarga) => {
                                    const contenidoBuffer = eventoCarga.target.result;

                                    // Convierte el contenido del buffer a una cadena base64
                                    const contenidoBase64 = btoa(new Uint8Array(contenidoBuffer).reduce((datos, byte) => datos + String.fromCharCode(byte), ''));

                                    // Crea el objeto JSON con el contenido de la imagen
                                    const transaccion = {
                                        zona: "administracion/arquitectura/configuraciones/gestionImagenConfiguracionApartamento",
                                        apartamentoIDV: apartamentoIDV,
                                        contenidoArchivo: contenidoBase64
                                    };
                                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                                    if (respuestaServidor?.error) {
                                        iconoProcesoRenderizado.remove()
                                        document.getElementById("campoEntrada").remove()
                                        casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                                        return await casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.obtenerImgen()


                                    }
                                    if (respuestaServidor?.ok) {
                                        iconoProcesoRenderizado.remove()
                                        contenedorImagen.style.backgroundImage = `url(data:image/png;base64,${contenidoBase64})`;
                                        document.getElementById("campoEntrada").remove()

                                        casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.opcionesImagen()

                                    }





                                    // Aquí puedes realizar acciones con el archivo seleccionado, como subirlo a tu servidor
                                    //  
                                }
                                lector.readAsArrayBuffer(archivoSeleccionado);

                            };

                        })
                        const selectorCampoRederizado = document.getElementById("campoEntrada")
                        if (!selectorCampoRederizado) {
                            selectorEspacio.appendChild(campoEntrada)

                        }
                        document.getElementById("campoEntrada").click()








                    },
                    obtenerImgen: async (IDV) => {
                        const apartamentoIDV = IDV || document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                        const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                        contenedorImagen.innerHTML = null
                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/obtenerImagenConfiguracionAdministracion",
                            apartamentoIDV: apartamentoIDV
                        }
                        const iconoProceso = casaVitini.componentes.iconoProceso()
                        contenedorImagen.appendChild(iconoProceso)
                        const iconoProcesoRenderizado = document.querySelector("[componente=iconoProceso]")

                        const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            iconoProcesoRenderizado.remove()
                            return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                        }

                        if (respuestaServidor?.ok) {
                            iconoProcesoRenderizado.remove()
                            const imagenBase64 = respuestaServidor?.imagen
                            if (!imagenBase64) {
                                contenedorImagen.innerText = "Haz click para añadir una imagen del apartamento"
                                contenedorImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.subirImagen)
                                contenedorImagen.removeEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.mostrarOpciones)

                            } else {

                                const detectarTipoDeImagen = (base64String) => {
                                    const binarioMagicoPNG = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);
                                    const binarioMagicoJPEG = new Uint8Array([255, 216, 255]);
                                    const binarioMagicoTIFF = new Uint8Array([73, 73, 42]);

                                    const arrayBuffer = Uint8Array.from(atob(base64String), c => c.charCodeAt(0));
                                    const buffer = new Uint8Array(arrayBuffer);

                                    if (buffer.subarray(0, 8).every((value, index) => value === binarioMagicoPNG[index])) {
                                        return "PNG";
                                    } else if (buffer.subarray(0, 3).every((value, index) => value === binarioMagicoJPEG[index])) {
                                        return "JPEG";
                                    } else if (buffer.subarray(0, 3).every((value, index) => value === binarioMagicoTIFF[index])) {
                                        return "TIFF";
                                    } else {
                                        return "Tipo de imagen desconocido";
                                    }
                                };


                                const tipoDeImagen = detectarTipoDeImagen(imagenBase64);
                                contenedorImagen.style.backgroundImage = `url(data:image/${tipoDeImagen.toLowerCase()};base64,${imagenBase64})`;
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.opcionesImagen()

                            }

                        }


                    },
                    mostrarOpciones: (e) => {
                        const contenedorOpcionesImagen = document.querySelector("[componente=contenedorOpcionesImagen]")
                        const estadoVision = contenedorOpcionesImagen.style?.display
                        const componente = e.target.getAttribute("componente")

                        if (componente === "opcionImagen") {
                            return
                        }

                        if (estadoVision === "none" || !estadoVision) {
                            contenedorOpcionesImagen.style.display = "flex"
                        } else {
                            contenedorOpcionesImagen.style.display = "none"
                        }




                    },
                    eliminarImagen: {
                        UI: async () => {


                            const advertenciaInmersivaIU = document.createElement("div")
                            advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                            advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                            const contenedorAdvertenciaInmersiva = document.createElement("div")
                            contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                            const tituloCancelarReserva = document.createElement("p")
                            tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                            tituloCancelarReserva.innerText = "Eliminar imagen de la configuracion del apartamento"
                            contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                            const bloqueBloqueoApartamentos = document.createElement("div")
                            bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                            const tituloBloquoApartamentos = document.createElement("div")
                            tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                            tituloBloquoApartamentos.innerText = "Confirma la eliminacíon de la imagen del apartamento"

                            bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                            contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                            const bloqueBotones = document.createElement("div")
                            bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("detallesReservaCancelarBoton")
                            botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                            botonCancelar.innerText = "Confirmar y eliminar la imagen"
                            botonCancelar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.eliminarImagen.confirmar)
                            bloqueBotones.appendChild(botonCancelar)

                            const botonCancelarProcesoCancelacion = document.createElement("div")
                            botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                            botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion de la imagen"
                            botonCancelarProcesoCancelacion.addEventListener("click", () => {
                                let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                                selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                    advertenciaInmersiva.remove()
                                })
                            })
                            bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                            contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                            advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                            document.body.appendChild(advertenciaInmersivaIU)
                        },
                        confirmar: async () => {
                            const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                            contenedorImagen.innerHTML = null
                            const iconoProceso = casaVitini.componentes.iconoProceso()
                            contenedorImagen.appendChild(iconoProceso)
                            const iconoProcesoRenderizado = document.querySelector("[componente=iconoProceso]")

                            const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                            selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })

                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/eliminarImagenConfiguracionApartamento",
                                apartamentoIDV: apartamentoIDV
                            }
                            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                            if (respuestaServidor?.error) {
                                iconoProcesoRenderizado.remove()

                                const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                                selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                                    advertenciaInmersiva.remove()
                                })
                                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                            }

                            if (respuestaServidor?.ok) {
                                iconoProcesoRenderizado.remove()
                                contenedorImagen.removeAttribute("style")
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.obtenerImgen(apartamentoIDV)
                            }

                        }
                    },
                    opcionesImagen: () => {
                        const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")

                        contenedorImagen.removeEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.subirImagen)
                        contenedorImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.mostrarOpciones)



                        const contenedorOpciones = document.createElement("div")
                        contenedorOpciones.classList.add("arquitecturaConfApartamento_contenedorImg_opciones")
                        contenedorOpciones.setAttribute("componente", "contenedorOpcionesImagen")

                        const actualizarImagen = document.createElement("div")
                        actualizarImagen.classList.add("arquitecturaConfApartamento_contenedorImg_opcion")
                        actualizarImagen.setAttribute("componente", "opcionImagen")
                        actualizarImagen.innerText = "Actualiar imagen"
                        actualizarImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.subirImagen)

                        contenedorOpciones.appendChild(actualizarImagen)

                        const eliminarImagen = document.createElement("div")
                        eliminarImagen.classList.add("arquitecturaConfApartamento_contenedorImg_opcion")
                        eliminarImagen.setAttribute("componente", "opcionImagen")
                        eliminarImagen.innerText = "Eliminar imagen"
                        eliminarImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.eliminarImagen.UI)
                        contenedorOpciones.appendChild(eliminarImagen)

                        const contenedorOpcionesRenderizado = document.querySelector("[componente=contenedorOpcionesImagen]")
                        if (!contenedorOpcionesRenderizado) {
                            contenedorImagen.appendChild(contenedorOpciones)

                        }





                    },


                },
                componentesUI: {
                    habitacionUI: (metadatos) => {

                        const habitacionUI = metadatos.habitacionUI
                        const habitacionIDV = metadatos.habitacionIDV
                        const habitacionUID = metadatos.habitacionUID

                        const contenedor = document.createElement("div")
                        contenedor.classList.add("arquitecturaConfApartamento_contenedorHabitacion")
                        contenedor.setAttribute("habitacionUID", habitacionUID)
                        contenedor.setAttribute("habitacionIDV", habitacionIDV)

                        const barraHerramientas = document.createElement("div")
                        barraHerramientas.classList.add("aquitecturaConfApartamento_barraHerrameintas")

                        const tituloHabitacion = document.createElement("div")
                        tituloHabitacion.classList.add("arquitecturaConfApartamento_tituloHabitacion")
                        tituloHabitacion.innerText = habitacionUI
                        barraHerramientas.appendChild(tituloHabitacion)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("arquitecturaConfApartamento_barraHerramientas_contenedorBotones")

                        const botonEliminarHabitacion = document.createElement("div")
                        botonEliminarHabitacion.classList.add("arquitecturaConfApartamento_botonV2")
                        botonEliminarHabitacion.innerText = "Eliminar habitacíon"
                        botonEliminarHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarHabitacion.UI)

                        contenedorBotones.appendChild(botonEliminarHabitacion)

                        const botonAddCama = document.createElement("div")
                        botonAddCama.classList.add("arquitecturaConfApartamento_botonV2")
                        botonAddCama.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addCama.UI)
                        botonAddCama.innerText = "Anadir cama"
                        contenedorBotones.appendChild(botonAddCama)

                        barraHerramientas.appendChild(contenedorBotones)


                        contenedor.appendChild(barraHerramientas)

                        return contenedor




                    },
                    camaUI: (metadatos) => {

                        const camaIDV = metadatos.camaIDV
                        const camaUID = metadatos.camaUID
                        const camaUI = metadatos.camaUI
                        const capacidad = metadatos.capacidad

                        const contenedorCama = document.createElement("div")
                        contenedorCama.classList.add("arquitecturaConfApartamento_contenedorCama")
                        contenedorCama.setAttribute("camaIDV", camaIDV)
                        contenedorCama.setAttribute("camaUID", camaUID)


                        const contenedorInfo = document.createElement("div")
                        contenedorInfo.classList.add("arquitecturaConfApartamento_contenedorCamaInfo")

                        const tituloCama = document.createElement("div")
                        tituloCama.classList.add("arquitecturaConfApartamento_tituloCama")
                        tituloCama.classList.add("negrita")
                        tituloCama.innerText = camaUI
                        contenedorInfo.appendChild(tituloCama)

                        const tituloCapacidadCama = document.createElement("div")
                        tituloCapacidadCama.classList.add("arquitecturaConfApartamento_tituloCama")
                        tituloCapacidadCama.innerText = `Capacidad pernoctativa: ${capacidad}`
                        contenedorInfo.appendChild(tituloCapacidadCama)

                        contenedorCama.appendChild(contenedorInfo)

                        const contenedorOpciones = document.createElement("div")
                        contenedorOpciones.classList.add("arquitecturaConfApartamento_contenedorCamaOpciones")

                        const botonEliminar = document.createElement("div")
                        botonEliminar.classList.add("arquitecturaConfApartamento_botonV3")
                        botonEliminar.innerText = "Eliminar cama"
                        botonEliminar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarCama.UI)
                        contenedorOpciones.appendChild(botonEliminar)

                        contenedorCama.appendChild(contenedorOpciones)

                        return contenedorCama



                    },
                    noCamaInfoUI: () => {
                        const infoNoCamas = document.createElement("div")
                        infoNoCamas.classList.add("arquitecturaConfApartamento_infoNoCama")
                        infoNoCamas.setAttribute("componente", "infoVolatilCamasHabitacion")
                        infoNoCamas.innerText = "Este habitacion no tiene ninguna cama configurada, anade una cama para hacer seleccionable esta habitacion"
                        return infoNoCamas

                    }


                }

            },
            crearConfiguracion: {
                arranque: async () => {
                    document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

                    const transaccion = {
                        zona: "administracion/arquitectura/entidades/listarApartamentosComoEntidades"
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {


                        const apartamentosEntidad = respuestaServidor?.apartamentosComoEntidadesDisponibles

                        if (apartamentosEntidad.length === 0) {

                        }


                        if (apartamentosEntidad.length > 0) {

                            const selectorZonaCreacionConfiguracion = document.querySelector("[componente=zonaCreacion]")

                            const contenedorOpciones = document.createElement("select")
                            contenedorOpciones.setAttribute("componente", "selectorApartamentoIDV")
                            contenedorOpciones.classList.add("arquitecturaConfCrearConfiguracion_selectorApartamento")

                            const opcion = document.createElement("option");
                            opcion.value = "";
                            opcion.disabled = true;
                            opcion.selected = true;
                            opcion.text = "Selecciona un apartamento como entidad para comenzar";
                            contenedorOpciones.add(opcion);

                            for (const detallesApartmentoComoEntidad of apartamentosEntidad) {
                                const apartamentoUI = detallesApartmentoComoEntidad.apartamentoUI
                                const apartamentoIDV = detallesApartmentoComoEntidad.apartamentoIDV

                                const opcion = document.createElement("option");
                                opcion.value = apartamentoIDV;
                                opcion.text = apartamentoUI;
                                contenedorOpciones.add(opcion);
                            }


                            selectorZonaCreacionConfiguracion.appendChild(contenedorOpciones)

                            const botonCrearConfiguracion = document.createElement("div")
                            botonCrearConfiguracion.classList.add("arquitecturaConfCrearConfiguracion_botonCrearConfiguracion")
                            botonCrearConfiguracion.innerText = "Crear configuracion"
                            botonCrearConfiguracion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.crearConfiguracion.transactor)
                            selectorZonaCreacionConfiguracion.appendChild(botonCrearConfiguracion)

                        }









                    }






                },
                transactor: async () => {
                    const apartamentoSeleccionado = document.querySelector("[componente=selectorApartamentoIDV]").value
                    if (!apartamentoSeleccionado) {
                        const error = "Selecciona un apartamento primero desde el selector de lista"
                        return casaVitini.ui.vistas.advertenciaInmersiva(error)
                    }
                    const transaccion = {
                        zona: "administracion/arquitectura/configuraciones/crearConfiguracionAlojamiento",
                        apartamentoIDV: apartamentoSeleccionado
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)

                    }
                    if (respuestaServidor?.ok) {


                        const apartamentoIDV = respuestaServidor?.apartamentoIDV
                        const vista = `/administracion/arquitectura_del_alojamiento/configuraciones/${apartamentoIDV}`
                        const navegacion = {
                            "vista": vista,
                            "tipoOrigen": "menuNavegador"
                        }
                        return casaVitini.componentes.controladorVista(navegacion)

                    }

                }




            }






        }
    },
    usuarios: {
        arranque: async () => {
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';

            const granuladoURL = casaVitini.componentes.granuladorURL()
            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

            if (comandoInicial === "usuarios" && !granuladoURL.parametros.buscar) {
                return casaVitini.administracion.usuarios.portada.buscadorUI()
            }
            if (granuladoURL.parametros.buscar) {
                casaVitini.administracion.usuarios.portada.buscadorUI()
                if (!granuladoURL.parametros.buscar) {
                    return
                }
                const transaccion = {
                    zona: "administracion/usuarios/buscarUsuarios",
                    tipoBusqueda: "rapido",
                    tipoConstruccionGrid: "total",
                    origen: "url",
                    ...granuladoURL.parametros,

                }
                transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                transaccion.buscar = decodeURI(transaccion.buscar)

                if (transaccion.nombre_columna) {
                    transaccion.nombreColumna = transaccion.nombre_columna.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
                    delete transaccion.nombre_columna
                }
                if (transaccion.sentido_columna) {
                    transaccion.sentidoColumna = transaccion.sentido_columna
                    delete transaccion.sentido_columna
                }

                const campoBuscador = document.querySelector("[componente=zonaNavegacionPaginadaUsuarios]")
                campoBuscador.value = transaccion.buscar
                return casaVitini.administracion.usuarios.portada.mostrarUsuariosResueltos(transaccion)

            }
            if (comandoInicial === "crear") {
                return casaVitini.administracion.usuarios.crearCuenta.UI()
            }
            return casaVitini.administracion.usuarios.detallesUsuario.arranque(comandoInicial)

        },
        portada: {
            buscadorUI: () => {
                const espacioClientes = document.querySelector("[componente=espacioUsuarios]")

                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("usuarios_contenedorBotones")

                const botonCrearCuenta = document.createElement("a")
                botonCrearCuenta.classList.add("usuarios_botonV1")
                botonCrearCuenta.setAttribute("href", "/administracion/usuarios/crear")
                botonCrearCuenta.setAttribute("vista", "/administracion/usuarios/crear")
                botonCrearCuenta.addEventListener("click", casaVitini.componentes.cambiarVista)
                botonCrearCuenta.innerText = "Crear cuenta de usuario"
                contenedorBotones.appendChild(botonCrearCuenta)
                espacioClientes.appendChild(contenedorBotones)



                const campoBuscador = document.createElement("input")
                campoBuscador.classList.add("campoBuscadorClientes")
                campoBuscador.setAttribute("componente", "zonaNavegacionPaginadaUsuarios")
                campoBuscador.setAttribute("componenteCampo", "buscadorUsuarios")
                campoBuscador.setAttribute("placeholder", "Busque un usuario por nombre de usuario, por nombre, por pasaporte, por email o por telefon, tambien puedes hacer busquedas combinadas")
                campoBuscador.addEventListener("input", casaVitini.administracion.usuarios.portada.buscadorUsuariosPorCampo)
                espacioClientes.appendChild(campoBuscador)
            },
            resolverUsuarios: async (transaccion) => {
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                return respuestaServidor
            },
            buscadorUsuariosPorCampo: async (cliente) => {

                const espacioUsuarios = document.querySelector("[componente=espacioUsuarios]")
                const terminoBusqueda = cliente.target.value
                document.querySelector("[componente=estadoBusqueda]")?.remove()
                document.querySelector("[gridUID=gridUsuarios]")?.remove()
                document.querySelector("[componenteID=navegacionPaginacion]")?.remove()

                const estadoBusquedaUI = document.createElement("div")
                estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                estadoBusquedaUI.innerText = "Buscando usuarios..."
                espacioUsuarios.appendChild(estadoBusquedaUI)


                const campoVacio = cliente.target.value.length
                if (campoVacio === 0) {
                    clearTimeout(casaVitini.componentes.temporizador);
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    document.querySelector("[componenteID=gridUsuarios]")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    const vistaActual = document.getElementById("uiNavegacion").getAttribute("vistaActual")
                    const resetUrl = "/administracion/usuarios"
                    const titulo = "casavitini"
                    const estado = {
                        zona: vistaActual,
                        estadoInternoZona: "estado",
                        tipoCambio: "total"
                    }
                    window.history.replaceState(estado, titulo, resetUrl);
                    return;
                }
                clearTimeout(casaVitini.componentes.temporizador);
                casaVitini.componentes.temporizador = setTimeout(async () => {
                    const transaccion = {
                        zona: "administracion/usuarios/buscarUsuarios",
                        tipoBusqueda: "rapido",
                        pagina: 1,
                        buscar: terminoBusqueda,
                        origen: "botonMostrarUsuarios",
                        tipoConstruccionGrid: "total",
                    }
                    return casaVitini.administracion.usuarios.portada.mostrarUsuariosResueltos(transaccion)

                }, 1500);
            },
            constructorGrid: (metadatos) => {

                if (!metadatos.usuarios) {
                    const error = "no estoy recibiendo clientes, recuerda que constructorGridClientes, necesita el objeto ya proceador por el servidor, no lo envia"
                    return casaVitini.ui.vistas.advertenciaInmersiva(error)

                }
                const usuarios = metadatos.usuarios
                const metadatosBusqueda = { ...metadatos }
                delete metadatosBusqueda.usuarios
                const gridConstruido = document.querySelector("[componenteID=gridUsuarios]")
                const constructorGrid = document.createElement("div")
                constructorGrid.setAttribute("class", "administracionGridUsuarios")
                constructorGrid.setAttribute("componenteID", "gridUsuarios")
                constructorGrid.setAttribute("metadatosBusqueda", JSON.stringify(metadatosBusqueda))

                const selectorTitulosColumnas = [...document.querySelectorAll("[componenteGrid=celdaTituloColumna]")]
                selectorTitulosColumnas.map((celdaTituloColumna) => {
                    celdaTituloColumna.style.removeProperty("background")
                    celdaTituloColumna.querySelector("[sentidoIconos]")?.remove()
                })
                let icononombreColumna
                let descripcionnombreColumna

                if (metadatos?.sentidoColumna) {

                    if (metadatos.sentidoColumna === "ascendente") {
                        icononombreColumna = "/componentes/iconos/ascendente.svg"
                        descripcionnombreColumna = "Ordenar acendentemente esta columna"
                    }

                    if (metadatos.sentidoColumna === "descendente") {
                        icononombreColumna = "/componentes/iconos/descendente.svg"
                        descripcionnombreColumna = "Ordenar descendentemente esta columna"
                    }
                }

                if (metadatos.tipoConstruccionGrid === "soloLista") {
                    if (metadatos.nombreColumna) {
                        const columnaSeleccionada = document.querySelector(`[componenteGrid=celdaTituloColumna][nombreColumna=${metadatos.nombreColumna}]`)
                        columnaSeleccionada.setAttribute("sentidoColumna", metadatos.sentidoColumna)
                        columnaSeleccionada.style.background = "pink"
                        const iconoColumna = document.createElement("img");
                        iconoColumna.src = icononombreColumna;
                        iconoColumna.alt = descripcionnombreColumna;
                        iconoColumna.classList.add("icononombreColumna");
                        iconoColumna.setAttribute("sentidoIconos", metadatos.sentidoColumna)
                        columnaSeleccionada.appendChild(iconoColumna)
                    }


                    let metadatosBusqueda = document.querySelector("[metadatosBusqueda]").getAttribute("metadatosBusqueda")
                    metadatosBusqueda = JSON.parse(metadatosBusqueda)

                    metadatosBusqueda.nombreColumna = metadatos.nombreColumna
                    metadatosBusqueda.sentidoColumna = metadatos.sentidoColumna

                    metadatosBusqueda = JSON.stringify(metadatosBusqueda)
                    document.querySelector("[metadatosBusqueda]").setAttribute("metadatosBusqueda", metadatosBusqueda)
                }
                const titulosColumnas = ["Usuario", "Nombre", "Primer Apellido", "Segundo Apellido", "Pasaporte", "Correo electronico", "Telefono"]
                const nombreColumnas = ["usuarioIDX", "nombre", "primerApellido", "segundoApellido", "pasaporte", "email", "telefono"]
                const classesTitulos = ["idColumna", "entradaColumna", "salidaColuma", "estadoColumna", "pagoColumna"]
                titulosColumnas.map((tituloColumna, ciclo) => {
                    const columnaElemento = document.createElement("div")
                    columnaElemento.innerText = tituloColumna
                    // columnaElemento.classList.add(classesTitulos[ciclo])
                    columnaElemento.classList.add("celdaTituloCompartidoGrid")
                    columnaElemento.classList.add("negrita")
                    columnaElemento.setAttribute("nombreColumna", nombreColumnas[ciclo])
                    columnaElemento.setAttribute("componenteGrid", "celdaTituloColumna")
                    columnaElemento.addEventListener("click", casaVitini.administracion.usuarios.portada.ordenarPorColumna)
                    if (metadatos.nombreColumna === nombreColumnas[ciclo]) {
                        if (metadatos.nombreColumna) {
                            columnaElemento.style.background = "pink"
                            columnaElemento.setAttribute("nombreColumna", metadatos.sentidoColumna)

                            const iconoColumna = document.createElement("img");
                            iconoColumna.src = icononombreColumna;
                            iconoColumna.alt = descripcionnombreColumna;
                            iconoColumna.classList.add("icononombreColumna");
                            iconoColumna.setAttribute("sentidoIconos", metadatos.sentidoColumna)
                            columnaElemento.appendChild(iconoColumna)
                        }


                    }

                    if (metadatos.tipoConstruccionGrid === "soloLista") {
                    } else {
                        constructorGrid.appendChild(columnaElemento)
                    }


                })
                if (metadatos.tipoConstruccionGrid === "soloLista") {
                    let selectorFilasGrid = [...document.querySelectorAll("[componenteGrid=fila]")]
                    selectorFilasGrid.map((filaGrid) => {
                        filaGrid.remove()
                    })
                }
                usuarios.map((detallesDelUsuario) => {
                    const usuarioIDX = detallesDelUsuario.usuarioIDX
                    const nombre = detallesDelUsuario.nombre
                    const primerApellido = detallesDelUsuario.primerApellido
                    const segundoApellido = detallesDelUsuario.segundoApellido
                    const pasaporte = detallesDelUsuario.pasaporte
                    const email = detallesDelUsuario.email
                    const telefono = detallesDelUsuario.telefono


                    //                const titulosColumnas = ["Usuario", "Nombre", "Primer Apellido", "Segundo Apellido", "Pasaporte", "Correo electronico", "Telefono"]

                    const celdaUsuarioIDX = document.createElement("div")
                    celdaUsuarioIDX.setAttribute("class", "celdaCompartidoGrid")
                    celdaUsuarioIDX.setAttribute("nombreColumna", "usuarioIDX")
                    celdaUsuarioIDX.innerText = usuarioIDX

                    const celdaNombre = document.createElement("div")
                    celdaNombre.setAttribute("class", "celdaCompartidoGrid")
                    celdaNombre.setAttribute("nombreColumna", "nombre")
                    celdaNombre.innerText = nombre

                    const celdaPrimerApellido = document.createElement("div")
                    celdaPrimerApellido.setAttribute("class", "celdaCompartidoGrid")
                    celdaPrimerApellido.setAttribute("nombreColumna", "primerApellido")
                    celdaPrimerApellido.innerText = primerApellido

                    const celdaSegundoApellido = document.createElement("div")
                    celdaSegundoApellido.setAttribute("class", "celdaCompartidoGrid")
                    celdaSegundoApellido.setAttribute("nombreColumna", "segundoApellido")
                    celdaSegundoApellido.innerText = segundoApellido

                    const celdaPasaporte = document.createElement("div")
                    celdaPasaporte.setAttribute("class", "celdaCompartidoGrid")
                    celdaPasaporte.setAttribute("nombreColumna", "pasaporte")
                    celdaPasaporte.innerText = pasaporte

                    const celdaMail = document.createElement("div")
                    celdaMail.setAttribute("class", "celdaCompartidoGrid")
                    celdaMail.setAttribute("nombreColumna", "email")
                    celdaMail.innerText = email

                    const celdaTelefono = document.createElement("div")
                    celdaTelefono.setAttribute("nombreColumna", "telefono")

                    celdaTelefono.setAttribute("class", "celdaCompartidoGrid")
                    celdaTelefono.innerText = telefono

                    const fila = document.createElement("a")
                    fila.setAttribute("class", "adminitracionReservasFila")
                    fila.setAttribute("usuarioIDX", usuarioIDX)
                    fila.setAttribute("href", "/administracion/usuarios/" + usuarioIDX)
                    fila.setAttribute("componenteGrid", "fila")
                    fila.setAttribute("vista", "/administracion/usuarios/" + usuarioIDX)
                    fila.addEventListener("click", casaVitini.administracion.usuarios.portada.resolverFila)

                    fila.appendChild(celdaUsuarioIDX)
                    fila.appendChild(celdaNombre)
                    fila.appendChild(celdaPrimerApellido)
                    fila.appendChild(celdaSegundoApellido)
                    fila.appendChild(celdaPasaporte)
                    fila.appendChild(celdaMail)
                    fila.appendChild(celdaTelefono)


                    if (metadatos.tipoConstruccionGrid === "soloLista") {
                        gridConstruido.appendChild(fila)
                    } else {
                        constructorGrid.appendChild(fila)
                    }

                })
                if (metadatos.tipoConstruccionGrid === "soloLista") {
                } else {
                    document.querySelector("[componenteID=gridReservas]")?.remove()
                    document.querySelector("[componente=espacioUsuarios]")?.appendChild(constructorGrid)
                }

            },
            mostrarUsuariosResueltos: async (transaccion) => {
                const origen = transaccion.origen
                delete transaccion.origen

                const granuladoURL = casaVitini.componentes.granuladorURL()


                const tipoConstruccionGrid = transaccion.tipoConstruccionGrid
                delete transaccion.tipoConstruccionGrid


                const paginaTipo = transaccion.paginaTipo
                delete transaccion.paginaTipo


                const resolverUsuarios = await casaVitini.administracion.usuarios.portada.resolverUsuarios(transaccion)

                if (resolverUsuarios.totalUsuarios === 0) {
                    const espacioClientes = document.querySelector("[componente=espacioUsuarios]")
                    document.querySelector("[gridUID=gridUsuarios]")?.remove()
                    document.querySelector("[componente=estadoBusqueda]")?.remove()

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.innerText = "No se han encontrado usuarios"
                    espacioClientes.appendChild(estadoBusquedaUI)
                    return
                }
                document.querySelector("[componente=estadoBusqueda]")?.remove()

                const usuarios = resolverUsuarios.usuarios
                const buscar = resolverUsuarios.buscar
                const paginasTotales = resolverUsuarios.paginasTotales
                const paginaActual = resolverUsuarios.pagina
                const nombreColumna = resolverUsuarios.nombreColumna
                const sentidoColumna = resolverUsuarios.sentidoColumna

                const columnasGrid = [
                    {
                        columnaUI: "IDX",
                        columnaIDV: "usuarioIDX",
                        columnaClase: "idColumna"
                    },
                    {
                        columnaUI: "Correo",
                        columnaIDV: "email",
                        columnaClase: "entradaColumna"
                    },
                    {
                        columnaUI: "Nombre",
                        columnaIDV: "nombre",
                        columnaClase: "salidaColuma"
                    },
                    {
                        columnaUI: "Primer Apellido",
                        columnaIDV: "primerApellido",
                        columnaClase: "estadoColumna"
                    },
                    {
                        columnaUI: "Segundo Apellido",
                        columnaIDV: "segundoApellido",
                        columnaClase: "pagoColumna"
                    },
                    {
                        columnaUI: "Pasaporte",
                        columnaIDV: "pasaporte",
                        columnaClase: "pagoColumna"
                    },
                    {
                        columnaUI: "Telefono",
                        columnaIDV: "telefono",
                        columnaClase: "pagoColumna"
                    },
                ]

                const parametrosFinales = {
                    buscar: buscar
                }
                if (paginaActual > 1 && paginasTotales > 1) {
                    parametrosFinales.pagina = paginaActual
                }
                if (nombreColumna) {
                    parametrosFinales.pagina = paginaActual
                    parametrosFinales.nombre_columna = nombreColumna.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
                    parametrosFinales.sentido_columna = sentidoColumna

                }
                const estructuraParametrosFinales = []
                for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                    const estructura = `${parametroFinal}:${valorFinal}`
                    estructuraParametrosFinales.push(estructura)
                }
                let parametrosURLFInal = ""
                if (estructuraParametrosFinales.length > 0) {
                    parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                }
                const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                const metadatosGrid = {
                    filas: usuarios,
                    sentidoColumna: sentidoColumna,
                    nombreColumna: nombreColumna,
                    tipoConstruccionGrid: tipoConstruccionGrid,
                    buscar: buscar,
                    pagina: paginaActual,
                    destino: "[componente=espacioUsuarios]",
                    columnasGrid: columnasGrid,
                    gridUID: "gridUsuarios",
                    numeroColumnas: 7,
                    metodoColumna: "casaVitini.administracion.usuarios.portada.ordenarPorColumna",
                    metodoFila: "casaVitini.administracion.usuarios.portada.resolverFila",
                    mascaraHref: {
                        urlStatica: "/administracion/usuarios/",
                        parametro: "usuarioIDX"
                    },
                    //mascaraURL: constructorURLFinal

                }

                casaVitini.componentes.ui.grid(metadatosGrid)
                const metadatosPaginador = {
                    paginaActual: paginaActual,
                    paginasTotales: paginasTotales,
                    destino: "[componente=espacioUsuarios]",
                    metodoBoton: "casaVitini.administracion.usuarios.portada.cambiarPagina",
                    gridUID: "gridUsuarios",
                    granuladoURL: {
                        parametros: parametrosFinales,
                        directoriosFusion: granuladoURL.directoriosFusion
                    }
                }

                casaVitini.componentes.ui.paginador(metadatosPaginador)





                transaccion.tipoConstruccionGrid = "soloLista"
                const titulo = "ADminstar reservas"
                const estado = {
                    zona: constructorURLFinal,
                    EstadoInternoZona: "estado",
                    tipoCambio: "parcial",
                    conpontenteExistente: "zonaNavegacionPaginadaUsuarios",
                    funcionPersonalizada: "casaVitini.administracion.usuarios.portada.mostrarUsuariosResueltos",
                    datosPaginacion: transaccion
                }
                if (origen === "url" || origen === "botonMostrarUsuarios") {
                    window.history.replaceState(estado, titulo, constructorURLFinal);
                }
                if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                    window.history.pushState(estado, titulo, constructorURLFinal);
                }
                if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                    window.history.replaceState(estado, titulo, constructorURLFinal);
                }
            },
            ordenarPorColumna: async (columna) => {

                const nombreColumna = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("nombreColumna")

                const selectorColumnasentido = columna.target.closest("[componenteGrid=celdaTituloColumna]").getAttribute("sentidoColumna")
                const numeroPagina = columna.target.closest("[gridUID]").getAttribute("numeroPagina")
                const terminoBusqueda = columna.target.closest("[gridUID]").getAttribute("terminoBusqueda")
                let sentidoColumna

                const transaccion = {
                    zona: "administracion/usuarios/buscarUsuarios",
                    tipoBusqueda: "rapido",
                    pagina: Number(numeroPagina),
                    buscar: terminoBusqueda,
                    tipoConstruccionGrid: "soloLista",
                    origen: "tituloColumna"
                }

                if (selectorColumnasentido === "ascendente") {
                    transaccion.sentidoColumna = "descendente"
                    transaccion.nombreColumna = nombreColumna
                }
                if (!selectorColumnasentido) {
                    transaccion.sentidoColumna = "ascendente"
                    transaccion.nombreColumna = nombreColumna
                }

                casaVitini.administracion.usuarios.portada.mostrarUsuariosResueltos(transaccion)
            },
            cambiarPagina: async (cambiarPagina) => {



                const gridUID = cambiarPagina.gridUID
                const gridEnlazado = document.querySelector(`[gridUID=${gridUID}]`)



                const tipoBoton = cambiarPagina.componenteID
                const nombreColumna = gridEnlazado.getAttribute("nombreColumnaSeleccionada")
                const sentidoColumna = gridEnlazado.getAttribute("sentidoColumna")
                const terminoBusqueda = gridEnlazado.getAttribute("terminoBusqueda")
                const paginaActual = Number(gridEnlazado.getAttribute("numeroPagina"))
                const paginaTipo = cambiarPagina.paginaTipo

                const transacccion = {
                    nombreColumna: nombreColumna,
                    sentidoColumna: sentidoColumna,
                    buscar: terminoBusqueda,
                    paginaTipo: paginaTipo,
                    tipoBusqueda: "rapido",

                }

                if (tipoBoton === "numeroPagina") {
                    const numeroPagina = cambiarPagina.numeroPagina
                    transacccion.pagina = Number(numeroPagina)
                    transacccion.origen = "botonNumeroPagina"
                }
                if (tipoBoton === "botonAdelantePaginacion") {
                    const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                    let mueveNavegadorHaciaAdelante = "Desactivado";
                    if (Number(posicionRelativa) === 10) {
                        mueveNavegadorHaciaAdelante = "Activado"
                    }
                    transacccion.pagina = paginaActual + 1

                    transacccion.origen = "botonNumeroPagina"
                    transacccion.moverHaciaAdelanteNavegacion = mueveNavegadorHaciaAdelante
                    transacccion.sentidoNavegacion = "Adelante"
                }
                if (tipoBoton === "botonAtrasPaginacion") {
                    const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                    let mueveNavegadorHaciaAtras = "Desactivado";
                    if (Number(posicionRelativa) === 1) {
                        mueveNavegadorHaciaAtras = "Activado"
                    }
                    transacccion.pagina = paginaActual - 1
                    transacccion.origen = "botonNumeroPagina"
                    transacccion.mueveNavegadorHaciaAtras = mueveNavegadorHaciaAtras
                    transacccion.sentidoNavegacion = "Atras"
                }
                transacccion.tipoConstruccionGrid = "soloLista"
                transacccion.zona = "administracion/usuarios/buscarUsuarios"

                return casaVitini.administracion.usuarios.portada.mostrarUsuariosResueltos(transacccion)

            },
            resolverFila: (transaccion) => {
                transaccion.preventDefault()
                transaccion.stopPropagation()
                const href = transaccion.target.closest("[href]").getAttribute("href")
                const navegacion = {
                    vista: href,
                    tipoOrigen: "menuNavegador"

                }
                return casaVitini.componentes.controladorVista(navegacion)
            },
        },
        detallesUsuario: {
            arranque: (uid) => {
                const granuladoURL = casaVitini.componentes.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

                if (comandoInicial === "datos_personales") {
                    const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                    return casaVitini.administracion.usuarios.detallesUsuario.datosUsuario.UI(usuarioUID)
                }
                if (comandoInicial === "modificar_idx") {
                    const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                    return casaVitini.administracion.usuarios.detallesUsuario.modificarIDX.UI(usuarioUID)
                }
                if (comandoInicial === "cambiar_clave") {
                    const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                    return casaVitini.administracion.usuarios.detallesUsuario.cambiarClave.UI(usuarioUID)
                }
                if (comandoInicial === "rol") {
                    const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                    return casaVitini.administracion.usuarios.detallesUsuario.rol.UI(usuarioUID)
                }
                return casaVitini.administracion.usuarios.detallesUsuario.portada.UI(comandoInicial)
            },
            portada: {
                UI: async (usuarioIDX) => {

                    const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")

                    const transaccion = {
                        zona: "administracion/usuarios/datosCuentaIDX",
                        usuarioIDX: usuarioIDX
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe ningun usuario con ese identificador",
                            descripcion: "El usuario no existe. Prueba con otro identificador"
                        }
                        return casaVitini.componentes.mensajeSimple(info)
                    }


                    if (respuestaServidor?.ok) {

                        const detallesUsuario = respuestaServidor?.ok
                        const usuarioIDX = detallesUsuario.usuario
                        const rol = detallesUsuario.rol
                        const estadoCuenta = detallesUsuario.estadoCuenta


                        const contenedorDetallesUsuario = document.createElement("div")
                        contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                        contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")

                        const datosBanner = {
                            usuarioIDX: usuarioIDX,
                            rol: rol
                        }
                        const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                        contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                        espacioUsuario.appendChild(contenedorDetallesUsuario)


                        let estadoCuentaUI
                        if (estadoCuenta === "activado") {
                            estadoCuentaUI = "Desactivar cuenta"
                        }
                        if (estadoCuenta === "desactivado") {
                            estadoCuentaUI = "Activar cuenta"
                        }

                        const contenedorOpciones = document.createElement("div")
                        contenedorOpciones.classList.add("detallesUsuario_contenedorOpciones")


                        const opcionInformacion = document.createElement("a")
                        opcionInformacion.classList.add("detallesUsuario_opcionInformacion")
                        opcionInformacion.innerText = "Datos personales"
                        opcionInformacion.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/datos_personales`)
                        opcionInformacion.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/datos_personales`)
                        opcionInformacion.addEventListener("click", casaVitini.componentes.cambiarVista)
                        contenedorOpciones.appendChild(opcionInformacion)

                        const opcionCambiarIDX = document.createElement("a")
                        opcionCambiarIDX.classList.add("detallesUsuario_opcionInformacion")
                        opcionCambiarIDX.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/modificar_idx`)
                        opcionCambiarIDX.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/modificar_idx`)
                        opcionCambiarIDX.addEventListener("click", casaVitini.componentes.cambiarVista)
                        opcionCambiarIDX.innerText = "Modificar VitiniID"
                        contenedorOpciones.appendChild(opcionCambiarIDX)

                        const opcionCambiarRol = document.createElement("a")
                        opcionCambiarRol.classList.add("detallesUsuario_opcionInformacion")
                        opcionCambiarRol.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/rol`)
                        opcionCambiarRol.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/rol`)
                        opcionCambiarRol.addEventListener("click", casaVitini.componentes.cambiarVista)
                        opcionCambiarRol.innerText = "Cambiar rol"
                        contenedorOpciones.appendChild(opcionCambiarRol)


                        const opcionClave = document.createElement("a")
                        opcionClave.classList.add("detallesUsuario_opcionInformacion")
                        opcionClave.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/cambiar_clave`)
                        opcionClave.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/cambiar_clave`)
                        opcionClave.addEventListener("click", casaVitini.componentes.cambiarVista)
                        opcionClave.innerText = "Cambiar contrasena"
                        contenedorOpciones.appendChild(opcionClave)

                        const opcionCambiarEstado = document.createElement("a")
                        opcionCambiarEstado.classList.add("detallesUsuario_opcionInformacion")
                        opcionCambiarEstado.setAttribute("estadoCuenta", estadoCuenta)
                        opcionCambiarEstado.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarEstadoCuenta.UI)
                        opcionCambiarEstado.innerText = estadoCuentaUI
                        contenedorOpciones.appendChild(opcionCambiarEstado)

                        const opcionEliminarCuenta = document.createElement("a")
                        opcionEliminarCuenta.classList.add("detallesUsuario_opcionInformacion")
                        opcionEliminarCuenta.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.eliminarCuenta.UI)
                        opcionEliminarCuenta.innerText = "Eliminar cuenta"
                        contenedorOpciones.appendChild(opcionEliminarCuenta)

                        espacioUsuario.appendChild(contenedorOpciones)
                    }
                },
            },
            datosUsuario: {
                UI: async (usuarioIDX) => {

                    const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                    const transaccion = {
                        zona: "/administracion/usuarios/detallesUsuario",
                        usuarioIDX: usuarioIDX
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)



                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }


                    if (respuestaServidor?.ok) {

                        const detallesUsuario = respuestaServidor?.ok
                        const usuarioIDX = detallesUsuario.usuarioIDX
                        const rol = detallesUsuario.rol
                        const nombre = detallesUsuario.nombre || ""
                        const primerApellido = detallesUsuario.primerApellido || ""
                        const segundoApellido = detallesUsuario.segundoApellido || ""
                        const pasaporte = detallesUsuario.pasaporte || ""
                        const telefono = detallesUsuario.telefono || ""
                        const email = detallesUsuario.email || ""

                        const contenedorDetallesUsuario = document.createElement("div")
                        contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                        contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")

                        const datosBanner = {
                            usuarioIDX: usuarioIDX,
                            rol: rol
                        }

                        const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                        contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)

                        espacioUsuario.appendChild(contenedorDetallesUsuario)


                        const contenedorDatosUsuario = document.createElement("div")
                        contenedorDatosUsuario.classList.add("detallesUsuario_contenedorDatosUsuario")

                        const nombreUI = document.createElement("a")
                        nombreUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                        nombreUI.innerText = "Nombre"

                        const campoNombre = document.createElement("input")
                        campoNombre.classList.add("detallesUsuario_campoDatosUsuario")
                        campoNombre.setAttribute("campo", "nombre")
                        campoNombre.placeholder = nombre
                        nombreUI.appendChild(campoNombre)
                        contenedorDatosUsuario.appendChild(nombreUI)


                        const primerApellidoUI = document.createElement("a")
                        primerApellidoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                        primerApellidoUI.innerText = "Primero apellido"

                        const campoPrimerApellido = document.createElement("input")
                        campoPrimerApellido.classList.add("detallesUsuario_campoDatosUsuario")
                        campoPrimerApellido.setAttribute("campo", "primerApellido")
                        campoPrimerApellido.placeholder = primerApellido
                        primerApellidoUI.appendChild(campoPrimerApellido)
                        contenedorDatosUsuario.appendChild(primerApellidoUI)



                        const segundoApellidoUI = document.createElement("a")
                        segundoApellidoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                        segundoApellidoUI.innerText = "Segundo apellido"

                        const campoSegundoApellido = document.createElement("input")
                        campoSegundoApellido.classList.add("detallesUsuario_campoDatosUsuario")
                        campoSegundoApellido.setAttribute("campo", "segundoApellido")
                        campoSegundoApellido.placeholder = segundoApellido
                        segundoApellidoUI.appendChild(campoSegundoApellido)
                        contenedorDatosUsuario.appendChild(segundoApellidoUI)



                        const pasaporteUI = document.createElement("a")
                        pasaporteUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                        pasaporteUI.innerText = "Pasaporte"

                        const campoPasaporte = document.createElement("input")
                        campoPasaporte.classList.add("detallesUsuario_campoDatosUsuario")
                        campoPasaporte.setAttribute("campo", "pasaporte")
                        campoPasaporte.placeholder = pasaporte
                        pasaporteUI.appendChild(campoPasaporte)
                        contenedorDatosUsuario.appendChild(pasaporteUI)



                        const telefonoUI = document.createElement("a")
                        telefonoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                        telefonoUI.innerText = "Telefono"

                        const campoTelefono = document.createElement("input")
                        campoTelefono.classList.add("detallesUsuario_campoDatosUsuario")
                        campoTelefono.setAttribute("campo", "telefono")
                        campoTelefono.placeholder = telefono
                        telefonoUI.appendChild(campoTelefono)
                        contenedorDatosUsuario.appendChild(telefonoUI)




                        const emailUI = document.createElement("a")
                        emailUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                        emailUI.innerText = "Correo electroníco"

                        const campoEmail = document.createElement("input")
                        campoEmail.classList.add("detallesUsuario_campoDatosUsuario")
                        campoEmail.setAttribute("campo", "email")
                        campoEmail.placeholder = email
                        emailUI.appendChild(campoEmail)
                        contenedorDatosUsuario.appendChild(emailUI)

                        espacioUsuario.appendChild(contenedorDatosUsuario)


                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                        contenedorBotones.setAttribute("componente", "contenedorBotones")


                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.datosUsuario.guardarCambios)
                        botonGuardarCambios.innerText = "Guardar cambios"
                        contenedorBotones.appendChild(botonGuardarCambios)

                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                        botonCancelarCambios.innerText = "Cancelar cambios"
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.datosUsuario.cancelarCambios)
                        contenedorBotones.appendChild(botonCancelarCambios)

                        espacioUsuario.appendChild(contenedorBotones)

                        const campos = [...document.querySelectorAll("[campo]")]


                        const controladorCampos = () => {
                            let estadoGlobalCampos = "vacios"
                            campos.map((campo) => {
                                if (campo.value.length > 0) {
                                    estadoGlobalCampos = "noVacios"
                                }
                            })


                            const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                            if (estadoGlobalCampos === "vacios") {
                                selectorContenedorBotones.removeAttribute("style")
                            }
                            if (estadoGlobalCampos === "noVacios") {
                                selectorContenedorBotones.style.display = "flex"
                            }

                        }


                        campos.map((campo) => {
                            campo.addEventListener("input", controladorCampos)
                        })








                    }
                },
                editar: () => {

                    let camposLectura = [...document.querySelectorAll("[componenteDetalle]")]
                    camposLectura.map((campo) => {

                        let datoCampo = campo.innerText
                        let idCampo = campo.getAttribute("componenteDetalle")
                        campo.style.display = "none"
                        let tipoElemento
                        if (idCampo === "notas") {
                            tipoElemento = "textarea"
                        } else {
                            tipoElemento = "input"
                        }

                        let campoEditable = document.createElement(tipoElemento)
                        campoEditable.classList.add("detallesClienteCampoEditable")
                        campoEditable.value = datoCampo
                        campoEditable.setAttribute("componenteEditable", idCampo)
                        let selectorContenedor = campo.parentNode
                        selectorContenedor.appendChild(campoEditable)



                    })

                    document.querySelector("[boton=editar]").classList.add("estadoInicialInvisible")
                    document.querySelector("[boton=dejarDeEditar]").classList.remove("estadoInicialInvisible")

                    document.querySelector("[boton=guardarCambios]").classList.remove("estadoInicialInvisible")


                },
                cancelarCambios: () => {
                    const campos = [...document.querySelectorAll("[campo]")]

                    campos.map((campo) => {
                        campo.value = null
                    })
                    const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                    selectorContenedorBotones.removeAttribute("style")



                },
                guardarCambios: async () => {

                    const campos = [...document.querySelectorAll("[campo]")]
                    const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                    const datosParaActualizar = {
                        zona: "administracion/usuarios/actualizarDatosUsuarioDesdeAdministracion",
                        usuarioIDX: usuarioIDX
                    }
                    campos.map((campo) => {
                        const campoID = campo.getAttribute("campo")
                        const campoDato = campo.value
                        datosParaActualizar[campoID] = campoDato

                    })
                    const respuestaServidor = await casaVitini.componentes.servidor(datosParaActualizar)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {

                        const detallesUsuario = respuestaServidor?.datosActualizados[0]


                        const nombre = detallesUsuario.nombre
                        const primerApellido = detallesUsuario.primerApellido
                        const segundoApellido = detallesUsuario.segundoApellido
                        const pasaporte = detallesUsuario.pasaporte
                        const telefono = detallesUsuario.telefono
                        const email = detallesUsuario.email

                        campos.map((campo) => {
                            const campoID = campo.getAttribute("campo")
                            campo.placeholder = detallesUsuario[campoID] || ""
                            campo.value = ""
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")



                    }


                }

            },
            rol: {
                UI: async (usuarioIDX) => {
                    let rol
                    const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                    const transaccion = {
                        zona: "administracion/usuarios/detallesUsuario",
                        usuarioIDX: usuarioIDX
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        rol = respuestaServidor?.ok.rol
                        const usuariosIDX = respuestaServidor?.ok.usuarioIDX
                        const datosBanner = {
                            usuarioIDX: usuarioIDX,
                            rol: rol
                        }
                        const contenedorDetallesUsuario = document.createElement("div")
                        contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                        contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")

                        const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                        contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                        espacioUsuario.appendChild(contenedorDetallesUsuario)
                    }


                    const transaccionRoles = {
                        zona: "administracion/usuarios/obtenerRoles"
                    }
                    const respuestaRoles = await casaVitini.componentes.servidor(transaccionRoles)
                    if (respuestaRoles.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaRoles.ok) {

                        const roles = respuestaRoles.ok

                        const contenedorCampos = document.createElement("div")
                        contenedorCampos.classList.add("detallesUsuario_contenedorCampos")

                        const infoModificarIDX = document.createElement("div")
                        infoModificarIDX.classList.add("detallesUsuario_infoModificarIDX")
                        infoModificarIDX.innerText = `Cambia el rol de esta cuenta al rol que quieras. Recuerda que el rol determina el grado de acceso y autoridad dentro del sistema. El rol cliente es el rol que tiene que tener la cuentas de los clientes de casa vitini. Este rolo solo permite acceder a sus datos de usuario. Controlar solo su cuenta y ver sus reserva. El Rol empleado permite acceder al panel de admintracion pero solo para gestioanr reservas y clientes y nada mas. No puede por ejemplo modificar precios. El rol Administrador es el rol de mas autoridad y puede hacer cualquier cosa y tener acceso a todo`
                        contenedorCampos.appendChild(infoModificarIDX)

                        const selectorRoles = document.createElement("select");
                        selectorRoles.classList.add("detallesUsuario_rol_selector")
                        selectorRoles.setAttribute("selector", "roles")

                        for (const detallesRol of roles) {

                            const rolUI = detallesRol.rolUI
                            const rolIDX = detallesRol.rol



                            const opcionRol = document.createElement("option");
                            opcionRol.value = rolIDX;
                            opcionRol.text = rolUI;
                            if (rol === rolIDX) {
                                opcionRol.selected = true;
                            }
                            selectorRoles.appendChild(opcionRol);
                        }
                        contenedorCampos.appendChild(selectorRoles);
                        espacioUsuario.appendChild(contenedorCampos)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                        contenedorBotones.setAttribute("componente", "contenedorBotones")

                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.rol.guardarCambios)
                        botonGuardarCambios.innerText = "Cambiar rol de la cuenta"
                        contenedorBotones.appendChild(botonGuardarCambios)


                        espacioUsuario.appendChild(contenedorBotones)
                    }
















                },
                guardarCambios: async () => {
                    const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                    const selectorRol = document.querySelector("[selector=roles]").value
                    const datosParaActualizar = {
                        zona: "administracion/usuarios/actualizarRolCuenta",
                        usuarioIDX: usuarioIDX,
                        nuevoRol: selectorRol
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(datosParaActualizar)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {

                        const rolIDV = respuestaServidor?.rolIDV
                        const rolUI = respuestaServidor?.rolUI

                        document.querySelector("[componente=rolUI]").innerText = rolUI
                        document.querySelector("[selector=roles]").value = rolIDV



                    }

                },
                cancelarCambios: () => {
                    const campos = [...document.querySelectorAll("[campo]")]

                    campos.map((campo) => {
                        campo.value = null
                    })
                    const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                    selectorContenedorBotones.removeAttribute("style")



                },

            },
            cambiarEstadoCuenta: {
                UI: async () => {

                    const estadoCuentaActual = document.querySelector("[estadoCuenta]").getAttribute("estadoCuenta")

                    let tituloBoton
                    let valorBoton
                    let textoDescriptivo
                    let tituloInformativo
                    if (estadoCuentaActual === "activado") {
                        tituloBoton = "Desactivar cuenta"
                        tituloInformativo = "Confirma la desactivacion de la cuenta"
                        textoDescriptivo = "¿Quieres Desactivar esta cuenta? El usuario de esta cuenta podra volver a logearse con ella. Sus implicaciones son inmediatas"
                        valorBoton = "desactivado"
                    }

                    if (estadoCuentaActual === "desactivado") {
                        tituloBoton = "Activar cuenta"
                        tituloInformativo = "Confirma la activacion de la cuenta"
                        textoDescriptivo = "¿Quieres Aactivar esta cuenta? El usuario de esta cuenta no podra volver a logearse con ella. Sus implicaciones son inmediatas"
                        valorBoton = "activado"
                    }

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const tituloCancelarReserva = document.createElement("p")
                    tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                    tituloCancelarReserva.innerText = tituloInformativo
                    contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = textoDescriptivo

                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                    contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = tituloBoton
                    botonCancelar.setAttribute("nuevoEstado", valorBoton)
                    botonCancelar.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarEstadoCuenta.transactor)
                    bloqueBotones.appendChild(botonCancelar)

                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cancelar el cambio de estado"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)
                },
                transactor: async (nuevoEstado) => {
                    const nuevoEstado_ = nuevoEstado.target.getAttribute("nuevoEstado")
                    const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                    const transaccion = {
                        zona: "administracion/usuarios/actualizarEstadoCuentaDesdeAdministracion",
                        "usuarioIDX": usuarioIDX,
                        "nuevoEstado": nuevoEstado_
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        const estadoActual = respuestaServidor?.estadoCuenta

                        let estadoCuentaUI
                        if (estadoActual === "activado") {
                            estadoCuentaUI = "Desactivar cuenta"
                        }

                        if (estadoActual === "desactivado") {
                            estadoCuentaUI = "Activar cuenta"
                        }

                        const selectorEstadoCuentaUI = document.querySelector("[estadoCuenta]")
                        selectorEstadoCuentaUI.innerText = estadoCuentaUI
                        selectorEstadoCuentaUI.setAttribute("estadoCuenta", estadoActual)

                        const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })


                    }

                }
            },
            cambiarClave: {
                UI: async (usuarioIDX) => {

                    const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                    const transaccion = {
                        zona: "administracion/usuarios/detallesUsuario",
                        usuarioIDX: usuarioIDX
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const rol = respuestaServidor?.ok.rol
                        const usuariosIDX = respuestaServidor?.ok.usuarioIDX
                        const datosBanner = {
                            usuarioIDX: usuarioIDX,
                            rol: rol
                        }
                        const contenedorDetallesUsuario = document.createElement("div")
                        contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                        contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")

                        const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                        contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                        espacioUsuario.appendChild(contenedorDetallesUsuario)

                        const contenedorCampos = document.createElement("div")
                        contenedorCampos.classList.add("detallesUsuario_contenedorCampos")

                        const infoModificarIDX = document.createElement("div")
                        infoModificarIDX.classList.add("detallesUsuario_infoModificarIDX")
                        infoModificarIDX.innerText = `Escriba la nueva clave que quiera establecer`
                        contenedorCampos.appendChild(infoModificarIDX)
                        /*
                        const campoClaveActual = document.createElement("input")
                        campoClaveActual.classList.add("detallesUsuario_campoNuevoIDX")
                        campoClaveActual.setAttribute("campo", "nuevoIDX")
                        campoClaveActual.setAttribute("componente", "nuevoIDX")
                        campoClaveActual.placeholder = "Escriba su contrasena actual"
                        contenedorCampos.appendChild(campoClaveActual)
                        */

                        const campoNuevaClave = document.createElement("input")
                        campoNuevaClave.classList.add("detallesUsuario_campoNuevoIDX")
                        campoNuevaClave.setAttribute("campo", "claveNueva")
                        campoNuevaClave.setAttribute("componente", "claveNueva")
                        campoNuevaClave.placeholder = "Escriba la nueva contrasena"
                        contenedorCampos.appendChild(campoNuevaClave)

                        const campoVerificaClave = document.createElement("input")
                        campoVerificaClave.classList.add("detallesUsuario_campoNuevoIDX")
                        campoVerificaClave.setAttribute("campo", "claveNuevaDos")
                        campoVerificaClave.setAttribute("componente", "claveNuevaDos")
                        campoVerificaClave.placeholder = "Escriba de nueva la nueva contrasena"
                        contenedorCampos.appendChild(campoVerificaClave)



                        espacioUsuario.appendChild(contenedorCampos)


                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                        contenedorBotones.setAttribute("componente", "contenedorBotones")

                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarClave.guardarCambios)
                        botonGuardarCambios.innerText = "Cambiar contrasena"
                        contenedorBotones.appendChild(botonGuardarCambios)

                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                        botonCancelarCambios.innerText = "Cancelar cambio"
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarClave.cancelarCambios)
                        contenedorBotones.appendChild(botonCancelarCambios)

                        espacioUsuario.appendChild(contenedorBotones)



                        const controladorCampos = () => {
                            let estadoGlobalCampos = "vacios"
                            campos.map((campo) => {
                                if (campo.value.length > 0) {
                                    estadoGlobalCampos = "noVacios"
                                }
                            })

                            const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                            if (estadoGlobalCampos === "vacios") {
                                selectorContenedorBotones.removeAttribute("style")
                            }
                            if (estadoGlobalCampos === "noVacios") {
                                selectorContenedorBotones.style.display = "flex"
                            }

                        }

                        const campos = [...document.querySelectorAll("[campo]")]
                        campos.map((campo) => {
                            campo.addEventListener("input", controladorCampos)
                        })



                    }




                },
                guardarCambios: async () => {
                    const usuarioIDX = document.querySelector("[usuarioIDX]")
                    const claveNueva = document.querySelector("[componente=claveNueva]")
                    const claveNuevaDos = document.querySelector("[componente=claveNuevaDos]")

                    const datosParaActualizar = {
                        zona: "administracion/usuarios/actualizarClaveUsuarioAdministracion",
                        usuarioIDX: usuarioIDX.getAttribute("usuarioIDX"),
                        claveNueva: claveNueva.value,
                        claveNuevaDos: claveNuevaDos.value
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(datosParaActualizar)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        const campos = [...document.querySelectorAll("[campo]")]
                        campos.map((campo) => {
                            campo.value = null
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")
                    }

                },
                cancelarCambios: () => {
                    const campos = [...document.querySelectorAll("[campo]")]

                    campos.map((campo) => {
                        campo.value = null
                    })
                    const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                    selectorContenedorBotones.removeAttribute("style")



                },



            },
            cambiarEstadoCuenta: {
                UI: async () => {

                    const estadoCuentaActual = document.querySelector("[estadoCuenta]").getAttribute("estadoCuenta")

                    let tituloBoton
                    let valorBoton
                    let textoDescriptivo
                    let tituloInformativo
                    if (estadoCuentaActual === "activado") {
                        tituloBoton = "Desactivar cuenta"
                        tituloInformativo = "Confirma la desactivacion de la cuenta"
                        textoDescriptivo = "¿Quieres Desactivar esta cuenta? El usuario de esta cuenta podra volver a logearse con ella. Sus implicaciones son inmediatas"
                        valorBoton = "desactivado"
                    }

                    if (estadoCuentaActual === "desactivado") {
                        tituloBoton = "Activar cuenta"
                        tituloInformativo = "Confirma la activacion de la cuenta"
                        textoDescriptivo = "¿Quieres Aactivar esta cuenta? El usuario de esta cuenta no podra volver a logearse con ella. Sus implicaciones son inmediatas"
                        valorBoton = "activado"
                    }

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const tituloCancelarReserva = document.createElement("p")
                    tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                    tituloCancelarReserva.innerText = tituloInformativo
                    contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = textoDescriptivo

                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                    contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = tituloBoton
                    botonCancelar.setAttribute("nuevoEstado", valorBoton)
                    botonCancelar.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarEstadoCuenta.transactor)
                    bloqueBotones.appendChild(botonCancelar)

                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cancelar el cambio de estado"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)
                },
                transactor: async (nuevoEstado) => {
                    const nuevoEstado_ = nuevoEstado.target.getAttribute("nuevoEstado")
                    const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                    const transaccion = {
                        zona: "administracion/usuarios/actualizarEstadoCuentaDesdeAdministracion",
                        "usuarioIDX": usuarioIDX,
                        "nuevoEstado": nuevoEstado_
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        const estadoActual = respuestaServidor?.estadoCuenta

                        let estadoCuentaUI
                        if (estadoActual === "activado") {
                            estadoCuentaUI = "Desactivar cuenta"
                        }

                        if (estadoActual === "desactivado") {
                            estadoCuentaUI = "Activar cuenta"
                        }

                        const selectorEstadoCuentaUI = document.querySelector("[estadoCuenta]")
                        selectorEstadoCuentaUI.innerText = estadoCuentaUI
                        selectorEstadoCuentaUI.setAttribute("estadoCuenta", estadoActual)

                        const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })


                    }

                }
            },
            eliminarCuenta: {
                UI: async () => {

                    const estadoCuentaActual = document.querySelector("[estadoCuenta]").getAttribute("estadoCuenta")

                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")

                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")

                    const tituloCancelarReserva = document.createElement("p")
                    tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                    tituloCancelarReserva.innerText = "Confirma la eliminacion de esta cuenta"
                    contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)

                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")

                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.innerText = "Si quieres elimianr esta cuenta confirma su eliminacion. Esta operacion es inmediata e irreversible. Una vez eliminada la cuenta sus datos con irrecuperables. Si deseas mantener los datos de esta cuenta pero a su vez congelar su funcionalidad es recomendable desactivar la cuenta antes que eliminarla"

                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                    contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)

                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.innerText = "Confirmar y eliminar cuenta"
                    botonCancelar.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.eliminarCuenta.transactor)
                    bloqueBotones.appendChild(botonCancelar)

                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.innerText = "Cancelar la eliminacion"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        let selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)
                },
                transactor: async (nuevoEstado) => {
                    const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                    const transaccion = {
                        zona: "administracion/usuarios/eliminarCuentaDesdeAdministracion",
                        "usuarioIDX": usuarioIDX
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {
                        const selectorAdvertenciaInmersiva = [...document.querySelectorAll("[componente=advertenciaInmersiva]")]
                        selectorAdvertenciaInmersiva.map((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })


                        const navegacion = {
                            "vista": "/administracion/usuarios",
                            "tipoOrigen": "menuNavegador"
                        }
                        return casaVitini.componentes.controladorVista(navegacion)






                    }

                }
            },
            componentes: {
                bannerIDX: (metadatos) => {

                    const usuarioIDX = metadatos.usuarioIDX
                    const rol = metadatos.rol
                    const rolUITexto = rol.substring(0, 1).toUpperCase() + rol.substring(1);

                    const contenedorUsuarioIDX = document.createElement("div")
                    contenedorUsuarioIDX.classList.add("detallesUsuario_contenedorUsuarioIDX")
                    contenedorUsuarioIDX.setAttribute("componente", "contenedorUsuarioUX")

                    const esferaUsuario = document.createElement("div")
                    esferaUsuario.classList.add("detallesUsuario_esferaUsuario")
                    esferaUsuario.setAttribute("componente", "esferaUsuario")
                    contenedorUsuarioIDX.appendChild(esferaUsuario)


                    const contenedorDatosGlobales = document.createElement("div")
                    contenedorDatosGlobales.classList.add("detallesUsuario_contenedorDatosGlobales")
                    contenedorDatosGlobales.setAttribute("componente", "contenedorDatosGlobales")

                    const usuarioIDXUI = document.createElement("div")
                    usuarioIDXUI.classList.add("detallesUsuario_usuarioUI")
                    usuarioIDXUI.setAttribute("usuarioIDX", usuarioIDX)
                    usuarioIDXUI.innerText = usuarioIDX
                    contenedorDatosGlobales.appendChild(usuarioIDXUI)

                    const rolUI = document.createElement("div")
                    rolUI.classList.add("detallesUsuario_rolUI")
                    rolUI.setAttribute("componente", "rolUI")
                    rolUI.innerText = rolUITexto
                    contenedorDatosGlobales.appendChild(rolUI)

                    contenedorUsuarioIDX.appendChild(contenedorDatosGlobales)
                    return contenedorUsuarioIDX
                }


            },
            modificarIDX: {
                UI: async (usuarioIDX) => {

                    const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                    const transaccion = {
                        zona: "administracion/usuarios/detallesUsuario",
                        usuarioIDX: usuarioIDX
                    }
                    const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const rol = respuestaServidor?.ok.rol
                        const usuariosIDX = respuestaServidor?.ok.usuarioIDX
                        const datosBanner = {
                            usuarioIDX: usuarioIDX,
                            rol: rol
                        }
                        const contenedorDetallesUsuario = document.createElement("div")
                        contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                        contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")

                        const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                        contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                        espacioUsuario.appendChild(contenedorDetallesUsuario)

                        const contenedorCampos = document.createElement("div")
                        contenedorCampos.classList.add("detallesUsuario_contenedorCampos")

                        const infoModificarIDX = document.createElement("div")
                        infoModificarIDX.classList.add("detallesUsuario_infoModificarIDX")
                        infoModificarIDX.innerText = `Escriba el nuevo VitiniID para este usuario en el campo de abajo. Recuerde que modificar el IDX deja libre el anterior IDX para que otro usuario si quiere lo obtenga`
                        contenedorCampos.appendChild(infoModificarIDX)

                        const campoNuevoIDX = document.createElement("input")
                        campoNuevoIDX.classList.add("detallesUsuario_campoNuevoIDX")
                        campoNuevoIDX.setAttribute("campo", "nuevoIDX")
                        campoNuevoIDX.setAttribute("componente", "nuevoIDX")
                        campoNuevoIDX.placeholder = usuariosIDX
                        contenedorCampos.appendChild(campoNuevoIDX)

                        espacioUsuario.appendChild(contenedorCampos)


                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                        contenedorBotones.setAttribute("componente", "contenedorBotones")

                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.modificarIDX.guardarCambios)
                        botonGuardarCambios.innerText = "Guardar el nuevo VitiniID"
                        contenedorBotones.appendChild(botonGuardarCambios)

                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                        botonCancelarCambios.innerText = "Cancelar cambios"
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.modificarIDX.cancelarCambios)
                        contenedorBotones.appendChild(botonCancelarCambios)

                        espacioUsuario.appendChild(contenedorBotones)



                        const controladorCampos = () => {
                            let estadoGlobalCampos = "vacios"
                            campos.map((campo) => {
                                if (campo.value.length > 0) {
                                    estadoGlobalCampos = "noVacios"
                                }
                            })

                            const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                            if (estadoGlobalCampos === "vacios") {
                                selectorContenedorBotones.removeAttribute("style")
                            }
                            if (estadoGlobalCampos === "noVacios") {
                                selectorContenedorBotones.style.display = "flex"
                            }

                        }

                        const campos = [...document.querySelectorAll("[campo]")]
                        campos.map((campo) => {
                            campo.addEventListener("input", controladorCampos)
                        })



                    }




                },
                guardarCambios: async () => {

                    const usuarioIDX = document.querySelector("[usuarioIDX]")
                    const nuevoIDX = document.querySelector("[componente=nuevoIDX]")
                    const datosParaActualizar = {
                        zona: "administracion/usuarios/actualizarIDXAdministracion",
                        usuarioIDX: usuarioIDX.getAttribute("usuarioIDX"),
                        nuevoIDX: nuevoIDX.value
                    }

                    const respuestaServidor = await casaVitini.componentes.servidor(datosParaActualizar)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.ok) {

                        const IDXEstablecido = respuestaServidor?.usuarioIDX

                        nuevoIDX.value = null
                        nuevoIDX.placeholder = IDXEstablecido
                        usuarioIDX.innerHTML = IDXEstablecido
                        usuarioIDX.setAttribute("usuarioIDX", IDXEstablecido)

                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")

                        const vistaActual = `/administracion/usuarios/${IDXEstablecido}/modificar_idx`
                        const estado = {
                            "zona": vistaActual,
                            "estadoInternoZona": "estado",
                            "tipoCambio": "total"
                        }
                        const titulo = 'Casa Vitini'
                        window.history.replaceState(estado, titulo, vistaActual);




                    }

                },
                cancelarCambios: () => {
                    const campos = [...document.querySelectorAll("[campo]")]

                    campos.map((campo) => {
                        campo.value = null
                    })
                    const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                    selectorContenedorBotones.removeAttribute("style")



                },

            },
        },
        crearCuenta: {
            UI: () => {

                const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")

                const contenedorGlobal = document.createElement("div")
                contenedorGlobal.classList.add("usuariosCrearCuenta_contenedorGlobal")


                const informacionCuenta = document.createElement("div")
                informacionCuenta.classList.add("usuariosCrearCuenta_informacion")
                informacionCuenta.innerText = `Escriba el nombre de usuario de la nueva cuenta, este será el VitiniID de la nueva cuenta. Luego pulse en el botón crear cuenta y tras crearse la cuenta ira al panel de la cuenta creada donde podrá seguir con las modificaciones pertinentes. Las nuevas cuentas se crean sin contraseña, deberá establecer una en el panel de la cuenta tras crearla. Una vez establezca la contraseña deberá activar la cuenta.`
                contenedorGlobal.appendChild(informacionCuenta)

                const campoNuevoUsuario = document.createElement("input")
                campoNuevoUsuario.classList.add("usuariosCrearCuenta_campoUsuario")
                campoNuevoUsuario.setAttribute("campo", "usuarioIDX")
                campoNuevoUsuario.placeholder = "Escriba el nuevo VitiniID"
                contenedorGlobal.appendChild(campoNuevoUsuario)


                const infoPass = document.createElement("div")
                infoPass.classList.add("usuariosCrearCuenta_informacion")
                infoPass.innerText = `Escribe la contraseña de esta cuenta. Una vez creada la cuenta siempre puedes cambiar la contraseña desde el panel del usuario. Es recomendable escribir una contraseña compleja creada con un generador de contraseñas para que sea irrecordable y usar un gestor de contraseñas para gestionar las contraseñas.  `
                contenedorGlobal.appendChild(infoPass)

                const campoClave = document.createElement("input")
                campoClave.classList.add("usuariosCrearCuenta_campoUsuario")
                campoClave.setAttribute("campo", "clave")
                campoClave.placeholder = "Escriba una contraseña para este nuevo usuario"
                campoClave.type = "password"
                contenedorGlobal.appendChild(campoClave)




                const informacionRol = document.createElement("div")
                informacionRol.classList.add("usuariosCrearCuenta_informacion")
                informacionRol.innerText = `Selecciona el rol de la nueva cuenta. Si es una cuenta para un cliente de Casa Vitini escoge el rol Cliente. Si es una cuenta para un Empleado de Casa Vitini escoge el rol Empleado y si es para un administrador de Casa Vitini escoge el rol Administrador. Cada rol otorga un acceso y autoridad distintos. Por ejemplo, el rol Cliente solo permite administrar la propia cuenta, no da acceso al panel de control de administración. El rol empleado si da acceso al panel de administración, pero hay ciertas operaciones que no puede hacer como por ejemplo alterar precio, ofertas o configuraciones de alojamiento. Si puede realizar reservas, modificar reservas, cancelar reservas, pero no eliminarlas. El rol de Administrador puede hacer cualquier cosa.`
                contenedorGlobal.appendChild(informacionRol)


                const selectorRol = document.createElement("select")
                selectorRol.classList.add("usuariosCrearCuenta_campoUsuario")
                selectorRol.setAttribute("campo", "selectorRol")

                const opcionInical = document.createElement("option");
                opcionInical.value = "";
                opcionInical.selected = "true"
                opcionInical.disabled = "true"
                opcionInical.text = "Selecciona el rol de la nueva cuenta";
                selectorRol.add(opcionInical);

                const rolAdministrador = document.createElement("option");
                rolAdministrador.value = "administrador";
                rolAdministrador.text = "Administrador";
                selectorRol.add(rolAdministrador);

                const rolEmpleado = document.createElement("option");
                rolEmpleado.value = "empleado";
                rolEmpleado.text = "Empleado";
                selectorRol.add(rolEmpleado);


                const rolCliente = document.createElement("option");
                rolCliente.value = "cliente";
                rolCliente.text = "Cliente";
                selectorRol.add(rolCliente);

                contenedorGlobal.appendChild(selectorRol)

                espacioUsuario.appendChild(contenedorGlobal)

                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("usuariosCrearCuenta_contenedorBotones")

                const botonCrearUsuario = document.createElement("div")
                botonCrearUsuario.classList.add("usuarioCrearCuenta_botonV1")
                botonCrearUsuario.innerText = "Crear nueva cuenta de usuario"
                botonCrearUsuario.addEventListener("click", casaVitini.administracion.usuarios.crearCuenta.transasctor)
                contenedorBotones.appendChild(botonCrearUsuario)

                espacioUsuario.appendChild(contenedorBotones)











            },
            transasctor: async () => {

                const nuevoUsuarioIDX = document.querySelector("[campo=usuarioIDX]").value
                const clave = document.querySelector("[campo=clave]").value
                const rol = document.querySelector("[campo=selectorRol]").value

                const metadatos = {
                    zona: "administracion/usuarios/crearCuentaDesdeAdministracion",
                    usuarioIDX: nuevoUsuarioIDX,
                    clave: clave,
                    rol: rol
                }

                const respuestaServidor = await casaVitini.componentes.servidor(metadatos)
                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.ok) {
                    const usuarioIDX = respuestaServidor?.usuarioIDX

                    const navegacion = {
                        "vista": "/administracion/usuarios/" + usuarioIDX,
                        "tipoOrigen": "menuNavegador"
                    }
                    return casaVitini.componentes.controladorVista(navegacion)



                }


            }
        }

    },
    calendario: {
        arranque: async () => {
            const granuladoURL = casaVitini.componentes.granuladorURL()
            const parametros = granuladoURL.parametros
            const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
            const calendario = {}
            const ultimoDirectorio = granuladoURL.directorios[granuladoURL.directorios.length - 1]
            document.body.style.backgroundImage = 'url("/componentes/imagenes/f5.jpeg")';
            document.body.classList.add("difunmadoFondo")
            // Llama a la función al cargar la página y en eventos que puedan cambiar la altura del div
            window.removeEventListener("resize", casaVitini.administracion.calendario.controlVertical);
            window.addEventListener('resize', casaVitini.administracion.calendario.controlVertical);
            const instanciaUID = casaVitini.componentes.codigoFechaInstancia()

            calendario.instanciaUID = instanciaUID
            calendario.instanciaUIDMes = "uidInicialMes"
            const contenedorCapas = {
                capas: [],
                capasCompuestas: {}
            }
            console.log("parametros", parametros)
            if (parametros.fecha) {
                const fecha = parametros.fecha.split("-")
                const mes = Number(fecha[0])
                const ano = Number(fecha[1])

                calendario.tipo = "personalizado"
                calendario.comando = "construyeObjeto"
                calendario.ano = ano
                calendario.mes = mes
                let parametrosURL = []
                for (const conjunto of contenedorSeguroParaParametros) {
                    const par = conjunto.split(":")
                    const parametro = par[0]
                    const valor = par[1]
                    const estructuraURLParametro = `${parametro}:${valor}`
                    parametrosURL.push(estructuraURLParametro)

                    if (parametro === "capa") {
                        const capaEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(valor)
                        contenedorCapas.capas.push(capaEnCamel)
                    }
                    if (parametro !== "fecha" && parametro !== "capa") {
                        const parametroEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(parametro)
                        const composicionCapa = valor.split("=")
                        contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                    }
                }
                if (parametrosURL.length === 0) {
                    calendario.url = ""
                } else {
                    calendario.url = parametrosURL.join("/")
                }
            } else if (parametros.dia) {
                return casaVitini.administracion.calendario.detallesDelDia()
            } else if (ultimoDirectorio === "calendario") {
                const calendarioActual = {
                    tipo: "actual",
                    comando: "construyeObjeto"
                }
                calendario.tipo = "actual"
                calendario.comando = "construyeObjeto"
                const calendarioResuelto = await casaVitini.componentes.resolverCalendarioNuevo(calendarioActual)
                console.log("calendarioResuelto", calendarioResuelto)


                calendario.tipo = "personalizado"
                calendario.comando = "construyeObjeto"
                calendario.ano = calendarioResuelto.ano
                calendario.mes = calendarioResuelto.mes
                /*
               
                                               {
                                   "calendario": "ok",
                                   "ano": 2024,
                                   "mes": 1,
                                   "dia": 31,
                                   "tiempo": "presente",
                                   "posicionDia1": 1,
                                   "numeroDiasPorMes": 31
                               }               
                               */
                contenedorCapas.capas = ["global"]
                calendario.url = `fecha:${calendarioResuelto.mes}-${calendarioResuelto.ano}/capa:global`


            } else {
                return
            }
            calendario.tipoRegistro = "actualizar"
            casaVitini.administracion.calendario.controladorRegistros(calendario)
            document.querySelector("section").style.maxWidth = "100%"
            document.querySelector("section").style.height = "100%"

            // const calendarioResuelto = await casaVitini.componentes.resolverCalendarioNuevo(calendario)
            const tipoFecha = {
                almacenamientoCalendarioID: "calendarioGlobal",
                instanciaUID: instanciaUID
            }

            casaVitini.administracion.calendario.constructorCalendarioNuevo(tipoFecha)
            const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
            //const selectorCapas = calendarioRenderizado.querySelector("[componente=selectorCapas]")


            const apartamentosLista = await casaVitini.administracion.calendario.obtenerConfiguracionesApartamento()
            if (apartamentosLista.length > 0) {

                const tituloApartamentos = document.createElement("option");
                tituloApartamentos.value = "";
                tituloApartamentos.disabled = "true"
                tituloApartamentos.text = "Apartamentos";
                //selectorCapas.add(tituloApartamentos);

                for (const detallesApartamento of apartamentosLista) {

                    const apartamentoIDV = detallesApartamento.apartamentoIDV
                    const apartamentoUI = detallesApartamento.apartamentoUI

                    const selectorApartamento = document.createElement("option");
                    selectorApartamento.value = apartamentoIDV;
                    selectorApartamento.setAttribute("tipoCapa", "porApartamento")
                    selectorApartamento.text = apartamentoUI;
                    //selectorCapas.add(selectorApartamento);
                }
            }

            const calendariosListaAirnbnb = await casaVitini.administracion.calendario.obtenerCalendariosSincronizados.airbnb()
            if (calendariosListaAirnbnb.length > 0) {

                const tituloApartamentos = document.createElement("option");
                tituloApartamentos.value = "";
                tituloApartamentos.disabled = "true"
                tituloApartamentos.text = "Airbnb";
                //selectorCapas.add(tituloApartamentos);

                for (const detallesCalendario of calendariosListaAirnbnb) {

                    const apartamentoIDV = detallesCalendario.apartamentoIDV
                    const apartamentoUI = detallesCalendario.apartamentoUI
                    const calendarioUID = detallesCalendario.calendarioUID
                    const nombre = detallesCalendario.nombre

                    const selectorApartamento = document.createElement("option");
                    selectorApartamento.value = calendarioUID;
                    selectorApartamento.setAttribute("tipoCapa", "calendarioSincronizadoAirbnb")
                    selectorApartamento.text = `${nombre} (${apartamentoUI})`;
                    //selectorCapas.add(selectorApartamento);
                }
            }


            await casaVitini.administracion.calendario.configuraMes(calendario)

            const metadatos = {
                instanciaUID: instanciaUID,
                contenedorCapas: contenedorCapas
            }
            return casaVitini.administracion.calendario.capas(metadatos)


        },
        constructorCalendarioNuevo: (metadatos) => {

            const almacenamientoVolatilUID = metadatos.almacenamientoCalendarioID
            if (!almacenamientoVolatilUID) {
                let error = "El constructor del calendario, necesita un nombre para el almacenamiento volatil"
                return casaVitini.ui.vistas.advertenciaInmersiva(error)
            }
            const instanciaUID = metadatos.instanciaUID
            if (!instanciaUID) {
                const error = "El contructor del calendario necesita una instanciaUID para el contenedor del calendario"
                return casaVitini.ui.vistas.advertenciaInmersiva(error)
            }

            const calendario = document.createElement("div")
            calendario.setAttribute("class", "administracion_calendario_calendarioUI")
            calendario.setAttribute("campo", "calendario")
            calendario.setAttribute("contenedor", "calendario")
            calendario.setAttribute("componente", "marcoCalendarioGlobal")
            calendario.setAttribute("almacenamientoCalendarioID", almacenamientoVolatilUID)
            //calendario.setAttribute("tipoCalendario", tipoFecha)
            // calendario.setAttribute("calendarioIO", calendarioIO)
            calendario.setAttribute("elemento", "flotante")
            //calendario.setAttribute("perfilMes", perfilMes)
            // calendario.setAttribute("IO", calendarioIO)
            calendario.style.display = "none"

            const cartelInfoCalendarioEstado = document.createElement("div")
            cartelInfoCalendarioEstado.setAttribute("class", "cartelInfoCalendarioEstado")
            cartelInfoCalendarioEstado.setAttribute("componente", "infoCalendario")
            cartelInfoCalendarioEstado.setAttribute("campo", "calendario")
            //cartelInfoCalendarioEstado.innerText = mensajeInfo

            const marcoBotonesGlobales = document.createElement("nav")
            marcoBotonesGlobales.setAttribute("class", "marcoBotonesGlobales")

            const botonSelectorMultiCapa = document.createElement("div")
            botonSelectorMultiCapa.classList.add("botonSelectorMulticapa")
            botonSelectorMultiCapa.innerText = "Capas del calendario"
            botonSelectorMultiCapa.addEventListener("click", async () => {
                const granuladoURL = casaVitini.componentes.granuladorURL()
                const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                const contenedorCapas = {
                    capas: [],
                    capasCompuestas: {}
                }

                for (const conjunto of contenedorSeguroParaParametros) {
                    const par = conjunto.split(":")
                    const parametro = par[0]
                    const valor = par[1]
                    if (parametro === "capa") {
                        const capaEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(valor)
                        contenedorCapas.capas.push(capaEnCamel)
                    }
                    if (parametro !== "fecha" && parametro !== "capa") {
                        const parametroEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(parametro)
                        const composicionCapa = valor.split("=")
                        contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                    }
                }


                const contenedorMenuCapas = document.createElement("div")
                contenedorMenuCapas.classList.add("contenedorMenuCapas")
                contenedorMenuCapas.setAttribute("componente", "contenedorMenuCapas")

                const titulo = document.createElement("div")
                titulo.classList.add("titulo")
                titulo.innerText = "Capas del calendario"
                contenedorMenuCapas.appendChild(titulo)

                // Falta la ccapa global
                const botonAplicar = document.createElement("div")
                botonAplicar.classList.add("boton")
                botonAplicar.innerText = "Aplicar y cerrar"
                botonAplicar.addEventListener("click", () => {
                    const instanciaUIDMes = casaVitini.componentes.codigoFechaInstancia()
                    document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=marcoMes]`)
                        .setAttribute("instanciaUID", instanciaUIDMes)
                    const capasSelecionadas = []
                    const estructura = {
                        capas: [],
                        capasCompuestas: {}
                    }

                    const elementosSeleccionados = [...document.querySelectorAll("[componente=contenedorMenuCapas] [estado=seleccionado]")]
                    for (const elementoSeleccionado of elementosSeleccionados) {
                        const capaUID = elementoSeleccionado.getAttribute("capaUID")
                        capasSelecionadas.push(capaUID)
                    }

                    if (capasSelecionadas.includes("global")) {
                        estructura.capas.push("global")
                    } else {
                        const capasSimples = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID][tipo=capaSimple][estado=seleccionado]")
                        capasSimples.forEach((capa) => {
                            const capaUID = capa.getAttribute("capaUID")
                            estructura.capas.push(capaUID)
                        })
                        console.log("capasSelecionadas", capasSelecionadas)

                        console.log("capasSelecionadas.includes(todoLosApartamentos)", capasSelecionadas.includes("todosLosApartamentos"))
                        if (!capasSelecionadas.includes("todosLosApartamentos")) {
                            const apartametnosSeleccionados = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID=porApartamento][estado=seleccionado]")
                            const porApartamento = []
                            apartametnosSeleccionados.forEach((apartamento) => {
                                const apartamentoIDV = apartamento.getAttribute("porApartamento")
                                porApartamento.push(apartamentoIDV)
                            })
                            if (apartametnosSeleccionados.length > 0) {
                                estructura.capasCompuestas.porApartamento = porApartamento
                                estructura.capas.push("porApartamento")
                            }

                        } else {
                            estructura.capas.push("todosLosApartamentos")
                        }
                        if (!capasSelecionadas.includes("todoAirbnb")) {
                            const calendariosAirBnbSeleccionados = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID=calendariosAirbnb][estado=seleccionado]")
                            const calendariosAirbnb = []

                            calendariosAirBnbSeleccionados.forEach((calendario) => {
                                const calendarioUID = calendario.getAttribute("calendariosAirbnb")
                                calendariosAirbnb.push(calendarioUID)
                            })
                            if (calendariosAirBnbSeleccionados.length > 0) {
                                estructura.capasCompuestas.calendariosAirbnb = calendariosAirbnb
                                estructura.capas.push("calendariosAirbnb")
                            }
                        } else {
                            estructura.capas.push("todoAirbnb")
                        }
                    }

                    if (estructura.capas.length === 0) {
                        const mensaje = "Selecciona alguna capa para aplicarla en el calendario. No has seleccionado ninguna capa. Si por el contrario lo que quieres es cerrar la pantalla de capas pulsa en le boton cerrar."
                        return casaVitini.ui.vistas.advertenciaInmersivaSuperPuesta(mensaje)
                    }
                    console.log("estructura", estructura)
                    casaVitini.componentes.limpiarAdvertenciasInmersivas()
                    const metadatos = {
                        contenedorCapas: estructura,
                        instanciaUID: instanciaUID,
                        origen: "menuDesplegable",
                        instanciaUIDMes: instanciaUIDMes
                    }
                    casaVitini.administracion.calendario.capas(metadatos)

                })
                contenedorMenuCapas.appendChild(botonAplicar)

                const botonCancelar = document.createElement("div")
                botonCancelar.classList.add("boton")
                botonCancelar.innerText = "Cerrar"
                botonCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)
                contenedorMenuCapas.appendChild(botonCancelar)

                const grupoGlobalCapas = document.createElement("div")
                grupoGlobalCapas.classList.add("contenedorGrupoSinFondo")

                const contenedorCapaGlobal = document.createElement("div")
                contenedorCapaGlobal.classList.add("contenedorCapa")
                contenedorCapaGlobal.setAttribute("capaUID", "global")

                let filaIconoTitulo = document.createElement("div")
                filaIconoTitulo.classList.add("filaIconoTexto")

                const iconoGlobal = document.createElement("div")
                iconoGlobal.classList.add("icono")

                let estadoSelector = document.createElement("div")
                estadoSelector.classList.add("estadoSelector")
                estadoSelector.setAttribute("componente", "icono")

                iconoGlobal.appendChild(estadoSelector)
                filaIconoTitulo.appendChild(iconoGlobal)

                const tituloGlobal = document.createElement("div")
                tituloGlobal.classList.add("tituloCapa")
                tituloGlobal.classList.add("negrita")
                tituloGlobal.innerText = "Global"

                filaIconoTitulo.appendChild(tituloGlobal)
                contenedorCapaGlobal.appendChild(filaIconoTitulo)
                grupoGlobalCapas.appendChild(contenedorCapaGlobal)

                const contenedorCapaReservas = document.createElement("div")
                contenedorCapaReservas.classList.add("contenedorCapa")
                contenedorCapaReservas.setAttribute("capaUID", "reservas")
                contenedorCapaReservas.setAttribute("tipo", "capaSimple")

                filaIconoTitulo = document.createElement("div")
                filaIconoTitulo.classList.add("filaIconoTexto")

                const iconoReservas = document.createElement("div")
                iconoReservas.classList.add("icono")

                estadoSelector = document.createElement("div")
                estadoSelector.classList.add("estadoSelector")
                estadoSelector.setAttribute("componente", "icono")

                iconoReservas.appendChild(estadoSelector)
                filaIconoTitulo.appendChild(iconoReservas)

                const tituloReservas = document.createElement("div")
                tituloReservas.classList.add("tituloCapa")
                tituloReservas.classList.add("negrita")
                tituloReservas.innerText = "Reservas"

                filaIconoTitulo.appendChild(tituloReservas)
                contenedorCapaReservas.appendChild(filaIconoTitulo)
                grupoGlobalCapas.appendChild(contenedorCapaReservas)

                const contenedorTodosLosBloqueos = document.createElement("div")
                contenedorTodosLosBloqueos.classList.add("contenedorCapa")
                contenedorTodosLosBloqueos.setAttribute("capaUID", "todosLosBloqueos")
                contenedorTodosLosBloqueos.setAttribute("tipo", "capaSimple")

                filaIconoTitulo = document.createElement("div")
                filaIconoTitulo.classList.add("filaIconoTexto")

                const iconoTodosLosBloqueos = document.createElement("div")
                iconoTodosLosBloqueos.classList.add("icono")
                estadoSelector = document.createElement("div")
                estadoSelector.classList.add("estadoSelector")
                estadoSelector.setAttribute("componente", "icono")

                iconoTodosLosBloqueos.appendChild(estadoSelector)

                filaIconoTitulo.appendChild(iconoTodosLosBloqueos)
                const tituloTodosLosBloqueos = document.createElement("div")
                tituloTodosLosBloqueos.classList.add("tituloCapa")
                tituloTodosLosBloqueos.classList.add("negrita")
                tituloTodosLosBloqueos.innerText = "Todos los bloqueos"

                filaIconoTitulo.appendChild(tituloTodosLosBloqueos)

                contenedorTodosLosBloqueos.appendChild(filaIconoTitulo)
                grupoGlobalCapas.appendChild(contenedorTodosLosBloqueos)
                contenedorMenuCapas.appendChild(grupoGlobalCapas)

                const apartamentosLista = await casaVitini.administracion.calendario.obtenerConfiguracionesApartamento()
                if (apartamentosLista.length > 0) {

                    const contenedorTodosLosApartamentos = document.createElement("div")
                    contenedorTodosLosApartamentos.classList.add("contenedorGrupoFondo")
                    contenedorTodosLosApartamentos.setAttribute("grupo", "campo")

                    filaIconoTitulo = document.createElement("div")
                    filaIconoTitulo.classList.add("filaIconoTexto")
                    filaIconoTitulo.setAttribute("capaUID", "todosLosApartamentos")
                    filaIconoTitulo.setAttribute("tipo", "global")
                    filaIconoTitulo.setAttribute("grupo", "cabeza")


                    const iconoTodosLosApartamentos = document.createElement("div")
                    iconoTodosLosApartamentos.classList.add("icono")
                    estadoSelector = document.createElement("div")
                    estadoSelector.classList.add("estadoSelector")
                    estadoSelector.setAttribute("componente", "icono")

                    iconoTodosLosApartamentos.appendChild(estadoSelector)



                    filaIconoTitulo.appendChild(iconoTodosLosApartamentos)
                    const tituloTodosLosApartamentos = document.createElement("div")
                    tituloTodosLosApartamentos.classList.add("tituloCapa")
                    tituloTodosLosApartamentos.innerText = "Todos los apartamentos"
                    tituloTodosLosApartamentos.classList.add("negrita")


                    filaIconoTitulo.appendChild(tituloTodosLosApartamentos)
                    contenedorTodosLosApartamentos.appendChild(filaIconoTitulo)



                    const contenedorListaPorApartamento = document.createElement("div")
                    contenedorListaPorApartamento.classList.add("contenedorListaApartamentos")

                    for (const detallesApartamento of apartamentosLista) {

                        const apartamentoIDV = detallesApartamento.apartamentoIDV
                        const apartamentoUI = detallesApartamento.apartamentoUI

                        const contenedorApartamento = document.createElement("div")
                        contenedorApartamento.classList.add("contenedorCapa")
                        contenedorApartamento.setAttribute("porApartamento", apartamentoIDV)
                        contenedorApartamento.setAttribute("capaUID", "porApartamento")
                        contenedorApartamento.setAttribute("grupo", "elemento")

                        filaIconoTitulo = document.createElement("div")
                        filaIconoTitulo.classList.add("filaIconoTexto")

                        const iconoApartamento = document.createElement("div")
                        iconoApartamento.classList.add("icono")
                        estadoSelector = document.createElement("div")
                        estadoSelector.classList.add("estadoSelector")
                        estadoSelector.setAttribute("componente", "icono")

                        iconoApartamento.appendChild(estadoSelector)
                        filaIconoTitulo.appendChild(iconoApartamento)

                        const tituloApartamento = document.createElement("div")
                        tituloApartamento.classList.add("tituloCapa")
                        tituloApartamento.innerText = apartamentoUI

                        filaIconoTitulo.appendChild(tituloApartamento)

                        contenedorApartamento.appendChild(filaIconoTitulo)
                        contenedorListaPorApartamento.appendChild(contenedorApartamento)
                    }
                    contenedorTodosLosApartamentos.appendChild(contenedorListaPorApartamento)
                    contenedorMenuCapas.appendChild(contenedorTodosLosApartamentos)

                }

                const calendariosListaAirnbnb = await casaVitini.administracion.calendario.obtenerCalendariosSincronizados.airbnb()
                if (calendariosListaAirnbnb.length > 0) {

                    const grupoAirbnb = document.createElement("div")
                    grupoAirbnb.classList.add("contenedorGrupoFondo")
                    grupoAirbnb.setAttribute("grupo", "campo")


                    filaIconoTitulo = document.createElement("div")
                    filaIconoTitulo.classList.add("filaIconoTexto")
                    filaIconoTitulo.setAttribute("capaUID", "todoAirbnb")
                    filaIconoTitulo.setAttribute("tipo", "global")
                    filaIconoTitulo.setAttribute("grupo", "cabeza")


                    const iconoTodosAirbnb = document.createElement("div")
                    iconoTodosAirbnb.classList.add("icono")

                    estadoSelector = document.createElement("div")
                    estadoSelector.classList.add("estadoSelector")
                    estadoSelector.setAttribute("componente", "icono")

                    iconoTodosAirbnb.appendChild(estadoSelector)

                    filaIconoTitulo.appendChild(iconoTodosAirbnb)

                    const tituloTodoAirbnb = document.createElement("div")
                    tituloTodoAirbnb.classList.add("tituloCapa")
                    tituloTodoAirbnb.classList.add("negrita")

                    tituloTodoAirbnb.innerText = "Todos los calendarios de Airbnb"

                    filaIconoTitulo.appendChild(tituloTodoAirbnb)
                    grupoAirbnb.appendChild(filaIconoTitulo)

                    const contenedorListaPorApartamento = document.createElement("div")
                    contenedorListaPorApartamento.classList.add("contenedorListaApartamentos")

                    for (const detallesCalendario of calendariosListaAirnbnb) {

                        const apartamentoIDV = detallesCalendario.apartamentoIDV
                        const apartamentoUI = detallesCalendario.apartamentoUI
                        const calendarioUID = detallesCalendario.calendarioUID
                        const nombre = detallesCalendario.nombre

                        const contenedorCalendarioAirbnb = document.createElement("div")
                        contenedorCalendarioAirbnb.classList.add("contenedorCapa")
                        contenedorCalendarioAirbnb.setAttribute("capaUID", "calendariosAirbnb")
                        contenedorCalendarioAirbnb.setAttribute("calendariosAirbnb", calendarioUID)
                        contenedorCalendarioAirbnb.setAttribute("grupo", "elemento")


                        filaIconoTitulo = document.createElement("div")
                        filaIconoTitulo.classList.add("filaIconoTexto")

                        const iconoCalendarioAirbnb = document.createElement("div")
                        iconoCalendarioAirbnb.classList.add("icono")
                        estadoSelector = document.createElement("div")
                        estadoSelector.classList.add("estadoSelector")
                        estadoSelector.setAttribute("componente", "icono")

                        iconoCalendarioAirbnb.appendChild(estadoSelector)
                        filaIconoTitulo.appendChild(iconoCalendarioAirbnb)

                        const tituloCalendarioAirbnb = document.createElement("div")
                        tituloCalendarioAirbnb.classList.add("tituloCapa")
                        tituloCalendarioAirbnb.innerText = nombre

                        filaIconoTitulo.appendChild(tituloCalendarioAirbnb)
                        contenedorCalendarioAirbnb.appendChild(filaIconoTitulo)

                        contenedorListaPorApartamento.appendChild(contenedorCalendarioAirbnb)
                    }
                    grupoAirbnb.appendChild(contenedorListaPorApartamento)
                    contenedorMenuCapas.appendChild(grupoAirbnb)










                }

                const pantallaInmersiva = casaVitini.componentes.ui.pantallaInmersivaPersonalizada()
                const destino = pantallaInmersiva.querySelector("[destino=inyector]")
                destino.appendChild(contenedorMenuCapas)
                document.body.appendChild(pantallaInmersiva)

                const controladorSelectoresCapas = (selector) => {
                    const contenedorCapa = selector.target.closest("[capaUID]")
                    const todasLasCapas = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID]")
                    const capaUID = contenedorCapa.getAttribute("capaUID")
                    const todoLosIconos = document.querySelectorAll("[componente=contenedorMenuCapas] [componente=icono]")
                    const todasLasCapasGlobales = document.querySelectorAll("[componente=contenedorMenuCapas] [tipo=global]")
                    const grupo = contenedorCapa.getAttribute("grupo")
                    const iconoSelecionado = contenedorCapa.querySelector("[componente=icono]")
                    const estadoCapa = contenedorCapa.getAttribute("estado")

                    const controlBotonGlobal = () => {
                        const capasGlobales = [...document.querySelectorAll("[componente=contenedorMenuCapas] [tipo=global], [componente=contenedorMenuCapas] [tipo=capaSimple]")]
                        const capaGlobal = document.querySelector("[componente=contenedorMenuCapas] [capaUID=global]")
                        const iconoCapa = capaGlobal.querySelector("[componente=icono]")
                        let estadoFinal = "seleccionado"
                        for (const capa of capasGlobales) {
                            const estado = capa.getAttribute("estado")
                            if (estado !== "seleccionado") {
                                estadoFinal = "noSeleccionado"
                                break
                            }
                        }

                        if (estadoFinal === "seleccionado") {
                            iconoCapa.style.background = "blue"
                            capaGlobal.setAttribute("estado", "seleccionado")
                        } else {
                            iconoCapa.removeAttribute("style")
                            capaGlobal.removeAttribute("estado")
                        }
                    }

                    if (estadoCapa === "seleccionado") {

                        iconoSelecionado.removeAttribute("style")
                        contenedorCapa.removeAttribute("estado")
                    } else {
                        iconoSelecionado.style.background = "blue"
                        contenedorCapa.setAttribute("estado", "seleccionado")
                    }

                    if (capaUID === "global") {
                        if (estadoCapa === "seleccionado") {
                            todasLasCapas.forEach((capa) => {
                                capa.removeAttribute("estado")
                                capa.querySelector("[componente=icono]").removeAttribute("style")
                            })
                        } else {
                            todasLasCapas.forEach((capa) => {
                                capa.setAttribute("estado", "seleccionado")
                                capa.querySelector("[componente=icono]").style.background = "blue"
                            })
                        }
                    }

                    if (grupo === "cabeza") {
                        const elementosDelGrupo = contenedorCapa.closest("[grupo=campo]").querySelectorAll("[grupo=elemento]")
                        console.log("elementosDelGrupo", contenedorCapa.closest("[grupo=campo]"))
                        if (estadoCapa === "seleccionado") {
                            elementosDelGrupo.forEach((capa) => {
                                capa.removeAttribute("estado")
                                capa.querySelectorAll("[componente=icono]").forEach((icono) => {
                                    icono.removeAttribute("style")
                                })
                            })
                        } else {
                            elementosDelGrupo.forEach((capa) => {
                                capa.setAttribute("estado", "seleccionado")
                                capa.querySelectorAll("[componente=icono]").forEach((icono) => {
                                    icono.style.background = "blue"
                                })
                            })
                        }
                    }

                    if (grupo === "elemento") {
                        const elementosDelGrupo = contenedorCapa.closest("[grupo=campo]").querySelectorAll("[grupo=elemento]")
                        const cabezaGrupo = contenedorCapa.closest("[grupo=campo]").querySelector("[grupo=cabeza]")
                        let estadoFinal = "seleccionado"

                        for (const elemento of elementosDelGrupo) {
                            const estado = elemento.getAttribute("estado")
                            if (estado !== "seleccionado") {
                                estadoFinal = "noSeleccionado"
                                cabezaGrupo.removeAttribute("estado")
                                cabezaGrupo.querySelector("[componente=icono]").removeAttribute("style")
                                break
                            }
                        }

                        if (estadoFinal === "seleccionado") {
                            cabezaGrupo.setAttribute("estado", "seleccionado")
                            cabezaGrupo.querySelector("[componente=icono]").style.background = "blue"
                        }
                    }
                    controlBotonGlobal()
                }

                const capasPorVerificar = contenedorCapas.capas
                const composicionCapaCompuesta = contenedorCapas.capasCompuestas
                const contenedorMenuCapasRenderizado = document.querySelector("[componente=contenedorMenuCapas]")

                if (capasPorVerificar.includes("global")) {

                    contenedorMenuCapasRenderizado.querySelectorAll("[capaUID]").forEach((capa) => {
                        capa.setAttribute("estado", "seleccionado")
                        capa.querySelector("[componente=icono]").style.background = "blue"
                    })
                } else {
                    for (const capaPorVeriticar of capasPorVerificar) {
                        if (composicionCapaCompuesta[capaPorVeriticar]) {
                            const capasSimplesEnCapaCompuesta = composicionCapaCompuesta[capaPorVeriticar]
                            for (const capaSimpleEnCapaCompuesta of capasSimplesEnCapaCompuesta) {
                                const capaUIDConstructor = `[capaUID="${capaPorVeriticar}"][${capaPorVeriticar}="${capaSimpleEnCapaCompuesta}"]`
                                const selectorCapaRenderizada = contenedorMenuCapasRenderizado.querySelector(capaUIDConstructor)
                                selectorCapaRenderizada.setAttribute("estado", "seleccionado")
                                selectorCapaRenderizada.querySelector("[componente=icono]").style.background = "blue"
                            }
                        } else {
                            const capaUIDConstructor = `[capaUID="${capaPorVeriticar}"]`
                            const selectorCapaRenderizada = contenedorMenuCapasRenderizado.querySelector(capaUIDConstructor)
                            selectorCapaRenderizada.setAttribute("estado", "seleccionado")
                            selectorCapaRenderizada.querySelector("[componente=icono]").style.background = "blue"

                            const tipoRolGrupo = selectorCapaRenderizada.getAttribute("grupo")
                            if (tipoRolGrupo === "cabeza") {
                                selectorCapaRenderizada.closest("[grupo=campo]").querySelectorAll("[grupo=elemento]").forEach((elemento) => {
                                    elemento.setAttribute("estado", "seleccionado")
                                    elemento.querySelector("[componente=icono]").style.background = "blue"
                                })


                            }

                        }

                    }

                }
                const selectorCapas = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID]")
                selectorCapas.forEach((selector) => {
                    selector.addEventListener("click", controladorSelectoresCapas)
                })
            })

            marcoBotonesGlobales.appendChild(botonSelectorMultiCapa)
            calendario.appendChild(marcoBotonesGlobales)

            const navegacionMes = document.createElement("nav")
            navegacionMes.setAttribute("class", "adminitracion_calendario_navegacionMes")
            calendario.appendChild(navegacionMes)
            //  calendario.appendChild(cartelInfoCalendarioEstado)

            const botonNavegacionMesAtras = document.createElement("div")
            botonNavegacionMesAtras.setAttribute("class", "administracion_calendario_botonNavegacion")
            botonNavegacionMesAtras.setAttribute("id", "botonAtras")
            botonNavegacionMesAtras.setAttribute("sentido", "atras")

            botonNavegacionMesAtras.innerText = "Atras"
            botonNavegacionMesAtras.addEventListener("click", casaVitini.administracion.calendario.navegacionCalendarioNuevo)
            navegacionMes.appendChild(botonNavegacionMesAtras)

            const contenedorCentralCalendario = document.createElement("div")
            contenedorCentralCalendario.classList.add("adminitracion_calendario_contenedorCentralCalendario")

            const contenedorHerramientasCalendario = document.createElement("div")
            contenedorHerramientasCalendario.classList.add("adminitracion_calendario_contenedorHerramientasCalendario")

            const botonHoy = document.createElement("div")
            botonHoy.classList.add("adminitracion_calendario_selectorCapa")
            botonHoy.innerText = "Hoy"
            botonHoy.addEventListener("click", casaVitini.administracion.calendario.verHoy)
            contenedorHerramientasCalendario.appendChild(botonHoy)

            const selectorCapa = document.createElement("select")
            selectorCapa.classList.add("adminitracion_calendario_selectorCapa")
            selectorCapa.setAttribute("componente", "selectorCapas")
            selectorCapa.addEventListener("change", (e) => {
                const capaIDV = e.target.value
                const instanciaUID = e.target.closest("[instanciaUID]").getAttribute("instanciaUID")
                const opcionSeleccionada = e.target.options[e.target.selectedIndex];

                const tipoCapa = opcionSeleccionada.getAttribute("tipoCapa")

                const metadatos = {
                    capaContenido: capaIDV,
                    capaUID: tipoCapa,
                    instanciaUID: instanciaUID,
                    origen: "menuDesplegable"
                }
                casaVitini.administracion.calendario.capas(metadatos)
            })

            const opcionPreterminada = document.createElement("option");

            opcionPreterminada.value = "";
            opcionPreterminada.selected = "true"
            opcionPreterminada.disabled = "true"
            opcionPreterminada.text = "Capa";
            selectorCapa.add(opcionPreterminada);

            const capaReservas = document.createElement("option");
            capaReservas.value = "reservas";
            capaReservas.setAttribute("tipoCapa", "reservas")
            capaReservas.text = "Reservas";
            selectorCapa.add(capaReservas);

            const capaTodosLosApartamentos = document.createElement("option");
            capaTodosLosApartamentos.value = "todosLosApartamentos";
            capaTodosLosApartamentos.setAttribute("tipoCapa", "todosLosApartamentos")
            capaTodosLosApartamentos.text = "Todos los apartamentos";
            selectorCapa.add(capaTodosLosApartamentos);


            const capaTodosLosBloqueos = document.createElement("option");
            capaTodosLosBloqueos.value = "todosLosBloqueos";
            capaTodosLosBloqueos.setAttribute("tipoCapa", "todosLosBloqueos")
            capaTodosLosBloqueos.text = "Todos los bloqueos";
            selectorCapa.add(capaTodosLosBloqueos);

            //contenedorHerramientasCalendario.appendChild(selectorCapa)
            contenedorCentralCalendario.appendChild(contenedorHerramientasCalendario)

            const navegacionMesReferencia = document.createElement("div")
            navegacionMesReferencia.setAttribute("id", "navegacionMesReferencia")
            navegacionMesReferencia.setAttribute("class", "navegacionMesReferencia")
            navegacionMesReferencia.setAttribute("componente", "mesReferencia")
            contenedorCentralCalendario.appendChild(navegacionMesReferencia)

            navegacionMes.appendChild(contenedorCentralCalendario)


            const botonNavegacionMesAdelante = document.createElement("div")
            botonNavegacionMesAdelante.setAttribute("class", "administracion_calendario_botonNavegacion")
            botonNavegacionMesAdelante.setAttribute("id", "botonAdelante")

            botonNavegacionMesAdelante.innerText = "Adelante"
            botonNavegacionMesAdelante.setAttribute("sentido", "adelante")

            botonNavegacionMesAdelante.addEventListener("click", casaVitini.administracion.calendario.navegacionCalendarioNuevo)
            navegacionMes.appendChild(botonNavegacionMesAdelante)

            const marcoMes = document.createElement("ol")
            marcoMes.setAttribute("id", "marcoMes")
            marcoMes.setAttribute("class", "administracion_calendario_marcoMes")
            marcoMes.setAttribute("componente", "marcoMes")
            marcoMes.setAttribute("instanciaUID", "uidInicialMes")


            const pilaDias = ["Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo"]
            for (const nombreDia of pilaDias) {
                let diaSemana = document.createElement("li")
                diaSemana.setAttribute("class", "nombreDia")
                diaSemana.setAttribute("tipoNombreDia", "extendido")
                diaSemana.innerText = nombreDia
                marcoMes.appendChild(diaSemana)
            }

            const pilaDiasAbreviados = ["L", "M", "X", "J", "V", "S", "D"]
            for (const nombreDia of pilaDiasAbreviados) {
                let diaSemana = document.createElement("li")
                diaSemana.setAttribute("class", "nombreDia")
                diaSemana.setAttribute("tipoNombreDia", "abreviado")
                diaSemana.innerText = nombreDia
                marcoMes.appendChild(diaSemana)
            }
            calendario.appendChild(marcoMes)

            const seccion = document.querySelector("section:not([estado=obsoleto])")
            const bloqueCalendario = document.createElement("div")
            bloqueCalendario.setAttribute("class", "adminsitracion_calendario_bloqueCalendario")
            bloqueCalendario.setAttribute("instanciaUID", instanciaUID)
            bloqueCalendario.setAttribute("componente", "calendarioGlobal")
            // bloqueCalendario.style.top = alturaDinamica + "px"

            const contenedoCalendarioIntermedio = document.createElement("div")
            contenedoCalendarioIntermedio.setAttribute("class", "administracion_calendario_contenedorCalentadioIntermedio")


            //bloqueCalendario.appendChild(cartelInfoCalendarioEstado)
            //bloqueCalendario.style.visibility = "hidden"
            const mensajeSpinner = "Construyendo calendario..."
            const spinner = casaVitini.administracion.calendario.spinner(mensajeSpinner)
            const contenedorCarga = document.createElement("div")
            contenedorCarga.classList.add("administracion_calendario_componente_calendario_contenedoCarga")
            contenedorCarga.setAttribute("contenedor", "contruyendoCalendario")
            //contenedorCarga.setAttribute("elemento", "flotante")
            contenedorCarga.appendChild(spinner)

            contenedoCalendarioIntermedio.appendChild(calendario)
            contenedoCalendarioIntermedio.appendChild(contenedorCarga)
            bloqueCalendario.appendChild(contenedoCalendarioIntermedio)

            document.querySelector("section").appendChild(bloqueCalendario)

        },
        constructorMesNuevo: async (calendario) => {
            const instanciaUID = calendario.instanciaUID
            const instanciaUIDMes = calendario.instanciaUIDMes

            const selectorCalendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

            if (!selectorCalendarioRenderizado) {
                return
            }

            const nombreMes = ["Enero", "Febrero", "Marzo", "Abrir", "Mayo", "Junio", "Julio", "Agost", "Septiembre", "Octubre", "Noviembre", "Diciembre"]
            const nombreMesFinal = nombreMes[calendario.mes - 1]
            const indicadorMesAno = nombreMesFinal + " " + calendario.ano

            const navegacionMesReferencia = selectorCalendarioRenderizado.querySelector("[componente=mesReferencia]")

            navegacionMesReferencia.innerText = indicadorMesAno
            navegacionMesReferencia.setAttribute("ano", calendario.ano)
            navegacionMesReferencia.setAttribute("mes", calendario.mes)

            const posicionDia1 = calendario.posicionDia1
            const numeroDiasPorMes = calendario.numeroDiasPorMes;
            const diaActual = calendario.dia

            selectorCalendarioRenderizado.querySelectorAll("[dia]").forEach(diaObsoleto => {
                diaObsoleto.remove()
            });
            selectorCalendarioRenderizado.querySelectorAll("[componente=diaVacio]").forEach(diaObsoleto => {
                diaObsoleto.remove()
            });
            const marcoCalendario = selectorCalendarioRenderizado.querySelector("[componente=marcoCalendarioGlobal]")

            const perfilMes = marcoCalendario?.getAttribute("perfilMes")
            //await new Promise(resolve => setTimeout(resolve, 1000));

            const controlDiasCompletos = {
                zona: "componentes/diasOcupadosTotalmentePorMes",
                mes: Number(calendario.mes),
                ano: Number(calendario.ano)
            }

            const resuelveDiasCompletos = await casaVitini.componentes.servidor(controlDiasCompletos)
            const detallesDiasOcupacion = resuelveDiasCompletos.ok.dias

            let mesActual = calendario.mes
            let anoActual = calendario.ano

            mesActual = String(mesActual).padStart(2, '0');
            mesActual = Number(mesActual)
            anoActual = Number(anoActual)
            const marcoMes = marcoCalendario.querySelector(`[componente=marcoMes][instanciaUID="${instanciaUIDMes}"]`)

            for (let index = 1; index < posicionDia1; index++) {
                const bloqueDia = document.createElement("li")
                bloqueDia.setAttribute("componente", "diaVacio")
                const numeroDiaUI = document.createElement("div")
                numeroDiaUI.classList.add("administracion_calendario_numeroDiaUI")
                numeroDiaUI.innerText = "VACIO"
                bloqueDia.appendChild(numeroDiaUI)

                marcoMes?.appendChild(bloqueDia)


            }

            marcoCalendario?.setAttribute("perfilMes", perfilMes)
            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                let diaFinal = numeroDia + 1;
                diaFinal = Number(diaFinal)
                const bloqueDia = document.createElement("li")
                bloqueDia.setAttribute("class", "administracion_calendario_componenteCalendario_dia")


                const contenedorDia = document.createElement("div")
                contenedorDia.classList.add("administracion_calendario_contenedorInformacionDia")
                contenedorDia.setAttribute("componente", "contenedorDia")

                const numeroDiaUI = document.createElement("div")
                numeroDiaUI.classList.add("administracion_calendario_numeroDiaUI")
                numeroDiaUI.innerText = diaFinal
                contenedorDia.appendChild(numeroDiaUI)

                const contenedorCapa = document.createElement("div")
                contenedorCapa.classList.add("administracion_calendario_contenedorCapa")
                contenedorCapa.setAttribute("contenedor", "capa")
                //contenedorCapa.innerText = "espacio capa"
                //contenedorDia.appendChild(contenedorCapa)

                if (diaFinal === 1) {
                    //   bloqueDia.style.gridColumnStart = posicionDia1
                }
                bloqueDia.setAttribute("dia", diaFinal)
                bloqueDia.setAttribute("estado", "disponible")
                //bloqueDia.addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.seleccionarDia)

                if (calendario.tiempo === "presente") {
                    if (diaFinal === diaActual) {
                        bloqueDia.classList.add("diaDeHoy")
                    }
                }

                if (detallesDiasOcupacion[diaFinal]?.estadoDia === "diaParcial") {
                    bloqueDia.classList.add("diaParcial")
                } else if (detallesDiasOcupacion[diaFinal]?.estadoDia === "diaCompleto") {
                    bloqueDia.classList.add("diaCompleto")
                } else {
                    bloqueDia.classList.add("diaDisponible")
                }

                bloqueDia.appendChild(contenedorDia)
                marcoMes?.appendChild(bloqueDia)
            }

            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"


            if (selectorCalendarioRenderizado) {
                selectorCalendarioRenderizado.querySelector("[contenedor=contruyendoCalendario]")?.remove()
                const contenedorMes = selectorCalendarioRenderizado.querySelector(`[componente=marcoMes][instanciaUID="${instanciaUIDMes}"]`)

                if (contenedorMes) {

                }

                contenedorMes?.removeAttribute("style")
                selectorCalendarioRenderizado.querySelector("[contenedor=calendario]").removeAttribute("style")

            }
        },
        navegacionCalendarioNuevo: async (calendarioRenderizado) => {
            const boton = calendarioRenderizado.target.getAttribute("sentido")
            const granuladoURL = casaVitini.componentes.granuladorURL()
            const parametros = granuladoURL.parametros
            const instanciaUIDMes = casaVitini.componentes.codigoFechaInstancia()
            const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros

            const instanciaUID = calendarioRenderizado.target.closest("[instanciaUID]").getAttribute("instanciaUID")

            document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=marcoMes]`)
                .setAttribute("instanciaUID", instanciaUIDMes)

            let mesActual = Number(document.querySelector("[componente=mesReferencia]").getAttribute("mes"))
            let anoActual = Number(document.querySelector("[componente=mesReferencia]").getAttribute("ano"))

            if (boton === "adelante") {
                if (mesActual + 1 < 13) {
                    mesActual = mesActual + 1
                } else {
                    mesActual = 1
                    anoActual = anoActual + 1
                }
            }

            if (boton === "atras") {
                if (mesActual - 1 > 0) {
                    mesActual = mesActual - 1
                } else {
                    mesActual = 12
                    anoActual = anoActual - 1
                }
            }

            const calendario = {
                tipo: "personalizado",
                comando: "construyeObjeto",
                ano: anoActual,
                mes: mesActual,
                instanciaUID: instanciaUID,
                tipoRegistro: "crear",
            }
            console.log("objetoAnterior", calendario)

            let parametrosURL = []
            const contenedorCapas = {
                capas: [],
                capasCompuestas: {}
            }

            for (const conjunto of contenedorSeguroParaParametros) {
                const par = conjunto.split(":")
                const parametro = par[0]
                const valor = par[1]
                const estructuraURLParametro = `${parametro}:${valor}`
                if (parametro.toLowerCase() !== "fecha") {
                    parametrosURL.push(estructuraURLParametro)
                }

                if (parametro === "capa") {
                    const capaEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(valor)
                    contenedorCapas.capas.push(capaEnCamel)
                }
                if (parametro !== "fecha" && parametro !== "capa") {
                    const parametroEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(parametro)
                    const composicionCapa = valor.split("=")
                    contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                }

            }
            calendario.url = `fecha:${mesActual}-${anoActual}/` + parametrosURL.join("/")
            casaVitini.administracion.calendario.controladorRegistros(calendario)
            calendario.instanciaUIDMes = instanciaUIDMes
            await casaVitini.administracion.calendario.configuraMes(calendario)


            const metadatos = {
                instanciaUID: instanciaUID,
                origen: "navegacionEntreMeses",
                contenedorCapas: contenedorCapas,
                instanciaUIDMes: instanciaUIDMes
            }

            casaVitini.administracion.calendario.capas(metadatos)

        },
        verHoy: async (calendarioActual) => {
            const instanciaUID = calendarioActual.target.closest("[instanciaUID]").getAttribute("instanciaUID")
            const calendarioRenderizado = document.querySelector(`[componente=calendarioGlobal][instanciaUID="${instanciaUID}"]`)
            const mesRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("mes"))
            const anoRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("ano"))
            const granuladoURL = casaVitini.componentes.granuladorURL()
            const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
            const parametros = granuladoURL.parametros
            //const mesRenderizado = 

            const instanciaUIDMes = casaVitini.componentes.codigoFechaInstancia()
            calendarioRenderizado.querySelector(`[componente=marcoMes]`)
                .setAttribute("instanciaUID", instanciaUIDMes)


            const selectorDiasRenderizados = calendarioRenderizado.querySelectorAll("[dia]")
            selectorDiasRenderizados.forEach((diaRenderizado) => {
                diaRenderizado.remove()
            })
            const contenedorCalendario = calendarioRenderizado.querySelector(`[contenedor=calendario]`)
            const contenedorMes = calendarioRenderizado.querySelector(`[componente=marcoMes]`)
            contenedorMes.style.height = "auto"

            const contenedorContruyendoCalendarioRenderizado = calendarioRenderizado.querySelectorAll("[contenedor=contruyendoCalendario]")
            contenedorContruyendoCalendarioRenderizado.forEach((contenedorRenderizado) => {
                contenedorRenderizado.remove()
            })

            const mensajeSpinner = "Construyendo mes..."
            const spinner = casaVitini.administracion.calendario.spinner(mensajeSpinner)
            const contenedorCarga = document.createElement("div")
            contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
            contenedorCarga.setAttribute("contenedor", "contruyendoCalendario")
            contenedorCarga.setAttribute("elemento", "flotante")

            contenedorCarga.appendChild(spinner)
            contenedorCalendario.appendChild(contenedorCarga)


            const contenedorCapas = {
                capas: [],
                capasCompuestas: {}
            }
            const parametrosURL = []
            for (const conjunto of contenedorSeguroParaParametros) {
                const par = conjunto.split(":")
                const parametro = par[0]
                const valor = par[1]
                const estructuraURLParametro = `${parametro}:${valor}`
                parametrosURL.push(estructuraURLParametro)

                if (parametro === "capa") {
                    const capaEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(valor)
                    contenedorCapas.capas.push(capaEnCamel)
                }
                if (parametro !== "fecha" && parametro !== "capa") {
                    const parametroEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(parametro)
                    const composicionCapa = valor.split("=")
                    contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                }
            }

            console.log("contenedorCapas", contenedorCapas)
            console.log("parametrosURL", parametrosURL)
            const soloCapasURL = []
            for (const parDeParametro of parametrosURL) {
                const parametro = parDeParametro.split(":")
                if (parametro[0] !== "fecha") {
                    soloCapasURL.push(parDeParametro)
                }
            }

            const calendario = {
                tipo: "actual",
                comando: "construyeObjeto",
                instanciaUID: instanciaUID,
                instanciaUIDMes: instanciaUIDMes

            }
            const calendarioResuelto = await casaVitini.componentes.resolverCalendarioNuevo(calendario)
            const anoPresente = calendarioResuelto.ano
            const mesPresente = calendarioResuelto.mes

            console.log("soloCapasURL", soloCapasURL)
            calendario.url = `fecha:${mesPresente}-${anoPresente}/${soloCapasURL.join("/")}`
            console.log("calenadrio.url", calendario.url)

            if ((mesRenderizado !== mesPresente && anoRenderizado === anoPresente) || (anoRenderizado !== anoPresente)) {
                // ADquitir la url actual, que puede ser diferente segun la capa
                calendario.tipoRegistro = "crear"
                casaVitini.administracion.calendario.controladorRegistros(calendario)
            } else {
                // en el mdo dos siempre actualizar por is la url ha cambiado a selecionar una capa en hoy
                calendario.tipoRegistro = "actualizar"
                casaVitini.administracion.calendario.controladorRegistros(calendario)
            }
            await casaVitini.administracion.calendario.configuraMes(calendario)

            const metadatos = {
                instanciaUID: instanciaUID,
                contenedorCapas: contenedorCapas
            }
            console.log("metadtos",metadatos)
            return casaVitini.administracion.calendario.capas(metadatos)



        },
        configuraMes: async (calendario) => {
            const instanciaUID = calendario.instanciaUID
            delete calendario.instanciaUID
            const instanciaUIDMes = calendario.instanciaUIDMes
            console.log("instanciaUID Error", instanciaUID)
            const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

            const selectorDiasRenderizados = calendarioRenderizado.querySelectorAll("[dia], [componente=eventoUI]")
            selectorDiasRenderizados.forEach((diaRenderizado) => {
                diaRenderizado.remove()
            })
            const contenedorCalendario = calendarioRenderizado.querySelector(`[contenedor=calendario]`)
            const contenedorMes = calendarioRenderizado.querySelector(`[componente=marcoMes]`)
            contenedorMes.style.height = "auto"
            //contenedorMes.setAttribute("instanciaUID", instanciaUIDMes)

            const contenedorContruyendoCalendarioRenderizado = calendarioRenderizado.querySelectorAll("[contenedor=contruyendoCalendario]")
            contenedorContruyendoCalendarioRenderizado.forEach((contenedorRenderizado) => {
                contenedorRenderizado.remove()
            })
            const mensajeSpinner = "Construyendo mes..."
            const spinner = casaVitini.administracion.calendario.spinner(mensajeSpinner)
            const contenedorCarga = document.createElement("div")
            contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
            contenedorCarga.setAttribute("contenedor", "contruyendoCalendario")
            contenedorCarga.setAttribute("elemento", "flotante")

            contenedorCarga.appendChild(spinner)
            contenedorCalendario.appendChild(contenedorCarga)


            const calendarioResuelto = await casaVitini.componentes.resolverCalendarioNuevo(calendario)
            calendarioResuelto.instanciaUID = instanciaUID
            calendarioResuelto.instanciaUIDMes = instanciaUIDMes

            await casaVitini.administracion.calendario.constructorMesNuevo(calendarioResuelto)
            casaVitini.administracion.calendario.controlVertical();

        },
        spinner: (mensaje) => {
            const contenedorSpinner = document.createElement("div")
            contenedorSpinner.classList.add("contenedorSpinner")
            contenedorSpinner.setAttribute("componente", "spinnerListaDeEnlaces")
            contenedorSpinner.setAttribute("contenedor", "spinner")


            const spinnerContainer = document.createElement('div');
            spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
            spinnerContainer.classList.add("lds-spinner");

            for (let i = 0; i < 12; i++) {
                const div = document.createElement('div');
                spinnerContainer.appendChild(div);
            }
            const info = document.createElement("div")
            info.setAttribute("class", "advertenciaInfoFlujoPago")
            info.setAttribute("componente", "mensajeFlujoPasarela")
            info.innerText = mensaje

            const botoCancelar = document.createElement("div")
            botoCancelar.setAttribute("class", "botonV1AdvertenciaInmersiva")
            botoCancelar.innerText = "Cancelar"
            botoCancelar.addEventListener("click", casaVitini.componentes.limpiarAdvertenciasInmersivas)

            contenedorSpinner.appendChild(spinnerContainer)
            contenedorSpinner.appendChild(info)
            // contenedorSpinner.appendChild(botoCancelar)
            return contenedorSpinner
        },
        controlVertical: () => {
            const selectorSeccion = document.querySelector('section')

            const selectorCalendarioGlobal = document.querySelector("[componente=calendarioGlobal]")
            if (!selectorCalendarioGlobal) {
                window.removeEventListener("resize", casaVitini.administracion.calendario.controlVertical);
                return
            }

            const altoRenderizadoSection = selectorSeccion.scrollHeight;
            const alturaVentana = window.innerHeight;


            if (alturaVentana > altoRenderizadoSection) {
                selectorSeccion.style.position = "absolute"
            } else if (alturaVentana === altoRenderizadoSection) {
                selectorSeccion.style.position = "absolute"
            } else if (alturaVentana < altoRenderizadoSection) {
                selectorSeccion.style.position = "relative"
            }
        },
        controladorRegistros: (metadatos) => {

            const titulo = "Administracion"
            const granuladoURL = casaVitini.componentes.granuladorURL()
            const parametros = granuladoURL.parametros
            const tipoRegistro = metadatos.tipoRegistro
            // investigar por que cuando el calendario se arranca no hay ninguna url en el objeto, eso puede ser

            const urlActual = metadatos.url || ""


            const configuracion = { ...metadatos }
            delete configuracion.url
            delete configuracion.tipoRegistro
            delete configuracion.instanciaUID

            const estructuraParametrosFinales = []
            for (const [parametroFinal, valorFinal] of Object.entries(parametros)) {
                const estructura = `${parametroFinal}:${valorFinal}`
                estructuraParametrosFinales.push(estructura)
            }
            let parametrosURLFInal = ""
            if (estructuraParametrosFinales.length > 0) {
                parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
            }
            let constructorURLFinal

            if (urlActual === "") {
                constructorURLFinal = ""
            } else {
                constructorURLFinal = granuladoURL.directoriosFusion + "/" + urlActual
            }
            const estado = {
                zona: constructorURLFinal,
                EstadoInternoZona: "estado",
                tipoCambio: "parcial",
                conpontenteExistente: "marcoCalendarioGlobal",
                funcionPersonalizada: "casaVitini.administracion.calendario.irAFecha",
                datosPaginacion: configuracion
            }
            console.log("tipoRegistro", tipoRegistro, constructorURLFinal, estado)

            if (tipoRegistro === "crear") {
                window.history.pushState(estado, titulo, constructorURLFinal);
            }
            if (tipoRegistro === "actualizar") {
                window.history.replaceState(estado, titulo, constructorURLFinal);
            }

        },
        irAFecha: async (calendario) => {
            const instanciaUID = document.querySelector("[instanciaUID]").getAttribute("instanciaUID")
            const instanciaUIDMes = casaVitini.componentes.codigoFechaInstancia()
            document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=marcoMes]`)
                .setAttribute("instanciaUID", instanciaUIDMes)
            console.log("irAFecha", calendario, "instanciaUID", calendario.instanciaUID)
            calendario.instanciaUIDMes = instanciaUIDMes
            calendario.instanciaUID = instanciaUID

            await casaVitini.administracion.calendario.configuraMes(calendario)
            const granuladoURL = casaVitini.componentes.granuladorURL()
            const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
            const contenedorCapas = {
                capas: [],
                capasCompuestas: {}
            }

            for (const conjunto of contenedorSeguroParaParametros) {
                const par = conjunto.split(":")
                const parametro = par[0]
                const valor = par[1]
                const estructuraURLParametro = `${parametro}:${valor}`
                if (parametro.toLowerCase() !== "fecha") {
                    // parametrosURL.push(estructuraURLParametro)
                }

                if (parametro === "capa") {
                    const capaEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(valor)
                    contenedorCapas.capas.push(capaEnCamel)
                }
                if (parametro !== "fecha" && parametro !== "capa") {
                    const parametroEnCamel = casaVitini.componentes.utilidades.cadenas.snakeToCamel(parametro)
                    const composicionCapa = valor.split("=")
                    contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                }

            }

            const metadatos = {
                instanciaUID: instanciaUID,
                contenedorCapas: contenedorCapas,
                instanciaUIDMes: instanciaUIDMes,
                origen: "historial"
            }

            return casaVitini.administracion.calendario.capas(metadatos)

        },
        capas: async (metadatos) => {

            const contenedorCapas = metadatos.contenedorCapas
            const instanciaUID = metadatos.instanciaUID
            const origen = metadatos.origen

            const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
            let instanciaUIDMes

            if (origen === "navegacionEntreMeses" || origen === "menuDesplegable" || origen === "historial") {
                instanciaUIDMes = metadatos.instanciaUIDMes
            } else {
                instanciaUIDMes = calendarioRenderizado.querySelector("[componente=marcoMes]").getAttribute("instanciaUID")
            }

            const mesRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("mes"))
            const anoRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("ano"))

            const granuladoURL = casaVitini.componentes.granuladorURL()
            const parametros = granuladoURL.parametros
            const selectorCapaRenderizada = calendarioRenderizado.querySelectorAll("[componente=eventoUI]")
            selectorCapaRenderizada.forEach((capaRenderizada) => {
                capaRenderizada.remove()
            })
            // tipoRegistroFinal puede ser actualizar o crear
            let tipoRegistroFinal
            if (origen === "menuDesplegable" || origen === "navegacionEntreMeses") {
                tipoRegistroFinal = "crear"

            }
            casaVitini.administracion.calendario.controlVertical()

            const calendario = {
                tipo: "personalizado",
                comando: "construyeObjeto",
                ano: anoRenderizado,
                mes: mesRenderizado,
                instanciaUID: instanciaUID,
                tipoRegistro: tipoRegistroFinal,
            }
            const obtenerCoordenadasCeldaGrid = (celdaGrid) => {
                const selectorDiaRenderizado = document.querySelector(`[dia="${celdaGrid}"]`);
                const gridContainer = selectorDiaRenderizado.parentElement;
                const items = Array.from(gridContainer.children);

                const index = items.indexOf(selectorDiaRenderizado);

                const columns = parseInt(getComputedStyle(gridContainer).gridTemplateColumns.split(' ').length);
                const row = Math.floor(index / columns) + 1;
                const column = (index % columns) + 1;

                // 
                // 
                // 

                const estructuraFinal = {
                    fila: row,
                    columna: column
                }
                return estructuraFinal
            }
            const obtenerNumeroDeCeldasEnFila = (filaDeseada) => {
                const gridContainer = document.querySelector('[componente=marcoMes]');
                // Obtén todas las celdas dentro del contenedor del grid
                const celdas = Array.from(gridContainer.children);

                // Obtén el número de columnas en el grid
                const columnas = parseInt(getComputedStyle(gridContainer).gridTemplateColumns.split(' ').length);

                // Calcula el índice inicial y final de la fila deseada
                const indiceInicial = (filaDeseada - 1) * columnas;
                const indiceFinal = filaDeseada * columnas;

                // Filtra las celdas que pertenecen a la fila deseada
                const celdasEnFila = celdas.slice(indiceInicial, indiceFinal);

                // Muestra el número de celdas en la fila deseada
                // 
                return celdasEnFila.length
            }
            const obtenerNumeroDeCeldasConAtributoEnFila = (filaDeseada, atributo) => {
                const gridContainer = document.querySelector('[componente=marcoMes]');
                // Obtén todas las celdas dentro del contenedor del grid
                const celdas = Array.from(gridContainer.children);

                // Obtén el número de columnas en el grid
                const columnas = parseInt(getComputedStyle(gridContainer).gridTemplateColumns.split(' ').length);

                // Calcula el índice inicial y final de la fila deseada
                const indiceInicial = (filaDeseada - 1) * columnas;
                const indiceFinal = filaDeseada * columnas;

                // Filtra y cuenta las celdas que pertenecen a la fila deseada y tienen el atributo específico
                const celdasEnFilaConAtributo = celdas.slice(indiceInicial, indiceFinal).filter(celda => celda.getAttribute(atributo) !== null);

                // Muestra el número de celdas en la fila deseada con el atributo específico
                //
                return celdasEnFilaConAtributo.length;
            }
            const filaDeseada = 2; // Puedes cambiar esto según la fila que te interese
            const numeroDeFilasTotales = (gridUID) => {
                const grid = document.querySelector('[componente=marcoMes]');
                const gridStyles = window.getComputedStyle(grid);
                const gridRows = gridStyles.gridTemplateRows.split(' ').length;
                return gridRows
            }
            const diferenciaDeDias = (fechaIncioMes_ISO, fechaSalidaEvento_ISO) => {
                const fecha1 = new Date(fechaIncioMes_ISO); // Primera fecha en formato ISO
                const fecha2 = new Date(fechaSalidaEvento_ISO); // Segunda fecha en formato ISO
                fecha1.setHours(0, 0, 0, 0);
                fecha2.setHours(0, 0, 0, 0);
                // Calcula la diferencia en milisegundos
                const diferenciaEnMilisegundos = Math.abs(fecha2.getTime() - fecha1.getTime());

                // Convierte la diferencia a días
                const diferenciaEnDiasSalida = Math.ceil(diferenciaEnMilisegundos / (1000 * 60 * 60 * 24));

                return diferenciaEnDiasSalida
            }
            const constructorEventoUI = (metadatos) => {

                const eventoUID = metadatos.eventoUID
                const altura = metadatos.altura
                const url = metadatos.url
                const css = metadatos.css
                const inicioColumna = metadatos.inicioColumna
                const finalColumna = metadatos.finalColumna
                const inicioFila = metadatos.inicioFila
                const tipoEvento = metadatos.tipoEvento

                //detallesDelEvento
                const detallesDelEvento = metadatos.detallesDelEvento

                let nombreEventoFinal = "Evento sin infomración"
                let urlUI
                if (tipoEvento === "reserva") {
                    const reservaUID = detallesDelEvento.reserva
                    nombreEventoFinal = "Reserva " + reservaUID
                    urlUI = "/administracion/reservas/" + url
                }

                if (tipoEvento === "todosLosApartamentos") {
                    const reservaUID = detallesDelEvento.reserva
                    const apartamentoUI = detallesDelEvento.apartamentoUI
                    nombreEventoFinal = apartamentoUI
                    urlUI = `/administracion/reservas/${reservaUID}`
                }
                if (tipoEvento === "porApartamento") {
                    const reservaUID = detallesDelEvento.reserva
                    const apartamentoUI = detallesDelEvento.apartamentoUI
                    nombreEventoFinal = apartamentoUI
                    urlUI = `/administracion/reservas/${reservaUID}`
                }
                if (tipoEvento === "todosLosBloqueos") {
                    const bloqueoUID = detallesDelEvento.uid
                    const apartamentoIDV = detallesDelEvento.apartamentoIDV
                    const apartamentoUI = detallesDelEvento.apartamentoUI
                    nombreEventoFinal = `Bloqueo ${apartamentoUI}`
                    urlUI = `/administracion/gestion_de_bloqueos_temporales/${apartamentoIDV}/${bloqueoUID}`
                }

                if (tipoEvento === "calendarioAirbnb") {
                    const descripcion = detallesDelEvento.descripcion || ""
                    const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                    const match = descripcion.match(regex);
                    if (match) {
                        const urlEvento = match?.[1] ?? null;
                        nombreEventoFinal = `Airbnb`
                        urlUI = urlEvento

                    } else {
                        nombreEventoFinal = `Evento sin información`
                        urlUI = ""
                    }
                }

                const eventoUI = document.createElement("a")
                eventoUI.innerText = nombreEventoFinal
                eventoUI.style.marginTop = altura + "px"
                eventoUI.setAttribute("vista", urlUI)
                eventoUI.setAttribute("componente", "eventoUI")
                eventoUI.setAttribute("eventoUID", eventoUID)
                eventoUI.classList.add(css)
                eventoUI.setAttribute("href", urlUI)
                eventoUI.style.gridColumn = `${inicioColumna} /${finalColumna} span `
                eventoUI.style.gridRow = `${inicioFila}`
                eventoUI.addEventListener("mouseover", () => {
                    const selectorEventoUIRenderizado = document.querySelectorAll(`[eventoUID="${eventoUID}"]`)
                    selectorEventoUIRenderizado.forEach((eventoRenderizado) => {
                        eventoRenderizado.classList.add("administracion_calendario_eventoUI_selecionado")
                    })
                })
                eventoUI.addEventListener("mouseout", () => {
                    const selectorEventoUIRenderizado = document.querySelectorAll(`[eventoUID="${eventoUID}"]`)
                    selectorEventoUIRenderizado.forEach((eventoRenderizado) => {
                        eventoRenderizado.classList.remove("administracion_calendario_eventoUI_selecionado")
                    })
                })
                return eventoUI

            }
            const siguienteLunes = (primerDiaDelMes) => {
                if (primerDiaDelMes === 1) {
                    return 8;
                }
                else if (primerDiaDelMes > 1) {
                    return 8 - (primerDiaDelMes - 1);
                }
                else {
                    return 1 + (1 - primerDiaDelMes);
                }
            }
            const renderizadorEventos = (contenedorEventos) => {

                const eventosMes = contenedorEventos.eventosMes
                const eventosEnDetalle = contenedorEventos.eventosEnDetalle
                const instanciaUIDMes = contenedorEventos.instanciaUIDMes
                const selectorMesDestino = calendarioRenderizado.querySelector(`[instanciaUID="${instanciaUIDMes}"]`)

                if (selectorMesDestino) {
                    // Solo queda este error - Esto deberia estar dentro de renderizados de eventos
                    const selectorDias = selectorMesDestino.querySelectorAll("[dia]")
                    selectorDias.forEach((dia) => {
                        dia.removeAttribute("eventosContenedor")
                    })

                    for (const detallesDia of Object.entries(eventosMes)) {
                        const fechaDestino = detallesDia[0].split("-")
                        const diaDestino = Number(fechaDestino[2])

                        const selectorContenedorDia = selectorMesDestino.querySelector(`[dia="${diaDestino}"]`)
                        // Analizar por que salta este error
                        const selectorArrayRenderizado = selectorContenedorDia.getAttribute("eventosContenedor")
                        const objetoEventos = JSON.parse(selectorArrayRenderizado) || {}
                        let posicionEvento = 0
                        const posicionColumnaDia = obtenerCoordenadasCeldaGrid(diaDestino).columna

                        const posicionesEventosReservadas = {}
                        if (!objetoEventos.eventos) {
                            objetoEventos.eventos = {}
                        }

                        if (diaDestino === 1) {
                            let posicionesIninical = posicionEvento
                            for (const eventosDiaActual of detallesDia[1]) {
                                const reservaUID_diaActual = eventosDiaActual.eventoUID

                                objetoEventos.eventos[reservaUID_diaActual] = posicionesIninical

                                posicionesEventosReservadas[posicionesIninical] = "posicionReservada"
                                posicionesIninical++
                            }

                        } else {
                            const numeroDiaAnterior = diaDestino - 1
                            const selectorContenedorDiaAnterior = selectorMesDestino
                                .querySelector(`[dia="${numeroDiaAnterior}"]`)
                                ?.getAttribute("eventosContenedor") || "{}"
                            const eventosDelDiaAnterior = JSON.parse(selectorContenedorDiaAnterior) || {}
                            const contenedorEventosDiaAnterior = eventosDelDiaAnterior.eventos ? eventosDelDiaAnterior.eventos : {}

                            // Primer loop, se comprueba que eventos de hoy estan el dia anterior para reservas posiciones.
                            for (const [eventoAnteriorUID, posicionEventoAnterior] of Object.entries(contenedorEventosDiaAnterior)) {
                                for (const eventosDiaActual of detallesDia[1]) {
                                    const eventoActualUID = eventosDiaActual.eventoUID

                                    if (String(eventoActualUID) === String(eventoAnteriorUID)) {
                                        const posicionDelApartamentoDelDiaAnteior = contenedorEventosDiaAnterior[eventoActualUID]
                                        objetoEventos.eventos[eventoActualUID] = posicionDelApartamentoDelDiaAnteior
                                        posicionesEventosReservadas[posicionDelApartamentoDelDiaAnteior] = "posicionReservada"
                                    }
                                }
                            }

                            if (posicionColumnaDia === 1) {
                                let posicionesIninical = posicionEvento
                                objetoEventos.eventos = {}

                                Object.keys(posicionesEventosReservadas).forEach((posicion) => {
                                    delete posicionesEventosReservadas[posicion]
                                })
                                for (const eventosDiaActual of detallesDia[1]) {
                                    const evendoDiaActualUID = eventosDiaActual.eventoUID
                                    objetoEventos.eventos[evendoDiaActualUID] = posicionesIninical
                                    posicionesEventosReservadas[posicionesIninical] = "posicionReservada"
                                    posicionesIninical++
                                }
                            }
                        }

                        for (const eventosDelDia of detallesDia[1]) {
                            const eventoUID = eventosDelDia.eventoUID
                            if (posicionColumnaDia === 1) {
                            }
                            if (objetoEventos.eventos[eventoUID] === undefined) {
                                while (posicionesEventosReservadas[posicionEvento] === "posicionReservada") {
                                    posicionEvento++;
                                }
                                objetoEventos.eventos[eventoUID] = Number(posicionEvento)
                                posicionEvento++;
                            }
                        }
                        selectorMesDestino.querySelector(`[dia="${diaDestino}"]`)
                            .setAttribute("eventosContenedor", JSON.stringify(objetoEventos))
                    }

                    for (const detallesDelEvento of eventosEnDetalle) {

                        const reservaUID = detallesDelEvento.reserva
                        const eventoUID = detallesDelEvento.eventoUID
                        const reservaUI = detallesDelEvento.reserva
                        const nombreEventoUI = detallesDelEvento.nombreEventoUI
                        const fechaEntrada_ISO = detallesDelEvento.fechaEntrada_ISO
                        const fechaSalida_ISO = detallesDelEvento.fechaSalida_ISO
                        const duracion_en_dias = detallesDelEvento.duracion_en_dias
                        const tipoEvento = detallesDelEvento.tipoEvento

                        const fechaEntradaArray = fechaEntrada_ISO.split("-")
                        const diaEntrada = Number(fechaEntradaArray[2])
                        const mesEntrada = Number(fechaEntradaArray[1])
                        const anoEntrada = Number(fechaEntradaArray[0])

                        const fechaSalidaArray = fechaSalida_ISO.split("-")
                        const diaSalida = Number(fechaSalidaArray[2])
                        const mesSalida = Number(fechaSalidaArray[1])
                        const anoSalida = Number(fechaSalidaArray[0])

                        const configuracionEventoUI = {
                            eventoUID: eventoUID,
                            tipoEvento: tipoEvento,
                            detallesDelEvento: detallesDelEvento
                        }

                        if (mesRenderizado === mesEntrada && anoRenderizado === anoEntrada) {

                            const selectorContenedorDia = selectorMesDestino.querySelector(`[dia="${diaEntrada}"]`)
                            const eventosContenedor = selectorContenedorDia.getAttribute("eventosContenedor")
                            const posicionEventoUI = (JSON.parse(eventosContenedor)).eventos[eventoUID]

                            const conteoEventos = Object.keys(JSON.parse(eventosContenedor).eventos).length - 1
                            const coordenadasDiaInicio = obtenerCoordenadasCeldaGrid(diaEntrada);

                            const inicioFila = coordenadasDiaInicio.fila - 1
                            const inicioColumna = coordenadasDiaInicio.columna
                            const restoDeCeldas = 7 - inicioColumna
                            const finalColumna = (duracion_en_dias - 1) >= restoDeCeldas ? (restoDeCeldas + 1) : (duracion_en_dias);

                            let alturaFinal
                            if (posicionEventoUI === 0) {
                                alturaFinal = 40
                            } else if (posicionEventoUI === 1) {
                                alturaFinal = 90
                            } else if (posicionEventoUI > 1) {
                                alturaFinal = (posicionEventoUI * 40) + ((posicionEventoUI + 1) * 10) + 30
                            }

                            let restoDeDiasDelEvento = restoDeCeldas > duracion_en_dias ? 0 : (duracion_en_dias - 1) - restoDeCeldas
                            let filaSiguiente = inicioFila + 1
                            const numeroFilasTotales = numeroDeFilasTotales()


                            if (restoDeDiasDelEvento <= 0) {
                                configuracionEventoUI.css = "administracion_calendario_eventoUI_inicioFinal"
                            } else {
                                configuracionEventoUI.css = "administracion_calendario_eventoUI_inicioSolo"

                            }

                            configuracionEventoUI.altura = alturaFinal
                            configuracionEventoUI.inicioColumna = inicioColumna
                            configuracionEventoUI.finalColumna = finalColumna
                            configuracionEventoUI.inicioFila = inicioFila

                            const eventoUI = constructorEventoUI(configuracionEventoUI)
                            selectorMesDestino.appendChild(eventoUI)

                            const posicionDiaUno = obtenerCoordenadasCeldaGrid(1).columna
                            const filaInicialDelEvento = (obtenerCoordenadasCeldaGrid(diaEntrada).fila - 2)
                            let sumadorDiaFila
                            if ((filaInicialDelEvento) === 1) {
                                sumadorDiaFila = siguienteLunes(posicionDiaUno)
                            } else {
                                let sumaDias = 7 * (filaInicialDelEvento - 1)
                                sumadorDiaFila = siguienteLunes(posicionDiaUno) + sumaDias
                            }

                            while (restoDeDiasDelEvento > 0 && numeroFilasTotales >= filaSiguiente) {
                                const selectorContenedorDia_loop = selectorMesDestino.querySelector(`[dia="${sumadorDiaFila}"]`)
                                const eventosContenedor_loop = selectorContenedorDia_loop.getAttribute("eventosContenedor")
                                sumadorDiaFila = 7 + sumadorDiaFila

                                const posicionEventoUI_loop = (JSON.parse(eventosContenedor_loop)).eventos[eventoUID]
                                let alturaFinal
                                if (posicionEventoUI_loop === 0) {
                                    alturaFinal = 40
                                } else if (posicionEventoUI_loop === 1) {
                                    alturaFinal = 90
                                } else if (posicionEventoUI_loop > 1) {
                                    alturaFinal = (posicionEventoUI_loop * 40) + ((posicionEventoUI_loop + 1) * 10) + 30
                                }
                                const celdasPorFilaConAtributo = obtenerNumeroDeCeldasConAtributoEnFila(filaSiguiente + 1, "dia")

                                const finalColumna_ = restoDeDiasDelEvento >= celdasPorFilaConAtributo ? celdasPorFilaConAtributo : (restoDeDiasDelEvento);
                                restoDeDiasDelEvento = Math.abs(restoDeDiasDelEvento - finalColumna_)

                                if (restoDeDiasDelEvento <= 0) {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_finalSolo"
                                } else {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_transicion"
                                }

                                configuracionEventoUI.altura = alturaFinal
                                configuracionEventoUI.inicioColumna = 1
                                configuracionEventoUI.finalColumna = finalColumna_
                                configuracionEventoUI.inicioFila = filaSiguiente

                                const eventoUI = constructorEventoUI(configuracionEventoUI)
                                selectorMesDestino.appendChild(eventoUI)
                                filaSiguiente = filaSiguiente + 1
                            }

                        } else {
                            const selectorContenedorDia = selectorMesDestino.querySelector(`[dia="1"]`)
                            const eventosContenedor = selectorContenedorDia.getAttribute("eventosContenedor")
                            const posicionEventoUI = (JSON.parse(eventosContenedor)).eventos[eventoUID]

                            const coordenadasDiaInicio = obtenerCoordenadasCeldaGrid(1);
                            const inicioFila = coordenadasDiaInicio.fila - 1
                            const inicioColumna = coordenadasDiaInicio.columna
                            const restoDeCeldas = 7 - inicioColumna
                            const fechaIncioMes_ISO = `${anoRenderizado}-${String(mesRenderizado).padStart(2, "0")}-01`
                            //const fechaSalidaEvento_ISO = `${anoSalida}-${mesSalida}-${diaSalida}`;
                            const diasRestantes = diferenciaDeDias(fechaIncioMes_ISO, fechaSalida_ISO);
                            const finalColumna = diasRestantes >= restoDeCeldas ? (restoDeCeldas + 1) : (diasRestantes + 1);

                            let alturaFinal
                            if (posicionEventoUI === 0) {
                                alturaFinal = 40
                            } else if (posicionEventoUI === 1) {
                                alturaFinal = 90
                            } else if (posicionEventoUI > 1) {
                                alturaFinal = (posicionEventoUI * 40) + ((posicionEventoUI + 1) * 10) + 30
                            }

                            let restoDeDiasDelEvento = restoDeCeldas > diasRestantes ? 0 : Math.abs((diasRestantes) - restoDeCeldas)
                            let filaSiguiente = inicioFila + 1
                            const numeroFilasTotales = numeroDeFilasTotales()

                            if (restoDeDiasDelEvento <= 0) {
                                configuracionEventoUI.css = "administracion_calendario_eventoUI_finalSolo"
                            } else {
                                configuracionEventoUI.css = "administracion_calendario_eventoUI_transicion"
                            }

                            configuracionEventoUI.altura = alturaFinal
                            configuracionEventoUI.inicioColumna = inicioColumna
                            configuracionEventoUI.finalColumna = finalColumna
                            configuracionEventoUI.inicioFila = inicioFila

                            const eventoUI = constructorEventoUI(configuracionEventoUI)
                            selectorMesDestino.appendChild(eventoUI)
                            const posicionDiaUno = obtenerCoordenadasCeldaGrid(1).columna
                            let sumadorDiaFila = siguienteLunes(posicionDiaUno)

                            while (restoDeDiasDelEvento > 0 && numeroFilasTotales >= filaSiguiente) {
                                const selectorContenedorDia_loop = selectorMesDestino.querySelector(`[dia="${sumadorDiaFila}"]`)
                                sumadorDiaFila = 7 + sumadorDiaFila

                                const eventosContenedor__loop = selectorContenedorDia_loop.getAttribute("eventosContenedor")
                                const posicionEventoUI_loop = (JSON.parse(eventosContenedor__loop)).eventos[eventoUID]

                                let alturaFinal
                                if (posicionEventoUI_loop === 0) {
                                    alturaFinal = 40
                                } else if (posicionEventoUI_loop === 1) {
                                    alturaFinal = 90
                                } else if (posicionEventoUI_loop > 1) {
                                    alturaFinal = (posicionEventoUI_loop * 40) + ((posicionEventoUI_loop + 1) * 10) + 30
                                }
                                const celdasPorFilaConAtributo = obtenerNumeroDeCeldasConAtributoEnFila(filaSiguiente + 1, "dia")

                                const finalColumna_ = restoDeDiasDelEvento >= celdasPorFilaConAtributo ? celdasPorFilaConAtributo : restoDeDiasDelEvento;
                                restoDeDiasDelEvento = restoDeDiasDelEvento - finalColumna_

                                if (restoDeDiasDelEvento <= 0) {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_finalSolo"
                                } else {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_transicion"
                                }

                                configuracionEventoUI.altura = alturaFinal
                                configuracionEventoUI.inicioColumna = 1
                                configuracionEventoUI.finalColumna = finalColumna_
                                configuracionEventoUI.inicioFila = filaSiguiente

                                const eventoUI = constructorEventoUI(configuracionEventoUI)
                                selectorMesDestino.appendChild(eventoUI)

                                filaSiguiente = filaSiguiente + 1
                            }
                        }
                    }
                }
            }
            const capasSimples = contenedorCapas.capas
            const capasCompuestas = contenedorCapas.capasCompuestas
            const primerFormatoURL = []

            for (const capaSimple of capasSimples) {
                const capaSimpleURL = casaVitini.componentes.utilidades.cadenas.camelToSnake(capaSimple)
                const composicioCapa = capasCompuestas[capaSimple]
                let final
                if (composicioCapa) {
                    final = `capa:${capaSimpleURL}/${capaSimpleURL}:${composicioCapa.join("=")}`
                } else {
                    final = `capa:${capaSimpleURL}`
                }
                primerFormatoURL.push(final)
            }
            const segundoFormatoURL = primerFormatoURL.join("/")

            if (origen === "menuDesplegable") {
                calendario.url = `fecha:${mesRenderizado}-${anoRenderizado}/` + segundoFormatoURL
                casaVitini.administracion.calendario.controladorRegistros(calendario)
            }
            const transaccion = {
                zona: "administracion/calendario/capas/multiCapa",
                fecha: `${mesRenderizado}-${anoRenderizado}`,
                contenedorCapas: contenedorCapas
            }
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)
            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }

            if (respuestaServidor?.ok) {
                const contenedorEventos = {
                    eventosMes: respuestaServidor.eventosMes,
                    eventosEnDetalle: respuestaServidor.eventosEnDetalle,
                    instanciaUIDMes: instanciaUIDMes
                }
                renderizadorEventos(contenedorEventos)
            }
            casaVitini.administracion.calendario.controlVertical()
        },
        obtenerConfiguracionesApartamento: async () => {
            const transaccion = {
                zona: "administracion/arquitectura/configuraciones/listarConfiguracionApartamentos"
            }
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {
                const estructuraFinal = []
                const configuracionesApartamentos = respuestaServidor?.ok
                if (configuracionesApartamentos.length > 0) {
                    for (const detalleApartamento of configuracionesApartamentos) {
                        const apartamentoIDV = detalleApartamento.apartamentoIDV
                        const apartamentoUI = detalleApartamento.apartamentoUI
                        const estadoConfiguracion = detalleApartamento.estadoConfiguracion

                        const detallesApartamento = {
                            apartamentoIDV: apartamentoIDV,
                            apartamentoUI: apartamentoUI,
                            estadoConfiguracion: estadoConfiguracion,
                        }
                        estructuraFinal.push(detallesApartamento)
                    }
                }
                return estructuraFinal
            }
        },
        obtenerCalendariosSincronizados: {
            airbnb: async () => {
                const transaccion = {
                    zona: "administracion/calendario/obtenerNombresCalendarios/airbnb"
                }
                const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

                if (respuestaServidor?.error) {
                    return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const estructuraFinal = []
                    const calendariosSincronizados = respuestaServidor?.calendariosSincronizados
                    if (calendariosSincronizados.length > 0) {
                        for (const detallesDelCalendario of calendariosSincronizados) {
                            const apartamentoIDV = detallesDelCalendario.apartamentoIDV
                            const apartamentoUI = detallesDelCalendario.apartamentoUI
                            const nombre = detallesDelCalendario.nombre
                            const calendarioUID = detallesDelCalendario.uid

                            const detallesApartamento = {
                                apartamentoIDV: apartamentoIDV,
                                apartamentoUI: apartamentoUI,
                                nombre: nombre,
                                calendarioUID: calendarioUID
                            }
                            estructuraFinal.push(detallesApartamento)
                        }
                    }
                    return estructuraFinal
                }
            }

        }
    },
    componentes: {
        obtenerApartamentos: async () => {
            const transaccion = {
                zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
            }
            const respuestaServidor = await casaVitini.componentes.servidor(transaccion)

            if (respuestaServidor?.error) {
                return casaVitini.ui.vistas.advertenciaInmersiva(respuestaServidor?.error)
            }
            if (respuestaServidor?.ok) {
                return respuestaServidor?.ok
            }
        }
    }
}


const convertirFuncionesEnCadenas = (objeto) => {
    for (const clave in objeto) {
        if (typeof objeto[clave] === "function") {
            objeto[clave] = objeto[clave].toString();
        } else if (typeof objeto[clave] === "object") {
            // Si la propiedad es un objeto, llama recursivamente a la función
            convertirFuncionesEnCadenas(objeto[clave]);
        }
    }
}


const administracionUI = () => {
    convertirFuncionesEnCadenas(administracion);
    const objetoComoJSON = JSON.stringify(administracion);
    return objetoComoJSON
}

export { administracionUI }