"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Certificate Manager Service API
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates with IONOS services and your internal connected resources. For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic.  The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificatesApi = exports.CertificatesApiFactory = exports.CertificatesApiFp = exports.CertificatesApiAxiosParamCreator = void 0;
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * CertificatesApi - axios parameter creator
 * @export
 */
exports.CertificatesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes a certificate specified by its ID.
         * @summary Delete a Certificate by ID
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesDelete: function (certificateId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (certificateId === null || certificateId === undefined) {
                                throw new base_1.RequiredError('certificateId', 'Required parameter certificateId was null or undefined when calling certificatesDelete.');
                            }
                            localVarPath = "/certificatemanager/certificates/{certificateId}"
                                .replace("{" + "certificateId" + "}", encodeURIComponent(String(certificateId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication basicAuth required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves all available certificates.
         * @summary Get Certificates
         * @param {string} [offset] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results obtained by a request.  Offset is the first element (from the complete list of elements) to be included in the response.
         * @param {string} [limit] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results of a query.  If both \&#39;Offset\&#39; and \&#39;Limit\&#39;are specified, the offset lines are skipped before counting the returned limit lines.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesGet: function (offset, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            localVarPath = "/certificatemanager/certificates";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication basicAuth required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((offset === undefined) && (configuration !== undefined)) {
                                offset = configuration.getDefaultParamValue('offset');
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if ((limit === undefined) && (configuration !== undefined)) {
                                limit = configuration.getDefaultParamValue('limit');
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a certificate specified by its ID.
         * @summary Get a Certificate by ID
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesGetById: function (certificateId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (certificateId === null || certificateId === undefined) {
                                throw new base_1.RequiredError('certificateId', 'Required parameter certificateId was null or undefined when calling certificatesGetById.');
                            }
                            localVarPath = "/certificatemanager/certificates/{certificateId}"
                                .replace("{" + "certificateId" + "}", encodeURIComponent(String(certificateId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication basicAuth required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates the name of the specified certificate.
         * @summary Update a Certificate Name by ID
         * @param {string} certificateId
         * @param {CertificatePatchDto} certificatePatchDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesPatch: function (certificateId, certificatePatchDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (certificateId === null || certificateId === undefined) {
                                throw new base_1.RequiredError('certificateId', 'Required parameter certificateId was null or undefined when calling certificatesPatch.');
                            }
                            if (certificatePatchDto === null || certificatePatchDto === undefined) {
                                throw new base_1.RequiredError('certificatePatchDto', 'Required parameter certificatePatchDto was null or undefined when calling certificatesPatch.');
                            }
                            localVarPath = "/certificatemanager/certificates/{certificateId}"
                                .replace("{" + "certificateId" + "}", encodeURIComponent(String(certificateId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication basicAuth required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof certificatePatchDto !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(certificatePatchDto !== undefined ? certificatePatchDto : {})
                                : (certificatePatchDto || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
         * @summary Add a New Certificate
         * @param {CertificatePostDto} certificatePostDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesPost: function (certificatePostDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (certificatePostDto === null || certificatePostDto === undefined) {
                                throw new base_1.RequiredError('certificatePostDto', 'Required parameter certificatePostDto was null or undefined when calling certificatesPost.');
                            }
                            localVarPath = "/certificatemanager/certificates";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication basicAuth required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof certificatePostDto !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(certificatePostDto !== undefined ? certificatePostDto : {})
                                : (certificatePostDto || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CertificatesApi - functional programming interface
 * @export
 */
exports.CertificatesApiFp = function (configuration) {
    return {
        /**
         * Deletes a certificate specified by its ID.
         * @summary Delete a Certificate by ID
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesDelete: function (certificateId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CertificatesApiAxiosParamCreator(configuration).certificatesDelete(certificateId, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves all available certificates.
         * @summary Get Certificates
         * @param {string} [offset] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results obtained by a request.  Offset is the first element (from the complete list of elements) to be included in the response.
         * @param {string} [limit] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results of a query.  If both \&#39;Offset\&#39; and \&#39;Limit\&#39;are specified, the offset lines are skipped before counting the returned limit lines.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesGet: function (offset, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CertificatesApiAxiosParamCreator(configuration).certificatesGet(offset, limit, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves a certificate specified by its ID.
         * @summary Get a Certificate by ID
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesGetById: function (certificateId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CertificatesApiAxiosParamCreator(configuration).certificatesGetById(certificateId, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the name of the specified certificate.
         * @summary Update a Certificate Name by ID
         * @param {string} certificateId
         * @param {CertificatePatchDto} certificatePatchDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesPatch: function (certificateId, certificatePatchDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CertificatesApiAxiosParamCreator(configuration).certificatesPatch(certificateId, certificatePatchDto, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
         * @summary Add a New Certificate
         * @param {CertificatePostDto} certificatePostDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesPost: function (certificatePostDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.CertificatesApiAxiosParamCreator(configuration).certificatesPost(certificatePostDto, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CertificatesApi - factory interface
 * @export
 */
exports.CertificatesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Deletes a certificate specified by its ID.
         * @summary Delete a Certificate by ID
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesDelete: function (certificateId, options) {
            return exports.CertificatesApiFp(configuration).certificatesDelete(certificateId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves all available certificates.
         * @summary Get Certificates
         * @param {string} [offset] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results obtained by a request.  Offset is the first element (from the complete list of elements) to be included in the response.
         * @param {string} [limit] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results of a query.  If both \&#39;Offset\&#39; and \&#39;Limit\&#39;are specified, the offset lines are skipped before counting the returned limit lines.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesGet: function (offset, limit, options) {
            return exports.CertificatesApiFp(configuration).certificatesGet(offset, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a certificate specified by its ID.
         * @summary Get a Certificate by ID
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesGetById: function (certificateId, options) {
            return exports.CertificatesApiFp(configuration).certificatesGetById(certificateId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the name of the specified certificate.
         * @summary Update a Certificate Name by ID
         * @param {string} certificateId
         * @param {CertificatePatchDto} certificatePatchDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesPatch: function (certificateId, certificatePatchDto, options) {
            return exports.CertificatesApiFp(configuration).certificatesPatch(certificateId, certificatePatchDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
         * @summary Add a New Certificate
         * @param {CertificatePostDto} certificatePostDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certificatesPost: function (certificatePostDto, options) {
            return exports.CertificatesApiFp(configuration).certificatesPost(certificatePostDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CertificatesApi - object-oriented interface
 * @export
 * @class CertificatesApi
 * @extends {BaseAPI}
 */
var CertificatesApi = /** @class */ (function (_super) {
    __extends(CertificatesApi, _super);
    function CertificatesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a certificate specified by its ID.
     * @summary Delete a Certificate by ID
     * @param {CertificatesApiCertificatesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    CertificatesApi.prototype.certificatesDelete = function (requestParameters, options) {
        var _this = this;
        return exports.CertificatesApiFp(this.configuration).certificatesDelete(requestParameters.certificateId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves all available certificates.
     * @summary Get Certificates
     * @param {CertificatesApiCertificatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    CertificatesApi.prototype.certificatesGet = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return exports.CertificatesApiFp(this.configuration).certificatesGet(requestParameters.offset, requestParameters.limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a certificate specified by its ID.
     * @summary Get a Certificate by ID
     * @param {CertificatesApiCertificatesGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    CertificatesApi.prototype.certificatesGetById = function (requestParameters, options) {
        var _this = this;
        return exports.CertificatesApiFp(this.configuration).certificatesGetById(requestParameters.certificateId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the name of the specified certificate.
     * @summary Update a Certificate Name by ID
     * @param {CertificatesApiCertificatesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    CertificatesApi.prototype.certificatesPatch = function (requestParameters, options) {
        var _this = this;
        return exports.CertificatesApiFp(this.configuration).certificatesPatch(requestParameters.certificateId, requestParameters.certificatePatchDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
     * @summary Add a New Certificate
     * @param {CertificatesApiCertificatesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    CertificatesApi.prototype.certificatesPost = function (requestParameters, options) {
        var _this = this;
        return exports.CertificatesApiFp(this.configuration).certificatesPost(requestParameters.certificatePostDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CertificatesApi;
}(base_1.BaseAPI));
exports.CertificatesApi = CertificatesApi;
