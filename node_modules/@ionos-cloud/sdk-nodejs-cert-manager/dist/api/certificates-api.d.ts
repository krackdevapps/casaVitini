/**
 * Certificate Manager Service API
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates with IONOS services and your internal connected resources. For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic.  The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CertificateCollectionDto } from '../model';
import { CertificateDto } from '../model';
import { CertificatePatchDto } from '../model';
import { CertificatePostDto } from '../model';
/**
 * CertificatesApi - axios parameter creator
 * @export
 */
export declare const CertificatesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes a certificate specified by its ID.
     * @summary Delete a Certificate by ID
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesDelete: (certificateId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves all available certificates.
     * @summary Get Certificates
     * @param {string} [offset] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results obtained by a request.  Offset is the first element (from the complete list of elements) to be included in the response.
     * @param {string} [limit] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results of a query.  If both \&#39;Offset\&#39; and \&#39;Limit\&#39;are specified, the offset lines are skipped before counting the returned limit lines.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesGet: (offset?: string, limit?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves a certificate specified by its ID.
     * @summary Get a Certificate by ID
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesGetById: (certificateId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Updates the name of the specified certificate.
     * @summary Update a Certificate Name by ID
     * @param {string} certificateId
     * @param {CertificatePatchDto} certificatePatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesPatch: (certificateId: string, certificatePatchDto: CertificatePatchDto, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
     * @summary Add a New Certificate
     * @param {CertificatePostDto} certificatePostDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesPost: (certificatePostDto: CertificatePostDto, options?: any) => Promise<RequestArgs>;
};
/**
 * CertificatesApi - functional programming interface
 * @export
 */
export declare const CertificatesApiFp: (configuration?: Configuration) => {
    /**
     * Deletes a certificate specified by its ID.
     * @summary Delete a Certificate by ID
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesDelete(certificateId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieves all available certificates.
     * @summary Get Certificates
     * @param {string} [offset] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results obtained by a request.  Offset is the first element (from the complete list of elements) to be included in the response.
     * @param {string} [limit] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results of a query.  If both \&#39;Offset\&#39; and \&#39;Limit\&#39;are specified, the offset lines are skipped before counting the returned limit lines.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesGet(offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificateCollectionDto>>;
    /**
     * Retrieves a certificate specified by its ID.
     * @summary Get a Certificate by ID
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesGetById(certificateId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificateDto>>;
    /**
     * Updates the name of the specified certificate.
     * @summary Update a Certificate Name by ID
     * @param {string} certificateId
     * @param {CertificatePatchDto} certificatePatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesPatch(certificateId: string, certificatePatchDto: CertificatePatchDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificateDto>>;
    /**
     * Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
     * @summary Add a New Certificate
     * @param {CertificatePostDto} certificatePostDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesPost(certificatePostDto: CertificatePostDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificateDto>>;
};
/**
 * CertificatesApi - factory interface
 * @export
 */
export declare const CertificatesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes a certificate specified by its ID.
     * @summary Delete a Certificate by ID
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesDelete(certificateId: string, options?: any): AxiosPromise<void>;
    /**
     * Retrieves all available certificates.
     * @summary Get Certificates
     * @param {string} [offset] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results obtained by a request.  Offset is the first element (from the complete list of elements) to be included in the response.
     * @param {string} [limit] \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results of a query.  If both \&#39;Offset\&#39; and \&#39;Limit\&#39;are specified, the offset lines are skipped before counting the returned limit lines.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesGet(offset?: string, limit?: string, options?: any): AxiosPromise<CertificateCollectionDto>;
    /**
     * Retrieves a certificate specified by its ID.
     * @summary Get a Certificate by ID
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesGetById(certificateId: string, options?: any): AxiosPromise<CertificateDto>;
    /**
     * Updates the name of the specified certificate.
     * @summary Update a Certificate Name by ID
     * @param {string} certificateId
     * @param {CertificatePatchDto} certificatePatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesPatch(certificateId: string, certificatePatchDto: CertificatePatchDto, options?: any): AxiosPromise<CertificateDto>;
    /**
     * Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
     * @summary Add a New Certificate
     * @param {CertificatePostDto} certificatePostDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    certificatesPost(certificatePostDto: CertificatePostDto, options?: any): AxiosPromise<CertificateDto>;
};
/**
 * Request parameters for certificatesDelete operation in CertificatesApi.
 * @export
 * @interface CertificatesApiCertificatesDeleteRequest
 */
export interface CertificatesApiCertificatesDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof CertificatesApiCertificatesDelete
     */
    readonly certificateId: string;
}
/**
 * Request parameters for certificatesGet operation in CertificatesApi.
 * @export
 * @interface CertificatesApiCertificatesGetRequest
 */
export interface CertificatesApiCertificatesGetRequest {
    /**
     * \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results obtained by a request.  Offset is the first element (from the complete list of elements) to be included in the response.
     * @type {string}
     * @memberof CertificatesApiCertificatesGet
     */
    readonly offset?: string;
    /**
     * \&#39;Limit\&#39; and \&#39;Offset\&#39; are optional; you can use these filter parameters to retrieve only part of the results of a query.  If both \&#39;Offset\&#39; and \&#39;Limit\&#39;are specified, the offset lines are skipped before counting the returned limit lines.
     * @type {string}
     * @memberof CertificatesApiCertificatesGet
     */
    readonly limit?: string;
}
/**
 * Request parameters for certificatesGetById operation in CertificatesApi.
 * @export
 * @interface CertificatesApiCertificatesGetByIdRequest
 */
export interface CertificatesApiCertificatesGetByIdRequest {
    /**
     *
     * @type {string}
     * @memberof CertificatesApiCertificatesGetById
     */
    readonly certificateId: string;
}
/**
 * Request parameters for certificatesPatch operation in CertificatesApi.
 * @export
 * @interface CertificatesApiCertificatesPatchRequest
 */
export interface CertificatesApiCertificatesPatchRequest {
    /**
     *
     * @type {string}
     * @memberof CertificatesApiCertificatesPatch
     */
    readonly certificateId: string;
    /**
     *
     * @type {CertificatePatchDto}
     * @memberof CertificatesApiCertificatesPatch
     */
    readonly certificatePatchDto: CertificatePatchDto;
}
/**
 * Request parameters for certificatesPost operation in CertificatesApi.
 * @export
 * @interface CertificatesApiCertificatesPostRequest
 */
export interface CertificatesApiCertificatesPostRequest {
    /**
     *
     * @type {CertificatePostDto}
     * @memberof CertificatesApiCertificatesPost
     */
    readonly certificatePostDto: CertificatePostDto;
}
/**
 * CertificatesApi - object-oriented interface
 * @export
 * @class CertificatesApi
 * @extends {BaseAPI}
 */
export declare class CertificatesApi extends BaseAPI {
    /**
     * Deletes a certificate specified by its ID.
     * @summary Delete a Certificate by ID
     * @param {CertificatesApiCertificatesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    certificatesDelete(requestParameters: CertificatesApiCertificatesDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieves all available certificates.
     * @summary Get Certificates
     * @param {CertificatesApiCertificatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    certificatesGet(requestParameters?: CertificatesApiCertificatesGetRequest, options?: any): Promise<import("axios").AxiosResponse<CertificateCollectionDto>>;
    /**
     * Retrieves a certificate specified by its ID.
     * @summary Get a Certificate by ID
     * @param {CertificatesApiCertificatesGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    certificatesGetById(requestParameters: CertificatesApiCertificatesGetByIdRequest, options?: any): Promise<import("axios").AxiosResponse<CertificateDto>>;
    /**
     * Updates the name of the specified certificate.
     * @summary Update a Certificate Name by ID
     * @param {CertificatesApiCertificatesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    certificatesPatch(requestParameters: CertificatesApiCertificatesPatchRequest, options?: any): Promise<import("axios").AxiosResponse<CertificateDto>>;
    /**
     * Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
     * @summary Add a New Certificate
     * @param {CertificatesApiCertificatesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesApi
     */
    certificatesPost(requestParameters: CertificatesApiCertificatesPostRequest, options?: any): Promise<import("axios").AxiosResponse<CertificateDto>>;
}
