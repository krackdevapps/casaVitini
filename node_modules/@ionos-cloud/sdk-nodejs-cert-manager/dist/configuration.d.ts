/**
 * Certificate Manager Service API
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates with IONOS services and your internal connected resources. For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic.  The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export declare const DEFAULT_MAX_RETRIES = 3;
export declare const DEFAULT_MAX_WAIT_TIME = 10000;
export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
    debug?: boolean;
}
export declare class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    /**
     * Default values for parameters such as pretty and depth
     * @type {Object.<string, any>}
     */
    defaultParamValues: Record<string, any>;
    /**
     * Maximum retries in case a request fails with
     * 502, 503, 504 or 429.
     */
    maxRetries: number;
    /**
     * Maximum wait time between retries, in milliseconds
     */
    maxWaitTime: number;
    /**
     * Debug flag
     */
    debug: boolean;
    /**
     * User Agent
     */
    userAgent: string;
    constructor(param?: ConfigurationParameters);
    static fromEnv(): Configuration;
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
    /**
     * Set the default value of a parameter
     * @param param - parameter name
     * @param value - default value
     * @return this
     */
    setDefaultParamValue(param: string, value: any): this;
    /**
     * Retrieve the default value of a parameter
     * @param param - parameter
     * @return any
     */
    getDefaultParamValue(param: string): any;
    /**
     * Set the default value for the 'pretty' param.
     * @param value - default value
     * @return this
     */
    setPretty(value: boolean): this;
    /**
     * Set the default value for the 'depth' param.
     * @param value - default value
     * @return this
     */
    setDepth(value: number): this;
    /**
     * Get the default value for the 'pretty' param
     * @return boolean | undefined
     */
    getPretty(): boolean | undefined;
    /**
     * Get the default value for the 'depth' param
     * @return boolean | undefined
     */
    getDepth(): boolean | undefined;
    /**
     * Set the maximum number of retries in case a request
     * fails with 502, 503, 504 or 429.
     * @param max - maximum number of retries
     * @return this
     */
    setMaxRetries(max: number): this;
    /**
     * Retrieve the maximum number of retries in case a request
     * fails with 502, 503, 504 or 429.
     * @return number
     */
    getMaxRetries(): number;
    /**
     * Set the maximum wait time between retries.
     * @param value - number
     * @return this
     */
    setMaxWaitTime(value: number): this;
    /**
     * Retrieve the maximum wait time between retries.
     * @return number
     */
    getMaxWaitTime(): number;
    /**
     * Enable/disable debug messages.
     * @param debug - boolean
     * @return this
     */
    setDebug(debug?: boolean): this;
    /**
     * Determine whether debug mode is enabled or not
     * @return boolean
     */
    isDebug(): boolean;
    /**
     * Set the user agent used in requests.
     * @param userAgent - string
     * @return this
     */
    setUserAgent(userAgent: string): this;
    /**
     * Retrieve the user agent used in requests.
     * @return string
     */
    getUserAgent(): string;
}
