"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = exports.DEFAULT_MAX_WAIT_TIME = exports.DEFAULT_MAX_RETRIES = void 0;
/* maximum number of retries for 502, 503, 504 or 429 statuses */
exports.DEFAULT_MAX_RETRIES = 3;
/* maximum wait time between retries in milliseconds */
exports.DEFAULT_MAX_WAIT_TIME = 10000;
var Configuration = /** @class */ (function () {
    function Configuration(param) {
        if (param === void 0) { param = {}; }
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
        this.defaultParamValues = {};
        this.maxRetries = exports.DEFAULT_MAX_RETRIES;
        this.maxWaitTime = exports.DEFAULT_MAX_WAIT_TIME;
        this.debug = false;
        this.setUserAgent('ionos-cloud-sdk-node/v6.1.4');
    }
    Configuration.fromEnv = function () {
        var configParams = {
            username: process.env.IONOS_USERNAME,
            password: process.env.IONOS_PASSWORD,
            apiKey: process.env.IONOS_TOKEN,
        };
        configParams.basePath = process.env.IONOS_API_URL || configParams.basePath;
        configParams.debug = process.env.IONOS_DEBUG !== undefined;
        return new Configuration(configParams);
    };
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    Configuration.prototype.isJsonMime = function (mime) {
        var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    };
    /**
     * Set the default value of a parameter
     * @param param - parameter name
     * @param value - default value
     * @return this
     */
    Configuration.prototype.setDefaultParamValue = function (param, value) {
        this.defaultParamValues[param] = value;
        return this;
    };
    /**
     * Retrieve the default value of a parameter
     * @param param - parameter
     * @return any
     */
    Configuration.prototype.getDefaultParamValue = function (param) {
        return this.defaultParamValues[param];
    };
    /**
     * Set the default value for the 'pretty' param.
     * @param value - default value
     * @return this
     */
    Configuration.prototype.setPretty = function (value) {
        this.setDefaultParamValue('pretty', value);
        return this;
    };
    /**
     * Set the default value for the 'depth' param.
     * @param value - default value
     * @return this
     */
    Configuration.prototype.setDepth = function (value) {
        this.setDefaultParamValue('depth', value);
        return this;
    };
    /**
     * Get the default value for the 'pretty' param
     * @return boolean | undefined
     */
    Configuration.prototype.getPretty = function () {
        return this.getDefaultParamValue('pretty');
    };
    /**
     * Get the default value for the 'depth' param
     * @return boolean | undefined
     */
    Configuration.prototype.getDepth = function () {
        return this.getDefaultParamValue('depth');
    };
    /**
     * Set the maximum number of retries in case a request
     * fails with 502, 503, 504 or 429.
     * @param max - maximum number of retries
     * @return this
     */
    Configuration.prototype.setMaxRetries = function (max) {
        this.maxRetries = max;
        return this;
    };
    /**
     * Retrieve the maximum number of retries in case a request
     * fails with 502, 503, 504 or 429.
     * @return number
     */
    Configuration.prototype.getMaxRetries = function () {
        return this.maxRetries;
    };
    /**
     * Set the maximum wait time between retries.
     * @param value - number
     * @return this
     */
    Configuration.prototype.setMaxWaitTime = function (value) {
        this.maxWaitTime = value;
        return this;
    };
    /**
     * Retrieve the maximum wait time between retries.
     * @return number
     */
    Configuration.prototype.getMaxWaitTime = function () {
        return this.maxWaitTime;
    };
    /**
     * Enable/disable debug messages.
     * @param debug - boolean
     * @return this
     */
    Configuration.prototype.setDebug = function (debug) {
        if (debug === void 0) { debug = true; }
        this.debug = debug;
        return this;
    };
    /**
     * Determine whether debug mode is enabled or not
     * @return boolean
     */
    Configuration.prototype.isDebug = function () {
        return this.debug;
    };
    /**
     * Set the user agent used in requests.
     * @param userAgent - string
     * @return this
     */
    Configuration.prototype.setUserAgent = function (userAgent) {
        this.userAgent = userAgent;
        this.baseOptions = this.baseOptions || {};
        this.baseOptions.headers = this.baseOptions.headers || {};
        this.baseOptions.headers['user-agent'] = this.userAgent;
        return this;
    };
    /**
     * Retrieve the user agent used in requests.
     * @return string
     */
    Configuration.prototype.getUserAgent = function () {
        return this.userAgent;
    };
    return Configuration;
}());
exports.Configuration = Configuration;
