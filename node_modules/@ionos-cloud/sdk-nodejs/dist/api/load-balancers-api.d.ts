/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BalancedNics } from '../model';
import { Loadbalancer } from '../model';
import { LoadbalancerProperties } from '../model';
import { Loadbalancers } from '../model';
import { Nic } from '../model';
/**
 * LoadBalancersApi - axios parameter creator
 * @export
 */
export declare const LoadBalancersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Detach the specified NIC from the Load Balancer.
     * @summary Detach balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsDelete: (datacenterId: string, loadbalancerId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified NIC, attached to the Load Balancer.
     * @summary Retrieve balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsFindByNicId: (datacenterId: string, loadbalancerId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all NICs, attached to the specified Load Balancer.
     * @summary List balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsGet: (datacenterId: string, loadbalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Attachs an existing NIC to the specified Load Balancer.
     * @summary Attach balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {Nic} nic The NIC to be attached.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsPost: (datacenterId: string, loadbalancerId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Remove the specified Load Balancer from the data center.
     * @summary Delete Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersDelete: (datacenterId: string, loadbalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified Load Balancer within the data center.
     * @summary Retrieve Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersFindById: (datacenterId: string, loadbalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the Load Balancers within the data center.
     * @summary List Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersGet: (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified Load Balancer within the data center.
     * @summary Partially modify Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {LoadbalancerProperties} loadbalancer The properties of the Load Balancer to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersPatch: (datacenterId: string, loadbalancerId: string, loadbalancer: LoadbalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a Load Balancer within the data center.
     * @summary Create a Load Balancer
     * @param {string} datacenterId The unique ID of the data center.
     * @param {Loadbalancer} loadbalancer The Load Balancer to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersPost: (datacenterId: string, loadbalancer: Loadbalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the properties of the specified Load Balancer within the data center.
     * @summary Modify a Load Balancer by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {Loadbalancer} loadbalancer The modified Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersPut: (datacenterId: string, loadbalancerId: string, loadbalancer: Loadbalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * LoadBalancersApi - functional programming interface
 * @export
 */
export declare const LoadBalancersApiFp: (configuration?: Configuration) => {
    /**
     * Detach the specified NIC from the Load Balancer.
     * @summary Detach balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsDelete(datacenterId: string, loadbalancerId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified NIC, attached to the Load Balancer.
     * @summary Retrieve balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsFindByNicId(datacenterId: string, loadbalancerId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>>;
    /**
     * List all NICs, attached to the specified Load Balancer.
     * @summary List balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsGet(datacenterId: string, loadbalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalancedNics>>;
    /**
     * Attachs an existing NIC to the specified Load Balancer.
     * @summary Attach balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {Nic} nic The NIC to be attached.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsPost(datacenterId: string, loadbalancerId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>>;
    /**
     * Remove the specified Load Balancer from the data center.
     * @summary Delete Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersDelete(datacenterId: string, loadbalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified Load Balancer within the data center.
     * @summary Retrieve Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersFindById(datacenterId: string, loadbalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Loadbalancer>>;
    /**
     * List all the Load Balancers within the data center.
     * @summary List Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Loadbalancers>>;
    /**
     * Update the properties of the specified Load Balancer within the data center.
     * @summary Partially modify Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {LoadbalancerProperties} loadbalancer The properties of the Load Balancer to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersPatch(datacenterId: string, loadbalancerId: string, loadbalancer: LoadbalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Loadbalancer>>;
    /**
     * Creates a Load Balancer within the data center.
     * @summary Create a Load Balancer
     * @param {string} datacenterId The unique ID of the data center.
     * @param {Loadbalancer} loadbalancer The Load Balancer to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersPost(datacenterId: string, loadbalancer: Loadbalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Loadbalancer>>;
    /**
     * Modifies the properties of the specified Load Balancer within the data center.
     * @summary Modify a Load Balancer by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {Loadbalancer} loadbalancer The modified Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersPut(datacenterId: string, loadbalancerId: string, loadbalancer: Loadbalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Loadbalancer>>;
};
/**
 * LoadBalancersApi - factory interface
 * @export
 */
export declare const LoadBalancersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Detach the specified NIC from the Load Balancer.
     * @summary Detach balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsDelete(datacenterId: string, loadbalancerId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified NIC, attached to the Load Balancer.
     * @summary Retrieve balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsFindByNicId(datacenterId: string, loadbalancerId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic>;
    /**
     * List all NICs, attached to the specified Load Balancer.
     * @summary List balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsGet(datacenterId: string, loadbalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<BalancedNics>;
    /**
     * Attachs an existing NIC to the specified Load Balancer.
     * @summary Attach balanced NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {Nic} nic The NIC to be attached.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersBalancednicsPost(datacenterId: string, loadbalancerId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic>;
    /**
     * Remove the specified Load Balancer from the data center.
     * @summary Delete Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersDelete(datacenterId: string, loadbalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified Load Balancer within the data center.
     * @summary Retrieve Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersFindById(datacenterId: string, loadbalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Loadbalancer>;
    /**
     * List all the Load Balancers within the data center.
     * @summary List Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Loadbalancers>;
    /**
     * Update the properties of the specified Load Balancer within the data center.
     * @summary Partially modify Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {LoadbalancerProperties} loadbalancer The properties of the Load Balancer to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersPatch(datacenterId: string, loadbalancerId: string, loadbalancer: LoadbalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Loadbalancer>;
    /**
     * Creates a Load Balancer within the data center.
     * @summary Create a Load Balancer
     * @param {string} datacenterId The unique ID of the data center.
     * @param {Loadbalancer} loadbalancer The Load Balancer to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersPost(datacenterId: string, loadbalancer: Loadbalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Loadbalancer>;
    /**
     * Modifies the properties of the specified Load Balancer within the data center.
     * @summary Modify a Load Balancer by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} loadbalancerId The unique ID of the Load Balancer.
     * @param {Loadbalancer} loadbalancer The modified Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLoadbalancersPut(datacenterId: string, loadbalancerId: string, loadbalancer: Loadbalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Loadbalancer>;
};
/**
 * Request parameters for datacentersLoadbalancersBalancednicsDelete operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersBalancednicsDeleteRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersBalancednicsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Load Balancer.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsDelete
     */
    readonly loadbalancerId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsDelete
     */
    readonly nicId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLoadbalancersBalancednicsFindByNicId operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicIdRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicId
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Load Balancer.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicId
     */
    readonly loadbalancerId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicId
     */
    readonly nicId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLoadbalancersBalancednicsGet operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersBalancednicsGetRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersBalancednicsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Load Balancer.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsGet
     */
    readonly loadbalancerId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersLoadbalancersBalancednicsPost operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersBalancednicsPostRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersBalancednicsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Load Balancer.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsPost
     */
    readonly loadbalancerId: string;
    /**
     * The NIC to be attached.
     * @type {Nic}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsPost
     */
    readonly nic: Nic;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersBalancednicsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLoadbalancersDelete operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersDeleteRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Load Balancer.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersDelete
     */
    readonly loadbalancerId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLoadbalancersFindById operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersFindByIdRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Load Balancer.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersFindById
     */
    readonly loadbalancerId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersFindById
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersFindById
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLoadbalancersGet operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersGetRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersGet
     */
    readonly datacenterId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LoadBalancersApiDatacentersLoadbalancersGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersLoadbalancersPatch operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersPatchRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Load Balancer.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPatch
     */
    readonly loadbalancerId: string;
    /**
     * The properties of the Load Balancer to be updated.
     * @type {LoadbalancerProperties}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPatch
     */
    readonly loadbalancer: LoadbalancerProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLoadbalancersPost operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersPostRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPost
     */
    readonly datacenterId: string;
    /**
     * The Load Balancer to create.
     * @type {Loadbalancer}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPost
     */
    readonly loadbalancer: Loadbalancer;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLoadbalancersPut operation in LoadBalancersApi.
 * @export
 * @interface LoadBalancersApiDatacentersLoadbalancersPutRequest
 */
export interface LoadBalancersApiDatacentersLoadbalancersPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Load Balancer.
     * @type {string}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPut
     */
    readonly loadbalancerId: string;
    /**
     * The modified Load Balancer.
     * @type {Loadbalancer}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPut
     */
    readonly loadbalancer: Loadbalancer;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LoadBalancersApiDatacentersLoadbalancersPut
     */
    readonly xContractNumber?: number;
}
/**
 * LoadBalancersApi - object-oriented interface
 * @export
 * @class LoadBalancersApi
 * @extends {BaseAPI}
 */
export declare class LoadBalancersApi extends BaseAPI {
    /**
     * Detach the specified NIC from the Load Balancer.
     * @summary Detach balanced NICs
     * @param {LoadBalancersApiDatacentersLoadbalancersBalancednicsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersBalancednicsDelete(requestParameters: LoadBalancersApiDatacentersLoadbalancersBalancednicsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified NIC, attached to the Load Balancer.
     * @summary Retrieve balanced NICs
     * @param {LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersBalancednicsFindByNicId(requestParameters: LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicIdRequest, options?: any): Promise<import("axios").AxiosResponse<Nic>>;
    /**
     * List all NICs, attached to the specified Load Balancer.
     * @summary List balanced NICs
     * @param {LoadBalancersApiDatacentersLoadbalancersBalancednicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersBalancednicsGet(requestParameters: LoadBalancersApiDatacentersLoadbalancersBalancednicsGetRequest, options?: any): Promise<import("axios").AxiosResponse<BalancedNics>>;
    /**
     * Attachs an existing NIC to the specified Load Balancer.
     * @summary Attach balanced NICs
     * @param {LoadBalancersApiDatacentersLoadbalancersBalancednicsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersBalancednicsPost(requestParameters: LoadBalancersApiDatacentersLoadbalancersBalancednicsPostRequest, options?: any): Promise<import("axios").AxiosResponse<Nic>>;
    /**
     * Remove the specified Load Balancer from the data center.
     * @summary Delete Load Balancers
     * @param {LoadBalancersApiDatacentersLoadbalancersDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersDelete(requestParameters: LoadBalancersApiDatacentersLoadbalancersDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified Load Balancer within the data center.
     * @summary Retrieve Load Balancers
     * @param {LoadBalancersApiDatacentersLoadbalancersFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersFindById(requestParameters: LoadBalancersApiDatacentersLoadbalancersFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<Loadbalancer>>;
    /**
     * List all the Load Balancers within the data center.
     * @summary List Load Balancers
     * @param {LoadBalancersApiDatacentersLoadbalancersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersGet(requestParameters: LoadBalancersApiDatacentersLoadbalancersGetRequest, options?: any): Promise<import("axios").AxiosResponse<Loadbalancers>>;
    /**
     * Update the properties of the specified Load Balancer within the data center.
     * @summary Partially modify Load Balancers
     * @param {LoadBalancersApiDatacentersLoadbalancersPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersPatch(requestParameters: LoadBalancersApiDatacentersLoadbalancersPatchRequest, options?: any): Promise<import("axios").AxiosResponse<Loadbalancer>>;
    /**
     * Creates a Load Balancer within the data center.
     * @summary Create a Load Balancer
     * @param {LoadBalancersApiDatacentersLoadbalancersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersPost(requestParameters: LoadBalancersApiDatacentersLoadbalancersPostRequest, options?: any): Promise<import("axios").AxiosResponse<Loadbalancer>>;
    /**
     * Modifies the properties of the specified Load Balancer within the data center.
     * @summary Modify a Load Balancer by ID
     * @param {LoadBalancersApiDatacentersLoadbalancersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    datacentersLoadbalancersPut(requestParameters: LoadBalancersApiDatacentersLoadbalancersPutRequest, options?: any): Promise<import("axios").AxiosResponse<Loadbalancer>>;
}
