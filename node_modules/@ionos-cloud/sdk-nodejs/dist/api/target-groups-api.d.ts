/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { TargetGroup } from '../model';
import { TargetGroupProperties } from '../model';
import { TargetGroupPut } from '../model';
import { TargetGroups } from '../model';
/**
 * TargetGroupsApi - axios parameter creator
 * @export
 */
export declare const TargetGroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes the target group specified by its ID.
     * @summary Delete a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetGroupsDelete: (targetGroupId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves the properties of the target group specified by its ID.
     * @summary Get a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsFindByTargetGroupId: (targetGroupId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Lists target groups.  A target group is a set of one or more registered targets. You must specify an IP address, a port number, and a weight for each target. Any object with an IP address in your VDC can be a target, for example, a VM, another load balancer, etc. You can register a target with multiple target groups.
     * @summary Get Target Groups
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (used together with &lt;b&gt;&lt;i&gt;offset&lt;/i&gt;&lt;/b&gt; for pagination). It must not exceed &lt;b&gt;&lt;i&gt;200&lt;/i&gt;&lt;/b&gt;.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsGet: (pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Updates the properties of the target group specified by its ID.
     * @summary Partially Modify a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {TargetGroupProperties} targetGroupProperties The target group properties to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsPatch: (targetGroupId: string, targetGroupProperties: TargetGroupProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a target group.
     * @summary Create a Target Group
     * @param {TargetGroup} targetGroup The target group to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsPost: (targetGroup: TargetGroup, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the properties of the target group specified by its ID.
     * @summary Modify a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {TargetGroupPut} targetGroup The modified target group.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsPut: (targetGroupId: string, targetGroup: TargetGroupPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * TargetGroupsApi - functional programming interface
 * @export
 */
export declare const TargetGroupsApiFp: (configuration?: Configuration) => {
    /**
     * Deletes the target group specified by its ID.
     * @summary Delete a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetGroupsDelete(targetGroupId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieves the properties of the target group specified by its ID.
     * @summary Get a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsFindByTargetGroupId(targetGroupId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetGroup>>;
    /**
     * Lists target groups.  A target group is a set of one or more registered targets. You must specify an IP address, a port number, and a weight for each target. Any object with an IP address in your VDC can be a target, for example, a VM, another load balancer, etc. You can register a target with multiple target groups.
     * @summary Get Target Groups
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (used together with &lt;b&gt;&lt;i&gt;offset&lt;/i&gt;&lt;/b&gt; for pagination). It must not exceed &lt;b&gt;&lt;i&gt;200&lt;/i&gt;&lt;/b&gt;.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsGet(pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetGroups>>;
    /**
     * Updates the properties of the target group specified by its ID.
     * @summary Partially Modify a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {TargetGroupProperties} targetGroupProperties The target group properties to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsPatch(targetGroupId: string, targetGroupProperties: TargetGroupProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetGroup>>;
    /**
     * Creates a target group.
     * @summary Create a Target Group
     * @param {TargetGroup} targetGroup The target group to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsPost(targetGroup: TargetGroup, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetGroup>>;
    /**
     * Modifies the properties of the target group specified by its ID.
     * @summary Modify a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {TargetGroupPut} targetGroup The modified target group.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsPut(targetGroupId: string, targetGroup: TargetGroupPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetGroup>>;
};
/**
 * TargetGroupsApi - factory interface
 * @export
 */
export declare const TargetGroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes the target group specified by its ID.
     * @summary Delete a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetGroupsDelete(targetGroupId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieves the properties of the target group specified by its ID.
     * @summary Get a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsFindByTargetGroupId(targetGroupId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<TargetGroup>;
    /**
     * Lists target groups.  A target group is a set of one or more registered targets. You must specify an IP address, a port number, and a weight for each target. Any object with an IP address in your VDC can be a target, for example, a VM, another load balancer, etc. You can register a target with multiple target groups.
     * @summary Get Target Groups
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (used together with &lt;b&gt;&lt;i&gt;offset&lt;/i&gt;&lt;/b&gt; for pagination). It must not exceed &lt;b&gt;&lt;i&gt;200&lt;/i&gt;&lt;/b&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsGet(pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<TargetGroups>;
    /**
     * Updates the properties of the target group specified by its ID.
     * @summary Partially Modify a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {TargetGroupProperties} targetGroupProperties The target group properties to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsPatch(targetGroupId: string, targetGroupProperties: TargetGroupProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<TargetGroup>;
    /**
     * Creates a target group.
     * @summary Create a Target Group
     * @param {TargetGroup} targetGroup The target group to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsPost(targetGroup: TargetGroup, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<TargetGroup>;
    /**
     * Modifies the properties of the target group specified by its ID.
     * @summary Modify a Target Group by ID
     * @param {string} targetGroupId The unique ID of the target group.
     * @param {TargetGroupPut} targetGroup The modified target group.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    targetgroupsPut(targetGroupId: string, targetGroup: TargetGroupPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<TargetGroup>;
};
/**
 * Request parameters for targetGroupsDelete operation in TargetGroupsApi.
 * @export
 * @interface TargetGroupsApiTargetGroupsDeleteRequest
 */
export interface TargetGroupsApiTargetGroupsDeleteRequest {
    /**
     * The unique ID of the target group.
     * @type {string}
     * @memberof TargetGroupsApiTargetGroupsDelete
     */
    readonly targetGroupId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof TargetGroupsApiTargetGroupsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof TargetGroupsApiTargetGroupsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof TargetGroupsApiTargetGroupsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for targetgroupsFindByTargetGroupId operation in TargetGroupsApi.
 * @export
 * @interface TargetGroupsApiTargetgroupsFindByTargetGroupIdRequest
 */
export interface TargetGroupsApiTargetgroupsFindByTargetGroupIdRequest {
    /**
     * The unique ID of the target group.
     * @type {string}
     * @memberof TargetGroupsApiTargetgroupsFindByTargetGroupId
     */
    readonly targetGroupId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof TargetGroupsApiTargetgroupsFindByTargetGroupId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsFindByTargetGroupId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsFindByTargetGroupId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for targetgroupsGet operation in TargetGroupsApi.
 * @export
 * @interface TargetGroupsApiTargetgroupsGetRequest
 */
export interface TargetGroupsApiTargetgroupsGetRequest {
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof TargetGroupsApiTargetgroupsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (used together with &lt;b&gt;&lt;i&gt;offset&lt;/i&gt;&lt;/b&gt; for pagination). It must not exceed &lt;b&gt;&lt;i&gt;200&lt;/i&gt;&lt;/b&gt;.
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof TargetGroupsApiTargetgroupsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof TargetGroupsApiTargetgroupsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for targetgroupsPatch operation in TargetGroupsApi.
 * @export
 * @interface TargetGroupsApiTargetgroupsPatchRequest
 */
export interface TargetGroupsApiTargetgroupsPatchRequest {
    /**
     * The unique ID of the target group.
     * @type {string}
     * @memberof TargetGroupsApiTargetgroupsPatch
     */
    readonly targetGroupId: string;
    /**
     * The target group properties to be updated.
     * @type {TargetGroupProperties}
     * @memberof TargetGroupsApiTargetgroupsPatch
     */
    readonly targetGroupProperties: TargetGroupProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof TargetGroupsApiTargetgroupsPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for targetgroupsPost operation in TargetGroupsApi.
 * @export
 * @interface TargetGroupsApiTargetgroupsPostRequest
 */
export interface TargetGroupsApiTargetgroupsPostRequest {
    /**
     * The target group to create.
     * @type {TargetGroup}
     * @memberof TargetGroupsApiTargetgroupsPost
     */
    readonly targetGroup: TargetGroup;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof TargetGroupsApiTargetgroupsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for targetgroupsPut operation in TargetGroupsApi.
 * @export
 * @interface TargetGroupsApiTargetgroupsPutRequest
 */
export interface TargetGroupsApiTargetgroupsPutRequest {
    /**
     * The unique ID of the target group.
     * @type {string}
     * @memberof TargetGroupsApiTargetgroupsPut
     */
    readonly targetGroupId: string;
    /**
     * The modified target group.
     * @type {TargetGroupPut}
     * @memberof TargetGroupsApiTargetgroupsPut
     */
    readonly targetGroup: TargetGroupPut;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof TargetGroupsApiTargetgroupsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof TargetGroupsApiTargetgroupsPut
     */
    readonly xContractNumber?: number;
}
/**
 * TargetGroupsApi - object-oriented interface
 * @export
 * @class TargetGroupsApi
 * @extends {BaseAPI}
 */
export declare class TargetGroupsApi extends BaseAPI {
    /**
     * Deletes the target group specified by its ID.
     * @summary Delete a Target Group by ID
     * @param {TargetGroupsApiTargetGroupsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetGroupsApi
     */
    targetGroupsDelete(requestParameters: TargetGroupsApiTargetGroupsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieves the properties of the target group specified by its ID.
     * @summary Get a Target Group by ID
     * @param {TargetGroupsApiTargetgroupsFindByTargetGroupIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetGroupsApi
     */
    targetgroupsFindByTargetGroupId(requestParameters: TargetGroupsApiTargetgroupsFindByTargetGroupIdRequest, options?: any): Promise<import("axios").AxiosResponse<TargetGroup>>;
    /**
     * Lists target groups.  A target group is a set of one or more registered targets. You must specify an IP address, a port number, and a weight for each target. Any object with an IP address in your VDC can be a target, for example, a VM, another load balancer, etc. You can register a target with multiple target groups.
     * @summary Get Target Groups
     * @param {TargetGroupsApiTargetgroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetGroupsApi
     */
    targetgroupsGet(requestParameters?: TargetGroupsApiTargetgroupsGetRequest, options?: any): Promise<import("axios").AxiosResponse<TargetGroups>>;
    /**
     * Updates the properties of the target group specified by its ID.
     * @summary Partially Modify a Target Group by ID
     * @param {TargetGroupsApiTargetgroupsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetGroupsApi
     */
    targetgroupsPatch(requestParameters: TargetGroupsApiTargetgroupsPatchRequest, options?: any): Promise<import("axios").AxiosResponse<TargetGroup>>;
    /**
     * Creates a target group.
     * @summary Create a Target Group
     * @param {TargetGroupsApiTargetgroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetGroupsApi
     */
    targetgroupsPost(requestParameters: TargetGroupsApiTargetgroupsPostRequest, options?: any): Promise<import("axios").AxiosResponse<TargetGroup>>;
    /**
     * Modifies the properties of the target group specified by its ID.
     * @summary Modify a Target Group by ID
     * @param {TargetGroupsApiTargetgroupsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetGroupsApi
     */
    targetgroupsPut(requestParameters: TargetGroupsApiTargetgroupsPutRequest, options?: any): Promise<import("axios").AxiosResponse<TargetGroup>>;
}
