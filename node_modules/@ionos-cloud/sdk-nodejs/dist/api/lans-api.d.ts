/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Lan } from '../model';
import { LanNics } from '../model';
import { LanPost } from '../model';
import { LanProperties } from '../model';
import { Lans } from '../model';
import { Nic } from '../model';
/**
 * LANsApi - axios parameter creator
 * @export
 */
export declare const LANsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete the specified LAN within the data center.
     * @summary Delete LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansDelete: (datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified LAN within the data center.
     * @summary Retrieve LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansFindById: (datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all LANs within the data center.
     * @summary List LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansGet: (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the NIC, attached to the specified LAN.
     * @summary Retrieve attached NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansNicsFindById: (datacenterId: string, lanId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all NICs, attached to the specified LAN.
     * @summary List LAN members
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansNicsGet: (datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Attach an existing NIC to the specified LAN.
     * @summary Attach NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {Nic} nic The NIC to be attached.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansNicsPost: (datacenterId: string, lanId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified LAN within the data center.
     * @summary Partially modify LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {LanProperties} lan The properties of the LAN to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansPatch: (datacenterId: string, lanId: string, lan: LanProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a LAN within the data center.
     * @summary Create LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {LanPost} lan The LAN to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansPost: (datacenterId: string, lan: LanPost, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modify the properties of the specified LAN within the data center.
     * @summary Modify LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {Lan} lan The modified LAN
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansPut: (datacenterId: string, lanId: string, lan: Lan, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * LANsApi - functional programming interface
 * @export
 */
export declare const LANsApiFp: (configuration?: Configuration) => {
    /**
     * Delete the specified LAN within the data center.
     * @summary Delete LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansDelete(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified LAN within the data center.
     * @summary Retrieve LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansFindById(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lan>>;
    /**
     * List all LANs within the data center.
     * @summary List LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lans>>;
    /**
     * Retrieve the properties of the NIC, attached to the specified LAN.
     * @summary Retrieve attached NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansNicsFindById(datacenterId: string, lanId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>>;
    /**
     * List all NICs, attached to the specified LAN.
     * @summary List LAN members
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansNicsGet(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanNics>>;
    /**
     * Attach an existing NIC to the specified LAN.
     * @summary Attach NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {Nic} nic The NIC to be attached.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansNicsPost(datacenterId: string, lanId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>>;
    /**
     * Update the properties of the specified LAN within the data center.
     * @summary Partially modify LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {LanProperties} lan The properties of the LAN to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansPatch(datacenterId: string, lanId: string, lan: LanProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lan>>;
    /**
     * Creates a LAN within the data center.
     * @summary Create LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {LanPost} lan The LAN to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansPost(datacenterId: string, lan: LanPost, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanPost>>;
    /**
     * Modify the properties of the specified LAN within the data center.
     * @summary Modify LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {Lan} lan The modified LAN
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansPut(datacenterId: string, lanId: string, lan: Lan, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lan>>;
};
/**
 * LANsApi - factory interface
 * @export
 */
export declare const LANsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete the specified LAN within the data center.
     * @summary Delete LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansDelete(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified LAN within the data center.
     * @summary Retrieve LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansFindById(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Lan>;
    /**
     * List all LANs within the data center.
     * @summary List LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Lans>;
    /**
     * Retrieve the properties of the NIC, attached to the specified LAN.
     * @summary Retrieve attached NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansNicsFindById(datacenterId: string, lanId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic>;
    /**
     * List all NICs, attached to the specified LAN.
     * @summary List LAN members
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansNicsGet(datacenterId: string, lanId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<LanNics>;
    /**
     * Attach an existing NIC to the specified LAN.
     * @summary Attach NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {Nic} nic The NIC to be attached.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansNicsPost(datacenterId: string, lanId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic>;
    /**
     * Update the properties of the specified LAN within the data center.
     * @summary Partially modify LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {LanProperties} lan The properties of the LAN to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansPatch(datacenterId: string, lanId: string, lan: LanProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Lan>;
    /**
     * Creates a LAN within the data center.
     * @summary Create LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {LanPost} lan The LAN to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansPost(datacenterId: string, lan: LanPost, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LanPost>;
    /**
     * Modify the properties of the specified LAN within the data center.
     * @summary Modify LANs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} lanId The unique ID of the LAN.
     * @param {Lan} lan The modified LAN
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLansPut(datacenterId: string, lanId: string, lan: Lan, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Lan>;
};
/**
 * Request parameters for datacentersLansDelete operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansDeleteRequest
 */
export interface LANsApiDatacentersLansDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly lanId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLansFindById operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansFindByIdRequest
 */
export interface LANsApiDatacentersLansFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly lanId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansFindById
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLansGet operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansGetRequest
 */
export interface LANsApiDatacentersLansGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly datacenterId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LANsApiDatacentersLansGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LANsApiDatacentersLansGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersLansNicsFindById operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansNicsFindByIdRequest
 */
export interface LANsApiDatacentersLansNicsFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly lanId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly nicId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsFindById
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLansNicsGet operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansNicsGetRequest
 */
export interface LANsApiDatacentersLansNicsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly lanId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LANsApiDatacentersLansNicsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersLansNicsPost operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansNicsPostRequest
 */
export interface LANsApiDatacentersLansNicsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly lanId: string;
    /**
     * The NIC to be attached.
     * @type {Nic}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly nic: Nic;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansNicsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLansPatch operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansPatchRequest
 */
export interface LANsApiDatacentersLansPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly lanId: string;
    /**
     * The properties of the LAN to be updated.
     * @type {LanProperties}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly lan: LanProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLansPost operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansPostRequest
 */
export interface LANsApiDatacentersLansPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly datacenterId: string;
    /**
     * The LAN to create.
     * @type {LanPost}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly lan: LanPost;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLansPut operation in LANsApi.
 * @export
 * @interface LANsApiDatacentersLansPutRequest
 */
export interface LANsApiDatacentersLansPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the LAN.
     * @type {string}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly lanId: string;
    /**
     * The modified LAN
     * @type {Lan}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly lan: Lan;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LANsApiDatacentersLansPut
     */
    readonly xContractNumber?: number;
}
/**
 * LANsApi - object-oriented interface
 * @export
 * @class LANsApi
 * @extends {BaseAPI}
 */
export declare class LANsApi extends BaseAPI {
    /**
     * Delete the specified LAN within the data center.
     * @summary Delete LANs
     * @param {LANsApiDatacentersLansDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    datacentersLansDelete(requestParameters: LANsApiDatacentersLansDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified LAN within the data center.
     * @summary Retrieve LANs
     * @param {LANsApiDatacentersLansFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    datacentersLansFindById(requestParameters: LANsApiDatacentersLansFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<Lan>>;
    /**
     * List all LANs within the data center.
     * @summary List LANs
     * @param {LANsApiDatacentersLansGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    datacentersLansGet(requestParameters: LANsApiDatacentersLansGetRequest, options?: any): Promise<import("axios").AxiosResponse<Lans>>;
    /**
     * Retrieve the properties of the NIC, attached to the specified LAN.
     * @summary Retrieve attached NICs
     * @param {LANsApiDatacentersLansNicsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    datacentersLansNicsFindById(requestParameters: LANsApiDatacentersLansNicsFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<Nic>>;
    /**
     * List all NICs, attached to the specified LAN.
     * @summary List LAN members
     * @param {LANsApiDatacentersLansNicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    datacentersLansNicsGet(requestParameters: LANsApiDatacentersLansNicsGetRequest, options?: any): Promise<import("axios").AxiosResponse<LanNics>>;
    /**
     * Attach an existing NIC to the specified LAN.
     * @summary Attach NICs
     * @param {LANsApiDatacentersLansNicsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    datacentersLansNicsPost(requestParameters: LANsApiDatacentersLansNicsPostRequest, options?: any): Promise<import("axios").AxiosResponse<Nic>>;
    /**
     * Update the properties of the specified LAN within the data center.
     * @summary Partially modify LANs
     * @param {LANsApiDatacentersLansPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    datacentersLansPatch(requestParameters: LANsApiDatacentersLansPatchRequest, options?: any): Promise<import("axios").AxiosResponse<Lan>>;
    /**
     * Creates a LAN within the data center.
     * @summary Create LANs
     * @param {LANsApiDatacentersLansPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    datacentersLansPost(requestParameters: LANsApiDatacentersLansPostRequest, options?: any): Promise<import("axios").AxiosResponse<LanPost>>;
    /**
     * Modify the properties of the specified LAN within the data center.
     * @summary Modify LANs
     * @param {LANsApiDatacentersLansPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LANsApi
     */
    datacentersLansPut(requestParameters: LANsApiDatacentersLansPutRequest, options?: any): Promise<import("axios").AxiosResponse<Lan>>;
}
