/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Nic } from '../model';
import { NicProperties } from '../model';
import { NicPut } from '../model';
import { Nics } from '../model';
/**
 * NetworkInterfacesApi - axios parameter creator
 * @export
 */
export declare const NetworkInterfacesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Remove the specified NIC.
     * @summary Delete NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsDelete: (datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified NIC.
     * @summary Retrieve NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFindById: (datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all NICs, attached to the specified server.
     * @summary List NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsGet: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified NIC.
     * @summary Partially modify NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {NicProperties} nic The properties of the NIC to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsPatch: (datacenterId: string, serverId: string, nicId: string, nic: NicProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a NIC to the specified server. The combined total of NICs and attached volumes cannot exceed 24 per server.
     * @summary Create a NIC
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Nic} nic The NIC to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsPost: (datacenterId: string, serverId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modify the properties of the specified NIC.
     * @summary Modify NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {NicPut} nic The modified NIC
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsPut: (datacenterId: string, serverId: string, nicId: string, nic: NicPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * NetworkInterfacesApi - functional programming interface
 * @export
 */
export declare const NetworkInterfacesApiFp: (configuration?: Configuration) => {
    /**
     * Remove the specified NIC.
     * @summary Delete NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsDelete(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified NIC.
     * @summary Retrieve NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFindById(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>>;
    /**
     * List all NICs, attached to the specified server.
     * @summary List NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nics>>;
    /**
     * Update the properties of the specified NIC.
     * @summary Partially modify NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {NicProperties} nic The properties of the NIC to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsPatch(datacenterId: string, serverId: string, nicId: string, nic: NicProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>>;
    /**
     * Adds a NIC to the specified server. The combined total of NICs and attached volumes cannot exceed 24 per server.
     * @summary Create a NIC
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Nic} nic The NIC to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsPost(datacenterId: string, serverId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>>;
    /**
     * Modify the properties of the specified NIC.
     * @summary Modify NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {NicPut} nic The modified NIC
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsPut(datacenterId: string, serverId: string, nicId: string, nic: NicPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nic>>;
};
/**
 * NetworkInterfacesApi - factory interface
 * @export
 */
export declare const NetworkInterfacesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Remove the specified NIC.
     * @summary Delete NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsDelete(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified NIC.
     * @summary Retrieve NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFindById(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic>;
    /**
     * List all NICs, attached to the specified server.
     * @summary List NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Nics>;
    /**
     * Update the properties of the specified NIC.
     * @summary Partially modify NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {NicProperties} nic The properties of the NIC to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsPatch(datacenterId: string, serverId: string, nicId: string, nic: NicProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic>;
    /**
     * Adds a NIC to the specified server. The combined total of NICs and attached volumes cannot exceed 24 per server.
     * @summary Create a NIC
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Nic} nic The NIC to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsPost(datacenterId: string, serverId: string, nic: Nic, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic>;
    /**
     * Modify the properties of the specified NIC.
     * @summary Modify NICs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {NicPut} nic The modified NIC
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsPut(datacenterId: string, serverId: string, nicId: string, nic: NicPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Nic>;
};
/**
 * Request parameters for datacentersServersNicsDelete operation in NetworkInterfacesApi.
 * @export
 * @interface NetworkInterfacesApiDatacentersServersNicsDeleteRequest
 */
export interface NetworkInterfacesApiDatacentersServersNicsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsDelete
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsDelete
     */
    readonly nicId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkInterfacesApiDatacentersServersNicsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersNicsFindById operation in NetworkInterfacesApi.
 * @export
 * @interface NetworkInterfacesApiDatacentersServersNicsFindByIdRequest
 */
export interface NetworkInterfacesApiDatacentersServersNicsFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsFindById
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsFindById
     */
    readonly nicId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkInterfacesApiDatacentersServersNicsFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsFindById
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsFindById
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersNicsGet operation in NetworkInterfacesApi.
 * @export
 * @interface NetworkInterfacesApiDatacentersServersNicsGetRequest
 */
export interface NetworkInterfacesApiDatacentersServersNicsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NetworkInterfacesApiDatacentersServersNicsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersServersNicsPatch operation in NetworkInterfacesApi.
 * @export
 * @interface NetworkInterfacesApiDatacentersServersNicsPatchRequest
 */
export interface NetworkInterfacesApiDatacentersServersNicsPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPatch
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPatch
     */
    readonly nicId: string;
    /**
     * The properties of the NIC to be updated.
     * @type {NicProperties}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPatch
     */
    readonly nic: NicProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersNicsPost operation in NetworkInterfacesApi.
 * @export
 * @interface NetworkInterfacesApiDatacentersServersNicsPostRequest
 */
export interface NetworkInterfacesApiDatacentersServersNicsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPost
     */
    readonly serverId: string;
    /**
     * The NIC to create.
     * @type {Nic}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPost
     */
    readonly nic: Nic;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersNicsPut operation in NetworkInterfacesApi.
 * @export
 * @interface NetworkInterfacesApiDatacentersServersNicsPutRequest
 */
export interface NetworkInterfacesApiDatacentersServersNicsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPut
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPut
     */
    readonly nicId: string;
    /**
     * The modified NIC
     * @type {NicPut}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPut
     */
    readonly nic: NicPut;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkInterfacesApiDatacentersServersNicsPut
     */
    readonly xContractNumber?: number;
}
/**
 * NetworkInterfacesApi - object-oriented interface
 * @export
 * @class NetworkInterfacesApi
 * @extends {BaseAPI}
 */
export declare class NetworkInterfacesApi extends BaseAPI {
    /**
     * Remove the specified NIC.
     * @summary Delete NICs
     * @param {NetworkInterfacesApiDatacentersServersNicsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkInterfacesApi
     */
    datacentersServersNicsDelete(requestParameters: NetworkInterfacesApiDatacentersServersNicsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified NIC.
     * @summary Retrieve NICs
     * @param {NetworkInterfacesApiDatacentersServersNicsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkInterfacesApi
     */
    datacentersServersNicsFindById(requestParameters: NetworkInterfacesApiDatacentersServersNicsFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<Nic>>;
    /**
     * List all NICs, attached to the specified server.
     * @summary List NICs
     * @param {NetworkInterfacesApiDatacentersServersNicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkInterfacesApi
     */
    datacentersServersNicsGet(requestParameters: NetworkInterfacesApiDatacentersServersNicsGetRequest, options?: any): Promise<import("axios").AxiosResponse<Nics>>;
    /**
     * Update the properties of the specified NIC.
     * @summary Partially modify NICs
     * @param {NetworkInterfacesApiDatacentersServersNicsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkInterfacesApi
     */
    datacentersServersNicsPatch(requestParameters: NetworkInterfacesApiDatacentersServersNicsPatchRequest, options?: any): Promise<import("axios").AxiosResponse<Nic>>;
    /**
     * Adds a NIC to the specified server. The combined total of NICs and attached volumes cannot exceed 24 per server.
     * @summary Create a NIC
     * @param {NetworkInterfacesApiDatacentersServersNicsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkInterfacesApi
     */
    datacentersServersNicsPost(requestParameters: NetworkInterfacesApiDatacentersServersNicsPostRequest, options?: any): Promise<import("axios").AxiosResponse<Nic>>;
    /**
     * Modify the properties of the specified NIC.
     * @summary Modify NICs
     * @param {NetworkInterfacesApiDatacentersServersNicsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkInterfacesApi
     */
    datacentersServersNicsPut(requestParameters: NetworkInterfacesApiDatacentersServersNicsPutRequest, options?: any): Promise<import("axios").AxiosResponse<Nic>>;
}
