/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { FlowLog } from '../model';
import { FlowLogProperties } from '../model';
import { FlowLogPut } from '../model';
import { FlowLogs } from '../model';
import { NatGateway } from '../model';
import { NatGatewayProperties } from '../model';
import { NatGatewayPut } from '../model';
import { NatGatewayRule } from '../model';
import { NatGatewayRuleProperties } from '../model';
import { NatGatewayRulePut } from '../model';
import { NatGatewayRules } from '../model';
import { NatGateways } from '../model';
/**
 * NATGatewaysApi - axios parameter creator
 * @export
 */
export declare const NATGatewaysApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Remove the specified NAT Gateway from the data center.
     * @summary Delete NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysDelete: (datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @summary Retrieve NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFindByNatGatewayId: (datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified NAT Gateway Flow Log.
     * @summary Delete NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsDelete: (datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the specified NAT Gateway Flow Log.
     * @summary Retrieve NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsFindByFlowLogId: (datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the Flow Logs for the specified NAT Gateway.
     * @summary List NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsGet: (datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified NAT Gateway Flow Log.
     * @summary Partially modify NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogProperties} natGatewayFlowLogProperties The properties of the Flow Log to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsPatch: (datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a new Flow Log to the specified NAT Gateway.
     * @summary Create a NAT Gateway Flow Log
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {FlowLog} natGatewayFlowLog The Flow Log to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsPost: (datacenterId: string, natGatewayId: string, natGatewayFlowLog: FlowLog, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modify the specified NAT Gateway Flow Log.
     * @summary Modify NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogPut} natGatewayFlowLog The modified NAT Gateway Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsPut: (datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLog: FlowLogPut, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all NAT Gateways within the data center.
     * @summary List NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysGet: (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified NAT Gateway within the data center.
     * @summary Partially modify NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {NatGatewayProperties} natGatewayProperties The properties of the NAT Gateway to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysPatch: (datacenterId: string, natGatewayId: string, natGatewayProperties: NatGatewayProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
     * @summary Create a NAT Gateway
     * @param {string} datacenterId The unique ID of the data center.
     * @param {NatGateway} natGateway The NAT Gateway to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysPost: (datacenterId: string, natGateway: NatGateway, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modify the properties of the specified NAT Gateway within the data center.
     * @summary Modify NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {NatGatewayPut} natGateway The modified NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysPut: (datacenterId: string, natGatewayId: string, natGateway: NatGatewayPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified NAT Gateway rule.
     * @summary Delete NAT Gateway rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesDelete: (datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified NAT Gateway rule.
     * @summary Retrieve NAT Gateway rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesFindByNatGatewayRuleId: (datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all rules for the specified NAT Gateway.
     * @summary List NAT Gateway rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesGet: (datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Updates the properties of the specified NAT Gateway rule.
     * @summary Partially Modify a NAT Gateway Rule by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {NatGatewayRuleProperties} natGatewayRuleProperties The properties of the NAT Gateway rule to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesPatch: (datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRuleProperties: NatGatewayRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a rule for the specified NAT Gateway.
     * @summary Create a NAT Gateway Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {NatGatewayRule} natGatewayRule The NAT Gateway rule to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesPost: (datacenterId: string, natGatewayId: string, natGatewayRule: NatGatewayRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modify the specified NAT Gateway rule.
     * @summary Modify a NAT Gateway Rule by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {NatGatewayRulePut} natGatewayRule The modified NAT Gateway rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesPut: (datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRule: NatGatewayRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * NATGatewaysApi - functional programming interface
 * @export
 */
export declare const NATGatewaysApiFp: (configuration?: Configuration) => {
    /**
     * Remove the specified NAT Gateway from the data center.
     * @summary Delete NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysDelete(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @summary Retrieve NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFindByNatGatewayId(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateway>>;
    /**
     * Delete the specified NAT Gateway Flow Log.
     * @summary Delete NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsDelete(datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the specified NAT Gateway Flow Log.
     * @summary Retrieve NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsFindByFlowLogId(datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * List all the Flow Logs for the specified NAT Gateway.
     * @summary List NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsGet(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLogs>>;
    /**
     * Update the properties of the specified NAT Gateway Flow Log.
     * @summary Partially modify NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogProperties} natGatewayFlowLogProperties The properties of the Flow Log to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsPatch(datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * Adds a new Flow Log to the specified NAT Gateway.
     * @summary Create a NAT Gateway Flow Log
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {FlowLog} natGatewayFlowLog The Flow Log to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsPost(datacenterId: string, natGatewayId: string, natGatewayFlowLog: FlowLog, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * Modify the specified NAT Gateway Flow Log.
     * @summary Modify NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogPut} natGatewayFlowLog The modified NAT Gateway Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsPut(datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLog: FlowLogPut, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * List all NAT Gateways within the data center.
     * @summary List NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateways>>;
    /**
     * Update the properties of the specified NAT Gateway within the data center.
     * @summary Partially modify NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {NatGatewayProperties} natGatewayProperties The properties of the NAT Gateway to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysPatch(datacenterId: string, natGatewayId: string, natGatewayProperties: NatGatewayProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateway>>;
    /**
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
     * @summary Create a NAT Gateway
     * @param {string} datacenterId The unique ID of the data center.
     * @param {NatGateway} natGateway The NAT Gateway to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysPost(datacenterId: string, natGateway: NatGateway, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateway>>;
    /**
     * Modify the properties of the specified NAT Gateway within the data center.
     * @summary Modify NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {NatGatewayPut} natGateway The modified NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysPut(datacenterId: string, natGatewayId: string, natGateway: NatGatewayPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGateway>>;
    /**
     * Delete the specified NAT Gateway rule.
     * @summary Delete NAT Gateway rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesDelete(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified NAT Gateway rule.
     * @summary Retrieve NAT Gateway rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesFindByNatGatewayRuleId(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRule>>;
    /**
     * List all rules for the specified NAT Gateway.
     * @summary List NAT Gateway rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesGet(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRules>>;
    /**
     * Updates the properties of the specified NAT Gateway rule.
     * @summary Partially Modify a NAT Gateway Rule by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {NatGatewayRuleProperties} natGatewayRuleProperties The properties of the NAT Gateway rule to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesPatch(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRuleProperties: NatGatewayRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRule>>;
    /**
     * Creates a rule for the specified NAT Gateway.
     * @summary Create a NAT Gateway Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {NatGatewayRule} natGatewayRule The NAT Gateway rule to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesPost(datacenterId: string, natGatewayId: string, natGatewayRule: NatGatewayRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRule>>;
    /**
     * Modify the specified NAT Gateway rule.
     * @summary Modify a NAT Gateway Rule by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {NatGatewayRulePut} natGatewayRule The modified NAT Gateway rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesPut(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRule: NatGatewayRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatGatewayRule>>;
};
/**
 * NATGatewaysApi - factory interface
 * @export
 */
export declare const NATGatewaysApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Remove the specified NAT Gateway from the data center.
     * @summary Delete NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysDelete(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @summary Retrieve NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFindByNatGatewayId(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateway>;
    /**
     * Delete the specified NAT Gateway Flow Log.
     * @summary Delete NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsDelete(datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the specified NAT Gateway Flow Log.
     * @summary Retrieve NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsFindByFlowLogId(datacenterId: string, natGatewayId: string, flowLogId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * List all the Flow Logs for the specified NAT Gateway.
     * @summary List NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsGet(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, options?: any): AxiosPromise<FlowLogs>;
    /**
     * Update the properties of the specified NAT Gateway Flow Log.
     * @summary Partially modify NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogProperties} natGatewayFlowLogProperties The properties of the Flow Log to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsPatch(datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * Adds a new Flow Log to the specified NAT Gateway.
     * @summary Create a NAT Gateway Flow Log
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {FlowLog} natGatewayFlowLog The Flow Log to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsPost(datacenterId: string, natGatewayId: string, natGatewayFlowLog: FlowLog, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * Modify the specified NAT Gateway Flow Log.
     * @summary Modify NAT Gateway Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogPut} natGatewayFlowLog The modified NAT Gateway Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysFlowlogsPut(datacenterId: string, natGatewayId: string, flowLogId: string, natGatewayFlowLog: FlowLogPut, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * List all NAT Gateways within the data center.
     * @summary List NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateways>;
    /**
     * Update the properties of the specified NAT Gateway within the data center.
     * @summary Partially modify NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {NatGatewayProperties} natGatewayProperties The properties of the NAT Gateway to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysPatch(datacenterId: string, natGatewayId: string, natGatewayProperties: NatGatewayProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateway>;
    /**
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
     * @summary Create a NAT Gateway
     * @param {string} datacenterId The unique ID of the data center.
     * @param {NatGateway} natGateway The NAT Gateway to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysPost(datacenterId: string, natGateway: NatGateway, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateway>;
    /**
     * Modify the properties of the specified NAT Gateway within the data center.
     * @summary Modify NAT Gateways
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {NatGatewayPut} natGateway The modified NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysPut(datacenterId: string, natGatewayId: string, natGateway: NatGatewayPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGateway>;
    /**
     * Delete the specified NAT Gateway rule.
     * @summary Delete NAT Gateway rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesDelete(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified NAT Gateway rule.
     * @summary Retrieve NAT Gateway rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesFindByNatGatewayRuleId(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRule>;
    /**
     * List all rules for the specified NAT Gateway.
     * @summary List NAT Gateway rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesGet(datacenterId: string, natGatewayId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRules>;
    /**
     * Updates the properties of the specified NAT Gateway rule.
     * @summary Partially Modify a NAT Gateway Rule by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {NatGatewayRuleProperties} natGatewayRuleProperties The properties of the NAT Gateway rule to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesPatch(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRuleProperties: NatGatewayRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRule>;
    /**
     * Creates a rule for the specified NAT Gateway.
     * @summary Create a NAT Gateway Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {NatGatewayRule} natGatewayRule The NAT Gateway rule to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesPost(datacenterId: string, natGatewayId: string, natGatewayRule: NatGatewayRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRule>;
    /**
     * Modify the specified NAT Gateway rule.
     * @summary Modify a NAT Gateway Rule by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} natGatewayId The unique ID of the NAT Gateway.
     * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
     * @param {NatGatewayRulePut} natGatewayRule The modified NAT Gateway rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNatgatewaysRulesPut(datacenterId: string, natGatewayId: string, natGatewayRuleId: string, natGatewayRule: NatGatewayRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NatGatewayRule>;
};
/**
 * Request parameters for datacentersNatgatewaysDelete operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysDeleteRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly natGatewayId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNatgatewaysFindByNatGatewayId operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayIdRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly natGatewayId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNatgatewaysFlowlogsDelete operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsDeleteRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly natGatewayId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly flowLogId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsDelete
     */
    readonly depth?: number;
}
/**
 * Request parameters for datacentersNatgatewaysFlowlogsFindByFlowLogId operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly natGatewayId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly flowLogId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogId
     */
    readonly depth?: number;
}
/**
 * Request parameters for datacentersNatgatewaysFlowlogsGet operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsGetRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly natGatewayId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly depth?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersNatgatewaysFlowlogsPatch operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPatchRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly natGatewayId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly flowLogId: string;
    /**
     * The properties of the Flow Log to be updated.
     * @type {FlowLogProperties}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly natGatewayFlowLogProperties: FlowLogProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPatch
     */
    readonly depth?: number;
}
/**
 * Request parameters for datacentersNatgatewaysFlowlogsPost operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPostRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly natGatewayId: string;
    /**
     * The Flow Log to create.
     * @type {FlowLog}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly natGatewayFlowLog: FlowLog;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPost
     */
    readonly depth?: number;
}
/**
 * Request parameters for datacentersNatgatewaysFlowlogsPut operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPutRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysFlowlogsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly natGatewayId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly flowLogId: string;
    /**
     * The modified NAT Gateway Flow Log.
     * @type {FlowLogPut}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly natGatewayFlowLog: FlowLogPut;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysFlowlogsPut
     */
    readonly depth?: number;
}
/**
 * Request parameters for datacentersNatgatewaysGet operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysGetRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly datacenterId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NATGatewaysApiDatacentersNatgatewaysGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersNatgatewaysPatch operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysPatchRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly natGatewayId: string;
    /**
     * The properties of the NAT Gateway to be updated.
     * @type {NatGatewayProperties}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly natGatewayProperties: NatGatewayProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNatgatewaysPost operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysPostRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly datacenterId: string;
    /**
     * The NAT Gateway to create.
     * @type {NatGateway}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly natGateway: NatGateway;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNatgatewaysPut operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysPutRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly natGatewayId: string;
    /**
     * The modified NAT Gateway.
     * @type {NatGatewayPut}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly natGateway: NatGatewayPut;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNatgatewaysRulesDelete operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesDeleteRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly natGatewayId: string;
    /**
     * The unique ID of the NAT Gateway rule.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly natGatewayRuleId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNatgatewaysRulesFindByNatGatewayRuleId operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly natGatewayId: string;
    /**
     * The unique ID of the NAT Gateway rule.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly natGatewayRuleId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNatgatewaysRulesGet operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesGetRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly natGatewayId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersNatgatewaysRulesPatch operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesPatchRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly natGatewayId: string;
    /**
     * The unique ID of the NAT Gateway rule.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly natGatewayRuleId: string;
    /**
     * The properties of the NAT Gateway rule to be updated.
     * @type {NatGatewayRuleProperties}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly natGatewayRuleProperties: NatGatewayRuleProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNatgatewaysRulesPost operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesPostRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly natGatewayId: string;
    /**
     * The NAT Gateway rule to create.
     * @type {NatGatewayRule}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly natGatewayRule: NatGatewayRule;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNatgatewaysRulesPut operation in NATGatewaysApi.
 * @export
 * @interface NATGatewaysApiDatacentersNatgatewaysRulesPutRequest
 */
export interface NATGatewaysApiDatacentersNatgatewaysRulesPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the NAT Gateway.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly natGatewayId: string;
    /**
     * The unique ID of the NAT Gateway rule.
     * @type {string}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly natGatewayRuleId: string;
    /**
     * The modified NAT Gateway rule.
     * @type {NatGatewayRulePut}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly natGatewayRule: NatGatewayRulePut;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NATGatewaysApiDatacentersNatgatewaysRulesPut
     */
    readonly xContractNumber?: number;
}
/**
 * NATGatewaysApi - object-oriented interface
 * @export
 * @class NATGatewaysApi
 * @extends {BaseAPI}
 */
export declare class NATGatewaysApi extends BaseAPI {
    /**
     * Remove the specified NAT Gateway from the data center.
     * @summary Delete NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysDelete(requestParameters: NATGatewaysApiDatacentersNatgatewaysDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @summary Retrieve NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysFindByNatGatewayId(requestParameters: NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayIdRequest, options?: any): Promise<import("axios").AxiosResponse<NatGateway>>;
    /**
     * Delete the specified NAT Gateway Flow Log.
     * @summary Delete NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysFlowlogsDelete(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the specified NAT Gateway Flow Log.
     * @summary Retrieve NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysFlowlogsFindByFlowLogId(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * List all the Flow Logs for the specified NAT Gateway.
     * @summary List NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysFlowlogsGet(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsGetRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLogs>>;
    /**
     * Update the properties of the specified NAT Gateway Flow Log.
     * @summary Partially modify NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysFlowlogsPatch(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsPatchRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * Adds a new Flow Log to the specified NAT Gateway.
     * @summary Create a NAT Gateway Flow Log
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysFlowlogsPost(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsPostRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * Modify the specified NAT Gateway Flow Log.
     * @summary Modify NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysFlowlogsPut(requestParameters: NATGatewaysApiDatacentersNatgatewaysFlowlogsPutRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * List all NAT Gateways within the data center.
     * @summary List NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysGet(requestParameters: NATGatewaysApiDatacentersNatgatewaysGetRequest, options?: any): Promise<import("axios").AxiosResponse<NatGateways>>;
    /**
     * Update the properties of the specified NAT Gateway within the data center.
     * @summary Partially modify NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysPatch(requestParameters: NATGatewaysApiDatacentersNatgatewaysPatchRequest, options?: any): Promise<import("axios").AxiosResponse<NatGateway>>;
    /**
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
     * @summary Create a NAT Gateway
     * @param {NATGatewaysApiDatacentersNatgatewaysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysPost(requestParameters: NATGatewaysApiDatacentersNatgatewaysPostRequest, options?: any): Promise<import("axios").AxiosResponse<NatGateway>>;
    /**
     * Modify the properties of the specified NAT Gateway within the data center.
     * @summary Modify NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysPut(requestParameters: NATGatewaysApiDatacentersNatgatewaysPutRequest, options?: any): Promise<import("axios").AxiosResponse<NatGateway>>;
    /**
     * Delete the specified NAT Gateway rule.
     * @summary Delete NAT Gateway rules
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysRulesDelete(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified NAT Gateway rule.
     * @summary Retrieve NAT Gateway rules
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysRulesFindByNatGatewayRuleId(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest, options?: any): Promise<import("axios").AxiosResponse<NatGatewayRule>>;
    /**
     * List all rules for the specified NAT Gateway.
     * @summary List NAT Gateway rules
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysRulesGet(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesGetRequest, options?: any): Promise<import("axios").AxiosResponse<NatGatewayRules>>;
    /**
     * Updates the properties of the specified NAT Gateway rule.
     * @summary Partially Modify a NAT Gateway Rule by ID
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysRulesPatch(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesPatchRequest, options?: any): Promise<import("axios").AxiosResponse<NatGatewayRule>>;
    /**
     * Creates a rule for the specified NAT Gateway.
     * @summary Create a NAT Gateway Rule
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysRulesPost(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesPostRequest, options?: any): Promise<import("axios").AxiosResponse<NatGatewayRule>>;
    /**
     * Modify the specified NAT Gateway rule.
     * @summary Modify a NAT Gateway Rule by ID
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    datacentersNatgatewaysRulesPut(requestParameters: NATGatewaysApiDatacentersNatgatewaysRulesPutRequest, options?: any): Promise<import("axios").AxiosResponse<NatGatewayRule>>;
}
