"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NATGatewaysApi = exports.NATGatewaysApiFactory = exports.NATGatewaysApiFp = exports.NATGatewaysApiAxiosParamCreator = void 0;
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * NATGatewaysApi - axios parameter creator
 * @export
 */
exports.NATGatewaysApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Remove the specified NAT Gateway from the data center.
         * @summary Delete NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysDelete: function (datacenterId, natGatewayId, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysDelete.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysDelete.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve the properties of the specified NAT Gateway within the data center.
         * @summary Retrieve NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFindByNatGatewayId: function (datacenterId, natGatewayId, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFindByNatGatewayId.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFindByNatGatewayId.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete the specified NAT Gateway Flow Log.
         * @summary Delete NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsDelete: function (datacenterId, natGatewayId, flowLogId, pretty, depth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsDelete.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsDelete.');
                            }
                            if (flowLogId === null || flowLogId === undefined) {
                                throw new base_1.RequiredError('flowLogId', 'Required parameter flowLogId was null or undefined when calling datacentersNatgatewaysFlowlogsDelete.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)))
                                .replace("{" + "flowLogId" + "}", encodeURIComponent(String(flowLogId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve the specified NAT Gateway Flow Log.
         * @summary Retrieve NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsFindByFlowLogId: function (datacenterId, natGatewayId, flowLogId, pretty, depth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsFindByFlowLogId.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsFindByFlowLogId.');
                            }
                            if (flowLogId === null || flowLogId === undefined) {
                                throw new base_1.RequiredError('flowLogId', 'Required parameter flowLogId was null or undefined when calling datacentersNatgatewaysFlowlogsFindByFlowLogId.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)))
                                .replace("{" + "flowLogId" + "}", encodeURIComponent(String(flowLogId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all the Flow Logs for the specified NAT Gateway.
         * @summary List NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsGet: function (datacenterId, natGatewayId, pretty, depth, offset, limit, orderBy, maxResults, filters, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsGet.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsGet.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((offset === undefined) && (configuration !== undefined)) {
                                offset = configuration.getDefaultParamValue('offset');
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if ((limit === undefined) && (configuration !== undefined)) {
                                limit = configuration.getDefaultParamValue('limit');
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['orderBy'] = orderBy;
                            }
                            if (maxResults !== undefined) {
                                localVarQueryParameter['maxResults'] = maxResults;
                            }
                            if (filters !== undefined) {
                                if (typeof (filters) === "object") {
                                    filters = new Map(Object.entries(filters));
                                }
                                filters.forEach(function (value, key) {
                                    localVarQueryParameter["filter." + key] = value;
                                });
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update the properties of the specified NAT Gateway Flow Log.
         * @summary Partially modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} natGatewayFlowLogProperties The properties of the Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPatch: function (datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsPatch.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsPatch.');
                            }
                            if (flowLogId === null || flowLogId === undefined) {
                                throw new base_1.RequiredError('flowLogId', 'Required parameter flowLogId was null or undefined when calling datacentersNatgatewaysFlowlogsPatch.');
                            }
                            if (natGatewayFlowLogProperties === null || natGatewayFlowLogProperties === undefined) {
                                throw new base_1.RequiredError('natGatewayFlowLogProperties', 'Required parameter natGatewayFlowLogProperties was null or undefined when calling datacentersNatgatewaysFlowlogsPatch.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)))
                                .replace("{" + "flowLogId" + "}", encodeURIComponent(String(flowLogId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof natGatewayFlowLogProperties !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(natGatewayFlowLogProperties !== undefined ? natGatewayFlowLogProperties : {})
                                : (natGatewayFlowLogProperties || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Adds a new Flow Log to the specified NAT Gateway.
         * @summary Create a NAT Gateway Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {FlowLog} natGatewayFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPost: function (datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsPost.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsPost.');
                            }
                            if (natGatewayFlowLog === null || natGatewayFlowLog === undefined) {
                                throw new base_1.RequiredError('natGatewayFlowLog', 'Required parameter natGatewayFlowLog was null or undefined when calling datacentersNatgatewaysFlowlogsPost.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof natGatewayFlowLog !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(natGatewayFlowLog !== undefined ? natGatewayFlowLog : {})
                                : (natGatewayFlowLog || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Modify the specified NAT Gateway Flow Log.
         * @summary Modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} natGatewayFlowLog The modified NAT Gateway Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPut: function (datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysFlowlogsPut.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysFlowlogsPut.');
                            }
                            if (flowLogId === null || flowLogId === undefined) {
                                throw new base_1.RequiredError('flowLogId', 'Required parameter flowLogId was null or undefined when calling datacentersNatgatewaysFlowlogsPut.');
                            }
                            if (natGatewayFlowLog === null || natGatewayFlowLog === undefined) {
                                throw new base_1.RequiredError('natGatewayFlowLog', 'Required parameter natGatewayFlowLog was null or undefined when calling datacentersNatgatewaysFlowlogsPut.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)))
                                .replace("{" + "flowLogId" + "}", encodeURIComponent(String(flowLogId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof natGatewayFlowLog !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(natGatewayFlowLog !== undefined ? natGatewayFlowLog : {})
                                : (natGatewayFlowLog || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all NAT Gateways within the data center.
         * @summary List NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysGet: function (datacenterId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysGet.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['orderBy'] = orderBy;
                            }
                            if (maxResults !== undefined) {
                                localVarQueryParameter['maxResults'] = maxResults;
                            }
                            if (filters !== undefined) {
                                if (typeof (filters) === "object") {
                                    filters = new Map(Object.entries(filters));
                                }
                                filters.forEach(function (value, key) {
                                    localVarQueryParameter["filter." + key] = value;
                                });
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update the properties of the specified NAT Gateway within the data center.
         * @summary Partially modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayProperties} natGatewayProperties The properties of the NAT Gateway to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPatch: function (datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysPatch.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysPatch.');
                            }
                            if (natGatewayProperties === null || natGatewayProperties === undefined) {
                                throw new base_1.RequiredError('natGatewayProperties', 'Required parameter natGatewayProperties was null or undefined when calling datacentersNatgatewaysPatch.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof natGatewayProperties !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(natGatewayProperties !== undefined ? natGatewayProperties : {})
                                : (natGatewayProperties || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
         * @summary Create a NAT Gateway
         * @param {string} datacenterId The unique ID of the data center.
         * @param {NatGateway} natGateway The NAT Gateway to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPost: function (datacenterId, natGateway, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysPost.');
                            }
                            if (natGateway === null || natGateway === undefined) {
                                throw new base_1.RequiredError('natGateway', 'Required parameter natGateway was null or undefined when calling datacentersNatgatewaysPost.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof natGateway !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(natGateway !== undefined ? natGateway : {})
                                : (natGateway || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Modify the properties of the specified NAT Gateway within the data center.
         * @summary Modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayPut} natGateway The modified NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPut: function (datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysPut.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysPut.');
                            }
                            if (natGateway === null || natGateway === undefined) {
                                throw new base_1.RequiredError('natGateway', 'Required parameter natGateway was null or undefined when calling datacentersNatgatewaysPut.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof natGateway !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(natGateway !== undefined ? natGateway : {})
                                : (natGateway || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete the specified NAT Gateway rule.
         * @summary Delete NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesDelete: function (datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesDelete.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesDelete.');
                            }
                            if (natGatewayRuleId === null || natGatewayRuleId === undefined) {
                                throw new base_1.RequiredError('natGatewayRuleId', 'Required parameter natGatewayRuleId was null or undefined when calling datacentersNatgatewaysRulesDelete.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)))
                                .replace("{" + "natGatewayRuleId" + "}", encodeURIComponent(String(natGatewayRuleId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve the properties of the specified NAT Gateway rule.
         * @summary Retrieve NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesFindByNatGatewayRuleId: function (datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesFindByNatGatewayRuleId.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesFindByNatGatewayRuleId.');
                            }
                            if (natGatewayRuleId === null || natGatewayRuleId === undefined) {
                                throw new base_1.RequiredError('natGatewayRuleId', 'Required parameter natGatewayRuleId was null or undefined when calling datacentersNatgatewaysRulesFindByNatGatewayRuleId.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)))
                                .replace("{" + "natGatewayRuleId" + "}", encodeURIComponent(String(natGatewayRuleId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all rules for the specified NAT Gateway.
         * @summary List NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesGet: function (datacenterId, natGatewayId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesGet.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesGet.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['orderBy'] = orderBy;
                            }
                            if (maxResults !== undefined) {
                                localVarQueryParameter['maxResults'] = maxResults;
                            }
                            if (filters !== undefined) {
                                if (typeof (filters) === "object") {
                                    filters = new Map(Object.entries(filters));
                                }
                                filters.forEach(function (value, key) {
                                    localVarQueryParameter["filter." + key] = value;
                                });
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates the properties of the specified NAT Gateway rule.
         * @summary Partially Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRuleProperties} natGatewayRuleProperties The properties of the NAT Gateway rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPatch: function (datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesPatch.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesPatch.');
                            }
                            if (natGatewayRuleId === null || natGatewayRuleId === undefined) {
                                throw new base_1.RequiredError('natGatewayRuleId', 'Required parameter natGatewayRuleId was null or undefined when calling datacentersNatgatewaysRulesPatch.');
                            }
                            if (natGatewayRuleProperties === null || natGatewayRuleProperties === undefined) {
                                throw new base_1.RequiredError('natGatewayRuleProperties', 'Required parameter natGatewayRuleProperties was null or undefined when calling datacentersNatgatewaysRulesPatch.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)))
                                .replace("{" + "natGatewayRuleId" + "}", encodeURIComponent(String(natGatewayRuleId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof natGatewayRuleProperties !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(natGatewayRuleProperties !== undefined ? natGatewayRuleProperties : {})
                                : (natGatewayRuleProperties || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Creates a rule for the specified NAT Gateway.
         * @summary Create a NAT Gateway Rule
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayRule} natGatewayRule The NAT Gateway rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPost: function (datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesPost.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesPost.');
                            }
                            if (natGatewayRule === null || natGatewayRule === undefined) {
                                throw new base_1.RequiredError('natGatewayRule', 'Required parameter natGatewayRule was null or undefined when calling datacentersNatgatewaysRulesPost.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof natGatewayRule !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(natGatewayRule !== undefined ? natGatewayRule : {})
                                : (natGatewayRule || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Modify the specified NAT Gateway rule.
         * @summary Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRulePut} natGatewayRule The modified NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPut: function (datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersNatgatewaysRulesPut.');
                            }
                            if (natGatewayId === null || natGatewayId === undefined) {
                                throw new base_1.RequiredError('natGatewayId', 'Required parameter natGatewayId was null or undefined when calling datacentersNatgatewaysRulesPut.');
                            }
                            if (natGatewayRuleId === null || natGatewayRuleId === undefined) {
                                throw new base_1.RequiredError('natGatewayRuleId', 'Required parameter natGatewayRuleId was null or undefined when calling datacentersNatgatewaysRulesPut.');
                            }
                            if (natGatewayRule === null || natGatewayRule === undefined) {
                                throw new base_1.RequiredError('natGatewayRule', 'Required parameter natGatewayRule was null or undefined when calling datacentersNatgatewaysRulesPut.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "natGatewayId" + "}", encodeURIComponent(String(natGatewayId)))
                                .replace("{" + "natGatewayRuleId" + "}", encodeURIComponent(String(natGatewayRuleId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof natGatewayRule !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(natGatewayRule !== undefined ? natGatewayRule : {})
                                : (natGatewayRule || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * NATGatewaysApi - functional programming interface
 * @export
 */
exports.NATGatewaysApiFp = function (configuration) {
    return {
        /**
         * Remove the specified NAT Gateway from the data center.
         * @summary Delete NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysDelete: function (datacenterId, natGatewayId, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysDelete(datacenterId, natGatewayId, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve the properties of the specified NAT Gateway within the data center.
         * @summary Retrieve NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFindByNatGatewayId: function (datacenterId, natGatewayId, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFindByNatGatewayId(datacenterId, natGatewayId, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Delete the specified NAT Gateway Flow Log.
         * @summary Delete NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsDelete: function (datacenterId, natGatewayId, flowLogId, pretty, depth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsDelete(datacenterId, natGatewayId, flowLogId, pretty, depth, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve the specified NAT Gateway Flow Log.
         * @summary Retrieve NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsFindByFlowLogId: function (datacenterId, natGatewayId, flowLogId, pretty, depth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsFindByFlowLogId(datacenterId, natGatewayId, flowLogId, pretty, depth, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * List all the Flow Logs for the specified NAT Gateway.
         * @summary List NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsGet: function (datacenterId, natGatewayId, pretty, depth, offset, limit, orderBy, maxResults, filters, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsGet(datacenterId, natGatewayId, pretty, depth, offset, limit, orderBy, maxResults, filters, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Update the properties of the specified NAT Gateway Flow Log.
         * @summary Partially modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} natGatewayFlowLogProperties The properties of the Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPatch: function (datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsPatch(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Adds a new Flow Log to the specified NAT Gateway.
         * @summary Create a NAT Gateway Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {FlowLog} natGatewayFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPost: function (datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsPost(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Modify the specified NAT Gateway Flow Log.
         * @summary Modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} natGatewayFlowLog The modified NAT Gateway Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPut: function (datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysFlowlogsPut(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * List all NAT Gateways within the data center.
         * @summary List NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysGet: function (datacenterId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysGet(datacenterId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Update the properties of the specified NAT Gateway within the data center.
         * @summary Partially modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayProperties} natGatewayProperties The properties of the NAT Gateway to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPatch: function (datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysPatch(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
         * @summary Create a NAT Gateway
         * @param {string} datacenterId The unique ID of the data center.
         * @param {NatGateway} natGateway The NAT Gateway to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPost: function (datacenterId, natGateway, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysPost(datacenterId, natGateway, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Modify the properties of the specified NAT Gateway within the data center.
         * @summary Modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayPut} natGateway The modified NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPut: function (datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysPut(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Delete the specified NAT Gateway rule.
         * @summary Delete NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesDelete: function (datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesDelete(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve the properties of the specified NAT Gateway rule.
         * @summary Retrieve NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesFindByNatGatewayRuleId: function (datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesFindByNatGatewayRuleId(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * List all rules for the specified NAT Gateway.
         * @summary List NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesGet: function (datacenterId, natGatewayId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesGet(datacenterId, natGatewayId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Updates the properties of the specified NAT Gateway rule.
         * @summary Partially Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRuleProperties} natGatewayRuleProperties The properties of the NAT Gateway rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPatch: function (datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesPatch(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Creates a rule for the specified NAT Gateway.
         * @summary Create a NAT Gateway Rule
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayRule} natGatewayRule The NAT Gateway rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPost: function (datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesPost(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Modify the specified NAT Gateway rule.
         * @summary Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRulePut} natGatewayRule The modified NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPut: function (datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.NATGatewaysApiAxiosParamCreator(configuration).datacentersNatgatewaysRulesPut(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * NATGatewaysApi - factory interface
 * @export
 */
exports.NATGatewaysApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Remove the specified NAT Gateway from the data center.
         * @summary Delete NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysDelete: function (datacenterId, natGatewayId, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysDelete(datacenterId, natGatewayId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve the properties of the specified NAT Gateway within the data center.
         * @summary Retrieve NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFindByNatGatewayId: function (datacenterId, natGatewayId, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysFindByNatGatewayId(datacenterId, natGatewayId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete the specified NAT Gateway Flow Log.
         * @summary Delete NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsDelete: function (datacenterId, natGatewayId, flowLogId, pretty, depth, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsDelete(datacenterId, natGatewayId, flowLogId, pretty, depth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve the specified NAT Gateway Flow Log.
         * @summary Retrieve NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsFindByFlowLogId: function (datacenterId, natGatewayId, flowLogId, pretty, depth, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsFindByFlowLogId(datacenterId, natGatewayId, flowLogId, pretty, depth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all the Flow Logs for the specified NAT Gateway.
         * @summary List NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsGet: function (datacenterId, natGatewayId, pretty, depth, offset, limit, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsGet(datacenterId, natGatewayId, pretty, depth, offset, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update the properties of the specified NAT Gateway Flow Log.
         * @summary Partially modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogProperties} natGatewayFlowLogProperties The properties of the Flow Log to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPatch: function (datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsPatch(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Adds a new Flow Log to the specified NAT Gateway.
         * @summary Create a NAT Gateway Flow Log
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {FlowLog} natGatewayFlowLog The Flow Log to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPost: function (datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsPost(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modify the specified NAT Gateway Flow Log.
         * @summary Modify NAT Gateway Flow Logs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} flowLogId The unique ID of the Flow Log.
         * @param {FlowLogPut} natGatewayFlowLog The modified NAT Gateway Flow Log.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysFlowlogsPut: function (datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysFlowlogsPut(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all NAT Gateways within the data center.
         * @summary List NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysGet: function (datacenterId, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysGet(datacenterId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update the properties of the specified NAT Gateway within the data center.
         * @summary Partially modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayProperties} natGatewayProperties The properties of the NAT Gateway to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPatch: function (datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysPatch(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
         * @summary Create a NAT Gateway
         * @param {string} datacenterId The unique ID of the data center.
         * @param {NatGateway} natGateway The NAT Gateway to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPost: function (datacenterId, natGateway, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysPost(datacenterId, natGateway, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modify the properties of the specified NAT Gateway within the data center.
         * @summary Modify NAT Gateways
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayPut} natGateway The modified NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysPut: function (datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysPut(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete the specified NAT Gateway rule.
         * @summary Delete NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesDelete: function (datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesDelete(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve the properties of the specified NAT Gateway rule.
         * @summary Retrieve NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesFindByNatGatewayRuleId: function (datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesFindByNatGatewayRuleId(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all rules for the specified NAT Gateway.
         * @summary List NAT Gateway rules
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesGet: function (datacenterId, natGatewayId, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesGet(datacenterId, natGatewayId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates the properties of the specified NAT Gateway rule.
         * @summary Partially Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRuleProperties} natGatewayRuleProperties The properties of the NAT Gateway rule to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPatch: function (datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesPatch(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a rule for the specified NAT Gateway.
         * @summary Create a NAT Gateway Rule
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {NatGatewayRule} natGatewayRule The NAT Gateway rule to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPost: function (datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesPost(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modify the specified NAT Gateway rule.
         * @summary Modify a NAT Gateway Rule by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} natGatewayId The unique ID of the NAT Gateway.
         * @param {string} natGatewayRuleId The unique ID of the NAT Gateway rule.
         * @param {NatGatewayRulePut} natGatewayRule The modified NAT Gateway rule.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersNatgatewaysRulesPut: function (datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, options) {
            return exports.NATGatewaysApiFp(configuration).datacentersNatgatewaysRulesPut(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * NATGatewaysApi - object-oriented interface
 * @export
 * @class NATGatewaysApi
 * @extends {BaseAPI}
 */
var NATGatewaysApi = /** @class */ (function (_super) {
    __extends(NATGatewaysApi, _super);
    function NATGatewaysApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Remove the specified NAT Gateway from the data center.
     * @summary Delete NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysDelete = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysDelete(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @summary Retrieve NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysFindByNatGatewayIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysFindByNatGatewayId = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFindByNatGatewayId(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete the specified NAT Gateway Flow Log.
     * @summary Delete NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysFlowlogsDelete = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsDelete(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.flowLogId, requestParameters.pretty, requestParameters.depth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve the specified NAT Gateway Flow Log.
     * @summary Retrieve NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysFlowlogsFindByFlowLogId = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsFindByFlowLogId(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.flowLogId, requestParameters.pretty, requestParameters.depth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all the Flow Logs for the specified NAT Gateway.
     * @summary List NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysFlowlogsGet = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsGet(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.pretty, requestParameters.depth, requestParameters.offset, requestParameters.limit, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update the properties of the specified NAT Gateway Flow Log.
     * @summary Partially modify NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysFlowlogsPatch = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsPatch(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.flowLogId, requestParameters.natGatewayFlowLogProperties, requestParameters.pretty, requestParameters.depth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Adds a new Flow Log to the specified NAT Gateway.
     * @summary Create a NAT Gateway Flow Log
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysFlowlogsPost = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsPost(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayFlowLog, requestParameters.pretty, requestParameters.depth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modify the specified NAT Gateway Flow Log.
     * @summary Modify NAT Gateway Flow Logs
     * @param {NATGatewaysApiDatacentersNatgatewaysFlowlogsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysFlowlogsPut = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysFlowlogsPut(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.flowLogId, requestParameters.natGatewayFlowLog, requestParameters.pretty, requestParameters.depth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all NAT Gateways within the data center.
     * @summary List NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysGet = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysGet(requestParameters.datacenterId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update the properties of the specified NAT Gateway within the data center.
     * @summary Partially modify NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysPatch = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysPatch(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with \'createInternetAccess\' privileges.
     * @summary Create a NAT Gateway
     * @param {NATGatewaysApiDatacentersNatgatewaysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysPost = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysPost(requestParameters.datacenterId, requestParameters.natGateway, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modify the properties of the specified NAT Gateway within the data center.
     * @summary Modify NAT Gateways
     * @param {NATGatewaysApiDatacentersNatgatewaysPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysPut = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysPut(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGateway, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete the specified NAT Gateway rule.
     * @summary Delete NAT Gateway rules
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysRulesDelete = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesDelete(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRuleId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve the properties of the specified NAT Gateway rule.
     * @summary Retrieve NAT Gateway rules
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysRulesFindByNatGatewayRuleId = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesFindByNatGatewayRuleId(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRuleId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all rules for the specified NAT Gateway.
     * @summary List NAT Gateway rules
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysRulesGet = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesGet(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates the properties of the specified NAT Gateway rule.
     * @summary Partially Modify a NAT Gateway Rule by ID
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysRulesPatch = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesPatch(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRuleId, requestParameters.natGatewayRuleProperties, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a rule for the specified NAT Gateway.
     * @summary Create a NAT Gateway Rule
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysRulesPost = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesPost(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRule, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modify the specified NAT Gateway rule.
     * @summary Modify a NAT Gateway Rule by ID
     * @param {NATGatewaysApiDatacentersNatgatewaysRulesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NATGatewaysApi
     */
    NATGatewaysApi.prototype.datacentersNatgatewaysRulesPut = function (requestParameters, options) {
        var _this = this;
        return exports.NATGatewaysApiFp(this.configuration).datacentersNatgatewaysRulesPut(requestParameters.datacenterId, requestParameters.natGatewayId, requestParameters.natGatewayRuleId, requestParameters.natGatewayRule, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NATGatewaysApi;
}(base_1.BaseAPI));
exports.NATGatewaysApi = NATGatewaysApi;
