/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { FirewallRule } from '../model';
import { FirewallRules } from '../model';
import { FirewallruleProperties } from '../model';
/**
 * FirewallRulesApi - axios parameter creator
 * @export
 */
export declare const FirewallRulesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete the specified firewall rule.
     * @summary Delete firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesDelete: (datacenterId: string, serverId: string, nicId: string, firewallruleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified firewall rule.
     * @summary Retrieve firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesFindById: (datacenterId: string, serverId: string, nicId: string, firewallruleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all firewall rules for the specified NIC.
     * @summary List firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesGet: (datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified firewall rule.
     * @summary Partially modify firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {FirewallruleProperties} firewallrule The properties of the firewall rule to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesPatch: (datacenterId: string, serverId: string, nicId: string, firewallruleId: string, firewallrule: FirewallruleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a firewall rule for the specified NIC.
     * @summary Create a Firewall Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {FirewallRule} firewallrule The firewall rule to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesPost: (datacenterId: string, serverId: string, nicId: string, firewallrule: FirewallRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the properties of the specified firewall rule.
     * @summary Modify a Firewall Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {FirewallRule} firewallrule The modified firewall rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesPut: (datacenterId: string, serverId: string, nicId: string, firewallruleId: string, firewallrule: FirewallRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * FirewallRulesApi - functional programming interface
 * @export
 */
export declare const FirewallRulesApiFp: (configuration?: Configuration) => {
    /**
     * Delete the specified firewall rule.
     * @summary Delete firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesDelete(datacenterId: string, serverId: string, nicId: string, firewallruleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified firewall rule.
     * @summary Retrieve firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesFindById(datacenterId: string, serverId: string, nicId: string, firewallruleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRule>>;
    /**
     * List all firewall rules for the specified NIC.
     * @summary List firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesGet(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRules>>;
    /**
     * Update the properties of the specified firewall rule.
     * @summary Partially modify firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {FirewallruleProperties} firewallrule The properties of the firewall rule to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesPatch(datacenterId: string, serverId: string, nicId: string, firewallruleId: string, firewallrule: FirewallruleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRule>>;
    /**
     * Creates a firewall rule for the specified NIC.
     * @summary Create a Firewall Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {FirewallRule} firewallrule The firewall rule to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesPost(datacenterId: string, serverId: string, nicId: string, firewallrule: FirewallRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRule>>;
    /**
     * Modifies the properties of the specified firewall rule.
     * @summary Modify a Firewall Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {FirewallRule} firewallrule The modified firewall rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesPut(datacenterId: string, serverId: string, nicId: string, firewallruleId: string, firewallrule: FirewallRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirewallRule>>;
};
/**
 * FirewallRulesApi - factory interface
 * @export
 */
export declare const FirewallRulesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete the specified firewall rule.
     * @summary Delete firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesDelete(datacenterId: string, serverId: string, nicId: string, firewallruleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified firewall rule.
     * @summary Retrieve firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesFindById(datacenterId: string, serverId: string, nicId: string, firewallruleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FirewallRule>;
    /**
     * List all firewall rules for the specified NIC.
     * @summary List firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesGet(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<FirewallRules>;
    /**
     * Update the properties of the specified firewall rule.
     * @summary Partially modify firewall rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {FirewallruleProperties} firewallrule The properties of the firewall rule to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesPatch(datacenterId: string, serverId: string, nicId: string, firewallruleId: string, firewallrule: FirewallruleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FirewallRule>;
    /**
     * Creates a firewall rule for the specified NIC.
     * @summary Create a Firewall Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {FirewallRule} firewallrule The firewall rule to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesPost(datacenterId: string, serverId: string, nicId: string, firewallrule: FirewallRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FirewallRule>;
    /**
     * Modifies the properties of the specified firewall rule.
     * @summary Modify a Firewall Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} firewallruleId The unique ID of the firewall rule.
     * @param {FirewallRule} firewallrule The modified firewall rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFirewallrulesPut(datacenterId: string, serverId: string, nicId: string, firewallruleId: string, firewallrule: FirewallRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FirewallRule>;
};
/**
 * Request parameters for datacentersServersNicsFirewallrulesDelete operation in FirewallRulesApi.
 * @export
 * @interface FirewallRulesApiDatacentersServersNicsFirewallrulesDeleteRequest
 */
export interface FirewallRulesApiDatacentersServersNicsFirewallrulesDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesDelete
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesDelete
     */
    readonly nicId: string;
    /**
     * The unique ID of the firewall rule.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesDelete
     */
    readonly firewallruleId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersNicsFirewallrulesFindById operation in FirewallRulesApi.
 * @export
 * @interface FirewallRulesApiDatacentersServersNicsFirewallrulesFindByIdRequest
 */
export interface FirewallRulesApiDatacentersServersNicsFirewallrulesFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesFindById
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesFindById
     */
    readonly nicId: string;
    /**
     * The unique ID of the firewall rule.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesFindById
     */
    readonly firewallruleId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesFindById
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesFindById
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersNicsFirewallrulesGet operation in FirewallRulesApi.
 * @export
 * @interface FirewallRulesApiDatacentersServersNicsFirewallrulesGetRequest
 */
export interface FirewallRulesApiDatacentersServersNicsFirewallrulesGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly nicId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersServersNicsFirewallrulesPatch operation in FirewallRulesApi.
 * @export
 * @interface FirewallRulesApiDatacentersServersNicsFirewallrulesPatchRequest
 */
export interface FirewallRulesApiDatacentersServersNicsFirewallrulesPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPatch
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPatch
     */
    readonly nicId: string;
    /**
     * The unique ID of the firewall rule.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPatch
     */
    readonly firewallruleId: string;
    /**
     * The properties of the firewall rule to be updated.
     * @type {FirewallruleProperties}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPatch
     */
    readonly firewallrule: FirewallruleProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersNicsFirewallrulesPost operation in FirewallRulesApi.
 * @export
 * @interface FirewallRulesApiDatacentersServersNicsFirewallrulesPostRequest
 */
export interface FirewallRulesApiDatacentersServersNicsFirewallrulesPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPost
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPost
     */
    readonly nicId: string;
    /**
     * The firewall rule to create.
     * @type {FirewallRule}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPost
     */
    readonly firewallrule: FirewallRule;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersNicsFirewallrulesPut operation in FirewallRulesApi.
 * @export
 * @interface FirewallRulesApiDatacentersServersNicsFirewallrulesPutRequest
 */
export interface FirewallRulesApiDatacentersServersNicsFirewallrulesPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPut
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPut
     */
    readonly nicId: string;
    /**
     * The unique ID of the firewall rule.
     * @type {string}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPut
     */
    readonly firewallruleId: string;
    /**
     * The modified firewall rule.
     * @type {FirewallRule}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPut
     */
    readonly firewallrule: FirewallRule;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof FirewallRulesApiDatacentersServersNicsFirewallrulesPut
     */
    readonly xContractNumber?: number;
}
/**
 * FirewallRulesApi - object-oriented interface
 * @export
 * @class FirewallRulesApi
 * @extends {BaseAPI}
 */
export declare class FirewallRulesApi extends BaseAPI {
    /**
     * Delete the specified firewall rule.
     * @summary Delete firewall rules
     * @param {FirewallRulesApiDatacentersServersNicsFirewallrulesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    datacentersServersNicsFirewallrulesDelete(requestParameters: FirewallRulesApiDatacentersServersNicsFirewallrulesDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified firewall rule.
     * @summary Retrieve firewall rules
     * @param {FirewallRulesApiDatacentersServersNicsFirewallrulesFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    datacentersServersNicsFirewallrulesFindById(requestParameters: FirewallRulesApiDatacentersServersNicsFirewallrulesFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<FirewallRule>>;
    /**
     * List all firewall rules for the specified NIC.
     * @summary List firewall rules
     * @param {FirewallRulesApiDatacentersServersNicsFirewallrulesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    datacentersServersNicsFirewallrulesGet(requestParameters: FirewallRulesApiDatacentersServersNicsFirewallrulesGetRequest, options?: any): Promise<import("axios").AxiosResponse<FirewallRules>>;
    /**
     * Update the properties of the specified firewall rule.
     * @summary Partially modify firewall rules
     * @param {FirewallRulesApiDatacentersServersNicsFirewallrulesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    datacentersServersNicsFirewallrulesPatch(requestParameters: FirewallRulesApiDatacentersServersNicsFirewallrulesPatchRequest, options?: any): Promise<import("axios").AxiosResponse<FirewallRule>>;
    /**
     * Creates a firewall rule for the specified NIC.
     * @summary Create a Firewall Rule
     * @param {FirewallRulesApiDatacentersServersNicsFirewallrulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    datacentersServersNicsFirewallrulesPost(requestParameters: FirewallRulesApiDatacentersServersNicsFirewallrulesPostRequest, options?: any): Promise<import("axios").AxiosResponse<FirewallRule>>;
    /**
     * Modifies the properties of the specified firewall rule.
     * @summary Modify a Firewall Rule
     * @param {FirewallRulesApiDatacentersServersNicsFirewallrulesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    datacentersServersNicsFirewallrulesPut(requestParameters: FirewallRulesApiDatacentersServersNicsFirewallrulesPutRequest, options?: any): Promise<import("axios").AxiosResponse<FirewallRule>>;
}
