/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { S3Key } from '../model';
import { S3Keys } from '../model';
import { S3ObjectStorageSSO } from '../model';
/**
 * UserS3KeysApi - axios parameter creator
 * @export
 */
export declare const UserS3KeysApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete the specified user S3 key.
     * @summary Delete S3 keys
     * @param {string} userId The unique ID of the user.
     * @param {string} keyId The unique ID of the S3 key.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysDelete: (userId: string, keyId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the specified user S3 key. The user ID is in the response body when the user is created, and in the list of the users, returned by GET. The key ID is in the response body when the S3 key is created, and in the list of all user S3 keys, returned by GET.
     * @summary Retrieve user S3 keys by key ID
     * @param {string} userId The unique ID of the user.
     * @param {string} keyId The unique ID of the S3 key.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysFindByKeyId: (userId: string, keyId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List S3 keys by user ID. The user ID is in the response body when the user is created, and in the list of the users, returned by GET.
     * @summary List user S3 keys
     * @param {string} userId The unique ID of the user.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysGet: (userId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Create an S3 key for the specified user. The user ID is in the response body when the user is created, and in the list of the users, returned by GET. A maximum of five keys per user can be generated.
     * @summary Create user S3 keys
     * @param {string} userId The unique ID of the user.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysPost: (userId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Enables or disables the specified user S3 key.
     * @summary Modify a S3 Key by Key ID
     * @param {string} userId The unique ID of the user.
     * @param {string} keyId The unique ID of the S3 key.
     * @param {S3Key} s3Key The modified S3 key.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysPut: (userId: string, keyId: string, s3Key: S3Key, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve S3 Object Storage single sign-on URLs for the the specified user. The user ID is in the response body when the user is created, and in the list of the users, returned by GET.
     * @summary Retrieve S3 single sign-on URLs
     * @param {string} userId The unique ID of the user.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3ssourlGet: (userId: string, pretty?: boolean, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
};
/**
 * UserS3KeysApi - functional programming interface
 * @export
 */
export declare const UserS3KeysApiFp: (configuration?: Configuration) => {
    /**
     * Delete the specified user S3 key.
     * @summary Delete S3 keys
     * @param {string} userId The unique ID of the user.
     * @param {string} keyId The unique ID of the S3 key.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysDelete(userId: string, keyId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the specified user S3 key. The user ID is in the response body when the user is created, and in the list of the users, returned by GET. The key ID is in the response body when the S3 key is created, and in the list of all user S3 keys, returned by GET.
     * @summary Retrieve user S3 keys by key ID
     * @param {string} userId The unique ID of the user.
     * @param {string} keyId The unique ID of the S3 key.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysFindByKeyId(userId: string, keyId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3Key>>;
    /**
     * List S3 keys by user ID. The user ID is in the response body when the user is created, and in the list of the users, returned by GET.
     * @summary List user S3 keys
     * @param {string} userId The unique ID of the user.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysGet(userId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3Keys>>;
    /**
     * Create an S3 key for the specified user. The user ID is in the response body when the user is created, and in the list of the users, returned by GET. A maximum of five keys per user can be generated.
     * @summary Create user S3 keys
     * @param {string} userId The unique ID of the user.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysPost(userId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3Key>>;
    /**
     * Enables or disables the specified user S3 key.
     * @summary Modify a S3 Key by Key ID
     * @param {string} userId The unique ID of the user.
     * @param {string} keyId The unique ID of the S3 key.
     * @param {S3Key} s3Key The modified S3 key.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysPut(userId: string, keyId: string, s3Key: S3Key, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3Key>>;
    /**
     * Retrieve S3 Object Storage single sign-on URLs for the the specified user. The user ID is in the response body when the user is created, and in the list of the users, returned by GET.
     * @summary Retrieve S3 single sign-on URLs
     * @param {string} userId The unique ID of the user.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3ssourlGet(userId: string, pretty?: boolean, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3ObjectStorageSSO>>;
};
/**
 * UserS3KeysApi - factory interface
 * @export
 */
export declare const UserS3KeysApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete the specified user S3 key.
     * @summary Delete S3 keys
     * @param {string} userId The unique ID of the user.
     * @param {string} keyId The unique ID of the S3 key.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysDelete(userId: string, keyId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the specified user S3 key. The user ID is in the response body when the user is created, and in the list of the users, returned by GET. The key ID is in the response body when the S3 key is created, and in the list of all user S3 keys, returned by GET.
     * @summary Retrieve user S3 keys by key ID
     * @param {string} userId The unique ID of the user.
     * @param {string} keyId The unique ID of the S3 key.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysFindByKeyId(userId: string, keyId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<S3Key>;
    /**
     * List S3 keys by user ID. The user ID is in the response body when the user is created, and in the list of the users, returned by GET.
     * @summary List user S3 keys
     * @param {string} userId The unique ID of the user.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysGet(userId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<S3Keys>;
    /**
     * Create an S3 key for the specified user. The user ID is in the response body when the user is created, and in the list of the users, returned by GET. A maximum of five keys per user can be generated.
     * @summary Create user S3 keys
     * @param {string} userId The unique ID of the user.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysPost(userId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<S3Key>;
    /**
     * Enables or disables the specified user S3 key.
     * @summary Modify a S3 Key by Key ID
     * @param {string} userId The unique ID of the user.
     * @param {string} keyId The unique ID of the S3 key.
     * @param {S3Key} s3Key The modified S3 key.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3keysPut(userId: string, keyId: string, s3Key: S3Key, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<S3Key>;
    /**
     * Retrieve S3 Object Storage single sign-on URLs for the the specified user. The user ID is in the response body when the user is created, and in the list of the users, returned by GET.
     * @summary Retrieve S3 single sign-on URLs
     * @param {string} userId The unique ID of the user.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    umUsersS3ssourlGet(userId: string, pretty?: boolean, xContractNumber?: number, options?: any): AxiosPromise<S3ObjectStorageSSO>;
};
/**
 * Request parameters for umUsersS3keysDelete operation in UserS3KeysApi.
 * @export
 * @interface UserS3KeysApiUmUsersS3keysDeleteRequest
 */
export interface UserS3KeysApiUmUsersS3keysDeleteRequest {
    /**
     * The unique ID of the user.
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3keysDelete
     */
    readonly userId: string;
    /**
     * The unique ID of the S3 key.
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3keysDelete
     */
    readonly keyId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof UserS3KeysApiUmUsersS3keysDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for umUsersS3keysFindByKeyId operation in UserS3KeysApi.
 * @export
 * @interface UserS3KeysApiUmUsersS3keysFindByKeyIdRequest
 */
export interface UserS3KeysApiUmUsersS3keysFindByKeyIdRequest {
    /**
     * The unique ID of the user.
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3keysFindByKeyId
     */
    readonly userId: string;
    /**
     * The unique ID of the S3 key.
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3keysFindByKeyId
     */
    readonly keyId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof UserS3KeysApiUmUsersS3keysFindByKeyId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysFindByKeyId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysFindByKeyId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for umUsersS3keysGet operation in UserS3KeysApi.
 * @export
 * @interface UserS3KeysApiUmUsersS3keysGetRequest
 */
export interface UserS3KeysApiUmUsersS3keysGetRequest {
    /**
     * The unique ID of the user.
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3keysGet
     */
    readonly userId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof UserS3KeysApiUmUsersS3keysGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3keysGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof UserS3KeysApiUmUsersS3keysGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for umUsersS3keysPost operation in UserS3KeysApi.
 * @export
 * @interface UserS3KeysApiUmUsersS3keysPostRequest
 */
export interface UserS3KeysApiUmUsersS3keysPostRequest {
    /**
     * The unique ID of the user.
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3keysPost
     */
    readonly userId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof UserS3KeysApiUmUsersS3keysPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for umUsersS3keysPut operation in UserS3KeysApi.
 * @export
 * @interface UserS3KeysApiUmUsersS3keysPutRequest
 */
export interface UserS3KeysApiUmUsersS3keysPutRequest {
    /**
     * The unique ID of the user.
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3keysPut
     */
    readonly userId: string;
    /**
     * The unique ID of the S3 key.
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3keysPut
     */
    readonly keyId: string;
    /**
     * The modified S3 key.
     * @type {S3Key}
     * @memberof UserS3KeysApiUmUsersS3keysPut
     */
    readonly s3Key: S3Key;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof UserS3KeysApiUmUsersS3keysPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3keysPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for umUsersS3ssourlGet operation in UserS3KeysApi.
 * @export
 * @interface UserS3KeysApiUmUsersS3ssourlGetRequest
 */
export interface UserS3KeysApiUmUsersS3ssourlGetRequest {
    /**
     * The unique ID of the user.
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3ssourlGet
     */
    readonly userId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof UserS3KeysApiUmUsersS3ssourlGet
     */
    readonly pretty?: boolean;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3ssourlGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof UserS3KeysApiUmUsersS3ssourlGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof UserS3KeysApiUmUsersS3ssourlGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof UserS3KeysApiUmUsersS3ssourlGet
     */
    filters?: Map<string, string>;
}
/**
 * UserS3KeysApi - object-oriented interface
 * @export
 * @class UserS3KeysApi
 * @extends {BaseAPI}
 */
export declare class UserS3KeysApi extends BaseAPI {
    /**
     * Delete the specified user S3 key.
     * @summary Delete S3 keys
     * @param {UserS3KeysApiUmUsersS3keysDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserS3KeysApi
     */
    umUsersS3keysDelete(requestParameters: UserS3KeysApiUmUsersS3keysDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the specified user S3 key. The user ID is in the response body when the user is created, and in the list of the users, returned by GET. The key ID is in the response body when the S3 key is created, and in the list of all user S3 keys, returned by GET.
     * @summary Retrieve user S3 keys by key ID
     * @param {UserS3KeysApiUmUsersS3keysFindByKeyIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserS3KeysApi
     */
    umUsersS3keysFindByKeyId(requestParameters: UserS3KeysApiUmUsersS3keysFindByKeyIdRequest, options?: any): Promise<import("axios").AxiosResponse<S3Key>>;
    /**
     * List S3 keys by user ID. The user ID is in the response body when the user is created, and in the list of the users, returned by GET.
     * @summary List user S3 keys
     * @param {UserS3KeysApiUmUsersS3keysGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserS3KeysApi
     */
    umUsersS3keysGet(requestParameters: UserS3KeysApiUmUsersS3keysGetRequest, options?: any): Promise<import("axios").AxiosResponse<S3Keys>>;
    /**
     * Create an S3 key for the specified user. The user ID is in the response body when the user is created, and in the list of the users, returned by GET. A maximum of five keys per user can be generated.
     * @summary Create user S3 keys
     * @param {UserS3KeysApiUmUsersS3keysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserS3KeysApi
     */
    umUsersS3keysPost(requestParameters: UserS3KeysApiUmUsersS3keysPostRequest, options?: any): Promise<import("axios").AxiosResponse<S3Key>>;
    /**
     * Enables or disables the specified user S3 key.
     * @summary Modify a S3 Key by Key ID
     * @param {UserS3KeysApiUmUsersS3keysPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserS3KeysApi
     */
    umUsersS3keysPut(requestParameters: UserS3KeysApiUmUsersS3keysPutRequest, options?: any): Promise<import("axios").AxiosResponse<S3Key>>;
    /**
     * Retrieve S3 Object Storage single sign-on URLs for the the specified user. The user ID is in the response body when the user is created, and in the list of the users, returned by GET.
     * @summary Retrieve S3 single sign-on URLs
     * @param {UserS3KeysApiUmUsersS3ssourlGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserS3KeysApi
     */
    umUsersS3ssourlGet(requestParameters: UserS3KeysApiUmUsersS3ssourlGetRequest, options?: any): Promise<import("axios").AxiosResponse<S3ObjectStorageSSO>>;
}
