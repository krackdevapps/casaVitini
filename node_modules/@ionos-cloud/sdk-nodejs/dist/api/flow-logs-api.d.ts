/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { FlowLog } from '../model';
import { FlowLogProperties } from '../model';
import { FlowLogPut } from '../model';
import { FlowLogs } from '../model';
/**
 * FlowLogsApi - axios parameter creator
 * @export
 */
export declare const FlowLogsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete the specified Flow Log.
     * @summary Delete Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsDelete: (datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified Flow Log.
     * @summary Retrieve Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsFindById: (datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the Flow Logs for the specified NIC.
     * @summary List Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsGet: (datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the specified Flow Log record.
     * @summary Partially modify Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {FlowLogProperties} flowlog The Flow Log record to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsPatch: (datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogProperties, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a new Flow Log for the specified NIC.
     * @summary Create a Flow Log
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {FlowLog} flowlog The Flow Log to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsPost: (datacenterId: string, serverId: string, nicId: string, flowlog: FlowLog, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modify the specified Flow Log record.
     * @summary Modify Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {FlowLogPut} flowlog The modified Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsPut: (datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogPut, pretty?: boolean, depth?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * FlowLogsApi - functional programming interface
 * @export
 */
export declare const FlowLogsApiFp: (configuration?: Configuration) => {
    /**
     * Delete the specified Flow Log.
     * @summary Delete Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsDelete(datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified Flow Log.
     * @summary Retrieve Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsFindById(datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * List all the Flow Logs for the specified NIC.
     * @summary List Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsGet(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLogs>>;
    /**
     * Update the specified Flow Log record.
     * @summary Partially modify Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {FlowLogProperties} flowlog The Flow Log record to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsPatch(datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogProperties, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * Adds a new Flow Log for the specified NIC.
     * @summary Create a Flow Log
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {FlowLog} flowlog The Flow Log to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsPost(datacenterId: string, serverId: string, nicId: string, flowlog: FlowLog, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * Modify the specified Flow Log record.
     * @summary Modify Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {FlowLogPut} flowlog The modified Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsPut(datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogPut, pretty?: boolean, depth?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
};
/**
 * FlowLogsApi - factory interface
 * @export
 */
export declare const FlowLogsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete the specified Flow Log.
     * @summary Delete Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsDelete(datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified Flow Log.
     * @summary Retrieve Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsFindById(datacenterId: string, serverId: string, nicId: string, flowlogId: string, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * List all the Flow Logs for the specified NIC.
     * @summary List Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsGet(datacenterId: string, serverId: string, nicId: string, pretty?: boolean, depth?: number, offset?: number, limit?: number, options?: any): AxiosPromise<FlowLogs>;
    /**
     * Update the specified Flow Log record.
     * @summary Partially modify Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {FlowLogProperties} flowlog The Flow Log record to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsPatch(datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogProperties, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * Adds a new Flow Log for the specified NIC.
     * @summary Create a Flow Log
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {FlowLog} flowlog The Flow Log to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsPost(datacenterId: string, serverId: string, nicId: string, flowlog: FlowLog, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * Modify the specified Flow Log record.
     * @summary Modify Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} nicId The unique ID of the NIC.
     * @param {string} flowlogId The unique ID of the Flow Log.
     * @param {FlowLogPut} flowlog The modified Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersNicsFlowlogsPut(datacenterId: string, serverId: string, nicId: string, flowlogId: string, flowlog: FlowLogPut, pretty?: boolean, depth?: number, options?: any): AxiosPromise<FlowLog>;
};
/**
 * Request parameters for datacentersServersNicsFlowlogsDelete operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsDeleteRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly nicId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly flowlogId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsDelete
     */
    readonly depth?: number;
}
/**
 * Request parameters for datacentersServersNicsFlowlogsFindById operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsFindByIdRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly nicId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly flowlogId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsFindById
     */
    readonly depth?: number;
}
/**
 * Request parameters for datacentersServersNicsFlowlogsGet operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsGetRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly nicId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly depth?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersServersNicsFlowlogsPatch operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsPatchRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly nicId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly flowlogId: string;
    /**
     * The Flow Log record to be updated.
     * @type {FlowLogProperties}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly flowlog: FlowLogProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPatch
     */
    readonly depth?: number;
}
/**
 * Request parameters for datacentersServersNicsFlowlogsPost operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsPostRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly nicId: string;
    /**
     * The Flow Log to create.
     * @type {FlowLog}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly flowlog: FlowLog;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPost
     */
    readonly depth?: number;
}
/**
 * Request parameters for datacentersServersNicsFlowlogsPut operation in FlowLogsApi.
 * @export
 * @interface FlowLogsApiDatacentersServersNicsFlowlogsPutRequest
 */
export interface FlowLogsApiDatacentersServersNicsFlowlogsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly serverId: string;
    /**
     * The unique ID of the NIC.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly nicId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly flowlogId: string;
    /**
     * The modified Flow Log.
     * @type {FlowLogPut}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly flowlog: FlowLogPut;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof FlowLogsApiDatacentersServersNicsFlowlogsPut
     */
    readonly depth?: number;
}
/**
 * FlowLogsApi - object-oriented interface
 * @export
 * @class FlowLogsApi
 * @extends {BaseAPI}
 */
export declare class FlowLogsApi extends BaseAPI {
    /**
     * Delete the specified Flow Log.
     * @summary Delete Flow Logs
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    datacentersServersNicsFlowlogsDelete(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified Flow Log.
     * @summary Retrieve Flow Logs
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    datacentersServersNicsFlowlogsFindById(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * List all the Flow Logs for the specified NIC.
     * @summary List Flow Logs
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    datacentersServersNicsFlowlogsGet(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsGetRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLogs>>;
    /**
     * Update the specified Flow Log record.
     * @summary Partially modify Flow Logs
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    datacentersServersNicsFlowlogsPatch(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsPatchRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * Adds a new Flow Log for the specified NIC.
     * @summary Create a Flow Log
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    datacentersServersNicsFlowlogsPost(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsPostRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * Modify the specified Flow Log record.
     * @summary Modify Flow Logs
     * @param {FlowLogsApiDatacentersServersNicsFlowlogsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowLogsApi
     */
    datacentersServersNicsFlowlogsPut(requestParameters: FlowLogsApiDatacentersServersNicsFlowlogsPutRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
}
