/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { FlowLog } from '../model';
import { FlowLogProperties } from '../model';
import { FlowLogPut } from '../model';
import { FlowLogs } from '../model';
import { NetworkLoadBalancer } from '../model';
import { NetworkLoadBalancerForwardingRule } from '../model';
import { NetworkLoadBalancerForwardingRuleProperties } from '../model';
import { NetworkLoadBalancerForwardingRulePut } from '../model';
import { NetworkLoadBalancerForwardingRules } from '../model';
import { NetworkLoadBalancerProperties } from '../model';
import { NetworkLoadBalancerPut } from '../model';
import { NetworkLoadBalancers } from '../model';
/**
 * NetworkLoadBalancersApi - axios parameter creator
 * @export
 */
export declare const NetworkLoadBalancersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Remove the specified Network Load Balancer from the data center.
     * @summary Delete Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersDelete: (datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified Network Load Balancer within the data center.
     * @summary Retrieve Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFindByNetworkLoadBalancerId: (datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified Network Load Balancer Flow Log.
     * @summary Delete NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsDelete: (datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the specified Network Load Balancer Flow Log.
     * @summary Retrieve NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsFindByFlowLogId: (datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the Flow Logs for the specified Network Load Balancer.
     * @summary List NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsGet: (datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified Network Load Balancer Flow Log.
     * @summary Partially modify NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogProperties} networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsPatch: (datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a new Flow Log for the Network Load Balancer.
     * @summary Create a NLB Flow Log
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {FlowLog} networkLoadBalancerFlowLog The Flow Log to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsPost: (datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerFlowLog: FlowLog, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modify the specified Network Load Balancer Flow Log.
     * @summary Modify NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogPut} networkLoadBalancerFlowLog The modified NLB Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsPut: (datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLog: FlowLogPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified Network Load Balancer forwarding rule.
     * @summary Delete NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesDelete: (datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the specified Network Load Balance forwarding rule.
     * @summary Retrieve NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId: (datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List the forwarding rules for the specified Network Load Balancer.
     * @summary List NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesGet: (datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified Network Load Balancer forwarding rule.
     * @summary Partially modify NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {NetworkLoadBalancerForwardingRuleProperties} networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesPatch: (datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRuleProperties: NetworkLoadBalancerForwardingRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a forwarding rule for the specified Network Load Balancer.
     * @summary Create a NLB Forwarding Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {NetworkLoadBalancerForwardingRule} networkLoadBalancerForwardingRule The forwarding rule to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesPost: (datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modify the specified Network Load Balancer forwarding rule.
     * @summary Modify NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {NetworkLoadBalancerForwardingRulePut} networkLoadBalancerForwardingRule The modified NLB forwarding rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesPut: (datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the Network Load Balancers within the data center.
     * @summary List Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersGet: (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified Network Load Balancer within the data center.
     * @summary Partially modify Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {NetworkLoadBalancerProperties} networkLoadBalancerProperties The properties of the Network Load Balancer to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersPatch: (datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerProperties: NetworkLoadBalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a Network Load Balancer within the data center.
     * @summary Create a Network Load Balancer
     * @param {string} datacenterId The unique ID of the data center.
     * @param {NetworkLoadBalancer} networkLoadBalancer The Network Load Balancer to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersPost: (datacenterId: string, networkLoadBalancer: NetworkLoadBalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modify the properties of the specified Network Load Balancer within the data center.
     * @summary Modify Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {NetworkLoadBalancerPut} networkLoadBalancer The modified Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersPut: (datacenterId: string, networkLoadBalancerId: string, networkLoadBalancer: NetworkLoadBalancerPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * NetworkLoadBalancersApi - functional programming interface
 * @export
 */
export declare const NetworkLoadBalancersApiFp: (configuration?: Configuration) => {
    /**
     * Remove the specified Network Load Balancer from the data center.
     * @summary Delete Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersDelete(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified Network Load Balancer within the data center.
     * @summary Retrieve Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancer>>;
    /**
     * Delete the specified Network Load Balancer Flow Log.
     * @summary Delete NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsDelete(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the specified Network Load Balancer Flow Log.
     * @summary Retrieve NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * List all the Flow Logs for the specified Network Load Balancer.
     * @summary List NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsGet(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLogs>>;
    /**
     * Update the properties of the specified Network Load Balancer Flow Log.
     * @summary Partially modify NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogProperties} networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsPatch(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * Adds a new Flow Log for the Network Load Balancer.
     * @summary Create a NLB Flow Log
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {FlowLog} networkLoadBalancerFlowLog The Flow Log to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsPost(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerFlowLog: FlowLog, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * Modify the specified Network Load Balancer Flow Log.
     * @summary Modify NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogPut} networkLoadBalancerFlowLog The modified NLB Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsPut(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLog: FlowLogPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowLog>>;
    /**
     * Delete the specified Network Load Balancer forwarding rule.
     * @summary Delete NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesDelete(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the specified Network Load Balance forwarding rule.
     * @summary Retrieve NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRule>>;
    /**
     * List the forwarding rules for the specified Network Load Balancer.
     * @summary List NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesGet(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRules>>;
    /**
     * Update the properties of the specified Network Load Balancer forwarding rule.
     * @summary Partially modify NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {NetworkLoadBalancerForwardingRuleProperties} networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesPatch(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRuleProperties: NetworkLoadBalancerForwardingRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRule>>;
    /**
     * Creates a forwarding rule for the specified Network Load Balancer.
     * @summary Create a NLB Forwarding Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {NetworkLoadBalancerForwardingRule} networkLoadBalancerForwardingRule The forwarding rule to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesPost(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRule>>;
    /**
     * Modify the specified Network Load Balancer forwarding rule.
     * @summary Modify NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {NetworkLoadBalancerForwardingRulePut} networkLoadBalancerForwardingRule The modified NLB forwarding rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesPut(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancerForwardingRule>>;
    /**
     * List all the Network Load Balancers within the data center.
     * @summary List Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancers>>;
    /**
     * Update the properties of the specified Network Load Balancer within the data center.
     * @summary Partially modify Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {NetworkLoadBalancerProperties} networkLoadBalancerProperties The properties of the Network Load Balancer to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersPatch(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerProperties: NetworkLoadBalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancer>>;
    /**
     * Creates a Network Load Balancer within the data center.
     * @summary Create a Network Load Balancer
     * @param {string} datacenterId The unique ID of the data center.
     * @param {NetworkLoadBalancer} networkLoadBalancer The Network Load Balancer to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersPost(datacenterId: string, networkLoadBalancer: NetworkLoadBalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancer>>;
    /**
     * Modify the properties of the specified Network Load Balancer within the data center.
     * @summary Modify Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {NetworkLoadBalancerPut} networkLoadBalancer The modified Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersPut(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancer: NetworkLoadBalancerPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkLoadBalancer>>;
};
/**
 * NetworkLoadBalancersApi - factory interface
 * @export
 */
export declare const NetworkLoadBalancersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Remove the specified Network Load Balancer from the data center.
     * @summary Delete Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersDelete(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified Network Load Balancer within the data center.
     * @summary Retrieve Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancer>;
    /**
     * Delete the specified Network Load Balancer Flow Log.
     * @summary Delete NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsDelete(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the specified Network Load Balancer Flow Log.
     * @summary Retrieve NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * List all the Flow Logs for the specified Network Load Balancer.
     * @summary List NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsGet(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLogs>;
    /**
     * Update the properties of the specified Network Load Balancer Flow Log.
     * @summary Partially modify NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogProperties} networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsPatch(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLogProperties: FlowLogProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * Adds a new Flow Log for the Network Load Balancer.
     * @summary Create a NLB Flow Log
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {FlowLog} networkLoadBalancerFlowLog The Flow Log to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsPost(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerFlowLog: FlowLog, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * Modify the specified Network Load Balancer Flow Log.
     * @summary Modify NLB Flow Logs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} flowLogId The unique ID of the Flow Log.
     * @param {FlowLogPut} networkLoadBalancerFlowLog The modified NLB Flow Log.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersFlowlogsPut(datacenterId: string, networkLoadBalancerId: string, flowLogId: string, networkLoadBalancerFlowLog: FlowLogPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<FlowLog>;
    /**
     * Delete the specified Network Load Balancer forwarding rule.
     * @summary Delete NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesDelete(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the specified Network Load Balance forwarding rule.
     * @summary Retrieve NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRule>;
    /**
     * List the forwarding rules for the specified Network Load Balancer.
     * @summary List NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesGet(datacenterId: string, networkLoadBalancerId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRules>;
    /**
     * Update the properties of the specified Network Load Balancer forwarding rule.
     * @summary Partially modify NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {NetworkLoadBalancerForwardingRuleProperties} networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesPatch(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRuleProperties: NetworkLoadBalancerForwardingRuleProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRule>;
    /**
     * Creates a forwarding rule for the specified Network Load Balancer.
     * @summary Create a NLB Forwarding Rule
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {NetworkLoadBalancerForwardingRule} networkLoadBalancerForwardingRule The forwarding rule to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesPost(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRule, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRule>;
    /**
     * Modify the specified Network Load Balancer forwarding rule.
     * @summary Modify NLB forwarding rules
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {string} forwardingRuleId The unique ID of the forwarding rule.
     * @param {NetworkLoadBalancerForwardingRulePut} networkLoadBalancerForwardingRule The modified NLB forwarding rule.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersForwardingrulesPut(datacenterId: string, networkLoadBalancerId: string, forwardingRuleId: string, networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRulePut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancerForwardingRule>;
    /**
     * List all the Network Load Balancers within the data center.
     * @summary List Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<NetworkLoadBalancers>;
    /**
     * Update the properties of the specified Network Load Balancer within the data center.
     * @summary Partially modify Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {NetworkLoadBalancerProperties} networkLoadBalancerProperties The properties of the Network Load Balancer to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersPatch(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancerProperties: NetworkLoadBalancerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancer>;
    /**
     * Creates a Network Load Balancer within the data center.
     * @summary Create a Network Load Balancer
     * @param {string} datacenterId The unique ID of the data center.
     * @param {NetworkLoadBalancer} networkLoadBalancer The Network Load Balancer to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersPost(datacenterId: string, networkLoadBalancer: NetworkLoadBalancer, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancer>;
    /**
     * Modify the properties of the specified Network Load Balancer within the data center.
     * @summary Modify Network Load Balancers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} networkLoadBalancerId The unique ID of the Network Load Balancer.
     * @param {NetworkLoadBalancerPut} networkLoadBalancer The modified Network Load Balancer.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersNetworkloadbalancersPut(datacenterId: string, networkLoadBalancerId: string, networkLoadBalancer: NetworkLoadBalancerPut, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<NetworkLoadBalancer>;
};
/**
 * Request parameters for datacentersNetworkloadbalancersDelete operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersDeleteRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly networkLoadBalancerId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersFindByNetworkLoadBalancerId operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerIdRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly networkLoadBalancerId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsDelete operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDeleteRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly networkLoadBalancerId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly flowLogId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsFindByFlowLogId operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogIdRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly networkLoadBalancerId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly flowLogId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsGet operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGetRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly networkLoadBalancerId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsPatch operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatchRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly networkLoadBalancerId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly flowLogId: string;
    /**
     * The properties of the Flow Log to be updated.
     * @type {FlowLogProperties}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly networkLoadBalancerFlowLogProperties: FlowLogProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsPost operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPostRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly networkLoadBalancerId: string;
    /**
     * The Flow Log to create.
     * @type {FlowLog}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly networkLoadBalancerFlowLog: FlowLog;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersFlowlogsPut operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPutRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly networkLoadBalancerId: string;
    /**
     * The unique ID of the Flow Log.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly flowLogId: string;
    /**
     * The modified NLB Flow Log.
     * @type {FlowLogPut}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly networkLoadBalancerFlowLog: FlowLogPut;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesDelete operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDeleteRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly networkLoadBalancerId: string;
    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly forwardingRuleId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly networkLoadBalancerId: string;
    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly forwardingRuleId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesGet operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGetRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly networkLoadBalancerId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesPatch operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatchRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly networkLoadBalancerId: string;
    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly forwardingRuleId: string;
    /**
     * The properties of the forwarding rule to be updated.
     * @type {NetworkLoadBalancerForwardingRuleProperties}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly networkLoadBalancerForwardingRuleProperties: NetworkLoadBalancerForwardingRuleProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesPost operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPostRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly networkLoadBalancerId: string;
    /**
     * The forwarding rule to create.
     * @type {NetworkLoadBalancerForwardingRule}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRule;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersForwardingrulesPut operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPutRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly networkLoadBalancerId: string;
    /**
     * The unique ID of the forwarding rule.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly forwardingRuleId: string;
    /**
     * The modified NLB forwarding rule.
     * @type {NetworkLoadBalancerForwardingRulePut}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly networkLoadBalancerForwardingRule: NetworkLoadBalancerForwardingRulePut;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersGet operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersGetRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly datacenterId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersNetworkloadbalancersPatch operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatchRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly networkLoadBalancerId: string;
    /**
     * The properties of the Network Load Balancer to be updated.
     * @type {NetworkLoadBalancerProperties}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly networkLoadBalancerProperties: NetworkLoadBalancerProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersPost operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPostRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly datacenterId: string;
    /**
     * The Network Load Balancer to create.
     * @type {NetworkLoadBalancer}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly networkLoadBalancer: NetworkLoadBalancer;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersNetworkloadbalancersPut operation in NetworkLoadBalancersApi.
 * @export
 * @interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPutRequest
 */
export interface NetworkLoadBalancersApiDatacentersNetworkloadbalancersPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the Network Load Balancer.
     * @type {string}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly networkLoadBalancerId: string;
    /**
     * The modified Network Load Balancer.
     * @type {NetworkLoadBalancerPut}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly networkLoadBalancer: NetworkLoadBalancerPut;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof NetworkLoadBalancersApiDatacentersNetworkloadbalancersPut
     */
    readonly xContractNumber?: number;
}
/**
 * NetworkLoadBalancersApi - object-oriented interface
 * @export
 * @class NetworkLoadBalancersApi
 * @extends {BaseAPI}
 */
export declare class NetworkLoadBalancersApi extends BaseAPI {
    /**
     * Remove the specified Network Load Balancer from the data center.
     * @summary Delete Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersDelete(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified Network Load Balancer within the data center.
     * @summary Retrieve Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFindByNetworkLoadBalancerIdRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancer>>;
    /**
     * Delete the specified Network Load Balancer Flow Log.
     * @summary Delete NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersFlowlogsDelete(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the specified Network Load Balancer Flow Log.
     * @summary Retrieve NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsFindByFlowLogIdRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * List all the Flow Logs for the specified Network Load Balancer.
     * @summary List NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersFlowlogsGet(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsGetRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLogs>>;
    /**
     * Update the properties of the specified Network Load Balancer Flow Log.
     * @summary Partially modify NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersFlowlogsPatch(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPatchRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * Adds a new Flow Log for the Network Load Balancer.
     * @summary Create a NLB Flow Log
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersFlowlogsPost(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPostRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * Modify the specified Network Load Balancer Flow Log.
     * @summary Modify NLB Flow Logs
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersFlowlogsPut(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersFlowlogsPutRequest, options?: any): Promise<import("axios").AxiosResponse<FlowLog>>;
    /**
     * Delete the specified Network Load Balancer forwarding rule.
     * @summary Delete NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersForwardingrulesDelete(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the specified Network Load Balance forwarding rule.
     * @summary Retrieve NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancerForwardingRule>>;
    /**
     * List the forwarding rules for the specified Network Load Balancer.
     * @summary List NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersForwardingrulesGet(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesGetRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancerForwardingRules>>;
    /**
     * Update the properties of the specified Network Load Balancer forwarding rule.
     * @summary Partially modify NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersForwardingrulesPatch(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPatchRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancerForwardingRule>>;
    /**
     * Creates a forwarding rule for the specified Network Load Balancer.
     * @summary Create a NLB Forwarding Rule
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersForwardingrulesPost(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPostRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancerForwardingRule>>;
    /**
     * Modify the specified Network Load Balancer forwarding rule.
     * @summary Modify NLB forwarding rules
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersForwardingrulesPut(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersForwardingrulesPutRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancerForwardingRule>>;
    /**
     * List all the Network Load Balancers within the data center.
     * @summary List Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersGet(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersGetRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancers>>;
    /**
     * Update the properties of the specified Network Load Balancer within the data center.
     * @summary Partially modify Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersPatch(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersPatchRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancer>>;
    /**
     * Creates a Network Load Balancer within the data center.
     * @summary Create a Network Load Balancer
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersPost(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersPostRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancer>>;
    /**
     * Modify the properties of the specified Network Load Balancer within the data center.
     * @summary Modify Network Load Balancers
     * @param {NetworkLoadBalancersApiDatacentersNetworkloadbalancersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkLoadBalancersApi
     */
    datacentersNetworkloadbalancersPut(requestParameters: NetworkLoadBalancersApiDatacentersNetworkloadbalancersPutRequest, options?: any): Promise<import("axios").AxiosResponse<NetworkLoadBalancer>>;
}
