"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancersApi = exports.LoadBalancersApiFactory = exports.LoadBalancersApiFp = exports.LoadBalancersApiAxiosParamCreator = void 0;
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * LoadBalancersApi - axios parameter creator
 * @export
 */
exports.LoadBalancersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Detach the specified NIC from the Load Balancer.
         * @summary Detach balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {string} nicId The unique ID of the NIC.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsDelete: function (datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersBalancednicsDelete.');
                            }
                            if (loadbalancerId === null || loadbalancerId === undefined) {
                                throw new base_1.RequiredError('loadbalancerId', 'Required parameter loadbalancerId was null or undefined when calling datacentersLoadbalancersBalancednicsDelete.');
                            }
                            if (nicId === null || nicId === undefined) {
                                throw new base_1.RequiredError('nicId', 'Required parameter nicId was null or undefined when calling datacentersLoadbalancersBalancednicsDelete.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}/balancednics/{nicId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "loadbalancerId" + "}", encodeURIComponent(String(loadbalancerId)))
                                .replace("{" + "nicId" + "}", encodeURIComponent(String(nicId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve the properties of the specified NIC, attached to the Load Balancer.
         * @summary Retrieve balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {string} nicId The unique ID of the NIC.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsFindByNicId: function (datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersBalancednicsFindByNicId.');
                            }
                            if (loadbalancerId === null || loadbalancerId === undefined) {
                                throw new base_1.RequiredError('loadbalancerId', 'Required parameter loadbalancerId was null or undefined when calling datacentersLoadbalancersBalancednicsFindByNicId.');
                            }
                            if (nicId === null || nicId === undefined) {
                                throw new base_1.RequiredError('nicId', 'Required parameter nicId was null or undefined when calling datacentersLoadbalancersBalancednicsFindByNicId.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}/balancednics/{nicId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "loadbalancerId" + "}", encodeURIComponent(String(loadbalancerId)))
                                .replace("{" + "nicId" + "}", encodeURIComponent(String(nicId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all NICs, attached to the specified Load Balancer.
         * @summary List balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsGet: function (datacenterId, loadbalancerId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersBalancednicsGet.');
                            }
                            if (loadbalancerId === null || loadbalancerId === undefined) {
                                throw new base_1.RequiredError('loadbalancerId', 'Required parameter loadbalancerId was null or undefined when calling datacentersLoadbalancersBalancednicsGet.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}/balancednics"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "loadbalancerId" + "}", encodeURIComponent(String(loadbalancerId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['orderBy'] = orderBy;
                            }
                            if (maxResults !== undefined) {
                                localVarQueryParameter['maxResults'] = maxResults;
                            }
                            if (filters !== undefined) {
                                if (typeof (filters) === "object") {
                                    filters = new Map(Object.entries(filters));
                                }
                                filters.forEach(function (value, key) {
                                    localVarQueryParameter["filter." + key] = value;
                                });
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Attachs an existing NIC to the specified Load Balancer.
         * @summary Attach balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {Nic} nic The NIC to be attached.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsPost: function (datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersBalancednicsPost.');
                            }
                            if (loadbalancerId === null || loadbalancerId === undefined) {
                                throw new base_1.RequiredError('loadbalancerId', 'Required parameter loadbalancerId was null or undefined when calling datacentersLoadbalancersBalancednicsPost.');
                            }
                            if (nic === null || nic === undefined) {
                                throw new base_1.RequiredError('nic', 'Required parameter nic was null or undefined when calling datacentersLoadbalancersBalancednicsPost.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}/balancednics"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "loadbalancerId" + "}", encodeURIComponent(String(loadbalancerId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof nic !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(nic !== undefined ? nic : {})
                                : (nic || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the specified Load Balancer from the data center.
         * @summary Delete Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersDelete: function (datacenterId, loadbalancerId, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersDelete.');
                            }
                            if (loadbalancerId === null || loadbalancerId === undefined) {
                                throw new base_1.RequiredError('loadbalancerId', 'Required parameter loadbalancerId was null or undefined when calling datacentersLoadbalancersDelete.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "loadbalancerId" + "}", encodeURIComponent(String(loadbalancerId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve the properties of the specified Load Balancer within the data center.
         * @summary Retrieve Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersFindById: function (datacenterId, loadbalancerId, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersFindById.');
                            }
                            if (loadbalancerId === null || loadbalancerId === undefined) {
                                throw new base_1.RequiredError('loadbalancerId', 'Required parameter loadbalancerId was null or undefined when calling datacentersLoadbalancersFindById.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "loadbalancerId" + "}", encodeURIComponent(String(loadbalancerId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all the Load Balancers within the data center.
         * @summary List Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersGet: function (datacenterId, pretty, depth, xContractNumber, offset, limit, orderBy, maxResults, filters, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersGet.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((offset === undefined) && (configuration !== undefined)) {
                                offset = configuration.getDefaultParamValue('offset');
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if ((limit === undefined) && (configuration !== undefined)) {
                                limit = configuration.getDefaultParamValue('limit');
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['orderBy'] = orderBy;
                            }
                            if (maxResults !== undefined) {
                                localVarQueryParameter['maxResults'] = maxResults;
                            }
                            if (filters !== undefined) {
                                if (typeof (filters) === "object") {
                                    filters = new Map(Object.entries(filters));
                                }
                                filters.forEach(function (value, key) {
                                    localVarQueryParameter["filter." + key] = value;
                                });
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update the properties of the specified Load Balancer within the data center.
         * @summary Partially modify Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {LoadbalancerProperties} loadbalancer The properties of the Load Balancer to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersPatch: function (datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersPatch.');
                            }
                            if (loadbalancerId === null || loadbalancerId === undefined) {
                                throw new base_1.RequiredError('loadbalancerId', 'Required parameter loadbalancerId was null or undefined when calling datacentersLoadbalancersPatch.');
                            }
                            if (loadbalancer === null || loadbalancer === undefined) {
                                throw new base_1.RequiredError('loadbalancer', 'Required parameter loadbalancer was null or undefined when calling datacentersLoadbalancersPatch.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "loadbalancerId" + "}", encodeURIComponent(String(loadbalancerId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof loadbalancer !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(loadbalancer !== undefined ? loadbalancer : {})
                                : (loadbalancer || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Creates a Load Balancer within the data center.
         * @summary Create a Load Balancer
         * @param {string} datacenterId The unique ID of the data center.
         * @param {Loadbalancer} loadbalancer The Load Balancer to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersPost: function (datacenterId, loadbalancer, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersPost.');
                            }
                            if (loadbalancer === null || loadbalancer === undefined) {
                                throw new base_1.RequiredError('loadbalancer', 'Required parameter loadbalancer was null or undefined when calling datacentersLoadbalancersPost.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof loadbalancer !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(loadbalancer !== undefined ? loadbalancer : {})
                                : (loadbalancer || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Modifies the properties of the specified Load Balancer within the data center.
         * @summary Modify a Load Balancer by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {Loadbalancer} loadbalancer The modified Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersPut: function (datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (datacenterId === null || datacenterId === undefined) {
                                throw new base_1.RequiredError('datacenterId', 'Required parameter datacenterId was null or undefined when calling datacentersLoadbalancersPut.');
                            }
                            if (loadbalancerId === null || loadbalancerId === undefined) {
                                throw new base_1.RequiredError('loadbalancerId', 'Required parameter loadbalancerId was null or undefined when calling datacentersLoadbalancersPut.');
                            }
                            if (loadbalancer === null || loadbalancer === undefined) {
                                throw new base_1.RequiredError('loadbalancer', 'Required parameter loadbalancer was null or undefined when calling datacentersLoadbalancersPut.');
                            }
                            localVarPath = "/datacenters/{datacenterId}/loadbalancers/{loadbalancerId}"
                                .replace("{" + "datacenterId" + "}", encodeURIComponent(String(datacenterId)))
                                .replace("{" + "loadbalancerId" + "}", encodeURIComponent(String(loadbalancerId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Basic Authentication required
                            // http basic authentication required
                            if (configuration && (configuration.username || configuration.password)) {
                                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
                            }
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("Authorization")];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
                            _b.label = 5;
                        case 5:
                            if ((pretty === undefined) && (configuration !== undefined)) {
                                pretty = configuration.getDefaultParamValue('pretty');
                            }
                            if (pretty !== undefined) {
                                localVarQueryParameter['pretty'] = pretty;
                            }
                            if ((depth === undefined) && (configuration !== undefined)) {
                                depth = configuration.getDefaultParamValue('depth');
                            }
                            if (depth !== undefined) {
                                localVarQueryParameter['depth'] = depth;
                            }
                            if ((xContractNumber === undefined) && (configuration !== undefined)) {
                                xContractNumber = configuration.getDefaultParamValue('xContractNumber');
                            }
                            if (xContractNumber !== undefined && xContractNumber !== null) {
                                localVarHeaderParameter['X-Contract-Number'] = String(JSON.stringify(xContractNumber));
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            queryParameters = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                queryParameters.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                queryParameters.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            nonString = typeof loadbalancer !== 'string';
                            needsSerialization = nonString && configuration && configuration.isJsonMime
                                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                                : nonString;
                            localVarRequestOptions.data = needsSerialization
                                ? JSON.stringify(loadbalancer !== undefined ? loadbalancer : {})
                                : (loadbalancer || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * LoadBalancersApi - functional programming interface
 * @export
 */
exports.LoadBalancersApiFp = function (configuration) {
    return {
        /**
         * Detach the specified NIC from the Load Balancer.
         * @summary Detach balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {string} nicId The unique ID of the NIC.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsDelete: function (datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersBalancednicsDelete(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve the properties of the specified NIC, attached to the Load Balancer.
         * @summary Retrieve balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {string} nicId The unique ID of the NIC.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsFindByNicId: function (datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersBalancednicsFindByNicId(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * List all NICs, attached to the specified Load Balancer.
         * @summary List balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsGet: function (datacenterId, loadbalancerId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersBalancednicsGet(datacenterId, loadbalancerId, pretty, depth, xContractNumber, orderBy, maxResults, filters, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Attachs an existing NIC to the specified Load Balancer.
         * @summary Attach balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {Nic} nic The NIC to be attached.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsPost: function (datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersBalancednicsPost(datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Remove the specified Load Balancer from the data center.
         * @summary Delete Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersDelete: function (datacenterId, loadbalancerId, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersDelete(datacenterId, loadbalancerId, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve the properties of the specified Load Balancer within the data center.
         * @summary Retrieve Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersFindById: function (datacenterId, loadbalancerId, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersFindById(datacenterId, loadbalancerId, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * List all the Load Balancers within the data center.
         * @summary List Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersGet: function (datacenterId, pretty, depth, xContractNumber, offset, limit, orderBy, maxResults, filters, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersGet(datacenterId, pretty, depth, xContractNumber, offset, limit, orderBy, maxResults, filters, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Update the properties of the specified Load Balancer within the data center.
         * @summary Partially modify Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {LoadbalancerProperties} loadbalancer The properties of the Load Balancer to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersPatch: function (datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersPatch(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Creates a Load Balancer within the data center.
         * @summary Create a Load Balancer
         * @param {string} datacenterId The unique ID of the data center.
         * @param {Loadbalancer} loadbalancer The Load Balancer to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersPost: function (datacenterId, loadbalancer, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersPost(datacenterId, loadbalancer, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
        /**
         * Modifies the properties of the specified Load Balancer within the data center.
         * @summary Modify a Load Balancer by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {Loadbalancer} loadbalancer The modified Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersPut: function (datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var axiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.LoadBalancersApiAxiosParamCreator(configuration).datacentersLoadbalancersPut(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options)];
                        case 1:
                            axiosArgs = _a.sent();
                            return [2 /*return*/, base_1.runRequest(axiosArgs, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * LoadBalancersApi - factory interface
 * @export
 */
exports.LoadBalancersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Detach the specified NIC from the Load Balancer.
         * @summary Detach balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {string} nicId The unique ID of the NIC.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsDelete: function (datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersBalancednicsDelete(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve the properties of the specified NIC, attached to the Load Balancer.
         * @summary Retrieve balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {string} nicId The unique ID of the NIC.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsFindByNicId: function (datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersBalancednicsFindByNicId(datacenterId, loadbalancerId, nicId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all NICs, attached to the specified Load Balancer.
         * @summary List balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsGet: function (datacenterId, loadbalancerId, pretty, depth, xContractNumber, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersBalancednicsGet(datacenterId, loadbalancerId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Attachs an existing NIC to the specified Load Balancer.
         * @summary Attach balanced NICs
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {Nic} nic The NIC to be attached.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersBalancednicsPost: function (datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersBalancednicsPost(datacenterId, loadbalancerId, nic, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the specified Load Balancer from the data center.
         * @summary Delete Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersDelete: function (datacenterId, loadbalancerId, pretty, depth, xContractNumber, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersDelete(datacenterId, loadbalancerId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve the properties of the specified Load Balancer within the data center.
         * @summary Retrieve Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersFindById: function (datacenterId, loadbalancerId, pretty, depth, xContractNumber, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersFindById(datacenterId, loadbalancerId, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all the Load Balancers within the data center.
         * @summary List Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
         * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersGet: function (datacenterId, pretty, depth, xContractNumber, offset, limit, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersGet(datacenterId, pretty, depth, xContractNumber, offset, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update the properties of the specified Load Balancer within the data center.
         * @summary Partially modify Load Balancers
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {LoadbalancerProperties} loadbalancer The properties of the Load Balancer to be updated.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersPatch: function (datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersPatch(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Creates a Load Balancer within the data center.
         * @summary Create a Load Balancer
         * @param {string} datacenterId The unique ID of the data center.
         * @param {Loadbalancer} loadbalancer The Load Balancer to create.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersPost: function (datacenterId, loadbalancer, pretty, depth, xContractNumber, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersPost(datacenterId, loadbalancer, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Modifies the properties of the specified Load Balancer within the data center.
         * @summary Modify a Load Balancer by ID
         * @param {string} datacenterId The unique ID of the data center.
         * @param {string} loadbalancerId The unique ID of the Load Balancer.
         * @param {Loadbalancer} loadbalancer The modified Load Balancer.
         * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
         * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
         * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datacentersLoadbalancersPut: function (datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options) {
            return exports.LoadBalancersApiFp(configuration).datacentersLoadbalancersPut(datacenterId, loadbalancerId, loadbalancer, pretty, depth, xContractNumber, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * LoadBalancersApi - object-oriented interface
 * @export
 * @class LoadBalancersApi
 * @extends {BaseAPI}
 */
var LoadBalancersApi = /** @class */ (function (_super) {
    __extends(LoadBalancersApi, _super);
    function LoadBalancersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Detach the specified NIC from the Load Balancer.
     * @summary Detach balanced NICs
     * @param {LoadBalancersApiDatacentersLoadbalancersBalancednicsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersBalancednicsDelete = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersBalancednicsDelete(requestParameters.datacenterId, requestParameters.loadbalancerId, requestParameters.nicId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve the properties of the specified NIC, attached to the Load Balancer.
     * @summary Retrieve balanced NICs
     * @param {LoadBalancersApiDatacentersLoadbalancersBalancednicsFindByNicIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersBalancednicsFindByNicId = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersBalancednicsFindByNicId(requestParameters.datacenterId, requestParameters.loadbalancerId, requestParameters.nicId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all NICs, attached to the specified Load Balancer.
     * @summary List balanced NICs
     * @param {LoadBalancersApiDatacentersLoadbalancersBalancednicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersBalancednicsGet = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersBalancednicsGet(requestParameters.datacenterId, requestParameters.loadbalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Attachs an existing NIC to the specified Load Balancer.
     * @summary Attach balanced NICs
     * @param {LoadBalancersApiDatacentersLoadbalancersBalancednicsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersBalancednicsPost = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersBalancednicsPost(requestParameters.datacenterId, requestParameters.loadbalancerId, requestParameters.nic, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the specified Load Balancer from the data center.
     * @summary Delete Load Balancers
     * @param {LoadBalancersApiDatacentersLoadbalancersDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersDelete = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersDelete(requestParameters.datacenterId, requestParameters.loadbalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve the properties of the specified Load Balancer within the data center.
     * @summary Retrieve Load Balancers
     * @param {LoadBalancersApiDatacentersLoadbalancersFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersFindById = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersFindById(requestParameters.datacenterId, requestParameters.loadbalancerId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all the Load Balancers within the data center.
     * @summary List Load Balancers
     * @param {LoadBalancersApiDatacentersLoadbalancersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersGet = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersGet(requestParameters.datacenterId, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, requestParameters.offset, requestParameters.limit, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update the properties of the specified Load Balancer within the data center.
     * @summary Partially modify Load Balancers
     * @param {LoadBalancersApiDatacentersLoadbalancersPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersPatch = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersPatch(requestParameters.datacenterId, requestParameters.loadbalancerId, requestParameters.loadbalancer, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Creates a Load Balancer within the data center.
     * @summary Create a Load Balancer
     * @param {LoadBalancersApiDatacentersLoadbalancersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersPost = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersPost(requestParameters.datacenterId, requestParameters.loadbalancer, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Modifies the properties of the specified Load Balancer within the data center.
     * @summary Modify a Load Balancer by ID
     * @param {LoadBalancersApiDatacentersLoadbalancersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    LoadBalancersApi.prototype.datacentersLoadbalancersPut = function (requestParameters, options) {
        var _this = this;
        return exports.LoadBalancersApiFp(this.configuration).datacentersLoadbalancersPut(requestParameters.datacenterId, requestParameters.loadbalancerId, requestParameters.loadbalancer, requestParameters.pretty, requestParameters.depth, requestParameters.xContractNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LoadBalancersApi;
}(base_1.BaseAPI));
exports.LoadBalancersApi = LoadBalancersApi;
