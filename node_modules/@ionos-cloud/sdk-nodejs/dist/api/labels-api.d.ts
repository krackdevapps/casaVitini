/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Label } from '../model';
import { LabelResource } from '../model';
import { LabelResources } from '../model';
import { Labels } from '../model';
/**
 * LabelsApi - axios parameter creator
 * @export
 */
export declare const LabelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete the specified data center label.
     * @summary Delete data center labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsDelete: (datacenterId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified data center label.
     * @summary Retrieve data center labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsFindByKey: (datacenterId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the the labels for the specified data center.
     * @summary List data center labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsGet: (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a new label to the specified data center.
     * @summary Create a Data Center Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsPost: (datacenterId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the specified data center label.
     * @summary Modify a Data Center Label by Key
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsPut: (datacenterId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified server label.
     * @summary Delete server labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsDelete: (datacenterId: string, serverId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified server label.
     * @summary Retrieve server labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsFindByKey: (datacenterId: string, serverId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the the labels for the specified server.
     * @summary List server labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsGet: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a new label to the specified server.
     * @summary Create a Server Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsPost: (datacenterId: string, serverId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the specified server label.
     * @summary Modify a Server Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsPut: (datacenterId: string, serverId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified volume label.
     * @summary Delete volume labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsDelete: (datacenterId: string, volumeId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified volume label.
     * @summary Retrieve volume labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsFindByKey: (datacenterId: string, volumeId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the the labels for the specified volume.
     * @summary List volume labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsGet: (datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a new label to the specified volume.
     * @summary Create a Volume Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsPost: (datacenterId: string, volumeId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the specified volume label.
     * @summary Modify a Volume Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsPut: (datacenterId: string, volumeId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified IP block label.
     * @summary Delete IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsDelete: (ipblockId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified IP block label.
     * @summary Retrieve IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsFindByKey: (ipblockId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the the labels for the specified IP block.
     * @summary List IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsGet: (ipblockId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Add a new label to the specified IP block.
     * @summary Create IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsPost: (ipblockId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the specified IP block label.
     * @summary Modify a IP Block Label by ID
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsPut: (ipblockId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve a label by label URN.  The URN is unique for each label, and consists of:  urn:label:<resource_type>:<resource_uuid>:<key>
     * @summary Retrieve labels by URN
     * @param {string} labelurn The label URN; URN is unique for each label, and consists of:  urn:label:&lt;resource_type&gt;:&lt;resource_uuid&gt;:&lt;key&gt;&lt;key&gt;
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    labelsFindByUrn: (labelurn: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all available labels.
     * @summary List labels
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    labelsGet: (pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified snapshot label.
     * @summary Delete snapshot labels
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsDelete: (snapshotId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified snapshot label.
     * @summary Retrieve snapshot labels
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsFindByKey: (snapshotId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the the labels for the specified snapshot.
     * @summary List snapshot labels
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsGet: (snapshotId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a new label to the specified snapshot.
     * @summary Create a Snapshot Label
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsPost: (snapshotId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the specified snapshot label.
     * @summary Modify a Snapshot Label by ID
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsPut: (snapshotId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * LabelsApi - functional programming interface
 * @export
 */
export declare const LabelsApiFp: (configuration?: Configuration) => {
    /**
     * Delete the specified data center label.
     * @summary Delete data center labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsDelete(datacenterId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified data center label.
     * @summary Retrieve data center labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsFindByKey(datacenterId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * List all the the labels for the specified data center.
     * @summary List data center labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResources>>;
    /**
     * Adds a new label to the specified data center.
     * @summary Create a Data Center Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsPost(datacenterId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * Modifies the specified data center label.
     * @summary Modify a Data Center Label by Key
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsPut(datacenterId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * Delete the specified server label.
     * @summary Delete server labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsDelete(datacenterId: string, serverId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified server label.
     * @summary Retrieve server labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsFindByKey(datacenterId: string, serverId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * List all the the labels for the specified server.
     * @summary List server labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResources>>;
    /**
     * Adds a new label to the specified server.
     * @summary Create a Server Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsPost(datacenterId: string, serverId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * Modifies the specified server label.
     * @summary Modify a Server Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsPut(datacenterId: string, serverId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * Delete the specified volume label.
     * @summary Delete volume labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsDelete(datacenterId: string, volumeId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified volume label.
     * @summary Retrieve volume labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsFindByKey(datacenterId: string, volumeId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * List all the the labels for the specified volume.
     * @summary List volume labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsGet(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResources>>;
    /**
     * Adds a new label to the specified volume.
     * @summary Create a Volume Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsPost(datacenterId: string, volumeId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * Modifies the specified volume label.
     * @summary Modify a Volume Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsPut(datacenterId: string, volumeId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * Delete the specified IP block label.
     * @summary Delete IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsDelete(ipblockId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified IP block label.
     * @summary Retrieve IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsFindByKey(ipblockId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * List all the the labels for the specified IP block.
     * @summary List IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsGet(ipblockId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResources>>;
    /**
     * Add a new label to the specified IP block.
     * @summary Create IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsPost(ipblockId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * Modifies the specified IP block label.
     * @summary Modify a IP Block Label by ID
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsPut(ipblockId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * Retrieve a label by label URN.  The URN is unique for each label, and consists of:  urn:label:<resource_type>:<resource_uuid>:<key>
     * @summary Retrieve labels by URN
     * @param {string} labelurn The label URN; URN is unique for each label, and consists of:  urn:label:&lt;resource_type&gt;:&lt;resource_uuid&gt;:&lt;key&gt;&lt;key&gt;
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    labelsFindByUrn(labelurn: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>>;
    /**
     * List all available labels.
     * @summary List labels
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    labelsGet(pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Labels>>;
    /**
     * Delete the specified snapshot label.
     * @summary Delete snapshot labels
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsDelete(snapshotId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified snapshot label.
     * @summary Retrieve snapshot labels
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsFindByKey(snapshotId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * List all the the labels for the specified snapshot.
     * @summary List snapshot labels
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsGet(snapshotId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResources>>;
    /**
     * Adds a new label to the specified snapshot.
     * @summary Create a Snapshot Label
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsPost(snapshotId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
    /**
     * Modifies the specified snapshot label.
     * @summary Modify a Snapshot Label by ID
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsPut(snapshotId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResource>>;
};
/**
 * LabelsApi - factory interface
 * @export
 */
export declare const LabelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete the specified data center label.
     * @summary Delete data center labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsDelete(datacenterId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified data center label.
     * @summary Retrieve data center labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsFindByKey(datacenterId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * List all the the labels for the specified data center.
     * @summary List data center labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResources>;
    /**
     * Adds a new label to the specified data center.
     * @summary Create a Data Center Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsPost(datacenterId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * Modifies the specified data center label.
     * @summary Modify a Data Center Label by Key
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersLabelsPut(datacenterId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * Delete the specified server label.
     * @summary Delete server labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsDelete(datacenterId: string, serverId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified server label.
     * @summary Retrieve server labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsFindByKey(datacenterId: string, serverId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * List all the the labels for the specified server.
     * @summary List server labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResources>;
    /**
     * Adds a new label to the specified server.
     * @summary Create a Server Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsPost(datacenterId: string, serverId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * Modifies the specified server label.
     * @summary Modify a Server Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersLabelsPut(datacenterId: string, serverId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * Delete the specified volume label.
     * @summary Delete volume labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsDelete(datacenterId: string, volumeId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified volume label.
     * @summary Retrieve volume labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsFindByKey(datacenterId: string, volumeId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * List all the the labels for the specified volume.
     * @summary List volume labels
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsGet(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResources>;
    /**
     * Adds a new label to the specified volume.
     * @summary Create a Volume Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsPost(datacenterId: string, volumeId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * Modifies the specified volume label.
     * @summary Modify a Volume Label
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesLabelsPut(datacenterId: string, volumeId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * Delete the specified IP block label.
     * @summary Delete IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsDelete(ipblockId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified IP block label.
     * @summary Retrieve IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsFindByKey(ipblockId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * List all the the labels for the specified IP block.
     * @summary List IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsGet(ipblockId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResources>;
    /**
     * Add a new label to the specified IP block.
     * @summary Create IP block labels
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsPost(ipblockId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * Modifies the specified IP block label.
     * @summary Modify a IP Block Label by ID
     * @param {string} ipblockId The unique ID of the IP block.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipblocksLabelsPut(ipblockId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * Retrieve a label by label URN.  The URN is unique for each label, and consists of:  urn:label:<resource_type>:<resource_uuid>:<key>
     * @summary Retrieve labels by URN
     * @param {string} labelurn The label URN; URN is unique for each label, and consists of:  urn:label:&lt;resource_type&gt;:&lt;resource_uuid&gt;:&lt;key&gt;&lt;key&gt;
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    labelsFindByUrn(labelurn: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Label>;
    /**
     * List all available labels.
     * @summary List labels
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    labelsGet(pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Labels>;
    /**
     * Delete the specified snapshot label.
     * @summary Delete snapshot labels
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsDelete(snapshotId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified snapshot label.
     * @summary Retrieve snapshot labels
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {string} key The label key
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsFindByKey(snapshotId: string, key: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * List all the the labels for the specified snapshot.
     * @summary List snapshot labels
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsGet(snapshotId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResources>;
    /**
     * Adds a new label to the specified snapshot.
     * @summary Create a Snapshot Label
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {LabelResource} label The label to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsPost(snapshotId: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
    /**
     * Modifies the specified snapshot label.
     * @summary Modify a Snapshot Label by ID
     * @param {string} snapshotId The unique ID of the snapshot.
     * @param {string} key The label key
     * @param {LabelResource} label The modified label
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotsLabelsPut(snapshotId: string, key: string, label: LabelResource, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<LabelResource>;
};
/**
 * Request parameters for datacentersLabelsDelete operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersLabelsDeleteRequest
 */
export interface LabelsApiDatacentersLabelsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersLabelsDelete
     */
    readonly datacenterId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiDatacentersLabelsDelete
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersLabelsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLabelsFindByKey operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersLabelsFindByKeyRequest
 */
export interface LabelsApiDatacentersLabelsFindByKeyRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersLabelsFindByKey
     */
    readonly datacenterId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiDatacentersLabelsFindByKey
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersLabelsFindByKey
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsFindByKey
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsFindByKey
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLabelsGet operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersLabelsGetRequest
 */
export interface LabelsApiDatacentersLabelsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersLabelsGet
     */
    readonly datacenterId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersLabelsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LabelsApiDatacentersLabelsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LabelsApiDatacentersLabelsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersLabelsPost operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersLabelsPostRequest
 */
export interface LabelsApiDatacentersLabelsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersLabelsPost
     */
    readonly datacenterId: string;
    /**
     * The label to create.
     * @type {LabelResource}
     * @memberof LabelsApiDatacentersLabelsPost
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersLabelsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersLabelsPut operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersLabelsPutRequest
 */
export interface LabelsApiDatacentersLabelsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersLabelsPut
     */
    readonly datacenterId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiDatacentersLabelsPut
     */
    readonly key: string;
    /**
     * The modified label
     * @type {LabelResource}
     * @memberof LabelsApiDatacentersLabelsPut
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersLabelsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersLabelsPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersLabelsDelete operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersServersLabelsDeleteRequest
 */
export interface LabelsApiDatacentersServersLabelsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsDelete
     */
    readonly serverId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsDelete
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersServersLabelsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersLabelsFindByKey operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersServersLabelsFindByKeyRequest
 */
export interface LabelsApiDatacentersServersLabelsFindByKeyRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsFindByKey
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsFindByKey
     */
    readonly serverId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsFindByKey
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersServersLabelsFindByKey
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsFindByKey
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsFindByKey
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersLabelsGet operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersServersLabelsGetRequest
 */
export interface LabelsApiDatacentersServersLabelsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsGet
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersServersLabelsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LabelsApiDatacentersServersLabelsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersServersLabelsPost operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersServersLabelsPostRequest
 */
export interface LabelsApiDatacentersServersLabelsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsPost
     */
    readonly serverId: string;
    /**
     * The label to create.
     * @type {LabelResource}
     * @memberof LabelsApiDatacentersServersLabelsPost
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersServersLabelsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersLabelsPut operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersServersLabelsPutRequest
 */
export interface LabelsApiDatacentersServersLabelsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsPut
     */
    readonly serverId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiDatacentersServersLabelsPut
     */
    readonly key: string;
    /**
     * The modified label
     * @type {LabelResource}
     * @memberof LabelsApiDatacentersServersLabelsPut
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersServersLabelsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersServersLabelsPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersVolumesLabelsDelete operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersVolumesLabelsDeleteRequest
 */
export interface LabelsApiDatacentersVolumesLabelsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsDelete
     */
    readonly volumeId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsDelete
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersVolumesLabelsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersVolumesLabelsFindByKey operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersVolumesLabelsFindByKeyRequest
 */
export interface LabelsApiDatacentersVolumesLabelsFindByKeyRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsFindByKey
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsFindByKey
     */
    readonly volumeId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsFindByKey
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersVolumesLabelsFindByKey
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsFindByKey
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsFindByKey
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersVolumesLabelsGet operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersVolumesLabelsGetRequest
 */
export interface LabelsApiDatacentersVolumesLabelsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsGet
     */
    readonly volumeId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersVolumesLabelsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LabelsApiDatacentersVolumesLabelsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersVolumesLabelsPost operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersVolumesLabelsPostRequest
 */
export interface LabelsApiDatacentersVolumesLabelsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsPost
     */
    readonly volumeId: string;
    /**
     * The label to create.
     * @type {LabelResource}
     * @memberof LabelsApiDatacentersVolumesLabelsPost
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersVolumesLabelsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersVolumesLabelsPut operation in LabelsApi.
 * @export
 * @interface LabelsApiDatacentersVolumesLabelsPutRequest
 */
export interface LabelsApiDatacentersVolumesLabelsPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsPut
     */
    readonly volumeId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiDatacentersVolumesLabelsPut
     */
    readonly key: string;
    /**
     * The modified label
     * @type {LabelResource}
     * @memberof LabelsApiDatacentersVolumesLabelsPut
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiDatacentersVolumesLabelsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiDatacentersVolumesLabelsPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for ipblocksLabelsDelete operation in LabelsApi.
 * @export
 * @interface LabelsApiIpblocksLabelsDeleteRequest
 */
export interface LabelsApiIpblocksLabelsDeleteRequest {
    /**
     * The unique ID of the IP block.
     * @type {string}
     * @memberof LabelsApiIpblocksLabelsDelete
     */
    readonly ipblockId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiIpblocksLabelsDelete
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiIpblocksLabelsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for ipblocksLabelsFindByKey operation in LabelsApi.
 * @export
 * @interface LabelsApiIpblocksLabelsFindByKeyRequest
 */
export interface LabelsApiIpblocksLabelsFindByKeyRequest {
    /**
     * The unique ID of the IP block.
     * @type {string}
     * @memberof LabelsApiIpblocksLabelsFindByKey
     */
    readonly ipblockId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiIpblocksLabelsFindByKey
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiIpblocksLabelsFindByKey
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsFindByKey
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsFindByKey
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for ipblocksLabelsGet operation in LabelsApi.
 * @export
 * @interface LabelsApiIpblocksLabelsGetRequest
 */
export interface LabelsApiIpblocksLabelsGetRequest {
    /**
     * The unique ID of the IP block.
     * @type {string}
     * @memberof LabelsApiIpblocksLabelsGet
     */
    readonly ipblockId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiIpblocksLabelsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LabelsApiIpblocksLabelsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LabelsApiIpblocksLabelsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for ipblocksLabelsPost operation in LabelsApi.
 * @export
 * @interface LabelsApiIpblocksLabelsPostRequest
 */
export interface LabelsApiIpblocksLabelsPostRequest {
    /**
     * The unique ID of the IP block.
     * @type {string}
     * @memberof LabelsApiIpblocksLabelsPost
     */
    readonly ipblockId: string;
    /**
     * The label to create.
     * @type {LabelResource}
     * @memberof LabelsApiIpblocksLabelsPost
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiIpblocksLabelsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for ipblocksLabelsPut operation in LabelsApi.
 * @export
 * @interface LabelsApiIpblocksLabelsPutRequest
 */
export interface LabelsApiIpblocksLabelsPutRequest {
    /**
     * The unique ID of the IP block.
     * @type {string}
     * @memberof LabelsApiIpblocksLabelsPut
     */
    readonly ipblockId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiIpblocksLabelsPut
     */
    readonly key: string;
    /**
     * The modified label
     * @type {LabelResource}
     * @memberof LabelsApiIpblocksLabelsPut
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiIpblocksLabelsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiIpblocksLabelsPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for labelsFindByUrn operation in LabelsApi.
 * @export
 * @interface LabelsApiLabelsFindByUrnRequest
 */
export interface LabelsApiLabelsFindByUrnRequest {
    /**
     * The label URN; URN is unique for each label, and consists of:  urn:label:&lt;resource_type&gt;:&lt;resource_uuid&gt;:&lt;key&gt;&lt;key&gt;
     * @type {string}
     * @memberof LabelsApiLabelsFindByUrn
     */
    readonly labelurn: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiLabelsFindByUrn
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiLabelsFindByUrn
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiLabelsFindByUrn
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for labelsGet operation in LabelsApi.
 * @export
 * @interface LabelsApiLabelsGetRequest
 */
export interface LabelsApiLabelsGetRequest {
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiLabelsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiLabelsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiLabelsGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LabelsApiLabelsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LabelsApiLabelsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LabelsApiLabelsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for snapshotsLabelsDelete operation in LabelsApi.
 * @export
 * @interface LabelsApiSnapshotsLabelsDeleteRequest
 */
export interface LabelsApiSnapshotsLabelsDeleteRequest {
    /**
     * The unique ID of the snapshot.
     * @type {string}
     * @memberof LabelsApiSnapshotsLabelsDelete
     */
    readonly snapshotId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiSnapshotsLabelsDelete
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiSnapshotsLabelsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for snapshotsLabelsFindByKey operation in LabelsApi.
 * @export
 * @interface LabelsApiSnapshotsLabelsFindByKeyRequest
 */
export interface LabelsApiSnapshotsLabelsFindByKeyRequest {
    /**
     * The unique ID of the snapshot.
     * @type {string}
     * @memberof LabelsApiSnapshotsLabelsFindByKey
     */
    readonly snapshotId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiSnapshotsLabelsFindByKey
     */
    readonly key: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiSnapshotsLabelsFindByKey
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsFindByKey
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsFindByKey
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for snapshotsLabelsGet operation in LabelsApi.
 * @export
 * @interface LabelsApiSnapshotsLabelsGetRequest
 */
export interface LabelsApiSnapshotsLabelsGetRequest {
    /**
     * The unique ID of the snapshot.
     * @type {string}
     * @memberof LabelsApiSnapshotsLabelsGet
     */
    readonly snapshotId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiSnapshotsLabelsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LabelsApiSnapshotsLabelsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LabelsApiSnapshotsLabelsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for snapshotsLabelsPost operation in LabelsApi.
 * @export
 * @interface LabelsApiSnapshotsLabelsPostRequest
 */
export interface LabelsApiSnapshotsLabelsPostRequest {
    /**
     * The unique ID of the snapshot.
     * @type {string}
     * @memberof LabelsApiSnapshotsLabelsPost
     */
    readonly snapshotId: string;
    /**
     * The label to create.
     * @type {LabelResource}
     * @memberof LabelsApiSnapshotsLabelsPost
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiSnapshotsLabelsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for snapshotsLabelsPut operation in LabelsApi.
 * @export
 * @interface LabelsApiSnapshotsLabelsPutRequest
 */
export interface LabelsApiSnapshotsLabelsPutRequest {
    /**
     * The unique ID of the snapshot.
     * @type {string}
     * @memberof LabelsApiSnapshotsLabelsPut
     */
    readonly snapshotId: string;
    /**
     * The label key
     * @type {string}
     * @memberof LabelsApiSnapshotsLabelsPut
     */
    readonly key: string;
    /**
     * The modified label
     * @type {LabelResource}
     * @memberof LabelsApiSnapshotsLabelsPut
     */
    readonly label: LabelResource;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LabelsApiSnapshotsLabelsPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LabelsApiSnapshotsLabelsPut
     */
    readonly xContractNumber?: number;
}
/**
 * LabelsApi - object-oriented interface
 * @export
 * @class LabelsApi
 * @extends {BaseAPI}
 */
export declare class LabelsApi extends BaseAPI {
    /**
     * Delete the specified data center label.
     * @summary Delete data center labels
     * @param {LabelsApiDatacentersLabelsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersLabelsDelete(requestParameters: LabelsApiDatacentersLabelsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified data center label.
     * @summary Retrieve data center labels
     * @param {LabelsApiDatacentersLabelsFindByKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersLabelsFindByKey(requestParameters: LabelsApiDatacentersLabelsFindByKeyRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * List all the the labels for the specified data center.
     * @summary List data center labels
     * @param {LabelsApiDatacentersLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersLabelsGet(requestParameters: LabelsApiDatacentersLabelsGetRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResources>>;
    /**
     * Adds a new label to the specified data center.
     * @summary Create a Data Center Label
     * @param {LabelsApiDatacentersLabelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersLabelsPost(requestParameters: LabelsApiDatacentersLabelsPostRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * Modifies the specified data center label.
     * @summary Modify a Data Center Label by Key
     * @param {LabelsApiDatacentersLabelsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersLabelsPut(requestParameters: LabelsApiDatacentersLabelsPutRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * Delete the specified server label.
     * @summary Delete server labels
     * @param {LabelsApiDatacentersServersLabelsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersServersLabelsDelete(requestParameters: LabelsApiDatacentersServersLabelsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified server label.
     * @summary Retrieve server labels
     * @param {LabelsApiDatacentersServersLabelsFindByKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersServersLabelsFindByKey(requestParameters: LabelsApiDatacentersServersLabelsFindByKeyRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * List all the the labels for the specified server.
     * @summary List server labels
     * @param {LabelsApiDatacentersServersLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersServersLabelsGet(requestParameters: LabelsApiDatacentersServersLabelsGetRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResources>>;
    /**
     * Adds a new label to the specified server.
     * @summary Create a Server Label
     * @param {LabelsApiDatacentersServersLabelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersServersLabelsPost(requestParameters: LabelsApiDatacentersServersLabelsPostRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * Modifies the specified server label.
     * @summary Modify a Server Label
     * @param {LabelsApiDatacentersServersLabelsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersServersLabelsPut(requestParameters: LabelsApiDatacentersServersLabelsPutRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * Delete the specified volume label.
     * @summary Delete volume labels
     * @param {LabelsApiDatacentersVolumesLabelsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersVolumesLabelsDelete(requestParameters: LabelsApiDatacentersVolumesLabelsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified volume label.
     * @summary Retrieve volume labels
     * @param {LabelsApiDatacentersVolumesLabelsFindByKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersVolumesLabelsFindByKey(requestParameters: LabelsApiDatacentersVolumesLabelsFindByKeyRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * List all the the labels for the specified volume.
     * @summary List volume labels
     * @param {LabelsApiDatacentersVolumesLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersVolumesLabelsGet(requestParameters: LabelsApiDatacentersVolumesLabelsGetRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResources>>;
    /**
     * Adds a new label to the specified volume.
     * @summary Create a Volume Label
     * @param {LabelsApiDatacentersVolumesLabelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersVolumesLabelsPost(requestParameters: LabelsApiDatacentersVolumesLabelsPostRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * Modifies the specified volume label.
     * @summary Modify a Volume Label
     * @param {LabelsApiDatacentersVolumesLabelsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    datacentersVolumesLabelsPut(requestParameters: LabelsApiDatacentersVolumesLabelsPutRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * Delete the specified IP block label.
     * @summary Delete IP block labels
     * @param {LabelsApiIpblocksLabelsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    ipblocksLabelsDelete(requestParameters: LabelsApiIpblocksLabelsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified IP block label.
     * @summary Retrieve IP block labels
     * @param {LabelsApiIpblocksLabelsFindByKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    ipblocksLabelsFindByKey(requestParameters: LabelsApiIpblocksLabelsFindByKeyRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * List all the the labels for the specified IP block.
     * @summary List IP block labels
     * @param {LabelsApiIpblocksLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    ipblocksLabelsGet(requestParameters: LabelsApiIpblocksLabelsGetRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResources>>;
    /**
     * Add a new label to the specified IP block.
     * @summary Create IP block labels
     * @param {LabelsApiIpblocksLabelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    ipblocksLabelsPost(requestParameters: LabelsApiIpblocksLabelsPostRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * Modifies the specified IP block label.
     * @summary Modify a IP Block Label by ID
     * @param {LabelsApiIpblocksLabelsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    ipblocksLabelsPut(requestParameters: LabelsApiIpblocksLabelsPutRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * Retrieve a label by label URN.  The URN is unique for each label, and consists of:  urn:label:<resource_type>:<resource_uuid>:<key>
     * @summary Retrieve labels by URN
     * @param {LabelsApiLabelsFindByUrnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    labelsFindByUrn(requestParameters: LabelsApiLabelsFindByUrnRequest, options?: any): Promise<import("axios").AxiosResponse<Label>>;
    /**
     * List all available labels.
     * @summary List labels
     * @param {LabelsApiLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    labelsGet(requestParameters?: LabelsApiLabelsGetRequest, options?: any): Promise<import("axios").AxiosResponse<Labels>>;
    /**
     * Delete the specified snapshot label.
     * @summary Delete snapshot labels
     * @param {LabelsApiSnapshotsLabelsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    snapshotsLabelsDelete(requestParameters: LabelsApiSnapshotsLabelsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified snapshot label.
     * @summary Retrieve snapshot labels
     * @param {LabelsApiSnapshotsLabelsFindByKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    snapshotsLabelsFindByKey(requestParameters: LabelsApiSnapshotsLabelsFindByKeyRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * List all the the labels for the specified snapshot.
     * @summary List snapshot labels
     * @param {LabelsApiSnapshotsLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    snapshotsLabelsGet(requestParameters: LabelsApiSnapshotsLabelsGetRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResources>>;
    /**
     * Adds a new label to the specified snapshot.
     * @summary Create a Snapshot Label
     * @param {LabelsApiSnapshotsLabelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    snapshotsLabelsPost(requestParameters: LabelsApiSnapshotsLabelsPostRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
    /**
     * Modifies the specified snapshot label.
     * @summary Modify a Snapshot Label by ID
     * @param {LabelsApiSnapshotsLabelsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    snapshotsLabelsPut(requestParameters: LabelsApiSnapshotsLabelsPutRequest, options?: any): Promise<import("axios").AxiosResponse<LabelResource>>;
}
