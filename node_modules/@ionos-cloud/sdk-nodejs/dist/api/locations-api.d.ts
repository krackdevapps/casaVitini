/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Location } from '../model';
import { Locations } from '../model';
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export declare const LocationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieves the available locations in a region specified by its ID. The \'regionId\' consists of the two character identifier of the region (country), e.g., \'de\'.
     * @summary Get Locations within a Region
     * @param {string} regionId The unique ID of the region.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsFindByRegionId: (regionId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves the information about the location specified by its ID. The \'locationId\' consists of the three-digit identifier of the city according to the IATA code.
     * @summary Get Location by ID
     * @param {string} regionId The unique ID of the region.
     * @param {string} locationId The unique ID of the location.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsFindByRegionIdAndId: (regionId: string, locationId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves the available physical locations where you can deploy cloud resources in a VDC.    A location is identified by a combination of the following characters:    * a two-character **regionId**, which represents a country (example: \'de\')    * a three-character **locationId**, which represents a city. The \'locationId\' is typically based on the IATA code of the city\'s airport (example: \'txl\').    >Note that \'locations\' are read-only and cannot be changed.
     * @summary Get Locations
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsGet: (pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
};
/**
 * LocationsApi - functional programming interface
 * @export
 */
export declare const LocationsApiFp: (configuration?: Configuration) => {
    /**
     * Retrieves the available locations in a region specified by its ID. The \'regionId\' consists of the two character identifier of the region (country), e.g., \'de\'.
     * @summary Get Locations within a Region
     * @param {string} regionId The unique ID of the region.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsFindByRegionId(regionId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>>;
    /**
     * Retrieves the information about the location specified by its ID. The \'locationId\' consists of the three-digit identifier of the city according to the IATA code.
     * @summary Get Location by ID
     * @param {string} regionId The unique ID of the region.
     * @param {string} locationId The unique ID of the location.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsFindByRegionIdAndId(regionId: string, locationId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>>;
    /**
     * Retrieves the available physical locations where you can deploy cloud resources in a VDC.    A location is identified by a combination of the following characters:    * a two-character **regionId**, which represents a country (example: \'de\')    * a three-character **locationId**, which represents a city. The \'locationId\' is typically based on the IATA code of the city\'s airport (example: \'txl\').    >Note that \'locations\' are read-only and cannot be changed.
     * @summary Get Locations
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsGet(pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>>;
};
/**
 * LocationsApi - factory interface
 * @export
 */
export declare const LocationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves the available locations in a region specified by its ID. The \'regionId\' consists of the two character identifier of the region (country), e.g., \'de\'.
     * @summary Get Locations within a Region
     * @param {string} regionId The unique ID of the region.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsFindByRegionId(regionId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Locations>;
    /**
     * Retrieves the information about the location specified by its ID. The \'locationId\' consists of the three-digit identifier of the city according to the IATA code.
     * @summary Get Location by ID
     * @param {string} regionId The unique ID of the region.
     * @param {string} locationId The unique ID of the location.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsFindByRegionIdAndId(regionId: string, locationId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Location>;
    /**
     * Retrieves the available physical locations where you can deploy cloud resources in a VDC.    A location is identified by a combination of the following characters:    * a two-character **regionId**, which represents a country (example: \'de\')    * a three-character **locationId**, which represents a city. The \'locationId\' is typically based on the IATA code of the city\'s airport (example: \'txl\').    >Note that \'locations\' are read-only and cannot be changed.
     * @summary Get Locations
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationsGet(pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Locations>;
};
/**
 * Request parameters for locationsFindByRegionId operation in LocationsApi.
 * @export
 * @interface LocationsApiLocationsFindByRegionIdRequest
 */
export interface LocationsApiLocationsFindByRegionIdRequest {
    /**
     * The unique ID of the region.
     * @type {string}
     * @memberof LocationsApiLocationsFindByRegionId
     */
    readonly regionId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LocationsApiLocationsFindByRegionId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LocationsApiLocationsFindByRegionId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LocationsApiLocationsFindByRegionId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for locationsFindByRegionIdAndId operation in LocationsApi.
 * @export
 * @interface LocationsApiLocationsFindByRegionIdAndIdRequest
 */
export interface LocationsApiLocationsFindByRegionIdAndIdRequest {
    /**
     * The unique ID of the region.
     * @type {string}
     * @memberof LocationsApiLocationsFindByRegionIdAndId
     */
    readonly regionId: string;
    /**
     * The unique ID of the location.
     * @type {string}
     * @memberof LocationsApiLocationsFindByRegionIdAndId
     */
    readonly locationId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LocationsApiLocationsFindByRegionIdAndId
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LocationsApiLocationsFindByRegionIdAndId
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LocationsApiLocationsFindByRegionIdAndId
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for locationsGet operation in LocationsApi.
 * @export
 * @interface LocationsApiLocationsGetRequest
 */
export interface LocationsApiLocationsGetRequest {
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof LocationsApiLocationsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof LocationsApiLocationsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof LocationsApiLocationsGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof LocationsApiLocationsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof LocationsApiLocationsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof LocationsApiLocationsGet
     */
    filters?: Map<string, string>;
}
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export declare class LocationsApi extends BaseAPI {
    /**
     * Retrieves the available locations in a region specified by its ID. The \'regionId\' consists of the two character identifier of the region (country), e.g., \'de\'.
     * @summary Get Locations within a Region
     * @param {LocationsApiLocationsFindByRegionIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsFindByRegionId(requestParameters: LocationsApiLocationsFindByRegionIdRequest, options?: any): Promise<import("axios").AxiosResponse<Locations>>;
    /**
     * Retrieves the information about the location specified by its ID. The \'locationId\' consists of the three-digit identifier of the city according to the IATA code.
     * @summary Get Location by ID
     * @param {LocationsApiLocationsFindByRegionIdAndIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsFindByRegionIdAndId(requestParameters: LocationsApiLocationsFindByRegionIdAndIdRequest, options?: any): Promise<import("axios").AxiosResponse<Location>>;
    /**
     * Retrieves the available physical locations where you can deploy cloud resources in a VDC.    A location is identified by a combination of the following characters:    * a two-character **regionId**, which represents a country (example: \'de\')    * a three-character **locationId**, which represents a city. The \'locationId\' is typically based on the IATA code of the city\'s airport (example: \'txl\').    >Note that \'locations\' are read-only and cannot be changed.
     * @summary Get Locations
     * @param {LocationsApiLocationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    locationsGet(requestParameters?: LocationsApiLocationsGetRequest, options?: any): Promise<import("axios").AxiosResponse<Locations>>;
}
