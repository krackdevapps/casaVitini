/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AttachedVolumes } from '../model';
import { Cdroms } from '../model';
import { Image } from '../model';
import { RemoteConsoleUrl } from '../model';
import { Server } from '../model';
import { ServerProperties } from '../model';
import { Servers } from '../model';
import { Token } from '../model';
import { Volume } from '../model';
/**
 * ServersApi - axios parameter creator
 * @export
 */
export declare const ServersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Detachs the specified CD-ROM from the server.  Detaching a CD-ROM deletes the CD-ROM. The image will not be deleted.  Note that detaching a CD-ROM leads to a reset of the server.
     * @summary Detach a CD-ROM by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} cdromId The unique ID of the CD-ROM.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsDelete: (datacenterId: string, serverId: string, cdromId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves the properties of the CD-ROM attached to the specified server.
     * @summary Get Attached CD-ROM by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} cdromId The unique ID of the CD-ROM.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsFindById: (datacenterId: string, serverId: string, cdromId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all CD-ROMs attached to the specified server.
     * @summary Get Attached CD-ROMs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsGet: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Attachs a CD-ROM to an existing server specified by its ID.   CD-ROMs cannot be created stand-alone like volumes. They are either attached to a server or do not exist. They always have an ISO-Image associated; empty CD-ROMs can not be provisioned. It is possible to attach up to two CD-ROMs to the same server.   Note that attaching a CD-ROM leads to a reset of the server.
     * @summary Attach a CD-ROM
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Image} cdrom The CD-ROM to be attached.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsPost: (datacenterId: string, serverId: string, cdrom: Image, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified server in your data center. The attached storage volumes will also be removed if the query parameter is set to true otherwise a separate API call must be made for these actions.
     * @summary Delete servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {boolean} [deleteVolumes] If true, all attached storage volumes will also be deleted.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersDelete: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, deleteVolumes?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve information about the specified server within the data center, such as its configuration, provisioning status, and so on.
     * @summary Retrieve servers by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersFindById: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all servers within the data center.
     * @summary List servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {boolean} [upgradeNeeded] Filter servers that can or that cannot be upgraded.
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersGet: (datacenterId: string, pretty?: boolean, depth?: number, upgradeNeeded?: boolean, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified server within the data center.
     * @summary Partially modify servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {ServerProperties} server The properties of the server to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersPatch: (datacenterId: string, serverId: string, server: ServerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a server within the specified data center. You can also use this request to configure the boot volumes and connect to existing LANs at the same time.
     * @summary Create a Server
     * @param {string} datacenterId The unique ID of the data center.
     * @param {Server} server The server to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersPost: (datacenterId: string, server: Server, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the properties of the specified server within the data center.  Starting with v5, the \'allowReboot\' attribute is retired; while previously required for changing certain server properties, this behavior is now implicit, and the backend will perform this automatically. For example, in earlier versions, when the CPU family is changed, \'allowReboot\' had to be set to \'true\'; this is no longer required, the reboot will be performed automatically.
     * @summary Modify a Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Server} server The modified server
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersPut: (datacenterId: string, serverId: string, server: Server, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Force a hard reboot of the specified server within the data center. Don\'t use this method if you wish to reboot gracefully. This is an equivalent of powering down a computer and turning it back on.
     * @summary Reboot servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersRebootPost: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve a link with a JSON Web Token for accessing the server\'s Remote Console.
     * @summary Get Remote Console link
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersRemoteConsoleGet: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Resumes a suspended Cube Server specified by its ID.  Since the suspended instance was not deleted the allocated resources continue to be billed. You can perform this operation only for Cube Servers.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Resume a Cube Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersResumePost: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Starts the Enterprise Server specified by its ID.  >Note that you cannot use this method to start a Cube Server.  By starting the Enterprise Server, cores and RAM are provisioned, and the billing continues.  If the server\'s public IPv4 address has been deallocated, a new IPv4 address will be assigned. IPv6 blocks and addresses will remain unchanged when stopping and starting a server.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Start an Enterprise Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersStartPost: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Stops the Enterprise Server specified by its ID.   >Note that you cannot use this method to stop a Cube Server.   By stopping the Enterprise Server, cores and RAM are freed and no longer charged.  Public IPv4 IPs that are not reserved are returned to the IPv4 pool. IPv6 blocks and addresses will remain unchanged when stopping and starting a server.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Stop an Enterprise Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersStopPost: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Suspends the specified Cubes instance within the data center.   The instance is not deleted and allocated resources continue to be billed. You can perform this operation only for Cube Servers.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Suspend a Cube Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersSuspendPost: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve a JSON Web Token from the server for use in login operations (such as accessing the server\'s console).
     * @summary Get JASON Web Token
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersTokenGet: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Upgrades the server version.
     * @summary Upgrade a Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersUpgradePost: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Detachs the specified volume from the server.  Note that only the volume\'s connection to the specified server is disconnected. If you want to delete the volume, you must submit a separate request to perform the deletion.
     * @summary Detach a Volume by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesDelete: (datacenterId: string, serverId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieves the properties of the volume attached to the specified server.
     * @summary Get Attached Volume by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesFindById: (datacenterId: string, serverId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all volumes attached to the specified server.
     * @summary Get Attached Volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesGet: (datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Attachs an existing storage volume to the specified server.  You can attach an existing volume in the VDC to a server. To move a volume from one server to another, you must first detach the volume from the first server and attach it to the second server.  It is also possible to create and attach a volume in one step by simply providing a new volume description as a payload. The only difference is the URL; see \'Creating a Volume\' for details about volumes.  Note that the combined total of attached volumes and NICs cannot exceed 24 per server.
     * @summary Attach a Volume to a Server
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Volume} volume The volume to be attached (or created and attached).
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesPost: (datacenterId: string, serverId: string, volume: Volume, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * ServersApi - functional programming interface
 * @export
 */
export declare const ServersApiFp: (configuration?: Configuration) => {
    /**
     * Detachs the specified CD-ROM from the server.  Detaching a CD-ROM deletes the CD-ROM. The image will not be deleted.  Note that detaching a CD-ROM leads to a reset of the server.
     * @summary Detach a CD-ROM by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} cdromId The unique ID of the CD-ROM.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsDelete(datacenterId: string, serverId: string, cdromId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieves the properties of the CD-ROM attached to the specified server.
     * @summary Get Attached CD-ROM by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} cdromId The unique ID of the CD-ROM.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsFindById(datacenterId: string, serverId: string, cdromId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>>;
    /**
     * Lists all CD-ROMs attached to the specified server.
     * @summary Get Attached CD-ROMs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cdroms>>;
    /**
     * Attachs a CD-ROM to an existing server specified by its ID.   CD-ROMs cannot be created stand-alone like volumes. They are either attached to a server or do not exist. They always have an ISO-Image associated; empty CD-ROMs can not be provisioned. It is possible to attach up to two CD-ROMs to the same server.   Note that attaching a CD-ROM leads to a reset of the server.
     * @summary Attach a CD-ROM
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Image} cdrom The CD-ROM to be attached.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsPost(datacenterId: string, serverId: string, cdrom: Image, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>>;
    /**
     * Delete the specified server in your data center. The attached storage volumes will also be removed if the query parameter is set to true otherwise a separate API call must be made for these actions.
     * @summary Delete servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {boolean} [deleteVolumes] If true, all attached storage volumes will also be deleted.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersDelete(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, deleteVolumes?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve information about the specified server within the data center, such as its configuration, provisioning status, and so on.
     * @summary Retrieve servers by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersFindById(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Server>>;
    /**
     * List all servers within the data center.
     * @summary List servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {boolean} [upgradeNeeded] Filter servers that can or that cannot be upgraded.
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersGet(datacenterId: string, pretty?: boolean, depth?: number, upgradeNeeded?: boolean, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Servers>>;
    /**
     * Update the properties of the specified server within the data center.
     * @summary Partially modify servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {ServerProperties} server The properties of the server to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersPatch(datacenterId: string, serverId: string, server: ServerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Server>>;
    /**
     * Creates a server within the specified data center. You can also use this request to configure the boot volumes and connect to existing LANs at the same time.
     * @summary Create a Server
     * @param {string} datacenterId The unique ID of the data center.
     * @param {Server} server The server to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersPost(datacenterId: string, server: Server, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Server>>;
    /**
     * Modifies the properties of the specified server within the data center.  Starting with v5, the \'allowReboot\' attribute is retired; while previously required for changing certain server properties, this behavior is now implicit, and the backend will perform this automatically. For example, in earlier versions, when the CPU family is changed, \'allowReboot\' had to be set to \'true\'; this is no longer required, the reboot will be performed automatically.
     * @summary Modify a Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Server} server The modified server
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersPut(datacenterId: string, serverId: string, server: Server, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Server>>;
    /**
     * Force a hard reboot of the specified server within the data center. Don\'t use this method if you wish to reboot gracefully. This is an equivalent of powering down a computer and turning it back on.
     * @summary Reboot servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersRebootPost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve a link with a JSON Web Token for accessing the server\'s Remote Console.
     * @summary Get Remote Console link
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersRemoteConsoleGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteConsoleUrl>>;
    /**
     * Resumes a suspended Cube Server specified by its ID.  Since the suspended instance was not deleted the allocated resources continue to be billed. You can perform this operation only for Cube Servers.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Resume a Cube Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersResumePost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Starts the Enterprise Server specified by its ID.  >Note that you cannot use this method to start a Cube Server.  By starting the Enterprise Server, cores and RAM are provisioned, and the billing continues.  If the server\'s public IPv4 address has been deallocated, a new IPv4 address will be assigned. IPv6 blocks and addresses will remain unchanged when stopping and starting a server.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Start an Enterprise Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersStartPost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Stops the Enterprise Server specified by its ID.   >Note that you cannot use this method to stop a Cube Server.   By stopping the Enterprise Server, cores and RAM are freed and no longer charged.  Public IPv4 IPs that are not reserved are returned to the IPv4 pool. IPv6 blocks and addresses will remain unchanged when stopping and starting a server.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Stop an Enterprise Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersStopPost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Suspends the specified Cubes instance within the data center.   The instance is not deleted and allocated resources continue to be billed. You can perform this operation only for Cube Servers.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Suspend a Cube Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersSuspendPost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve a JSON Web Token from the server for use in login operations (such as accessing the server\'s console).
     * @summary Get JASON Web Token
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersTokenGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
    /**
     * Upgrades the server version.
     * @summary Upgrade a Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersUpgradePost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Detachs the specified volume from the server.  Note that only the volume\'s connection to the specified server is disconnected. If you want to delete the volume, you must submit a separate request to perform the deletion.
     * @summary Detach a Volume by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesDelete(datacenterId: string, serverId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieves the properties of the volume attached to the specified server.
     * @summary Get Attached Volume by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesFindById(datacenterId: string, serverId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume>>;
    /**
     * Lists all volumes attached to the specified server.
     * @summary Get Attached Volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachedVolumes>>;
    /**
     * Attachs an existing storage volume to the specified server.  You can attach an existing volume in the VDC to a server. To move a volume from one server to another, you must first detach the volume from the first server and attach it to the second server.  It is also possible to create and attach a volume in one step by simply providing a new volume description as a payload. The only difference is the URL; see \'Creating a Volume\' for details about volumes.  Note that the combined total of attached volumes and NICs cannot exceed 24 per server.
     * @summary Attach a Volume to a Server
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Volume} volume The volume to be attached (or created and attached).
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesPost(datacenterId: string, serverId: string, volume: Volume, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume>>;
};
/**
 * ServersApi - factory interface
 * @export
 */
export declare const ServersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Detachs the specified CD-ROM from the server.  Detaching a CD-ROM deletes the CD-ROM. The image will not be deleted.  Note that detaching a CD-ROM leads to a reset of the server.
     * @summary Detach a CD-ROM by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} cdromId The unique ID of the CD-ROM.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsDelete(datacenterId: string, serverId: string, cdromId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieves the properties of the CD-ROM attached to the specified server.
     * @summary Get Attached CD-ROM by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} cdromId The unique ID of the CD-ROM.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsFindById(datacenterId: string, serverId: string, cdromId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Image>;
    /**
     * Lists all CD-ROMs attached to the specified server.
     * @summary Get Attached CD-ROMs
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Cdroms>;
    /**
     * Attachs a CD-ROM to an existing server specified by its ID.   CD-ROMs cannot be created stand-alone like volumes. They are either attached to a server or do not exist. They always have an ISO-Image associated; empty CD-ROMs can not be provisioned. It is possible to attach up to two CD-ROMs to the same server.   Note that attaching a CD-ROM leads to a reset of the server.
     * @summary Attach a CD-ROM
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Image} cdrom The CD-ROM to be attached.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersCdromsPost(datacenterId: string, serverId: string, cdrom: Image, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Image>;
    /**
     * Delete the specified server in your data center. The attached storage volumes will also be removed if the query parameter is set to true otherwise a separate API call must be made for these actions.
     * @summary Delete servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {boolean} [deleteVolumes] If true, all attached storage volumes will also be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersDelete(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, deleteVolumes?: boolean, options?: any): AxiosPromise<void>;
    /**
     * Retrieve information about the specified server within the data center, such as its configuration, provisioning status, and so on.
     * @summary Retrieve servers by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersFindById(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Server>;
    /**
     * List all servers within the data center.
     * @summary List servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {boolean} [upgradeNeeded] Filter servers that can or that cannot be upgraded.
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersGet(datacenterId: string, pretty?: boolean, depth?: number, upgradeNeeded?: boolean, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Servers>;
    /**
     * Update the properties of the specified server within the data center.
     * @summary Partially modify servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {ServerProperties} server The properties of the server to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersPatch(datacenterId: string, serverId: string, server: ServerProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Server>;
    /**
     * Creates a server within the specified data center. You can also use this request to configure the boot volumes and connect to existing LANs at the same time.
     * @summary Create a Server
     * @param {string} datacenterId The unique ID of the data center.
     * @param {Server} server The server to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersPost(datacenterId: string, server: Server, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Server>;
    /**
     * Modifies the properties of the specified server within the data center.  Starting with v5, the \'allowReboot\' attribute is retired; while previously required for changing certain server properties, this behavior is now implicit, and the backend will perform this automatically. For example, in earlier versions, when the CPU family is changed, \'allowReboot\' had to be set to \'true\'; this is no longer required, the reboot will be performed automatically.
     * @summary Modify a Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Server} server The modified server
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersPut(datacenterId: string, serverId: string, server: Server, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Server>;
    /**
     * Force a hard reboot of the specified server within the data center. Don\'t use this method if you wish to reboot gracefully. This is an equivalent of powering down a computer and turning it back on.
     * @summary Reboot servers
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersRebootPost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve a link with a JSON Web Token for accessing the server\'s Remote Console.
     * @summary Get Remote Console link
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersRemoteConsoleGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<RemoteConsoleUrl>;
    /**
     * Resumes a suspended Cube Server specified by its ID.  Since the suspended instance was not deleted the allocated resources continue to be billed. You can perform this operation only for Cube Servers.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Resume a Cube Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersResumePost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Starts the Enterprise Server specified by its ID.  >Note that you cannot use this method to start a Cube Server.  By starting the Enterprise Server, cores and RAM are provisioned, and the billing continues.  If the server\'s public IPv4 address has been deallocated, a new IPv4 address will be assigned. IPv6 blocks and addresses will remain unchanged when stopping and starting a server.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Start an Enterprise Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersStartPost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Stops the Enterprise Server specified by its ID.   >Note that you cannot use this method to stop a Cube Server.   By stopping the Enterprise Server, cores and RAM are freed and no longer charged.  Public IPv4 IPs that are not reserved are returned to the IPv4 pool. IPv6 blocks and addresses will remain unchanged when stopping and starting a server.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Stop an Enterprise Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersStopPost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Suspends the specified Cubes instance within the data center.   The instance is not deleted and allocated resources continue to be billed. You can perform this operation only for Cube Servers.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Suspend a Cube Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersSuspendPost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve a JSON Web Token from the server for use in login operations (such as accessing the server\'s console).
     * @summary Get JASON Web Token
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersTokenGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Token>;
    /**
     * Upgrades the server version.
     * @summary Upgrade a Server by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersUpgradePost(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Detachs the specified volume from the server.  Note that only the volume\'s connection to the specified server is disconnected. If you want to delete the volume, you must submit a separate request to perform the deletion.
     * @summary Detach a Volume by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesDelete(datacenterId: string, serverId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieves the properties of the volume attached to the specified server.
     * @summary Get Attached Volume by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesFindById(datacenterId: string, serverId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Volume>;
    /**
     * Lists all volumes attached to the specified server.
     * @summary Get Attached Volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesGet(datacenterId: string, serverId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<AttachedVolumes>;
    /**
     * Attachs an existing storage volume to the specified server.  You can attach an existing volume in the VDC to a server. To move a volume from one server to another, you must first detach the volume from the first server and attach it to the second server.  It is also possible to create and attach a volume in one step by simply providing a new volume description as a payload. The only difference is the URL; see \'Creating a Volume\' for details about volumes.  Note that the combined total of attached volumes and NICs cannot exceed 24 per server.
     * @summary Attach a Volume to a Server
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} serverId The unique ID of the server.
     * @param {Volume} volume The volume to be attached (or created and attached).
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersServersVolumesPost(datacenterId: string, serverId: string, volume: Volume, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Volume>;
};
/**
 * Request parameters for datacentersServersCdromsDelete operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersCdromsDeleteRequest
 */
export interface ServersApiDatacentersServersCdromsDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsDelete
     */
    readonly serverId: string;
    /**
     * The unique ID of the CD-ROM.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsDelete
     */
    readonly cdromId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersCdromsDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersCdromsFindById operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersCdromsFindByIdRequest
 */
export interface ServersApiDatacentersServersCdromsFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsFindById
     */
    readonly serverId: string;
    /**
     * The unique ID of the CD-ROM.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsFindById
     */
    readonly cdromId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersCdromsFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsFindById
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsFindById
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersCdromsGet operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersCdromsGetRequest
 */
export interface ServersApiDatacentersServersCdromsGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof ServersApiDatacentersServersCdromsGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersServersCdromsPost operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersCdromsPostRequest
 */
export interface ServersApiDatacentersServersCdromsPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersCdromsPost
     */
    readonly serverId: string;
    /**
     * The CD-ROM to be attached.
     * @type {Image}
     * @memberof ServersApiDatacentersServersCdromsPost
     */
    readonly cdrom: Image;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersCdromsPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersCdromsPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersDelete operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersDeleteRequest
 */
export interface ServersApiDatacentersServersDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersDelete
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersDelete
     */
    readonly xContractNumber?: number;
    /**
     * If true, all attached storage volumes will also be deleted.
     * @type {boolean}
     * @memberof ServersApiDatacentersServersDelete
     */
    readonly deleteVolumes?: boolean;
}
/**
 * Request parameters for datacentersServersFindById operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersFindByIdRequest
 */
export interface ServersApiDatacentersServersFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersFindById
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersFindById
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersFindById
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersGet operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersGetRequest
 */
export interface ServersApiDatacentersServersGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersGet
     */
    readonly datacenterId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersGet
     */
    readonly depth?: number;
    /**
     * Filter servers that can or that cannot be upgraded.
     * @type {boolean}
     * @memberof ServersApiDatacentersServersGet
     */
    readonly upgradeNeeded?: boolean;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof ServersApiDatacentersServersGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof ServersApiDatacentersServersGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof ServersApiDatacentersServersGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof ServersApiDatacentersServersGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof ServersApiDatacentersServersGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersServersPatch operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersPatchRequest
 */
export interface ServersApiDatacentersServersPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersPatch
     */
    readonly serverId: string;
    /**
     * The properties of the server to be updated.
     * @type {ServerProperties}
     * @memberof ServersApiDatacentersServersPatch
     */
    readonly server: ServerProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersPost operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersPostRequest
 */
export interface ServersApiDatacentersServersPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersPost
     */
    readonly datacenterId: string;
    /**
     * The server to create.
     * @type {Server}
     * @memberof ServersApiDatacentersServersPost
     */
    readonly server: Server;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersPut operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersPutRequest
 */
export interface ServersApiDatacentersServersPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersPut
     */
    readonly serverId: string;
    /**
     * The modified server
     * @type {Server}
     * @memberof ServersApiDatacentersServersPut
     */
    readonly server: Server;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersRebootPost operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersRebootPostRequest
 */
export interface ServersApiDatacentersServersRebootPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersRebootPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersRebootPost
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersRebootPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersRebootPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersRebootPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersRemoteConsoleGet operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersRemoteConsoleGetRequest
 */
export interface ServersApiDatacentersServersRemoteConsoleGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersRemoteConsoleGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersRemoteConsoleGet
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersRemoteConsoleGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersRemoteConsoleGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersRemoteConsoleGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof ServersApiDatacentersServersRemoteConsoleGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof ServersApiDatacentersServersRemoteConsoleGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof ServersApiDatacentersServersRemoteConsoleGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersServersResumePost operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersResumePostRequest
 */
export interface ServersApiDatacentersServersResumePostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersResumePost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersResumePost
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersResumePost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersResumePost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersResumePost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersStartPost operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersStartPostRequest
 */
export interface ServersApiDatacentersServersStartPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersStartPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersStartPost
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersStartPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersStartPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersStartPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersStopPost operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersStopPostRequest
 */
export interface ServersApiDatacentersServersStopPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersStopPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersStopPost
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersStopPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersStopPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersStopPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersSuspendPost operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersSuspendPostRequest
 */
export interface ServersApiDatacentersServersSuspendPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersSuspendPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersSuspendPost
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersSuspendPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersSuspendPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersSuspendPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersTokenGet operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersTokenGetRequest
 */
export interface ServersApiDatacentersServersTokenGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersTokenGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersTokenGet
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersTokenGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersTokenGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersTokenGet
     */
    readonly xContractNumber?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof ServersApiDatacentersServersTokenGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof ServersApiDatacentersServersTokenGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof ServersApiDatacentersServersTokenGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersServersUpgradePost operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersUpgradePostRequest
 */
export interface ServersApiDatacentersServersUpgradePostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersUpgradePost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersUpgradePost
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersUpgradePost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersUpgradePost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersUpgradePost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersVolumesDelete operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersVolumesDeleteRequest
 */
export interface ServersApiDatacentersServersVolumesDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesDelete
     */
    readonly serverId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesDelete
     */
    readonly volumeId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersVolumesDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersVolumesFindById operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersVolumesFindByIdRequest
 */
export interface ServersApiDatacentersServersVolumesFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesFindById
     */
    readonly serverId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesFindById
     */
    readonly volumeId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersVolumesFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesFindById
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesFindById
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersServersVolumesGet operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersVolumesGetRequest
 */
export interface ServersApiDatacentersServersVolumesGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    readonly serverId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof ServersApiDatacentersServersVolumesGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersServersVolumesPost operation in ServersApi.
 * @export
 * @interface ServersApiDatacentersServersVolumesPostRequest
 */
export interface ServersApiDatacentersServersVolumesPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the server.
     * @type {string}
     * @memberof ServersApiDatacentersServersVolumesPost
     */
    readonly serverId: string;
    /**
     * The volume to be attached (or created and attached).
     * @type {Volume}
     * @memberof ServersApiDatacentersServersVolumesPost
     */
    readonly volume: Volume;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof ServersApiDatacentersServersVolumesPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof ServersApiDatacentersServersVolumesPost
     */
    readonly xContractNumber?: number;
}
/**
 * ServersApi - object-oriented interface
 * @export
 * @class ServersApi
 * @extends {BaseAPI}
 */
export declare class ServersApi extends BaseAPI {
    /**
     * Detachs the specified CD-ROM from the server.  Detaching a CD-ROM deletes the CD-ROM. The image will not be deleted.  Note that detaching a CD-ROM leads to a reset of the server.
     * @summary Detach a CD-ROM by ID
     * @param {ServersApiDatacentersServersCdromsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersCdromsDelete(requestParameters: ServersApiDatacentersServersCdromsDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieves the properties of the CD-ROM attached to the specified server.
     * @summary Get Attached CD-ROM by ID
     * @param {ServersApiDatacentersServersCdromsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersCdromsFindById(requestParameters: ServersApiDatacentersServersCdromsFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<Image>>;
    /**
     * Lists all CD-ROMs attached to the specified server.
     * @summary Get Attached CD-ROMs
     * @param {ServersApiDatacentersServersCdromsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersCdromsGet(requestParameters: ServersApiDatacentersServersCdromsGetRequest, options?: any): Promise<import("axios").AxiosResponse<Cdroms>>;
    /**
     * Attachs a CD-ROM to an existing server specified by its ID.   CD-ROMs cannot be created stand-alone like volumes. They are either attached to a server or do not exist. They always have an ISO-Image associated; empty CD-ROMs can not be provisioned. It is possible to attach up to two CD-ROMs to the same server.   Note that attaching a CD-ROM leads to a reset of the server.
     * @summary Attach a CD-ROM
     * @param {ServersApiDatacentersServersCdromsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersCdromsPost(requestParameters: ServersApiDatacentersServersCdromsPostRequest, options?: any): Promise<import("axios").AxiosResponse<Image>>;
    /**
     * Delete the specified server in your data center. The attached storage volumes will also be removed if the query parameter is set to true otherwise a separate API call must be made for these actions.
     * @summary Delete servers
     * @param {ServersApiDatacentersServersDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersDelete(requestParameters: ServersApiDatacentersServersDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve information about the specified server within the data center, such as its configuration, provisioning status, and so on.
     * @summary Retrieve servers by ID
     * @param {ServersApiDatacentersServersFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersFindById(requestParameters: ServersApiDatacentersServersFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<Server>>;
    /**
     * List all servers within the data center.
     * @summary List servers
     * @param {ServersApiDatacentersServersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersGet(requestParameters: ServersApiDatacentersServersGetRequest, options?: any): Promise<import("axios").AxiosResponse<Servers>>;
    /**
     * Update the properties of the specified server within the data center.
     * @summary Partially modify servers
     * @param {ServersApiDatacentersServersPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersPatch(requestParameters: ServersApiDatacentersServersPatchRequest, options?: any): Promise<import("axios").AxiosResponse<Server>>;
    /**
     * Creates a server within the specified data center. You can also use this request to configure the boot volumes and connect to existing LANs at the same time.
     * @summary Create a Server
     * @param {ServersApiDatacentersServersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersPost(requestParameters: ServersApiDatacentersServersPostRequest, options?: any): Promise<import("axios").AxiosResponse<Server>>;
    /**
     * Modifies the properties of the specified server within the data center.  Starting with v5, the \'allowReboot\' attribute is retired; while previously required for changing certain server properties, this behavior is now implicit, and the backend will perform this automatically. For example, in earlier versions, when the CPU family is changed, \'allowReboot\' had to be set to \'true\'; this is no longer required, the reboot will be performed automatically.
     * @summary Modify a Server by ID
     * @param {ServersApiDatacentersServersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersPut(requestParameters: ServersApiDatacentersServersPutRequest, options?: any): Promise<import("axios").AxiosResponse<Server>>;
    /**
     * Force a hard reboot of the specified server within the data center. Don\'t use this method if you wish to reboot gracefully. This is an equivalent of powering down a computer and turning it back on.
     * @summary Reboot servers
     * @param {ServersApiDatacentersServersRebootPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersRebootPost(requestParameters: ServersApiDatacentersServersRebootPostRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve a link with a JSON Web Token for accessing the server\'s Remote Console.
     * @summary Get Remote Console link
     * @param {ServersApiDatacentersServersRemoteConsoleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersRemoteConsoleGet(requestParameters: ServersApiDatacentersServersRemoteConsoleGetRequest, options?: any): Promise<import("axios").AxiosResponse<RemoteConsoleUrl>>;
    /**
     * Resumes a suspended Cube Server specified by its ID.  Since the suspended instance was not deleted the allocated resources continue to be billed. You can perform this operation only for Cube Servers.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Resume a Cube Server by ID
     * @param {ServersApiDatacentersServersResumePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersResumePost(requestParameters: ServersApiDatacentersServersResumePostRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Starts the Enterprise Server specified by its ID.  >Note that you cannot use this method to start a Cube Server.  By starting the Enterprise Server, cores and RAM are provisioned, and the billing continues.  If the server\'s public IPv4 address has been deallocated, a new IPv4 address will be assigned. IPv6 blocks and addresses will remain unchanged when stopping and starting a server.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Start an Enterprise Server by ID
     * @param {ServersApiDatacentersServersStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersStartPost(requestParameters: ServersApiDatacentersServersStartPostRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Stops the Enterprise Server specified by its ID.   >Note that you cannot use this method to stop a Cube Server.   By stopping the Enterprise Server, cores and RAM are freed and no longer charged.  Public IPv4 IPs that are not reserved are returned to the IPv4 pool. IPv6 blocks and addresses will remain unchanged when stopping and starting a server.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Stop an Enterprise Server by ID
     * @param {ServersApiDatacentersServersStopPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersStopPost(requestParameters: ServersApiDatacentersServersStopPostRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Suspends the specified Cubes instance within the data center.   The instance is not deleted and allocated resources continue to be billed. You can perform this operation only for Cube Servers.  To check the status of the request, you can use the \'Location\' HTTP header in the response (see \'Requests\' for more information).
     * @summary Suspend a Cube Server by ID
     * @param {ServersApiDatacentersServersSuspendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersSuspendPost(requestParameters: ServersApiDatacentersServersSuspendPostRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve a JSON Web Token from the server for use in login operations (such as accessing the server\'s console).
     * @summary Get JASON Web Token
     * @param {ServersApiDatacentersServersTokenGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersTokenGet(requestParameters: ServersApiDatacentersServersTokenGetRequest, options?: any): Promise<import("axios").AxiosResponse<Token>>;
    /**
     * Upgrades the server version.
     * @summary Upgrade a Server by ID
     * @param {ServersApiDatacentersServersUpgradePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersUpgradePost(requestParameters: ServersApiDatacentersServersUpgradePostRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Detachs the specified volume from the server.  Note that only the volume\'s connection to the specified server is disconnected. If you want to delete the volume, you must submit a separate request to perform the deletion.
     * @summary Detach a Volume by ID
     * @param {ServersApiDatacentersServersVolumesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersVolumesDelete(requestParameters: ServersApiDatacentersServersVolumesDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieves the properties of the volume attached to the specified server.
     * @summary Get Attached Volume by ID
     * @param {ServersApiDatacentersServersVolumesFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersVolumesFindById(requestParameters: ServersApiDatacentersServersVolumesFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<Volume>>;
    /**
     * Lists all volumes attached to the specified server.
     * @summary Get Attached Volumes
     * @param {ServersApiDatacentersServersVolumesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersVolumesGet(requestParameters: ServersApiDatacentersServersVolumesGetRequest, options?: any): Promise<import("axios").AxiosResponse<AttachedVolumes>>;
    /**
     * Attachs an existing storage volume to the specified server.  You can attach an existing volume in the VDC to a server. To move a volume from one server to another, you must first detach the volume from the first server and attach it to the second server.  It is also possible to create and attach a volume in one step by simply providing a new volume description as a payload. The only difference is the URL; see \'Creating a Volume\' for details about volumes.  Note that the combined total of attached volumes and NICs cannot exceed 24 per server.
     * @summary Attach a Volume to a Server
     * @param {ServersApiDatacentersServersVolumesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    datacentersServersVolumesPost(requestParameters: ServersApiDatacentersServersVolumesPostRequest, options?: any): Promise<import("axios").AxiosResponse<Volume>>;
}
