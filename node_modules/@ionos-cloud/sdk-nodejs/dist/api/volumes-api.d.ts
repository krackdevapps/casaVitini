/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Snapshot } from '../model';
import { Volume } from '../model';
import { VolumeProperties } from '../model';
import { Volumes } from '../model';
/**
 * VolumesApi - axios parameter creator
 * @export
 */
export declare const VolumesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a snapshot of the specified volume within the data center; this snapshot can later be used to restore this volume.
     * @summary Create volume snapshots
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [name] Snapshot name
     * @param {string} [description] Snapshot description
     * @param {boolean} [secAuthProtection] Flag for enabling extra protection for this snapshot, such as two-step verification.
     * @param {string} [licenceType] The OS type for this snapshot.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesCreateSnapshotPost: (datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, name?: string, description?: string, secAuthProtection?: boolean, licenceType?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete the specified volume within the data center. Use with caution, the volume will be permanently removed!
     * @summary Delete volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesDelete: (datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve the properties of the specified volume within the data center.
     * @summary Retrieve volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesFindById: (datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List all the volumes within the data center.
     * @summary List volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesGet: (datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update the properties of the specified storage volume within the data center.
     * @summary Partially modify volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {VolumeProperties} volume The properties of the volume to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesPatch: (datacenterId: string, volumeId: string, volume: VolumeProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a storage volume within the specified data center. The volume will not be attached! Attaching volumes is described in the Servers section.
     * @summary Create a Volume
     * @param {string} datacenterId The unique ID of the data center.
     * @param {Volume} volume The volume to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesPost: (datacenterId: string, volume: Volume, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Modifies the properties of the specified volume within the data center.
     * @summary Modify a Volume by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {Volume} volume The modified volume
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesPut: (datacenterId: string, volumeId: string, volume: Volume, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Restore a snapshot for the specified volume within the data center. A snapshot is an image of a volume, which can be used to restore this volume at a later time.
     * @summary Restore volume snapshots
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [snapshotId] The unique ID of the snapshot.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesRestoreSnapshotPost: (datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, snapshotId?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * VolumesApi - functional programming interface
 * @export
 */
export declare const VolumesApiFp: (configuration?: Configuration) => {
    /**
     * Create a snapshot of the specified volume within the data center; this snapshot can later be used to restore this volume.
     * @summary Create volume snapshots
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [name] Snapshot name
     * @param {string} [description] Snapshot description
     * @param {boolean} [secAuthProtection] Flag for enabling extra protection for this snapshot, such as two-step verification.
     * @param {string} [licenceType] The OS type for this snapshot.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesCreateSnapshotPost(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, name?: string, description?: string, secAuthProtection?: boolean, licenceType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Snapshot>>;
    /**
     * Delete the specified volume within the data center. Use with caution, the volume will be permanently removed!
     * @summary Delete volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesDelete(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the properties of the specified volume within the data center.
     * @summary Retrieve volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesFindById(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume>>;
    /**
     * List all the volumes within the data center.
     * @summary List volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {string} [orderBy] - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param {number} [maxResults] - Limits the number of results returned.
     * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, orderBy?: string, maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volumes>>;
    /**
     * Update the properties of the specified storage volume within the data center.
     * @summary Partially modify volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {VolumeProperties} volume The properties of the volume to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesPatch(datacenterId: string, volumeId: string, volume: VolumeProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume>>;
    /**
     * Creates a storage volume within the specified data center. The volume will not be attached! Attaching volumes is described in the Servers section.
     * @summary Create a Volume
     * @param {string} datacenterId The unique ID of the data center.
     * @param {Volume} volume The volume to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesPost(datacenterId: string, volume: Volume, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume>>;
    /**
     * Modifies the properties of the specified volume within the data center.
     * @summary Modify a Volume by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {Volume} volume The modified volume
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesPut(datacenterId: string, volumeId: string, volume: Volume, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume>>;
    /**
     * Restore a snapshot for the specified volume within the data center. A snapshot is an image of a volume, which can be used to restore this volume at a later time.
     * @summary Restore volume snapshots
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [snapshotId] The unique ID of the snapshot.
     
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesRestoreSnapshotPost(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, snapshotId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * VolumesApi - factory interface
 * @export
 */
export declare const VolumesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a snapshot of the specified volume within the data center; this snapshot can later be used to restore this volume.
     * @summary Create volume snapshots
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [name] Snapshot name
     * @param {string} [description] Snapshot description
     * @param {boolean} [secAuthProtection] Flag for enabling extra protection for this snapshot, such as two-step verification.
     * @param {string} [licenceType] The OS type for this snapshot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesCreateSnapshotPost(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, name?: string, description?: string, secAuthProtection?: boolean, licenceType?: string, options?: any): AxiosPromise<Snapshot>;
    /**
     * Delete the specified volume within the data center. Use with caution, the volume will be permanently removed!
     * @summary Delete volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesDelete(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the properties of the specified volume within the data center.
     * @summary Retrieve volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesFindById(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Volume>;
    /**
     * List all the volumes within the data center.
     * @summary List volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {number} [offset] The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @param {number} [limit] The maximum number of elements to return (use together with offset for pagination).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesGet(datacenterId: string, pretty?: boolean, depth?: number, xContractNumber?: number, offset?: number, limit?: number, options?: any): AxiosPromise<Volumes>;
    /**
     * Update the properties of the specified storage volume within the data center.
     * @summary Partially modify volumes
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {VolumeProperties} volume The properties of the volume to be updated.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesPatch(datacenterId: string, volumeId: string, volume: VolumeProperties, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Volume>;
    /**
     * Creates a storage volume within the specified data center. The volume will not be attached! Attaching volumes is described in the Servers section.
     * @summary Create a Volume
     * @param {string} datacenterId The unique ID of the data center.
     * @param {Volume} volume The volume to create.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesPost(datacenterId: string, volume: Volume, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Volume>;
    /**
     * Modifies the properties of the specified volume within the data center.
     * @summary Modify a Volume by ID
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {Volume} volume The modified volume
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesPut(datacenterId: string, volumeId: string, volume: Volume, pretty?: boolean, depth?: number, xContractNumber?: number, options?: any): AxiosPromise<Volume>;
    /**
     * Restore a snapshot for the specified volume within the data center. A snapshot is an image of a volume, which can be used to restore this volume at a later time.
     * @summary Restore volume snapshots
     * @param {string} datacenterId The unique ID of the data center.
     * @param {string} volumeId The unique ID of the volume.
     * @param {boolean} [pretty] Controls whether the response is pretty-printed (with indentations and new lines).
     * @param {number} [depth] Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @param {number} [xContractNumber] Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @param {string} [snapshotId] The unique ID of the snapshot.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datacentersVolumesRestoreSnapshotPost(datacenterId: string, volumeId: string, pretty?: boolean, depth?: number, xContractNumber?: number, snapshotId?: string, options?: any): AxiosPromise<void>;
};
/**
 * Request parameters for datacentersVolumesCreateSnapshotPost operation in VolumesApi.
 * @export
 * @interface VolumesApiDatacentersVolumesCreateSnapshotPostRequest
 */
export interface VolumesApiDatacentersVolumesCreateSnapshotPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesCreateSnapshotPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesCreateSnapshotPost
     */
    readonly volumeId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof VolumesApiDatacentersVolumesCreateSnapshotPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesCreateSnapshotPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesCreateSnapshotPost
     */
    readonly xContractNumber?: number;
    /**
     * Snapshot name
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesCreateSnapshotPost
     */
    readonly name?: string;
    /**
     * Snapshot description
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesCreateSnapshotPost
     */
    readonly description?: string;
    /**
     * Flag for enabling extra protection for this snapshot, such as two-step verification.
     * @type {boolean}
     * @memberof VolumesApiDatacentersVolumesCreateSnapshotPost
     */
    readonly secAuthProtection?: boolean;
    /**
     * The OS type for this snapshot.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesCreateSnapshotPost
     */
    readonly licenceType?: string;
}
/**
 * Request parameters for datacentersVolumesDelete operation in VolumesApi.
 * @export
 * @interface VolumesApiDatacentersVolumesDeleteRequest
 */
export interface VolumesApiDatacentersVolumesDeleteRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesDelete
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesDelete
     */
    readonly volumeId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof VolumesApiDatacentersVolumesDelete
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesDelete
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesDelete
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersVolumesFindById operation in VolumesApi.
 * @export
 * @interface VolumesApiDatacentersVolumesFindByIdRequest
 */
export interface VolumesApiDatacentersVolumesFindByIdRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesFindById
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesFindById
     */
    readonly volumeId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof VolumesApiDatacentersVolumesFindById
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesFindById
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesFindById
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersVolumesGet operation in VolumesApi.
 * @export
 * @interface VolumesApiDatacentersVolumesGetRequest
 */
export interface VolumesApiDatacentersVolumesGetRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesGet
     */
    readonly datacenterId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof VolumesApiDatacentersVolumesGet
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesGet
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesGet
     */
    readonly xContractNumber?: number;
    /**
     * The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination).
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesGet
     */
    readonly offset?: number;
    /**
     * The maximum number of elements to return (use together with offset for pagination).
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesGet
     */
    readonly limit?: number;
    /**
     * sorts the results alphanumerically in ascending order based on the specified property
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesGet
     */
    readonly orderBy?: string;
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesGet
     */
    readonly maxResults?: number;
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof VolumesApiDatacentersVolumesGet
     */
    filters?: Map<string, string>;
}
/**
 * Request parameters for datacentersVolumesPatch operation in VolumesApi.
 * @export
 * @interface VolumesApiDatacentersVolumesPatchRequest
 */
export interface VolumesApiDatacentersVolumesPatchRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesPatch
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesPatch
     */
    readonly volumeId: string;
    /**
     * The properties of the volume to be updated.
     * @type {VolumeProperties}
     * @memberof VolumesApiDatacentersVolumesPatch
     */
    readonly volume: VolumeProperties;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof VolumesApiDatacentersVolumesPatch
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesPatch
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesPatch
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersVolumesPost operation in VolumesApi.
 * @export
 * @interface VolumesApiDatacentersVolumesPostRequest
 */
export interface VolumesApiDatacentersVolumesPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesPost
     */
    readonly datacenterId: string;
    /**
     * The volume to create.
     * @type {Volume}
     * @memberof VolumesApiDatacentersVolumesPost
     */
    readonly volume: Volume;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof VolumesApiDatacentersVolumesPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesPost
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersVolumesPut operation in VolumesApi.
 * @export
 * @interface VolumesApiDatacentersVolumesPutRequest
 */
export interface VolumesApiDatacentersVolumesPutRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesPut
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesPut
     */
    readonly volumeId: string;
    /**
     * The modified volume
     * @type {Volume}
     * @memberof VolumesApiDatacentersVolumesPut
     */
    readonly volume: Volume;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof VolumesApiDatacentersVolumesPut
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesPut
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesPut
     */
    readonly xContractNumber?: number;
}
/**
 * Request parameters for datacentersVolumesRestoreSnapshotPost operation in VolumesApi.
 * @export
 * @interface VolumesApiDatacentersVolumesRestoreSnapshotPostRequest
 */
export interface VolumesApiDatacentersVolumesRestoreSnapshotPostRequest {
    /**
     * The unique ID of the data center.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesRestoreSnapshotPost
     */
    readonly datacenterId: string;
    /**
     * The unique ID of the volume.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesRestoreSnapshotPost
     */
    readonly volumeId: string;
    /**
     * Controls whether the response is pretty-printed (with indentations and new lines).
     * @type {boolean}
     * @memberof VolumesApiDatacentersVolumesRestoreSnapshotPost
     */
    readonly pretty?: boolean;
    /**
     * Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children\&#39;s children are included.  - depth&#x3D;... and so on
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesRestoreSnapshotPost
     */
    readonly depth?: number;
    /**
     * Users with multiple contracts must provide the contract number, for which all API requests are to be executed.
     * @type {number}
     * @memberof VolumesApiDatacentersVolumesRestoreSnapshotPost
     */
    readonly xContractNumber?: number;
    /**
     * The unique ID of the snapshot.
     * @type {string}
     * @memberof VolumesApiDatacentersVolumesRestoreSnapshotPost
     */
    readonly snapshotId?: string;
}
/**
 * VolumesApi - object-oriented interface
 * @export
 * @class VolumesApi
 * @extends {BaseAPI}
 */
export declare class VolumesApi extends BaseAPI {
    /**
     * Create a snapshot of the specified volume within the data center; this snapshot can later be used to restore this volume.
     * @summary Create volume snapshots
     * @param {VolumesApiDatacentersVolumesCreateSnapshotPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    datacentersVolumesCreateSnapshotPost(requestParameters: VolumesApiDatacentersVolumesCreateSnapshotPostRequest, options?: any): Promise<import("axios").AxiosResponse<Snapshot>>;
    /**
     * Delete the specified volume within the data center. Use with caution, the volume will be permanently removed!
     * @summary Delete volumes
     * @param {VolumesApiDatacentersVolumesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    datacentersVolumesDelete(requestParameters: VolumesApiDatacentersVolumesDeleteRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the properties of the specified volume within the data center.
     * @summary Retrieve volumes
     * @param {VolumesApiDatacentersVolumesFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    datacentersVolumesFindById(requestParameters: VolumesApiDatacentersVolumesFindByIdRequest, options?: any): Promise<import("axios").AxiosResponse<Volume>>;
    /**
     * List all the volumes within the data center.
     * @summary List volumes
     * @param {VolumesApiDatacentersVolumesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    datacentersVolumesGet(requestParameters: VolumesApiDatacentersVolumesGetRequest, options?: any): Promise<import("axios").AxiosResponse<Volumes>>;
    /**
     * Update the properties of the specified storage volume within the data center.
     * @summary Partially modify volumes
     * @param {VolumesApiDatacentersVolumesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    datacentersVolumesPatch(requestParameters: VolumesApiDatacentersVolumesPatchRequest, options?: any): Promise<import("axios").AxiosResponse<Volume>>;
    /**
     * Creates a storage volume within the specified data center. The volume will not be attached! Attaching volumes is described in the Servers section.
     * @summary Create a Volume
     * @param {VolumesApiDatacentersVolumesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    datacentersVolumesPost(requestParameters: VolumesApiDatacentersVolumesPostRequest, options?: any): Promise<import("axios").AxiosResponse<Volume>>;
    /**
     * Modifies the properties of the specified volume within the data center.
     * @summary Modify a Volume by ID
     * @param {VolumesApiDatacentersVolumesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    datacentersVolumesPut(requestParameters: VolumesApiDatacentersVolumesPutRequest, options?: any): Promise<import("axios").AxiosResponse<Volume>>;
    /**
     * Restore a snapshot for the specified volume within the data center. A snapshot is an image of a volume, which can be used to restore this volume at a later time.
     * @summary Restore volume snapshots
     * @param {VolumesApiDatacentersVolumesRestoreSnapshotPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    datacentersVolumesRestoreSnapshotPost(requestParameters: VolumesApiDatacentersVolumesRestoreSnapshotPostRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
