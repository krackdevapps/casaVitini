"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runRequest = exports.backOff = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;
var configuration_1 = require("./configuration");
// Some imports not used depending on template conditions
// @ts-ignore
var axios_1 = require("axios");
exports.BASE_PATH = "https://api.ionos.com/cloudapi/v6".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, axios) {
        if (basePath === void 0) { basePath = exports.BASE_PATH; }
        if (axios === void 0) { axios = axios_1.default; }
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
var debug = function (message, configuration) {
    if (configuration && configuration.debug) {
        console.log("[ " + configuration.getUserAgent() + " ][debug] " + message);
    }
};
exports.backOff = function (iteration, seconds, configuration) { return __awaiter(void 0, void 0, void 0, function () {
    var sleepTime, maxWaitTime;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sleepTime = 0;
                if (seconds === undefined) {
                    maxWaitTime = (configuration !== undefined) ? configuration.getMaxWaitTime() : configuration_1.DEFAULT_MAX_WAIT_TIME;
                    sleepTime = Math.min(Math.pow(2, iteration) * 1000, maxWaitTime);
                }
                else {
                    sleepTime = seconds * 1000;
                }
                if (sleepTime > 0) {
                    debug("backing off " + sleepTime / 1000 + "s before retrying", configuration);
                }
                return [4 /*yield*/, new Promise(function (res, rej) { return setTimeout(res, sleepTime); })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.runRequest = function (axiosArgs, configuration) { return function (axios, basePath) {
    if (axios === void 0) { axios = axios_1.default; }
    if (basePath === void 0) { basePath = exports.BASE_PATH; }
    return __awaiter(void 0, void 0, void 0, function () {
        var axiosRequestArgs, retries, retryAfter, maxRetries, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    axiosRequestArgs = __assign(__assign({}, axiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url });
                    retries = 0;
                    retryAfter = undefined;
                    maxRetries = (configuration !== undefined) ? configuration.getMaxRetries() : configuration_1.DEFAULT_MAX_RETRIES;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, exports.backOff(retries, retryAfter, configuration)];
                case 2:
                    _a.sent();
                    retryAfter = undefined;
                    retries++;
                    return [4 /*yield*/, axios.request(axiosRequestArgs)];
                case 3: return [2 /*return*/, _a.sent()];
                case 4:
                    error_1 = _a.sent();
                    if (error_1.response === undefined) {
                        throw error_1;
                    }
                    if (retries >= maxRetries) {
                        debug("maximum number of retries (" + maxRetries + " exhausted");
                        throw error_1;
                    }
                    switch (error_1.response.status) {
                        case 502: /* bad gateway */
                        case 503: /* service unavailable */
                        case 504: /* gateway timeout */
                            /* backoff exponentially and retry */
                            debug("got " + error_1.response.status + " from the API, retrying", configuration);
                            break;
                        case 429: /* too many requests */
                            /* use the value of the Retry-After header as backoff seconds */
                            debug("got " + error_1.response.status + " from the API, retrying", configuration);
                            if (error_1.response.headers !== undefined && error_1.response.headers['Retry-After'] !== undefined) {
                                retryAfter = Number(error_1.response.headers['Retry-After']);
                                if (isNaN(retryAfter)) {
                                    retryAfter = undefined;
                                }
                                else {
                                    debug("Retry-After = " + retryAfter, configuration);
                                }
                            }
                            break;
                        default:
                            throw error_1;
                    }
                    return [3 /*break*/, 5];
                case 5:
                    if (retries < maxRetries) return [3 /*break*/, 1];
                    _a.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    });
}; };
