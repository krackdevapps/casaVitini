const casaVitini = {
    shell: {
        navegacion: {
            navegacionInversa: async (e) => {
                const zona = (history.state)?.zona || "portada"
                const tipoCambio = (history.state)?.tipoCambio || "parcial"
                const componenteExistente = history.state?.componenteExistente
                const componente = document.querySelector(`[componente="${componenteExistente}"]`)

                if (tipoCambio === "parcial") {
                    const funcionPersonalizada = history.state?.funcionPersonalizada
                    const args = history.state?.args || null

                    if (componente) {
                        if (args) {
                            const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                            args.instanciaUID = instanciaUID
                        }

                        return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                            ruta: funcionPersonalizada,
                            args: args
                        })
                    }
                } if (tipoCambio === "total" || !componente) {
                    return casaVitini.shell.navegacion.controladorVista({
                        vista: zona,
                    })
                }
            },
            cambiarVista: (vistaMenu) => {
                if (vistaMenu.button === 0) { // 0 es el botón izquierdo, 1 es el botón central
                    vistaMenu.preventDefault()
                    vistaMenu.stopPropagation()
                    const vista = vistaMenu.target.closest("[vista]").getAttribute("vista")
                    return casaVitini.shell.navegacion.controladorVista({
                        vista: vista,
                        tipoOrigen: "menuNavegador",
                        objetoOrigen: vistaMenu
                    })
                }
            },
            controladorVista: async (data) => {
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()



                const objetoOrigen = data.objetoOrigen?.target
                const selectorMenuRenderizado = document.querySelector("header [estructura=menu]")
                const tipoOrigen = data.tipoOrigen
                const vista = data.vista || "portada"


                const main = document.querySelector("main")
                main.setAttribute("instanciaUID", instanciaUID)

                if (objetoOrigen?.getAttribute("tipoMenu") === "volatil") {
                    const zonaUI = objetoOrigen.getAttribute("zona")

                    selectorMenuRenderizado.querySelectorAll("[tipoMenu=volatil]").forEach((menu) => {
                        menu.removeAttribute("style")
                    })
                    selectorMenuRenderizado
                        .querySelector(`[zona="${zonaUI}"]`)
                        .style.background = "rgba(0, 0, 0, 0.2)"
                    const selectorMenuGlobalFlotanteRenderizado = document.querySelector("[componente=menuGlobalFlotante]")
                    if (selectorMenuGlobalFlotanteRenderizado) {
                        selectorMenuGlobalFlotanteRenderizado.remove()
                    }
                }
                casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante(data)

                main.style.transition = "opacity 0s linear"
                main.style.opacity = "0"
                main.style.pointerEvents = "none"

                const selectorPantallaCargaRenderizda = document.querySelector("[ui=pantallaDeCarga]")
                if (!selectorPantallaCargaRenderizda) {
                    const pantallaCarga = document.createElement("div")
                    pantallaCarga.setAttribute("ui", "pantallaDeCarga")
                    const spinnerSimple = casaVitini.ui.componentes.spinnerSimple()
                    pantallaCarga.appendChild(spinnerSimple)
                    document.body.appendChild(pantallaCarga)
                }
                const selectorAdvertenciasInmersivas = document.querySelectorAll("[componente=errorUI], [componente=menuVolatil]")
                selectorAdvertenciasInmersivas.forEach((advertenciaInmersivaRenderizada) => {
                    advertenciaInmersivaRenderizada.remove()
                })
                const selectorCalendarioRenderizados = document.querySelectorAll("[contenedor=calendario]")
                selectorCalendarioRenderizados.forEach((calendarioRenderizado) => {
                    calendarioRenderizado.remove()
                })

                const vistaActual = selectorMenuRenderizado?.getAttribute("vistaActual")
                let url = window.location.pathname.split("/");
                delete url[0]
                delete url[1]
                delete url[2]
                url = url.filter((url) => url)
                if (vista === "portada") {
                    selectorMenuRenderizado.querySelectorAll("[componente=contenedorMenu] [zona]").forEach(zona => {
                        zona.removeAttribute("style")
                    });
                }

                const transaccion = {
                    zona: "componentes/cambiarVista",
                    vista: vista
                }

                const privacidad = casaVitini.componentes.privacidad.arranque(vista)
                if (privacidad) {
                    transaccion.vista = "politicas/privacidad"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                const contenedorVista = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                if (contenedorVista) {
                    const selectorPantallaCargaRenderizdaPostPeticion = document.querySelector("[ui=pantallaDeCarga]")
                    main.removeAttribute("rama")

                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.limpiarMain()
                        contenedorVista.removeAttribute("rama")
                        await casaVitini.shell.controladoresUI.controladorEstadoIDX()
                        contenedorVista.innerHTML = null
                        casaVitini.shell.controladoresUI.eliminarTodasLasPropiedadesCSSMenosUna(["opacity", "transition"])
                        casaVitini.shell.controladoresUI.limpiezaUI()
                        casaVitini.view = {}
                        const marcoError = document.createElement("div")
                        marcoError.classList.add("plaza_marcoError_seccion")
                        marcoError.textContent = respuestaServidor.error
                        contenedorVista.appendChild(marcoError)
                        main.removeAttribute("style")

                    } else if (respuestaServidor?.ok) {
                        const zona = respuestaServidor?.zona

                        document.documentElement.scrollTop = 0;

                        const html = respuestaServidor.html
                        const css = respuestaServidor.css
                        const js = respuestaServidor.js
                        const sharedMethods = respuestaServidor.sharedMethods
                        const urlWithoutParams = respuestaServidor.urlWithoutParams
                        const params = respuestaServidor.params

                        casaVitini.shell.controladoresUI.limpiezaUI({ zonaDestino: zona })

                        contenedorVista.innerHTML = null
                        casaVitini.view = {}
                        const cssContainer = document.createElement("style")
                        cssContainer.textContent = css
                        contenedorVista.appendChild(cssContainer)

                        contenedorVista.innerHTML = html

                        const jsContainer = document.createElement("script")
                        jsContainer.defer = true;
                        jsContainer.textContent = js
                        contenedorVista.appendChild(jsContainer)

                        const sharedMethodsContainer = document.createElement("script")
                        sharedMethodsContainer.defer = true;
                        sharedMethodsContainer.textContent = sharedMethods
                        contenedorVista.appendChild(sharedMethodsContainer)

                        contenedorVista.setAttribute("rama", zona)

                        const menu_renderizado = document.querySelector("[componente=contenedorMenu]")
                        menu_renderizado.querySelectorAll("[tipoMenu=volatil]").forEach((menu) => {
                            menu.removeAttribute("style")
                        })


                        if (menu_renderizado.querySelector(`[zona="${zona}"]`)) {
                            menu_renderizado.querySelector(`[zona="${zona}"]`).style.background = "rgba(0, 0, 0, 0.6)"
                            menu_renderizado.querySelector(`[zona="${zona}"]`).style.color = "white"
                        }

                        await casaVitini.shell.controladoresUI.controladorEstadoIDX()
                        casaVitini.shell.controladoresUI.eliminarTodasLasPropiedadesCSSMenosUna(["opacity", "transition"])
                        let urlVista = respuestaServidor.url
                        if (privacidad) {
                            urlVista = vista === "portada" ? "/" : vista;
                        }
                        urlVista = urlVista === "/portada" ? "/" : urlVista;
                        urlVista = decodeURIComponent(urlVista);

                        let controladorUrl;
                        if (vistaActual?.toLowerCase() === vista?.toLowerCase()) {
                            controladorUrl = "soloActualiza"
                        }
                        selectorMenuRenderizado.setAttribute("vistaActual", vista)
                        const titulo = 'Casa Vitini';
                        const estado = {
                            zona: vista === "portada" ? "" : vista,
                            tipoCambio: "total"
                        }
                        if (tipoOrigen === "menuNavegador" && !controladorUrl) {
                            window.history.pushState(estado, titulo, urlVista);
                        } else if (controladorUrl === "soloActualiza") {

                            window.history.replaceState(estado, titulo, urlVista);
                        } else if (!tipoOrigen && !controladorUrl) {
                            window.history.replaceState(estado, titulo, urlVista);
                        }

                        const granuladorURL = casaVitini.utilidades.granuladorURL()
                        const directoriosFusion = granuladorURL.directoriosFusion
                        contenedorVista.setAttribute("zonaCSS", directoriosFusion)

                        const viewStart = casaVitini?.view?.start
                        if (typeof viewStart === "function") {
                            casaVitini?.view?.start({
                                url: urlWithoutParams,
                                params: params
                            })
                        }

                        // const arranqueVistaPublica = contenedorVista?.querySelector("arranque")?.getAttribute("publico")
                        // const arranqueVistaAdministrativa = contenedorVista?.querySelector("arranque")?.getAttribute("administracion")
                        // if (arranqueVistaPublica) {

                        //     const ruta = "ui.vistas." + arranqueVistaPublica
                        //     casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                        //         ruta: ruta,
                        //         args: null
                        //     })
                        // } else if (arranqueVistaAdministrativa) {

                        //     const ruta = "administracion." + arranqueVistaAdministrativa
                        //     casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                        //         ruta: ruta,
                        //         args: null
                        //     })
                        // }
                        selectorPantallaCargaRenderizdaPostPeticion?.remove()

                        main.style.transition = "opacity 250ms linear"
                        main.style.opacity = "1"
                    }
                }

            },
            sobreControlMenuGlobal: (e) => {

                const menu_renderizado = document.querySelector("[componente=contenedorMenu]")

                const usuarioActual = menu_renderizado.querySelector("[data=vitiniIDX]").textContent
                const menuActual = menu_renderizado.getAttribute("menuID")

                const menuFinal = (menuID) => {
                    if (menuID === "panelControl") {
                        menu_renderizado.setAttribute("sobreControl", "activo")
                        return "publica"
                    } else if (menuID === "publica") {
                        menu_renderizado.removeAttribute("sobreControl")
                        return "panelControl"
                    }
                }

                casaVitini.shell.navegacion.constructorMenuUI({
                    tipoMenu: menuFinal(menuActual),
                    destino: "header [contenedor=intermedio]",
                    usuario: usuarioActual,
                    origen: "sobreControl"
                })
                const zonaActual = document.querySelector("main").getAttribute("rama")
                menu_renderizado.querySelectorAll("[zona]").forEach(zonaObsoleta => {
                    zonaObsoleta.removeAttribute("style")
                })
                if (menu_renderizado.querySelector("[zona=" + zonaActual + "]")) {
                    menu_renderizado.querySelector("[zona=" + zonaActual + "]").style.background = "rgba(0, 0, 0, 0.6)"
                    menu_renderizado.querySelector("[zona=" + zonaActual + "]").style.color = "white"
                }
                const menuResponsivoRenderizado = document.querySelector("[componente=menuGlobalFlotante]")
                if (menuResponsivoRenderizado) {
                    casaVitini.shell.controladoresUI.menuResponsivo.renderizaMenuResponsivo()
                }



            },
            controladorNavegacion: async function (navegacion) {

                const estadoIDV = navegacion.estadoIDV
                const usuario = navegacion.usuario
                const tipoBarraNavegacion = navegacion.tipo
                const origen = navegacion.origen

                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const panelNavegacion = document.querySelector("header [componente=contenedorMenu]")
                const menuRenderizado = panelNavegacion.getAttribute("menuID")

                const zonaActual = document.querySelector("main").getAttribute("rama")
                const estadoSobreControl = panelNavegacion.getAttribute("sobreControl")
                if (estadoIDV === "conectado" && estadoSobreControl === "activo") {
                    return
                }



                if (tipoBarraNavegacion === "panelControl" && menuRenderizado !== tipoBarraNavegacion) {
                    panelNavegacion.setAttribute("menuID", tipoBarraNavegacion)

                    casaVitini.shell.navegacion.constructorMenuUI({
                        tipoMenu: "panelControl",
                        destino: "header [contenedor=intermedio]",
                        usuario: usuario
                    })

                } else if (tipoBarraNavegacion === "publica" && menuRenderizado !== tipoBarraNavegacion) {
                    panelNavegacion.setAttribute("menuID", tipoBarraNavegacion)

                    casaVitini.shell.navegacion.constructorMenuUI({
                        tipoMenu: "publica",
                        destino: "header [contenedor=intermedio]",
                        usuario: usuario
                    })
                }

                const selectorMenuRenderizado = document.querySelector("header [estructura=menu]")
                const menuID = selectorMenuRenderizado.querySelector("[data=vitiniIDX]")

                if (estadoIDV === "conectado") {
                    menuID.textContent = usuario
                }
                if (estadoIDV === "desconectado") {
                    menuID.textContent = "Mi Casa"
                    panelNavegacion.removeAttribute("sobreControl")
                    panelNavegacion.querySelector("[elemento=esfera]")?.remove()
                }
                selectorMenuRenderizado.querySelectorAll("[zona]").forEach(zonaObsoleta => {
                    zonaObsoleta.removeAttribute("style")
                })
                if (zonaActual && selectorMenuRenderizado.querySelector(`[zona="${zonaActual}"]`)) {
                    selectorMenuRenderizado.querySelector(`[zona="${zonaActual}"]`).style.background = "rgba(0, 0, 0, 0.6)"
                    selectorMenuRenderizado.querySelector(`[zona="${zonaActual}"]`).style.color = "white"
                }

            },
            constructorMenuUI: (data) => {
                const tipoMenu = data.tipoMenu
                const destino = data.destino
                const usuario = data.usuario
                const origen = data.origen



                const menuAdminData = [{
                    href: "/administracion",
                    nombre: "Administración",
                    zona: "administracion"
                }, {
                    href: "/administracion/situacion",
                    nombre: "Situación",
                    zona: "situacion"

                }, {
                    href: "/administracion/calendario",
                    nombre: "Calendario",
                    zona: "calendario"

                }, {
                    href: "/administracion/reservas",
                    nombre: "Reservas",
                    zona: "reservas"

                }, {
                    href: "/administracion/clientes",
                    nombre: "Clientes",
                    zona: "clientes"

                }, {
                    tipo: "sobreControlMenu"
                }]

                const menuPublicoData = [{
                    href: "/alojamiento",
                    nombre: "Alojamiento",
                    zona: "alojamiento"

                },
                {
                    href: "/conozcanos",
                    nombre: "Conózcanos",
                    zona: "conozcanos"

                }, {
                    href: "/instalaciones",
                    nombre: "Instalaciones",
                    zona: "instalaciones"

                }, {
                    href: "/contacto",
                    nombre: "Contacto",
                    zona: "contacto"

                }, {
                    tipo: "sobreControlMenu"
                }]

                document.querySelector("[componente=contenedorMenu]").setAttribute("menuID", tipoMenu)

                const selectorDestino = document.querySelector(destino)

                const estructura_selector = selectorDestino.querySelector("[estructura=menu]")
                if (!estructura_selector) {
                    const estructuraMenu = document.createElement("div")
                    estructuraMenu.setAttribute("estructura", "menu")
                    estructuraMenu.classList.add(
                        "estructura"
                    )
                    selectorDestino.appendChild(estructuraMenu)

                    const contenedorZonas = document.createElement("div")
                    contenedorZonas.setAttribute("contenedor", "zonas")
                    contenedorZonas.classList.add(
                        "zonas"
                    )

                    const contenedorIDX = document.createElement("a")
                    contenedorIDX.setAttribute("href", "/micasa")
                    contenedorIDX.setAttribute("class", "uiCategoria")
                    contenedorIDX.setAttribute("tipoMenu", "volatil")
                    contenedorIDX.setAttribute("vista", "/micasa")
                    contenedorIDX.setAttribute("zona", "micasa")
                    contenedorIDX.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                    estructuraMenu.appendChild(contenedorIDX)

                    const textoIDV = document.createElement("div")
                    textoIDV.classList.add("elipsisIDX")
                    textoIDV.setAttribute("data", "vitiniIDX")
                    textoIDV.textContent = !usuario ? "Mi Casa" : usuario
                    contenedorIDX.appendChild(textoIDV)
                }
                const estructura_renderizada = selectorDestino.querySelector("[estructura=menu]")

                estructura_renderizada.querySelectorAll("[tipoMenu=volatil]").forEach((zonaObsoleta) => {
                    const zona = zonaObsoleta.getAttribute("zona")
                    if (zona !== "micasa") {
                        zonaObsoleta?.remove()
                    }
                })

                const zonaMiCasaRenderizada = estructura_renderizada.querySelector("[zona=micasa]")

                const zonaUI = (data) => {
                    const href = data.href
                    const nombre = data.nombre
                    const zonaIDV = data.zonaIDV

                    const zona = document.createElement("a")
                    zona.setAttribute("href", href)
                    zona.setAttribute("class", "uiCategoria")
                    zona.setAttribute("tipoMenu", "volatil")
                    zona.setAttribute("vista", href)
                    zona.setAttribute("zona", zonaIDV)
                    zona.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    zona.textContent = nombre
                    return zona
                }

                const sobreControlUI = () => {
                    const sobreControl = document.createElement("a")
                    sobreControl.setAttribute("class", "esferaUI_flotante")
                    sobreControl.setAttribute("tipoMenu", "volatil")
                    sobreControl.setAttribute("elemento", "esfera")
                    sobreControl.setAttribute("controlFlotante", "cancelar")
                    sobreControl.addEventListener("click", casaVitini.shell.navegacion.sobreControlMenuGlobal)
                    return sobreControl
                }

                if (tipoMenu === "publica") {
                    menuPublicoData.forEach((menu) => {
                        const href = menu.href
                        const nombre = menu.nombre
                        const zonaIDV = menu.zona
                        const tipo = menu?.tipo



                        if (!tipo) {
                            const zona = zonaUI({
                                href,
                                nombre,
                                zonaIDV,
                            })
                            estructura_renderizada.insertBefore(zona, zonaMiCasaRenderizada);

                        } else if (tipo === "sobreControlMenu" && origen === "sobreControl") {
                            const sobreControl = sobreControlUI()
                            estructura_renderizada.insertBefore(sobreControl, zonaMiCasaRenderizada);
                        }
                    })
                } else if (tipoMenu === "panelControl") {

                    menuAdminData.forEach((menu) => {
                        const href = menu.href
                        const nombre = menu.nombre
                        const tipo = menu?.tipo
                        const zonaIDV = menu.zona

                        if (!tipo) {
                            const zona = zonaUI({
                                href,
                                nombre,
                                zonaIDV,
                            })
                            estructura_renderizada.insertBefore(zona, zonaMiCasaRenderizada);

                        } else if (tipo === "sobreControlMenu") {
                            const sobreControl = sobreControlUI()
                            estructura_renderizada.insertBefore(sobreControl, zonaMiCasaRenderizada);
                        }

                    })
                }
            },
        },
        arranque: async () => {
            window.addEventListener("popstate", casaVitini.shell.navegacion.navegacionInversa)
            await casaVitini.shell.controladoresUI.controladorEstadoIDX()
            document.querySelector("[componente=botonMenuResponsivo]").addEventListener("click", () => {
                casaVitini.shell.controladoresUI.menuResponsivo.despliege()
            })
            const vistas = document.querySelectorAll("[vista]")
            for (const vistaMenu of vistas) {
                vistaMenu.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
            }



            const url = window.location.pathname;
            if (url === "/") {
                return casaVitini.shell.navegacion.controladorVista({
                    vista: "portada"
                })
            } else {
                return casaVitini.shell.navegacion.controladorVista({
                    vista: url
                })
            }
        },
        IDX: {
            iniciarSession: async (IDX) => {
                const usuario = IDX.usuario
                const clave = IDX.clave
                const contenedorBotones = document.querySelector("[componente=contenedorBotones]")
                const bloqueRespuesta = document.querySelector("[componente=bloqueRespuesta")
                bloqueRespuesta.style.color = "white"
                const campos = document.querySelectorAll("[componente=campoID]")
                campos.forEach((campo) => {
                    campo.removeAttribute("style")
                })
                const circuloAnimado = document.createElement("span")
                circuloAnimado.classList.add("circuloAnimado")
                const mensajeIniciando = document.createElement("div")
                mensajeIniciando.classList.add("flexVertical")
                mensajeIniciando.textContent = "Comprobando tu Vitini ID..."
                bloqueRespuesta.appendChild(circuloAnimado)
                bloqueRespuesta.appendChild(mensajeIniciando)
                bloqueRespuesta.style.opacity = "1"

                const respuestaServidor = await casaVitini.shell.servidor({
                    zona: "IDX/conectar",
                    usuario: usuario,
                    clave: clave
                })

                if (respuestaServidor?.error) {
                    bloqueRespuesta.textContent = respuestaServidor?.error


                    campos.forEach(campo => {
                        campo.style.background = "rgba(255, 0, 0, 0.5)"
                    });
                }
                if (respuestaServidor?.ok) {

                    let tipo;
                    const rolIDV = respuestaServidor?.rolIDV;
                    if (rolIDV === "cliente") {
                        tipo = "publica"
                    }
                    if (rolIDV === "administrador" ||
                        rolIDV === "empleado") {
                        tipo = "panelControl"
                    }

                    const zonaActual = document.querySelector("header [estructura=menu]").getAttribute("vistaActual")

                    return casaVitini.shell.navegacion.controladorVista({
                        vista: zonaActual,
                        tipoOrigen: "menuNavegador"
                    })
                }
            },
            cerrarSession: async () => {

                const respuestaServidor = await casaVitini.shell.servidor({
                    zona: "IDX/desconectar"
                })
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    return false
                }
                if (respuestaServidor?.estadoIDV === "desconectado") {
                    return respuestaServidor
                }

            },
            estadoSession: async () => {
                const transaccion = {
                    zona: "IDX/estado",
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                return respuestaServidor
            },
        },
        controladoresUI: {
            interrumpirTransicionVistas: () => {
                const main = document.querySelector("main")
                const pantallaCarga = document.querySelector("[ui=pantallaDeCarga]")
                main.removeAttribute("style")
                pantallaCarga?.remove()

            },
            eliminarTodasLasPropiedadesCSSMenosUna: (propiedadesArray) => {
                const elemento = document.querySelector("main");


                const propiedadesInline = elemento.style.cssText;



                const propiedadesFiltradas = propiedadesInline
                    .split(";")
                    .filter(propiedad => {
                        const [nombre] = propiedad.split(":");
                        return propiedadesArray.includes(nombre.trim());
                    })
                    .join(";");




                elemento.style.cssText = propiedadesFiltradas;
            },
            controlHorizontalVentana: () => {
                const currentWidth = window.innerWidth;
                const previousWidth = casaVitini.componentes.controladores.anchoActualVentanad

                if (currentWidth !== previousWidth) {



                    casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                } else {

                }
            },
            menuResponsivo: {
                despliege: function () {
                    selectorMenuFlotanteRenderizado = document.querySelector("[componente=menuGlobalFlotante]")
                    if (selectorMenuFlotanteRenderizado) {
                        selectorMenuFlotanteRenderizado.remove()
                    } else {
                        this.tranformaMenuARespontivo()
                        window.addEventListener("click", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                        window.addEventListener("resize", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                        window.addEventListener("scroll", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                    }
                },
                tranformaMenuARespontivo: function () {
                    const menu_selector = document.querySelector("[componente=menuGlobalFlotante]")
                    if (menu_selector) {
                        menu_selector.innerHTML = null
                    } else {
                        const menuFlotante = document.createElement("div")
                        menuFlotante.setAttribute("componente", "menuGlobalFlotante")
                        menuFlotante.classList.add("uiMenuGlobalResponsivo")
                        document.body.appendChild(menuFlotante)
                    }
                    this.renderizaMenuResponsivo()

                },

                renderizaMenuResponsivo: () => {
                    const menu_renderizado = document.querySelector("[componente=menuGlobalFlotante]")

                    const contenedorMenu = document.querySelector("[componente=contenedorMenu]")
                    const menuID = contenedorMenu.getAttribute("menuID")
                    const usuario = contenedorMenu.querySelector("[data=vitiniIDX]").textContent

                    const sobreControl = contenedorMenu?.getAttribute("sobreControl") === "activo" ? "sobreControl" : null

                    casaVitini.shell.navegacion.constructorMenuUI({
                        tipoMenu: menuID,
                        destino: "body [componente=menuGlobalFlotante]",
                        usuario: usuario,
                        origen: sobreControl
                    })
                    const menuRenderizado = menu_renderizado.querySelector("[estructura=menu]")
                    menuRenderizado.classList.add("estructuraVertical")
                    const zonasRenderizadas = menuRenderizado.querySelectorAll("[zona]")
                    zonasRenderizadas.forEach((zona) => zona.style.borderRadius = "12px")

                    const selectorEsfera = menu_renderizado.querySelector("[elemento=esfera]")
                    if (selectorEsfera) {
                        selectorEsfera.classList.remove("esferaUI_flotante")
                        selectorEsfera.classList.add("esferaUI_flotante_responsiva")
                    }


                    const zonaActual = document.querySelector("main").getAttribute("rama")
                    if (menu_renderizado.querySelector("[zona=" + zonaActual + "]")) {
                        menu_renderizado.querySelector("[zona=" + zonaActual + "]").style.background = "rgba(0, 0, 0, 0.6)"
                        menu_renderizado.querySelector("[zona=" + zonaActual + "]").style.color = "white"
                    }
                }
            },
            controladorEstadoIDX: async () => {

                const IDX = await casaVitini.shell.IDX.estadoSession()
                const estadoIDV = IDX?.estadoIDV || null
                const rolIDV = IDX?.rolIDV
                if (estadoIDV === "desconectado" || !estadoIDV) {
                    const navegacion = {
                        tipo: "publica",
                        estadoIDV: "desconectado",
                        origen: "controlador",
                        estadoIDV: estadoIDV

                    }

                    casaVitini.shell.navegacion.controladorNavegacion(navegacion)

                } else if (estadoIDV === "conectado" && (rolIDV === "administrador" || rolIDV === "empleado")) {
                    const navegacion = {
                        tipo: "panelControl",
                        usuario: IDX.usuario,
                        rolIDV: rolIDV,
                        estadoIDV: estadoIDV,
                        origen: "controlador"
                    }

                    casaVitini.shell.navegacion.controladorNavegacion(navegacion)

                } else if (estadoIDV === "conectado" && rolIDV === "cliente") {
                    const navegacion = {
                        tipo: "publica",
                        usuario: IDX.usuario,
                        rolIDV: rolIDV,
                        estadoIDV: estadoIDV,
                        origen: "controlador"
                    }

                    casaVitini.shell.navegacion.controladorNavegacion(navegacion)

                }
            },
            controlLogoScroll: (metadatos) => {
                const sectionUID = metadatos.sectionUID
                const elementoScroll = metadatos.elementoScroll
                if (!sectionUID) {
                    const mensaje = "Falta el sectionUID para determinar si el evento debe de crearse o eliminarse"
                    return casaVitini.ui.componentes.advertenciaInmersiva(mensaje)
                }
                const elemento = document.querySelector(`[instanciaUID="${sectionUID}"] ${elementoScroll}`)
                if (!elemento) {
                    document.querySelector(`[instanciaUID="${sectionUID}"] ${elementoScroll}`).removeEventListener("scroll", controladorEvento)
                    return
                }
                const logo = document.querySelector("[componente=logoCasaVitini]")
                const controladorEvento = (e) => {
                    e.stopPropagation()
                    const alturaScroll = e.target.scrollTop
                    if (alturaScroll > 10) {
                        logo.style.opacity = "0"
                        logo.style.pointerEvents = "none"
                    } else {
                        logo.style.opacity = "1"
                        logo.style.pointerEvents = "all"
                    }
                }
                elemento.addEventListener("scroll", controladorEvento)
            },
            restaurarMenu: (componente) => {
                componente.stopPropagation()

                let componenteID = componente.target
                if (componenteID.id !== "navegadorResponsivo" && componenteID.id !== "botonMenuResponsivo" && !componenteID.getAttribute("vista") && componenteID?.getAttribute("class") !== "contenedorMenu") {
                    casaVitini.shell.controladoresUI.menuResponsivo()
                }
            },
            ocultarMenusVolatiles: (menuVolatil) => {

                window.removeEventListener("resize", casaVitini.shell.controladoresUI.controlHorizontalVentana)
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                screen.orientation?.removeEventListener("change", casaVitini.shell.controladoresUI.ocultarMenusVolatiles);

                const componente = menuVolatil?.target?.getAttribute("componente") || null
                if (componente === "menuDesplegable") {
                    return
                }
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)

                if (componente !== "menuVolatil") {
                    window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                    const selectorMenusVolatiles = document.querySelectorAll("[componente=menuVolatil]")
                    selectorMenusVolatiles.forEach(menuVolatil => {
                        menuVolatil.remove()
                    })
                }
                const selectoresErrorUI = document.querySelectorAll("[componente=errorUI]")
                selectoresErrorUI.forEach((errorUI) => {
                    errorUI.remove()
                })

            },
            ocultarMenusVolatilesSimple: () => {
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatilesSimple)
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.ocultarMenusVolatilesSimple)

                const selectorMenusVolatiles = document.querySelectorAll("[componente=menuVolatil]")
                selectorMenusVolatiles.forEach(menuVolatil => {
                    menuVolatil.remove()
                })
            },
            limpiarAdvertenciasInmersivas: () => {
                document.body.style.removeProperty("overflow")
                document.querySelectorAll("[componente=bloqueCalendario]").forEach((calendarioRenderizado) => {
                    calendarioRenderizado.remove()
                })
                document.querySelectorAll("[componente=advertenciaInmersiva]").forEach((advertenciaInmersiva) => {
                    advertenciaInmersiva.remove()
                })
            },
            limpiarTodoElementoFlotante: () => {
                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                document.querySelectorAll("[componente=menuVolatil]").forEach((menuVolatil) => {
                    menuVolatil.remove()
                })
                document.querySelectorAll("[componente=advertenciaIntegrada]").forEach((menuVolatil) => {
                    menuVolatil.remove()
                })
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatilesSimple)
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.controlHorizontalVentana)
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)



            },
            ocultarElementos: (e) => {

                if (e?.target) {
                    const botonDesplegarCalendario = e.target.closest("[boton=desplegarCalendario]")
                    if (botonDesplegarCalendario) {
                        return
                    }
                    const selectorFlotante = e.target.closest("[elemento]")?.getAttribute("elemento")
                    if (selectorFlotante === "flotante") {
                        return
                    }
                    const selectorParalizador = e.target.closest("[paralizadorEvento]")?.getAttribute("paralizadorEvento")
                    if (selectorParalizador === "ocultadorCalendarios") {
                        return
                    }
                }
                const bloqueCalendario = document.querySelectorAll("[componente=bloqueCalendario]")
                bloqueCalendario.forEach(calendarioRenderizado => {
                    calendarioRenderizado.remove()
                });
                document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
            },
            controlGlobalScroll: () => {

                const selectorBloqueMenusGlobales = document.querySelector("[componente=marcoNavegacion]")
                const selectorLogo = document.querySelector("[componente=logoCasaVitini]")
                document.addEventListener('scroll', () => {
                    const selectorStyle = selectorLogo.style.filter
                    const mediaQuery = window.matchMedia('(max-width: 850px)');
                    document.querySelector("#navegadorResponsivo").style.removeProperty("display")
                    if (window.scrollY === 0) {
                        selectorBloqueMenusGlobales.classList.remove('globa_marcoNavegacion_desenfoque');
                        if (mediaQuery.matches && selectorStyle === "invert(0)") {
                            selectorLogo.style.filter = "invert(1)"
                        }
                    } else {
                        if (mediaQuery.matches && selectorStyle === "invert(1)") {
                            selectorLogo.style.filter = "invert(0)"
                        }
                        selectorBloqueMenusGlobales.classList.add('globa_marcoNavegacion_desenfoque');
                    }
                })
            },
            // controlCodigoAdministracion: async () => {

            //     const convertirCadenasEnFunciones = (objeto) => {
            //         for (const clave in objeto) {
            //             if (typeof objeto[clave] === "string") {
            //                 try {
            //                     const functionConstructor = new Function(`return ${objeto[clave]}`);
            //                     objeto[clave] = functionConstructor();
            //                 } catch (errorCapturado) {

            //                 }
            //             } else if (typeof objeto[clave] === "object") {

            //                 convertirCadenasEnFunciones(objeto[clave]);
            //             }
            //         }
            //     }
            //     if (!casaVitini.administracion) {
            //         const transaccion = {
            //             zona: "administracion/componentes/administracionUI"
            //         }
            //         const respuestaServidor = await casaVitini.shell.servidor(transaccion)
            //         if (respuestaServidor?.error) {
            //             casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
            //         }
            //         if (respuestaServidor?.tipo === "IDX") {

            //         }
            //         if (respuestaServidor?.ok) {
            //             const JS = JSON.parse(respuestaServidor.ok)
            //             convertirCadenasEnFunciones(JS);
            //             casaVitini["administracion"] = JS
            //         }
            //     }
            // },
            ocultaMenuGlobalFlotante: (e) => {
                const controlFlotante = e.type === "click" ?
                    e?.target?.getAttribute("controlFlotante") : null
                if (controlFlotante !== "cancelar") {
                    const selectorMenuFlotanteRenderizado = document.querySelector("[componente=menuGlobalFlotante]")
                    selectorMenuFlotanteRenderizado?.remove()
                    window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                    window.removeEventListener("resize", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                    window.removeEventListener("scroll", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                }
            },
            limpiarMain: () => {

                const selectorPantallaCargaRenderizdaPostPeticion = document.querySelector("[ui=pantallaDeCarga]")
                selectorPantallaCargaRenderizdaPostPeticion?.remove()
                const main = document.querySelector("main")
                document.querySelectorAll("html, #uiLogo, body, header, [componente=contenedorMenu], #botonMenuResponsivo")
                    .forEach((elementoReseteo) => {
                        elementoReseteo.removeAttribute("style")
                    })
                main.innerHTML = null
                main.removeAttribute("rama")
                main.removeAttribute("zonaCSS")
                main.removeAttribute("ui")
                casaVitini.shell.controladoresUI.eliminarTodasLasPropiedadesCSSMenosUna("opacity")
                main.style.transition = "opacity 250ms linear"
                main.style.opacity = "1"


            },
            iconosGlobales: {
                telefonoPublicoWhatsApp: async (data = {}) => {
                    const zonaIcono = data.zonaIcono
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "plaza/reservas/telefonoPublicoWhatsApp"
                    })

                    if (respuestaServidor?.error) {

                    } else if (respuestaServidor.ok) {
                        const telefonoPublicoWhatsApp = respuestaServidor.ok.telefonoPublicoWhatsApp
                        const selectorIconosGlobales = document.querySelector("header [componente=iconos]")
                        const seletorIconosRenderizado = selectorIconosGlobales.querySelector("[iconoGlobal=whatsApp]")
                        if (!seletorIconosRenderizado && telefonoPublicoWhatsApp.length > 0) {
                            const whatsAppIcono = "/componentes/iconos/whatsapp-icono.svg"
                            const contenedor = document.createElement("a")
                            contenedor.setAttribute("iconoGlobal", "whatsApp")
                            contenedor.setAttribute("zona", zonaIcono)
                            contenedor.classList.add("efectoAparicion")
                            contenedor.style.backgroundImage = `url('${whatsAppIcono}')`;
                            contenedor.style.backgroundSize = `cover`;
                            contenedor.style.height = `30px`;
                            contenedor.style.width = `30px`;
                            contenedor.target = "_blank"
                            contenedor.href = `https://wa.me/${telefonoPublicoWhatsApp}`
                            selectorIconosGlobales.appendChild(contenedor)
                        }
                    }
                }
            },
            limpiezaUI: (data = {}) => {
                const main = document.querySelector("main")
                const zonaDestino = data?.zonaDestino
                casaVitini.view?.volatilObservers?.parallaxControlador?.destroy()


                const observersObserving = casaVitini?.view?.__observers__ || {};
                Object.keys(observersObserving).forEach(o => {

                    casaVitini.view.__observers__[o].disconnect()
                })

                window.removeEventListener("resize", casaVitini.view?.volatilObservers?.parallaxControlador?.resizeIsDone);
                window.removeEventListener('scroll', casaVitini.view?.scrollHandler);
                window.removeEventListener('scroll', casaVitini.view?.controladorIconoMouse);
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.controlHorizontalVentana)

                screen.orientation?.removeEventListener("change", casaVitini.shell.controladoresUI.ocultarMenusVolatiles);
                document.querySelectorAll("html, #uiLogo, body, header, [componente=contenedorMenu], [componente=botonMenuResponsivo]")
                    .forEach((e) => {
                        e.removeAttribute("style")
                    })
                main.removeAttribute("zonaCSS")
                main.removeAttribute("ui")

                const iconosGlobalesRenderizados = document.querySelectorAll("header [componente=iconos] [iconoGlobal]")
                iconosGlobalesRenderizados.forEach((icono) => {
                    const zonaDelIcono = icono.getAttribute("zona")
                    if (zonaDelIcono !== zonaDestino) {
                        icono?.remove()
                    }
                })
                const menu_renderizado = document.querySelector("[componente=contenedorMenu]")
                menu_renderizado.querySelectorAll("[tipoMenu=volatil]").forEach((menu) => {
                    menu.removeAttribute("style")
                })
            }
        },
        servidor: async function (transaccion) {
            const puerto = '/puerto';
            const peticion = {
                method: 'POST',
                headers: {
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaccion)
            };
            try {

                const servidor = await fetch(puerto, peticion);
                const respuestaServidor = await servidor.json();
                if (!respuestaServidor) {
                    this.controladoresUI.interrumpirTransicionVistas()
                    return casaVitini.ui.componentes.errorUI()
                } else if (respuestaServidor.tipo === "IDX") {
                    casaVitini.componentes.loginUI()
                    return respuestaServidor
                } else if (respuestaServidor.tipo === "ROL") {
                    this.controladoresUI.interrumpirTransicionVistas()
                    const mensaje = "Tu VitiniID no esta autorizado a realizar esta operación."
                    casaVitini.ui.componentes.advertenciaInmersiva(mensaje)
                    return respuestaServidor
                } else if (respuestaServidor.codigo === "mantenimiento") {

                    casaVitini.shell.controladoresUI.limpiarMain()
                    this.controladoresUI.interrumpirTransicionVistas()
                    const mensaje = respuestaServidor.error
                    return casaVitini.ui.componentes.mensajeSimple({
                        titulo: "Casa Vitini ahora mismo no esta disponible",
                        descripcion: mensaje,
                        mensajeUID: "temporalyNotAvaible"
                    })

                } else if (respuestaServidor?.error === "noExisteLaVista") {
                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    casaVitini.shell.controladoresUI.limpiarMain()
                    return casaVitini.ui.componentes.urlDesconocida()
                } else {
                    return respuestaServidor
                }
            } catch (errorCapturado) {
                this.controladoresUI.interrumpirTransicionVistas()

                if (errorCapturado.name === 'AbortError') {
                }
                if (errorCapturado instanceof TypeError) {
                    return casaVitini.ui.componentes.errorUI()
                }
            }
        },
    },
    ui: {
        componentes: {
            errorUI: () => {
                const selectorContenedorError = document.querySelector(`[identificadorVisual=errorConexion]`)
                if (selectorContenedorError) {
                    return
                }
                document.querySelectorAll("[tipoMenu=volatil]").forEach((menu) => {
                    menu.removeAttribute("style")
                })
                casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()

                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const mensaje = "Se ha producido un error en la red y no se ha podido comunicar con el servidor. Si es por una causa circunstancial de la red, reinténtalo y debería funcionar. Comprueba que tienes acceso a la red. El estado de la experiencia se ha detenido, pero no se ha perdido. Los datos que tengas escritos en algún campo de texto o contenido pendiente de envío sigue tras esta pantalla de información."
                const advertenciaInmersivaUI = document.createElement("div")
                advertenciaInmersivaUI.setAttribute("class", "advertenciaInmersivaSuperpuesta")
                advertenciaInmersivaUI.setAttribute("identificadorVisual", "errorConexion")
                advertenciaInmersivaUI.setAttribute("pantallaSuperpuesta", "pantallaCargaSuperpuesta")
                advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")
                advertenciaInmersivaUI.setAttribute("instanciaUID", instanciaUID)
                const marcoElastico = document.createElement("div")
                marcoElastico.classList.add("marcoElasticoError")
                const info = document.createElement("div")
                info.classList.add("advertenciaInfoFlujoPago")
                info.setAttribute("componente", "mensajeFlujoPasarela")
                info.textContent = mensaje
                marcoElastico.appendChild(info)
                const boton = document.createElement("div")
                boton.classList.add("botonV1")
                boton.setAttribute("componente", "botonV1")
                boton.textContent = "Cerrar y volver"
                boton.addEventListener("click", (e) => {
                    const rama = document.querySelector("main").getAttribute("rama")
                    const controladorZona = {
                        zona: rama
                    }


                    casaVitini.shell.navegacion.controladorNavegacion(controladorZona)
                    document.body.style.removeProperty("overflow");
                    e.target.parentNode.parentNode.remove()
                })
                marcoElastico.appendChild(boton)
                advertenciaInmersivaUI.appendChild(marcoElastico)
                document.querySelector("main").appendChild(advertenciaInmersivaUI)
            },
            urlDesconocida: function () {
                const main = document.querySelector("main")
                main.innerHTML = null

                const info = document.createElement("div")
                info.classList.add(
                    "textoCentrado",
                    "negrita",
                    "padding12"

                )
                info.textContent = "No existe nada en esta dirección :)"
                main.appendChild(info)

                const boton = document.createElement("a")
                boton.classList.add(
                    "botonV1",
                    "comportamientoBoton",
                    "areaSinDecoracionPredeterminada",
                    "margin10"
                )
                boton.textContent = "Ir a Administración"
                boton.setAttribute("href", "/administracion")
                boton.setAttribute("vista", "/administracion")
                boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                main.appendChild(boton)
            },
            errorRenderizacionVista: function () {
                casaVitini.shell.controladoresUI.limpiarMain()

                const main = document.querySelector("main")
                main.innerHTML = null

                const info = document.createElement("div")
                info.classList.add(
                    "textoCentrado",
                    "negrita",
                    "padding12"

                )
                info.textContent = "Se ha producido un error al renderizar la vista :)"
                main.appendChild(info)

            },
            errorVista: () => {
                let selectoresVistas = document.querySelectorAll("[vista")
                for (const vista of selectoresVistas) {
                    vista.style.backgroundColor = ""
                    vista.style.color = ""
                }
                let constructorSeccion = document.createElement("section")
                constructorSeccion.style.scale = "1";
                let vistaError = document.createElement("p")
                vistaError.setAttribute("id", "errorVista")
                vistaError.textContent = "Error, no se ha podido comunicar con el servidor. Reintentalo"
                vistaError.style.position = "relative"
                constructorSeccion.appendChild(vistaError);
                document.body.appendChild(constructorSeccion)
                document.getElementById("uiNavegacion").setAttribute("vistaActual", "error")
                document.getElementById("uiNavegacion").removeAttribute("arranqueVolatil")
                let espacio = document.body;
                espacio.style.background = ""
                espacio.style.backgroundSize = "cover"
                espacio.style.backgroundColor = "grey"
                let estado = {
                    zona: "Error",
                    "EstadoInternoZona": "estado"
                }
                let titulo = "Error"

            },
            advertenciaInmersiva: (advertencia) => {
                document.body.style.overflow = 'hidden';
                const advertenciaInmersivaUI = document.createElement("dialog")
                advertenciaInmersivaUI.setAttribute("class", "errorUI")
                advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")

                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                advertenciaInmersivaUI.appendChild(contenedorAdvertenciaInmersiva)

                const contenidoAdvertenciaInmersiva = document.createElement("div")
                contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("destino", "inyector")
                contenidoAdvertenciaInmersiva.setAttribute("componente", "contenedor")
                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)

                const info = document.createElement("div")
                info.classList.add(
                    "textoCentrado"
                )
                info.textContent = advertencia
                contenidoAdvertenciaInmersiva.appendChild(info)
                const boton = document.createElement("div")
                boton.setAttribute("class", "botonV1")
                boton.textContent = "Aceptar"

                boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                contenidoAdvertenciaInmersiva.appendChild(boton)
                document.querySelector("main").appendChild(advertenciaInmersivaUI)
            },
            advertenciaInmersivaSuperPuesta: (advertencia) => {
                const advertenciaInmersivaUI = document.createElement("div")
                advertenciaInmersivaUI.setAttribute("class", "advertenciaInmersivaSuperpuesta")
                advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")

                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                advertenciaInmersivaUI.appendChild(contenedorAdvertenciaInmersiva)

                const contenidoAdvertenciaInmersiva = document.createElement("div")
                contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("destino", "inyector")
                contenidoAdvertenciaInmersiva.setAttribute("componente", "contenedor")
                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)

                const info = document.createElement("div")
                info.classList.add(
                    "textoCentrado"
                )
                info.textContent = advertencia
                contenidoAdvertenciaInmersiva.appendChild(info)
                const boton = document.createElement("div")
                boton.setAttribute("class", "botonV1")
                boton.textContent = "Aceptar"
                boton.addEventListener("click", (e) => {
                    e.target.closest("[componente=advertenciaInmersiva]")?.remove()
                })
                contenidoAdvertenciaInmersiva.appendChild(boton)
                document.body.appendChild(advertenciaInmersivaUI)
            },
            pantallaDeCargaSuperPuesta: (metadatos) => {
                try {

                    const instanciaUID = metadatos.instanciaUID
                    const mensaje = metadatos.mensaje ? metadatos.mensaje : "Espere..."
                    const botonCancelar = metadatos.botonCancelar ? metadatos.botoCancelar : "mostrar"
                    const identificadorVisual = metadatos.identificadorVisual
                    const iconoSpinner = metadatos.iconoSpinner ? metadatos.iconoSpinner : "si"
                    const textoBoton = metadatos.textoBoton ? metadatos.textoBoton : "Cancelar"

                    const advertenciaInmersivaUI = document.createElement("div")
                    advertenciaInmersivaUI.setAttribute("class", "advertenciaInmersivaSuperpuesta")
                    advertenciaInmersivaUI.setAttribute("identificadorVisual", identificadorVisual)
                    advertenciaInmersivaUI.setAttribute("pantallaSuperpuesta", "pantallaCargaSuperpuesta")
                    advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")
                    advertenciaInmersivaUI.setAttribute("instanciaUID", instanciaUID)
                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElasticoCarga")
                    if (iconoSpinner === "si") {
                        const spinnerContainer = document.createElement('div');
                        spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                        spinnerContainer.classList.add("lds-spinner");
                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement('div');
                            spinnerContainer.appendChild(div);
                        }
                        marcoElastico.appendChild(spinnerContainer)
                    }
                    const info = document.createElement("div")
                    info.setAttribute("class", "advertenciaInfoFlujoPago")
                    info.setAttribute("componente", "mensajeFlujoPasarela")
                    info.textContent = mensaje
                    marcoElastico.appendChild(info)
                    const boton = document.createElement("div")
                    boton.setAttribute("class", "botonV1")
                    boton.setAttribute("componente", "botonV1")
                    boton.textContent = textoBoton
                    boton.addEventListener("click", (e) => {
                        document.body.style.removeProperty("overflow");
                        e.target.parentNode.parentNode.remove()
                    })
                    if (botonCancelar === "mostrar") {
                        marcoElastico.appendChild(boton)
                    }
                    advertenciaInmersivaUI.appendChild(marcoElastico)
                    document.querySelector("main").appendChild(advertenciaInmersivaUI)
                } catch (errorCapturado) {
                    casaVitini.ui.componentes.advertenciaInmersiva(errorCapturado.message)
                }
            },
            totales: (desgloseFinanciero) => {
                const totalesPorApartamento = desgloseFinanciero.totalesPorApartamento
                const totalesPorNoche = desgloseFinanciero.totalesPorNoche
                const totales = desgloseFinanciero.totales
                const desgloseImpuestos = desgloseFinanciero.impuestos
                const ofertas = desgloseFinanciero.ofertas
                const destino = desgloseFinanciero.destino
                const selectorDestino = document.querySelector(destino)
                if (!selectorDestino) {
                    const error = "Totales, no encuentra el elemento de destino. Revisa el identificador del elemento."
                    return casaVitini.ui.componentes.advertenciaInmersiva(error)
                }
                const simboloDescuento = {
                    porcentaje: "%",
                    cantidadFija: "$"
                }
                const contenedorDesgloseTotales = document.createElement("div")
                contenedorDesgloseTotales.classList.add(
                    "flexVertical",
                    "gap6"
                )
                const detallePorDiaUI = document.createElement("div")
                detallePorDiaUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const detalleDiaUITitulo = document.createElement("div")
                detalleDiaUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                detalleDiaUITitulo.textContent = "Detalle por noche"
                detallePorDiaUI.appendChild(detalleDiaUITitulo)
                const contenedorDesglosePorNoche = document.createElement("div")
                contenedorDesglosePorNoche.classList.add("reserva_resumen_desglose_porNoche")
                if (totalesPorNoche.length === 0) {
                    const info = document.createElement("div")
                    info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                    info.textContent = "No hay información financiera para desglosar por noche"
                    contenedorDesglosePorNoche.appendChild(info)
                }
                for (const detallePorNoche of totalesPorNoche) {
                    const fechaNoche = detallePorNoche.fechaDiaConNoche
                    const precioNetoNoche = detallePorNoche.precioNetoNoche
                    const apartamentosDetallesPorNoche = detallePorNoche.apartamentos
                    const apartamentoUI_ = document.createElement("div")
                    apartamentoUI_.classList.add("contenedorDiaConNoche")
                    const apartamentoUITitulo = document.createElement("div")
                    apartamentoUITitulo.classList.add("reserva_resumen_apartamentoIUTitulo")
                    apartamentoUITitulo.classList.add("negrita")
                    apartamentoUITitulo.textContent = fechaNoche
                    apartamentoUI_.appendChild(apartamentoUITitulo)
                    const totalNetoNocheUI = document.createElement("div")
                    totalNetoNocheUI.classList.add("reserva_resumen_apartamentoIUTitulo")
                    totalNetoNocheUI.classList.add("negrita")
                    totalNetoNocheUI.textContent = precioNetoNoche + "$ Total neto noche"
                    apartamentoUI_.appendChild(totalNetoNocheUI)
                    for (const detalleApartmentoPorNoche of apartamentosDetallesPorNoche) {
                        const apartamentoUI = detalleApartmentoPorNoche.apartamentoUI
                        const precioNetoPorNoche = detalleApartmentoPorNoche.precioNetoNoche
                        const detalleApartamentosUITitulo = document.createElement("div")
                        detalleApartamentosUITitulo.classList.add("reserva_resumen_apartamentoUIPrecio")
                        detalleApartamentosUITitulo.classList.add("negrita")
                        detalleApartamentosUITitulo.classList.add("colorGris")
                        detalleApartamentosUITitulo.textContent = apartamentoUI
                        apartamentoUI_.appendChild(detalleApartamentosUITitulo)
                        const detalleApartamentosUIPreciNetoNoche = document.createElement("div")
                        detalleApartamentosUIPreciNetoNoche.classList.add("reserva_resumen_apartamentoUIPrecio")
                        detalleApartamentosUIPreciNetoNoche.textContent = precioNetoPorNoche + "$ / Neto por noche"
                        apartamentoUI_.appendChild(detalleApartamentosUIPreciNetoNoche)
                    }
                    contenedorDesglosePorNoche.appendChild(apartamentoUI_)
                }
                detallePorDiaUI.appendChild(contenedorDesglosePorNoche)
                contenedorDesgloseTotales.appendChild(detallePorDiaUI)
                const contenedorTotalesPorApartamento = document.createElement("div")
                contenedorTotalesPorApartamento.classList.add("reserva_resumen_desglose_porNoche")
                const alojamientoUI = document.createElement("div")
                alojamientoUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const alojamientoUITitulo = document.createElement("div")
                alojamientoUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                alojamientoUITitulo.textContent = "Precio total neto por apartamento"
                alojamientoUI.appendChild(alojamientoUITitulo)
                if (totalesPorApartamento.length === 0) {
                    const info = document.createElement("div")
                    info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                    info.textContent = "No hay información financiera para desglosar por apartamento"
                    alojamientoUI.appendChild(info)
                }
                for (const detalleDesglosePorApartamento of totalesPorApartamento) {
                    const apartamentoUI_ = detalleDesglosePorApartamento.apartamentoUI
                    const totalNetoApartamento = detalleDesglosePorApartamento.totalNetoRango
                    const precioNetoMedioPorNoche = detalleDesglosePorApartamento.precioMedioNocheRango
                    const apartamentoUI = document.createElement("div")
                    apartamentoUI.classList.add("contenedorApartamento")
                    const apartamentoUITitulo = document.createElement("div")
                    apartamentoUITitulo.classList.add("contenedorTextoOferta")
                    apartamentoUITitulo.classList.add("negrita")
                    apartamentoUITitulo.textContent = apartamentoUI_
                    apartamentoUI.appendChild(apartamentoUITitulo)
                    const apartamentoUIPrecioNetoTotal = document.createElement("div")
                    apartamentoUIPrecioNetoTotal.classList.add("textoDetallesPorApartamento")
                    apartamentoUIPrecioNetoTotal.textContent = "Total neto: " + totalNetoApartamento + "$"
                    apartamentoUI.appendChild(apartamentoUIPrecioNetoTotal)
                    const apartamentoUIPrecioPromedioPorNoche = document.createElement("div")
                    apartamentoUIPrecioPromedioPorNoche.classList.add("textoDetallesPorApartamento")
                    apartamentoUIPrecioPromedioPorNoche.textContent = "Precio medio neto por noche: " + precioNetoMedioPorNoche + "$"
                    apartamentoUI.appendChild(apartamentoUIPrecioPromedioPorNoche)
                    alojamientoUI.appendChild(apartamentoUI)
                }
                contenedorTotalesPorApartamento.appendChild(alojamientoUI)
                contenedorDesgloseTotales.appendChild(contenedorTotalesPorApartamento)
                let controlContenido = "noDesplegar"
                const ofertasUI = document.createElement("div")
                ofertasUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const ofertasUITitulo = document.createElement("div")
                ofertasUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                ofertasUITitulo.textContent = "Ofertas aplicadas"
                ofertasUI.appendChild(ofertasUITitulo)
                for (const oferta of ofertas) {
                    const porNumeroDeApartamentos = oferta.porNumeroDeApartamentos
                    const porApartamentosEspecificos = oferta.porApartamentosEspecificos
                    const porDiasDeReserva = oferta.porDiasDeReserva
                    const porRangoDeFechas = oferta.porRangoDeFechas
                    const porDiasDeAntelacion = oferta.porDiasDeAntelacion
                    if (porNumeroDeApartamentos?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detallesReserva of oferta.porNumeroDeApartamentos) {
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const cantidad = detallesReserva.cantidad
                            const tipoDescuento = detallesReserva.tipoDescuento
                            const definicion = detallesReserva.definicion
                            const nombreOferta = detallesReserva.nombreOferta
                            const descuento = detallesReserva.descuento
                            let nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionOfertaUI)
                            if (tipoDescuento === "porcentaje") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento del " + cantidad + simboloDescuento[tipoDescuento] + " rebajando el neto de la reserva en " + descuento + "$"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            if (tipoDescuento === "cantidadFija") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento del " + cantidad + simboloDescuento[tipoDescuento] + " sobre el neto de la reserva"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                    if (porApartamentosEspecificos?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detallesOferta of oferta.porApartamentosEspecificos) {
                            const nombreOferta = detallesOferta.nombreOferta
                            const cantidad = detallesOferta.cantidad
                            const tipoDescuento = detallesOferta.tipoDescuento
                            const definicion = detallesOferta.definicion
                            const descuentoOferta = detallesOferta.descuentoOferta
                            const descuentoAplicadoA = detallesOferta.descuentoAplicadoA
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionOfertaUI)
                            if (descuentoAplicadoA === "totalNetoApartamentoDedicado") {
                                const apartamentosEspecificos = detallesOferta.apartamentosEspecificos
                                const contenedorApartamentosEspecificos = document.createElement("div")
                                contenedorApartamentosEspecificos.classList.add("componentes_ui_totales_ofertas_apartamentosEspecificos_contenedor")
                                for (const detallesApartamento of apartamentosEspecificos) {
                                    const apartamentoIDV = detallesApartamento.apartamentoIDV
                                    const apartamentoUI = detallesApartamento.apartamentoUI
                                    const tipoDescuento = detallesApartamento.tipoDescuento
                                    const cantidad = detallesApartamento.cantidad
                                    const descuento = detallesApartamento.descuento
                                    const bloqueDetalleOferta = document.createElement("div")
                                    bloqueDetalleOferta.classList.add("resumen_reserva_detalle_oferta_apartamentos_especificos")
                                    const tituloApartamentoUI = document.createElement("div")
                                    tituloApartamentoUI.classList.add("negrita")
                                    tituloApartamentoUI.innerHTML = apartamentoUI
                                    bloqueDetalleOferta.appendChild(tituloApartamentoUI)
                                    const tipoDescuentoApartamentoUI = document.createElement("div")
                                    tipoDescuentoApartamentoUI.textContent = tipoDescuento

                                    const cantidadPorApartmento = document.createElement("div")
                                    cantidadPorApartmento.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                    bloqueDetalleOferta.appendChild(cantidadPorApartmento)
                                    contenedorApartamentosEspecificos.appendChild(bloqueDetalleOferta)
                                }
                                contenedorIndividualOferta.appendChild(contenedorApartamentosEspecificos)
                            }
                            if (descuentoAplicadoA === "totalNetoReserva") {
                                const descuentoOfertaUI = document.createElement("div")
                                descuentoOfertaUI.classList.add("contenedorTextoOferta")
                                descuentoOfertaUI.textContent = descuentoOferta
                                contenedorIndividualOferta.appendChild(descuentoOfertaUI)
                                if (tipoDescuento === "porcentaje") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                if (tipoDescuento === "cantidadFija") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                            }
                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                    if (porDiasDeReserva?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detatllesReserva of oferta.porDiasDeReserva) {
                            const cantidad = detatllesReserva.cantidad
                            const tipoDescuento = detatllesReserva.tipoDescuento
                            const nombreOferta = detatllesReserva.nombreOferta
                            const numero = detatllesReserva.numero
                            const simboloNumero = detatllesReserva.simboloNumero
                            const definicion = detatllesReserva.definicion
                            const descuento = detatllesReserva.descuento
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionUI = document.createElement("div")
                            definicionUI.classList.add("contenedorTextoOferta")
                            definicionUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionUI)
                            if (tipoDescuento === "porcentaje") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento] + " rebajando el neto de la reserva en " + descuento + "$"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            if (tipoDescuento === "cantidadFija") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion

                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                    if (porRangoDeFechas?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detallesOferta of oferta.porRangoDeFechas) {
                            const cantidad = detallesOferta.cantidad
                            const tipoDescuento = detallesOferta.tipoDescuento
                            const definicion = detallesOferta.definicion
                            const nombreOferta = detallesOferta.nombreOferta
                            const diasAfectados = detallesOferta.diasAfectados
                            const descuento = detallesOferta.descuento
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionOfertaUI)
                            const tipoDescuentoUI = document.createElement("div")
                            tipoDescuentoUI.classList.add("contenedorTextoOferta")
                            tipoDescuentoUI.textContent = "Descuento total de la oferta: " + descuento + "$"
                            contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            const contenedorDiasEspecificos = document.createElement("div")
                            contenedorDiasEspecificos.classList.add("componentes_ui_totales_ofertas_diasEspecificos_contenedor")
                            for (const detalleDelDia of diasAfectados) {
                                const dia = detalleDelDia.dia
                                const totaDiaNetoConOferta = detalleDelDia.totaDiaNetoConOferta
                                const descuento = detalleDelDia.descuento
                                const bloque = document.createElement("div")
                                bloque.classList.add("resumen_reserva_detalle_oferta_apartamentos_especificos")
                                const tituloUI = document.createElement("div")
                                tituloUI.classList.add("negrita")
                                tituloUI.innerHTML = dia
                                bloque.appendChild(tituloUI)
                                const totalSinOferta = document.createElement("div")
                                totalSinOferta.textContent = "Total día con oferta: " + totaDiaNetoConOferta + "$"
                                bloque.appendChild(totalSinOferta)
                                const totalConOferta = document.createElement("div")
                                totalConOferta.textContent = "Descuento: " + descuento + "$"
                                bloque.appendChild(totalConOferta)
                                contenedorDiasEspecificos.appendChild(bloque)
                            }
                            contenedorIndividualOferta.appendChild(contenedorDiasEspecificos)
                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                    if (porDiasDeAntelacion?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detallesOferta of oferta.porDiasDeAntelacion) {
                            const cantidad = detallesOferta.cantidad
                            const tipoDescuento = detallesOferta.tipoDescuento
                            const definicion = detallesOferta.definicion
                            const nombreOferta = detallesOferta.nombreOferta
                            const descuento = detallesOferta.descuento
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionOfertaUI)
                            if (tipoDescuento === "porcentaje") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento del " + cantidad + "% sobre el neto de la reserva."
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            if (tipoDescuento === "cantidadFija") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento de " + cantidad + "$ sobre el neto de la reserva"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                }
                if (controlContenido === "desplegar") {
                    contenedorDesgloseTotales.appendChild(ofertasUI)
                }


                const impuestoUI = document.createElement("div")
                impuestoUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const impuestoUITituloBloque = document.createElement("div")
                impuestoUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                impuestoUITituloBloque.textContent = "Impuestos"
                impuestoUI.appendChild(impuestoUITituloBloque)




                if (desgloseImpuestos.length === 0) {
                    const info = document.createElement("div")
                    info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                    info.textContent = "No hay información financiera sobre impuestos para mostrar"
                    impuestoUI.appendChild(info)
                }
                desgloseImpuestos.forEach((impuesto) => {
                    const impuestoTitulo = impuesto.nombreImpuesto
                    const tipoValor = impuesto.tipoValor
                    const tipoImpositivo = impuesto.tipoImpositivo
                    const calculoImpuestoPorcentaje = impuesto.calculoImpuestoPorcentaje
                    const impuestoUITitulo = document.createElement("div")
                    impuestoUITitulo.classList.add("reserva_resumen_desglose_pago_elemento")
                    const impuestoUITitulo_ = document.createElement("div")
                    impuestoUITitulo_.classList.add("reserva_resumen_apartamentoIUTitulo")
                    impuestoUITitulo_.classList.add("negrita")
                    impuestoUITitulo_.textContent = impuestoTitulo
                    impuestoUITitulo.appendChild(impuestoUITitulo_)
                    let simboloTipoImpuesto;
                    if (tipoValor === "porcentaje") {
                        simboloTipoImpuesto = "%";
                    }
                    if (tipoValor === "tasa") {
                        simboloTipoImpuesto = "$";
                    }
                    const impuestoUITipoImpositivo = document.createElement("div")
                    impuestoUITipoImpositivo.classList.add("reserva_resumen_impuestoUITipoImpositivo")
                    impuestoUITipoImpositivo.textContent = tipoImpositivo + simboloTipoImpuesto
                    impuestoUITitulo.appendChild(impuestoUITipoImpositivo)
                    const impuestoUITipoValor = document.createElement("div")
                    impuestoUITipoValor.classList.add("resumen_reserva_impuestoUITipoValor")
                    impuestoUITipoValor.textContent = tipoValor

                    if (calculoImpuestoPorcentaje) {
                        const impuestoUICalculoImpuestoPorcentaje = document.createElement("div")
                        impuestoUICalculoImpuestoPorcentaje.classList.add("resumen_reserva_impuestoUICalculoImpuestoPorcentaje")
                        impuestoUICalculoImpuestoPorcentaje.textContent = calculoImpuestoPorcentaje + "$"
                        impuestoUITitulo.appendChild(impuestoUICalculoImpuestoPorcentaje)
                    }
                    impuestoUI.appendChild(impuestoUITitulo)
                })


                if (desgloseImpuestos.length > 0) {
                    contenedorDesgloseTotales.appendChild(impuestoUI)
                }

                const totalesUI = document.createElement("div")
                totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const totalesUITituloBloque = document.createElement("div")
                totalesUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                totalesUITituloBloque.textContent = "Totales"
                totalesUI.appendChild(totalesUITituloBloque)
                const totalPromedioNetoPorNoche = totales.promedioNetoPorNoche ?
                    totales.promedioNetoPorNoche + "$" :
                    "No hay información del total promedio neto por noche";
                const totalReservaNeto = totales.totalReservaNeto ? totales.totalReservaNeto + "$" : "No hay información del total neto de la reserva"
                const totalImpuestos = totales.totalImpuestos ? totales.totalImpuestos + "$" : "No hay información del total de los impuestos"
                const totalDescuentos = totales.totalDescuentos ? totales.totalDescuentos + "$" : "No hay información del total desconectado."
                const totalReservaNetoSinDescuentos = totales.totalReservaNetoSinOfertas ? totales.totalReservaNetoSinOfertas + "$" : "No hay información del total de la reserva sin descuentos."
                if (totales.totalReservaNeto) {
                    const totalReservaNetoDiaUI = document.createElement("div")
                    totalReservaNetoDiaUI.classList.add("detalleDelTotal")
                    totalReservaNetoDiaUI.textContent = "Precio medio neto de la reserva por noche: " + totalPromedioNetoPorNoche

                    if (totales.totalDescuentos) {
                        const totalDescuentosAplicadosUI = document.createElement("div")
                        totalDescuentosAplicadosUI.classList.add("detalleDelTotal")
                        totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas: " + totalDescuentos
                        totalesUI.appendChild(totalDescuentosAplicadosUI)
                        const totalReservaNetoSinOfertasUI = document.createElement("div")
                        totalReservaNetoSinOfertasUI.classList.add("detalleDelTotal")
                        totalReservaNetoSinOfertasUI.textContent = "Total neto sin ofertas aplicadas: " + totalReservaNetoSinDescuentos
                        totalesUI.appendChild(totalReservaNetoSinOfertasUI)
                    }
                    const totalReservaNetoUI = document.createElement("div")
                    totalReservaNetoUI.classList.add("detalleDelTotal")
                    totalReservaNetoUI.textContent = "Total reserva neto: " + totalReservaNeto
                    totalesUI.appendChild(totalReservaNetoUI)
                    const totalImpuestosUI = document.createElement("div")
                    totalImpuestosUI.classList.add("detalleDelTotal")
                    totalImpuestosUI.textContent = "Total impuestos aplicados: " + totalImpuestos
                    totalesUI.appendChild(totalImpuestosUI)
                    const totalConImpuestosUI = document.createElement("div")
                    totalConImpuestosUI.classList.add("detalleDelTotal")
                    totalConImpuestosUI.classList.add("negrita")
                    totalConImpuestosUI.textContent = "Total final: " + totales.totalConImpuestos + "$"
                    totalesUI.appendChild(totalConImpuestosUI)
                } else {
                    const info = document.createElement("div")
                    info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                    info.textContent = "No hay información de totales"
                    totalesUI.appendChild(info)
                }
                contenedorDesgloseTotales.appendChild(totalesUI)
                selectorDestino.appendChild(contenedorDesgloseTotales)
            },
            pantallaInmersivaPersonalizada: (data) => {

                const alineacion = data?.alineacion
                document.body.style.overflow = 'hidden';
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const pantallaInmersivaPersonalizadaUI = document.createElement("div")
                pantallaInmersivaPersonalizadaUI.setAttribute("class", "advertenciaInmersiva")
                pantallaInmersivaPersonalizadaUI.setAttribute("componente", "advertenciaInmersiva")
                if (alineacion === "arriba") {
                    pantallaInmersivaPersonalizadaUI.classList.add("flextJustificacion_arriba")
                } else {
                    pantallaInmersivaPersonalizadaUI.classList.add("flextJustificacion_center")
                }
                pantallaInmersivaPersonalizadaUI.setAttribute("instanciaUID", instanciaUID)

                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                pantallaInmersivaPersonalizadaUI.appendChild(contenedorAdvertenciaInmersiva)

                const contenidoAdvertenciaInmersiva = document.createElement("div")
                contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("destino", "inyector")
                contenidoAdvertenciaInmersiva.setAttribute("componente", "contenedor")
                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)


                return pantallaInmersivaPersonalizadaUI
            },
            pantallaInmersivaPersonalizadaMoldeada: () => {
                document.body.style.overflow = 'hidden';
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const pantallaInmersivaPersonalizadaUI = document.createElement("div")
                pantallaInmersivaPersonalizadaUI.setAttribute("class", "advertenciaInmersiva")
                pantallaInmersivaPersonalizadaUI.setAttribute("componente", "advertenciaInmersiva")
                pantallaInmersivaPersonalizadaUI.setAttribute("instanciaUID", instanciaUID)
                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                const contenidoAdvertenciaInmersiva = document.createElement("div")
                contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("destino", "inyector")
                contenidoAdvertenciaInmersiva.setAttribute("componente", "constructor")

                const tituloUI = document.createElement("p")
                tituloUI.classList.add(
                    "tituloGris",
                    "textoCentrado"
                )
                tituloUI.setAttribute("componente", "titulo")
                contenidoAdvertenciaInmersiva.appendChild(tituloUI)


                const mensajeUI = document.createElement("div")
                mensajeUI.classList.add("mensajeUI")
                mensajeUI.setAttribute("componente", "mensajeUI")
                contenidoAdvertenciaInmersiva.appendChild(mensajeUI)

                const contenedorEspacio = document.createElement("div")
                contenedorEspacio.setAttribute("componente", "contenedor")
                contenidoAdvertenciaInmersiva.appendChild(contenedorEspacio)

                const botonAceptar = document.createElement("div")
                botonAceptar.classList.add("botonV1")
                botonAceptar.setAttribute("boton", "aceptar")
                contenidoAdvertenciaInmersiva.appendChild(botonAceptar)

                const botonCancelar = document.createElement("div")
                botonCancelar.classList.add("botonV1")
                botonCancelar.setAttribute("boton", "cancelar")
                botonCancelar.addEventListener("click", () => {
                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                })
                contenidoAdvertenciaInmersiva.appendChild(botonCancelar)

                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                pantallaInmersivaPersonalizadaUI.appendChild(contenedorAdvertenciaInmersiva)
                return pantallaInmersivaPersonalizadaUI
            },
            spinner: (data) => {
                const mensaje = data?.mensaje || ""
                const textoBoton = data?.textoBoton || "Ocultar"
                const visibilidadBoton = data?.visibilidadBoton || "si"

                const contenedorSpinner = document.createElement("div")
                contenedorSpinner.classList.add("contenedorSpinner")
                contenedorSpinner.setAttribute("componente", "spinnerListaDeEnlaces")
                contenedorSpinner.setAttribute("contenedor", "spinner")
                const spinnerContainer = document.createElement('div');
                spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                spinnerContainer.classList.add("lds-spinner");
                for (let i = 0; i < 12; i++) {
                    const div = document.createElement('div');
                    spinnerContainer.appendChild(div);
                }
                const info = document.createElement("div")
                info.setAttribute("class", "advertenciaInfoFlujoPago")
                info.setAttribute("componente", "mensajeFlujoPasarela")
                info.textContent = mensaje


                contenedorSpinner.appendChild(spinnerContainer)
                contenedorSpinner.appendChild(info)
                if (visibilidadBoton === "si") {
                    const botoCancelar = document.createElement("div")
                    botoCancelar.setAttribute("class", "botonV1AdvertenciaInmersiva")
                    botoCancelar.setAttribute("boton", "cancelar")
                    botoCancelar.textContent = textoBoton
                    botoCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                    contenedorSpinner.appendChild(botoCancelar)


                }


                return contenedorSpinner
            },
            spinnerSimple: () => {
                const contenedorSpinner = document.createElement("div")
                contenedorSpinner.classList.add("contenedorSpinner")
                contenedorSpinner.setAttribute("componente", "spinnerSimple")
                contenedorSpinner.setAttribute("contenedor", "spinner")
                const spinnerContainer = document.createElement('div');
                spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                spinnerContainer.classList.add("lds-spinner");
                for (let i = 0; i < 12; i++) {
                    const div = document.createElement('div');
                    spinnerContainer.appendChild(div);
                }
                contenedorSpinner.appendChild(spinnerContainer)
                return contenedorSpinner
            },
            mensajeSimple: (data) => {

                const titulo = data?.titulo
                const descripcion = data?.descripcion
                const mensajeUID = data?.mensajeUID || ""
                const mensajeUI_rendered = document.querySelector(`main [mensajeUID="${mensajeUID}]`)
                if (mensajeUI_rendered) {
                    return
                }
                const main = document.querySelector("main")

                main.removeAttribute("instanciaUID")
                main.innerHTML = null

                const contenedor = document.createElement("div")
                contenedor.classList.add("componentes_contenedor_mensajeSimple")
                contenedor.setAttribute("mensajeUID", mensajeUID)
                main.appendChild(contenedor)

                const contenedorIntermedio = document.createElement("div")
                contenedorIntermedio.classList.add("componentes_contenedor_contenedorIntermedio")
                contenedorIntermedio.setAttribute("espacio", "formularioCrearEnlaceDePago")

                const contenedorBloque = document.createElement("div")
                contenedorBloque.classList.add("componentes_contenedor_contenido")


                if (titulo) {
                    const tituloUI = document.createElement("div")
                    tituloUI.classList.add("componentes_contenedor_mensajeSimple_titulo")
                    tituloUI.classList.add("negrita")
                    tituloUI.textContent = titulo
                    contenedorBloque.appendChild(tituloUI)
                }

                if (descripcion) {
                    const descripcionUI = document.createElement("div")
                    descripcionUI.classList.add("mensajeDelError")
                    descripcionUI.textContent = descripcion
                    contenedorBloque.appendChild(descripcionUI)
                }

                contenedorIntermedio.appendChild(contenedorBloque)
                contenedor.appendChild(contenedorIntermedio)
            },
            iconoProceso: () => {
                const iconoProcesoDiv = document.createElement('div');
                iconoProcesoDiv.className = 'iconoProceso';
                iconoProcesoDiv.setAttribute("componente", "iconoProceso")
                for (let i = 0; i < 12; i++) {
                    const divInterno = document.createElement('div');
                    iconoProcesoDiv.appendChild(divInterno);
                }
                return iconoProcesoDiv;
            },
            calendario: {
                constructorCalendarioNuevo: (metadatos) => {
                    try {
                        const almacenamientoVolatilUID = metadatos.almacenamientoCalendarioID
                        if (!almacenamientoVolatilUID) {
                            const error = "El constructor del calendario, necesita un nombre para el almacenamiento volátil"
                            throw new Error(error)
                        }
                        const tipoFecha = metadatos.tipoFecha
                        if (!tipoFecha) {
                            const error = "El constructor del calendario, necesita un tipoFecha, ya sea entrada o salida"
                            throw new Error(error)
                        }
                        const calendarioIO = metadatos.calendarioIO
                        if (!calendarioIO) {
                            const error = "El constructor del calendario, necesita un calendarioIO, ya sea entrada o salida"
                            throw new Error(error)
                        }
                        const perfilMes = metadatos.perfilMes
                        if (!perfilMes) {
                            const error = "El constructor del calendario, necesita un perfilMes, consulte los perfiles en constructorMes"
                            throw new Error(error)
                        }
                        const mensajeInfo = metadatos.mensajeInfo
                        if (!mensajeInfo) {
                            const error = "El constructor del calendario, necesita un mensajeInfo, para informar de para que es este calendario"
                            throw new Error(error)
                        }
                        const alturaDinamica = metadatos.alturaDinamica
                        if (!alturaDinamica) {
                            const error = "El constructor del calendario necesita una altura dinámica para colorar el contenedor del calendario."
                            throw new Error(error)
                        }
                        const instanciaUID = metadatos.instanciaUID
                        if (!instanciaUID) {
                            const error = "El constructor del calendario necesita una instanciaUID para el contenedor del calendario"
                            throw new Error(error)
                        }
                        const instanciaUID_contenedorFechas = metadatos.instanciaUID_contenedorFechas
                        if (!instanciaUID_contenedorFechas) {
                            const error = "El constructor del calendario necesita una instanciaUID_contenedorFechas para calendario"
                            throw new Error(error)
                        }
                        const metodoSelectorDia = metadatos.metodoSelectorDia
                        if (!metodoSelectorDia) {
                            const error = "El constructor del calendario necesita un metodoSelectorDia para el contenedor del calendario"
                            throw new Error(error)
                        }
                        const seleccionableDiaLimite = metadatos.seleccionableDiaLimite || "si"

                        const calendario = document.createElement("div")
                        calendario.classList.add("calendarioNuevo")
                        calendario.setAttribute("campo", "calendario")
                        calendario.setAttribute("contenedor", "calendario")
                        calendario.setAttribute("componente", "marcoCalendario")
                        calendario.setAttribute("almacenamientoCalendarioID", almacenamientoVolatilUID)
                        calendario.setAttribute("tipoCalendario", tipoFecha)
                        calendario.setAttribute("calendarioIO", calendarioIO)
                        calendario.setAttribute("metodoSelectorDia", metodoSelectorDia)
                        calendario.setAttribute("seleccionableDiaLimite", seleccionableDiaLimite)
                        calendario.setAttribute("elemento", "flotante")
                        calendario.setAttribute("perfilMes", perfilMes)
                        calendario.setAttribute("IO", calendarioIO)


                        const botonCerrarCalResponsivo = document.createElement("div")
                        botonCerrarCalResponsivo.classList.add(
                            "padding10",
                            "borderRadius10",
                            "selectorRojo",
                            "flextJustificacion_center",
                            // "mostrarSoloEnResponsivo"
                        )
                        botonCerrarCalResponsivo.textContent = "Cerrar calendario"
                        botonCerrarCalResponsivo.setAttribute("elemento", "noFlotante")

                        botonCerrarCalResponsivo.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        calendario.appendChild(botonCerrarCalResponsivo)

                        const navegacionMes = document.createElement("nav")
                        navegacionMes.setAttribute("class", "navegacionMes")
                        calendario.appendChild(navegacionMes)

                        const botonNavegacionMesAtras = document.createElement("div")
                        botonNavegacionMesAtras.setAttribute("class", "botonNavegacionMes")
                        botonNavegacionMesAtras.setAttribute("id", "botonAtras")
                        botonNavegacionMesAtras.setAttribute("sentido", "atras")
                        botonNavegacionMesAtras.textContent = "Atrás"
                        botonNavegacionMesAtras.addEventListener("click", casaVitini.ui.componentes.calendario.navegacionCalendarioNuevo)
                        navegacionMes.appendChild(botonNavegacionMesAtras)
                        const navegacionMesReferencia = document.createElement("div")
                        navegacionMesReferencia.setAttribute("id", "navegacionMesReferencia")
                        navegacionMesReferencia.setAttribute("class", "navegacionMesReferencia")
                        navegacionMesReferencia.setAttribute("componente", "mesReferencia")
                        navegacionMes.appendChild(navegacionMesReferencia)
                        const botonNavegacionMesAdelante = document.createElement("div")
                        botonNavegacionMesAdelante.setAttribute("class", "botonNavegacionMes")
                        botonNavegacionMesAdelante.setAttribute("id", "botonAdelante")
                        botonNavegacionMesAdelante.textContent = "Adelante"
                        botonNavegacionMesAdelante.setAttribute("sentido", "adelante")
                        botonNavegacionMesAdelante.addEventListener("click", casaVitini.ui.componentes.calendario.navegacionCalendarioNuevo)
                        navegacionMes.appendChild(botonNavegacionMesAdelante)



                        const cartelInfoCalendarioEstado = document.createElement("div")
                        cartelInfoCalendarioEstado.setAttribute("class", "cartelInfoCalendarioEstado")
                        cartelInfoCalendarioEstado.setAttribute("componente", "infoCalendario")
                        cartelInfoCalendarioEstado.setAttribute("campo", "calendario")
                        cartelInfoCalendarioEstado.textContent = mensajeInfo
                        calendario.appendChild(cartelInfoCalendarioEstado)


                        const marcoMes = document.createElement("ol")
                        marcoMes.setAttribute("id", "marcoMes")
                        marcoMes.setAttribute("class", "marcoMes")
                        marcoMes.setAttribute("componente", "marcoMes")
                        marcoMes.style.gridTemplateRows = "min-content min-content"
                        marcoMes.style.flex = "0"
                        calendario.appendChild(marcoMes)
                        const pilaDias = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"]
                        for (const nombreDia of pilaDias) {
                            let diaSemana = document.createElement("li")
                            diaSemana.setAttribute("class", "nombreDia")
                            diaSemana.setAttribute("tipoNombreDia", "extendido")
                            diaSemana.textContent = nombreDia
                            marcoMes.appendChild(diaSemana)
                        }
                        const pilaDiasAbreviados = ["L", "M", "X", "J", "V", "S", "D"]
                        for (const nombreDia of pilaDiasAbreviados) {
                            let diaSemana = document.createElement("li")
                            diaSemana.setAttribute("class", "nombreDia")
                            diaSemana.setAttribute("tipoNombreDia", "abreviado")
                            diaSemana.textContent = nombreDia
                            marcoMes.appendChild(diaSemana)
                        }


                        const bloqueCalendario = document.createElement("div")
                        bloqueCalendario.classList.add(
                            "bloqueCalendarioNuevo",
                            "calendarioFlotante",
                            "sobreControlAnimacionGlobal"
                        )

                        const claseDinamica = document.createElement('style');
                        claseDinamica.innerHTML = `
                            .calendarioFlotante {
                                top: ${alturaDinamica - 40}px
                                }
                    
                        `;
                        bloqueCalendario.appendChild(claseDinamica);
                        bloqueCalendario.setAttribute("instanciaUID", instanciaUID)
                        bloqueCalendario.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                        bloqueCalendario.setAttribute("componente", "bloqueCalendario")


                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                        const contenedorCarga = document.createElement("div")
                        contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
                        contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                        contenedorCarga.setAttribute("elemento", "flotante")
                        contenedorCarga.appendChild(spinner)

                        calendario.appendChild(contenedorCarga)
                        bloqueCalendario.appendChild(calendario)
                        //document.querySelector("main").appendChild(bloqueCalendario)
                        return bloqueCalendario

                    } catch (errorCapturado) {
                        throw errorCapturado
                    }
                },
                configurarCalendario: async (data) => {
                    const metodoAlternativo = data.metodoAlternativo
                    const instanciaUID_contenedorFechas = data.instanciaUID_contenedorFechas
                    const contenedorOrigenIDV = data.contenedorOrigenIDV
                    const perfilMes = data.perfilMes
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const metodoSelectorDia = data?.metodoSelectorDia || "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                    const areaContenedorFechas = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)
                    const rangoIDV = data.rangoIDV
                    const seleccionableDiaLimite = data.seleccionableDiaLimite
                    if (seleccionableDiaLimite !== "si" && seleccionableDiaLimite !== "no" && rangoIDV !== "unico") {
                        const m = "configurarCalendario necesita selecioanbleDiaLimite en si o no"
                        return casaVitini.ui.componentes.advertenciaInmersiva(m)
                    }

                    const contenedorOrigen = areaContenedorFechas.querySelector(contenedorOrigenIDV)
                    const alturaDinamicaArriba = casaVitini.utilidades.observador.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(contenedorOrigen) + 16
                    const selectorCalendario = document.querySelector("[contenedor=calendario]")
                    const calendarioObsoleto = selectorCalendario?.getAttribute("calendarioIO")

                    const dictConfIDV = {
                        inicioRango: "entrada",
                        finalRango: "salida",
                        unico: "unico"
                    }

                    const bloqueCalendario = document.querySelectorAll("[componente=bloqueCalendario]")
                    bloqueCalendario.forEach((calendarioObsoelto) => {
                        calendarioObsoelto.remove()
                    })
                    if (calendarioObsoleto === dictConfIDV[rangoIDV]) {
                        return
                    }

                    const calendarioUI = casaVitini.ui.componentes.calendario.constructorCalendarioNuevo({
                        almacenamientoCalendarioID: "almacenamientoCalendario",
                        perfilMes,
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID,
                        instanciaUID_contenedorFechas,
                        metodoAlternativo,
                        metodoSelectorDia,
                        seleccionableDiaLimite,
                        mensajeInfo: "Cargando...",
                        tipoFecha: "enEspera",
                        calendarioIO: "enEspera"
                    })
                    document.querySelector("main").appendChild(calendarioUI)
                    document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                    const configGlobal = calendarioUI.querySelector("[contenedor=calendario]")

                    const fechasSeleccionadas = () => {
                        const fechaEntradaVolatil = areaContenedorFechas.querySelector("[calendario=entrada]").
                            getAttribute("memoriaVolatil")
                        const fechaEntradaAarray = fechaEntradaVolatil?.split("-") ? fechaEntradaVolatil?.split("-") : []
                        const diaSeleccionadoEntrada = Number(fechaEntradaAarray[2])
                        const mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                        const anoSeleccionadoEntrada = Number(fechaEntradaAarray[0])

                        const fechaSalidaVolatil = areaContenedorFechas.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                        const fechaSaliraArray = fechaSalidaVolatil?.split("-") ? fechaSalidaVolatil?.split("-") : []
                        const diaSeleccionadoSalida = Number(fechaSaliraArray[2])
                        const mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                        const anoSeleccionadoSalida = Number(fechaSaliraArray[0])

                        const contenedorFechas = {
                            fechaEntrada: {
                                volatil: fechaEntradaVolatil,
                                dia: diaSeleccionadoEntrada,
                                mes: mesSeleccionadoEntrada,
                                ano: anoSeleccionadoEntrada
                            },
                            fechaSalida: {
                                volatil: fechaSalidaVolatil,
                                dia: diaSeleccionadoSalida,
                                mes: mesSeleccionadoSalida,
                                ano: anoSeleccionadoSalida
                            }
                        }
                        return contenedorFechas
                    }
                    const resolverCalendario = {}
                    if (rangoIDV === "inicioRango") {
                        const tituloCalendario = data?.tituloCalendario || "Selecciona una fecha"


                        if (fechasSeleccionadas().fechaEntrada?.volatil) {
                            resolverCalendario.tipo = "personalizado"
                            resolverCalendario.mes = Number(fechasSeleccionadas().fechaEntrada.mes)
                            resolverCalendario.ano = Number(fechasSeleccionadas().fechaEntrada.ano)

                            configGlobal.setAttribute("tipoFecha", "entrada")
                            configGlobal.setAttribute("calendarioIO", "entrada")
                            configGlobal.querySelector("[componente=infoCalendario]").textContent = tituloCalendario

                        } else if (fechasSeleccionadas().fechaSalida?.volatil) {
                            if (seleccionableDiaLimite === "no") {

                                const diaSel = Number(fechasSeleccionadas().fechaSalida.dia)

                                if (1 === diaSel) {
                                    const mesSel = Number(fechasSeleccionadas().fechaSalida.mes)
                                    const anoSel = Number(fechasSeleccionadas().fechaSalida.ano)
                                    const mesFinal = mesSel === 1 ? 12 : mesSel - 1
                                    const anoFinal = mesFinal === 12 ? anoSel - 1 : anoSel
                                    resolverCalendario.mes = Number(mesFinal)
                                    resolverCalendario.ano = Number(anoFinal)
                                } else {
                                    resolverCalendario.mes = Number(fechasSeleccionadas().fechaSalida.mes)
                                    resolverCalendario.ano = Number(fechasSeleccionadas().fechaSalida.ano)
                                }
                            } else {
                                resolverCalendario.mes = Number(fechasSeleccionadas().fechaSalida.mes)
                                resolverCalendario.ano = Number(fechasSeleccionadas().fechaSalida.ano)
                            }

                            resolverCalendario.tipo = "personalizado"
                            configGlobal.setAttribute("tipoFecha", "entrada")
                            configGlobal.setAttribute("calendarioIO", "entrada")
                            configGlobal.querySelector("[componente=infoCalendario]").textContent = tituloCalendario

                        } else {
                            resolverCalendario.tipo = "actual"
                            configGlobal.setAttribute("tipoFecha", "entrada")
                            configGlobal.setAttribute("calendarioIO", "entrada")
                            configGlobal.querySelector("[componente=infoCalendario]").textContent = tituloCalendario

                        }
                    } else if (rangoIDV === "finalRango") {

                        const tituloCalendario = data?.tituloCalendario || "Selecciona una fecha"
                        if (fechasSeleccionadas().fechaSalida?.volatil) {
                            resolverCalendario.tipo = "personalizado"

                            resolverCalendario.mes = Number(fechasSeleccionadas().fechaSalida.mes)
                            resolverCalendario.ano = Number(fechasSeleccionadas().fechaSalida.ano)

                            configGlobal.setAttribute("tipoFecha", "salida")
                            configGlobal.setAttribute("calendarioIO", "salida")
                            configGlobal.querySelector("[componente=infoCalendario]").textContent = tituloCalendario


                        } else if (fechasSeleccionadas().fechaEntrada?.volatil) {
                            if (seleccionableDiaLimite === "no") {
                                const mesInicial = Number(fechasSeleccionadas().fechaEntrada.mes)
                                const anoInicial = Number(fechasSeleccionadas().fechaEntrada.ano)
                                const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo({
                                    tipo: "personalizado",
                                    mes: mesInicial,
                                    ano: anoInicial
                                })
                                const numeroDiasPorMes = calendarioResuelto.numeroDiasPorMes
                                if (numeroDiasPorMes === Number(fechasSeleccionadas().fechaEntrada.dia)) {
                                    const mesFinal = mesInicial < 12 ? mesInicial + 1 : 1
                                    const anoFinal = mesFinal === 1 ? anoInicial + 1 : anoInicial

                                    resolverCalendario.mes = mesFinal
                                    resolverCalendario.ano = anoFinal
                                } else {
                                    resolverCalendario.mes = Number(fechasSeleccionadas().fechaEntrada.mes)
                                    resolverCalendario.ano = Number(fechasSeleccionadas().fechaEntrada.ano)
                                }
                            } else {
                                resolverCalendario.mes = Number(fechasSeleccionadas().fechaEntrada.mes)
                                resolverCalendario.ano = Number(fechasSeleccionadas().fechaEntrada.ano)
                            }

                            resolverCalendario.tipo = "personalizado"

                            configGlobal.setAttribute("tipoFecha", "salida")
                            configGlobal.setAttribute("calendarioIO", "salida")
                            configGlobal.querySelector("[componente=infoCalendario]").textContent = tituloCalendario
                        } else {
                            resolverCalendario.tipo = "actual"

                            configGlobal.setAttribute("tipoFecha", "salida")
                            configGlobal.setAttribute("calendarioIO", "salida")
                            configGlobal.querySelector("[componente=infoCalendario]").textContent = tituloCalendario

                        }
                    } else if (rangoIDV === "unico") {
                        const tituloCalendario = data?.tituloCalendario || "Selecciona una fecha"
                        const fechaUnica = areaContenedorFechas.querySelector("[calendario=unico]").getAttribute("memoriaVolatil") | []

                        const diaSeleccionado = Number(fechaUnica[2])
                        const mesSeleccionado = Number(fechaUnica[1])
                        const anoSeleccionado = Number(fechaUnica[0])

                        if (fechaUnica) {
                            resolverCalendario.tipo = "personalizado"


                            resolverCalendario.mes = Number(mesSeleccionado)
                            resolverCalendario.ano = Number(anoSeleccionado)


                            configGlobal.setAttribute("tipoFecha", "unico")
                            configGlobal.setAttribute("calendarioIO", "unico")
                            configGlobal.querySelector("[componente=infoCalendario]").textContent = tituloCalendario
                        } else {
                            resolverCalendario.tipo = "actual"

                            configGlobal.setAttribute("tipoFecha", "unico")
                            configGlobal.setAttribute("calendarioIO", "unico")
                            configGlobal.querySelector("[componente=infoCalendario]").textContent = tituloCalendario
                        }
                    } else {
                        const m = "configurarCalendario no reconoce el rango, puede ser inicioRango, finalRango o unico"
                        return casaVitini.ui.componentes.advertenciaInmersiva(m)
                    }
                    const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolverCalendario)
                    calendarioResuelto.origen = "configuracionCalendario"
                    calendarioResuelto.instanciaUID = instanciaUID
                    calendarioResuelto.instanciaUID_contenedorFechas = instanciaUID_contenedorFechas
                    await casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                },
                constructorCalendarioIncrustado: (metadatos) => {
                    try {
                        const almacenamientoVolatilUID = metadatos.almacenamientoCalendarioID
                        if (!almacenamientoVolatilUID) {
                            const error = "El constructor del calendario, necesita un nombre para el almacenamiento volatil"
                            throw new Error(error)
                        }
                        const tipoFecha = metadatos.tipoFecha
                        if (!tipoFecha) {
                            const error = "El constructor del calendario, necesita un tipoFecha, ya sea entrada o salida"
                            throw new Error(error)
                        }
                        const calendarioIO = metadatos.calendarioIO
                        if (!calendarioIO) {
                            const error = "El constructor del calendario, necesita un calendarioIO, ya sea entrada o salida"
                            throw new Error(error)
                        }
                        const perfilMes = metadatos.perfilMes
                        if (!perfilMes) {
                            const error = "El constructor del calendario, necesita un perfilMes, consulte los perfiles en constructorMes"
                            throw new Error(error)
                        }
                        const mensajeInfo = metadatos.mensajeInfo
                        if (!mensajeInfo) {
                            const error = "El constructor del calendario, necesita un mensajeInfo, para informar de para que es este calendario"
                            throw new Error(error)
                        }
                        const alturaDinamica = metadatos.alturaDinamica
                        if (!alturaDinamica) {
                            const error = "EEl constructor del calendario necesita una altura dinamica para colora el contenedor del calendario"
                            throw new Error(error)
                        }
                        const instanciaUID = metadatos.instanciaUID
                        if (!instanciaUID) {
                            const error = "El constructor del calendario necesita una instanciaUID para el contenedor del calendario"
                            throw new Error(error)
                        }
                        const metodoSelectorDia = metadatos.metodoSelectorDia
                        if (!metodoSelectorDia) {
                            const error = "El constructor del calendario necesita un metodoSelectorDia para el contenedor del calendario"
                            throw new Error(error)
                        }
                        const calendario = document.createElement("div")
                        calendario.setAttribute("class", "calendarioIncrustado")
                        calendario.setAttribute("campo", "calendario")
                        calendario.setAttribute("contenedor", "calendario")
                        calendario.setAttribute("componente", "marcoCalendario")
                        calendario.setAttribute("almacenamientoCalendarioID", almacenamientoVolatilUID)
                        calendario.setAttribute("tipoCalendario", tipoFecha)
                        calendario.setAttribute("calendarioIO", calendarioIO)
                        calendario.setAttribute("metodoSelectorDia", metodoSelectorDia)
                        calendario.setAttribute("elemento", "flotante")
                        calendario.setAttribute("perfilMes", perfilMes)
                        calendario.setAttribute("IO", calendarioIO)
                        calendario.style.display = "none"
                        const cartelInfoCalendarioEstado = document.createElement("div")
                        cartelInfoCalendarioEstado.setAttribute("class", "cartelInfoCalendarioEstado")
                        cartelInfoCalendarioEstado.setAttribute("componente", "infoCalendario")
                        cartelInfoCalendarioEstado.setAttribute("campo", "calendario")
                        cartelInfoCalendarioEstado.textContent = mensajeInfo
                        const navegacionMes = document.createElement("nav")
                        navegacionMes.setAttribute("class", "navegacionMes")
                        calendario.appendChild(navegacionMes)
                        calendario.appendChild(cartelInfoCalendarioEstado)
                        const botonNavegacionMesAtras = document.createElement("div")
                        botonNavegacionMesAtras.setAttribute("class", "botonNavegacionMes")
                        botonNavegacionMesAtras.setAttribute("id", "botonAtras")
                        botonNavegacionMesAtras.setAttribute("sentido", "atras")
                        botonNavegacionMesAtras.textContent = "Atrás"
                        botonNavegacionMesAtras.addEventListener("click", casaVitini.ui.componentes.calendario.navegacionCalendarioNuevo)
                        navegacionMes.appendChild(botonNavegacionMesAtras)
                        const navegacionMesReferencia = document.createElement("div")
                        navegacionMesReferencia.setAttribute("id", "navegacionMesReferencia")
                        navegacionMesReferencia.setAttribute("class", "navegacionMesReferencia")
                        navegacionMesReferencia.setAttribute("componente", "mesReferencia")
                        navegacionMes.appendChild(navegacionMesReferencia)
                        const botonNavegacionMesAdelante = document.createElement("div")
                        botonNavegacionMesAdelante.setAttribute("class", "botonNavegacionMes")
                        botonNavegacionMesAdelante.setAttribute("id", "botonAdelante")
                        botonNavegacionMesAdelante.textContent = "Adelante"
                        botonNavegacionMesAdelante.setAttribute("sentido", "adelante")
                        botonNavegacionMesAdelante.addEventListener("click", casaVitini.ui.componentes.calendario.navegacionCalendarioNuevo)
                        navegacionMes.appendChild(botonNavegacionMesAdelante)
                        const marcoMes = document.createElement("ol")
                        marcoMes.setAttribute("id", "marcoMes")
                        marcoMes.setAttribute("class", "marcoMes")
                        marcoMes.setAttribute("componente", "marcoMes")
                        calendario.appendChild(marcoMes)
                        const pilaDias = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"]
                        for (const nombreDia of pilaDias) {
                            let diaSemana = document.createElement("li")
                            diaSemana.classList.add("nombreDia")
                            diaSemana.setAttribute("tipoNombreDia", "extendido")
                            diaSemana.textContent = nombreDia
                            marcoMes.appendChild(diaSemana)
                        }
                        const pilaDiasAbreviados = ["L", "M", "X", "J", "V", "S", "D"]
                        for (const nombreDia of pilaDiasAbreviados) {
                            let diaSemana = document.createElement("li")
                            diaSemana.classList.add("class", "nombreDia")
                            diaSemana.setAttribute("tipoNombreDia", "abreviado")
                            diaSemana.textContent = nombreDia
                            marcoMes.appendChild(diaSemana)
                        }
                        const seccion = document.querySelector("section:not([estado=obsoleto])")
                        const bloqueCalendario = document.createElement("div")
                        bloqueCalendario.setAttribute("class", "bloqueCalendarioNuevo")

                        bloqueCalendario.setAttribute("componente", "bloqueCalendario")
                        bloqueCalendario.style.top = alturaDinamica + "px"
                        const contenedoCalendarioIntermedio = document.createElement("div")
                        contenedoCalendarioIntermedio.setAttribute("instanciaUID", instanciaUID)


                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                        const contenedorCarga = document.createElement("div")
                        contenedorCarga.classList.add("componente_calendario_contenedoCarga_calendarioIncrustado")
                        contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                        contenedorCarga.setAttribute("elemento", "flotante")
                        contenedorCarga.appendChild(spinner)
                        contenedoCalendarioIntermedio.appendChild(calendario)
                        contenedoCalendarioIntermedio.appendChild(contenedorCarga)
                        return contenedoCalendarioIntermedio

                    } catch (errorCapturado) {
                        throw errorCapturado
                    }
                },
                constructorMesNuevo: async (calendario) => {
                    try {

                        const instanciaUID = calendario.instanciaUID
                        const instanciaUID_contenedorFechas = calendario.instanciaUID_contenedorFechas
                        const origen = calendario.origen
                        const selectorCalendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        const instanciaUID_procesoCambioMes = calendario.instanciaUID_procesoCambioMes

                        if (!selectorCalendarioRenderizado) {
                            return
                        }
                        const metodoSelectorDia = selectorCalendarioRenderizado.querySelector("[metodoSelectorDia]").getAttribute("metodoSelectorDia")
                        if (instanciaUID_procesoCambioMes) {
                            const selectorMarcoMesRenderizadoEnEspera = selectorCalendarioRenderizado
                                .querySelector(`[inctanciaUID_procesoCambioMes="${instanciaUID_procesoCambioMes}"]`)
                            if (!selectorMarcoMesRenderizadoEnEspera) {
                                return
                            }
                        }
                        const pasarelaX = (e) => {

                            return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                ruta: metodoSelectorDia,
                                args: e
                            })
                        }

                        const nombreMes = [
                            "Enero",
                            "Febrero",
                            "Marzo",
                            "Abrir",
                            "Mayo",
                            "Junio",
                            "Julio",
                            "Agost",
                            "Septiembre",
                            "Octubre",
                            "Noviembre",
                            "Diciembre"
                        ]
                        const nombreMesFinal = nombreMes[calendario.mes - 1]
                        const indicadorMesAno = nombreMesFinal + " " + calendario.ano
                        const navegacionMesReferencia = selectorCalendarioRenderizado.querySelector("[componente=mesReferencia]")
                        navegacionMesReferencia.textContent = indicadorMesAno
                        navegacionMesReferencia.setAttribute("ano", calendario.ano)
                        navegacionMesReferencia.setAttribute("mes", calendario.mes)
                        const infoCalendario = selectorCalendarioRenderizado.querySelector("[componente=infoCalendario]")
                        const posicionDia1 = calendario.posicionDia1
                        const numeroDiasPorMes = calendario.numeroDiasPorMes;

                        const diaActual_decimal = parseInt(calendario.dia, 10)
                        const marcoCalendario = selectorCalendarioRenderizado.querySelector("[componente=marcoCalendario]")

                        const tipoCalendario = marcoCalendario?.getAttribute("IO")
                        selectorCalendarioRenderizado.querySelectorAll("[dia]").forEach(diaObsoleto => {
                            diaObsoleto.remove()
                        });
                        const perfilMes = marcoCalendario?.getAttribute("perfilMes")
                        const controlDiasCompletos = {
                            zona: "componentes/diasOcupadosTotalmentePorMes",
                            mes: Number(calendario.mes),
                            ano: Number(calendario.ano)
                        }


                        const detallesDiasOcupacion = {}
                        if (instanciaUID_procesoCambioMes) {
                            const marcoMes = selectorCalendarioRenderizado.querySelector(`[componente=marcoCalendario] [componente=marcoMes][inctanciaUID_procesoCambioMes="${instanciaUID_procesoCambioMes}"]`)
                            if (!marcoMes) {
                                return
                            }
                        }
                        const marcoMes = selectorCalendarioRenderizado.querySelector(`[componente=marcoCalendario] [componente=marcoMes]`)
                        marcoMes.removeAttribute("style")




                        const valorDinamico = (data) => {

                            const numeroDiasPorMes = data.numeroDiasPorMes
                            const posicionDia1 = data.posicionDia1

                            const filasFuturoGrid = casaVitini.utilidades.calendarios.calcularNumeroSemanasDelMes({
                                posicionPrimerDiaSemana: posicionDia1,
                                numeroDiasPorMes: numeroDiasPorMes
                            })
                            const final = []
                            for (let index = 0; index < filasFuturoGrid + 1; index++) {
                                if (index === 0) {
                                    final.push("auto")
                                } else {
                                    final.push("1fr")
                                }
                            }
                            return final.join(" ")
                        }

                        marcoMes.style.gridTemplateRows = valorDinamico({
                            numeroDiasPorMes,
                            posicionDia1
                        })

                        if (perfilMes === "calendario_entrada_publico_sinPasado") {
                            let posicionDia1
                            let numeroDiasPorMes
                            let mesActual_decimal
                            let anoActual_decimal
                            let diaActual_decimal
                            let tiempo
                            const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                            const fechaEntradaSeleccionada = {}
                            if (fechaEntradaVolatil_Humana) {
                                const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("-")
                                fechaEntradaSeleccionada.dia = parseInt(fechaEntradaAarray[2], 10)
                                fechaEntradaSeleccionada.mes = parseInt(fechaEntradaAarray[1], 10)
                                fechaEntradaSeleccionada.ano = parseInt(fechaEntradaAarray[0], 10)
                            }
                            const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                            const fechaSalidaSeleccionada = {}
                            if (fechaSalidaVolatil_Humana) {
                                const fechaSaliraArray = fechaSalidaVolatil_Humana.split("-")
                                fechaSalidaSeleccionada.dia = parseInt(fechaSaliraArray[2], 10)
                                fechaSalidaSeleccionada.mes = parseInt(fechaSaliraArray[1], 10)
                                fechaSalidaSeleccionada.ano = parseInt(fechaSaliraArray[0], 10)
                            }

                            if (Object.keys(fechaEntradaSeleccionada).length === 0 && Object.keys(fechaSalidaSeleccionada).length === 0 && origen === "configuracionCalendario") {
                                const primeraFechaDisponible = calendario.limites.primeraFechaDisponible
                                const dia = primeraFechaDisponible.dia
                                const mes = primeraFechaDisponible.mes
                                const ano = primeraFechaDisponible.ano
                                const numeroDiasPorMes_disponible = primeraFechaDisponible.numeroDiasPorMes
                                const posicionDia1_disponible = primeraFechaDisponible.posicionDia1

                                posicionDia1 = posicionDia1_disponible
                                numeroDiasPorMes = numeroDiasPorMes_disponible;
                                diaActual_decimal = parseInt(calendario.dia, 10)
                                mesActual_decimal = mes
                                anoActual_decimal = ano
                                tiempo = primeraFechaDisponible.tiempo
                                marcoCalendario.setAttribute("primeraFechaDisponible", `${mes}-${ano}`)
                            } else {

                                posicionDia1 = calendario.posicionDia1
                                numeroDiasPorMes = calendario.numeroDiasPorMes;
                                diaActual_decimal = parseInt(calendario.dia, 10)
                                mesActual_decimal = parseInt(calendario.mes, 10)
                                anoActual_decimal = parseInt(calendario.ano, 10)
                                tiempo = calendario.tiempo
                            }

                            marcoMes.style.gridTemplateRows = valorDinamico({
                                numeroDiasPorMes,
                                posicionDia1
                            })


                            const nombreMesFinal = nombreMes[mesActual_decimal - 1]
                            const indicadorMesAno = nombreMesFinal + " " + anoActual_decimal
                            navegacionMesReferencia.textContent = indicadorMesAno
                            navegacionMesReferencia.setAttribute("ano", anoActual_decimal)
                            navegacionMesReferencia.setAttribute("mes", mesActual_decimal)


                            const limitesPublicos = calendario.limites
                            const diasAntelacion = limitesPublicos.diasAntelacion
                            const limiteFuturo = limitesPublicos.limiteFuturo
                            const diasMaximoReserva = limitesPublicos.diasMaximoReserva
                            marcoCalendario?.setAttribute("perfilMes", perfilMes)
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const fechaEntrada = `${fechaEntradaSeleccionada.ano}-${String(fechaEntradaSeleccionada.mes).padStart(2, "0")}-${String(fechaEntradaSeleccionada.dia).padStart(2, "0")}`
                            const fechaSalida = `${fechaSalidaSeleccionada.ano}-${String(fechaSalidaSeleccionada.mes).padStart(2, "0")}-${String(fechaSalidaSeleccionada.dia).padStart(2, "0")}`
                            const fechaLimitePorDiasDeDuracion = (fechaSeleccionada_ISO, diasMaximos) => {
                                const ok = {
                                    arbol: {},
                                    fecha: {}
                                }
                                if (fechaSeleccionada_ISO) {
                                    const fechaLimitePorSeleccion = new Date(fechaSeleccionada_ISO); // Asegúrate de que el formato de la fecha sea 'YYYY-MM-DD'

                                    const numeroDeDiasASumar = Number(diasMaximos);

                                    fechaLimitePorSeleccion.setDate(fechaLimitePorSeleccion.getDate() - numeroDeDiasASumar);
                                    const fechaAdelantada = fechaLimitePorSeleccion
                                    const dia = fechaLimitePorSeleccion.getDate();
                                    const mes = fechaLimitePorSeleccion.getMonth() + 1; // Los meses se indexan desde 0 (enero) a 11 (diciembre)
                                    const ano = fechaLimitePorSeleccion.getFullYear();

                                    ok.fecha.ano = ano
                                    ok.fecha.mes = mes
                                    ok.fecha.dia = dia
                                    ok.arbol[ano] = {
                                        [mes]: {
                                            [dia]: true
                                        }
                                    }
                                }
                                return ok
                            }
                            const objetoFechaLimitePorDias = fechaLimitePorDiasDeDuracion(fechaSalida, diasMaximoReserva)

                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                bloqueDia.addEventListener("click", pasarelaX)
                                if (tiempo === "presente") {
                                    if (diaFinal_decimal < diaActual_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (diasAntelacion[anoActual_decimal] &&
                                    diasAntelacion[anoActual_decimal][mesActual_decimal] &&
                                    diasAntelacion[anoActual_decimal][mesActual_decimal][diaFinal_decimal]) {
                                    bloqueDia.classList.add("calendarioDiaNoDisponiblePorAntelacion")
                                    bloqueDia.setAttribute("estadoDia", "noDisponible")
                                }
                                if (anoActual_decimal === limiteFuturo.ano && mesActual_decimal === limiteFuturo.mes) {
                                    if (diaFinal_decimal > limiteFuturo.dia) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (!Object.keys(fechaEntradaSeleccionada).length && !Object.keys(fechaSalidaSeleccionada).length) {
                                    if (tiempo === "presente") {
                                        if (diaActual_decimal <= diaFinal_decimal) {
                                            if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                            }
                                        }
                                    }
                                    if (tiempo === "futuro") {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                        }
                                    }
                                }
                                else if (Object.keys(fechaEntradaSeleccionada).length && Object.keys(fechaSalidaSeleccionada).length) {

                                    if (
                                        (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)
                                        &&
                                        (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano)
                                    ) {


                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia && diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        }
                                    } else if ((mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)) {


                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        //if (calendario.tiempo === "futuro") {
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        // }
                                    } else if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {

                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        }
                                    } else {
                                        if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        } else {
                                            if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            }
                                        }
                                    }

                                }
                                else if (Object.keys(fechaEntradaSeleccionada).length) {
                                    if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                        if (
                                            (
                                                diaFinal_decimal < fechaEntradaSeleccionada.dia
                                                ||
                                                diaFinal_decimal > fechaEntradaSeleccionada.dia
                                            ) &&
                                            bloqueDia.getAttribute("estadoDia") !== "noDisponible"
                                        ) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.removeAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                    } else {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.removeAttribute("estadoDia", "disponible")
                                        }
                                    }
                                }
                                else if (Object.keys(fechaSalidaSeleccionada).length) {
                                    if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {

                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        } else if (
                                            diaFinal_decimal < fechaSalidaSeleccionada.dia
                                            //&&
                                            //bloqueDia.getAttribute("estadoDia") !== "noDisponible"
                                        ) {

                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        } else if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        }
                                    } else {

                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {

                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    }

                                }
                                if (Object.keys(fechaSalidaSeleccionada).length > 0) {
                                    if (objetoFechaLimitePorDias.arbol[anoActual_decimal] &&
                                        objetoFechaLimitePorDias.arbol[anoActual_decimal][mesActual_decimal]) {
                                        const diaEntradaLimiteReserva = objetoFechaLimitePorDias.fecha.dia
                                        if (diaFinal_decimal < diaEntradaLimiteReserva) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                    }

                                }
                                if (tiempo === "presente" && diaActual_decimal === diaFinal_decimal) {
                                    bloqueDia.style.border = "3px solid white";
                                    bloqueDia.setAttribute("tipoDia", "hoy")
                                }
                                bloqueDia.textContent = diaFinal_decimal
                                marcoMes.appendChild(bloqueDia)
                            }
                            if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                let patronConsulta = `[dia='${fechaEntradaSeleccionada.dia}']`
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            const primeraFechaDisponible = marcoCalendario.getAttribute("primeraFechaDisponible")
                            const fechaActual = `${mesActual_decimal}-${anoActual_decimal}`


                            if (tiempo === "presente" || (fechaActual === primeraFechaDisponible)) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"

                                if ((mesActual_decimal >= limiteFuturo.mes) && (anoActual_decimal >= limiteFuturo.ano)) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                } else if (anoActual_decimal >= fechaSalidaSeleccionada.ano && mesActual_decimal >= fechaSalidaSeleccionada.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                }
                            } else if (tiempo === "futuro") {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                if (Object.keys(fechaSalidaSeleccionada).length > 0) {

                                    if (objetoFechaLimitePorDias.arbol[anoActual_decimal] &&
                                        objetoFechaLimitePorDias.arbol[anoActual_decimal][mesActual_decimal]) {

                                        selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                        selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                                        selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                        selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                    }


                                } if ((mesActual_decimal >= limiteFuturo.mes) && (anoActual_decimal >= limiteFuturo.ano)) {

                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"

                                } else if (anoActual_decimal >= fechaSalidaSeleccionada.ano && mesActual_decimal >= fechaSalidaSeleccionada.mes) {

                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                }
                            }
                        } else if (perfilMes === "calendario_salida_publico_sinPasado") {

                            let posicionDia1
                            let numeroDiasPorMes
                            let mesActual_decimal
                            let anoActual_decimal
                            let diaActual_decimal
                            let tiempo
                            const limitesPublicos = calendario.limites
                            const diasAntelacion = limitesPublicos.diasAntelacion

                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                            const fechaEntradaSeleccionada = {}
                            if (fechaEntradaVolatil_Humana) {
                                const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("-")
                                fechaEntradaSeleccionada.dia = parseInt(fechaEntradaAarray[2], 10)
                                fechaEntradaSeleccionada.mes = parseInt(fechaEntradaAarray[1], 10)
                                fechaEntradaSeleccionada.ano = parseInt(fechaEntradaAarray[0], 10)
                            }
                            const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                            const fechaSalidaSeleccionada = {}
                            if (fechaSalidaVolatil_Humana) {
                                const fechaSaliraArray = fechaSalidaVolatil_Humana.split("-")
                                fechaSalidaSeleccionada.dia = parseInt(fechaSaliraArray[2], 10)
                                fechaSalidaSeleccionada.mes = parseInt(fechaSaliraArray[1], 10)
                                fechaSalidaSeleccionada.ano = parseInt(fechaSaliraArray[0], 10)
                            }


                            const primeraFechaDisponible = calendario.limites.primeraFechaDisponible
                            const dia_dePrimeraFechaDisponible = primeraFechaDisponible.dia
                            const mes_dePrimeraFechaDisponible = primeraFechaDisponible.mes
                            const ano_dePrimeraFechaDisponible = primeraFechaDisponible.ano
                            const numeroDiasPorMes_dePrimeraFechaDisponible = primeraFechaDisponible.numeroDiasPorMes
                            const posicionDia1_dePrimeraFechaDisponible = primeraFechaDisponible.posicionDia1

                            if (Object.keys(fechaEntradaSeleccionada).length === 0 && Object.keys(fechaSalidaSeleccionada).length === 0 && origen === "configuracionCalendario") {

                                posicionDia1 = posicionDia1_dePrimeraFechaDisponible
                                numeroDiasPorMes = numeroDiasPorMes_dePrimeraFechaDisponible
                                diaActual_decimal = parseInt(calendario.dia, 10)
                                mesActual_decimal = mes_dePrimeraFechaDisponible
                                anoActual_decimal = ano_dePrimeraFechaDisponible
                                tiempo = primeraFechaDisponible.tiempo

                                const diaAdelantado = dia_dePrimeraFechaDisponible === numeroDiasPorMes ? 1 : dia_dePrimeraFechaDisponible + 1
                                const mesPasarela = diaAdelantado === 1 ? mesActual_decimal + 1 : mesActual_decimal
                                const mesAdelantado = mesPasarela === 13 ? 1 : mesPasarela
                                const anoAdelantado = mesAdelantado === 1 ? anoActual_decimal + 1 : anoActual_decimal
                                const estadoResolucion = mesAdelantado !== mesActual_decimal ? "resolver" : "noResolver"

                                if (estadoResolucion === "resolver") {
                                    const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo({
                                        tipo: "personalizado",
                                        mes: mesAdelantado,
                                        ano: anoAdelantado
                                    })
                                    tiempo = calendarioResuelto.tiempo
                                    diaActual_decimal = diaAdelantado
                                    mesActual_decimal = calendarioResuelto.mes
                                    anoActual_decimal = calendarioResuelto.ano
                                    numeroDiasPorMes = calendarioResuelto.numeroDiasPorMes
                                    posicionDia1 = calendarioResuelto.posicionDia1

                                }
                                marcoCalendario.setAttribute("primeraFechaDisponible", `${mesActual_decimal}-${anoActual_decimal}`)
                            } else {
                                posicionDia1 = calendario.posicionDia1
                                numeroDiasPorMes = calendario.numeroDiasPorMes;
                                diaActual_decimal = parseInt(calendario.dia, 10)
                                mesActual_decimal = parseInt(calendario.mes, 10)
                                anoActual_decimal = parseInt(calendario.ano, 10)
                                tiempo = calendario.tiempo
                            }

                            marcoMes.style.gridTemplateRows = valorDinamico({
                                numeroDiasPorMes,
                                posicionDia1
                            })



                            if (!diasAntelacion.hasOwnProperty(ano_dePrimeraFechaDisponible)) {
                                diasAntelacion[ano_dePrimeraFechaDisponible] = {}
                            }

                            if (!diasAntelacion[ano_dePrimeraFechaDisponible].hasOwnProperty(mes_dePrimeraFechaDisponible)) {
                                diasAntelacion[ano_dePrimeraFechaDisponible][mes_dePrimeraFechaDisponible] = {}
                            }

                            diasAntelacion[ano_dePrimeraFechaDisponible][mes_dePrimeraFechaDisponible][dia_dePrimeraFechaDisponible] = true

                            const nombreMesFinal = nombreMes[mesActual_decimal - 1]
                            const indicadorMesAno = nombreMesFinal + " " + anoActual_decimal
                            navegacionMesReferencia.textContent = indicadorMesAno
                            navegacionMesReferencia.setAttribute("ano", anoActual_decimal)
                            navegacionMesReferencia.setAttribute("mes", mesActual_decimal)


                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const fechaEntrada = `${fechaEntradaSeleccionada.ano}-${String(fechaEntradaSeleccionada.mes).padStart(2, "0")}-${String(fechaEntradaSeleccionada.dia).padStart(2, "0")}`
                            const fechaSalida = `${fechaSalidaSeleccionada.ano}-${String(fechaSalidaSeleccionada.mes).padStart(2, "0")}-${String(fechaSalidaSeleccionada.dia).padStart(2, "0")}`

                            const limiteFuturo = limitesPublicos.limiteFuturo
                            const diasMaximoReserva = limitesPublicos.diasMaximoReserva
                            const fechaActualPublica = calendario.fechaActualPublica
                            const fechaLimitePorDiasDeDuracion = (fechaSeleccionada_ISO, diasMaximos) => {

                                const ok = {
                                    arbol: {},
                                    fecha: {}
                                }

                                if (fechaSeleccionada_ISO) {
                                    const fechaLimitePorSeleccion = new Date(fechaSeleccionada_ISO); // Asegúrate de que el formato de la fecha sea 'YYYY-MM-DD'

                                    const numeroDeDiasASumar = Number(diasMaximos);

                                    fechaLimitePorSeleccion.setDate(fechaLimitePorSeleccion.getDate() + numeroDeDiasASumar);
                                    const fechaAdelantada = fechaLimitePorSeleccion
                                    const dia = fechaLimitePorSeleccion.getDate();
                                    const mes = fechaLimitePorSeleccion.getMonth() + 1; // Los meses se indexan desde 0 (enero) a 11 (diciembre)
                                    const ano = fechaLimitePorSeleccion.getFullYear();

                                    ok.fecha.ano = ano
                                    ok.fecha.mes = mes
                                    ok.fecha.dia = dia
                                    ok.arbol[ano] = {
                                        [mes]: {
                                            [dia]: true
                                        }
                                    }
                                }

                                return ok
                            }


                            const objetoFechaLimitePorDias = fechaLimitePorDiasDeDuracion(fechaEntrada, diasMaximoReserva)
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {


                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.classList.add("dia")
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                bloqueDia.addEventListener("click", pasarelaX)
                                if (tiempo === "presente") {
                                    if (diaFinal_decimal < diaActual_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (diasAntelacion[anoActual_decimal] &&
                                    diasAntelacion[anoActual_decimal][mesActual_decimal] &&
                                    diasAntelacion[anoActual_decimal][mesActual_decimal][diaFinal_decimal]) {
                                    bloqueDia.classList.add("calendarioDiaNoDisponible")
                                    bloqueDia.setAttribute("estadoDia", "noDisponible")
                                }
                                if (objetoFechaLimitePorDias.arbol[anoActual_decimal] &&
                                    objetoFechaLimitePorDias.arbol[anoActual_decimal][mesActual_decimal]) {
                                    const diaSalidaLimiteReserva = objetoFechaLimitePorDias.fecha.dia
                                    if (diaFinal_decimal > diaSalidaLimiteReserva) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (anoActual_decimal === limiteFuturo.ano && mesActual_decimal === limiteFuturo.mes) {
                                    if (diaFinal_decimal > limiteFuturo.dia) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (!Object.keys(fechaEntradaSeleccionada).length && !Object.keys(fechaSalidaSeleccionada).length) {
                                    if (tiempo === "presente") {
                                        if (diaActual_decimal <= diaFinal_decimal) {
                                            if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                            }
                                        }
                                    } else if (tiempo === "futuro") {

                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                        }
                                    }
                                } else if (Object.keys(fechaEntradaSeleccionada).length && Object.keys(fechaSalidaSeleccionada).length) {
                                    if (
                                        (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)
                                        &&
                                        (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano)
                                    ) {

                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.classList.remove("calendarioDiaNoDisponiblePorAntelacion")
                                            bloqueDia.classList.remove("calendarioDiaNoDisponible")

                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia && diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("destino", "1")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                    } else if ((mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)) {

                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {

                                            if (bloqueDia.getAttribute("estadoDia") === "noDisponible") {
                                            }
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (tiempo === "futuro") {
                                            if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {

                                            }
                                        }
                                    } else if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {

                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                    } else {

                                        if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                        } else {
                                            if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            }
                                        }
                                    }
                                }
                                else if (Object.keys(fechaEntradaSeleccionada).length) {
                                    if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.classList.remove("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        } else
                                            if (diaFinal_decimal > fechaEntradaSeleccionada.dia &&
                                                bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.setAttribute("estadoDia", "disponible")

                                            } else
                                                if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                                    bloqueDia.classList.add("calendarioDiaNoDisponible")
                                                    bloqueDia.setAttribute("estadoDia", "noDisponible")
                                                }
                                    } else {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                    }
                                }
                                else if (Object.keys(fechaSalidaSeleccionada).length) {
                                    if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")

                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                    } else {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                    }
                                }
                                if (tiempo === "presente" && diaActual_decimal === diaFinal_decimal) {
                                    bloqueDia.style.border = "3px solid white";
                                    bloqueDia.setAttribute("tipoDia", "hoy")
                                }
                                bloqueDia.textContent = diaFinal_decimal
                                marcoMes.appendChild(bloqueDia)
                            }

                            const primeraFechaDisponible_selector = marcoCalendario.getAttribute("primeraFechaDisponible")
                            const fechaActual = `${mesActual_decimal}-${anoActual_decimal}`

                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"

                            if (Object.keys(fechaEntradaSeleccionada).length) {

                                if (anoActual_decimal > fechaEntradaSeleccionada.ano) {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                } else if (anoActual_decimal === fechaEntradaSeleccionada.ano && mesActual_decimal > fechaEntradaSeleccionada.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                                }
                            } else if (tiempo === "presente" || (fechaActual === primeraFechaDisponible_selector)) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            } else if (tiempo === "futuro") {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            }

                            if (objetoFechaLimitePorDias.arbol[anoActual_decimal]
                                &&
                                (Object.keys(fechaEntradaSeleccionada).length)
                                &&
                                (objetoFechaLimitePorDias.arbol[anoActual_decimal][mesActual_decimal])
                            ) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            } else if (tiempo === "presente" || tiempo === "futuro") {
                                if (anoActual_decimal < limiteFuturo.ano) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                } else if (anoActual_decimal === limiteFuturo.ano && mesActual_decimal < limiteFuturo.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                }
                            }
                        } else if (perfilMes === "calendario_entrada_asistido_detallesReserva_conPasado") {
                            const mesActual_string = String(calendario.mes).padStart(2, '0');
                            const anoActual_string = String(calendario.ano).padStart(4, '0');
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const reservaUID = document.querySelector("[reservaUID]")?.getAttribute("reservaUID")
                            const fechaSalidaReservaArray = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil").split("-")
                            const diaSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[2], 10)
                            const mesSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[1], 10)
                            const anoSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[0], 10)

                            const fechaEntradaReserva = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil").split("-")
                            const diaEntradaReserva_decimal = parseInt(fechaEntradaReserva[2], 10)
                            const mesEntradaReserva_decimal = parseInt(fechaEntradaReserva[1], 10)
                            const anoEntradaReserva_decimal = parseInt(fechaEntradaReserva[0], 10)
                            const fechaEntrada = `${anoEntradaReserva_decimal}-${String(mesEntradaReserva_decimal).padStart(2, "0")}-${String(diaEntradaReserva_decimal).padStart(2, "0")}`
                            const fechaSalida = `${anoSalidaReserva_decimal}-${String(mesSalidaReserva_decimal).padStart(2, "0")}-${String(diaSalidaReserva_decimal).padStart(2, "0")}`
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const infoCalendario = selectorCalendarioRenderizado.querySelector("[componente=infoCalendario]")

                            const controlLimitePasado = {
                                zona: "administracion/reservas/detallesReserva/global/obtenerElasticidadDelRango",
                                reservaUID: String(reservaUID),
                                mesCalendario: mesActual_string,
                                anoCalendario: anoActual_string,
                                sentidoRango: "pasado"
                            }
                            const resolverLimitePasado = await casaVitini.shell.servidor(controlLimitePasado)
                            const fechaLimitePasado = {}

                            if (resolverLimitePasado.error) {
                                casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()
                                const selectorCalendarioRenderizados = document.querySelectorAll("[componente=bloqueCalendario]")
                                selectorCalendarioRenderizados.forEach((calendario) => {
                                    calendario.remove()
                                })
                                return casaVitini.ui.componentes.advertenciaInmersiva(resolverLimitePasado.error)
                            } else if (resolverLimitePasado.ok === "rangoPasadoLibre") {
                                infoCalendario.textContent = "Todo el mes disponible para seleccionar la nueva fecha de entrada de esta reserva"
                            } else if (resolverLimitePasado.limitePasado) {
                                const fechaLimitePasado_Array = resolverLimitePasado.limitePasado.split("-")
                                if (resolverLimitePasado.ok === "noHayRangoPasado") {
                                    infoCalendario.textContent = "La fecha de entrada de esta reserva no puede ser inferior a la actual porque no hay rango disponible."
                                    fechaLimitePasado.dia = parseInt(fechaLimitePasado_Array[2], 10)
                                    fechaLimitePasado.mes = parseInt(fechaLimitePasado_Array[1], 10)
                                    fechaLimitePasado.ano = parseInt(fechaLimitePasado_Array[0], 10)
                                }
                                if (resolverLimitePasado.ok === "rangoPasadoLimitado") {
                                    infoCalendario.textContent = "Una parte de este mes está disponible para seleccionar la nueva fecha de entrada para esta reserva."
                                    fechaLimitePasado.dia = parseInt(fechaLimitePasado_Array[2], 10)
                                    fechaLimitePasado.mes = parseInt(fechaLimitePasado_Array[1], 10)
                                    fechaLimitePasado.ano = parseInt(fechaLimitePasado_Array[0], 10)
                                }
                            } else if (resolverLimitePasado.tipo === "ROL") {
                                const selectorCalendarioRenderizados = document.querySelectorAll("[componente=bloqueCalendario]")
                                selectorCalendarioRenderizados.forEach((calendario) => {
                                    calendario?.remove()
                                })
                                return
                            }

                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)

                                if (resolverLimitePasado.limitePasado) {
                                    if (mesActual_decimal === fechaLimitePasado.mes && anoActual_decimal === fechaLimitePasado.ano) {
                                        if (fechaLimitePasado.dia === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                            bloqueDia.removeEventListener("click", pasarelaX)
                                        } else if (fechaLimitePasado.dia > diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                            bloqueDia.removeEventListener("click", pasarelaX)
                                        }
                                    }
                                }

                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (
                                    (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)
                                    &&
                                    (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                ) {

                                    if (diaFinal_decimal === diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.classList.remove("calendarioDiaNoDisponible")
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                    } else if (diaFinal_decimal < diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    } else if (diaFinal_decimal === diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.classList.remove("calendarioDiaNoDisponible")
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                    } else if (diaFinal_decimal > diaEntradaReserva_decimal && diaFinal_decimal < diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    } else if (diaFinal_decimal > diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                    }
                                } else if ((mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)) {

                                    if (diaFinal_decimal === diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.classList.remove("calendarioDiaNoDisponible")
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                    }
                                    if (diaFinal_decimal > diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal < diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                } else if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {

                                    if (diaFinal_decimal < diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal > diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                    }
                                    if (diaFinal_decimal === diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.classList.remove("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                    }
                                } else {

                                    if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                }

                                marcoMes.appendChild(bloqueDia)
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            }
                            if (mesActual_decimal === fechaLimitePasado.mes && anoActual_decimal === fechaLimitePasado.ano) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            }
                        } else if (perfilMes === "calendario_salida_asistido_detallesReserva_conPasado") {

                            const mesActual_string = String(calendario.mes).padStart(2, '0');
                            const anoActual_string = String(calendario.ano).padStart(4, '0');
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const reservaUID = document.querySelector("[reservaUID]")?.getAttribute("reservaUID")
                            const fechaSalidaReservaArray = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil").split("-")
                            const diaSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[2], 10)
                            const mesSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[1], 10)
                            const anoSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[0], 10)
                            const fechaEntradaReserva = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil").split("-")
                            const diaEntradaReserva_decimal = parseInt(fechaEntradaReserva[2], 10)
                            const mesEntradaReserva_decimal = parseInt(fechaEntradaReserva[1], 10)
                            const anoEntradaReserva_decimal = parseInt(fechaEntradaReserva[0], 10)
                            const fechaEntrada = `${anoEntradaReserva_decimal}-${String(mesEntradaReserva_decimal).padStart(2, "0")}-${String(diaEntradaReserva_decimal).padStart(2, "0")}`
                            const fechaSalida = `${anoSalidaReserva_decimal}-${String(mesSalidaReserva_decimal).padStart(2, "0")}-${String(diaSalidaReserva_decimal).padStart(2, "0")}`
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const controlLimiteFuturo = {
                                zona: "administracion/reservas/detallesReserva/global/obtenerElasticidadDelRango",
                                reservaUID: String(reservaUID),
                                mesCalendario: mesActual_string,
                                anoCalendario: anoActual_string,
                                sentidoRango: "futuro"
                            }
                            const resolverLimiteFuturo = await casaVitini.shell.servidor(controlLimiteFuturo)


                            if (resolverLimiteFuturo.error) {

                                const selectorCalendarioRenderizados = document.querySelectorAll("[componente=bloqueCalendario]")
                                selectorCalendarioRenderizados.forEach((calendario) => {
                                    calendario?.remove()
                                })
                                return casaVitini.ui.componentes.advertenciaInmersiva(resolverLimiteFuturo.error)
                            }
                            const fechaLimiteFuturo = {}
                            if (resolverLimiteFuturo.ok === "rangoFuturoLibre") {
                                infoCalendario.textContent = "Todo el mes disponible para seleccionar la nueva fecha de salida de esta reserva"
                            } else if (resolverLimiteFuturo.limiteFuturo) {
                                const fechaLimiteFuturo_Array = resolverLimiteFuturo.limiteFuturo.split("-")
                                if (resolverLimiteFuturo.ok === "noHayRangoFuturo") {
                                    infoCalendario.textContent = "La fecha de salida de esta reserva no puede ser superior a la actual por que no hay rango disponible"
                                    fechaLimiteFuturo.dia = parseInt(fechaLimiteFuturo_Array[2], 10)
                                    fechaLimiteFuturo.mes = parseInt(fechaLimiteFuturo_Array[1], 10)
                                    fechaLimiteFuturo.ano = parseInt(fechaLimiteFuturo_Array[0], 10)
                                }
                                if (resolverLimiteFuturo.ok === "rangoFuturoLimitado") {
                                    infoCalendario.textContent = "Una parte de este mes está disponible para seleccionar la nueva fecha de salida para esta reserva"
                                    fechaLimiteFuturo.dia = parseInt(fechaLimiteFuturo_Array[2], 10)
                                    fechaLimiteFuturo.mes = parseInt(fechaLimiteFuturo_Array[1], 10)
                                    fechaLimiteFuturo.ano = parseInt(fechaLimiteFuturo_Array[0], 10)
                                }
                            } else if (resolverLimiteFuturo.tipo === "ROL") {
                                const selectorCalendarioRenderizados = document.querySelectorAll("[componente=bloqueCalendario]")
                                selectorCalendarioRenderizados.forEach((calendario) => {
                                    calendario?.remove()
                                })
                                return
                            }
                            marcoCalendario?.setAttribute("perfilMes", perfilMes)




                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }

                                if (resolverLimiteFuturo.limiteFuturo) {
                                    if (mesActual_decimal === fechaLimiteFuturo.mes && anoActual_decimal === fechaLimiteFuturo.ano) {
                                        if (fechaLimiteFuturo.dia === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                            bloqueDia.removeEventListener("click", pasarelaX)
                                        } else
                                            if (fechaLimiteFuturo.dia < diaFinal_decimal) {
                                                bloqueDia.classList.remove("calendarioDiaDisponible")
                                                bloqueDia.classList.add("calendarioDiaNoDisponible")
                                                bloqueDia.style.pointerEvents = "none"
                                                bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                                bloqueDia.removeEventListener("click", pasarelaX)
                                            }
                                    }
                                }

                                if (
                                    (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)
                                    &&
                                    (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                ) {
                                    if (diaFinal_decimal === diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.classList.remove("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "S1 " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    } else if (diaFinal_decimal < diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    } else if (diaFinal_decimal === diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    } else if (diaFinal_decimal > diaEntradaReserva_decimal && diaFinal_decimal < diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    } else if (diaFinal_decimal > diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                } else if ((mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)) {

                                    if (diaFinal_decimal === diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.classList.remove("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                    if (diaFinal_decimal > diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal < diaEntradaReserva_decimal) {

                                        if (bloqueDia.getAttribute("estadoDia") === "noDisponible") {
                                        }
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (calendario.tiempo === "futuro") {
                                        if (diaFinal_decimal < diaEntradaReserva_decimal) {

                                        }
                                    }
                                } else if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {

                                    if (diaFinal_decimal < diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal > diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal === diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.classList.remove("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                } else {

                                    if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                }


                                // if (resolverLimiteFuturo.limiteFuturo) {
                                //     if (mesActual_decimal === fechaLimiteFuturo.mes && anoActual_decimal === fechaLimiteFuturo.ano) {
                                //         if (fechaLimiteFuturo.dia === diaFinal_decimal) {
                                //             bloqueDia.classList.remove("calendarioDiaDisponible")
                                //              bloqueDia.classList.add("calendarioDiaNoDisponible")
                                //             bloqueDia.style.pointerEvents = "none"
                                //             bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                //             bloqueDia.removeEventListener("click", pasarelaX)
                                //         } else
                                //             if (fechaLimiteFuturo.dia <= diaFinal_decimal) {
                                //             bloqueDia.classList.remove("calendarioDiaDisponible")
                                //             bloqueDia.classList.add("calendarioDiaNoDisponible")
                                //             bloqueDia.style.pointerEvents = "none"
                                //             bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                //             bloqueDia.removeEventListener("click", pasarelaX)
                                //         }
                                //     }
                                // }
                                marcoMes?.appendChild(bloqueDia)
                            }

                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            if (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            } else if (mesActual_decimal === fechaLimiteFuturo.mes && anoActual_decimal === fechaLimiteFuturo.ano) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            }
                        } else if (perfilMes === "calendario_entrada_asistido_detallesReserva_checkIn_conPasado") {
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const fechaCheckIN = document
                                .querySelector(`[instanciaUID="${instanciaUID}"]`)
                                .closest("[fechaCheckIn]")
                                ?.getAttribute("fechaCheckIn")
                            const fechaCheckOutAdelantado = document
                                .querySelector(`[instanciaUID="${instanciaUID}"]`)
                                .closest("[fechaCheckOut]")
                                ?.getAttribute("fechaCheckOut")
                            const fechaSalidaReservaArray = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil").split("-")
                            const diaSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[2], 10)
                            const mesSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[1], 10)
                            const anoSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[0], 10)
                            const fechaEntradaReserva = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil").split("-")
                            const diaEntradaReserva_decimal = parseInt(fechaEntradaReserva[2], 10)
                            const mesEntradaReserva_decimal = parseInt(fechaEntradaReserva[1], 10)
                            const anoEntradaReserva_decimal = parseInt(fechaEntradaReserva[0], 10)
                            const fechaEntrada = `${anoEntradaReserva_decimal}-${String(mesEntradaReserva_decimal).padStart(2, "0")}-${String(diaEntradaReserva_decimal).padStart(2, "0")}`
                            const fechaSalida = `${anoSalidaReserva_decimal}-${String(mesSalidaReserva_decimal).padStart(2, "0")}-${String(diaSalidaReserva_decimal).padStart(2, "0")}`
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"


                            if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            }
                            if (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            }
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = Number(numeroDia + 1);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                bloqueDia.style.pointerEvents = "none"
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                const mesEntradaRenderizado = (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)
                                const mesSalidaRenderzado = (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                const mesInternoRango = verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)
                                const mesEntradaSalidaRenderizado = (
                                    (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) &&
                                    (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                )
                                if (mesEntradaSalidaRenderizado) {
                                    if (diaEntradaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (diaEntradaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"

                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaEntradaReserva_decimal < diaFinal_decimal && diaSalidaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaSalidaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"

                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                    }
                                    if (diaSalidaReserva_decimal < diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                }
                                else if (mesEntradaRenderizado) {
                                    if (diaEntradaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (diaEntradaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")


                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)

                                    }
                                    if (diaEntradaReserva_decimal < diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                }
                                else if (mesSalidaRenderzado) {
                                    if (diaSalidaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaSalidaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                    }
                                    if (diaSalidaReserva_decimal < diaFinal_decimal) {

                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")


                                    }
                                }
                                else if (mesInternoRango) {
                                    bloqueDia.classList.add("calendarioDiaReserva")
                                    bloqueDia.style.pointerEvents = "all"
                                    bloqueDia.addEventListener("click", pasarelaX)
                                }
                                if (fechaCheckIN) {
                                    const fechaCheckIN_array = fechaCheckIN.split("-")
                                    const diaCheckIn = Number(fechaCheckIN_array[2])
                                    const mesCheckIn = Number(fechaCheckIN_array[1])
                                    const anoCheckIn = Number(fechaCheckIN_array[0])
                                    if (mesActual_decimal === mesCheckIn && anoActual_decimal === anoCheckIn) {
                                        if (diaCheckIn === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                    }
                                }
                                if (fechaCheckOutAdelantado) {
                                    const fechaCheckOutAdelantado_array = fechaCheckOutAdelantado.split("-")
                                    const diaCheckOut = Number(fechaCheckOutAdelantado_array[2])
                                    const mesCheckOut = Number(fechaCheckOutAdelantado_array[1])
                                    const anoCheckOut = Number(fechaCheckOutAdelantado_array[0])
                                    if (mesActual_decimal === mesCheckOut && anoActual_decimal === anoCheckOut) {
                                        if (diaCheckOut === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.textContent = "COa " + diaFinal_decimal
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                        if (diaCheckOut < diaFinal_decimal && diaSalidaReserva_decimal > diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        } else if (diaCheckOut < diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                        selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                        selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                    }
                                }
                                marcoMes.appendChild(bloqueDia)
                            }
                        } else if (perfilMes === "calendario_salida_asistido_detallesReserva_checkOut_conPasado") {
                            const mesActual_string = String(calendario.mes).padStart(2, '0');
                            const anoActual_string = String(calendario.ano).padStart(4, '0');
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const fechaCheckOut = document
                                .querySelector(`[instanciaUID="${instanciaUID}"]`)
                                .closest("[fechaCheckOut]")
                                ?.getAttribute("fechaCheckOut")
                            const fechaCheckIN = document
                                .querySelector(`[instanciaUID="${instanciaUID}"]`)
                                .closest("[fechaCheckIn]")
                                ?.getAttribute("fechaCheckIn")
                            const fechaSalidaReservaArray = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil").split("-")
                            const diaSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[2], 10)
                            const mesSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[1], 10)
                            const anoSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[0], 10)
                            const fechaEntradaReserva = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil").split("-")
                            const diaEntradaReserva_decimal = parseInt(fechaEntradaReserva[2], 10)
                            const mesEntradaReserva_decimal = parseInt(fechaEntradaReserva[1], 10)
                            const anoEntradaReserva_decimal = parseInt(fechaEntradaReserva[0], 10)
                            const fechaEntrada = `${anoEntradaReserva_decimal}-${String(mesEntradaReserva_decimal).padStart(2, "0")}-${String(diaEntradaReserva_decimal).padStart(2, "0")}`
                            const fechaSalida = `${anoSalidaReserva_decimal}-${String(mesSalidaReserva_decimal).padStart(2, "0")}-${String(diaSalidaReserva_decimal).padStart(2, "0")}`
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"


                            if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            }
                            if (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            }
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = Number(numeroDia + 1);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)

                                bloqueDia.style.pointerEvents = "none"
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                const mesEntradaRenderizado = (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)
                                const mesSalidaRenderzado = (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                const mesInternoRango = verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)
                                const mesEntradaSalidaRenderizado = (
                                    (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) &&
                                    (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                )
                                if (mesEntradaSalidaRenderizado) {

                                    if (diaEntradaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (diaEntradaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")


                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                    }
                                    if (diaEntradaReserva_decimal < diaFinal_decimal && diaSalidaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaSalidaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"

                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                    }
                                    if (diaSalidaReserva_decimal < diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                }
                                else if (mesEntradaRenderizado) {


                                    if (diaEntradaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (diaEntradaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")


                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "all"
                                    }
                                    if (diaEntradaReserva_decimal < diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                }
                                else if (mesSalidaRenderzado) {


                                    if (diaSalidaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaSalidaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                    }
                                    if (diaSalidaReserva_decimal < diaFinal_decimal) {

                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")


                                    }
                                }
                                else if (mesInternoRango) {


                                    bloqueDia.classList.add("calendarioDiaReserva")
                                    bloqueDia.style.pointerEvents = "all"
                                    bloqueDia.addEventListener("click", pasarelaX)
                                }
                                if (fechaCheckIN) {
                                    const fechaCheckIN_Array = fechaCheckIN.split("-")
                                    const diaCheckIn = Number(fechaCheckIN_Array[2])
                                    const mesCheckIn = Number(fechaCheckIN_Array[1])
                                    const anoCheckIn = Number(fechaCheckIN_Array[0])
                                    if (mesActual_decimal === mesCheckIn && anoActual_decimal === anoCheckIn) {
                                        if (diaCheckIn === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.textContent = "CI " + diaFinal_decimal
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                        if (diaCheckIn > diaFinal_decimal && diaEntradaReserva_decimal < diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        } else if (diaCheckIn > diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")

                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                        selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                        selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                                    }
                                }
                                if (fechaCheckOut) {
                                    const fechaCheckOut_array = fechaCheckOut.split("-")
                                    const diaCheckOut = Number(fechaCheckOut_array[2])
                                    const mesCheckOut = Number(fechaCheckOut_array[1])
                                    const anoCheckOut = Number(fechaCheckOut_array[0])
                                    if (mesActual_decimal === mesCheckOut && anoActual_decimal === anoCheckOut) {
                                        if (diaCheckOut === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                    }
                                }

                                marcoMes.appendChild(bloqueDia)
                            }
                        } else if (perfilMes === "calendario_entrada_perfilSimple") {
                            const contenedorFechas = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)
                            if (!contenedorFechas) {
                                const error = "El perfil de calendario_entrada_perfilSimple no encuentra el contenedor de fechas de destino"
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(error)

                            }
                            const seleccionableDiaLimite = marcoCalendario?.getAttribute("seleccionableDiaLimite")


                            const mesActual_string = String(calendario.mes).padStart(2, '0')
                            const anoActual_string = String(calendario.ano).padStart(4, '0')
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const fechaEntradaSelecionda = contenedorFechas.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                            const fechaEntradaSeleccionada = {}
                            if (fechaEntradaSelecionda) {
                                fechaEntradaSeleccionada.dia = parseInt(fechaEntradaSelecionda.split("-")[2], 10)
                                fechaEntradaSeleccionada.mes = parseInt(fechaEntradaSelecionda.split("-")[1], 10)
                                fechaEntradaSeleccionada.ano = parseInt(fechaEntradaSelecionda.split("-")[0], 10)
                            }
                            const fechaSalidaSelecionda = contenedorFechas.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")
                            const fechaSalidaSeleccionada = {}
                            if (fechaSalidaSelecionda) {
                                fechaSalidaSeleccionada.dia = parseInt(fechaSalidaSelecionda.split("-")[2], 10)
                                fechaSalidaSeleccionada.mes = parseInt(fechaSalidaSelecionda.split("-")[1], 10)
                                fechaSalidaSeleccionada.ano = parseInt(fechaSalidaSelecionda.split("-")[0], 10)
                            }
                            marcoCalendario?.setAttribute("perfilMes", perfilMes)
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const fechaEntrada = `${fechaEntradaSeleccionada.ano}-${String(fechaEntradaSeleccionada.mes).padStart(2, "0")}-${String(fechaEntradaSeleccionada.dia).padStart(2, "0")}`
                            const fechaSalida = `${fechaSalidaSeleccionada.ano}-${String(fechaSalidaSeleccionada.mes).padStart(2, "0")}-${String(fechaSalidaSeleccionada.dia).padStart(2, "0")}`
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (Object.keys(fechaEntradaSeleccionada).length && Object.keys(fechaSalidaSeleccionada).length) {
                                    if (
                                        (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)
                                        &&
                                        (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano)
                                    ) {

                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaReserva")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                                bloqueDia.setAttribute("estadoDia", "noDisponible")

                                            }
                                        } else if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        } else if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                        } else if (diaFinal_decimal > fechaEntradaSeleccionada.dia && diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        } else if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                    } else if ((mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)) {

                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)

                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {

                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        } else if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        } else if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaReserva")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                                bloqueDia.setAttribute("estadoDia", "noDisponible")

                                            }
                                        }
                                    } else {

                                        if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        } else {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    }
                                }
                                else if (Object.keys(fechaEntradaSeleccionada).length) {
                                    if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                        } else {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                }
                                else if (Object.keys(fechaSalidaSeleccionada).length) {
                                    if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                                bloqueDia.setAttribute("estadoDia", "noDisponible")

                                            }
                                        } else if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        } else if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                } else if (!Object.keys(fechaSalidaSeleccionada).length && !Object.keys(fechaEntradaSeleccionada).length) {
                                    if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                }
                                marcoMes?.appendChild(bloqueDia)
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            if (Object.keys(fechaSalidaSeleccionada).length) {
                                if (anoActual_decimal < fechaSalidaSeleccionada.ano) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                } else if (anoActual_decimal === fechaSalidaSeleccionada.ano && mesActual_decimal < fechaSalidaSeleccionada.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                }
                            } else {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            }
                        } else if (perfilMes === "calendario_salida_perfilSimple") {

                            const contenedorFechas = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)
                            if (!contenedorFechas) {
                                const error = "El perfil de calendario_salida_perfilSimple no encuentra el contenedor de fechas de destino"
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(error)

                            }

                            const seleccionableDiaLimite = marcoCalendario?.getAttribute("seleccionableDiaLimite")

                            const mesActual_string = String(calendario.mes).padStart(2, '0')
                            const anoActual_string = String(calendario.ano).padStart(4, '0')
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const fechaEntradaSelecionda = contenedorFechas.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                            const fechaEntradaSeleccionada = {}
                            if (fechaEntradaSelecionda) {
                                fechaEntradaSeleccionada.dia = parseInt(fechaEntradaSelecionda.split("-")[2], 10)
                                fechaEntradaSeleccionada.mes = parseInt(fechaEntradaSelecionda.split("-")[1], 10)
                                fechaEntradaSeleccionada.ano = parseInt(fechaEntradaSelecionda.split("-")[0], 10)
                            }
                            const fechaSalidaSelecionda = contenedorFechas.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")
                            const fechaSalidaSeleccionada = {}
                            if (fechaSalidaSelecionda) {
                                fechaSalidaSeleccionada.dia = parseInt(fechaSalidaSelecionda.split("-")[2], 10)
                                fechaSalidaSeleccionada.mes = parseInt(fechaSalidaSelecionda.split("-")[1], 10)
                                fechaSalidaSeleccionada.ano = parseInt(fechaSalidaSelecionda.split("-")[0], 10)
                            }
                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const fechaEntrada = `${fechaEntradaSeleccionada.ano}-${String(fechaEntradaSeleccionada.mes).padStart(2, "0")}-${String(fechaEntradaSeleccionada.dia).padStart(2, "0")}`
                            const fechaSalida = `${fechaSalidaSeleccionada.ano}-${String(fechaSalidaSeleccionada.mes).padStart(2, "0")}-${String(fechaSalidaSeleccionada.dia).padStart(2, "0")}`
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (Object.keys(fechaEntradaSeleccionada).length && Object.keys(fechaSalidaSeleccionada).length) {
                                    if ((mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)
                                        &&
                                        (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano)) {
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                        } else if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        } else if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaReserva")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            }
                                        } else if (diaFinal_decimal > fechaEntradaSeleccionada.dia && diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                        } else if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else if ((mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)) {

                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                                bloqueDia.setAttribute("estadoDia", "noDisponible")

                                            }
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {

                                            if (bloqueDia.getAttribute("estadoDia") === "noDisponible") {
                                            }
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        }
                                        if (calendario.tiempo === "futuro") {
                                            if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {

                                            }
                                        }
                                    } else if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {

                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)

                                        }
                                    } else {

                                        if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        } else {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    }
                                } else if (Object.keys(fechaEntradaSeleccionada).length && !Object.keys(fechaSalidaSeleccionada).length) {
                                    if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                                bloqueDia.setAttribute("estadoDia", "noDisponible")
                                            }
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        }
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                }
                                else if (Object.keys(fechaSalidaSeleccionada).length && !Object.keys(fechaEntradaSeleccionada).length) {
                                    if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                } else if (!Object.keys(fechaSalidaSeleccionada).length && !Object.keys(fechaEntradaSeleccionada).length) {
                                    if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                }
                                marcoMes.appendChild(bloqueDia)
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            if (Object.keys(fechaEntradaSeleccionada).length) {
                                if (anoActual_decimal > fechaEntradaSeleccionada.ano) {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                } else if (anoActual_decimal === fechaEntradaSeleccionada.ano && mesActual_decimal > fechaEntradaSeleccionada.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                                }
                            } else {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            }
                        } else if (perfilMes === "calendario_unico_perfilSimple") {
                            const contenedorFechas = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)
                            if (!contenedorFechas) {
                                const error = "El perfil de calendario_unico_perfilSimple no encuentra el contenedor de fechas de destino"
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(error)
                            }
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const selectorFechaUnica = contenedorFechas.querySelector("[calendario=unico]")?.getAttribute("memoriaVolatil")
                            const fechaUnicaSeleccionada = {}
                            if (selectorFechaUnica) {
                                fechaUnicaSeleccionada.dia = parseInt(selectorFechaUnica.split("-")[2], 10)
                                fechaUnicaSeleccionada.mes = parseInt(selectorFechaUnica.split("-")[1], 10)
                                fechaUnicaSeleccionada.ano = parseInt(selectorFechaUnica.split("-")[0], 10)
                            }

                            marcoCalendario?.setAttribute("perfilMes", perfilMes)

                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                bloqueDia.classList.add("calendarioDiaDisponible")
                                bloqueDia.addEventListener("click", pasarelaX)


                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }

                                if (Object.keys(fechaUnicaSeleccionada).length) {
                                    if (mesActual_decimal === fechaUnicaSeleccionada.mes && anoActual_decimal === fechaUnicaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaUnicaSeleccionada.dia) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                    }
                                }
                                marcoMes?.appendChild(bloqueDia)
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"

                        }
                        if (instanciaUID_procesoCambioMes) {
                            const selectorMarcoMesRenderizadoEnEspera = selectorCalendarioRenderizado
                                .querySelector(`[inctanciaUID_procesoCambioMes="${instanciaUID_procesoCambioMes}"]`)
                            if (!selectorMarcoMesRenderizadoEnEspera) {
                                return
                            }
                        }

                        if (selectorCalendarioRenderizado) {
                            selectorCalendarioRenderizado.querySelector("[contenedor=construyendoCalendario]")?.remove()
                            selectorCalendarioRenderizado.querySelector("[contenedor=calendario]").removeAttribute("style")
                        }
                    } catch (errorCapturado) {
                        throw errorCapturado
                    }
                },
                resolverCalendarioNuevo: async (data) => {

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "componentes/calendario",
                        ...data
                    })
                    if (respuestaServidor?.error) {
                        const selectorContenedorCalendario = document.querySelectorAll("[componente=bloqueCalendario]")
                        selectorContenedorCalendario.forEach((bloqueCalendario) => {
                            bloqueCalendario.remove()
                        })
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.calendario) {
                        return respuestaServidor;
                    }
                },
                navegacionCalendarioNuevo: async (calendario) => {
                    const boton = calendario.target.getAttribute("sentido")
                    const selectorBotones = calendario.target.closest("[contenedor=calendario]").querySelectorAll("[sentido]")
                    selectorBotones.forEach((botonRenderizado) => {
                        botonRenderizado.style.pointerEvents = "none"
                        botonRenderizado.style.opacity = "0"

                    })
                    const instanciaUID = calendario.target.closest("[instanciaUID]").getAttribute("instanciaUID")
                    const instanciaUID_contenedorFechas = calendario.target.closest("[instanciaUID]").getAttribute("instanciaUID_contenedorFechas")
                    const mesReferencia = document.querySelector("[componente=mesReferencia]")
                    let mesActual = Number(mesReferencia.getAttribute("mes"))
                    let anoActual = Number(mesReferencia.getAttribute("ano"))
                    mesReferencia.innerHTML = null
                    const instanciaUID_procesoCambioMes = casaVitini.utilidades.codigoFechaInstancia()
                    if (boton === "adelante") {
                        if (mesActual + 1 < 13) {
                            mesActual = mesActual + 1
                        } else {
                            mesActual = 1
                            anoActual = anoActual + 1
                        }
                    }
                    if (boton === "atras") {
                        if (mesActual - 1 > 0) {
                            mesActual = mesActual - 1
                        } else {
                            mesActual = 12
                            anoActual = anoActual - 1
                        }
                    }
                    const calendarioconstruir = {
                        tipo: "personalizado",

                        ano: anoActual,
                        mes: mesActual
                    }

                    const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                    const contenedorCalendario = calendarioRenderizado.querySelector(`[contenedor=calendario]`)
                    const selectorMarcoMesRenderizado = calendarioRenderizado.querySelector(`[componente=marcoMes]`)
                    selectorMarcoMesRenderizado.removeAttribute("style")
                    selectorMarcoMesRenderizado.style.gridTemplateRows = "min-content min-content"
                    selectorMarcoMesRenderizado.style.flex = "0"
                    const selectorDiasRenderizados = calendarioRenderizado.querySelectorAll("[dia]")
                    selectorDiasRenderizados.forEach((diaRenderizado) => {
                        diaRenderizado.remove()
                    })
                    const contenedorconstruyendoCalendarioRenderizado = calendarioRenderizado.querySelectorAll("[contenedor=construyendoCalendario]")
                    contenedorconstruyendoCalendarioRenderizado.forEach((contenedorRenderizado) => {
                        contenedorRenderizado.remove()
                    })
                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                    const contenedorCarga = document.createElement("div")
                    contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
                    contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                    contenedorCarga.setAttribute("elemento", "flotante")
                    contenedorCarga.appendChild(spinner)
                    contenedorCalendario.appendChild(contenedorCarga)
                    const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendarioconstruir)
                    calendarioResuelto.instanciaUID = instanciaUID
                    calendarioResuelto.instanciaUID_contenedorFechas = instanciaUID_contenedorFechas
                    calendarioResuelto.instanciaUID_procesoCambioMes = instanciaUID_procesoCambioMes

                    selectorMarcoMesRenderizado.setAttribute("inctanciaUID_procesoCambioMes", instanciaUID_procesoCambioMes)

                    casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                },
                seleccionarDiaProcesadoNuevo: (metadatosDia) => {
                    let dia;
                    let estadoDia;
                    let diaSeleccionadoComoElemento;
                    if (metadatosDia.tipo === "desdeClick") {
                        dia = metadatosDia.diaSeleccionado
                        estadoDia = metadatosDia.estadoDia
                        diaSeleccionadoComoElemento = document.querySelector("li[dia='" + dia + "']")
                    }
                    if (typeof metadatosDia === "number") {
                        dia = metadatosDia;
                        diaSeleccionadoComoElemento = document.querySelector("li[dia='" + dia + "']")
                    }
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    let botonAtras = document.querySelector("#botonAtras")
                    let botonAdelante = document.getElementById("botonAdelante")
                    let fechaEntrada = document.getElementById("fechaEntrada")
                    let fechaSalida = document.getElementById("fechaSalida")
                    let almacenamientoLocalID = calendario.getAttribute("almacenamientoCalendarioID")
                    let perfilMes = calendario.getAttribute("perfilMes")

                    let tiempo = document.querySelector("[componente=mesReferencia]").getAttribute("tiempo")
                    let reserva = localStorage.getItem(almacenamientoLocalID) ? JSON.parse(localStorage.getItem(almacenamientoLocalID)) : {};
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        if (diaSeleccionadoComoElemento.getAttribute("tipoDia") === "hoy") {
                            diaSeleccionadoComoElemento.style.background = "red"
                            diaSeleccionadoComoElemento.style.color = ""
                        } else {
                            diaSeleccionadoComoElemento.style.background = ""
                            diaSeleccionadoComoElemento.style.color = ""
                        }
                        if (calendarioIO === "entrada") {
                            fechaEntrada.textContent = 'Seleccionar dia de entrada'
                            delete reserva.entrada
                            document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                        }
                        if (calendarioIO === "salida") {
                            fechaSalida.textContent = 'Seleccionar dia de salida2'
                            delete reserva.salida
                            document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                        }
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")
                        document.getElementById("botonSiguientePaso")?.remove()
                        localStorage.setItem(almacenamientoLocalID, JSON.stringify(reserva))
                        return
                    }
                    let diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    for (const diaDisponible of diasDisponibles) {
                        if (diaDisponible.getAttribute("estado") !== "deshabilitado") {
                            diaDisponible.style.background = ""
                            diaDisponible.style.color = ""
                            diaDisponible.removeAttribute("estadoDia")
                            diaDisponible.style.pointerEvents = "all"
                        }
                        if (diaDisponible.getAttribute("tipoDia") === "hoy") {


                            diaDisponible.removeAttribute("estadoDia")
                            diaDisponible.style.pointerEvents = "all"
                        }
                    }
                    diaSeleccionadoComoElemento.style.background = "black"
                    diaSeleccionadoComoElemento.style.color = "white"
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                    let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                    let diaSeleccionado = dia
                    let botonSiguientePaso = document.createElement("p")
                    botonSiguientePaso.setAttribute("id", "botonSiguientePaso")
                    botonSiguientePaso.setAttribute("class", "reservaInformacion")
                    botonSiguientePaso.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    let constructorInformacion;
                    let diaIO;
                    let reserva_
                    if (calendarioIO === "entrada") {
                        const fechaEntrada_Humano = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                        fechaEntrada.textContent = fechaEntrada_Humano
                        constructorInformacion = "Entrada el " + diaSeleccionado + " del " + mesSeleccionado + " del " + anoSeleccionado
                        botonSiguientePaso.setAttribute("vista", "/reservas/salida")
                        botonSiguientePaso.textContent = "Ir a seleccionar el día de salida44"
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaEntrada_Humano)
                    }
                    if (calendarioIO === "salida") {
                        const fechaSalida_humano = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                        fechaSalida.textContent = fechaSalida_humano
                        constructorInformacion = "Salida el " + diaSeleccionado + " del " + mesSeleccionado + " del " + anoSeleccionado
                        botonSiguientePaso.setAttribute("vista", "/reservas/alojamiento")
                        botonSiguientePaso.textContent = "Ir a seleccionar el alojamiento"
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSalida_humano)
                    }
                },
                seleccionarDiaNuevo: (dia) => {
                    let diaSeleccionado
                    if (typeof dia === "number") {
                        metadatosDia = dia
                        casaVitini.componentes.seleccionarDiaProcesadoNuevo(metadatosDia)
                    }
                    if (dia?.target?.getAttribute("dia")) {
                        diaSeleccionado = dia.target.getAttribute("dia")
                        let estadoDia = dia.target.getAttribute("estadoDia")
                        let metadatosDia = {
                            "diaSeleccionado": diaSeleccionado,
                            "estadoDia": estadoDia,
                            "tipo": "desdeClick"
                        }
                        casaVitini.componentes.seleccionarDiaProcesadoNuevo(metadatosDia)
                    }
                },
                calendarioCompartido: {
                    seleccionarDia: (dia) => {

                        const diaSeleccionadoComoElemento = dia.target;

                        const contenedorCalendario = diaSeleccionadoComoElemento.closest("[componente=bloqueCalendario]")
                        const instanciaUID_contenedorFechas = contenedorCalendario.getAttribute("instanciaUID_contenedorFechas")
                        const calendario = contenedorCalendario.querySelector("[componente=marcoCalendario]")
                        const numeroDia = dia.target.getAttribute("dia")

                        const contendorDestino = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)

                        const calendarioIO = calendario.getAttribute("calendarioIO")
                        const marcoMes = dia.target.closest("[componente=marcoMes]")
                        const numeroDiaDelMes = marcoMes.querySelectorAll("[dia]").length


                        const diaSeleccionado = numeroDia.padStart(2, "0")
                        const anoSeleccionado = contenedorCalendario.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(2, "0")
                        const mesSeleccionado = contenedorCalendario.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                        const fechaSeleccionada_humana = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                        const fechaSeleccionada_ISO = `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`

                        const diasDelCalendario = marcoMes.querySelectorAll("[dia]")
                        const selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                        selectorDias.forEach((dia) => {

                            dia.classList.remove("calendarioDiaReserva")
                            dia.classList.remove("calendarioDiaSeleccionado")
                        })
                        if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                            diaSeleccionadoComoElemento.setAttribute("estadoDia", "disponible")
                            if (calendarioIO === "entrada") {
                                contendorDestino.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                                contendorDestino.querySelector("[fechaUI=fechaInicio]").textContent = "(Seleccionar)"
                                contendorDestino.querySelector("[calendario=entrada]").removeAttribute("posicionDia")
                            }
                            if (calendarioIO === "salida") {
                                contendorDestino.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                                contendorDestino.querySelector("[fechaUI=fechaFin]").textContent = "(Seleccionar)"
                                contendorDestino.querySelector("[calendario=salida]").removeAttribute("posicionDia")

                            }
                            diasDelCalendario.forEach(dia => {
                                if (dia.getAttribute("estadoDia") === "disponible" ||
                                    dia.getAttribute("estadoDia") === "seleccionado") {
                                    dia.classList.remove("calendarioDiaSeleccionado")
                                    dia.classList.remove("calendarioDiaReserva")
                                    dia.classList.add("calendarioDiaDisponible")
                                    dia.setAttribute("estadoDia", "disponible")
                                }
                            });
                            return
                        }
                        diasDelCalendario.forEach(dia => {
                            if (dia.getAttribute("estadoDia") === "seleccionado") {
                                dia.setAttribute("estadoDia", "disponible")
                            }
                            if (dia.getAttribute("estadoDia") === "disponible") {
                                dia.classList.remove("calendarioDiaSeleccionado")
                                dia.classList.remove("calendarioDiaReserva")
                                dia.classList.add("calendarioDiaDisponible")
                            }
                        });
                        diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                        diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                        const fechasSeleccionadas = () => {
                            const fechaEntradaVolatil = contendorDestino.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                            const fechaEntradaAarray = fechaEntradaVolatil?.split("-") ? fechaEntradaVolatil?.split("-") : []
                            const diaSeleccionadoEntrada = Number(fechaEntradaAarray[2])
                            const mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                            const anoSeleccionadoEntrada = Number(fechaEntradaAarray[0])

                            const fechaSalidaVolatil = contendorDestino.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")

                            const fechaSaliraArray = fechaSalidaVolatil?.split("-") ? fechaSalidaVolatil?.split("-") : []
                            const diaSeleccionadoSalida = Number(fechaSaliraArray[2])
                            const mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                            const anoSeleccionadoSalida = Number(fechaSaliraArray[0])

                            const fechaUnicoVolatil = contendorDestino.querySelector("[calendario=unico]")?.getAttribute("memoriaVolatil")
                            const fechaUnicoAarray = fechaUnicoVolatil?.split("-") ? fechaUnicoVolatil?.split("-") : []
                            const diaSeleccionadoUnico = Number(fechaUnicoAarray[2])
                            const mesSeleccionadoUnico = Number(fechaUnicoAarray[1])
                            const anoSeleccionadoUnico = Number(fechaUnicoAarray[0])

                            const contenedorFechas = {
                                fechaEntrada: {
                                    volatil: fechaEntradaVolatil,
                                    dia: diaSeleccionadoEntrada,
                                    mes: mesSeleccionadoEntrada,
                                    ano: anoSeleccionadoEntrada
                                },
                                fechaSalida: {
                                    volatil: fechaSalidaVolatil,
                                    dia: diaSeleccionadoSalida,
                                    mes: mesSeleccionadoSalida,
                                    ano: anoSeleccionadoSalida
                                },
                                fechaUnico: {
                                    volatil: fechaUnicoVolatil,
                                    dia: diaSeleccionadoUnico,
                                    mes: mesSeleccionadoUnico,
                                    ano: anoSeleccionadoUnico
                                }

                            }
                            return contenedorFechas
                        }

                        if (calendarioIO === "entrada") {



                            contendorDestino.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionada_ISO)
                            contendorDestino.querySelector("[fechaUI=fechaInicio]").textContent = fechaSeleccionada_humana
                            if (fechasSeleccionadas().fechaSalida?.volatil) {
                                diasDelCalendario.forEach((dia) => {
                                    if (dia.getAttribute("estadoDia") === "disponible") {
                                        if (fechasSeleccionadas().fechaSalida.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaSalida.ano) {
                                            if ((Number(dia.getAttribute("dia")) > diaSeleccionado &&
                                                Number(dia.getAttribute("dia")) <= fechasSeleccionadas().fechaSalida.dia)) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        } else {
                                            if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        }
                                    }
                                })
                            } else if (fechasSeleccionadas().fechaSalida?.volatil) {
                                if (fechasSeleccionadas().fechaSalida.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaSalida.ano) {
                                    selectorDias.forEach((dia) => {
                                        if ((Number(dia.getAttribute("dia")) > diaSeleccionado)
                                            &&
                                            (Number(dia.getAttribute("dia")) < fechasSeleccionadas().fechaSalida.dia)) {

                                            dia.classList.add("calendarioDiaReserva")
                                            dia.classList.remove("calendarioDiaDisponible")
                                        }
                                    })
                                } else {
                                    selectorDias.forEach((dia) => {
                                        if (Number(dia.getAttribute("dia")) >= diaSeleccionado) {
                                            dia.classList.add("calendarioDiaReserva")
                                            dia.classList.remove("calendarioDiaDisponible")
                                        }
                                    })
                                }
                            }
                        } else if (calendarioIO === "salida") {
                            contendorDestino.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionada_ISO)
                            contendorDestino.querySelector("[fechaUI=fechaFin]").textContent = fechaSeleccionada_humana

                            if (fechasSeleccionadas().fechaEntrada?.volatil) {
                                diasDelCalendario.forEach((dia) => {
                                    if (dia.getAttribute("estadoDia") === "disponible") {
                                        if (fechasSeleccionadas().fechaEntrada.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaEntrada.ano) {
                                            if (Number(dia.getAttribute("dia")) < Number(diaSeleccionado) &&
                                                Number(dia.getAttribute("dia")) >= fechasSeleccionadas().fechaEntrada.dia) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        } else {
                                            if (Number(dia.getAttribute("dia")) < Number(diaSeleccionado)) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        }
                                    }
                                })
                            } else if (fechasSeleccionadas().fechaEntrada?.volatil) {
                                if (fechasSeleccionadas().fechaEntrada.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaEntrada.ano) {
                                    selectorDias.forEach((dia) => {
                                        if ((Number(dia.getAttribute("dia")) > fechasSeleccionadas().fechaEntrada.dia)
                                            &&
                                            (Number(dia.getAttribute("dia")) < Number(diaSeleccionado))) {

                                            dia.classList.add("calendarioDiaReserva")
                                            dia.classList.remove("calendarioDiaDisponible")
                                        }
                                    })
                                } else {
                                    selectorDias.forEach((dia) => {
                                        if (Number(dia.getAttribute("dia")) <= Number(diaSeleccionado)) {
                                            dia.classList.add("calendarioDiaReserva")
                                            dia.classList.remove("calendarioDiaDisponible")
                                        }
                                    })
                                }
                            }
                        } else if (calendarioIO === "unico") {

                            contendorDestino.querySelector("[calendario=unico]").setAttribute("memoriaVolatil", fechaSeleccionada_ISO)
                            contendorDestino.querySelector("[fechaUI=unico]").textContent = fechaSeleccionada_humana

                            if (fechasSeleccionadas().fechaUnico?.volatil) {
                                diasDelCalendario.forEach((dia) => {
                                    if (dia.getAttribute("estadoDia") === "disponible") {
                                        if (fechasSeleccionadas().fechaUnico.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaUnico.ano) {
                                            if (Number(dia.getAttribute("dia")) < Number(diaSeleccionado) &&
                                                Number(dia.getAttribute("dia")) >= fechasSeleccionadas().fechaUnico.dia) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        } else {
                                            if (Number(dia.getAttribute("dia")) < Number(diaSeleccionado)) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        }
                                    }
                                })
                            }
                        }
                    },
                },
                diasOcupadosTotalmentePorMes: async (metadatos) => {
                    const mes = metadatos.mes
                    const ano = metadatos.ano
                    const instanciaUID_mes = metadatos.instanciaUID_mes
                    const controlDiasCompletos = {
                        zona: "componentes/diasOcupadosTotalmentePorMes",
                        mes: Number(mes),
                        ano: Number(ano)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(controlDiasCompletos)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor.ok) {
                        const dias = respuestaServidor.ok.dias
                        const selectorMarcoMesRenderizadoEnEspera = document
                            .querySelector(`[inctanciaUID_procesoCambioMes="${instanciaUID_mes}"]`)
                        if (!selectorMarcoMesRenderizadoEnEspera) {
                            return
                        }
                        for (const detallesDia of Object.entries(dias)) {
                            const dia = detallesDia[0]
                            const estadoDia = detallesDia[1].estadoDia
                            const selectorDia = selectorMarcoMesRenderizadoEnEspera.querySelector(`[dia="${dia}"]`)
                            if (estadoDia === "diaCompleto") {
                                selectorDia.classList.add("calendarioDiaCompleto")
                            }
                            if (estadoDia === "diaParcial") {
                                selectorDia.classList.add("calendarioDiaParcial")
                            }
                        }
                    }
                },
            },
            contenedorFinanciero: {
                constructor: function (data) {

                    try {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const destino = data.destino
                        const modoUI = data.modoUI
                        const contenedorFinanciero = data.contenedorFinanciero

                        const global = contenedorFinanciero.desgloseFinanciero.global
                        const entidades = contenedorFinanciero.desgloseFinanciero.entidades
                        const contenedorOfertas = contenedorFinanciero.desgloseFinanciero.contenedorOfertas
                        const impuestos = contenedorFinanciero.desgloseFinanciero.impuestos
                        const totales = global.totales

                        this.control({
                            destino,
                            modoUI
                        })
                        this.componentesUI.contenedor({
                            destino,
                            modoUI,
                            instanciaUID
                        })
                        this.componentesUI.panelGlobal.botonesControlFlexbile({
                            destino,
                            modoUI,
                            instanciaUID
                        })
                        this.componentesUI.entidades.hub({
                            destino,
                            entidades,
                            instanciaUID,
                            modoUI
                        })
                        this.componentesUI.ofertas.hub({
                            destino,
                            contenedorOfertas,
                            instanciaUID
                        })
                        this.componentesUI.impuestos({
                            destino,
                            impuestos,
                            instanciaUID
                        })
                        this.componentesUI.totalesGlobales({
                            destino,
                            totales,
                            instanciaUID
                        })
                    } catch (error) {
                        console.error(error)
                        throw error
                    }
                },
                control: (data) => {
                    try {
                        const destino = data.destino
                        const modoUI = data.modoUI
                        if (!document.querySelector(destino)) {
                            throw new Error("El constructor del contenedor financiero no encuentra el elemento del destino")
                        }
                        if (modoUI !== "plaza" && modoUI !== "administracion" && modoUI !== "simulador") {
                            throw new Error("El constructor del contenedor financiero necesita modoUI en plaza, administracion o simulador")
                        }

                    } catch (error) {
                        throw error
                    }

                },
                componentesUI: {
                    contenedor: function (data) {
                        const destino = data.destino
                        const modoUI = data.modoUI

                        const instanciaUID = data.instanciaUID
                        const selector = document.querySelector(destino).querySelector("[contenedor=financiero]")
                        if (!selector) {
                            const contenedor = document.createElement("div")
                            contenedor.classList.add("componentes_ui_desloseTotales_contenedor")
                            contenedor.setAttribute("contenedor", "financiero")
                            contenedor.setAttribute("modoUI", modoUI)
                            contenedor.setAttribute("instanciaUID", instanciaUID)
                            document.querySelector(destino).appendChild(contenedor)
                        } else {
                            selector.setAttribute("instanciaUID", instanciaUID)
                        }


                    },
                    panelGlobal: {
                        botonesControlFlexbile: function (data) {

                            const destino = data.destino
                            const modoUI = data.modoUI
                            const instanciaUID = data.instanciaUID
                            const selector = document.querySelector(destino).querySelector("[contenedor=financiero]")
                            const selector_contenedorBotones = selector.querySelector("[contenedor=botonesGlobalesExpansionContracccion]")
                            if (!selector_contenedorBotones) {
                                const controladorExpansionCategorias = (e) => {
                                    const areaContenedorFinanciero = e.target.closest("[contenedor=financiero]")
                                    const accion = e.target.getAttribute("accion")
                                    const contenedoresFlexibles = areaContenedorFinanciero.querySelectorAll("details")


                                    if (accion === "expandir") {
                                        contenedoresFlexibles.forEach(c => c.open = true)
                                    } else if (accion === "contraer") {
                                        contenedoresFlexibles.forEach(c => c.open = false)
                                    }
                                }

                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.setAttribute("contenedor", "botonesGlobalesExpansionContracccion")
                                contenedorBotones.classList.add("gridHorizontal2C", "gap6", "borderRadius20")
                                selector.appendChild(contenedorBotones)

                                const botonExpandirTodo = document.createElement("div")
                                botonExpandirTodo.classList.add("botonV1")
                                botonExpandirTodo.style.borderRadius = "14px"
                                botonExpandirTodo.setAttribute("accion", "expandir")
                                botonExpandirTodo.addEventListener("click", controladorExpansionCategorias)
                                botonExpandirTodo.textContent = "Expandir todo"
                                contenedorBotones.appendChild(botonExpandirTodo)

                                const botonContraerTodo = document.createElement("div")
                                botonContraerTodo.classList.add("botonV1")
                                botonContraerTodo.style.borderRadius = "14px"
                                botonContraerTodo.setAttribute("accion", "contraer")
                                botonContraerTodo.addEventListener("click", controladorExpansionCategorias)
                                botonContraerTodo.textContent = "Contraer todo"
                                contenedorBotones.appendChild(botonContraerTodo)
                            }
                        }
                    },
                    navegacion: {
                        ui: function (data) {
                            const destino = data.destino

                            const contenedor_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[componente=navegador]")
                            if (contenedor_selector) {
                                return
                            }
                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("componente", "navegador")
                            contenedor.classList.add(
                                "padding6",
                                "flexVertical",
                                "gap6"
                            )

                            const ui = document.createElement("div")
                            ui.classList.add(
                                "navegador",
                                "backgroundWhite5"
                            )
                            contenedor.appendChild(ui)

                            const botonTodo = document.createElement("div")
                            botonTodo.setAttribute("comando", "todo")
                            botonTodo.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonTodo.textContent = "Ver todo"
                            botonTodo.addEventListener("click", this.controlador)


                            const botonPorNoche = document.createElement("div")
                            botonPorNoche.setAttribute("comando", "porNoche")
                            botonPorNoche.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonPorNoche.textContent = "Desglose por noche"
                            botonPorNoche.addEventListener("click", this.controlador)

                            ui.appendChild(botonPorNoche)

                            const botonPorApartamento = document.createElement("div")
                            botonPorApartamento.setAttribute("comando", "porApartamento")
                            botonPorApartamento.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonPorApartamento.textContent = "Desglose por apartamento"
                            botonPorApartamento.addEventListener("click", this.controlador)

                            ui.appendChild(botonPorApartamento)

                            const botonServicios = document.createElement("div")
                            botonServicios.setAttribute("comando", "porServicio")
                            botonServicios.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonServicios.textContent = "Servicios"
                            botonServicios.addEventListener("click", this.controlador)

                            ui.appendChild(botonServicios)


                            const botonOfertas = document.createElement("div")
                            botonOfertas.setAttribute("comando", "ofertas")
                            botonOfertas.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonOfertas.textContent = "Ofertas aplicadas"
                            botonOfertas.addEventListener("click", this.controlador)

                            ui.appendChild(botonOfertas)

                            const botonImpuestos = document.createElement("div")
                            botonImpuestos.setAttribute("comando", "impuestos")
                            botonImpuestos.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonImpuestos.textContent = "Impuestos"
                            botonImpuestos.addEventListener("click", this.controlador)
                            ui.appendChild(botonImpuestos)


                            const botonTotales = document.createElement("div")
                            botonTotales.setAttribute("comando", "totales")
                            botonTotales.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonTotales.textContent = "Totales"
                            botonTotales.addEventListener("click", this.controlador)

                            ui.appendChild(botonTotales)

                            document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedor)


                        },
                        controlador: (data) => {
                            const boton = data.target
                            const comando = boton.getAttribute("comando")
                            const estadoActual = boton.getAttribute("estado")
                            const contenedorFinancieroArea = boton.closest("[contenedor=financiero]")
                            const selectorContenedores = contenedorFinancieroArea.querySelectorAll("[componente=plegable]")
                            const navegadorArea = contenedorFinancieroArea.querySelector("[componente=navegador]")
                            const selectorBotones = navegadorArea.querySelectorAll("[comando]")

                            const estadoInicial = () => {
                                selectorContenedores.forEach((contenedorPlegable) => {
                                    contenedorPlegable.removeAttribute("style")
                                })
                                selectorBotones.forEach((boton) => {
                                    boton.classList.remove("selecionAzul")
                                    boton.removeAttribute("estado")
                                })
                            }

                            if (comando === "todo") {
                                estadoInicial()
                                return
                            }
                            if (estadoActual === "activo") {
                                boton.classList.remove("selecionAzul")
                                boton.removeAttribute("estado")

                            } else {
                                boton.classList.add("selecionAzul")
                                boton.setAttribute("estado", "activo")
                            }

                            const botonesActivos = []
                            contenedorFinancieroArea.querySelector("[componente=navegador]").querySelectorAll("[estado=activo]").forEach((botonActivo) => {
                                botonesActivos.push(botonActivo.getAttribute("comando"))
                            })
                            if (botonesActivos.length === 0) {
                                return estadoInicial()
                            }


                            selectorContenedores.forEach((contenedorPlegable) => {
                                const contenedorIDV = contenedorPlegable.getAttribute("contenedor")

                                if (botonesActivos.includes(contenedorIDV)) {

                                    contenedorPlegable.removeAttribute("style")
                                } else {
                                    contenedorPlegable.style.display = "none"

                                }
                            })

                        }
                    },
                    entidades: {
                        hub: function (data) {
                            const destino = data.destino
                            const entidades = data.entidades
                            const instanciaUID = data.instanciaUID
                            const modoUI = data.modoUI

                            for (const [entidadIDV, entidad] of Object.entries(entidades)) {
                                if (entidadIDV === "reserva") {
                                    const desglosePorNoche = entidad.desglosePorNoche
                                    const desglosePorApartamento = entidad.desglosePorApartamento
                                    const contenedorSobreControles = entidad.contenedorSobreControles
                                    const totales = entidad.global.totales
                                    this.reserva.contenedor({
                                        destino
                                    })
                                    this.reserva.porNoche({
                                        destino,
                                        instanciaUID,
                                        desglosePorNoche,
                                        contenedorSobreControles
                                    })
                                    this.reserva.porApartamento({
                                        destino,
                                        desglosePorApartamento
                                    })
                                    this.reserva.totales({
                                        destino,
                                        totales
                                    })
                                }
                                if (entidadIDV === "servicios") {

                                    const desglosePorServicios = entidad.desglosePorServicios
                                    const totales = entidad.global.totales


                                    // if ((modoUI === "administracion" || modoUI === "plaza" || modoUI === "simulador") && desglosePorServicios.length > 0) {

                                    this.servicios.contenedor({
                                        destino,
                                        desglosePorServicios,
                                        modoUI
                                    })
                                    this.servicios.porServicio({
                                        destino,
                                        desglosePorServicios
                                    })
                                    this.servicios.totales({
                                        destino,
                                        totales
                                    })
                                    // }

                                }
                                if (entidadIDV === "complementosAlojamiento") {
                                    const desglosePorComplementoDeAlojamiento = entidad.desglosePorComplementoDeAlojamiento
                                    const totales = entidad.global.totales

                                    //if ((modoUI === "administracion" || modoUI === "plaza" || modoUI === "simulador") && desglosePorComplementoDeAlojamiento.length > 0) {
                                    this.complementosDelAlojamientos.contenedor({
                                        destino,
                                        desglosePorComplementoDeAlojamiento,
                                        modoUI
                                    })
                                    this.complementosDelAlojamientos.porComplemento({
                                        destino,
                                        desglosePorComplementoDeAlojamiento
                                    })
                                    this.complementosDelAlojamientos.totales({
                                        destino,
                                        totales
                                    })

                                    // }


                                }
                            }
                        },
                        reserva: {
                            contenedor: (data) => {
                                const destino = data.destino
                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=reserva]")
                                if (!selector) {
                                    const contenedorPlegable = document.createElement('details');
                                    contenedorPlegable.classList.add("contenedorEntidad", "sobreControlAnimacionGlobal")
                                    contenedorPlegable.setAttribute("entidad", "reserva")


                                    const tituloContenedorPlegable = document.createElement('summary');
                                    tituloContenedorPlegable.classList.add(
                                        "padding12",
                                    )
                                    tituloContenedorPlegable.textContent = 'Alojamiento';
                                    contenedorPlegable.appendChild(tituloContenedorPlegable)

                                    const contenedor = document.createElement("div")
                                    contenedor.setAttribute("contenedor", "data")
                                    contenedorPlegable.appendChild(contenedor)





                                    document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedorPlegable)
                                }
                            },
                            porNoche: (data) => {
                                const destino = data.destino
                                const desglosePorNoche = data.desglosePorNoche
                                const contenedorSobreControles = data.contenedorSobreControles
                                const instanciaUID = data.instanciaUID
                                const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                const contenedorEntidadReserva = contenedorFinanciero.querySelector("[entidad=reserva] [contenedor=data]")
                                const conntenedorPorNoche_selector = contenedorEntidadReserva.querySelector("[contenedor=porNoche]")
                                const modoUI = contenedorFinanciero.getAttribute("modoUI")

                                if (!conntenedorPorNoche_selector) {
                                    const contenedorPorNoche = document.createElement("div")
                                    contenedorPorNoche.classList.add("reserva_resumen_desglose_pago_bloque")
                                    contenedorPorNoche.setAttribute("contenedor", "porNoche")
                                    contenedorPorNoche.setAttribute("componente", "plegable")

                                    contenedorEntidadReserva.appendChild(contenedorPorNoche)

                                    const detalleDiaUITitulo = document.createElement("div")
                                    detalleDiaUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                                    detalleDiaUITitulo.textContent = "Desglose por noche"
                                    contenedorPorNoche.appendChild(detalleDiaUITitulo)

                                    if (modoUI === "administracion") {
                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6",
                                        )

                                        const botonSobreControlDePrecios = document.createElement("div")
                                        botonSobreControlDePrecios.classList.add(
                                            "botonV1",
                                            "comportamientoBoton"
                                        )
                                        botonSobreControlDePrecios.textContent = "Alterar precios neto de la reserva"
                                        botonSobreControlDePrecios.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.sobreControlPrecios.arranque)

                                        contenedorPorNoche.appendChild(contenedorBotones)
                                    }

                                    if (modoUI === "simulador") {
                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6",
                                        )

                                        const botonSobreControlDePrecios = document.createElement("div")
                                        botonSobreControlDePrecios.classList.add(
                                            "botonV1",
                                            "comportamientoBoton"
                                        )
                                        botonSobreControlDePrecios.textContent = "Alterar precios neto de la simulación"
                                        botonSobreControlDePrecios.addEventListener("click", casaVitini.view.detallesSimulacion.componentesUI.sobreControlPrecios.arranque)

                                        contenedorPorNoche.appendChild(contenedorBotones)
                                    }

                                    const contenedorDesglosePorNoche = document.createElement("div")
                                    contenedorDesglosePorNoche.classList.add("reserva_resumen_desglose_porNoche")
                                    contenedorDesglosePorNoche.setAttribute("contenedor", "deslosePorNoche")
                                    contenedorPorNoche.appendChild(contenedorDesglosePorNoche)
                                }
                                const contenedorDesglosePorNoche_renderizado = contenedorEntidadReserva.querySelector("[contenedor=deslosePorNoche]")

                                const fechasDelDesgloseArray = Object.keys(desglosePorNoche)
                                const selectorNochesRenderizados = contenedorDesglosePorNoche_renderizado.querySelectorAll(`[noche]`)
                                selectorNochesRenderizados.forEach((nocheRenderizada) => {
                                    const fechaNocheRenderizada = nocheRenderizada.getAttribute("noche")
                                    if (!fechasDelDesgloseArray.includes(fechaNocheRenderizada)) {
                                        nocheRenderizada?.remove()
                                    }
                                })
                                let posicion = 0
                                for (const [fechaNoche, desglose] of Object.entries(desglosePorNoche)) {
                                    const precioNetoNoche = desglose.precioNetoNoche
                                    const apartamentosPorNoche = desglose.apartamentosPorNoche
                                    const nochesRenderizdas = contenedorDesglosePorNoche_renderizado.querySelectorAll("[noche]")

                                    const contenedorNoche_selector = contenedorDesglosePorNoche_renderizado.querySelector(`[noche="${fechaNoche}"]`)
                                    if (!contenedorNoche_selector) {
                                        const contenedorNoche = document.createElement("div")
                                        contenedorNoche.setAttribute("noche", fechaNoche)
                                        contenedorNoche.classList.add(
                                            "contenedorDiaConNoche",
                                        )
                                        const titulo = document.createElement("div")
                                        titulo.classList.add(
                                            "reserva_resumen_apartamentoIUTitulo",
                                            "textoCentrado"
                                        )
                                        titulo.classList.add("negrita")
                                        titulo.textContent = fechaNoche
                                        contenedorNoche.appendChild(titulo)



                                        if (posicion < nochesRenderizdas.length) {
                                            const elementosArray = Array.from(nochesRenderizdas);
                                            contenedorDesglosePorNoche_renderizado.insertBefore(contenedorNoche, elementosArray[posicion]);
                                        } else {
                                            contenedorDesglosePorNoche_renderizado.appendChild(contenedorNoche);
                                        }

                                        const totalesNoche = document.createElement("div")
                                        totalesNoche.classList.add("padding6")
                                        totalesNoche.setAttribute("contenedor", "totalesNoche")

                                        const totalNetoNocheUI = document.createElement("div")
                                        totalNetoNocheUI.setAttribute("componente", "totalNetoNoche")
                                        totalNetoNocheUI.classList.add("negrita")

                                        totalesNoche.appendChild(totalNetoNocheUI)
                                        contenedorNoche.appendChild(totalesNoche)


                                    }
                                    posicion++

                                    const contenedorNoche_renderizado = contenedorDesglosePorNoche_renderizado.querySelector(`[noche="${fechaNoche}"]`)
                                    const totalNetoNocheUI = contenedorNoche_renderizado.querySelector(`[componente=totalNetoNoche]`)
                                    totalNetoNocheUI.textContent = precioNetoNoche + "$ Total neto noche"

                                    const apartamentosIDVArray = Object.keys(apartamentosPorNoche)
                                    const selectorApartamentosRenderizados = contenedorNoche_renderizado.querySelectorAll(`[apartamentoIDV]`)
                                    selectorApartamentosRenderizados.forEach((apartamentoRenderizado) => {
                                        const apartamentoIDVRenderizado = apartamentoRenderizado.getAttribute("apartamentoIDV")
                                        if (!apartamentosIDVArray.includes(apartamentoIDVRenderizado)) {
                                            apartamentoRenderizado?.remove()
                                        }
                                    })


                                    for (const [apartamentoIDV, desglosePorApartamento] of Object.entries(apartamentosPorNoche)) {
                                        const apartamentoUI = desglosePorApartamento.apartamentoUI
                                        const precioNetoApartamento = desglosePorApartamento.precioNetoApartamento

                                        const contenedorApartamento_selector = contenedorNoche_renderizado.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                                        if (!contenedorApartamento_selector) {

                                            const contenedorApartamento = document.createElement("div")
                                            contenedorApartamento.classList.add(
                                                "contenedorApartamento",
                                            )
                                            contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                            contenedorNoche_renderizado.appendChild(contenedorApartamento)
                                            if (modoUI === "administracion") {
                                                contenedorApartamento.classList.add("comportamientoBotonApartamento")
                                                contenedorApartamento.addEventListener("click", () => {
                                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.sobreControlPrecios.componentesUI.nocheUI({
                                                        fechaNoche,
                                                        apartamentoIDV,
                                                        instanciaUID_contenedorFinanciero: instanciaUID
                                                    })
                                                })
                                            }
                                            if (modoUI === "simulador") {
                                                contenedorApartamento.classList.add("comportamientoBotonApartamento")
                                                contenedorApartamento.addEventListener("click", () => {
                                                    casaVitini.view.detallesSimulacion.componentesUI.sobreControlPrecios.nocheUI({
                                                        fechaNoche,
                                                        apartamentoIDV,
                                                        instanciaUID_contenedorFinanciero: instanciaUID
                                                    })
                                                })
                                            }

                                            const contenedorApartamentoYTotal = document.createElement("div")
                                            contenedorApartamentoYTotal.classList.add("padding6")
                                            contenedorApartamentoYTotal.setAttribute("contenedor", "tituloApartamentoYTotales")

                                            const tituloApartamento = document.createElement("div")
                                            tituloApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                            tituloApartamento.classList.add(
                                                "reserva_resumen_apartamentoUIPrecio",
                                            )
                                            tituloApartamento.classList.add("negrita")
                                            tituloApartamento.classList.add("colorGris")
                                            tituloApartamento.textContent = apartamentoUI

                                            contenedorApartamentoYTotal.appendChild(tituloApartamento)
                                            const precioNetoApartamentoUI = document.createElement("div")
                                            precioNetoApartamentoUI.setAttribute("contenedor", "precioNetoApartamento")
                                            precioNetoApartamentoUI.classList.add(
                                                "reserva_resumen_apartamentoUIPrecio",
                                            )


                                            contenedorApartamentoYTotal.appendChild(precioNetoApartamentoUI)
                                            contenedorApartamento.appendChild(contenedorApartamentoYTotal)
                                        }
                                        const contenedorApartamento_renderizado = contenedorNoche_renderizado.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)

                                        const contenedorTotalApartamentoYTotales_renderizado = contenedorApartamento_renderizado.querySelector("[contenedor=tituloApartamentoYTotales]")

                                        if (modoUI === "administracion") {
                                            if (contenedorSobreControles
                                                &&
                                                contenedorSobreControles.hasOwnProperty(fechaNoche)
                                                &&
                                                contenedorSobreControles[fechaNoche].hasOwnProperty(apartamentoIDV)) {
                                                const sobreControlUI_selector = contenedorTotalApartamentoYTotales_renderizado.querySelector("[contenedor=sobreControl]")
                                                if (!sobreControlUI_selector) {
                                                    const contenedorSobreControlUI = document.createElement("div")
                                                    contenedorSobreControlUI.setAttribute("contenedor", "sobreControl")
                                                    contenedorSobreControlUI.classList.add(
                                                        "negrita"
                                                    )
                                                    contenedorSobreControlUI.textContent = "Sobre control aplicado."
                                                    contenedorTotalApartamentoYTotales_renderizado.appendChild(contenedorSobreControlUI)
                                                }
                                            } else {
                                                contenedorTotalApartamentoYTotales_renderizado.querySelector("[contenedor=sobreControl]")?.remove()
                                            }
                                        }
                                        if (modoUI === "simulador") {
                                            if (contenedorSobreControles
                                                &&
                                                contenedorSobreControles.hasOwnProperty(fechaNoche)
                                                &&
                                                contenedorSobreControles[fechaNoche].hasOwnProperty(apartamentoIDV)) {
                                                const sobreControlUI_selector = contenedorTotalApartamentoYTotales_renderizado.querySelector("[contenedor=sobreControl]")
                                                if (!sobreControlUI_selector) {
                                                    const contenedorSobreControlUI = document.createElement("div")
                                                    contenedorSobreControlUI.setAttribute("contenedor", "sobreControl")
                                                    contenedorSobreControlUI.classList.add(
                                                        "negrita"
                                                    )
                                                    contenedorSobreControlUI.textContent = "Sobre control aplicado."
                                                    contenedorTotalApartamentoYTotales_renderizado.appendChild(contenedorSobreControlUI)
                                                }
                                            } else {
                                                contenedorTotalApartamentoYTotales_renderizado.querySelector("[contenedor=sobreControl]")?.remove()
                                            }
                                        }
                                        const precioNetoApartamentoSelector = contenedorApartamento_renderizado.querySelector("[contenedor=precioNetoApartamento]")
                                        precioNetoApartamentoSelector.textContent = precioNetoApartamento + "$ Neto del apartamento"

                                    }
                                }
                            },
                            porApartamento: (data) => {
                                const destino = data.destino
                                const desglosePorApartamento = data.desglosePorApartamento

                                const porApartamento_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=reserva] [contenedor=data]").querySelector("[contenedor=porApartamento]")
                                if (!porApartamento_selector) {
                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add("contenedorPorApartamento",
                                        "flexVertical",
                                        "gap6"
                                    )
                                    contenedor.setAttribute("contenedor", "porApartamento")
                                    contenedor.setAttribute("componente", "plegable")


                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                        "padding6"
                                    )
                                    tituloContendor.textContent = "Desglose por apartamento"
                                    contenedor.appendChild(tituloContendor)
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=reserva] [contenedor=data]").appendChild(contenedor)
                                }
                                const porApartamento_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=reserva] [contenedor=data]").querySelector("[contenedor=porApartamento]")

                                const selectorPorApartamentosRenderizados = porApartamento_renderizado.querySelectorAll(`[apartamentoIDV]`)
                                const apartamentosIDV_porRenderizar = Object.keys(desglosePorApartamento)

                                selectorPorApartamentosRenderizados.forEach((apartamento) => {
                                    const porApartamentoRenderizado = apartamento.getAttribute("apartamentoIDV")
                                    if (!apartamentosIDV_porRenderizar.includes(porApartamentoRenderizado)) {
                                        apartamento?.remove()
                                    }
                                })

                                for (const [apartamentoIDV, detalles] of Object.entries(desglosePorApartamento)) {
                                    const apartamentoUI = detalles.apartamentoUI
                                    const totalNeto = detalles.totalNeto
                                    const precioMedioNetoNoche = detalles.precioMedioNetoNoche

                                    const contenedorApartamento_selector = porApartamento_renderizado.querySelector(`[apartamentoIDV=${apartamentoIDV}]`)
                                    if (!contenedorApartamento_selector) {
                                        const contenedorApartamento = document.createElement("div")
                                        contenedorApartamento.classList.add("contenedorApartamento")
                                        contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                        porApartamento_renderizado.appendChild(contenedorApartamento)

                                        const contenedorTituloYtotal = document.createElement("div")
                                        contenedorTituloYtotal.setAttribute("contenedor", "tituloYTotal")
                                        contenedorTituloYtotal.classList.add(
                                            "padding6"
                                        )

                                        const apartamentoUITitulo = document.createElement("div")
                                        apartamentoUITitulo.classList.add("contenedorTextoOferta")
                                        apartamentoUITitulo.classList.add("negrita")
                                        apartamentoUITitulo.textContent = apartamentoUI
                                        contenedorTituloYtotal.appendChild(apartamentoUITitulo)
                                        const apartamentoUIPrecioNetoTotal = document.createElement("div")
                                        apartamentoUIPrecioNetoTotal.classList.add("textoDetallesPorApartamento")
                                        apartamentoUIPrecioNetoTotal.setAttribute("dato", "totalNeto")
                                        contenedorTituloYtotal.appendChild(apartamentoUIPrecioNetoTotal)

                                        const apartamentoUIPrecioPromedioPorNoche = document.createElement("div")
                                        apartamentoUIPrecioPromedioPorNoche.classList.add("textoDetallesPorApartamento")
                                        apartamentoUIPrecioPromedioPorNoche.setAttribute("dato", "precioMedioNetoNoche")
                                        contenedorTituloYtotal.appendChild(apartamentoUIPrecioPromedioPorNoche)
                                        contenedorApartamento.appendChild(contenedorTituloYtotal)
                                    }
                                    const contenedorApartamento_renderizado = porApartamento_renderizado.querySelector(`[apartamentoIDV=${apartamentoIDV}]`)

                                    const precioNetoApartamentoUI = contenedorApartamento_renderizado.querySelector("[dato=totalNeto]")
                                    precioNetoApartamentoUI.textContent = totalNeto + "$ Total neto"

                                    const precioMedioNetoNocheApartamentoUI = contenedorApartamento_renderizado.querySelector("[dato=precioMedioNetoNoche]")
                                    precioMedioNetoNocheApartamentoUI.textContent = precioMedioNetoNoche + "$ Precio medio neto por noche"

                                }

                            },
                            totales: (data) => {
                                const destino = data.destino
                                const totales = data.totales
                                const instanciaUID = data.instanciaUID

                                const totalNeto = totales?.totalNeto
                                const totalFinal = totales?.totalFinal
                                const totalDescuento = totales?.totalDescuento
                                const impuestosAplicados = totales?.impuestosAplicados
                                const promedioNocheNeto = totales?.promedioNocheNeto
                                const promedioNocheNetoConDescuentos = totales?.promedioNocheNetoConDescuentos
                                const totalNetoConDescuentos = totales?.totalNetoConDescuentos
                                const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                const modoUI = contenedorFinanciero.getAttribute("modoUI")

                                const contenedorTotales_selector = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=reserva] [contenedor=data]").querySelector("[contenedor=totales]")
                                if (!contenedorTotales_selector) {

                                    const totalesUI = document.createElement("div")
                                    totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                                    totalesUI.setAttribute("contenedor", "totales")
                                    totalesUI.setAttribute("componente", "plegable")
                                    document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=reserva] [contenedor=data]").appendChild(totalesUI)

                                    const totalesUITituloBloque = document.createElement("div")
                                    totalesUITituloBloque.classList.add("textoCentrado", "negrita", "padding6")
                                    totalesUITituloBloque.textContent = "Totales del alojamiento de la reserva (Solo alojamiento)"
                                    totalesUI.appendChild(totalesUITituloBloque)

                                }

                                const contenedorTotales_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=reserva] [contenedor=data]").querySelector("[contenedor=totales]")

                                const contenedorTotalesNeto_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")
                                if (!contenedorTotalesNeto_selector) {
                                    const contenedorTotalesNeto = document.createElement("div")
                                    contenedorTotalesNeto.setAttribute("contenedor", "totalesNeto")
                                    contenedorTotalesNeto.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorTotalNetoUI = document.createElement("div")
                                    contenedorTotalNetoUI.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalReservaNetoUI = document.createElement("div")

                                    totalReservaNetoUI.textContent = "Total reserva neto"
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI)

                                    const totalReservaNetoUI_ = document.createElement("div")
                                    totalReservaNetoUI_.setAttribute("dato", "totalNeto")
                                    totalReservaNetoUI_.classList.add(
                                        "negrita"
                                    )
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI_)
                                    contenedorTotalesNeto.appendChild(contenedorTotalNetoUI)

                                    const contenedorPromedioNoche = document.createElement("div")
                                    contenedorPromedioNoche.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalReservaNetoDiaUI = document.createElement("div")

                                    totalReservaNetoDiaUI.textContent = "Precio medio neto de la reserva por noche"
                                    contenedorPromedioNoche.appendChild(totalReservaNetoDiaUI)

                                    const totalReservaNetoDiaUI_ = document.createElement("div")
                                    totalReservaNetoDiaUI_.classList.add("negrita")
                                    totalReservaNetoDiaUI_.setAttribute("dato", "totalNetoNocheMedio")

                                    contenedorPromedioNoche.appendChild(totalReservaNetoDiaUI_)
                                    contenedorTotalesNeto.appendChild(contenedorPromedioNoche)
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesNeto)

                                }
                                const contenedorTotalesNeto_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")

                                const totalNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNeto]")
                                totalNetoUI.textContent = totalNeto

                                const promedioNocheNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNetoNocheMedio]")
                                promedioNocheNetoUI.textContent = promedioNocheNeto

                                const totalesDescuentos_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalesDescuentos_selector && totalDescuento) {
                                    const contenedorTotalesDescuentos = document.createElement("div")
                                    contenedorTotalesDescuentos.setAttribute("contenedor", "totalDescuentos")
                                    contenedorTotalesDescuentos.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesDescuentos)

                                    const contenedorTotalDescuentosAplicados = document.createElement("div")
                                    contenedorTotalDescuentosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalDescuentosAplicadosUI = document.createElement("div")

                                    totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas"
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI)

                                    const totalDescuentosAplicadosUI_ = document.createElement("div")
                                    totalDescuentosAplicadosUI_.classList.add("negrita")
                                    totalDescuentosAplicadosUI_.setAttribute("dato", "totalConDescuentoAplicado")
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalDescuentosAplicados)

                                    const contenedorTotalNetoConDescuentos = document.createElement("div")
                                    contenedorTotalNetoConDescuentos.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalNetoConDescuentosUI = document.createElement("div")

                                    totalNetoConDescuentosUI.textContent = "Total neto con descuentos aplicados"
                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI)

                                    const totalNetoConDescuentosUI_ = document.createElement("div")
                                    totalNetoConDescuentosUI_.classList.add("negrita")
                                    totalNetoConDescuentosUI_.setAttribute("dato", "totalNetoConDescuentos")

                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalNetoConDescuentos)


                                    const contenedorPromedio = document.createElement("div")
                                    contenedorPromedio.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const precioMedioConDescuentos = document.createElement("div")

                                    precioMedioConDescuentos.textContent = "Precio medio neto de la reserva por noche con descuentos aplicados"
                                    contenedorPromedio.appendChild(precioMedioConDescuentos)

                                    const precioMedioConDescuentos_ = document.createElement("div")
                                    precioMedioConDescuentos_.classList.add("negrita")
                                    precioMedioConDescuentos_.setAttribute("dato", "precioMedioConDescuentos")

                                    contenedorPromedio.appendChild(precioMedioConDescuentos_)
                                    contenedorTotalesDescuentos.appendChild(contenedorPromedio)
                                }
                                const totalesDescuentos_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalDescuento) {
                                    totalesDescuentos_renderizado?.remove()
                                } else {
                                    const totalConDescuentosAplicadosUI = totalesDescuentos_renderizado.querySelector("[dato=totalConDescuentoAplicado]")

                                    totalConDescuentosAplicadosUI.textContent = totalDescuento

                                    const totalConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                                    totalConDescuentosUI.textContent = totalNetoConDescuentos

                                    const promedioNocheNetoConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=precioMedioConDescuentos]")
                                    promedioNocheNetoConDescuentosUI.textContent = promedioNocheNetoConDescuentos
                                }

                                const contenedorTotalesFinal_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")
                                if (!contenedorTotalesFinal_selector) {

                                    const contenedorTotalesFinal = document.createElement("div")
                                    contenedorTotalesFinal.setAttribute("contenedor", "totalesFinal")
                                    contenedorTotalesFinal.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesFinal)
                                    const contenedorTotalImpuestosAplicados = document.createElement("div")
                                    contenedorTotalImpuestosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalImpuestosUI = document.createElement("div")

                                    totalImpuestosUI.textContent = "Total impuestos aplicados"
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI)

                                    const totalImpuestosUI_ = document.createElement("div")
                                    totalImpuestosUI_.classList.add("negrita")
                                    totalImpuestosUI_.setAttribute("dato", "impuestosAplicados")
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI_)

                                    contenedorTotalesFinal.appendChild(contenedorTotalImpuestosAplicados)

                                    const contenedorTotalFinal = document.createElement("div")
                                    contenedorTotalFinal.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalConImpuestosUI = document.createElement("div")
                                    totalConImpuestosUI.textContent = "Total final"
                                    contenedorTotalFinal.appendChild(totalConImpuestosUI)

                                    const totalConImpuestosUI_ = document.createElement("div")
                                    totalConImpuestosUI_.classList.add("negrita")
                                    totalConImpuestosUI_.setAttribute("dato", "totalFinal")

                                    contenedorTotalFinal.appendChild(totalConImpuestosUI_)
                                    contenedorTotalesFinal.appendChild(contenedorTotalFinal)
                                }
                                const contenedorTotalesFinal_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")


                                const impuestosAplicadosUI = contenedorTotalesFinal_renderizado.querySelector("[dato=impuestosAplicados]")
                                impuestosAplicadosUI.textContent = impuestosAplicados

                                const totalFinalUI = contenedorTotalesFinal_renderizado.querySelector("[dato=totalFinal]")
                                totalFinalUI.textContent = totalFinal

                            },
                        },
                        complementosDelAlojamientos: {
                            contenedor: (data) => {
                                const destino = data.destino
                                const desglosePorComplementoDeAlojamiento = data.desglosePorComplementoDeAlojamiento
                                const modoUI = data.modoUI

                                if (desglosePorComplementoDeAlojamiento.length === 0 && modoUI === "plaza") {
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos]")?.remove()
                                    return
                                }

                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos]")
                                if (!selector) {

                                    const contenedorPlegable = document.createElement('details');
                                    contenedorPlegable.classList.add("contenedorEntidad", "sobreControlAnimacionGlobal")
                                    contenedorPlegable.setAttribute("entidad", "complementosDelAlojamientos")


                                    const tituloContenedorPlegable = document.createElement('summary');
                                    tituloContenedorPlegable.classList.add(
                                        "padding12",
                                    )
                                    tituloContenedorPlegable.textContent = 'Complementos del alojamiento';
                                    contenedorPlegable.appendChild(tituloContenedorPlegable)

                                    const contenedor = document.createElement("div")
                                    contenedor.setAttribute("contenedor", "data")
                                    contenedorPlegable.appendChild(contenedor)
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedorPlegable)
                                }
                            },
                            porComplemento: (data) => {
                                const destino = data.destino
                                const desglosePorComplementoDeAlojamiento = data.desglosePorComplementoDeAlojamiento
                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos]")
                                if (!selector) { return }
                                const porComplemento_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos] [contenedor=data]").querySelector("[contenedor=porComplemento]")
                                if (!porComplemento_selector) {
                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add(

                                        "flexVertical",
                                        "gap6"
                                    )
                                    contenedor.setAttribute("contenedor", "porComplemento")
                                    contenedor.setAttribute("componente", "plegable")

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                        "padding6"
                                    )
                                    tituloContendor.textContent = "Desglose por complementos de alojamiento"
                                    contenedor.appendChild(tituloContendor)
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos] [contenedor=data]").appendChild(contenedor)

                                }
                                const porComplemento_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos] [contenedor=data]").querySelector("[contenedor=porComplemento]")

                                const complementosUID_Renderizados = []
                                const complementosUI_Renderizados = porComplemento_renderizado.querySelectorAll("[complementoUID]")

                                complementosUI_Renderizados.forEach(complemento => {
                                    complementosUID_Renderizados.push(complemento.complementoUID)
                                });

                                complementosUI_Renderizados.forEach((complementoUI) => {
                                    const complementoUID = complementoUI.getAttribute("complementoUID")
                                    if (!complementosUID_Renderizados.includes(complementoUID)) {
                                        complementoUI?.remove()
                                        // Si no hay complementos, borra el apartamentos
                                    }
                                })

                                const numeroComplementosPorRenderizar = desglosePorComplementoDeAlojamiento.length

                                if (numeroComplementosPorRenderizar === 0) {
                                    const info_selector = porComplemento_renderizado.querySelector("[componente=titulo]")
                                    if (!info_selector) {
                                        const info = document.createElement("p")
                                        info.setAttribute("componente", "titulo")
                                        info.textContent = "No hay complementos de alojamiento seleccionados"
                                        info.classList.add("textoCentrado")
                                        porComplemento_renderizado.appendChild(info)
                                    }
                                } else {
                                    porComplemento_renderizado.querySelector("[componente=titulo]")?.remove()
                                }

                                let posicion = 0
                                for (const complemento of desglosePorComplementoDeAlojamiento) {

                                    const complementoUID_enReserva = complemento.complementoUID
                                    const complementoUI = complemento.complementoUI
                                    const precio = complemento.precio
                                    const definicion = complemento.definicion
                                    const apartamentoUI = complemento.apartamentoUI
                                    const apartamentoIDV = complemento.apartamentoIDV

                                    const tipoPrecio = complemento.tipoPrecio

                                    const noches = complemento.noches
                                    const total = complemento.total

                                    const contenedorApartamento_selector = porComplemento_renderizado.querySelector(`[contenedorApartamento=${apartamentoIDV}]`)
                                    if (!contenedorApartamento_selector) {
                                        const contenedorApartamentosComplementos = document.createElement("div")
                                        contenedorApartamentosComplementos.setAttribute("contenedorApartamento", apartamentoIDV)
                                        contenedorApartamentosComplementos.classList.add(
                                            "flexVertical",
                                            "backgroundGrey1",
                                            "padding6",
                                            "gap6",
                                            "borderRadius18"
                                        )

                                        const titulo = document.createElement("p")
                                        titulo.classList.add("negrita", "padding14")
                                        titulo.textContent = apartamentoUI
                                        contenedorApartamentosComplementos.appendChild(titulo)

                                        porComplemento_renderizado.appendChild(contenedorApartamentosComplementos);
                                    }
                                    const contenedorApartamento_renderizado = porComplemento_renderizado.querySelector(`[contenedorApartamento=${apartamentoIDV}]`)
                                    const complementosRenderizados = contenedorApartamento_renderizado.querySelectorAll("[complementoUID]")

                                    const contenedorComplemento_selector = porComplemento_renderizado.querySelector(`[complementoUID="${complementoUID_enReserva}"]`)
                                    if (!contenedorComplemento_selector) {
                                        const contenedorServicio = document.createElement("div")
                                        contenedorServicio.setAttribute("complementoUID", complementoUID_enReserva)

                                        if (posicion < complementosRenderizados.length) {
                                            const elementosArray = Array.from(complementosRenderizados);
                                            contenedorApartamento_renderizado.insertBefore(contenedorServicio, elementosArray[posicion]);
                                        } else {
                                            contenedorApartamento_renderizado.appendChild(contenedorServicio);
                                        }


                                        const complementoUI_ = document.createElement("div")
                                        complementoUI_.setAttribute("complementoUID_enReserva", complementoUID_enReserva)
                                        complementoUI_.classList.add(
                                            "flexVertical",
                                            "padding14",
                                            "borderGrey1",
                                            "borderRadius14"
                                        )
                                        contenedorServicio.appendChild(complementoUI_)

                                        const contenedorData = document.createElement("div")
                                        contenedorData.classList.add(
                                            "flexVertical",
                                            "gap6",
                                            // "padding10"
                                        )
                                        complementoUI_.appendChild(contenedorData)

                                        const contenedorNombrePublico = document.createElement("div")
                                        contenedorNombrePublico.classList.add(
                                            "flexVertical",
                                        )
                                        contenedorData.appendChild(contenedorNombrePublico)

                                        const tituluNombrePublico = document.createElement("p")
                                        tituluNombrePublico.textContent = `Nombre del complemento de alojamiento`
                                        // contenedorNombrePublico.appendChild(tituluNombrePublico)

                                        const titulo = document.createElement("p")
                                        titulo.classList.add(
                                            "negrita")
                                        titulo.textContent = complementoUI
                                        contenedorNombrePublico.appendChild(titulo)


                                        const precioContructor = (data) => {
                                            const precio = data.precio
                                            const tipoPrecio = data.tipoPrecio
                                            const noches = data.noches
                                            const total = data.total

                                            const nochesUI = noches === "1" ? "noche" : "noches"
                                            if (tipoPrecio === "porNoche") {
                                                return `Total: ${total}$ (${noches} ${nochesUI}, precio por noche ${precio}$)`

                                            } else if (tipoPrecio === "fijoPorReserva") {
                                                return `Total: ${precio}$`
                                            }
                                        }

                                        const precioUI = document.createElement("p")
                                        precioUI.classList.add(
                                            "negrita"
                                        )
                                        precioUI.textContent = precioContructor({
                                            precio, tipoPrecio, noches, total
                                        })
                                        contenedorData.appendChild(precioUI)

                                        const definicionUI = document.createElement("p")
                                        definicionUI.classList.add(
                                        )
                                        definicionUI.textContent = definicion
                                        contenedorData.appendChild(definicionUI)

                                    }
                                    posicion++
                                }

                                const contenedoresVacios = porComplemento_renderizado.querySelectorAll(`[contenedorApartamento]`)
                                contenedoresVacios.forEach((cv) => {
                                    const complementosDelAlojamiento = cv.querySelectorAll("[complementouid_enreserva]")
                                    if (complementosDelAlojamiento.length === 0) {
                                        cv?.remove()
                                    }
                                })
                            },
                            totales: (data) => {
                                const destino = data.destino
                                const totales = data.totales
                                const instanciaUID = data.instanciaUID

                                const totalNeto = totales?.totalNeto
                                const totalFinal = totales?.totalFinal
                                const totalDescuento = totales?.totalDescuento
                                const impuestosAplicados = totales?.impuestosAplicados
                                const totalNetoConDescuentos = totales?.totalNetoConDescuentos || totalNeto
                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos]")
                                if (!selector) { return }
                                const contenedorTotales_selector = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=complementosDelAlojamientos] [contenedor=data]").querySelector("[contenedor=totales]")
                                if (!contenedorTotales_selector) {

                                    const totalesUI = document.createElement("div")
                                    totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                                    totalesUI.setAttribute("contenedor", "totales")
                                    totalesUI.setAttribute("componente", "plegable")
                                    document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=complementosDelAlojamientos] [contenedor=data]").appendChild(totalesUI)

                                    const totalesUITituloBloque = document.createElement("div")
                                    totalesUITituloBloque.classList.add("textoCentrado", "negrita", "padding6")
                                    totalesUITituloBloque.textContent = "Totales de los complementos de alojamiento en la reserva (Solo complementos de alojamiento)"
                                    totalesUI.appendChild(totalesUITituloBloque)

                                }

                                const contenedorTotales_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=complementosDelAlojamientos] [contenedor=data]").querySelector("[contenedor=totales]")

                                const contenedorTotalesNeto_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")
                                if (!contenedorTotalesNeto_selector) {
                                    const contenedorTotalesNeto = document.createElement("div")
                                    contenedorTotalesNeto.setAttribute("contenedor", "totalesNeto")
                                    contenedorTotalesNeto.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorTotalNetoUI = document.createElement("div")
                                    contenedorTotalNetoUI.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalReservaNetoUI = document.createElement("div")

                                    totalReservaNetoUI.textContent = "Total complementos de alojamiento neto"
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI)

                                    const totalReservaNetoUI_ = document.createElement("div")
                                    totalReservaNetoUI_.setAttribute("dato", "totalNeto")
                                    totalReservaNetoUI_.classList.add(
                                        "negrita"
                                    )
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI_)
                                    contenedorTotalesNeto.appendChild(contenedorTotalNetoUI)

                                    contenedorTotales_renderizado.appendChild(contenedorTotalesNeto)

                                }
                                const contenedorTotalesNeto_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")

                                const totalNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNeto]")
                                totalNetoUI.textContent = totalNeto


                                const totalesDescuentos_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalesDescuentos_selector && totalDescuento) {
                                    const contenedorTotalesDescuentos = document.createElement("div")
                                    contenedorTotalesDescuentos.setAttribute("contenedor", "totalDescuentos")
                                    contenedorTotalesDescuentos.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesDescuentos)

                                    const contenedorTotalDescuentosAplicados = document.createElement("div")
                                    contenedorTotalDescuentosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalDescuentosAplicadosUI = document.createElement("div")

                                    totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas exclusivamente a los complementos de alojamiento"
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI)

                                    const totalDescuentosAplicadosUI_ = document.createElement("div")
                                    totalDescuentosAplicadosUI_.classList.add("negrita")
                                    totalDescuentosAplicadosUI_.setAttribute("dato", "totalConDescuentoAplicado")
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalDescuentosAplicados)

                                    const contenedorTotalNetoConDescuentos = document.createElement("div")
                                    contenedorTotalNetoConDescuentos.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalNetoConDescuentosUI = document.createElement("div")

                                    totalNetoConDescuentosUI.textContent = "Total neto con descuentos aplicados"
                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI)

                                    const totalNetoConDescuentosUI_ = document.createElement("div")
                                    totalNetoConDescuentosUI_.classList.add("negrita")
                                    totalNetoConDescuentosUI_.setAttribute("dato", "totalNetoConDescuentos")

                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalNetoConDescuentos)

                                }
                                const totalesDescuentos_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalDescuento) {
                                    totalesDescuentos_renderizado?.remove()
                                } else {
                                    const totalConDescuentosAplicadosUI = totalesDescuentos_renderizado.querySelector("[dato=totalConDescuentoAplicado]")
                                    totalConDescuentosAplicadosUI.textContent = totalDescuento

                                    const totalConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                                    totalConDescuentosUI.textContent = totalNetoConDescuentos
                                }

                                const contenedorTotalesFinal_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")
                                if (!contenedorTotalesFinal_selector) {

                                    const contenedorTotalesFinal = document.createElement("div")
                                    contenedorTotalesFinal.setAttribute("contenedor", "totalesFinal")
                                    contenedorTotalesFinal.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesFinal)
                                    const contenedorTotalImpuestosAplicados = document.createElement("div")
                                    contenedorTotalImpuestosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalImpuestosUI = document.createElement("div")

                                    totalImpuestosUI.textContent = "Total impuestos aplicados exclusivamente a los complementos de alojamiento"
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI)

                                    const totalImpuestosUI_ = document.createElement("div")
                                    totalImpuestosUI_.classList.add("negrita")
                                    totalImpuestosUI_.setAttribute("dato", "impuestosAplicados")
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI_)

                                    contenedorTotalesFinal.appendChild(contenedorTotalImpuestosAplicados)

                                    const contenedorTotalFinal = document.createElement("div")
                                    contenedorTotalFinal.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalConImpuestosUI = document.createElement("div")
                                    totalConImpuestosUI.textContent = "Total final de los complementos de alojamiento"
                                    contenedorTotalFinal.appendChild(totalConImpuestosUI)

                                    const totalConImpuestosUI_ = document.createElement("div")
                                    totalConImpuestosUI_.classList.add("negrita")
                                    totalConImpuestosUI_.setAttribute("dato", "totalFinal")

                                    contenedorTotalFinal.appendChild(totalConImpuestosUI_)
                                    contenedorTotalesFinal.appendChild(contenedorTotalFinal)
                                }
                                const contenedorTotalesFinal_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")


                                const impuestosAplicadosUI = contenedorTotalesFinal_renderizado.querySelector("[dato=impuestosAplicados]")
                                impuestosAplicadosUI.textContent = impuestosAplicados

                                const totalFinalUI = contenedorTotalesFinal_renderizado.querySelector("[dato=totalFinal]")
                                totalFinalUI.textContent = totalFinal

                            },

                        },
                        servicios: {
                            contenedor: (data) => {
                                const destino = data.destino
                                const desglosePorServicios = data.desglosePorServicios
                                const modoUI = data.modoUI



                                if (desglosePorServicios.length === 0 && modoUI === "plaza") {
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio]")?.remove()
                                    return
                                }

                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio]")
                                if (!selector) {
                                    const contenedorPlegable = document.createElement('details');
                                    contenedorPlegable.classList.add("contenedorEntidad", "sobreControlAnimacionGlobal")
                                    contenedorPlegable.setAttribute("entidad", "servicio")

                                    const tituloContenedorPlegable = document.createElement('summary');
                                    tituloContenedorPlegable.classList.add(
                                        "padding12",
                                    )
                                    tituloContenedorPlegable.textContent = 'Servicios';
                                    contenedorPlegable.appendChild(tituloContenedorPlegable)

                                    const contenedor = document.createElement("div")
                                    contenedor.setAttribute("contenedor", "data")
                                    contenedorPlegable.appendChild(contenedor)

                                    document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedorPlegable)
                                }
                            },
                            porServicio: (data) => {
                                const destino = data.destino
                                const desglosePorServicios = data.desglosePorServicios


                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio]")
                                if (!selector) { return }
                                const porServicio_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio] [contenedor=data]").querySelector("[contenedor=porServicio]")
                                if (!porServicio_selector) {
                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add(
                                        "padding6",
                                        "flexVertical",
                                        "gap6"
                                    )
                                    contenedor.setAttribute("contenedor", "porServicio")
                                    contenedor.setAttribute("componente", "plegable")

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                        "padding6"
                                    )
                                    tituloContendor.textContent = "Desglose por servicio"
                                    contenedor.appendChild(tituloContendor)
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio] [contenedor=data]").appendChild(contenedor)

                                }
                                const porServicio_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio] [contenedor=data]").querySelector("[contenedor=porServicio]")

                                const serviciosUID_Renderizados = []
                                const serviciosUI_Renderizados = porServicio_renderizado.querySelectorAll("[servicioUID]")

                                serviciosUI_Renderizados.forEach(servicio => {
                                    serviciosUID_Renderizados.push(servicio.servicioUID)
                                });

                                serviciosUI_Renderizados.forEach((servicioUI) => {
                                    const servicioUID = servicioUI.getAttribute("servicioUID")
                                    if (!serviciosUID_Renderizados.includes(servicioUID)) {
                                        servicioUI?.remove()
                                    }
                                })

                                const numeroServiciosPorRenderizad = desglosePorServicios.length
                                if (numeroServiciosPorRenderizad === 0) {
                                    const info_selector = porServicio_renderizado.querySelector("[componente=titulo]")
                                    if (!info_selector) {
                                        const info = document.createElement("p")
                                        info.setAttribute("componente", "titulo")
                                        info.textContent = "No hay servicios seleccionados"
                                        info.classList.add("textoCentrado")
                                        porServicio_renderizado.appendChild(info)
                                    }
                                }

                                let posicion = 0

                                for (const contenedorServicio of desglosePorServicios) {

                                    const servicio = contenedorServicio.servicio
                                    const opcionesSolicitadasDelservicio = contenedorServicio.opcionesSolicitadasDelservicio

                                    const servicioUID_enReserva = servicio.servicioUID
                                    const serviciosRenderizados = porServicio_renderizado.querySelectorAll("[servicioUID]")

                                    const contenedorServicio_selector = porServicio_renderizado.querySelector(`[servicioUID="${servicioUID_enReserva}"]`)
                                    if (!contenedorServicio_selector) {
                                        const contenedorServicio = document.createElement("div")
                                        contenedorServicio.setAttribute("servicioUID", servicioUID_enReserva)

                                        const nombreInterno = servicio.nombre
                                        const contenedor = servicio.contenedor

                                        const definicion = contenedor.definicion
                                        const fechaFinal = contenedor.fechaFinal
                                        const duracionIDV = contenedor.duracionIDV
                                        const fechaInicio = contenedor.fechaInicio
                                        const tituloPublico = contenedor.tituloPublico
                                        const disponibilidadIDV = contenedor.disponibilidadIDV
                                        const gruposDeOpciones = contenedor.gruposDeOpciones



                                        const diccionario = {
                                            disponibilidad: {
                                                constante: "Disponible",
                                                variable: "Disponibilidad variable"
                                            }
                                        }
                                        if (posicion < serviciosRenderizados.length) {
                                            const elementosArray = Array.from(serviciosRenderizados);
                                            porServicio_renderizado.insertBefore(contenedorServicio, elementosArray[posicion]);
                                        } else {
                                            porServicio_renderizado.appendChild(contenedorServicio);
                                        }


                                        const servicioUI = document.createElement("div")
                                        servicioUI.setAttribute("servicioUID_enReserva", servicioUID_enReserva)
                                        servicioUI.classList.add(
                                            "flexVertical",
                                            "backgroundGrey1",
                                            "borderRadius18",
                                            "gap6", "padding6"
                                        )
                                        const contenedorData = document.createElement("div")
                                        contenedorData.classList.add(
                                            "flexVertical",
                                            "gap6",
                                            "padding14"
                                        )
                                        servicioUI.appendChild(contenedorData)

                                        if (nombreInterno) {
                                            const contenedorNombreInterno = document.createElement("div")
                                            contenedorNombreInterno.classList.add(
                                                "flexVertical",
                                            )
                                            contenedorData.appendChild(contenedorNombreInterno)

                                            const tituluNombreInternoUI = document.createElement("p")
                                            tituluNombreInternoUI.textContent = `Nombre administrativo`
                                            contenedorNombreInterno.appendChild(tituluNombreInternoUI)

                                            const nombreInternoUI = document.createElement("p")
                                            nombreInternoUI.classList.add(
                                                "negrita")
                                            nombreInternoUI.textContent = `${nombreInterno}`
                                            contenedorNombreInterno.appendChild(nombreInternoUI)
                                        }


                                        const contenedorNombrePublico = document.createElement("div")
                                        contenedorNombrePublico.classList.add(
                                            "flexVertical",
                                        )
                                        contenedorData.appendChild(contenedorNombrePublico)

                                        const tituluNombrePublico = document.createElement("p")
                                        tituluNombrePublico.textContent = `Nombre público`
                                        contenedorNombrePublico.appendChild(tituluNombrePublico)

                                        const titulo = document.createElement("p")
                                        titulo.classList.add(
                                            "negrita")
                                        titulo.textContent = tituloPublico
                                        contenedorNombrePublico.appendChild(titulo)


                                        const disponibilidadUI = document.createElement("p")
                                        disponibilidadUI.classList.add(
                                        )
                                        disponibilidadUI.textContent = diccionario.disponibilidad[disponibilidadIDV]
                                        contenedorData.appendChild(disponibilidadUI)


                                        if (disponibilidadIDV === "variable") {

                                            const info = document.createElement("p")
                                            info.classList.add(
                                            )
                                            info.textContent = `Este servicio tiene una disponibilidad limitada. Es por eso que si selecciona este servicio, nos pondremos en contacto con el titular de la reserva en las próximas horas para confirmarle la disponibilidad del servicio para su reserva.`
                                            contenedorData.appendChild(info)
                                        }

                                        // const precioUI = document.createElement("p")
                                        // precioUI.classList.add(
                                        //     "negrita"
                                        // )
                                        // precioUI.textContent = precio + "$"
                                        // contenedorData.appendChild(precioUI)

                                        if (duracionIDV === "rango") {
                                            const contenedorDuracion = document.createElement("div")
                                            contenedorDuracion.classList.add(
                                                "flexVertical",

                                            )
                                            contenedorData.appendChild(contenedorDuracion)

                                            const info = document.createElement("p")
                                            info.classList.add("negrita")
                                            info.textContent = `Servicio disponible solo desde ${fechaInicio} hata ${fechaFinal}. Ambas fechas incluidas.`
                                            contenedorDuracion.appendChild(info)

                                        }
                                        const definicionUI = document.createElement("p")
                                        definicionUI.classList.add(
                                        )
                                        definicionUI.textContent = definicion
                                        contenedorData.appendChild(definicionUI)


                                        Object.entries(gruposDeOpciones).forEach(([grupoIDV, gDP]) => {
                                            const nombreGrupo = gDP.nombreGrupo
                                            const opcionesGrupo = gDP.opcionesGrupo

                                            const contenedorGrupo = document.createElement("div")
                                            contenedorGrupo.setAttribute("grupoIDV", grupoIDV)
                                            contenedorGrupo.classList.add(
                                                "flexVertical", "gap6", "borderGrey1", "borderRadius14", "padding6"
                                            )

                                            const tituloGrupo = document.createElement("p")
                                            tituloGrupo.classList.add("negrita", "padding10")
                                            tituloGrupo.textContent = nombreGrupo
                                            contenedorGrupo.appendChild(tituloGrupo)


                                            const contenedorOpcionesGrupo = document.createElement("div")
                                            contenedorOpcionesGrupo.classList.add(
                                                "flexVertical", "gap6"
                                            )
                                            contenedorGrupo.appendChild(contenedorOpcionesGrupo)

                                            opcionesGrupo.forEach((op) => {
                                                const opcionIDV = op.opcionIDV
                                                const nombreOpcion = op.nombreOpcion
                                                const precioOpcion = op.precioOpcion ? op.precioOpcion + "$" : "0.00$ (Sin coste añadido)"

                                                const selectorOpcionesGrupo = opcionesSolicitadasDelservicio.opcionesSeleccionadas[grupoIDV] || []
                                                if (selectorOpcionesGrupo.includes(opcionIDV)) {
                                                    const contenedorOpcion = document.createElement("div")
                                                    contenedorOpcion.classList.add(
                                                        "flexVertical", "gap6", "backgroundGrey1", "borderRadius10", "padding14"
                                                    )
                                                    contenedorOpcionesGrupo.appendChild(contenedorOpcion)

                                                    const grupoRenderizado_selector = contenedorData.querySelector(`[grupoIDV="${grupoIDV}"]`)
                                                    if (!grupoRenderizado_selector) {
                                                        servicioUI.appendChild(contenedorGrupo)
                                                    }

                                                    const opcionUI = document.createElement("p")
                                                    opcionUI.setAttribute("opcionIDV", opcionIDV)

                                                    opcionUI.textContent = nombreOpcion
                                                    contenedorOpcion.appendChild(opcionUI)


                                                    const precioUI = document.createElement("p")
                                                    precioUI.setAttribute("opcionIDV", opcionIDV)
                                                    precioUI.classList.add(
                                                        "textoNegrita"
                                                    )
                                                    precioUI.textContent = precioOpcion
                                                    contenedorOpcion.appendChild(precioUI)
                                                }
                                            })

                                        })

                                        contenedorServicio.appendChild(servicioUI)
                                    }
                                    posicion++










                                }

                            },
                            totales: (data) => {
                                const destino = data.destino
                                const totales = data.totales
                                const instanciaUID = data.instanciaUID

                                const totalNeto = totales?.totalNeto
                                const totalFinal = totales?.totalFinal
                                const totalDescuento = totales?.totalDescuento
                                const impuestosAplicados = totales?.impuestosAplicados
                                const totalNetoConDescuentos = totales?.totalNetoConDescuentos || totalNeto

                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio]")
                                if (!selector) { return }
                                const contenedorTotales_selector = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=servicio] [contenedor=data]").querySelector("[contenedor=totales]")
                                if (!contenedorTotales_selector) {

                                    const totalesUI = document.createElement("div")
                                    totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                                    totalesUI.setAttribute("contenedor", "totales")
                                    totalesUI.setAttribute("componente", "plegable")
                                    document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=servicio] [contenedor=data]").appendChild(totalesUI)

                                    const totalesUITituloBloque = document.createElement("div")
                                    totalesUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                                    totalesUITituloBloque.textContent = "Totales de los servicios en la reserva (Solo servicios)"
                                    totalesUI.appendChild(totalesUITituloBloque)

                                }

                                const contenedorTotales_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=servicio] [contenedor=data]").querySelector("[contenedor=totales]")

                                const contenedorTotalesNeto_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")
                                if (!contenedorTotalesNeto_selector) {
                                    const contenedorTotalesNeto = document.createElement("div")
                                    contenedorTotalesNeto.setAttribute("contenedor", "totalesNeto")
                                    contenedorTotalesNeto.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorTotalNetoUI = document.createElement("div")
                                    contenedorTotalNetoUI.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalReservaNetoUI = document.createElement("div")

                                    totalReservaNetoUI.textContent = "Total servicios neto"
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI)

                                    const totalReservaNetoUI_ = document.createElement("div")
                                    totalReservaNetoUI_.setAttribute("dato", "totalNeto")
                                    totalReservaNetoUI_.classList.add(
                                        "negrita"
                                    )
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI_)
                                    contenedorTotalesNeto.appendChild(contenedorTotalNetoUI)

                                    contenedorTotales_renderizado.appendChild(contenedorTotalesNeto)

                                }
                                const contenedorTotalesNeto_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")

                                const totalNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNeto]")
                                totalNetoUI.textContent = totalNeto


                                const totalesDescuentos_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalesDescuentos_selector && totalDescuento) {
                                    const contenedorTotalesDescuentos = document.createElement("div")
                                    contenedorTotalesDescuentos.setAttribute("contenedor", "totalDescuentos")
                                    contenedorTotalesDescuentos.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesDescuentos)

                                    const contenedorTotalDescuentosAplicados = document.createElement("div")
                                    contenedorTotalDescuentosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalDescuentosAplicadosUI = document.createElement("div")

                                    totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas exclusivamente a los servicios"
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI)

                                    const totalDescuentosAplicadosUI_ = document.createElement("div")
                                    totalDescuentosAplicadosUI_.classList.add("negrita")
                                    totalDescuentosAplicadosUI_.setAttribute("dato", "totalConDescuentoAplicado")
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalDescuentosAplicados)

                                    const contenedorTotalNetoConDescuentos = document.createElement("div")
                                    contenedorTotalNetoConDescuentos.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalNetoConDescuentosUI = document.createElement("div")

                                    totalNetoConDescuentosUI.textContent = "Total neto con descuentos aplicados"
                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI)

                                    const totalNetoConDescuentosUI_ = document.createElement("div")
                                    totalNetoConDescuentosUI_.classList.add("negrita")
                                    totalNetoConDescuentosUI_.setAttribute("dato", "totalNetoConDescuentos")

                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalNetoConDescuentos)

                                }
                                const totalesDescuentos_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalDescuento) {
                                    totalesDescuentos_renderizado?.remove()
                                } else {
                                    const totalConDescuentosAplicadosUI = totalesDescuentos_renderizado.querySelector("[dato=totalConDescuentoAplicado]")
                                    totalConDescuentosAplicadosUI.textContent = totalDescuento

                                    const totalConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                                    totalConDescuentosUI.textContent = totalNetoConDescuentos
                                }

                                const contenedorTotalesFinal_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")
                                if (!contenedorTotalesFinal_selector) {

                                    const contenedorTotalesFinal = document.createElement("div")
                                    contenedorTotalesFinal.setAttribute("contenedor", "totalesFinal")
                                    contenedorTotalesFinal.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesFinal)
                                    const contenedorTotalImpuestosAplicados = document.createElement("div")
                                    contenedorTotalImpuestosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalImpuestosUI = document.createElement("div")

                                    totalImpuestosUI.textContent = "Total impuestos aplicados exclusivamente a los servicios"
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI)

                                    const totalImpuestosUI_ = document.createElement("div")
                                    totalImpuestosUI_.classList.add("negrita")
                                    totalImpuestosUI_.setAttribute("dato", "impuestosAplicados")
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI_)

                                    contenedorTotalesFinal.appendChild(contenedorTotalImpuestosAplicados)

                                    const contenedorTotalFinal = document.createElement("div")
                                    contenedorTotalFinal.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalConImpuestosUI = document.createElement("div")
                                    totalConImpuestosUI.textContent = "Total final de los servicios"
                                    contenedorTotalFinal.appendChild(totalConImpuestosUI)

                                    const totalConImpuestosUI_ = document.createElement("div")
                                    totalConImpuestosUI_.classList.add("negrita")
                                    totalConImpuestosUI_.setAttribute("dato", "totalFinal")

                                    contenedorTotalFinal.appendChild(totalConImpuestosUI_)
                                    contenedorTotalesFinal.appendChild(contenedorTotalFinal)
                                }
                                const contenedorTotalesFinal_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")


                                const impuestosAplicadosUI = contenedorTotalesFinal_renderizado.querySelector("[dato=impuestosAplicados]")
                                impuestosAplicadosUI.textContent = impuestosAplicados

                                const totalFinalUI = contenedorTotalesFinal_renderizado.querySelector("[dato=totalFinal]")
                                totalFinalUI.textContent = totalFinal

                            },

                        }

                    },
                    ofertas: {
                        hub: function (data) {
                            const destino = data.destino
                            const instanciaUID = data.instanciaUID
                            const contenedorOfertas = data.contenedorOfertas
                            const ofertas = contenedorOfertas.ofertas
                            const porTotal = contenedorOfertas.entidades.reserva.desgloses.porTotal
                            const entidades = contenedorOfertas.entidades


                            this.ofertaUI({
                                destino,
                                ofertas,
                                porTotal,
                                entidades,
                                instanciaUID

                            })
                        },
                        ofertaUI: function (data) {

                            const destino = data.destino
                            const ofertas = data.ofertas
                            const ofertasPorCondicion = ofertas.porCondicion
                            const ofertasPorAdministrador = ofertas.porAdministrador
                            const porTotal = data.porTotal
                            const entidades = data.entidades



                            const ofertasPorCondicionArray = Object.keys(ofertasPorCondicion)
                            const ofertasPorAdministradorArray = Object.keys(ofertasPorAdministrador)
                            const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                            const modoUI = contenedorFinanciero.getAttribute("modoUI")
                            const instanciaUID = data.instanciaUID

                            if (ofertasPorCondicionArray.length === 0
                                &&
                                ofertasPorAdministradorArray.length === 0
                                && modoUI === "plaza") {
                                document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=ofertas]")?.remove()
                                return
                            }

                            const contenedorOfertas_selector = contenedorFinanciero.querySelector("[contenedor=ofertas]")
                            if (!contenedorOfertas_selector) {
                                const contenedorPlegable = document.createElement("details")
                                contenedorPlegable.classList.add("contenedorEntidad", "sobreControlAnimacionGlobal")
                                contenedorPlegable.setAttribute("contenedor", "ofertas")
                                contenedorPlegable.setAttribute("componente", "plegable")
                                // contenedorPlegable.classList.add(
                                //     "flexVertical",
                                //     "gap6",

                                // )
                                contenedorFinanciero.appendChild(contenedorPlegable)

                                const tituloContendor = document.createElement("summary")
                                tituloContendor.classList.add(
                                    "padding12",
                                )
                                tituloContendor.textContent = "Ofertas aplicadas"
                                contenedorPlegable.appendChild(tituloContendor)

                                const contenedor = document.createElement("div")
                                contenedor.setAttribute("contenedor", "data")
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6",

                                )
                                contenedorPlegable.appendChild(contenedor)

                                if (modoUI === "administracion") {
                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6"
                                    )

                                    const botonInsertarDescuento = document.createElement("div")
                                    botonInsertarDescuento.classList.add(
                                        "botonV3",
                                        "comportamientoBoton"
                                    )
                                    botonInsertarDescuento.textContent = "Insertar descuento"
                                    botonInsertarDescuento.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.insertarDescuentos.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    contenedorBotones.appendChild(botonInsertarDescuento)
                                    contenedor.appendChild(contenedorBotones)

                                    const botonDescuentosCompatibles = document.createElement("div")
                                    botonDescuentosCompatibles.classList.add(
                                        "botonV3",
                                        "comportamientoBoton"
                                    )
                                    botonDescuentosCompatibles.textContent = "Descuentos compatibles"
                                    botonDescuentosCompatibles.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.insertarOfertasCompatibles.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    contenedorBotones.appendChild(botonDescuentosCompatibles)
                                    contenedor.appendChild(contenedorBotones)
                                }
                                if (modoUI === "simulador") {
                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6",
                                    )

                                    const botonInsertarDescuento = document.createElement("div")
                                    botonInsertarDescuento.classList.add(
                                        "botonV3",
                                        "comportamientoBoton"
                                    )
                                    botonInsertarDescuento.textContent = "Insertar descuento"
                                    botonInsertarDescuento.addEventListener("click", () => {
                                        casaVitini.view.detallesSimulacion.componentesUI.insertarDescuentos.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    contenedorBotones.appendChild(botonInsertarDescuento)
                                    contenedor.appendChild(contenedorBotones)

                                    const botonDescuentosCompatibles = document.createElement("div")
                                    botonDescuentosCompatibles.classList.add(
                                        "botonV3",
                                        "comportamientoBoton"
                                    )
                                    botonDescuentosCompatibles.textContent = "Descuentos compatibles"
                                    botonDescuentosCompatibles.addEventListener("click", () => {
                                        casaVitini.view.detallesSimulacion.componentesUI.insertarOfertasCompatibles.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    contenedorBotones.appendChild(botonDescuentosCompatibles)
                                    contenedor.appendChild(contenedorBotones)
                                }






                            }
                            const contenedorListaOfertas_selector = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                .querySelector("[contenedor=ofertas]")
                                .querySelector("[contenedor=data]")
                                .querySelector("[contenedor=listaOfertas]")

                            if (!contenedorListaOfertas_selector) {

                                const contenedorOfertasRenderizado = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")


                                const contenedorListaOfertas = document.createElement("div")
                                contenedorListaOfertas.setAttribute("contenedor", "listaOfertas")
                                contenedorListaOfertas.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorOfertasRenderizado.appendChild(contenedorListaOfertas)

                            }

                            const contenedorListaOfertas_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                .querySelector("[contenedor=ofertas]")
                                .querySelector("[contenedor=data]")
                                .querySelector("[contenedor=listaOfertas]")


                            this.componentesUI.utilidades.limpiarOfertasObsoletas({
                                contenedores: ofertasPorCondicion,
                                origen: "porCondicion",
                                destino
                            })

                            this.componentesUI.utilidades.limpiarOfertasObsoletas({
                                contenedores: ofertasPorAdministrador,
                                origen: "porAdministrador",
                                destino
                            })

                            if (ofertasPorAdministradorArray.length === 0) {
                                contenedorListaOfertas_renderizado?.querySelector(`[contenedor=porAdministrador]`)?.remove()
                            }

                            if (ofertasPorCondicionArray.length === 0) {
                                contenedorListaOfertas_renderizado?.querySelector(`[contenedor=porCondicion]`)?.remove()
                            }
                            if (ofertasPorAdministradorArray.length === 0
                                &&
                                ofertasPorCondicionArray.length === 0
                            ) {
                                document.querySelector(destino).querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    ?.querySelector("[contenedor=listaOfertas]")?.remove()
                            }
                            ofertasPorCondicion.forEach((contenedorOferta, posicion) => {

                                const selectorContenedorPorCondicion = contenedorListaOfertas_renderizado.querySelector(`[contenedor=porCondicion]`)
                                if (!selectorContenedorPorCondicion) {
                                    const contenedorPorCondicion = document.createElement("div")
                                    contenedorPorCondicion.setAttribute("contenedor", "porCondicion")
                                    contenedorPorCondicion.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6",
                                        "borderGrey1",
                                        "borderRadius12"
                                    )

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                    )
                                    tituloContendor.textContent = "Ofertas aplicadas por condición"
                                    contenedorPorCondicion.appendChild(tituloContendor)
                                    contenedorListaOfertas_renderizado.appendChild(contenedorPorCondicion)
                                }

                                this.componentesUI.globalUI({
                                    destino,
                                    destinoOrigenOferta: "porCondicion",
                                    contenedorOferta,
                                    posicion
                                })

                                this.componentesUI.condicionesUI({
                                    destino,
                                    contenedorOferta,
                                    destinoOrigenOferta: "porCondicion"
                                })

                                this.componentesUI.descuentosUI({
                                    destino,
                                    destinoOrigenOferta: "porCondicion",
                                    contenedorOferta
                                })
                            })

                            ofertasPorAdministrador.forEach((contenedorOferta, posicion) => {

                                const selectorContenedorPorAdministrador = contenedorListaOfertas_renderizado?.querySelector(`[contenedor=porAdministrador]`)
                                if (!selectorContenedorPorAdministrador) {
                                    const contenedorPorAdministrador = document.createElement("div")
                                    contenedorPorAdministrador.setAttribute("contenedor", "porAdministrador")
                                    contenedorPorAdministrador.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6",
                                        "borderGrey1",
                                        "borderRadius12"
                                    )

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                    )
                                    tituloContendor.textContent = "Ofertas aplicadas por administrador"
                                    contenedorPorAdministrador.appendChild(tituloContendor)
                                    contenedorListaOfertas_renderizado.appendChild(contenedorPorAdministrador)
                                }

                                this.componentesUI.globalUI({
                                    destino,
                                    destinoOrigenOferta: "porAdministrador",
                                    contenedorOferta,
                                    posicion
                                })

                                this.componentesUI.condicionesUI({
                                    destino,
                                    contenedorOferta,
                                    destinoOrigenOferta: "porAdministrador"
                                })

                                this.componentesUI.descuentosUI({
                                    destino,
                                    destinoOrigenOferta: "porAdministrador",
                                    contenedorOferta
                                })
                            })

                            this.porTotal({
                                destino,
                                porTotal
                            })

                            this.entidades.hub({
                                destino,
                                entidades
                            })
                        },

                        componentesUI: {
                            globalUI: function (data) {

                                const destino = data.destino
                                const destinoOrigenOferta = data.destinoOrigenOferta
                                const posicion = data?.posicion + 1

                                const contenedorOferta = data.contenedorOferta
                                const oferta = contenedorOferta.oferta

                                const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")

                                const modoUI = contenedorFinanciero.getAttribute("modoUI")
                                const autorizacion = contenedorOferta?.autorizacion
                                const ofertaUID = oferta.ofertaUID


                                const entidadIDV = oferta.entidadIDV
                                const fechaFinal = oferta.fechaFinal
                                const fechaInicio = oferta.fechaInicio
                                const nombreOferta = oferta.nombreOferta


                                const autorizacionUI = (autorizacion) => {
                                    if (autorizacion === "aceptada") {
                                        return "Aceptada"
                                    } else if (autorizacion === "rechazada") {
                                        return "Rechazada"
                                    }
                                }

                                const entidadUI_ = (entidadIDV) => {
                                    if (entidadIDV === "reserva") {
                                        return "Reserva"
                                    }
                                }

                                const contenedorOfertaUI_selector = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"][posicion="${posicion}"]`)


                                if (!contenedorOfertaUI_selector) {



                                    const contenedorOfertaUI = document.createElement("div")
                                    contenedorOfertaUI.classList.add("contenedorOfertaUI")
                                    contenedorOfertaUI.setAttribute("ofertaUID", ofertaUID)
                                    contenedorOfertaUI.setAttribute("posicion", posicion)
                                    contenedorOfertaUI.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6",
                                        "borderGrey1",
                                        "borderRadius10"
                                    )
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=ofertas] [contenedor=data]")
                                        .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                        .appendChild(contenedorOfertaUI)

                                    const contenedorGlobalOferta = document.createElement("div")
                                    contenedorGlobalOferta.classList.add(
                                        "flexVertical",
                                        "gap6"
                                    )
                                    contenedorOfertaUI.appendChild(contenedorGlobalOferta)


                                    const nombreOfertaUI = document.createElement("div")
                                    nombreOfertaUI.setAttribute("dato", "nombre")

                                    nombreOfertaUI.classList.add(
                                        "negrita",
                                        "padding6"
                                    )

                                    contenedorGlobalOferta.appendChild(nombreOfertaUI)


                                    const contenedorUID = document.createElement("div")
                                    contenedorUID.classList.add(
                                        "padding6"
                                    )

                                    const tituloUID = document.createElement("div")
                                    tituloUID.textContent = "UID"
                                    contenedorUID.appendChild(tituloUID)

                                    const ofertaUID_UI = document.createElement("div")
                                    ofertaUID_UI.classList.add("negrita")
                                    ofertaUID_UI.setAttribute("dato", "ofertaUID")

                                    contenedorUID.appendChild(ofertaUID_UI)
                                    contenedorGlobalOferta.appendChild(contenedorUID)


                                    const contenedorEntidad = document.createElement("div")
                                    contenedorEntidad.classList.add(
                                        "padding6"
                                    )

                                    const tituloEntidad = document.createElement("div")
                                    tituloEntidad.textContent = "Entidad"
                                    contenedorEntidad.appendChild(tituloEntidad)

                                    const entidadUI = document.createElement("div")
                                    entidadUI.classList.add("negrita")
                                    entidadUI.setAttribute("dato", "entidad")

                                    contenedorEntidad.appendChild(entidadUI)
                                    contenedorGlobalOferta.appendChild(contenedorEntidad)

                                    if (destinoOrigenOferta === "porCondicion") {
                                        const contenedorAutorizacion = document.createElement("div")
                                        contenedorAutorizacion.classList.add(
                                            "padding6"
                                        )
                                        contenedorAutorizacion.setAttribute("contenedor", "autorizacion")

                                        const textoAutorizacion = document.createElement("div")
                                        textoAutorizacion.textContent = "Estado de la autorizacíón"
                                        contenedorAutorizacion.appendChild(textoAutorizacion)


                                        const estadoAutorizacionUI = document.createElement("div")
                                        estadoAutorizacionUI.classList.add("negrita")
                                        estadoAutorizacionUI.setAttribute("dato", "autorizacion")

                                        contenedorAutorizacion.appendChild(estadoAutorizacionUI)
                                        contenedorGlobalOferta.appendChild(contenedorAutorizacion)
                                    }

                                    if (modoUI === "administracion") {
                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6"
                                        )
                                        contenedorGlobalOferta.appendChild(contenedorBotones)


                                        if (destinoOrigenOferta === "porCondicion") {

                                            const botonRechazar = document.createElement("div")
                                            botonRechazar.setAttribute("boton", "autorizacionOferta")
                                            botonRechazar.setAttribute("estadoActual", autorizacion)
                                            botonRechazar.classList.add(
                                                "botonV3",
                                                "comportamientoBoton"
                                            )
                                            if (autorizacion === "aceptada") {
                                                botonRechazar.textContent = "Rechazar oferta"
                                            } else if (autorizacion === "rechazada") {
                                                botonRechazar.textContent = "Aceptar oferta"
                                            }
                                            botonRechazar.addEventListener("click", (e) => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.actualizarEstadoAutorizacion({
                                                    e,
                                                    ofertaUID
                                                })
                                            })
                                            contenedorBotones.appendChild(botonRechazar)
                                            contenedorGlobalOferta.appendChild(contenedorBotones)
                                        }

                                        const botonEliminar = document.createElement("div")
                                        botonEliminar.classList.add(
                                            "botonV3",
                                            "comportamientoBoton"
                                        )
                                        botonEliminar.textContent = "Eliminar oferta de la reserva " + posicion
                                        botonEliminar.addEventListener("click", () => {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.eliminarOfertaEnReserva.ui({
                                                origen: destinoOrigenOferta,
                                                ofertaUID,
                                                posicion,
                                                nombreOferta
                                            })
                                        })
                                        contenedorBotones.appendChild(botonEliminar)
                                    }
                                    if (modoUI === "simulador") {

                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6"
                                        )
                                        contenedorGlobalOferta.appendChild(contenedorBotones)


                                        if (destinoOrigenOferta === "porCondicion") {

                                            const botonRechazar = document.createElement("div")
                                            botonRechazar.setAttribute("boton", "autorizacionOferta")
                                            botonRechazar.setAttribute("estadoActual", autorizacion)
                                            botonRechazar.classList.add(
                                                "botonV3",
                                                "comportamientoBoton"
                                            )
                                            if (autorizacion === "aceptada") {
                                                botonRechazar.textContent = "Rechazar oferta"
                                            } else if (autorizacion === "rechazada") {
                                                botonRechazar.textContent = "Aceptar oferta"
                                            }
                                            botonRechazar.addEventListener("click", (e) => {
                                                casaVitini.view.detallesSimulacion.componentesUI.actualizarEstadoAutorizacion({
                                                    e,
                                                    ofertaUID
                                                })
                                            })
                                            contenedorBotones.appendChild(botonRechazar)
                                            contenedorGlobalOferta.appendChild(contenedorBotones)
                                        }

                                        const botonEliminar = document.createElement("div")
                                        botonEliminar.classList.add(
                                            "botonV3",
                                            "comportamientoBoton"
                                        )
                                        botonEliminar.textContent = "Eliminar oferta de la reserva " + posicion
                                        botonEliminar.addEventListener("click", () => {
                                            casaVitini.view.detallesSimulacion.componentesUI.eliminarOfertaEnSimulacion.ui({
                                                origen: destinoOrigenOferta,
                                                ofertaUID,
                                                posicion,
                                                nombreOferta
                                            })
                                        })
                                        contenedorBotones.appendChild(botonEliminar)
                                    }

                                    const contenedorFechas = document.createElement("div")
                                    contenedorFechas.classList.add(
                                        "flexHorizontal",
                                        "flexJustificacion_spacearound",
                                        "borderGrey1",
                                        "padding6",
                                        "borderRadius10"
                                    )

                                    const fechaInicioUI = document.createElement("div")
                                    fechaInicioUI.setAttribute("dato", "fechaInicio")
                                    fechaInicioUI.textContent = fechaInicio
                                    contenedorFechas.appendChild(fechaInicioUI)

                                    const fechaFinalUI = document.createElement("div")
                                    fechaFinalUI.setAttribute("dato", "fechaFinal")
                                    fechaFinalUI.textContent = fechaFinal
                                    contenedorFechas.appendChild(fechaFinalUI)
                                    contenedorGlobalOferta.appendChild(contenedorFechas)
                                    const contenedorDestino = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=ofertas] [contenedor=data]").querySelector(`[contenedor=${destinoOrigenOferta}]`)


                                    this.utilidades.posicionador({
                                        contenedorDestino,
                                        consultaContenedorInternos: "[ofertaUID][posicion]",
                                        nuevoContenedor: contenedorOfertaUI,
                                        posicionDestino: Number(posicion) + 1
                                    })
                                }


                                const contenedorOfertaUI_renderizador = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"][posicion="${posicion}"]`)


                                const nombreOfertaUI = contenedorOfertaUI_renderizador.querySelector("[dato=nombre]")
                                nombreOfertaUI.textContent = nombreOferta


                                const entidadUI = contenedorOfertaUI_renderizador.querySelector("[dato=entidad]")
                                entidadUI.textContent = entidadUI_(entidadIDV)


                                const ofertaUIDUI = contenedorOfertaUI_renderizador.querySelector("[dato=ofertaUID]")
                                ofertaUIDUI.textContent = ofertaUID

                                if (destinoOrigenOferta === "porCondicion") {

                                    const autorizacionUI_ = contenedorOfertaUI_renderizador.querySelector("[dato=autorizacion]")
                                    autorizacionUI_.textContent = autorizacionUI(autorizacion)
                                }

                                const fechaInicioUI = contenedorOfertaUI_renderizador.querySelector("[dato=fechaInicio]")
                                fechaInicioUI.textContent = fechaInicio

                                const fechaFinalUI = contenedorOfertaUI_renderizador.querySelector("[dato=fechaFinal]")
                                fechaFinalUI.textContent = fechaFinal


                            },
                            condicionesUI: function (data) {
                                const contenedorOferta = data.contenedorOferta
                                const oferta = contenedorOferta.oferta
                                const condicionesArray = oferta.condicionesArray
                                const destino = data.destino
                                const ofertaUID = oferta.ofertaUID
                                const destinoOrigenOferta = data.destinoOrigenOferta

                                const contenedorCondiciones_selector = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                    .querySelector("[contenedor=condiciones]")

                                if (!contenedorCondiciones_selector) {
                                    const contenedorCondiciones = document.createElement("div")
                                    contenedorCondiciones.setAttribute("contenedor", "condiciones")
                                    contenedorCondiciones.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "backgroundGrey1",
                                        "padding6",
                                        "borderRadius8"
                                    )

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "padding6",

                                    )
                                    tituloContendor.textContent = "Condiciones de la oferta"
                                    contenedorCondiciones.appendChild(tituloContendor)
                                    document.querySelector(destino)
                                        .querySelector("[contenedor=financiero]")
                                        .querySelector("[contenedor=ofertas]")
                                        .querySelector("[contenedor=data]")
                                        .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                        .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                        .appendChild(contenedorCondiciones)

                                }
                                const contenedorCondiciones_renderizado = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                    .querySelector("[contenedor=condiciones]")

                                contenedorCondiciones_renderizado.querySelectorAll("[tipoCondicion]").forEach((contenedorTipoCondicion) => {
                                    contenedorTipoCondicion.remove()
                                })

                                condicionesArray.forEach((condicion) => {
                                    const tipoCondicion = condicion.tipoCondicion



                                    const contenedorCondicion = document.createElement("div")
                                    contenedorCondicion.classList.add("contenedorCondicion")
                                    contenedorCondicion.setAttribute("tipoCondicion", tipoCondicion)
                                    contenedorCondicion.classList.add(
                                        "flexVertical",
                                        "padding6",
                                    )
                                    document.querySelector(destino)
                                        .querySelector("[contenedor=financiero]")
                                        .querySelector("[contenedor=ofertas]")
                                        .querySelector("[contenedor=data]")
                                        .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                        .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                        .querySelector("[contenedor=condiciones]")
                                        .appendChild(contenedorCondicion)

                                    const definicionCondicion = this.definicionCondiciones({
                                        tipoCondicion,
                                        condicion
                                    })
                                    contenedorCondicion.appendChild(definicionCondicion)
                                    contenedorCondiciones_renderizado.appendChild(contenedorCondicion)

                                })
                            },
                            definicionCondiciones: (data) => {
                                const condicion = data.condicion
                                const tipoCondicion = data.tipoCondicion

                                const contenedorCondicion = document.createElement("div")

                                if (tipoCondicion === "conFechaEntradaEntreRango") {
                                    const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO
                                    const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por fecha de entrada"
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)


                                    const descripcionCondicion = document.createElement("div")
                                    descripcionCondicion.textContent = "Esta condición determina que la oferta se aplica cuando la fecha de entrada de la reserva está entre el rango de vigencia de la oferta."
                                    contenedorCondicion.appendChild(descripcionCondicion)

                                    const rangoVigencia = document.createElement("div")
                                    rangoVigencia.textContent = `${fechaInicioRango_ISO} >>> ${fechaFinalRango_ISO}`
                                    contenedorCondicion.appendChild(rangoVigencia)

                                } else if (tipoCondicion === "conFechaSalidaEntreRango") {
                                    const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO
                                    const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por fecha de salida"
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    descripcionCondicion.textContent = "Esta condición determina que la oferta se aplica cuando la fecha de salida de la reserva está entre el rango de especificado en la oferta."
                                    contenedorCondicion.appendChild(descripcionCondicion)

                                    const rangoVigencia = document.createElement("div")
                                    rangoVigencia.textContent = `${fechaInicioRango_ISO} >>> ${fechaFinalRango_ISO}`
                                    contenedorCondicion.appendChild(rangoVigencia)

                                } else if (tipoCondicion === "conFechaCreacionEntreRango") {
                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por fecha de creación entre el rango."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    descripcionCondicion.textContent = "Esta condición determina que la oferta se aplica cuando la fecha de creación de la reserva está entre el rango de vigencia de la oferta."
                                    contenedorCondicion.appendChild(descripcionCondicion)


                                } else if (tipoCondicion === "porNumeroDeApartamentos") {
                                    const tipoConteo = condicion.tipoConteo
                                    const numeroDeApartamentos = condicion.numeroDeApartamentos

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por número de apartamentos."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)


                                    if (tipoConteo === "aPartirDe") {
                                        const descripcionCondicion = document.createElement("div")
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeApartamentos} o más apartamentos`
                                        contenedorCondicion.appendChild(descripcionCondicion)

                                    } else if (tipoConteo === "numeroExacto") {
                                        const descripcionCondicion = document.createElement("div")
                                        if (numeroDeApartamentos === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeApartamentos} apartamento exactamente. Ni más ni menos.`
                                            contenedorCondicion.appendChild(descripcionCondicion)
                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeApartamentos} apartamentos exactamente. Ni más ni menos.`
                                            contenedorCondicion.appendChild(descripcionCondicion)
                                        }
                                    } else if (tipoConteo === "hastaUnNumeroExacto") {
                                        const descripcionCondicion = document.createElement("div")
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasta ${numeroDeApartamentos} o menos apartamentos`
                                        contenedorCondicion.appendChild(descripcionCondicion)

                                    }


                                } else if (tipoCondicion === "porApartamentosEspecificos") {
                                    const apartamentos = condicion.apartamentos
                                    const tipoDeEspecificidad = condicion.tipoDeEspecificidad
                                    const apartamentosUI = apartamentos.map(cA => `${cA.apartamentoUI}`)

                                    const apartametnosFormateados = casaVitini.utilidades.cadenas.constructorComasEY({
                                        array: apartamentosUI,
                                        articulo: ""
                                    })
                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por apartamentos específicos."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")

                                    if (tipoDeEspecificidad === "exactamente") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva contiene los apartamentos en específico: ${apartametnosFormateados}`

                                    } else if (tipoDeEspecificidad === "alguno") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva contiene algunos de los apartamentos en específico: ${apartametnosFormateados}`

                                    } else if (tipoDeEspecificidad === "exactamenteEntreOtros") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva contiene exactamente los apartamentos en específico, entre otros: ${apartametnosFormateados}`

                                    } else if (tipoDeEspecificidad === "noDebeContenedorExactamente") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva NO contiene exactamente los apartamentos en específico: ${apartametnosFormateados}`

                                    } else if (tipoDeEspecificidad === "noDebeContenedorAlguno") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva NO contiene alguno de los apartamentos en específico: ${apartametnosFormateados}`

                                    }



                                    contenedorCondicion.appendChild(descripcionCondicion)

                                } else if (tipoCondicion === "porDiasDeAntelacion") {
                                    const numeroDeDias = condicion.numeroDeDias
                                    const tipoConteo = condicion.tipoConteo

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por días de antelación."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    if (tipoConteo === "aPartirDe") {
                                        if (numeroDeDias === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeDias} día de antelación o más.`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeDias} días de antelación o más.`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    } else if (tipoConteo === "numeroExacto") {
                                        if (numeroDeDias === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeDias} día de antelación exactamente`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeDias} días de antelación exactamente`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    } else if (tipoConteo === "hastaUnNumeroExacto") {
                                        if (numeroDeDias === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasta ${numeroDeDias} día de antelación o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasra ${numeroDeDias} días de antelación o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    }

                                } else if (tipoCondicion === "porDiasDeReserva") {
                                    const diasDeReserva = condicion.diasDeReserva
                                    const tipoConteo = condicion.tipoConteo

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por días de duración."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    if (tipoConteo === "aPartirDe") {
                                        if (diasDeReserva === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${diasDeReserva} día de duración o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${diasDeReserva} días de duración o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    } else if (tipoConteo === "numeroExacto") {
                                        if (diasDeReserva === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${diasDeReserva} día de duración exactamente`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${diasDeReserva} días de duración exactamente`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    } else if (tipoConteo === "hastaUnNumeroExacto") {
                                        if (diasDeReserva === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasta ${diasDeReserva} día de duración o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasta ${diasDeReserva} días de duración o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    }
                                } else if (tipoCondicion === "porRangoDeFechas") {
                                    const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO
                                    const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por rango de fechas."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando el rango de la reserva se cruza con el rango determinado en esta condición. Del ${fechaInicioRango_ISO} al ${fechaFinalRango_ISO}`
                                    contenedorCondicion.appendChild(descripcionCondicion)

                                } else if (tipoCondicion === "porCodigoDescuento") {
                                    const codigoDescuento = condicion.codigoDescuento
                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por código de descuento."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)


                                    const codigoUI = document.createElement("div")
                                    codigoUI.textContent = atob(codigoDescuento)


                                    contenedorCondicion.appendChild(codigoUI)



                                } else {
                                    const error = "El renderizado de condiciones de oferta ha recibido un identificador no reconocido: " + tipoCondicion
                                    return casaVitini.ui.componentes.advertenciaInmersiva(error)
                                }

                                return contenedorCondicion
                            },
                            descuentosUI: function (data) {
                                const destino = data.destino
                                const contenedorOferta = data.contenedorOferta
                                const ofertaUID = contenedorOferta.oferta.ofertaUID

                                const destinoOrigenOferta = data.destinoOrigenOferta

                                const descuentosJSON = contenedorOferta.oferta.descuentosJSON
                                const tipoDescuento = descuentosJSON?.tipoDescuento
                                const subTipoDescuento = descuentosJSON?.subTipoDescuento

                                const contenedorDescuentos_selector = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                    .querySelector("[contenedor=descuentos]")


                                if (!contenedorDescuentos_selector) {
                                    const contenedorDescuentos = document.createElement("div")
                                    contenedorDescuentos.setAttribute("contenedor", "descuentos")
                                    contenedorDescuentos.classList.add(
                                        "flexVertical",
                                        "backgroundGrey1",
                                        "padding6",
                                        "borderRadius8"
                                    )
                                    document.querySelector(destino)
                                        .querySelector("[contenedor=financiero]")
                                        .querySelector("[contenedor=ofertas]")
                                        .querySelector("[contenedor=data]")
                                        .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                        .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                        .appendChild(contenedorDescuentos)
                                }

                                const contenedorDescuentos_renderizado = document.querySelector(destino)

                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                    .querySelector("[contenedor=descuentos]")

                                contenedorDescuentos_renderizado.innerHTML = null
                                const tituloContendor = document.createElement("div")
                                tituloContendor.classList.add(
                                    "negrita",
                                    "padding6",
                                )
                                tituloContendor.textContent = "Descuentos de la oferta"
                                contenedorDescuentos_renderizado.appendChild(tituloContendor)

                                const desfinicionDescuento = this.definicionDescuentos({
                                    tipoDescuento,
                                    subTipoDescuento,
                                    descuentosJSON
                                })
                                contenedorDescuentos_renderizado.appendChild(desfinicionDescuento)
                            },
                            definicionDescuentos: (data) => {
                                const tipoDescuento = data.tipoDescuento
                                const subTipoDescuento = data.subTipoDescuento
                                const descuentosJSON = data.descuentosJSON

                                const contenedorDescuento = document.createElement("div")

                                const descripcionDescuento = document.createElement("p")
                                descripcionDescuento.classList.add(
                                    "padding6"
                                )
                                contenedorDescuento.appendChild(descripcionDescuento)


                                if (tipoDescuento === "porRango" && subTipoDescuento === "porDiasDelRango") {

                                    const fechaInicioRango_ISO = descuentosJSON.fechaInicioRango_ISO
                                    const fechaFinalRango_ISO = descuentosJSON.fechaFinalRango_ISO
                                    const descuentoPorDias = descuentosJSON.descuentoPorDias

                                    descripcionDescuento.textContent = `Esta oferta aplica un descuento a los días de la reserva. A continuación se detallan los días donde la oferta aplica descuentos y qué tipo de descuentos aplica en cada día.`
                                    contenedorDescuento.appendChild(descripcionDescuento)

                                    for (const descuentoPorDia of descuentoPorDias) {
                                        const tipoDescuentoPorDia = descuentoPorDia.tipoDescuento
                                        const descuentoTotal = descuentoPorDia.descuentoTotal
                                        const fechaNoche = descuentoPorDia.fecha


                                        const contenedorDia = document.createElement("div")
                                        contenedorDia.classList.add(
                                            "flexVertical"
                                        )
                                        const tituloContenedorDia = document.createElement("div")
                                        tituloContenedorDia.classList.add(
                                            "negrita",
                                            "padding6"
                                        )
                                        tituloContenedorDia.textContent = fechaNoche
                                        contenedorDia.appendChild(tituloContenedorDia)

                                        if (tipoDescuentoPorDia === "netoPorDia") {
                                            const tipoAplicacion = descuentoPorDia.tipoAplicacion
                                            const descripcionDescuentoTotalNeto = document.createElement("div")

                                            descripcionDescuentoTotalNeto.classList.add(
                                                "padding6"
                                            )
                                            if (tipoAplicacion === "porcentaje") {
                                                descripcionDescuentoTotalNeto.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% a los netos de los días de la reserva que están dentro del rango establecido entre en el ${fechaInicioRango_ISO} y el ${fechaFinalRango_ISO}.`
                                            } else if (tipoAplicacion === "cantidadFija") {
                                                descripcionDescuentoTotalNeto.textContent = `Esta oferta aplica un descuento del ${descuentoTotal} a los netos de los días de la reserva que están dentro del rango establecido entre en el ${fechaInicioRango_ISO} y el ${fechaFinalRango_ISO}.`
                                            }
                                            contenedorDia.appendChild(descripcionDescuentoTotalNeto)

                                        } else if (tipoDescuentoPorDia === "netoPorApartamentoDelDia") {

                                            const contenedorApartamentosDelDia = document.createElement("div")
                                            contenedorApartamentosDelDia.classList.add(
                                                "flexVertical",
                                                "gap6"
                                            )

                                            const apartamentos = descuentoPorDia.apartamentos
                                            for (const apartamento of apartamentos) {
                                                const apartamentoUI = apartamento.apartamentoUI
                                                const apartamentoIDV = apartamento.apartamentoIDV
                                                const descuentoTotal = apartamento.descuentoTotal
                                                const tipoAplicacion = apartamento.tipoAplicacion

                                                const contenedorApartamento = document.createElement("div")
                                                contenedorApartamento.classList.add(
                                                    "padding10",
                                                    "borderGrey1",
                                                    "borderRadius6"

                                                )
                                                contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)

                                                const tituloApartamento = document.createElement("div")
                                                tituloApartamento.classList.add("negrita")
                                                tituloApartamento.textContent = apartamentoUI
                                                contenedorApartamento.appendChild(tituloApartamento)


                                                const descuentoApartamento = document.createElement("div")
                                                if (tipoAplicacion === "porcentaje") {
                                                    descuentoApartamento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% al ${apartamentoUI}`
                                                } else if (tipoAplicacion === "cantidadFija") {
                                                    descuentoApartamento.textContent = `Esta oferta aplica un descuento de ${descuentoTotal} al ${apartamentoUI}`
                                                }
                                                contenedorApartamento.appendChild(descuentoApartamento)
                                                contenedorApartamentosDelDia.appendChild(contenedorApartamento)

                                            }
                                            contenedorDia.appendChild(contenedorApartamentosDelDia)


                                        }

                                        contenedorDescuento.appendChild(contenedorDia)

                                    }
                                } else if (tipoDescuento === "porRango" && subTipoDescuento === "totalNetoPorRango") {

                                    const fechaInicioRango_ISO = descuentosJSON.fechaInicioRango_ISO
                                    const fechaFinalRango_ISO = descuentosJSON.fechaFinalRango_ISO
                                    const descuentoTotal = descuentosJSON.descuentoTotal
                                    const tipoAplicacion = descuentosJSON.tipoAplicacion

                                    if (tipoAplicacion === "porcentaje") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% a los días de la reserva que están dentro del rango establecido entre en el ${fechaInicioRango_ISO} y el ${fechaFinalRango_ISO}.`
                                    } else if (tipoAplicacion === "cantidadFija") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}$ a los días de la reserva que están dentro del rango establecido entre en el ${fechaInicioRango_ISO} y el ${fechaFinalRango_ISO}.`
                                    }
                                    contenedorDescuento.appendChild(descripcionDescuento)

                                } else if (tipoDescuento === "totalNeto") {
                                    const descuentoTotal = descuentosJSON.descuentoTotal
                                    const tipoAplicacion = descuentosJSON.tipoAplicacion


                                    if (tipoAplicacion === "porcentaje") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% al total neto de la reserva.`
                                    } else if (tipoAplicacion === "cantidadFija") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal} al total neto de la reserva.`
                                    }
                                    contenedorDescuento.appendChild(descripcionDescuento)


                                } else if (tipoDescuento === "individualPorApartamento") {


                                    descripcionDescuento.textContent = `Esta oferta aplica un descuento al total de los apartamentos especificados. A continuación se detallan los apartamentos en los que esta oferta aplica descuentos. Si la reserva no tiene todos los apartamentos especificados en esta oferta, entonces solo aplicará el Descuento en los apartamentos que coincidan con la oferta en la reserva.`
                                    contenedorDescuento.appendChild(descripcionDescuento)

                                    const contenedorApartamentos = document.createElement("div")
                                    contenedorApartamentos.classList.add(
                                        "gap6",
                                        "flexVertical"
                                    )

                                    const apartamentos = descuentosJSON.apartamentos
                                    for (const apartamento of apartamentos) {
                                        const apartamentoIDV = apartamento.apartamentoIDV
                                        const apartamentoUI = apartamento.apartamentoUI
                                        const descuentoTotal = apartamento.descuentoTotal
                                        const tipoAplicacion = apartamento.tipoAplicacion

                                        const contenedorApartamento = document.createElement("div")
                                        contenedorApartamento.classList.add(
                                            "padding10",
                                            "borderGrey1",
                                            "borderRadius8"
                                        )
                                        contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)


                                        const apartamentoTitulo = document.createElement("div")
                                        apartamentoTitulo.classList.add("negrita")
                                        apartamentoTitulo.innerHTML = apartamentoUI
                                        contenedorApartamento.appendChild(apartamentoTitulo)

                                        const tipoAplicacionUI = document.createElement("div")
                                        tipoAplicacionUI.classList.add("tipoAplicacionUI")
                                        if (tipoAplicacion === "cantidadFija") {
                                            tipoAplicacionUI.textContent = `Descuento de ${descuentoTotal}$ sobre el neto del apartamento`
                                        } else if (tipoAplicacion === "porcentaje") {
                                            tipoAplicacionUI.textContent = `Descuento del ${descuentoTotal}% sobre el neto del apartamento`
                                        }
                                        contenedorApartamento.appendChild(tipoAplicacionUI)

                                        contenedorApartamentos.appendChild(contenedorApartamento)
                                    }

                                    contenedorDescuento.appendChild(contenedorApartamentos)


                                } else if (tipoDescuento === "mismoDescuentoParaCadaApartamento") {
                                    const descuentoTotal = descuentosJSON.descuentoTotal
                                    const tipoAplicacion = descuentosJSON.tipoAplicacion


                                    if (tipoAplicacion === "porcentaje") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% al total neto de cada apartamento de la reserva.`
                                    } else if (tipoAplicacion === "cantidadFija") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal} al total neto de cada apartamento individualmente de la reserva.`
                                    }
                                    contenedorDescuento.appendChild(descripcionDescuento)


                                } else {
                                    const mensaje = "No se reconoce el tipo de descuento recibido."
                                    return casaVitini.ui.componentes.advertenciaInmersiva(mensaje)
                                }
                                return contenedorDescuento

                            },
                            utilidades: {
                                limpiarOfertasObsoletas: (data) => {
                                    const contenedores = data.contenedores
                                    const origen = data.origen
                                    const destino = data.destino
                                    const paresActuales = []
                                    contenedores.forEach((contenedorOferta, posicion) => {
                                        paresActuales.push({
                                            oferta: String(contenedorOferta.oferta.ofertaUID),
                                            posicion: String(posicion)
                                        })
                                    })
                                    const selectorContenedorOfertas = document.querySelector(destino).querySelectorAll(`[contenedor="${origen}"] [ofertaUID][posicion]`);
                                    const elementosFiltrados = Array.from(selectorContenedorOfertas).filter(elemento => {
                                        const ofertaUID = elemento.getAttribute('ofertaUID');
                                        const posicion = elemento.getAttribute('posicion');
                                        return !paresActuales.some(par => par.ofertaUID === ofertaUID && par.posicion === posicion);
                                    })
                                    elementosFiltrados.forEach((ofertaObsoleta) => { ofertaObsoleta.remove() })
                                },
                                posicionador: (data) => {

                                    const contenedorDestino = data.contenedorDestino
                                    const consultaContenedorInternos = data.consultaContenedorInternos
                                    const selectorContenedorInternos = contenedorDestino.querySelectorAll(consultaContenedorInternos);

                                    const posicionDestino = data.posicionDestino
                                    const nuevoContenedor = data.nuevoContenedor

                                    if (posicionDestino < selectorContenedorInternos.length) {
                                        contenedorDestino.insertBefore(nuevoContenedor, selectorContenedorInternos[posicionDestino]);
                                    } else {
                                        contenedorDestino.appendChild(nuevoContenedor);
                                    }
                                }
                            },
                        },
                        porTotal: (data) => {

                            const destino = data.destino
                            const porTotal = data.porTotal

                            if (porTotal.length === 0) {
                                document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    ?.querySelector("[contenedor=listadescuentosAplicadosAlTotalNetoOfertas]")
                                    ?.remove()
                                return
                            }


                            const contenedorPorTotalOfertas_selector = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                .querySelector("[contenedor=ofertas]")
                                .querySelector("[contenedor=data]")
                                .querySelector("[contenedor=listadescuentosAplicadosAlTotalNetoOfertas]")

                            if (!contenedorPorTotalOfertas_selector) {
                                const contenedorOfertas = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")

                                const contenedorDescuentosPorTotal = document.createElement("div")
                                contenedorDescuentosPorTotal.setAttribute("contenedor", "listadescuentosAplicadosAlTotalNetoOfertas")
                                contenedorDescuentosPorTotal.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorOfertas.appendChild(contenedorDescuentosPorTotal)
                            }


                            const contenedorPorTotal_selector = document.querySelector(destino)
                                .querySelector("[contenedor=financiero]")
                                .querySelector("[contenedor=ofertas]")
                                .querySelector("[contenedor=data]")
                                .querySelector("[contenedor=listadescuentosAplicadosAlTotalNetoOfertas]")
                                .querySelector("[contenedor=porTotal]")
                            if (!contenedorPorTotal_selector) {
                                const contenedor = document.createElement("div")
                                contenedor.classList.add("contenedorPorTotal")
                                contenedor.setAttribute("contenedor", "porTotal")
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )

                                document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector("[contenedor=listadescuentosAplicadosAlTotalNetoOfertas]")
                                    .appendChild(contenedor)

                                const tituloContendor = document.createElement("div")
                                tituloContendor.classList.add(
                                    "negrita",
                                    "textoCentrado",
                                )
                                tituloContendor.textContent = "Descuentos aplicados a total neto de la reserva"
                                contenedor.appendChild(tituloContendor)

                                const contenedorPorTotal = document.createElement("div")
                                contenedorPorTotal.setAttribute("contenedor", "descuentos")
                                contenedorPorTotal.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedor.appendChild(contenedorPorTotal)
                            }
                            const contenedorPorTotal_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=ofertas] [contenedor=data]").querySelector("[contenedor=porTotal]")
                            const contenedorDeDescuentos = contenedorPorTotal_renderizado.querySelector("[contenedor=descuentos]")
                            contenedorDeDescuentos.innerHTML = null

                            porTotal.forEach((detallesDelTotal) => {

                                const ofertaUID = detallesDelTotal.ofertaUID
                                const nombreOferta = detallesDelTotal.nombreOferta
                                const porcentaje = detallesDelTotal.porcentaje
                                const tipoAplicacion = detallesDelTotal.tipoAplicacion
                                const descuentoAplicado = detallesDelTotal.descuentoAplicado
                                const totalConDescuento = detallesDelTotal.totalConDescuento

                                const contenedorDescuentoTotal = document.createElement("div")
                                contenedorDescuentoTotal.classList.add("contenedorDelDescuentoDelTotal")
                                contenedorDescuentoTotal.classList.add(
                                    "borderRadius10",
                                    "padding10",
                                    "borderGrey1",
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorDescuentoTotal.setAttribute("ofertaUID", ofertaUID)

                                const tituloOferta = document.createElement("div")
                                tituloOferta.classList.add(
                                    "negrita",
                                )
                                tituloOferta.textContent = nombreOferta
                                contenedorDescuentoTotal.appendChild(tituloOferta)

                                if (tipoAplicacion === "porcentaje") {
                                    const porcentajeUI = document.createElement("div")
                                    porcentajeUI.textContent = `${porcentaje}%`
                                    contenedorDescuentoTotal.appendChild(porcentajeUI)


                                }
                                const descuentoAplicadoUI = document.createElement("div")
                                descuentoAplicadoUI.textContent = `Descuento aplicado: ${descuentoAplicado}`
                                contenedorDescuentoTotal.appendChild(descuentoAplicadoUI)

                                const totalConDescuentoUI = document.createElement("div")
                                totalConDescuentoUI.textContent = `Este descuento aplicado deja el total en ${totalConDescuento}`
                                contenedorDescuentoTotal.appendChild(totalConDescuentoUI)

                                contenedorDeDescuentos.appendChild(contenedorDescuentoTotal)


                            })
                        },
                        entidades: {
                            hub: function (data) {
                                const destino = data.destino
                                const entidades = data.entidades
                                Object.entries(entidades).forEach(([entidadIDV, detalleEntidad]) => {
                                    if (entidadIDV === "reserva") {
                                        this.reserva({
                                            destino,
                                            detalleEntidad
                                        })
                                    }
                                })
                            },
                            reserva: (data) => {
                                const destino = data.destino
                                const detalleEntidad = data.detalleEntidad.desgloses
                                const porDia = detalleEntidad.porDia
                                const porApartamento = detalleEntidad.porApartamento

                                const apartamentosIDVArray = Object.keys(porApartamento)

                                const selectorApartamentos = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelectorAll(`[apartamentoIDV]`)
                                selectorApartamentos.forEach((apartamentoRenderizado) => {
                                    const apartamentoObosoleto = apartamentoRenderizado.getAttribute("apartamentoIDV")
                                    if (!apartamentosIDVArray.includes(apartamentoObosoleto)) {
                                        apartamentoRenderizado.querySelector("[contenedor=descuentosDelApartamento]")?.remove()
                                    }
                                })

                                if (Object.entries(porApartamento).length === 0) {
                                    const contenedorApartamento_obosoletos = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porApartamento]").querySelectorAll("[apartamentoIDV]")
                                    contenedorApartamento_obosoletos.forEach((contenedorObsoleto) =>
                                        contenedorObsoleto.querySelector("[contenedor=descuentosDelApartamento]")?.remove()
                                    )
                                }

                                Object.entries(porApartamento).forEach(([apartamentoIDV, descuentosDelApartamento]) => {
                                    const contenedorApartamento = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porApartamento]").querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)

                                    const descuentosAplicados = descuentosDelApartamento.descuentosAplicados
                                    const totalNetoConDescuentos = descuentosDelApartamento.totalNetoConDescuentos
                                    const totalNetoSinDescuentos = descuentosDelApartamento.totalNetoSinDescuentos
                                    const totalDescuentosAplicados = descuentosDelApartamento.totalDescuentosAplicados

                                    const contenedorDescuentosPorApartamento_selector = contenedorApartamento.querySelector("[contenedor=descuentosDelApartamento]")
                                    if (!contenedorDescuentosPorApartamento_selector) {
                                        const contenedorDescuentosPorApartamento = document.createElement("div")
                                        contenedorDescuentosPorApartamento.setAttribute("contenedor", "descuentosDelApartamento")
                                        contenedorDescuentosPorApartamento.classList.add(
                                            "padding6",
                                            "flexVertical",
                                            "gap6"
                                        )

                                        const totalesDescuentos = document.createElement("div")

                                        const totalDescuentosAplicadosUI = document.createElement("div")
                                        totalDescuentosAplicadosUI.setAttribute("dato", "totalConDescuentosAplicados")
                                        totalesDescuentos.appendChild(totalDescuentosAplicadosUI)

                                        const totalNetoConDescuentosUI = document.createElement("div")
                                        totalNetoConDescuentosUI.setAttribute("dato", "totalNetoConDescuentos")
                                        totalesDescuentos.appendChild(totalNetoConDescuentosUI)
                                        contenedorDescuentosPorApartamento.appendChild(totalesDescuentos)
                                        contenedorApartamento.appendChild(contenedorDescuentosPorApartamento)

                                        const contenedorDescuentosDelApartamento = document.createElement("div")
                                        contenedorDescuentosDelApartamento.setAttribute("contenedor", "descuentos")
                                        contenedorDescuentosDelApartamento.classList.add(
                                            "padding6",
                                            "flexVertical",
                                            "gap6",
                                            "borderRadius8",
                                            "borderGrey1"
                                        )

                                        const tituloContenedorDescuentos = document.createElement("div")
                                        tituloContenedorDescuentos.classList.add("negrita")
                                        tituloContenedorDescuentos.textContent = "Descuentos aplicados al total del apartamento"
                                        contenedorDescuentosDelApartamento.appendChild(tituloContenedorDescuentos)
                                        contenedorDescuentosPorApartamento.appendChild(contenedorDescuentosDelApartamento)
                                    }
                                    const contenedorDescuentosPorApartamento_renderizado = contenedorApartamento.querySelector("[contenedor=descuentosDelApartamento]")

                                    const totalConDescuentosAplicados = contenedorDescuentosPorApartamento_renderizado.querySelector("[dato=totalConDescuentosAplicados]")
                                    totalConDescuentosAplicados.textContent = `${totalDescuentosAplicados}$ Suma total de descuentos aplicados al apartamento`

                                    const totalNetoConDescuentosUI = contenedorDescuentosPorApartamento_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                                    totalNetoConDescuentosUI.textContent = `${totalNetoConDescuentos}$ Neto del apartamento con descuentos aplicados`

                                    const contenedorDesgloseDescuentos = contenedorDescuentosPorApartamento_renderizado.querySelector("[contenedor=descuentos]")
                                    contenedorDesgloseDescuentos.innerHTML = null

                                    descuentosAplicados.forEach((detallesDelDescuento) => {
                                        const ofertaUID = detallesDelDescuento.ofertaUID
                                        const nombreOferta = detallesDelDescuento.nombreOferta
                                        const apartamentoIDV = detallesDelDescuento.apartamentoIDV
                                        const tipoAplicacion = detallesDelDescuento.tipoAplicacion
                                        const porcentaje = detallesDelDescuento.porcentaje
                                        const descuentoAplicado = detallesDelDescuento.descuentoAplicado
                                        const totalConDescuento = detallesDelDescuento.totalConDescuento

                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("porApartamento")
                                        contenedor.setAttribute("ofertaUID", ofertaUID)
                                        contenedor.classList.add(
                                            "padding10",
                                            "flexVertical",
                                            "borderRadius6",
                                            "backgroundGrey1"
                                        )

                                        const nombreOfertaUI = document.createElement("div")
                                        nombreOfertaUI.classList.add("negrita")
                                        nombreOfertaUI.textContent = nombreOferta
                                        contenedor.appendChild(nombreOfertaUI)

                                        const descripcionDescuento = document.createElement("div")
                                        if (tipoAplicacion === "porcentaje") {
                                            descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${porcentaje}% y generando un descuento del ${descuentoAplicado}.`
                                        } else if (tipoAplicacion === "cantidadFija") {
                                            descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoAplicado} sobre el total neto del apartamento.`
                                        }
                                        contenedor.appendChild(descripcionDescuento)
                                        contenedorDesgloseDescuentos.appendChild(contenedor)
                                    })
                                })

                                const fechasNocheObsoletas = Object.keys(porDia)
                                const selectorNochesRenderizadas = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelectorAll(`[noche]`)
                                selectorNochesRenderizadas.forEach((nocheRenderizada) => {
                                    const fechaNocheRenderizada = nocheRenderizada.getAttribute("noche")
                                    if (!fechasNocheObsoletas.includes(fechaNocheRenderizada)) {
                                        nocheRenderizada.querySelector("[contenedor=descuentosGlobales]")?.remove()
                                        nocheRenderizada.querySelector("[contenedor=descuentosNoche]")?.remove()
                                        const selectorContenedorDescuentosEnApartamenos = nocheRenderizada.querySelectorAll("[contenedor=descuentosAlNetoApartamento]")
                                        selectorContenedorDescuentosEnApartamenos.forEach((s) => s?.remove())
                                    }
                                })

                                Object.entries(porDia).forEach(([fechaNoche, detallesDelDia]) => {

                                    const totalConDescuentos = detallesDelDia.totalConDescuentos
                                    const totalDescuentosAplicados = detallesDelDia.totalDescuentosAplicados
                                    const totalSinDescuentos = detallesDelDia.totalSinDescuentos
                                    const porApartamento = detallesDelDia.porApartamento ?? []
                                    const porTotalNetoDia = detallesDelDia.porTotalNetoDia ?? []

                                    const contendorNoche = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelector(`[noche="${fechaNoche}"]`)
                                    const contendorTotalesNoche = contendorNoche.querySelector("[contenedor=totalesNoche]")

                                    const descuentosGlobales_selector = contendorNoche.querySelector("[contenedor=descuentosGlobales]")
                                    if (!descuentosGlobales_selector) {
                                        const descuentosGlobales = document.createElement("div")
                                        descuentosGlobales.setAttribute("contenedor", "descuentosGlobales")
                                        descuentosGlobales.classList.add("flexVertical",)

                                        const contenedorGlobal = document.createElement("div")
                                        contenedorGlobal.classList.add("padding6")

                                        const totalDescuentosAplicados = document.createElement("p")
                                        totalDescuentosAplicados.setAttribute("dato", "totalDescuentosAplicados")
                                        contenedorGlobal.appendChild(totalDescuentosAplicados)

                                        const totalConDescuentosUI = document.createElement("p")
                                        totalConDescuentosUI.setAttribute("dato", "totalConDescuentos")
                                        contenedorGlobal.appendChild(totalConDescuentosUI)
                                        descuentosGlobales.appendChild(contenedorGlobal)

                                        contendorNoche.insertBefore(descuentosGlobales, contendorTotalesNoche.nextSibling);
                                    }
                                    const descuentosGlobales_renderizado = contendorNoche.querySelector("[contenedor=descuentosGlobales]")

                                    const totalDescuentosAplicadosUI = descuentosGlobales_renderizado.querySelector("[dato=totalDescuentosAplicados]")
                                    totalDescuentosAplicadosUI.textContent = totalDescuentosAplicados + "$ Suma total de los descuentos aplicados al total neto de la noache"

                                    const totalConDescuentosUI = descuentosGlobales_renderizado.querySelector("[dato=totalConDescuentos]")
                                    totalConDescuentosUI.textContent = totalConDescuentos + "$ Total neto noche con descuentos aplicados"

                                    if (porTotalNetoDia.length > 0) {
                                        const descuentosDelTotalNetoNoche_selector = contendorNoche.querySelector("[contenedor=descuentosNoche]")
                                        if (!descuentosDelTotalNetoNoche_selector) {
                                            const contenedorDescuentosDelTotalNetoNoche = document.createElement("div")
                                            contenedorDescuentosDelTotalNetoNoche.setAttribute("contenedor", "descuentosNoche")
                                            contenedorDescuentosDelTotalNetoNoche.classList.add("contenedorTotalesNocheDescuentos")

                                            contendorNoche.insertBefore(contenedorDescuentosDelTotalNetoNoche, descuentosGlobales_renderizado.nextSibling);

                                            const titulo = document.createElement("div")
                                            titulo.classList.add(
                                                "negrita",
                                                "padding6"
                                            )
                                            titulo.textContent = "Descuentos aplicados al total neto de la noche."
                                            contenedorDescuentosDelTotalNetoNoche.appendChild(titulo)

                                        }
                                        const descuentosDelTotalNetoNoche_renderizado = contendorNoche.querySelector("[contenedor=descuentosNoche]")
                                        const selectorDescuentosObsoletos = descuentosDelTotalNetoNoche_renderizado.querySelectorAll("[contenedor=descuento]")
                                        selectorDescuentosObsoletos.forEach((descuentoObosoleto) => {
                                            descuentoObosoleto?.remove()
                                        })

                                    } else {

                                        contendorNoche.querySelector("[contenedor=descuentosNoche]")?.remove()
                                    }

                                    porTotalNetoDia.forEach((detallesDelNetoPorDia) => {

                                        const fecha = detallesDelNetoPorDia.fecha
                                        const ofertaUID = detallesDelNetoPorDia.ofertaUID
                                        const porcentaje = detallesDelNetoPorDia.porcentaje
                                        const nombreOferta = detallesDelNetoPorDia.nombreOferta
                                        const tipoAplicacion = detallesDelNetoPorDia.tipoAplicacion
                                        const descuentoAplicado = detallesDelNetoPorDia.descuentoAplicado
                                        const totalConDescuento = detallesDelNetoPorDia.totalConDescuento

                                        const contenedorDescuentos_renderizado = contendorNoche.querySelector("[contenedor=descuentosNoche]")

                                        const contenedorDescuentosAlTotalNetoNoche = document.createElement("div")
                                        contenedorDescuentosAlTotalNetoNoche.setAttribute("contenedor", "descuento")
                                        contenedorDescuentosAlTotalNetoNoche.classList.add("contenedorDescuentosAlTotalNetoNoche")
                                        contenedorDescuentosAlTotalNetoNoche.setAttribute("ofertaUID", ofertaUID)

                                        const nombreOfertaUI = document.createElement("div")
                                        nombreOfertaUI.classList.add("negrita")
                                        nombreOfertaUI.textContent = nombreOferta
                                        contenedorDescuentosAlTotalNetoNoche.appendChild(nombreOfertaUI)


                                        const descripcionDescuento = document.createElement("div")
                                        if (tipoAplicacion === "porcentaje") {
                                            descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${porcentaje}% al total neto de la noche generando un descuento del ${descuentoAplicado}.`
                                        } else if (tipoAplicacion === "cantidadFija") {
                                            descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoAplicado} al total neto de la noche.`
                                        }
                                        contenedorDescuentosAlTotalNetoNoche.appendChild(descripcionDescuento)
                                        contenedorDescuentos_renderizado.appendChild(contenedorDescuentosAlTotalNetoNoche)

                                    })

                                    const apartamentosIDVArray = Object.keys(porApartamento)
                                    const selectorApartamentosRenderizados = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelector(`[noche="${fechaNoche}"]`).querySelectorAll(`[apartamentoIDV]`)
                                    selectorApartamentosRenderizados.forEach((apartamentoRenderizado) => {
                                        const apartamentoIDVRenderizado = apartamentoRenderizado.getAttribute("apartamentoIDV")
                                        if (!apartamentosIDVArray.includes(apartamentoIDVRenderizado)) {
                                            apartamentoRenderizado.querySelector("[contenedor=descuentosAlNetoApartamento]")?.remove()
                                        }
                                    })

                                    Object.entries(porApartamento).forEach(([apartamentoIDV, desgloseDelApartamento]) => {

                                        const selectorApartamentoDelaNoche = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelector(`[noche="${fechaNoche}"]`).querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)

                                        const totalConDescuentos = desgloseDelApartamento.totalConDescuentos
                                        const totalSinDescuentos = desgloseDelApartamento.totalSinDescuentos
                                        const descuentosAplicados = desgloseDelApartamento.descuentosAplicados
                                        const totalDescuentosAplicados = desgloseDelApartamento.totalDescuentosAplicados

                                        const contenedorDescuentosGlobal_selector = selectorApartamentoDelaNoche.querySelector("[contenedor=descuentosAlNetoApartamento]")
                                        if (!contenedorDescuentosGlobal_selector) {
                                            const contenedorDescuentosGlobal = document.createElement("div")
                                            contenedorDescuentosGlobal.setAttribute("contenedor", "descuentosAlNetoApartamento")
                                            selectorApartamentoDelaNoche.appendChild(contenedorDescuentosGlobal)

                                            const contendorGlobal = document.createElement("div")
                                            contendorGlobal.classList.add("padding6")
                                            contendorGlobal.setAttribute("contenedor", "descuentosGlobal")

                                            const totalDescuentosAplicadosUI = document.createElement("p")
                                            totalDescuentosAplicadosUI.setAttribute("dato", "totalDescuentosAplicados")
                                            contendorGlobal.appendChild(totalDescuentosAplicadosUI)

                                            const totalConDescuentosUI = document.createElement("p")
                                            totalConDescuentosUI.setAttribute("dato", "totalConDescuentos")
                                            contendorGlobal.appendChild(totalConDescuentosUI)
                                            contenedorDescuentosGlobal.appendChild(contendorGlobal)

                                            const contenedorDescuentos = document.createElement("div")
                                            contenedorDescuentos.setAttribute("contenedor", "descuentosPorApartamento")
                                            contenedorDescuentos.classList.add("contenedorDescuentosPorApartamento")
                                            contenedorDescuentosGlobal.appendChild(contenedorDescuentos)

                                            const titulo = document.createElement("div")
                                            titulo.classList.add("padding6", "negrita")
                                            titulo.textContent = "Descuentos aplicados al total neto del alojamiento"
                                            contenedorDescuentos.appendChild(titulo)
                                        }

                                        const contenedorDescuentosGlobal_renderizado = selectorApartamentoDelaNoche.querySelector("[contenedor=descuentosAlNetoApartamento]")

                                        const totalDescuentosAplicadosUI = contenedorDescuentosGlobal_renderizado.querySelector("[dato=totalDescuentosAplicados]")
                                        totalDescuentosAplicadosUI.textContent = totalDescuentosAplicados + "$ Descuentos aplicados al neto del apartamento"

                                        const totalConDescuentos_ = contenedorDescuentosGlobal_renderizado.querySelector("[dato=totalConDescuentos]")
                                        totalConDescuentos_.textContent = totalConDescuentos + "$ Neto del apartamento con descuentos aplicados"

                                        const selectorDescuentosObsoletos = contenedorDescuentosGlobal_renderizado.querySelector("[contenedor=descuentosPorApartamento]").querySelectorAll("[contenedor=descuento]")
                                        selectorDescuentosObsoletos.forEach((descuentoObsoleto) => {
                                            descuentoObsoleto?.remove()
                                        })

                                        descuentosAplicados.forEach((detallesDelDescuento) => {
                                            const fecha = detallesDelDescuento.fecha
                                            const ofertaUID = detallesDelDescuento.ofertaUID
                                            const porcentaje = detallesDelDescuento.porcentaje
                                            const nombreOferta = detallesDelDescuento.nombreOferta
                                            const apartamentoIDV = detallesDelDescuento.apartamentoIDV
                                            const tipoAplicacion = detallesDelDescuento.tipoAplicacion
                                            const descuentoAplicado = detallesDelDescuento.descuentoAplicado
                                            const totalConDescuento = detallesDelDescuento.totalConDescuento

                                            const contenedor = document.createElement("div")
                                            contenedor.classList.add("contenedorDescuentoPorApartamento")
                                            contenedor.setAttribute("contenedor", "descuento")
                                            contenedor.setAttribute("ofertaUID", ofertaUID)

                                            const nombreOfertaUI = document.createElement("div")
                                            nombreOfertaUI.classList.add("negrita")
                                            nombreOfertaUI.textContent = nombreOferta
                                            contenedor.appendChild(nombreOfertaUI)

                                            const descripcionDescuento = document.createElement("div")
                                            if (tipoAplicacion === "porcentaje") {
                                                descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${porcentaje}% al total neto del apartamento, generando un descuento del ${descuentoAplicado}.`
                                            } else if (tipoAplicacion === "cantidadFija") {
                                                descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoAplicado}, al total neto del apartamento`
                                            }
                                            contenedor.appendChild(descripcionDescuento)
                                            contenedorDescuentosGlobal_renderizado.querySelector("[contenedor=descuentosPorApartamento]").appendChild(contenedor)
                                        })
                                    })
                                })
                            }
                        }
                    },
                    sobreControlPrecios: () => { },
                    impuestos: (data) => {
                        const destino = data.destino
                        const impuestos = data.impuestos
                        const instanciaUID = data.instanciaUID
                        const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                        const modoUI = contenedorFinanciero.getAttribute("modoUI")

                        if (modoUI === "plaza" && impuestos.length === 0) {
                            return

                        }

                        const contenedorImpuestos_selector = contenedorFinanciero.querySelector("[contenedor=impuestos]")

                        if (!contenedorImpuestos_selector) {
                            const contenedorPlegable = document.createElement('details');
                            contenedorPlegable.classList.add("contenedorEntidad", "sobreControlAnimacionGlobal")
                            contenedorPlegable.setAttribute("contenedor", "impuestos")


                            const tituloContenedorPlegable = document.createElement('summary');
                            tituloContenedorPlegable.setAttribute("elemento", "impuestos")
                            tituloContenedorPlegable.classList.add(
                                "padding12",
                            )
                            tituloContenedorPlegable.textContent = 'Impuestos aplicados';
                            contenedorPlegable.appendChild(tituloContenedorPlegable)

                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("contenedor", "data")
                            contenedor.classList.add(
                                "contenedorImpuestos",
                                "flexVertical",
                                "gap6",

                            )
                            contenedorPlegable.appendChild(contenedor)

                            contenedorFinanciero.appendChild(contenedorPlegable)

                            if (modoUI === "administracion") {

                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertarImpuesto = document.createElement("div")
                                botonInsertarImpuesto.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarImpuesto.textContent = "Insertar impuesto"
                                botonInsertarImpuesto.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.insertarImpuesto.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarImpuesto)
                                contenedor.appendChild(contenedorBotones)


                                const botonInsertarImpuestoAdHoc = document.createElement("div")
                                botonInsertarImpuestoAdHoc.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarImpuestoAdHoc.textContent = "Crear e insertar impuesto dedicado"
                                botonInsertarImpuestoAdHoc.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.crearImpuestoAdHoc.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarImpuestoAdHoc)
                                contenedor.appendChild(contenedorBotones)
                            }

                            if (modoUI === "simulador") {

                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertarImpuesto = document.createElement("div")
                                botonInsertarImpuesto.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarImpuesto.textContent = "Insertar impuesto"
                                botonInsertarImpuesto.addEventListener("click", () => {
                                    casaVitini.view.detallesSimulacion.componentesUI.insertarImpuesto.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarImpuesto)
                                contenedor.appendChild(contenedorBotones)


                                const botonInsertarImpuestoAdHoc = document.createElement("div")
                                botonInsertarImpuestoAdHoc.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarImpuestoAdHoc.textContent = "Crear e insertar impuesto dedicado"
                                botonInsertarImpuestoAdHoc.addEventListener("click", () => {
                                    casaVitini.view.detallesSimulacion.componentesUI.crearImpuestoAdHoc.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarImpuestoAdHoc)
                                contenedor.appendChild(contenedorBotones)
                            }
                        }
                        const contenedorImpuestos_renderizado = contenedorFinanciero.querySelector("[contenedor=impuestos] [contenedor=data]")
                        if (impuestos.length === 0) {
                            const impuestosRenderizadosObsoletos = contenedorImpuestos_renderizado.querySelectorAll("[contenedor=impuesto]")
                            impuestosRenderizadosObsoletos.forEach(impuestoRenderizado => { impuestoRenderizado.remove() })

                            const info = document.createElement("div")
                            info.setAttribute("elemento", "info")
                            info.classList.add(
                                "negrita",
                                "padding6",
                                "textoCentrado"
                            )
                            info.textContent = "No hay impuestos en este contenedor financiero."
                            const info_rederizado = contenedorImpuestos_renderizado.querySelector("[elemento=info]")
                            if (!info_rederizado) {
                                contenedorImpuestos_renderizado.appendChild(info)
                            }
                        } else {
                            contenedorImpuestos_renderizado.querySelector("[elemento=info]")?.remove()
                        }
                        const tasaUI = (tasaIDV) => {
                            if (tasaIDV === "porcentaje") {
                                return "Porcentaje"
                            } else if (tasaIDV === "tasa") {
                                return "Tasa"
                            }
                        }
                        const impuestosIDV = impuestos.map((impuesto) => {

                            return String(impuesto.impuestoUID)
                        })
                        const selectorImpuestosRenderizadosObsoletos = contenedorImpuestos_renderizado.querySelectorAll("[contenedor=impuesto]")
                        selectorImpuestosRenderizadosObsoletos.forEach((impuestoRenderizado) => {
                            const impuestoUID_renderizado = impuestoRenderizado.getAttribute("impuestoUID")
                            if (!impuestosIDV.includes(impuestoUID_renderizado)) {
                                impuestoRenderizado?.remove()
                            }
                        })

                        for (const impuesto of impuestos) {
                            const impuestoUID = impuesto.impuestoUID
                            const impuestoRenderizado = contenedorImpuestos_renderizado.querySelector(`[impuestoUID="${impuestoUID}"]`)
                            if (impuestoRenderizado) {
                                continue
                            }

                            const impuestoTitulo = impuesto.nombre
                            const entidadIDV = impuesto.entidadIDV
                            const tipoValor = impuesto.tipoValorIDV
                            const tipoImpositivo = impuesto.tipoImpositivo
                            const porcentaje = impuesto.porcentaje

                            const entidadDiccionadio = {
                                reserva: "Reserva",
                                servicio: "Servicios",
                                global: "Global"
                            }

                            const impuestoUI = document.createElement("div")
                            impuestoUI.classList.add(
                                "flexVertical",
                                "padding6",
                                "backgroundWhite5",
                                "borderRadius8",
                                "gap6"
                            )
                            impuestoUI.setAttribute("contenedor", "impuesto")
                            impuestoUI.setAttribute("impuestoUID", impuestoUID)
                            const nombreImpuestoUI = document.createElement("div")
                            nombreImpuestoUI.classList.add(
                                "padding6"
                            )
                            nombreImpuestoUI.classList.add("negrita")
                            nombreImpuestoUI.textContent = impuestoTitulo
                            impuestoUI.appendChild(nombreImpuestoUI)

                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add(
                                "flexVertical",
                                "padding6"
                            )
                            impuestoUI.appendChild(contenedorEntidad)

                            const tituloEntidad = document.createElement("p")
                            tituloEntidad.textContent = "Entidad de aplicacíon"
                            contenedorEntidad.appendChild(tituloEntidad)

                            const entidadUI = document.createElement("p")
                            entidadUI.classList.add(
                                "negrita"
                            )
                            entidadUI.textContent = entidadDiccionadio[entidadIDV]
                            contenedorEntidad.appendChild(entidadUI)


                            let simboloTipoImpuesto;
                            if (tipoValor === "porcentaje") {
                                simboloTipoImpuesto = "%";
                            }
                            if (tipoValor === "tasa") {
                                simboloTipoImpuesto = "$";
                            }

                            const contendorValor = document.createElement("div")
                            contendorValor.classList.add(
                                "padding6",
                                "flexVertical"
                            )


                            const valorUI = document.createElement("div")
                            valorUI.classList.add("resumen_reserva_impuestoUITipoValor")
                            valorUI.textContent = tasaUI(tipoValor)
                            contendorValor.appendChild(valorUI)


                            if (tipoValor === "porcentaje") {
                                const porcentajeCalculado = document.createElement("div")
                                porcentajeCalculado.classList.add("resumen_reserva_impuestoUICalculoImpuestoPorcentaje")
                                porcentajeCalculado.textContent = porcentaje + "%"
                                contendorValor.appendChild(porcentajeCalculado)
                            }

                            const tipoImpositivoUI = document.createElement("div")
                            tipoImpositivoUI.classList.add("reserva_resumen_impuestoUITipoImpositivo")
                            tipoImpositivoUI.textContent = tipoImpositivo + "$"
                            contendorValor.appendChild(tipoImpositivoUI)
                            impuestoUI.appendChild(contendorValor)



                            if (modoUI === "administracion") {
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonEliminarImpuesto = document.createElement("div")
                                botonEliminarImpuesto.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonEliminarImpuesto.textContent = "Eliminar impuesto de la reserva"
                                botonEliminarImpuesto.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.eliminarImpuesto.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID,
                                        nombreImpuesto: impuestoTitulo,
                                        impuestoUID
                                    })
                                })
                                contenedorBotones.appendChild(botonEliminarImpuesto)
                                impuestoUI.appendChild(contenedorBotones)
                            }

                            if (modoUI === "simulador") {
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonEliminarImpuesto = document.createElement("div")
                                botonEliminarImpuesto.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonEliminarImpuesto.textContent = "Eliminar impuesto de la reserva"
                                botonEliminarImpuesto.addEventListener("click", () => {
                                    casaVitini.view.detallesSimulacion.componentesUI.eliminarImpuesto.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID,
                                        nombreImpuesto: impuestoTitulo,
                                        impuestoUID
                                    })
                                })
                                contenedorBotones.appendChild(botonEliminarImpuesto)
                                impuestoUI.appendChild(contenedorBotones)
                            }

                            contenedorImpuestos_renderizado.appendChild(impuestoUI)
                        }


                    },
                    totalesGlobales: (data) => {
                        const destino = data.destino
                        const totales = data.totales
                        const instanciaUID = data.instanciaUID

                        const totalNeto = totales?.totalNeto
                        const totalFinal = totales?.totalFinal
                        const totalDescuentos = totales?.totalDescuentos
                        const impuestosAplicados = totales?.impuestosAplicados


                        const totalNetoConDescuentos = totales?.totalNetoConDescuentos
                        const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                        const modoUI = contenedorFinanciero.getAttribute("modoUI")

                        const contenedorTotales_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=totalesGlobales]")
                        if (!contenedorTotales_selector) {

                            const contenedorPlegable = document.createElement("details")
                            contenedorPlegable.classList.add("contenedorEntidad", "sobreControlAnimacionGlobal")
                            contenedorPlegable.setAttribute("contenedor", "totalesGlobales")
                            contenedorPlegable.setAttribute("componente", "plegable")
                            document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedorPlegable)

                            const totalesUITituloBloque = document.createElement("summary")
                            totalesUITituloBloque.classList.add(
                                "padding12",
                            )
                            totalesUITituloBloque.textContent = "Totales globales"
                            contenedorPlegable.appendChild(totalesUITituloBloque)

                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("contenedor", "data")
                            contenedor.classList.add(
                                "contenedorImpuestos",
                                "flexVertical",
                                "gap6",

                            )
                            contenedorPlegable.appendChild(contenedor)


                            if (modoUI === "administracion") {
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertarDescuento = document.createElement("div")
                                botonInsertarDescuento.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarDescuento.textContent = "Reconstruir desglose financerio"
                                botonInsertarDescuento.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.reconstruirDesgloseFinanciero.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID,
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarDescuento)

                                contenedor.appendChild(contenedorBotones)
                            }
                            if (modoUI === "simulador") {
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertarDescuento = document.createElement("div")
                                botonInsertarDescuento.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarDescuento.textContent = "Reconstruir desglose financerio"
                                botonInsertarDescuento.addEventListener("click", () => {
                                    casaVitini.view.detallesSimulacion.componentesUI.reconstruirDesgloseFinanciero.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID,
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarDescuento)

                                contenedor.appendChild(contenedorBotones)
                            }
                        }

                        const contenedorTotales_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=totalesGlobales] [contenedor=data]")

                        const contenedorTotalesNeto_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")
                        if (!contenedorTotalesNeto_selector) {
                            const contenedorTotalesNeto = document.createElement("div")
                            contenedorTotalesNeto.setAttribute("contenedor", "totalesNeto")
                            contenedorTotalesNeto.classList.add(
                                "backgroundGrey1",
                                "borderRadius8",
                                "flexVertical",
                                "padding6",
                                "gap6"
                            )

                            const contenedorTotalNetoUI = document.createElement("div")
                            contenedorTotalNetoUI.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalReservaNetoUI = document.createElement("div")

                            totalReservaNetoUI.textContent = "Total neto"
                            contenedorTotalNetoUI.appendChild(totalReservaNetoUI)

                            const totalReservaNetoUI_ = document.createElement("div")
                            totalReservaNetoUI_.setAttribute("dato", "totalNeto")
                            totalReservaNetoUI_.classList.add(
                                "negrita"
                            )
                            contenedorTotalNetoUI.appendChild(totalReservaNetoUI_)
                            contenedorTotalesNeto.appendChild(contenedorTotalNetoUI)

                            const contenedorPromedioNoche = document.createElement("div")
                            contenedorPromedioNoche.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalReservaNetoDiaUI = document.createElement("div")

                            totalReservaNetoDiaUI.textContent = "Precio medio neto de la reserva por noche"


                            const totalReservaNetoDiaUI_ = document.createElement("div")
                            totalReservaNetoDiaUI_.classList.add("negrita")
                            totalReservaNetoDiaUI_.setAttribute("dato", "totalNetoNocheMedio")

                            contenedorPromedioNoche.appendChild(totalReservaNetoDiaUI_)

                            contenedorTotales_renderizado.appendChild(contenedorTotalesNeto)

                        }
                        const contenedorTotalesNeto_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")

                        const totalNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNeto]")
                        totalNetoUI.textContent = totalNeto




                        const totalesDescuentos_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                        if (!totalesDescuentos_selector && totalDescuentos) {
                            const contenedorTotalesDescuentos = document.createElement("div")
                            contenedorTotalesDescuentos.setAttribute("contenedor", "totalDescuentos")
                            contenedorTotalesDescuentos.classList.add(
                                "backgroundGrey1",
                                "borderRadius8",
                                "flexVertical",
                                "padding6",
                                "gap6"
                            )
                            contenedorTotales_renderizado.appendChild(contenedorTotalesDescuentos)

                            const contenedorTotalDescuentosAplicados = document.createElement("div")
                            contenedorTotalDescuentosAplicados.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalDescuentosAplicadosUI = document.createElement("div")

                            totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas"
                            contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI)

                            const totalDescuentosAplicadosUI_ = document.createElement("div")
                            totalDescuentosAplicadosUI_.classList.add("negrita")
                            totalDescuentosAplicadosUI_.setAttribute("dato", "totalConDescuentoAplicado")
                            contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI_)
                            contenedorTotalesDescuentos.appendChild(contenedorTotalDescuentosAplicados)

                            const contenedorTotalNetoConDescuentos = document.createElement("div")
                            contenedorTotalNetoConDescuentos.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalNetoConDescuentosUI = document.createElement("div")

                            totalNetoConDescuentosUI.textContent = "Total neto con descuentos aplicados"
                            contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI)

                            const totalNetoConDescuentosUI_ = document.createElement("div")
                            totalNetoConDescuentosUI_.classList.add("negrita")
                            totalNetoConDescuentosUI_.setAttribute("dato", "totalNetoConDescuentos")

                            contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI_)
                            contenedorTotalesDescuentos.appendChild(contenedorTotalNetoConDescuentos)


                            const contenedorPromedio = document.createElement("div")
                            contenedorPromedio.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const precioMedioConDescuentos = document.createElement("div")

                            precioMedioConDescuentos.textContent = "Precio medio neto de la reserva por noche con descuentos aplicados"


                            const precioMedioConDescuentos_ = document.createElement("div")
                            precioMedioConDescuentos_.classList.add("negrita")
                            precioMedioConDescuentos_.setAttribute("dato", "precioMedioConDescuentos")



                        }
                        const totalesDescuentos_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                        if (!totalDescuentos) {
                            totalesDescuentos_renderizado?.remove()
                        } else {
                            const totalConDescuentosAplicadosUI = totalesDescuentos_renderizado.querySelector("[dato=totalConDescuentoAplicado]")

                            totalConDescuentosAplicadosUI.textContent = totalDescuentos

                            const totalConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                            totalConDescuentosUI.textContent = totalNetoConDescuentos



                        }

                        const contenedorTotalesFinal_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")
                        if (!contenedorTotalesFinal_selector) {

                            const contenedorTotalesFinal = document.createElement("div")
                            contenedorTotalesFinal.setAttribute("contenedor", "totalesFinal")
                            contenedorTotalesFinal.classList.add(
                                "backgroundGrey1",
                                "borderRadius8",
                                "flexVertical",
                                "padding6",
                                "gap6"
                            )
                            contenedorTotales_renderizado.appendChild(contenedorTotalesFinal)
                            const contenedorTotalImpuestosAplicados = document.createElement("div")
                            contenedorTotalImpuestosAplicados.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalImpuestosUI = document.createElement("div")

                            totalImpuestosUI.textContent = "Total impuestos aplicados"
                            contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI)

                            const totalImpuestosUI_ = document.createElement("div")
                            totalImpuestosUI_.classList.add("negrita")
                            totalImpuestosUI_.setAttribute("dato", "impuestosAplicados")
                            contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI_)

                            contenedorTotalesFinal.appendChild(contenedorTotalImpuestosAplicados)

                            const contenedorTotalFinal = document.createElement("div")
                            contenedorTotalFinal.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalConImpuestosUI = document.createElement("div")
                            totalConImpuestosUI.textContent = "Total final"
                            contenedorTotalFinal.appendChild(totalConImpuestosUI)

                            const totalConImpuestosUI_ = document.createElement("div")
                            totalConImpuestosUI_.classList.add("negrita")
                            totalConImpuestosUI_.setAttribute("dato", "totalFinal")

                            contenedorTotalFinal.appendChild(totalConImpuestosUI_)
                            contenedorTotalesFinal.appendChild(contenedorTotalFinal)
                        }
                        const contenedorTotalesFinal_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")


                        const impuestosAplicadosUI = contenedorTotalesFinal_renderizado.querySelector("[dato=impuestosAplicados]")
                        impuestosAplicadosUI.textContent = impuestosAplicados

                        const totalFinalUI = contenedorTotalesFinal_renderizado.querySelector("[dato=totalFinal]")
                        totalFinalUI.textContent = totalFinal

                    },
                },
                constructorContenedor: (contenedorFinanciero) => {
                    const desgloseFinanciero = contenedorFinanciero.desgloseFinanciero
                    const instantaneaNoches = contenedorFinanciero.instantaneaNoches
                    const instanneaOfertas = contenedorFinanciero.instantaneaOfertas
                    const preciosAlterados = contenedorFinanciero.preciosAlterados

                    const global = desgloseFinanciero.global
                    const entidades = desgloseFinanciero.entidades
                    const impuestos = desgloseFinanciero.impuestos
                    const ofertasAplicadas = desgloseFinanciero.ofertasAplicadas


                    const totalesPorApartamento = desgloseFinanciero.totalesPorApartamento
                    const totalesPorNoche = desgloseFinanciero.totalesPorNoche
                    const totales = desgloseFinanciero.totales
                    const desgloseImpuestos = desgloseFinanciero.impuestos
                    const ofertas = desgloseFinanciero.ofertas
                    const destino = desgloseFinanciero.destino
                    const selectorDestino = document.querySelector(destino).querySelector("[contenedor=financiero]")
                    if (!selectorDestino) {
                        const error = "totales no encuentra el elemento de destino, revisa el identificador del elemento"
                        return casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }
                    const simboloDescuento = {
                        porcentaje: "%",
                        cantidadFija: "$"
                    }
                    const contenedorDesgloseTotales = document.createElement("div")
                    contenedorDesgloseTotales.classList.add("componentes_ui_desloseTotales_contenedor")
                    const detallePorDiaUI = document.createElement("div")
                    detallePorDiaUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const detalleDiaUITitulo = document.createElement("div")
                    detalleDiaUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                    detalleDiaUITitulo.textContent = "Detalle por noche"
                    detallePorDiaUI.appendChild(detalleDiaUITitulo)
                    const contenedorDesglosePorNoche = document.createElement("div")
                    contenedorDesglosePorNoche.classList.add("reserva_resumen_desglose_porNoche")
                    if (totalesPorNoche.length === 0) {
                        const info = document.createElement("div")
                        info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                        info.textContent = "No hay información financiera para desglosar por noche"
                        contenedorDesglosePorNoche.appendChild(info)
                    }
                    for (const detallePorNoche of totalesPorNoche) {
                        const fechaNoche = detallePorNoche.fechaDiaConNoche
                        const precioNetoNoche = detallePorNoche.precioNetoNoche
                        const apartamentosDetallesPorNoche = detallePorNoche.apartamentos
                        const apartamentoUI_ = document.createElement("div")
                        apartamentoUI_.classList.add("contenedorDiaConNoche")
                        const apartamentoUITitulo = document.createElement("div")
                        apartamentoUITitulo.classList.add("reserva_resumen_apartamentoIUTitulo")
                        apartamentoUITitulo.classList.add("negrita")
                        apartamentoUITitulo.textContent = fechaNoche
                        apartamentoUI_.appendChild(apartamentoUITitulo)
                        const totalNetoNocheUI = document.createElement("div")
                        totalNetoNocheUI.classList.add("reserva_resumen_apartamentoIUTitulo")
                        totalNetoNocheUI.classList.add("negrita")
                        totalNetoNocheUI.textContent = precioNetoNoche + "$ Total neto noche"
                        apartamentoUI_.appendChild(totalNetoNocheUI)
                        for (const detalleApartmentoPorNoche of apartamentosDetallesPorNoche) {
                            const apartamentoUI = detalleApartmentoPorNoche.apartamentoUI
                            const precioNetoPorNoche = detalleApartmentoPorNoche.precioNetoNoche
                            const detalleApartamentosUITitulo = document.createElement("div")
                            detalleApartamentosUITitulo.classList.add("reserva_resumen_apartamentoUIPrecio")
                            detalleApartamentosUITitulo.classList.add("negrita")
                            detalleApartamentosUITitulo.classList.add("colorGris")
                            detalleApartamentosUITitulo.textContent = apartamentoUI
                            apartamentoUI_.appendChild(detalleApartamentosUITitulo)
                            const detalleApartamentosUIPreciNetoNoche = document.createElement("div")
                            detalleApartamentosUIPreciNetoNoche.classList.add("reserva_resumen_apartamentoUIPrecio")
                            detalleApartamentosUIPreciNetoNoche.textContent = precioNetoPorNoche + "$ / Neto por noche"
                            apartamentoUI_.appendChild(detalleApartamentosUIPreciNetoNoche)
                        }
                        contenedorDesglosePorNoche.appendChild(apartamentoUI_)
                    }
                    detallePorDiaUI.appendChild(contenedorDesglosePorNoche)
                    contenedorDesgloseTotales.appendChild(detallePorDiaUI)
                    const contenedorTotalesPorApartamento = document.createElement("div")
                    contenedorTotalesPorApartamento.classList.add("reserva_resumen_desglose_porNoche")
                    const alojamientoUI = document.createElement("div")
                    alojamientoUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const alojamientoUITitulo = document.createElement("div")
                    alojamientoUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                    alojamientoUITitulo.textContent = "Precio total neto por apartamento"
                    alojamientoUI.appendChild(alojamientoUITitulo)
                    if (totalesPorApartamento.length === 0) {
                        const info = document.createElement("div")
                        info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                        info.textContent = "No hay información financiera para desglosar por apartamento"
                        alojamientoUI.appendChild(info)
                    }
                    for (const detalleDesglosePorApartamento of totalesPorApartamento) {
                        const apartamentoUI_ = detalleDesglosePorApartamento.apartamentoUI
                        const totalNetoApartamento = detalleDesglosePorApartamento.totalNetoRango
                        const precioNetoMedioPorNoche = detalleDesglosePorApartamento.precioMedioNocheRango
                        const apartamentoUI = document.createElement("div")
                        apartamentoUI.classList.add("contenedorApartamento")
                        const apartamentoUITitulo = document.createElement("div")
                        apartamentoUITitulo.classList.add("contenedorTextoOferta")
                        apartamentoUITitulo.classList.add("negrita")
                        apartamentoUITitulo.textContent = apartamentoUI_
                        apartamentoUI.appendChild(apartamentoUITitulo)
                        const apartamentoUIPrecioNetoTotal = document.createElement("div")
                        apartamentoUIPrecioNetoTotal.classList.add("textoDetallesPorApartamento")
                        apartamentoUIPrecioNetoTotal.textContent = "Total neto: " + totalNetoApartamento + "$"
                        apartamentoUI.appendChild(apartamentoUIPrecioNetoTotal)
                        const apartamentoUIPrecioPromedioPorNoche = document.createElement("div")
                        apartamentoUIPrecioPromedioPorNoche.classList.add("textoDetallesPorApartamento")
                        apartamentoUIPrecioPromedioPorNoche.textContent = "Precio medio neto por noche: " + precioNetoMedioPorNoche + "$"
                        apartamentoUI.appendChild(apartamentoUIPrecioPromedioPorNoche)
                        alojamientoUI.appendChild(apartamentoUI)
                    }
                    contenedorTotalesPorApartamento.appendChild(alojamientoUI)
                    contenedorDesgloseTotales.appendChild(contenedorTotalesPorApartamento)
                    let controlContenido = "noDesplegar"
                    const ofertasUI = document.createElement("div")
                    ofertasUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const ofertasUITitulo = document.createElement("div")
                    ofertasUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                    ofertasUITitulo.textContent = "Ofertas aplicadas"
                    ofertasUI.appendChild(ofertasUITitulo)
                    for (const oferta of ofertas) {
                        const porNumeroDeApartamentos = oferta.porNumeroDeApartamentos
                        const porApartamentosEspecificos = oferta.porApartamentosEspecificos
                        const porDiasDeReserva = oferta.porDiasDeReserva
                        const porRangoDeFechas = oferta.porRangoDeFechas
                        const porDiasDeAntelacion = oferta.porDiasDeAntelacion
                        if (porNumeroDeApartamentos?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detallesReserva of oferta.porNumeroDeApartamentos) {
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const cantidad = detallesReserva.cantidad
                                const tipoDescuento = detallesReserva.tipoDescuento
                                const definicion = detallesReserva.definicion
                                const nombreOferta = detallesReserva.nombreOferta
                                const descuento = detallesReserva.descuento
                                let nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionOfertaUI)
                                if (tipoDescuento === "porcentaje") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento del " + cantidad + simboloDescuento[tipoDescuento] + " rebajando el neto de la reserva en " + descuento + "$"
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                if (tipoDescuento === "cantidadFija") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento del " + cantidad + simboloDescuento[tipoDescuento] + " sobre el neto de la reserva"
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                        if (porApartamentosEspecificos?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detallesOferta of oferta.porApartamentosEspecificos) {
                                const nombreOferta = detallesOferta.nombreOferta
                                const cantidad = detallesOferta.cantidad
                                const tipoDescuento = detallesOferta.tipoDescuento
                                const definicion = detallesOferta.definicion
                                const descuentoOferta = detallesOferta.descuentoOferta
                                const descuentoAplicadoA = detallesOferta.descuentoAplicadoA
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionOfertaUI)
                                if (descuentoAplicadoA === "totalNetoApartamentoDedicado") {
                                    const apartamentosEspecificos = detallesOferta.apartamentosEspecificos
                                    const contenedorApartamentosEspecificos = document.createElement("div")
                                    contenedorApartamentosEspecificos.classList.add("componentes_ui_totales_ofertas_apartamentosEspecificos_contenedor")
                                    for (const detallesApartamento of apartamentosEspecificos) {
                                        const apartamentoIDV = detallesApartamento.apartamentoIDV
                                        const apartamentoUI = detallesApartamento.apartamentoUI
                                        const tipoDescuento = detallesApartamento.tipoDescuento
                                        const cantidad = detallesApartamento.cantidad
                                        const descuento = detallesApartamento.descuento
                                        const bloqueDetalleOferta = document.createElement("div")
                                        bloqueDetalleOferta.classList.add("resumen_reserva_detalle_oferta_apartamentos_especificos")
                                        const tituloApartamentoUI = document.createElement("div")
                                        tituloApartamentoUI.classList.add("negrita")
                                        tituloApartamentoUI.innerHTML = apartamentoUI
                                        bloqueDetalleOferta.appendChild(tituloApartamentoUI)
                                        const tipoDescuentoApartamentoUI = document.createElement("div")
                                        tipoDescuentoApartamentoUI.textContent = tipoDescuento

                                        const cantidadPorApartmento = document.createElement("div")
                                        cantidadPorApartmento.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                        bloqueDetalleOferta.appendChild(cantidadPorApartmento)
                                        contenedorApartamentosEspecificos.appendChild(bloqueDetalleOferta)
                                    }
                                    contenedorIndividualOferta.appendChild(contenedorApartamentosEspecificos)
                                }
                                if (descuentoAplicadoA === "totalNetoReserva") {
                                    const descuentoOfertaUI = document.createElement("div")
                                    descuentoOfertaUI.classList.add("contenedorTextoOferta")
                                    descuentoOfertaUI.textContent = descuentoOferta
                                    contenedorIndividualOferta.appendChild(descuentoOfertaUI)
                                    if (tipoDescuento === "porcentaje") {
                                        const tipoDescuentoUI = document.createElement("div")
                                        tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                        tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                        contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                    }
                                    if (tipoDescuento === "cantidadFija") {
                                        const tipoDescuentoUI = document.createElement("div")
                                        tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                        tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                        contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                    }
                                }
                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                        if (porDiasDeReserva?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detatllesReserva of oferta.porDiasDeReserva) {
                                const cantidad = detatllesReserva.cantidad
                                const tipoDescuento = detatllesReserva.tipoDescuento
                                const nombreOferta = detatllesReserva.nombreOferta
                                const numero = detatllesReserva.numero
                                const simboloNumero = detatllesReserva.simboloNumero
                                const definicion = detatllesReserva.definicion
                                const descuento = detatllesReserva.descuento
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionUI = document.createElement("div")
                                definicionUI.classList.add("contenedorTextoOferta")
                                definicionUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionUI)
                                if (tipoDescuento === "porcentaje") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento] + " rebajando el neto de la reserva en " + descuento + "$"
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                if (tipoDescuento === "cantidadFija") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion

                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                        if (porRangoDeFechas?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detallesOferta of oferta.porRangoDeFechas) {
                                const cantidad = detallesOferta.cantidad
                                const tipoDescuento = detallesOferta.tipoDescuento
                                const definicion = detallesOferta.definicion
                                const nombreOferta = detallesOferta.nombreOferta
                                const diasAfectados = detallesOferta.diasAfectados
                                const descuento = detallesOferta.descuento
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionOfertaUI)
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento total de la oferta: " + descuento + "$"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                const contenedorDiasEspecificos = document.createElement("div")
                                contenedorDiasEspecificos.classList.add("componentes_ui_totales_ofertas_diasEspecificos_contenedor")
                                for (const detalleDelDia of diasAfectados) {
                                    const dia = detalleDelDia.dia
                                    const totaDiaNetoConOferta = detalleDelDia.totaDiaNetoConOferta
                                    const descuento = detalleDelDia.descuento
                                    const bloque = document.createElement("div")
                                    bloque.classList.add("resumen_reserva_detalle_oferta_apartamentos_especificos")
                                    const tituloUI = document.createElement("div")
                                    tituloUI.classList.add("negrita")
                                    tituloUI.innerHTML = dia
                                    bloque.appendChild(tituloUI)
                                    const totalSinOferta = document.createElement("div")
                                    totalSinOferta.textContent = "Total día con oferta: " + totaDiaNetoConOferta + "$"
                                    bloque.appendChild(totalSinOferta)
                                    const totalConOferta = document.createElement("div")
                                    totalConOferta.textContent = "Descuento: " + descuento + "$"
                                    bloque.appendChild(totalConOferta)
                                    contenedorDiasEspecificos.appendChild(bloque)
                                }
                                contenedorIndividualOferta.appendChild(contenedorDiasEspecificos)
                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                        if (porDiasDeAntelacion?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detallesOferta of oferta.porDiasDeAntelacion) {
                                const cantidad = detallesOferta.cantidad
                                const tipoDescuento = detallesOferta.tipoDescuento
                                const definicion = detallesOferta.definicion
                                const nombreOferta = detallesOferta.nombreOferta
                                const descuento = detallesOferta.descuento
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionOfertaUI)
                                if (tipoDescuento === "porcentaje") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento del " + cantidad + "% sobre el neto de la reserva."
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                if (tipoDescuento === "cantidadFija") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento de " + cantidad + "$ sobre el neto de la reserva"
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                    }
                    if (controlContenido === "desplegar") {
                        contenedorDesgloseTotales.appendChild(ofertasUI)
                    }


                    const impuestoUI = document.createElement("div")
                    impuestoUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const impuestoUITituloBloque = document.createElement("div")
                    impuestoUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                    impuestoUITituloBloque.textContent = "Impuestos"
                    impuestoUI.appendChild(impuestoUITituloBloque)




                    if (desgloseImpuestos.length === 0) {
                        const info = document.createElement("div")
                        info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                        info.textContent = "No hay información financiera sobre impuestos para mostrar"
                        impuestoUI.appendChild(info)
                    }
                    desgloseImpuestos.forEach((impuesto) => {
                        const impuestoTitulo = impuesto.nombreImpuesto
                        const tipoValor = impuesto.tipoValor
                        const tipoImpositivo = impuesto.tipoImpositivo
                        const calculoImpuestoPorcentaje = impuesto.calculoImpuestoPorcentaje
                        const impuestoUITitulo = document.createElement("div")
                        impuestoUITitulo.classList.add("reserva_resumen_desglose_pago_elemento")
                        const impuestoUITitulo_ = document.createElement("div")
                        impuestoUITitulo_.classList.add("reserva_resumen_apartamentoIUTitulo")
                        impuestoUITitulo_.classList.add("negrita")
                        impuestoUITitulo_.textContent = impuestoTitulo
                        impuestoUITitulo.appendChild(impuestoUITitulo_)
                        let simboloTipoImpuesto;
                        if (tipoValor === "porcentaje") {
                            simboloTipoImpuesto = "%";
                        }
                        if (tipoValor === "tasa") {
                            simboloTipoImpuesto = "$";
                        }
                        const impuestoUITipoImpositivo = document.createElement("div")
                        impuestoUITipoImpositivo.classList.add("reserva_resumen_impuestoUITipoImpositivo")
                        impuestoUITipoImpositivo.textContent = tipoImpositivo + simboloTipoImpuesto
                        impuestoUITitulo.appendChild(impuestoUITipoImpositivo)
                        const impuestoUITipoValor = document.createElement("div")
                        impuestoUITipoValor.classList.add("resumen_reserva_impuestoUITipoValor")
                        impuestoUITipoValor.textContent = tipoValor

                        if (calculoImpuestoPorcentaje) {
                            const impuestoUICalculoImpuestoPorcentaje = document.createElement("div")
                            impuestoUICalculoImpuestoPorcentaje.classList.add("resumen_reserva_impuestoUICalculoImpuestoPorcentaje")
                            impuestoUICalculoImpuestoPorcentaje.textContent = calculoImpuestoPorcentaje + "$"
                            impuestoUITitulo.appendChild(impuestoUICalculoImpuestoPorcentaje)
                        }
                        impuestoUI.appendChild(impuestoUITitulo)
                    })


                    if (desgloseImpuestos.length > 0) {
                        contenedorDesgloseTotales.appendChild(impuestoUI)
                    }

                    const totalesUI = document.createElement("div")
                    totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const totalesUITituloBloque = document.createElement("div")
                    totalesUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                    totalesUITituloBloque.textContent = "Totales"
                    totalesUI.appendChild(totalesUITituloBloque)
                    const totalPromedioNetoPorNoche = totales.promedioNetoPorNoche ?
                        totales.promedioNetoPorNoche + "$" :
                        "No hay informacion del total promedio neto por noche";
                    const totalReservaNeto = totales.totalReservaNeto ? totales.totalReservaNeto + "$" : "No hay información del total neto de la reserva"
                    const totalImpuestos = totales.totalImpuestos ? totales.totalImpuestos + "$" : "No hay información del total de los impuestos"
                    const totalDescuentos = totales.totalDescuentos ? totales.totalDescuentos + "$" : "No hay infomración del total desconectado"
                    const totalReservaNetoSinDescuentos = totales.totalReservaNetoSinOfertas ? totales.totalReservaNetoSinOfertas + "$" : "No hay informacion del total de la reserva sin descuentos"
                    if (totales.totalReservaNeto) {
                        const totalReservaNetoDiaUI = document.createElement("div")
                        totalReservaNetoDiaUI.classList.add("detalleDelTotal")
                        totalReservaNetoDiaUI.textContent = "Precio medio neto de la reserva por noche: " + totalPromedioNetoPorNoche
                        totalesUI.appendChild(totalReservaNetoDiaUI)
                        if (totales.totalDescuentos) {
                            const totalDescuentosAplicadosUI = document.createElement("div")
                            totalDescuentosAplicadosUI.classList.add("detalleDelTotal")
                            totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas: " + totalDescuentos
                            totalesUI.appendChild(totalDescuentosAplicadosUI)
                            const totalReservaNetoSinOfertasUI = document.createElement("div")
                            totalReservaNetoSinOfertasUI.classList.add("detalleDelTotal")
                            totalReservaNetoSinOfertasUI.textContent = "Total neto sin ofertas aplicadas: " + totalReservaNetoSinDescuentos
                            totalesUI.appendChild(totalReservaNetoSinOfertasUI)
                        }
                        const totalReservaNetoUI = document.createElement("div")
                        totalReservaNetoUI.classList.add("detalleDelTotal")
                        totalReservaNetoUI.textContent = "Total reserva neto: " + totalReservaNeto
                        totalesUI.appendChild(totalReservaNetoUI)
                        const totalImpuestosUI = document.createElement("div")
                        totalImpuestosUI.classList.add("detalleDelTotal")
                        totalImpuestosUI.textContent = "Total impuestos aplicados: " + totalImpuestos
                        totalesUI.appendChild(totalImpuestosUI)
                        const totalConImpuestosUI = document.createElement("div")
                        totalConImpuestosUI.classList.add("detalleDelTotal")
                        totalConImpuestosUI.classList.add("negrita")
                        totalConImpuestosUI.textContent = "Total final: " + totales.totalConImpuestos + "$"
                        totalesUI.appendChild(totalConImpuestosUI)
                    } else {
                        const info = document.createElement("div")
                        info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                        info.textContent = "No hay información de totales"
                        totalesUI.appendChild(info)
                    }
                    contenedorDesgloseTotales.appendChild(totalesUI)
                    selectorDestino.appendChild(contenedorDesgloseTotales)



                },
            },
            componentesComplejos: {
                selectorApartamentosEspecificosUI: {
                    despliegue: function (data) {
                        const textoContenedorVacio = data.textoContenedorVacio || 'Añade apartamentos'
                        const contenedorMetodosPersonalizados = data?.contenedorMetodosPersonalizados
                        const opcionesUI = data.opcionesUI


                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                        const contenedor = document.createElement('div')
                        contenedor.setAttribute("instanciaUID", instanciaUID)
                        contenedor.setAttribute("componente", "selectorApartamentos")
                        contenedor.classList.add(
                            'flexVertical',
                            "gap6"
                        )

                        const contenedorSelectorApartamentos = document.createElement('div');
                        contenedorSelectorApartamentos.classList.add('crearOfertaConentenedor');
                        const boton = document.createElement('p');
                        boton.classList.add('crearOFertaBotonAnadirApartamento');
                        boton.setAttribute('componente', 'botonAnadirApartamentoOferta');
                        boton.textContent = 'Añadir apartamento';
                        boton.addEventListener("click", (e) => {

                            this.apartamentosDisponibles({
                                e,
                                instanciaUID,
                                contenedorMetodosPersonalizados,
                                opcionesUI
                            })
                        })
                        contenedorSelectorApartamentos.appendChild(boton);

                        const contenedorApartamentos = document.createElement('div');
                        contenedorApartamentos.classList.add('crearOfertaZonaAnadirApartamento');
                        contenedorApartamentos.setAttribute('componente', 'zonaAnadirApartamento');

                        const info = document.createElement('p');
                        info.classList.add('crearApartamentoInfoSinApartamento');
                        info.setAttribute('componente', 'infoSinApartamento');
                        info.textContent = textoContenedorVacio

                        contenedorApartamentos.appendChild(info);
                        contenedorSelectorApartamentos.appendChild(contenedorApartamentos);
                        contenedor.appendChild(contenedorSelectorApartamentos);
                        return contenedor
                    },
                    apartamentosDisponibles: async function (data) {
                        const contenedorMetodosPersonalizados = data.contenedorMetodosPersonalizados
                        const opcionesUI = data.opcionesUI
                        const main = document.querySelector("main")
                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                        const instanciaUID_ui = ui.getAttribute("instanciaUID")
                        const contenedor = ui.querySelector("[componente=contenedor]")
                        main.appendChild(ui)

                        const instanciaUID = data.instanciaUID
                        const tipoDespliegue = data.tipoDespliegue

                        const spinner = casaVitini.ui.componentes.spinner({
                            mensaje: "Obteniendo apartamentos..."
                        })
                        contenedor.appendChild(spinner)

                        const respuestaServidor = await casaVitini.shell.servidor({
                            zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                        })
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_ui}"]`)
                        if (!instanciaRenderizada) { return }
                        spinner.remove()


                        if (respuestaServidor?.error) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            contenedor.innerHTML = null
                            const apartamentosDisponibles = respuestaServidor?.ok
                            apartamentosDisponibles.forEach((apartamentoDisponible) => {
                                const apartamentoIDV = apartamentoDisponible.apartamentoIDV
                                const apartamentoUI = apartamentoDisponible.apartamentoUI
                                const estadoConfiguracionIDV = apartamentoDisponible.estadoConfiguracionIDV

                                let estadoUI
                                if (estadoConfiguracionIDV === "activado") {
                                    estadoUI = "Activado"
                                }
                                if (estadoConfiguracionIDV === "desactivado") {
                                    estadoUI = "Desactivado"
                                }
                                const apartamentoDetallesUI = document.createElement("div")
                                apartamentoDetallesUI.classList.add("flexVertical", "flexAlineacionI", "botonV1BlancoIzquierda")
                                apartamentoDetallesUI.style.alignItems = "flex-Start"
                                apartamentoDetallesUI.setAttribute("apartamentoIDV", apartamentoIDV)
                                apartamentoDetallesUI.setAttribute("apartamentoUI", apartamentoUI)
                                apartamentoDetallesUI.setAttribute("apartamentoComoOpcion", apartamentoIDV)
                                apartamentoDetallesUI.addEventListener("click", () => {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    this.insertarApartamento({
                                        instanciaUID,
                                        apartamentoIDV,
                                        apartamentoUI,
                                        tipoDespliegue,
                                        contenedorMetodosPersonalizados,
                                        opcionesUI
                                    })
                                })

                                const apartamentoTitulo = document.createElement("p")
                                apartamentoTitulo.classList.add("crearOfertaApartamentoTItulo")
                                apartamentoTitulo.textContent = apartamentoUI
                                apartamentoDetallesUI.appendChild(apartamentoTitulo)

                                const apartamentoEstadoUI = document.createElement("p")
                                apartamentoEstadoUI.classList.add("crearOfertaApartamentoEstado")
                                apartamentoEstadoUI.setAttribute("estadouI", estadoUI)
                                apartamentoEstadoUI.textContent = estadoUI
                                apartamentoDetallesUI.appendChild(apartamentoEstadoUI)

                                const selectorApartamentoYaRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"] [apartamentoIDV=${apartamentoIDV}]`)
                                if (!selectorApartamentoYaRenderizado) {
                                    contenedor.appendChild(apartamentoDetallesUI)
                                }
                            })
                            const selectorApartamentoYaRenderizado = document.querySelectorAll(`[instanciaUID="${instanciaUID_ui}"] [apartamentoComoOpcion]`)
                            if (selectorApartamentoYaRenderizado?.length === 0) {
                                const info = document.createElement("p")
                                info.classList.add("crearApartamentoInfoSinApartamento")
                                info.setAttribute("componente", "infoSinApartamento")
                                info.textContent = "Todos los apartamentos estan insertados en este contenedor de apartamentos"
                                contenedor.appendChild(info)
                            }

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("botonV1")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.textContent = "Cerrar y volver"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            contenedor.appendChild(botonCancelar)
                        }
                    },
                    insertarApartamento: async function (data) {
                        const apartamentoIDV = data.apartamentoIDV
                        const apartamentoUI = data.apartamentoUI
                        const instanciaUID = data.instanciaUID
                        const metodoInsertarApartamento = data?.contenedorMetodosPersonalizados?.insertarApartamento || {}
                        const metodoEliminarApartamento = data?.contenedorMetodosPersonalizados?.eliminarApartamento || {}
                        const opcionesUI = data.opcionesUI

                        if (metodoInsertarApartamento.hasOwnProperty("metodo")) {

                            const metodo = metodoInsertarApartamento.metodo
                            const data = metodoInsertarApartamento?.data || {}

                            await metodo({
                                apartamentoIDV,
                                apartamentoUI,
                                instanciaUID,
                                opcionesUI,
                                ...data
                            })
                        } else {
                            document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=infoSinApartamento]`).style.display = "none"
                            const apartamentoSeleccionadoUI = this.apartamentoUI({
                                apartamentoIDV,
                                apartamentoUI,
                                instanciaUID,
                                opcionesUI,
                                metodoEliminarApartamento
                            })
                            const zonaApartamentos = document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=zonaAnadirApartamento]`)
                            zonaApartamentos.appendChild(apartamentoSeleccionadoUI)
                        }
                    },
                    apartamentoUI: function (data) {
                        const apartamentoIDV = data.apartamentoIDV
                        const apartamentoUI = data.apartamentoUI
                        const metodoEliminarApartamento = data?.metodoEliminarApartamento || {}
                        const opcionesUI = data.opcionesUI || {}

                        const apartamentoSeleccionadoUI = document.createElement("div")
                        apartamentoSeleccionadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                        apartamentoSeleccionadoUI.setAttribute("apartamentoIDV", apartamentoIDV)
                        const tituloApartamento = document.createElement("div")
                        tituloApartamento.classList.add("crearOfertaApartamentoSeleccionadoUITitulo")
                        tituloApartamento.textContent = apartamentoUI
                        apartamentoSeleccionadoUI.appendChild(tituloApartamento)

                        if (opcionesUI.hasOwnProperty("ui")) {
                            const contenedorPersonalizado = document.createElement("div")
                            contenedorPersonalizado.appendChild(opcionesUI.ui(opcionesUI?.data))
                            apartamentoSeleccionadoUI.appendChild(contenedorPersonalizado)
                        }
                        const botonEliminarApartamento = document.createElement("div")
                        botonEliminarApartamento.classList.add("botonV1BlancoIzquierda")
                        botonEliminarApartamento.style.borderRadius = "4px"
                        botonEliminarApartamento.textContent = "Eliminar apartamento"
                        botonEliminarApartamento.addEventListener("click", async (e) => {

                            if (metodoEliminarApartamento.hasOwnProperty("metodo")) {
                                const metodo = metodoEliminarApartamento.metodo
                                const data = metodoEliminarApartamento?.data || {}
                                const instanciaUID = data.instanciaUID
                                await metodo({
                                    apartamentoIDV,
                                    apartamentoUI,
                                    instanciaUID,
                                    opcionesUI,
                                    e,
                                    ...data
                                })
                            } else {
                                this.eliminarApartamentoUI({
                                    e
                                })
                            }

                        })
                        apartamentoSeleccionadoUI.appendChild(botonEliminarApartamento)


                        return apartamentoSeleccionadoUI
                    },
                    eliminarApartamentoUI: (data) => {
                        const e = data.e
                        const area = e.target.closest("[componente=selectorApartamentos]")
                        const apartamentoRenderizado = e.target.closest("[apartamentoIDV]")
                        apartamentoRenderizado.remove()
                        const conteoApartamentos = area.querySelectorAll(`[apartamentoIDV]`)

                        if (conteoApartamentos.length === 0) {
                            area.querySelector("[componente=infoSinApartamento]").removeAttribute("style")
                        }


                    }
                },
                contenedorFechasUI: (data) => {
                    const metodoSelectorDia = data?.metodoSelectorDia
                    const nombreContenedor = data?.nombreContenedor
                    const nombreFechaEntrada = data?.nombreFechaEntrada || "Fecha inicio"
                    const nombreFechaSalida = data?.nombreFechaSalida || "Fecha Final"
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()
                    const seleccionableDiaLimite = data?.seleccionableDiaLimite
                    const modo = data?.modo


                    if (modo !== "administracion" && modo !== "vision") {
                        const m = "contneedorFechaUI necesita un moodo."
                        return casaVitini.ui.componentes.advertenciaInmersiva(m)
                    }
                    const sobreControlConfiguracion = data.sobreControlConfiguracion || {}

                    const configuracionCalendarioInicio = data?.configuracionCalendarioInicio || {
                        rangoIDV: "inicioRango",
                        contenedorOrigenIDV: "[calendario=entrada]",
                        perfilMes: "calendario_entrada_perfilSimple",
                        metodoSelectorDia,
                        seleccionableDiaLimite,
                        ...sobreControlConfiguracion.configuracionInicio
                    }
                    configuracionCalendarioInicio.instanciaUID_contenedorFechas = instanciaUID_contenedorFechas

                    const configuracionCalendarioFinal = data?.configuracionCalendarioFinal || {
                        rangoIDV: "finalRango",
                        contenedorOrigenIDV: "[calendario=salida]",
                        perfilMes: "calendario_salida_perfilSimple",
                        metodoSelectorDia,
                        seleccionableDiaLimite,
                        ...sobreControlConfiguracion.configuracionFin

                    }
                    configuracionCalendarioFinal.instanciaUID_contenedorFechas = instanciaUID_contenedorFechas



                    if (nombreContenedor) {
                        const selector = document.querySelector(nombreContenedor)
                        if (selector) {
                            const error = "Cuidado, el contenedor de fecha ui tiene un nombre de contenedor ya existente en el dom."
                            return casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                    }

                    const divContenedor = document.createElement('div');
                    divContenedor.classList.add('contenedorFechasSobreBloque');
                    divContenedor.setAttribute("CSS", "selectorFechas")
                    divContenedor.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                    divContenedor.setAttribute('nombreContenedor', nombreContenedor);

                    const divContenedorHorizontal = document.createElement('div');
                    divContenedorHorizontal.classList.add('contenedorFechasCompartido');
                    const divContenedorFechaInicio = document.createElement('div');
                    divContenedorFechaInicio.classList.add('contenedorFecha');
                    divContenedorFechaInicio.setAttribute('calendario', 'entrada');
                    divContenedorFechaInicio.setAttribute('nombreContenedor', nombreContenedor);
                    divContenedorFechaInicio.setAttribute('componente', 'inicioOferta');
                    divContenedorFechaInicio.setAttribute('paralizadorEvento', 'ocultadorCalendarios');

                    if (modo === "administracion") {
                        divContenedorFechaInicio.addEventListener("click", (e) => {
                            casaVitini.ui.componentes.calendario.configurarCalendario(configuracionCalendarioInicio)
                        })
                    }

                    const pFechaInicio = document.createElement('p');
                    pFechaInicio.classList.add('negrita');
                    pFechaInicio.textContent = nombreFechaEntrada

                    const pFechaInicioSeleccionada = document.createElement('p');
                    pFechaInicioSeleccionada.classList.add('fechaInicio');
                    pFechaInicioSeleccionada.setAttribute('fechaUI', 'fechaInicio');
                    pFechaInicioSeleccionada.textContent = '(Seleccionar)';

                    divContenedorFechaInicio.appendChild(pFechaInicio);
                    divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);

                    const divContenedorFechaFin = document.createElement('div');
                    divContenedorFechaFin.classList.add('contenedorFecha');
                    divContenedorFechaFin.setAttribute('calendario', 'salida');
                    divContenedorFechaFin.setAttribute('paralizadorEvento', 'ocultadorCalendarios');
                    divContenedorFechaFin.setAttribute('componente', 'finOferta');
                    if (modo === "administracion") {
                        divContenedorFechaFin.addEventListener("click", () => {
                            casaVitini.ui.componentes.calendario.configurarCalendario(configuracionCalendarioFinal)
                        })

                    }


                    const pFechaFin = document.createElement('p');
                    pFechaFin.classList.add('negrita');
                    pFechaFin.textContent = nombreFechaSalida

                    const pFechaFinSeleccionada = document.createElement('p');
                    pFechaFinSeleccionada.classList.add('fechaFin');
                    pFechaFinSeleccionada.setAttribute('fechaUI', 'fechaFin');
                    pFechaFinSeleccionada.textContent = '(Seleccionar)';

                    divContenedorFechaFin.appendChild(pFechaFin);
                    divContenedorFechaFin.appendChild(pFechaFinSeleccionada);

                    divContenedorHorizontal.appendChild(divContenedorFechaInicio);
                    divContenedorHorizontal.appendChild(divContenedorFechaFin);

                    divContenedor.appendChild(divContenedorHorizontal);
                    return divContenedor
                },
                grid: {
                    despliegue: function (data) {
                        const configuracionGrid = data.configuracionGrid
                        const configuracionPaginador = data.configuracionPaginador
                        const metodoSalida = data.metodoSalida

                        configuracionPaginador.gridUID = configuracionGrid.gridUID
                        configuracionPaginador.pagina = configuracionGrid.pagina
                        configuracionPaginador.metodoSalida = metodoSalida

                        const filas = configuracionGrid.filas
                        const sentidoColumna = configuracionGrid.sentidoColumna ? configuracionGrid.sentidoColumna : ""
                        const nombreColumna = configuracionGrid.nombreColumna ? configuracionGrid.nombreColumna : ""
                        const pagina = configuracionGrid.pagina
                        const mascaraURL = configuracionGrid.mascaraURL
                        const columnasGrid = configuracionGrid.columnasGrid
                        const numeroColumnas = columnasGrid.length
                        const gridUID = configuracionGrid.gridUID
                        const destino = configuracionGrid.destino
                        const parametros = configuracionGrid.parametros ? configuracionGrid.parametros : {}
                        const almacen = configuracionGrid.almacen

                        if (!filas) {
                            const error = "No estoy recibiendo contenido para las filas, recuerda que constructorGridClientes, necesita el objeto ya procesador para el servidor, no lo envía"
                            return casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }


                        const contenedor_selector = document.querySelector(`[areaGrid="${gridUID}"]`)
                        if (!contenedor_selector) {
                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("areaGrid", gridUID)
                            contenedor.setAttribute("almacen", JSON.stringify(almacen))
                            contenedor.classList.add(
                                "flexVertical",
                            )

                            document.querySelector(`${destino}`)?.appendChild(contenedor)

                            const contenedorSelectorFiltros = document.createElement("div")
                            contenedorSelectorFiltros.setAttribute("contenedor", "filtrosOrden")
                            contenedor.appendChild(contenedorSelectorFiltros)

                            const contenedorResultados = document.createElement("div")
                            contenedorResultados.setAttribute("contenedor", "resultados")
                            contenedor.appendChild(contenedorResultados)

                            const contenedorPaginador = document.createElement("div")
                            contenedorPaginador.setAttribute("contenedor", "paginador")
                            contenedorPaginador.style.paddingTop = "6px"
                            contenedor.appendChild(contenedorPaginador)
                        }
                        const contenedor_renderizado = document.querySelector(`[areaGrid="${gridUID}"]`)

                        const contenedorResultados = contenedor_renderizado.querySelector(`[contenedor=resultados]`)

                        const valorColumnasCss = []
                        for (const i in columnasGrid) {
                            valorColumnasCss.push("auto")
                        }

                        const gridConstruido_selector = document.querySelector(`[areaGrid="${gridUID}"] [gridUID=${gridUID}]`)
                        if (!gridConstruido_selector) {
                            const constructorGrid = document.createElement("div")
                            constructorGrid.style.gridTemplateColumns = valorColumnasCss.join(" ")
                            constructorGrid.classList.add(
                                "administracionGridReservas"
                            )
                            constructorGrid.setAttribute("gridUID", gridUID)

                            contenedorResultados.appendChild(constructorGrid)
                        }
                        const gridConstruido_renderizado = document.querySelector(`[areaGrid="${gridUID}"] [gridUID=${gridUID}]`)
                        gridConstruido_renderizado.setAttribute("nombreColumnaSeleccionada", nombreColumna)
                        gridConstruido_renderizado.setAttribute("sentidoColumna", sentidoColumna)
                        gridConstruido_renderizado.setAttribute("numeroPagina", pagina)
                        gridConstruido_renderizado.setAttribute("parametros", JSON.stringify(parametros))

                        const selectorTitulosColumnas = document.querySelectorAll("[componenteGrid=celdaTituloColumna]")
                        selectorTitulosColumnas.forEach((celdaTituloColumna) => {
                            celdaTituloColumna.style.removeProperty("background")
                            celdaTituloColumna.querySelector("[sentidoIconos]")?.remove()
                        })
                        let icononombreColumna
                        let descripcionnombreColumna
                        if (sentidoColumna) {
                            if (sentidoColumna === "ascendente") {
                                icononombreColumna = "/componentes/iconos/ascendente.svg"
                                descripcionnombreColumna = "Ordenar acendentemente esta columna"
                            }
                            if (sentidoColumna === "descendente") {
                                icononombreColumna = "/componentes/iconos/descendente.svg"
                                descripcionnombreColumna = "Ordenar descendentemente esta columna"
                            }
                        }
                        const selectorColumnasRenderizadas = document.querySelectorAll(`[gridUID=${gridUID}] [nombreColumna]`)
                        selectorColumnasRenderizadas.forEach((columna) => {
                            columna.setAttribute("sentidoColumna", "")
                        })

                        columnasGrid.forEach((detallesColumna) => {

                            const columnaUI = detallesColumna.columnaUI
                            const columnaIDV = detallesColumna.columnaIDV

                            const columna_selector = gridConstruido_renderizado.querySelector(`[nombreColumna="${columnaIDV}"]`)
                            if (!columna_selector) {
                                const columnaElemento = document.createElement("div")
                                columnaElemento.textContent = columnaUI
                                columnaElemento.classList.add("administracionReservasColumnaTitulo")
                                columnaElemento.setAttribute("nombreColumna", columnaIDV)
                                columnaElemento.setAttribute("componenteGrid", "celdaTituloColumna")
                                columnaElemento.addEventListener("click", (e) => {
                                    const columna = e.target.closest("[nombreColumna]")
                                    this.ordenarPorColumna({
                                        gridUID,
                                        metodoSalida,
                                        columna
                                    })
                                })
                                gridConstruido_renderizado.appendChild(columnaElemento)
                            }
                            const columna_renderizada = gridConstruido_renderizado.querySelector(`[nombreColumna="${columnaIDV}"]`)

                            if (nombreColumna === columnaIDV) {
                                if (nombreColumna) {
                                    columna_renderizada.style.background = "#00000047"
                                    columna_renderizada.setAttribute("nombreColumna", columnaIDV)
                                    columna_renderizada.setAttribute("sentidoColumna", sentidoColumna)

                                    const iconoColumna = document.createElement("img");
                                    iconoColumna.src = icononombreColumna;
                                    iconoColumna.alt = descripcionnombreColumna;
                                    iconoColumna.classList.add("icononombreColumna");
                                    iconoColumna.setAttribute("sentidoIconos", sentidoColumna)
                                    columna_renderizada.appendChild(iconoColumna)
                                }
                            }
                        })

                        const selectorFilasGrid = gridConstruido_renderizado.querySelectorAll("[componenteGrid=fila]")
                        selectorFilasGrid.forEach((filaGrid) => {
                            filaGrid.remove()
                        })
                        const columnasAceptadas = columnasGrid.map((columna) => {
                            return columna.columnaIDV
                        })

                        filas.forEach((detallesFila) => {
                            const fila = document.createElement("a")
                            fila.setAttribute("class", "administracionReservasFila")
                            fila.setAttribute("componenteGrid", "fila")
                            fila.setAttribute("href", mascaraURL?.mascara + detallesFila[mascaraURL?.parametro])
                            fila.addEventListener("click", this.resolverFila)
                            for (const detallesObjeto of Object.entries(detallesFila)) {
                                const celdaIDV = detallesObjeto[0]
                                const celdaUI = detallesObjeto[1]
                                if (columnasAceptadas.includes(celdaIDV)) {
                                    const celda = document.createElement("div")
                                    celda.setAttribute("class", "administracionCeldaEstiloCompartido")
                                    celda.setAttribute("celdaIDV", celdaIDV)
                                    celda.textContent = celdaUI
                                    fila.appendChild(celda)
                                }
                            }
                            gridConstruido_renderizado.appendChild(fila)
                        })
                        this.tarjetas.selectorFiltro.despliegue({
                            gridUID,
                            columnas: columnasGrid,
                            columnaSeleccionada: nombreColumna,
                            sentidoSeleccionado: sentidoColumna,
                            metodoSalida
                        })

                        this.paginador(configuracionPaginador)

                        this.tarjetas.constructorTarjetas({
                            columnasGrid,
                            filas,
                            mascaraURL,
                            gridUID
                        })
                    },
                    cambiarPagina: async (data) => {

                        const gridUID = data.gridUID
                        const metodoSalida = data.metodoSalida
                        const gridEnlazado = document.querySelector(`[gridUID=${gridUID}]`)
                        const botonOrigen = data.e.target

                        const allButtons = botonOrigen.closest("[componenteID=navegacionPaginacion]").querySelectorAll("[boton]")
                        allButtons.forEach(aB => aB.classList.remove("parpeoGridSel"))
                        botonOrigen.classList.add("parpeoGridSel")

                        if (!gridEnlazado) {
                            const m = "cambiarPagina no encuentra el grid sobre el que actual"
                            return casaVitini.ui.componentes.advertenciaInmersiva(m)
                        }
                        const main = document.querySelector("main")
                        const instanciaUID = main.getAttribute("instanciaUID")
                        const tipoBoton = data.componenteID
                        const nombreColumna = gridEnlazado.getAttribute("nombreColumnaSeleccionada")
                        const sentidoColumna = gridEnlazado.getAttribute("sentidoColumna")
                        const paginaActual = Number(gridEnlazado.getAttribute("numeroPagina"))
                        const paginaTipo = data.paginaTipo


                        const transacccion = {
                            gridUID,
                            paginaTipo
                        }
                        if (nombreColumna) {
                            transacccion.nombreColumna = nombreColumna
                        }
                        if (sentidoColumna) {
                            transacccion.sentidoColumna = sentidoColumna
                        }
                        if (tipoBoton === "numeroPagina") {
                            const numeroPagina = data.numeroPagina
                            transacccion.pagina = Number(numeroPagina)
                            transacccion.origen = "botonNumeroPagina"
                        }
                        if (tipoBoton === "botonAdelantePaginacion") {
                            const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                            let mueveNavegadorHaciaAdelante = "Desactivado";
                            if (Number(posicionRelativa) === 10) {
                                mueveNavegadorHaciaAdelante = "Activado"
                            }
                            transacccion.pagina = paginaActual + 1
                            transacccion.origen = "botonNumeroPagina"
                            transacccion.moverHaciaAdelanteNavegacion = mueveNavegadorHaciaAdelante
                            transacccion.sentidoNavegacion = "Adelante"
                        }
                        if (tipoBoton === "botonAtrasPaginacion") {
                            const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                            let mueveNavegadorHaciaAtras = "Desactivado";
                            if (Number(posicionRelativa) === 1) {
                                mueveNavegadorHaciaAtras = "Activado"
                            }
                            transacccion.pagina = paginaActual - 1
                            transacccion.origen = "botonNumeroPagina"
                            transacccion.mueveNavegadorHaciaAtras = mueveNavegadorHaciaAtras
                            transacccion.sentidoNavegacion = "Atras"
                        }

                        await casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                            ruta: metodoSalida,
                            args: transacccion
                        })
                        botonOrigen.classList.remove("parpeoGridSel")

                    },
                    paginador: function (metadatos) {

                        const paginaActual = metadatos.pagina
                        const moverHaciaAdelanteNavegacion = metadatos.moverHaciaAdelanteNavegacion
                        const mueveNavegadorHaciaAtras = metadatos.mueveNavegadorHaciaAtras
                        const sentidoNavegacion = metadatos.sentidoNavegacion
                        const posicionRelativa = metadatos.posicionRelativa
                        const paginasTotales = metadatos.paginasTotales
                        const cambiarPagina = metadatos.cambiarPagina
                        const metodoSalida = metadatos.metodoSalida
                        const gridUID = metadatos.gridUID

                        const granuladoURL = metadatos.granuladoURL
                        let inicioPaginacion = paginaActual
                        const constructorURL = (granuladoURL, pagina) => {
                            if (!granuladoURL) {
                                const error = "El constructor URL dentro del paginador necesita el gridUID"
                                return casaVitini.ui.componentes.advertenciaInmersiva(error)
                            }
                            if (!pagina) {
                                const error = "El constructor URL dentro del paginador necesita el pagina"
                                return casaVitini.ui.componentes.advertenciaInmersiva(error)
                            }
                            const directoriosFusion = granuladoURL.directoriosFusion
                            const parametros = granuladoURL.parametros
                            parametros.pagina = pagina
                            const parametrosArray = []
                            for (const [parametro, valor] of Object.entries(parametros)) {
                                const estructura = `${parametro}:${valor}`
                                parametrosArray.push(estructura)
                            }
                            const parametrosFusion = directoriosFusion + "/" + parametrosArray.join("/")
                            return parametrosFusion
                        }
                        const navegacionPaginacion = document.createElement("div")
                        navegacionPaginacion.classList.add("administracionNavegacionPaginacion", "sobreControlAnimacionGlobal")
                        navegacionPaginacion.setAttribute("componenteID", "navegacionPaginacion")
                        navegacionPaginacion.setAttribute("gridUID_enlazado", gridUID)
                        if (moverHaciaAdelanteNavegacion === "Desactivado" && sentidoNavegacion === "Adelante") {
                            inicioPaginacion = Number(document.querySelector("[posicionRelativa='1']").getAttribute("navegacionPagina"))
                        }
                        if (mueveNavegadorHaciaAtras === "Desactivado" && sentidoNavegacion === "Atras") {
                            if (posicionRelativa === 1) {
                                inicioPaginacion = paginaActual - (9)
                            }
                            if (posicionRelativa > 1) {
                                inicioPaginacion = Number(document.querySelector("[posicionRelativa='1']").getAttribute("navegacionPagina"))
                            }
                        }
                        if (cambiarPagina === "porNumeroDePagina") {
                            inicioPaginacion = Number(document.querySelector("[posicionRelativa='1']").getAttribute("navegacionPagina"))
                        }
                        if (paginaActual > 1) {
                            const navegacionPaginacionbotonAtras = document.createElement("a")
                            navegacionPaginacionbotonAtras.classList.add("navegacionPaginacion")
                            navegacionPaginacionbotonAtras.classList.add("navegacionPaginacionbotonAtras")
                            navegacionPaginacionbotonAtras.setAttribute("boton", "atras")
                            navegacionPaginacionbotonAtras.setAttribute("href", constructorURL(granuladoURL, (paginaActual - 1)))
                            navegacionPaginacionbotonAtras.addEventListener("click", (e) => {
                                e.preventDefault()
                                return this.cambiarPagina({
                                    gridUID: gridUID,
                                    componenteID: "botonAtrasPaginacion",
                                    paginaTipo: "otra",
                                    metodoSalida,
                                    e
                                });
                            })
                            navegacionPaginacionbotonAtras.textContent = "Atras"
                            navegacionPaginacion.appendChild(navegacionPaginacionbotonAtras)
                        } else {
                            document.querySelector("[componenteID=botonAtrasPaginacion]")?.remove()
                        }
                        let numRedondeado
                        if ((Math.floor(inicioPaginacion / 10) * 10) === inicioPaginacion) {
                            numRedondeado = inicioPaginacion - 9
                        } else {
                            numRedondeado = (Math.floor(inicioPaginacion / 10) * 10) + 1;
                        }
                        for (let ciclo = 0; ciclo < 10; ciclo++) {
                            const numeroPagina = numRedondeado + ciclo
                            const numeroPaginaElemento = document.createElement("a")
                            numeroPaginaElemento.classList.add("numeroPaginaElemento")
                            numeroPaginaElemento.setAttribute("boton", "numero")
                            numeroPaginaElemento.setAttribute("href", constructorURL(granuladoURL, numeroPagina))
                            numeroPaginaElemento.setAttribute("posicionRelativa", ciclo + 1)
                            const estructura = {
                                gridUID: gridUID,
                                componenteID: "numeroPagina",
                                numeroPagina: numeroPagina,
                                metodoSalida
                            }

                            if (numeroPagina === paginaActual) {

                                numeroPaginaElemento.style.background = "blue"
                                numeroPaginaElemento.style.color = "white"
                                estructura.paginaTipo = "actual"
                            } else {

                                numeroPaginaElemento.style.removeProperty("color")
                                numeroPaginaElemento.style.removeProperty("background")
                                estructura.paginaTipo = "otra"
                            }
                            numeroPaginaElemento.addEventListener("click", (e) => {
                                e.preventDefault()
                                estructura.e = e
                                return this.cambiarPagina(estructura);
                            })
                            numeroPaginaElemento.textContent = numeroPagina
                            if (numeroPagina <= paginasTotales) {
                                navegacionPaginacion.appendChild(numeroPaginaElemento)
                            } else {
                                break
                            }
                        }
                        const listaPaginacionResponsiva = document.createElement("select")
                        listaPaginacionResponsiva.classList.add(
                            "componentes_ui_paginador_listaResponsiva",
                            "selector",
                            "textoCentrado"
                        )
                        listaPaginacionResponsiva.addEventListener("change", (e) => {
                            e.preventDefault()
                            const elemento = e.target
                            const selectedOption = elemento.options[elemento.selectedIndex];

                            return this.cambiarPagina({
                                gridUID: gridUID,
                                componenteID: "numeroPagina",
                                numeroPagina: e.target.value,
                                paginaTipo: selectedOption.getAttribute("paginaTipo"),
                                metodoSalida,
                                e
                            });

                        })
                        for (let ciclo = 1; ciclo < (paginasTotales + 1); ciclo++) {
                            const numeroPagina = ciclo
                            const numeroPaginaElemento = document.createElement("option")

                            numeroPaginaElemento.setAttribute("numeroPagina", numeroPagina)
                            numeroPaginaElemento.value = numeroPagina

                            if (numeroPagina === paginaActual) {
                                numeroPaginaElemento.setAttribute("paginaTipo", "actual")
                                numeroPaginaElemento.style.background = "blue"
                                numeroPaginaElemento.style.color = "white"
                                numeroPaginaElemento.selected = true
                                numeroPaginaElemento.disabled = true
                            } else {
                                numeroPaginaElemento.setAttribute("paginaTipo", "otra")
                                numeroPaginaElemento.style.removeProperty("color")
                                numeroPaginaElemento.style.removeProperty("background")
                            }
                            numeroPaginaElemento.textContent = "Página: " + numeroPagina
                            listaPaginacionResponsiva.appendChild(numeroPaginaElemento)
                        }
                        navegacionPaginacion.appendChild(listaPaginacionResponsiva)
                        if (paginasTotales > 1 && paginaActual < paginasTotales) {
                            const navegacionPaginacionbotonAdelante = document.createElement("a")
                            navegacionPaginacionbotonAdelante.classList.add("navegacionPaginacion")
                            navegacionPaginacionbotonAdelante.setAttribute("boton", "adelante")
                            navegacionPaginacionbotonAdelante.classList.add("navegacionPaginacionbotonAdelante")
                            navegacionPaginacionbotonAdelante.setAttribute("href", constructorURL(granuladoURL, (paginaActual + 1)))
                            navegacionPaginacionbotonAdelante.addEventListener("click", (e) => {
                                e.preventDefault()

                                return this.cambiarPagina({
                                    gridUID: gridUID,
                                    componenteID: "botonAdelantePaginacion",
                                    paginaTipo: "otra",
                                    metodoSalida,
                                    e
                                })
                            })
                            navegacionPaginacionbotonAdelante.textContent = "Adelante"
                            navegacionPaginacion.appendChild(navegacionPaginacionbotonAdelante)
                        } else {
                            document.querySelector("[componenteID=botonAdelantePaginacion]")?.remove()
                        }
                        document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                        if (Number(paginasTotales) > 1) {
                            document.querySelector(`[areaGrid="${gridUID}"] [contenedor=paginador]`).appendChild(navegacionPaginacion)
                        }
                    },
                    ordenarPorColumna: async (data, e) => {
                        const metodoSalida = data.metodoSalida
                        const gridUID = data.gridUID
                        const columna = data.columna
                        const areaGrid = document.querySelector(`[areaGrid="${gridUID}"]`)
                        const grid = areaGrid.querySelector(`[gridUID="${gridUID}"]`)

                        const allColumns = areaGrid.querySelectorAll("[componenteGrid=celdaTituloColumna]")
                        allColumns.forEach(aC => { aC.classList.remove("parpeoGridSel") })

                        columna.classList.add("parpeoGridSel")
                        const nombreColumna = columna.getAttribute("nombreColumna")
                        const selectorColumnasentido = columna.getAttribute("sentidoColumna")
                        const numeroPagina = grid.getAttribute("numeroPagina")
                        const transaccion = {
                            pagina: Number(numeroPagina),
                            origen: "tituloColumna"
                        }

                        if (selectorColumnasentido === "ascendente") {
                            transaccion.sentidoColumna = "descendente"
                            transaccion.nombreColumna = nombreColumna
                        }
                        if (!selectorColumnasentido) {
                            transaccion.sentidoColumna = "ascendente"
                            transaccion.nombreColumna = nombreColumna
                        }

                        await casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                            ruta: metodoSalida,
                            args: transaccion
                        })
                        columna.classList.remove("parpeoGridSel")

                    },
                    resolverFila: (transaccion) => {
                        transaccion.preventDefault()
                        transaccion.stopPropagation()
                        const servicioUID = transaccion.target.parentNode.getAttribute("href")
                        const navegacion = {
                            vista: servicioUID,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    },
                    tarjetas: {
                        selectorFiltro: {
                            despliegue: function (data) {
                                const gridUID = data.gridUID
                                const columnas = data.columnas
                                const metodoSalida = data.metodoSalida

                                const columnaSeleccioanda = data?.columnaSeleccionada || null
                                const sentidoSeleccionado = data?.sentidoSeleccionado || null

                                const selectorFiltroOrden = document.querySelector(`[areaGrid="${gridUID}"]`).querySelector("[contenedor=filtrosOrden]")

                                const contenedo_selector = selectorFiltroOrden.querySelector("[contenedor=filtrosDesplegables]")
                                if (!contenedo_selector) {

                                    const contenedorFiltrosOrden = document.createElement("div")
                                    contenedorFiltrosOrden.setAttribute("contenedor", "filtrosDesplegables")
                                    contenedorFiltrosOrden.classList.add(
                                        "flexHorizontal",
                                        "gap6"
                                    )


                                    const botonReseteo = document.createElement("div")
                                    botonReseteo.classList.add(
                                        "selector",
                                        "textoCentrado",
                                        "comportamientoBoton",
                                        "noSelecionable",
                                        "ratonDefault"
                                    )
                                    botonReseteo.textContent = "Resetear filtros"
                                    botonReseteo.addEventListener("click", (e) => {
                                        const contenedor = e.target.closest("[contenedor=filtrosOrden]")
                                        const selectorColumna = contenedor.querySelector("[selector=ordenPorColumna]")
                                        const selectorSentido = contenedor.querySelector("[selector=sentido]")
                                        selectorColumna.selectedIndex = 0
                                        selectorSentido.selectedIndex = 0
                                        this.pasarela({
                                            gridUID,
                                            metodoSalida
                                        })
                                    })
                                    contenedorFiltrosOrden.appendChild(botonReseteo)

                                    const selectorColumna = document.createElement("select")
                                    selectorColumna.setAttribute("selector", "ordenPorColumna")
                                    selectorColumna.addEventListener("change", () => {
                                        this.pasarela({
                                            gridUID,
                                            metodoSalida
                                        })
                                    })
                                    selectorColumna.classList.add(
                                        "selector",
                                        "textoCentrado"
                                    )
                                    contenedorFiltrosOrden.appendChild(selectorColumna)
                                    const opcionPreterminada = document.createElement("option");
                                    opcionPreterminada.disabled = "true"
                                    opcionPreterminada.value = ""
                                    opcionPreterminada.text = "Ordenar por columna";
                                    if (!columnaSeleccioanda) {
                                        opcionPreterminada.selected = "true"
                                    }

                                    selectorColumna.add(opcionPreterminada)

                                    columnas.forEach((columna) => {
                                        const columnaUI = columna.columnaUI
                                        const columnaIDV = columna.columnaIDV
                                        const opcion = document.createElement("option");
                                        opcion.value = columnaIDV;
                                        opcion.text = columnaUI;
                                        if (columnaSeleccioanda === columnaIDV) {
                                            opcion.selected = "true"
                                        }
                                        selectorColumna.add(opcion);
                                    })

                                    const selectorSentido = document.createElement("select")
                                    selectorSentido.setAttribute("selector", "sentido")
                                    selectorSentido.addEventListener("change", () => {
                                        this.pasarela({
                                            gridUID,
                                            metodoSalida
                                        })
                                    })

                                    selectorSentido.classList.add(
                                        "selector",
                                        "textoCentrado"
                                    )
                                    contenedorFiltrosOrden.appendChild(selectorSentido)
                                    const opcionSentido = document.createElement("option");
                                    opcionSentido.disabled = "true"
                                    opcionSentido.text = "Sentido";
                                    opcionSentido.value = ""
                                    if (!sentidoSeleccionado) {
                                        opcionSentido.selected = "true"
                                    }
                                    selectorSentido.add(opcionSentido)

                                    const sentidos = [
                                        {
                                            sentidoUI: "Ascendente",
                                            sentidoIDV: "ascendente"
                                        },
                                        {
                                            sentidoUI: "Descendente",
                                            sentidoIDV: "descendente"
                                        }
                                    ]

                                    sentidos.forEach((sentido) => {
                                        const sentidoUI = sentido.sentidoUI
                                        const sentidoIDV = sentido.sentidoIDV
                                        const opcion = document.createElement("option");
                                        opcion.value = sentidoIDV;
                                        opcion.text = sentidoUI;
                                        if (sentidoSeleccionado === sentidoIDV) {
                                            opcion.selected = "true"
                                        }
                                        selectorSentido.add(opcion);
                                    })

                                    selectorFiltroOrden.appendChild(contenedorFiltrosOrden)

                                }
                                const contenedor_renderizado = selectorFiltroOrden.querySelector("[contenedor=filtrosDesplegables]")

                                const selectorOrdenPorColumna = contenedor_renderizado.querySelector("[selector=ordenPorColumna]")
                                const selectorSentido = contenedor_renderizado.querySelector("[selector=sentido]")

                                if (columnaSeleccioanda) {
                                    selectorOrdenPorColumna.value = columnaSeleccioanda
                                } else {
                                    selectorOrdenPorColumna.selectedIndex = 0
                                }
                                if (sentidoSeleccionado) {
                                    selectorSentido.value = sentidoSeleccionado
                                } else {
                                    selectorSentido.selectedIndex = 0
                                }


                            },
                            pasarela: (data) => {
                                const gridUID = data.gridUID
                                const metodoSalida = data.metodoSalida
                                const areaGrid = document.querySelector(`[areaGrid="${gridUID}"]`)
                                const contenedor = areaGrid.querySelector("[contenedor=filtrosOrden]")
                                const selectorColumna = contenedor.querySelector("[selector=ordenPorColumna]").value
                                const selectorSentido = contenedor.querySelector("[selector=sentido]").value
                                const numeroPagina = areaGrid.querySelector(`[gridUID="${gridUID}"]`).getAttribute("numeroPagina")
                                const transaccion = {
                                    pagina: Number(numeroPagina),
                                    origen: "tituloColumna",
                                    granuladoURL: casaVitini.utilidades.granuladorURL()
                                }
                                if (selectorSentido) {
                                    transaccion.sentidoColumna = selectorSentido
                                }
                                if (selectorColumna) {
                                    transaccion.nombreColumna = selectorColumna
                                }

                                return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                    ruta: metodoSalida,
                                    args: transaccion
                                })
                            }
                        },
                        constructorTarjetas: (data) => {
                            const columnasGrid = data.columnasGrid

                            const filas = data.filas
                            const gridUID = data.gridUID
                            const mascaraURL = data.mascaraURL
                            const columnasAceptadas = columnasGrid.map((columna) => {
                                return columna.columnaIDV
                            })
                            const diccionarioColumnas = {}
                            columnasGrid.forEach(c => {
                                const columnaIDV = c.columnaIDV
                                const columnaUI = c.columnaUI
                                diccionarioColumnas[columnaIDV] = columnaUI
                            })

                            const contenedorTarjetas = document.querySelector("[contenedor=tarjetas]")
                            contenedorTarjetas?.remove()

                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("contenedor", "tarjetas")
                            contenedor.classList.add(
                                "gap6"
                            )
                            document.querySelector(`[areaGrid="${gridUID}"]`)
                                .querySelector(`[contenedor=resultados]`)
                                .appendChild(contenedor)


                            filas.forEach(fila => {
                                const tarjeta = document.createElement("a")
                                tarjeta.setAttribute("componente", "tarjeta")
                                tarjeta.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "tarjeta",
                                    "borderRadius10",
                                    "backgroundGrey1",
                                    "padding10",
                                    "areaSinDecoracionPredeterminada",
                                    "ratonDefault",
                                    "comportamientoBoton"
                                )
                                tarjeta.href = mascaraURL?.mascara + fila[mascaraURL?.parametro]
                                tarjeta.setAttribute("vista", mascaraURL?.mascara + fila[mascaraURL?.parametro])
                                tarjeta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                contenedor.appendChild(tarjeta)

                                Object.entries(fila).forEach(([dataIDV, data]) => {

                                    if (columnasAceptadas.includes(dataIDV)) {

                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add(
                                            "flexVertical"
                                        )
                                        tarjeta.appendChild(contenedor)

                                        const titulo = document.createElement("div")
                                        titulo.innerHTML = diccionarioColumnas[dataIDV]
                                        contenedor.appendChild(titulo)

                                        const dataUI = document.createElement("div")
                                        dataUI.classList.add(
                                            "negrita",
                                            "textoElipsis"
                                        )
                                        dataUI.textContent = data || "(Sin datos)"
                                        contenedor.appendChild(dataUI)
                                    }
                                })
                            })
                        },
                    }

                },
                detallesReservaUI: {
                    reservaUI: {
                        despliege: async function (data) {
                            const reservaUID = data.reservaUID
                            const configuracionVista = data.configuracionVista

                            const reserva = await this.global.obtenerReserva({
                                reservaUID,
                                configuracionVista
                            })
                            const reservaUI = this.ui.despliege({
                                reserva,
                                configuracionVista

                            })

                            const titularUI = reservaUI.querySelector("[contenedor=panelGlobal] [contenedor=titular]")
                            const estadoReservaUI = reservaUI.querySelector("[contenedor=panelGlobal] [contenedor=estadoReserva]")

                            reservaUI.setAttribute("configuracionVista", configuracionVista)
                            if (configuracionVista === "publica") {
                                reservaUI.querySelector("[contenedor=pendiente]")?.remove()
                                titularUI.style.pointerEvents = "none"
                                estadoReservaUI.style.pointerEvents = "none"

                                const contenedorFechas = reservaUI.querySelector("[nombreContenedor=rangoReserva]")
                                contenedorFechas.style.pointerEvents = "none"



                            } else {
                                titularUI.addEventListener("click", () => {
                                    this.titular.desplegarUI(reservaUID)
                                })
                                estadoReservaUI.addEventListener("click", () => {
                                    this.estado.panelExpandidoUI(reservaUID)
                                })
                            }
                            return reservaUI
                        },
                        ui: {
                            despliege: function (data) {
                                const configuracionVista = data.configuracionVista
                                const reserva = data.reserva.ok
                                const global = reserva.global

                                const fechaEntrada = global.fechaEntrada
                                const fechaSalida = global.fechaSalida
                                const porcentajeTranscurrido = global.porcentajeTranscurrido

                                const reservaUID = global.reservaUID
                                const estadoReservaIDV = global.estadoReservaIDV

                                const contenedor = this.componentesUI.contenedor(reservaUID)

                                const estadoPendienteUI = this.componentesUI.estadoPendienteUI.despliege({
                                    estadoReservaIDV,
                                    reservaUID
                                })
                                contenedor.appendChild(estadoPendienteUI)

                                const panelGlobal = this.componentesUI.bloqueGlobal.despliege(reserva)
                                contenedor.appendChild(panelGlobal)

                                const barraProgress = this.componentesUI.barraProgreso({
                                    reservaUID,
                                    porcentajeTranscurrido
                                })
                                contenedor.appendChild(barraProgress)


                                const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                                    nombreContenedor: "rangoReserva",
                                    modo: "administracion",
                                    nombreFechaEntrada: "Fecha entrada",
                                    nombreSalidaEntrada: "Fecha salida",
                                    configuracionCalendarioInicio: {
                                        rangoIDV: "inicioRango",
                                        contenedorOrigenIDV: "[calendario=entrada]",
                                        perfilMes: "calendario_entrada_asistido_detallesReserva_conPasado",
                                        mensajeInfo: "Selecciona la fecha de entrada que quieras actualizar en esta reserva",
                                        metodoSelectorDia: "ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.seleccionarDia",
                                        seleccionableDiaLimite: "no"
                                    },

                                    configuracionCalendarioFinal: {
                                        rangoIDV: "finalRango",
                                        contenedorOrigenIDV: "[calendario=salida]",
                                        perfilMes: "calendario_salida_asistido_detallesReserva_conPasado",
                                        metodoSelectorDia: "ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.seleccionarDia",
                                        mensajeInfo: "Selecciona la fecha de salida que quieras actualizar en esta reserva.",
                                        seleccionableDiaLimite: "no"

                                    }
                                })
                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.seleccionarDia
                                contenedor.appendChild(contenedorFechasUI);

                                const calendarioEntrada = contenedorFechasUI.querySelector("[calendario=entrada]")
                                const calendarioSalida = contenedorFechasUI.querySelector("[calendario=salida]")

                                calendarioEntrada.setAttribute("memoriaVolatil", fechaEntrada)
                                calendarioSalida.setAttribute("memoriaVolatil", fechaSalida)

                                calendarioEntrada.querySelector("[fechaUI=fechaInicio]").textContent = fechaEntrada
                                calendarioSalida.querySelector("[fechaUI=fechaFin]").textContent = fechaSalida



                                const contenedorBotones = this.componentesUI.categoriasGlobalesUI.despliege({
                                    rectangularidad: "horizontal",
                                    reservaUID: reservaUID,
                                    configuracionVista
                                })
                                contenedor.appendChild(contenedorBotones);
                                const contenedorDinamico = this.componentesUI.contenedorDinamico()
                                contenedor.appendChild(contenedorDinamico);
                                return contenedor

                            },
                            despliege_antiguo: async function (data) {

                                const detallesReserva = data.detallesReserva
                                const granuladoURL = casaVitini.utilidades.granuladorURL()

                                const posicionReservaUID = granuladoURL.directorios.findIndex(directorio => directorio === "reservas") + 1;

                                const categoriaGlobalInicial = granuladoURL.rawArray[3]

                                const global = detallesReserva.global
                                const detallesTitular = detallesReserva?.titular
                                const contenedorFinanciero = detallesReserva.contenedorFinanciero
                                const reservaUID = global.reservaUID

                                const porcentajeTranscurrido = global.porcentajeTranscurrido

                                const detallesDeLaReserva = respuestaServidor.reserva
                                const estadoReservaIDV = global.estadoReservaIDV
                                const estadoPagoIDV = global.estadoPagoIDV
                                const fechaCreacion = global.fechaCreacion
                                const origenIDV = global.origenIDV
                                const fechaEntrada = global.fechaEntrada
                                const fechaSalida = global.fechaSalida
                                const totalReserva = contenedorFinanciero?.desgloseFinanciero?.global?.totales?.totalFinal ?? "Sin información"

                                const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaEntrada)
                                const fechaFinal_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaSalida)

                                const titulo = document.querySelector(".tituloGris")

                                titulo?.remove()
                                let estadoReservaUI
                                if (estadoReservaIDV === "cancelada") {
                                    estadoReservaUI = "Cancelada"
                                }
                                if (estadoReservaIDV === "confirmada") {
                                    estadoReservaUI = "Confirmada"
                                }
                                if (estadoReservaIDV === "pendiente") {
                                    estadoReservaUI = "Pendiente"
                                }
                                let estadoPagoUI
                                if (estadoPagoIDV === "pagado") {
                                    estadoPagoUI = "Pagado"
                                }
                                if (estadoPagoIDV === "noPagado") {
                                    estadoPagoUI = "No pagado"
                                }
                                if (estadoPagoIDV === "pagadoParcialmente") {
                                    estadoPagoUI = "Pagado parcialmente"
                                }
                                if (estadoPagoIDV === "pagadoSuperadamente") {
                                    estadoPagoUI = "Pagado superadamente"
                                }
                                let nombreCompletoTitular = "(Níngun titular asignado)"

                                if (detallesTitular.nombreTitular) {
                                    nombreCompletoTitular = detallesTitular.nombreTitular
                                }
                                let origenUI
                                if (origenIDV === "cliente") {
                                    origenUI = "Cliente"
                                }
                                if (origenIDV === "administracion") {
                                    origenUI = "Adminitración"
                                }
                                const marcoElastico = document.createElement("div")
                                marcoElastico.classList.add("marcoElasticoRelativo")
                                marcoElastico.setAttribute("componente", "marcoElastico")

                                const divPrincipal = document.createElement("div");
                                divPrincipal.setAttribute("reservaUID", reservaUID)

                                divPrincipal.setAttribute("componente", "detalleReserva");
                                divPrincipal.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )

                                marcoElastico.appendChild(divPrincipal);

                                const contenedorPendiente = document.createElement("div")
                                if (estadoReservaIDV !== "pendiente") {
                                    contenedorPendiente.style.display = "none"
                                }
                                contenedorPendiente.setAttribute("contenedor", "pendiente")
                                contenedorPendiente.classList.add(
                                    "gap6",
                                    "borderRadius8",
                                    "contenedorPendiente"
                                )
                                divPrincipal.appendChild(contenedorPendiente);

                                const botonAceptar = document.createElement("div")
                                botonAceptar.classList.add(
                                    "botonV1",
                                    "comportamientoBoton"
                                )
                                botonAceptar.textContent = "Aceptar reserva"
                                botonAceptar.addEventListener("click", () => {
                                    this.estado.aceptarReserva({
                                        reservaUID
                                    })
                                })
                                contenedorPendiente.appendChild(botonAceptar);

                                const botonRechazar = document.createElement("div")
                                botonRechazar.classList.add(
                                    "botonV1",
                                    "comportamientoBoton"
                                )
                                botonRechazar.textContent = "Rechazar reserva"
                                botonRechazar.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.estado.rechazarReserva({
                                        reservaUID
                                    })
                                })
                                contenedorPendiente.appendChild(botonRechazar);



                                const divBloqueGeneral = document.createElement("div");
                                divBloqueGeneral.setAttribute("class", "reservaDetallesBloqueGeneral");
                                const divInformacionGeneral = document.createElement("div");
                                divInformacionGeneral.setAttribute("class", "administracionReservasDetalesMarcoEnvolventeInformacionGeneral");
                                const contenedorReseervaUID = document.createElement("div");
                                contenedorReseervaUID.setAttribute("class", "administracion_reservas_detallesReserva_contenedorReservaUID");
                                const pTitulo1 = document.createElement("p");
                                pTitulo1.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo1.textContent = "Reserva";
                                const pDato1 = document.createElement("p");
                                pDato1.classList.add(
                                    "contenedroTextoEspansivo"
                                ); adm
                                pDato1.setAttribute("dataReserva", "reservaID");
                                pDato1.setAttribute("componente", "reservaUID_" + reservaUID)
                                pDato1.textContent = reservaUID;
                                contenedorReseervaUID.appendChild(pTitulo1);
                                contenedorReseervaUID.appendChild(pDato1);
                                const contenedorRestoGlobal = document.createElement("div")
                                contenedorRestoGlobal.classList.add("administracion_reservas_detallesReserva_contenedorRestoGlobal")
                                const bloqueTitular = document.createElement("div");
                                bloqueTitular.setAttribute("class", "administracion_reservas_detallesReserva_panel_bloqueTitular");
                                bloqueTitular.setAttribute("contenedor", "titularUID")
                                bloqueTitular.addEventListener("click", this.titular.desplegarUI)
                                if (detallesTitular?.tipoTitularIDV === "titularCliente") {
                                    bloqueTitular.setAttribute("titularUID", detallesTitular.clienteUID)
                                }
                                if (detallesTitular) {
                                    bloqueTitular.setAttribute("tipoTitular", detallesTitular.tipoTitularIDV)
                                }
                                const tituloTitular = document.createElement("p");
                                tituloTitular.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                tituloTitular.textContent = "Titular de la reserva";
                                const nombreTitular = document.createElement("p");
                                nombreTitular.setAttribute("class", "marginCeroparaP");
                                nombreTitular.classList.add("contenedroTextoEspansivo");
                                nombreTitular.setAttribute("dataReserva", "nombreTitular");
                                nombreTitular.textContent = nombreCompletoTitular;
                                bloqueTitular.appendChild(tituloTitular);
                                bloqueTitular.appendChild(nombreTitular);
                                const divBloqueDual2 = document.createElement("div");
                                divBloqueDual2.setAttribute("class", "administracionReservaBloqueDual");
                                const pTitulo2 = document.createElement("p");
                                pTitulo2.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo2.textContent = "Fecha de creación UTC";
                                const pDato2 = document.createElement("p");
                                pDato2.setAttribute("class", "marginCeroparaP");
                                pDato2.setAttribute("dataReserva", "nada");
                                pDato2.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato2.textContent = fechaCreacion;
                                divBloqueDual2.appendChild(pTitulo2);
                                divBloqueDual2.appendChild(pDato2);
                                const divBloqueDual3 = document.createElement("div");
                                divBloqueDual3.setAttribute("class", "administracionReservaBloqueDual");
                                const pTitulo3 = document.createElement("p");
                                pTitulo3.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo3.textContent = "Origen de la reserva";
                                const pDato3 = document.createElement("p");
                                pDato3.setAttribute("class", "marginCeroparaP");
                                pDato3.setAttribute("dataReserva", "origen");
                                pDato3.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato3.textContent = origenUI;
                                divBloqueDual3.appendChild(pTitulo3);
                                divBloqueDual3.appendChild(pDato3);
                                const divBloqueDual4 = document.createElement("div");
                                divBloqueDual4.setAttribute("class", "administracion_reservas_detallesReserva_panel_bloqueTitular");
                                divBloqueDual4.setAttribute("contenedor", "estadoReservaIDV")
                                const pTitulo4 = document.createElement("p");
                                pTitulo4.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo4.textContent = "Estado de la reserva";
                                const pDato4 = document.createElement("p");
                                pDato4.setAttribute("class", "marginCeroparaP");
                                pDato4.setAttribute("dataReserva", "estado");
                                pDato4.setAttribute("estadoReservaIDV", estadoReservaIDV);
                                pDato4.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato4.textContent = estadoReservaUI;
                                divBloqueDual4.addEventListener("click", (e) => {
                                    this.estado.panelExpandidoUI({
                                        reservaUID,
                                        estadoActual: e.target.closest("[contenedor=estadoReservaIDV]")
                                            .querySelector("[estadoReservaIDV]")
                                            .getAttribute("estadoReservaIDV")
                                    })
                                })
                                divBloqueDual4.appendChild(pTitulo4);

                                divBloqueDual4.appendChild(pDato4);
                                const divBloqueDual5 = document.createElement("div");
                                divBloqueDual5.setAttribute("class", "administracionReservaBloqueDual");
                                const pTitulo5 = document.createElement("p");
                                pTitulo5.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo5.textContent = "Estado del pago";
                                const pDato5 = document.createElement("p");
                                pDato5.setAttribute("class", "marginCeroparaP");
                                pDato5.setAttribute("dataReserva", "estadoPago");
                                pDato5.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato5.textContent = estadoPagoUI;
                                divBloqueDual5.appendChild(pTitulo5);
                                divBloqueDual5.appendChild(pDato5);
                                const divBloqueDual6 = document.createElement("div");
                                divBloqueDual6.setAttribute("class", "administracionReservaBloqueDual");
                                const pTitulo6 = document.createElement("p");
                                pTitulo6.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo6.textContent = "Total";
                                const pDato6 = document.createElement("p");
                                pDato6.setAttribute("class", "marginCeroparaP");
                                pDato6.setAttribute("dataReserva", "totalReservaConImpuestos");
                                pDato6.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato6.textContent = totalReserva;
                                divBloqueDual6.appendChild(pTitulo6);
                                divBloqueDual6.appendChild(pDato6);
                                divInformacionGeneral.appendChild(contenedorReseervaUID);
                                contenedorRestoGlobal.appendChild(bloqueTitular);
                                contenedorRestoGlobal.appendChild(divBloqueDual2);
                                contenedorRestoGlobal.appendChild(divBloqueDual3);
                                contenedorRestoGlobal.appendChild(divBloqueDual4);
                                contenedorRestoGlobal.appendChild(divBloqueDual5);
                                contenedorRestoGlobal.appendChild(divBloqueDual6);

                                divInformacionGeneral.appendChild(contenedorRestoGlobal);
                                divBloqueGeneral.appendChild(divInformacionGeneral);
                                divPrincipal.appendChild(divBloqueGeneral);



                                const nombreClaseDinamica = `barraProgresso-anchoDinamico-${reservaUID}`;
                                if (!document.querySelector(`.${nombreClaseDinamica}`)) {

                                    const style = document.createElement('style');
                                    style.innerHTML = `
                                        .${nombreClaseDinamica} {
                                            width: ${porcentajeTranscurrido}%;
                                    `;
                                    document.querySelector("main").appendChild(style);
                                }


                                const contenedorProgreso = document.createElement("div")
                                contenedorProgreso.classList.add(
                                    "backgroundGrey1",
                                    "borderRadius8",
                                )
                                contenedorProgreso.style.height = "20px"
                                contenedorProgreso.style.overflow = "hidden"
                                divPrincipal.appendChild(contenedorProgreso);
                                const barraProgresso = document.createElement("div")
                                barraProgresso.setAttribute("componente", "progreso")
                                barraProgresso.classList.add(
                                    "barraProgresso",
                                    nombreClaseDinamica
                                )





                                contenedorProgreso.appendChild(barraProgresso);
                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.seleccionarDia
                                const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({

                                    nombreContenedor: "rangoReserva",
                                    modo: "administracion",
                                    nombreFechaEntrada: "Fecha entrada",
                                    nombreSalidaEntrada: "Fecha salida",
                                    configuracionCalendarioInicio: {
                                        rangoIDV: "inicioRango",
                                        contenedorOrigenIDV: "[calendario=entrada]",
                                        perfilMes: "calendario_entrada_asistido_detallesReserva_conPasado",
                                        mensajeInfo: "Selecciona la fecha de entrada que quieras actualizar en esta reserva",
                                        metodoSelectorDia: "administracion.reservas.detallesReserva.reservaUI.fechas.seleccionarDia",
                                        seleccionableDiaLimite: "no"
                                    },

                                    configuracionCalendarioFinal: {
                                        rangoIDV: "finalRango",
                                        contenedorOrigenIDV: "[calendario=salida]",
                                        perfilMes: "calendario_salida_asistido_detallesReserva_conPasado",
                                        metodoSelectorDia: "administracion.reservas.detallesReserva.reservaUI.fechas.seleccionarDia",
                                        mensajeInfo: "Selecciona la fecha de salida que quieras actualizar en esta reserva.",
                                        seleccionableDiaLimite: "no"

                                    }
                                })
                                divPrincipal.appendChild(contenedorFechasUI);

                                const selectorEntrada = contenedorFechasUI.querySelector("[calendario=entrada]")
                                const selectorSalida = contenedorFechasUI.querySelector("[calendario=salida]")

                                selectorEntrada.setAttribute("memoriaVolatil", fechaEntrada)
                                selectorSalida.setAttribute("memoriaVolatil", fechaSalida)

                                const fechaEntradaUI = selectorEntrada.querySelector("[fechaUI=fechaInicio]")
                                const fechaSalidaUI = selectorSalida.querySelector("[fechaUI=fechaFin]")

                                fechaEntradaUI.textContent = fechaInicio_humana
                                fechaSalidaUI.textContent = fechaFinal_humana




                                const divPropuestaCambioFecha = document.createElement("div");
                                divPropuestaCambioFecha.setAttribute("class", "resertaDetallesPropuestaCambioFechaReserva");
                                divPropuestaCambioFecha.setAttribute("componente", "espacioPropuestaCambioFechaReserva");

                                divPrincipal.appendChild(divPropuestaCambioFecha);
                                const contenedorCategoriasGlobales = document.createElement("div")
                                contenedorCategoriasGlobales.classList.add("administracion_reservas_detallesReserva_contenedorCategoriasGlobales")
                                const contenedorMenuExpandido = document.createElement("div")
                                contenedorMenuExpandido.classList.add("administracion_reservas_detallesReserva_contenedorMenuExpandido")

                                const contenedorBotones = this.categorias.categoriasGlobalesBotonesUI({
                                    rectangularidad: "horizontal",
                                    reservaUID: reservaUID
                                })
                                contenedorMenuExpandido.appendChild(contenedorBotones);

                                const marcoMenuResponsivo = document.createElement("div");
                                marcoMenuResponsivo.setAttribute("class", "administracion_reserva_detallesReserva_marcoMenuResponsivo");
                                marcoMenuResponsivo.textContent = "Menú reserva"
                                marcoMenuResponsivo.addEventListener("click", () => {
                                    document.body.style.overflow = "hidden";
                                    this.categorias.desplegarMenuResponsivo(reservaUID)
                                })
                                contenedorCategoriasGlobales.appendChild(marcoMenuResponsivo);
                                contenedorCategoriasGlobales.appendChild(contenedorMenuExpandido);
                                divPrincipal.appendChild(contenedorCategoriasGlobales);
                                const contenedorDinamico = document.createElement("div")
                                contenedorDinamico.classList.add("administracion_reservas_detallesReserva_contenedorDinamico")
                                contenedorDinamico.setAttribute("componente", "contenedorDinamico")
                                divPrincipal.appendChild(contenedorDinamico)
                                const reservaDetallesBloqueAlojamineto = document.createElement("div");
                                reservaDetallesBloqueAlojamineto.setAttribute("class", "reservaDetallesBloqueAlojamineto");
                                reservaDetallesBloqueAlojamineto.setAttribute("componente", "marcoAlojamiento");


                                const divEspacioTotales = document.createElement("div");
                                divEspacioTotales.setAttribute("class", "resertaDtallesEspacioTotales");
                                divEspacioTotales.setAttribute("componente", "espacioTotalesReserva");




                                const seccion = document.querySelector("main:not([estado=obsoleto])")
                                seccion.appendChild(marcoElastico)
                                if (categoriaGlobalInicial) {

                                    const categoriaCammelCase = categoriaGlobalInicial.replace(/_([a-z])/g, (match, group) => group.toUpperCase());
                                    const metadatos = {
                                        categoria: categoriaCammelCase,
                                        origen: "url",
                                        reservaUID: reservaUID
                                    }
                                    await this.categorias.controladorCategorias(metadatos)
                                } else {

                                    const directoriosFusionLimpios = []
                                    granuladoURL.directorios.forEach((directorio, indice) => {
                                        if (indice <= posicionReservaUID) {
                                            directoriosFusionLimpios.push(directorio)
                                        }
                                    })

                                    const categoriaAGuardarURL = (categoriaGlobalInicial) => {
                                        if (categoriaGlobalInicial) {
                                            return "/" + categoriaGlobalInicial
                                        } else {
                                            return ""
                                        }
                                    }

                                    const directoriosFusion = "/administracion/reservas/reserva:" + reservaUID + categoriaAGuardarURL(categoriaGlobalInicial)

                                    const componentesExistenteUID = "reservaUID_" + reservaUID
                                    const titulo = "Casa Vitini"
                                    const estado = {
                                        zona: directoriosFusion,
                                        EstadoInternoZona: "estado",
                                        tipoCambio: "parcial",
                                        componenteExistente: componentesExistenteUID,
                                        funcionPersonalizada: "administracion.reservas.detallesReserva.reservaUI.categorias.limpiarMenusCategorias"
                                    }
                                    window.history.replaceState(estado, titulo, directoriosFusion);
                                }


                            },
                            componentesUI: {
                                contenedor: (reservaUID) => {
                                    const contenedor = document.createElement("div");
                                    contenedor.setAttribute("ui", "reservaUI")
                                    contenedor.setAttribute("reservaUID", reservaUID)
                                    contenedor.setAttribute("componente", "detalleReserva");
                                    contenedor.classList.add(
                                        "flexVertical",
                                        "gap6"
                                    )
                                    return contenedor
                                },
                                estadoPendienteUI: {
                                    despliege: function (data) {
                                        const estadoReservaIDV = data.estadoReservaIDV
                                        const reservaUID = data.reservaUID


                                        const contenedor = document.createElement("div")
                                        if (estadoReservaIDV !== "pendiente") {
                                            contenedor.style.display = "none"
                                        }
                                        contenedor.setAttribute("contenedor", "pendiente")
                                        contenedor.classList.add(
                                            "gap6",
                                            "borderRadius8",
                                            "contenedorPendiente"
                                        )

                                        const botonAceptar = document.createElement("div")
                                        botonAceptar.classList.add(
                                            "botonV1",
                                            "comportamientoBoton"
                                        )
                                        botonAceptar.textContent = "Aceptar reserva"
                                        botonAceptar.addEventListener("click", () => {
                                            this.com.aceptarReserva({
                                                reservaUID
                                            })
                                        })

                                        contenedor.appendChild(botonAceptar);

                                        const botonRechazar = document.createElement("div")
                                        botonRechazar.classList.add(
                                            "botonV1",
                                            "comportamientoBoton"
                                        )
                                        botonRechazar.textContent = "Rechazar reserva"
                                        botonRechazar.addEventListener("click", () => {
                                            this.com.rechazarReserva({
                                                reservaUID
                                            })
                                        })
                                        contenedor.appendChild(botonRechazar);
                                        return contenedor

                                    },
                                    com: {
                                        aceptarReserva: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            pantallaInmersiva.style.justifyContent = "center"
                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmas que aceptas la reserva ${reservaUID}`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "Al confirmar una reserva pendiente, cambiarás el estado de pendiente ha confirmado. La reserva dejará de ser visible desde la sección de reservas confirmadas. Si necesitas volver a poner la reserva en estado pendiente, pulsa en el estado de la reserva para poder cambiarla."

                                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                            botonAceptar.textContent = "Comfirmar y aceptar reserva"
                                            botonAceptar.addEventListener("click", () => {
                                                this.confirmarNuevoEstado({
                                                    reservaUID,
                                                    instanciaUID_aceptarReserva,
                                                    nuevoEstado: "confirmada"
                                                })
                                            })
                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"
                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        rechazarReserva: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            pantallaInmersiva.style.justifyContent = "center"


                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmas que rechazas la reserva ${reservaUID}`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "Rechazar una reserva implica cancelar la reserva."

                                            const botonRechazar = constructor.querySelector("[boton=aceptar]")
                                            botonRechazar.textContent = "Rechazar reserva"
                                            botonRechazar.addEventListener("click", (e) => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.confirmaCancelacion({
                                                    tipoBloqueoIDV: "sinBloqueo"
                                                })
                                            })

                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cerrar y volver"
                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        ponerReservaEnPendiente: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmas que aceptas la reserva ${reservaUID}`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "Al confirmar una reserva pendiente, cambiarás el estado de pendiente.Ha confirmado.La reserva dejará de ser visible desde la sección de reservas confirmadas. Si necesitas volver a poner la reserva en estado pendiente, pulsa en el estado de la reserva para poder cambiarla"

                                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                            botonAceptar.textContent = "Comfirmar y aceptar reserva"
                                            botonAceptar.addEventListener("click", () => {
                                                this.confirmarNuevoEstado({
                                                    reservaUID,
                                                    instanciaUID_aceptarReserva,
                                                    nuevoEstado: "pendiente"
                                                })
                                            })
                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"
                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        confirmarNuevoEstado: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const nuevoEstado = data.nuevoEstado
                                            const instanciaUID_aceptarReserva = data.instanciaUID_aceptarReserva

                                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_aceptarReserva}"]`)
                                            const contenedor = ui.querySelector("[componente=constructor]")
                                            contenedor.innerHTML = null

                                            const spinner = casaVitini.ui.componentes.spinner({
                                                mensaje: "Aceptando reserva un momento por favor..."
                                            })
                                            contenedor.appendChild(spinner)

                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/global/actualizarEstadoReserva",
                                                reservaUID: String(reservaUID),
                                                nuevoEstado
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            if (!uiRenderizada) { return }
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();

                                            if (respuestaServidor?.error) {
                                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                const estadoUI = uiRenderizada.querySelector("[dataReserva=estado]")
                                                const contenedorPendienteUI = uiRenderizada.querySelector("[contenedor=pendiente]")
                                                const estadoActual = respuestaServidor.estadoActual


                                                if (estadoActual === "pendiente") {
                                                    estadoUI.textContent = "Pendiente"
                                                    estadoUI.setAttribute("estadoReservaIDV", "pendiente")
                                                    contenedorPendienteUI.style.display = "grid"

                                                }
                                                if (estadoActual === "confirmada") {
                                                    estadoUI.textContent = "Confirmada"
                                                    estadoUI.setAttribute("estadoReservaIDV", "confirmada")
                                                    contenedorPendienteUI.style.display = "none"
                                                }

                                            }

                                        },
                                        panelExpandidoUI: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const estadoActual = data.estadoActual

                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()

                                            pantallaInmersiva.style.justifyContent = "center"
                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Estado de la reserva ${reservaUID}`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")

                                            if (estadoActual === "confirmada") {
                                                mensaje.textContent = "El estado actual de la reserva es confirmado.Si se necesita, puedes cambiar el estado de esta reserva a pendiente.Esto permitirá insertar la reserva en reservas pendientes de revisión"

                                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                                botonAceptar.textContent = "Pasar el estado de esta reserva a pendiente de revisión"
                                                botonAceptar.addEventListener("click", () => {
                                                    this.confirmarNuevoEstado({
                                                        reservaUID,
                                                        instanciaUID_aceptarReserva,
                                                        nuevoEstado: "pendiente"
                                                    })
                                                })
                                            } else
                                                if (estadoActual === "pendiente") {
                                                    mensaje.textContent = "El estado de esta reserva es pendiente, en este estado es recomendable revisar la reserva para tomar la decisión de aceptarla o rechazarla.Es recomendable revisar las reservas pendientes y aceptar o rechazarlas para mantener la lista de reservas pendientes sin saturar."
                                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                                    botonAceptar.textContent = "Aceptar reserva"
                                                    botonAceptar.addEventListener("click", () => {
                                                        this.confirmarNuevoEstado({
                                                            reservaUID,
                                                            instanciaUID_aceptarReserva,
                                                            nuevoEstado: "confirmada"
                                                        })
                                                    })
                                                } else if (estadoActual === "cancelada") {
                                                    titulo.textContent = `La reserva ${reservaUID} esta cancelada`
                                                    mensaje.textContent = "Esta reserva está cancelada.Las reservas canceladas no pueden revertir su estado.Puede eliminar definitivamente la reserva de la base de datos para que no esté almacenada desde el apartado de cancelar reserva dentro de la reserva."

                                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                                    botonAceptar.remove()
                                                }

                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"
                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        }

                                    }
                                },
                                bloqueGlobal: {
                                    despliege: function (data) {

                                        const global = data.global
                                        const detallesTitular = data?.titular
                                        const contenedorFinanciero = data.contenedorFinanciero
                                        const reservaUID = global.reservaUID
                                        const estadoReservaIDV = global.estadoReservaIDV
                                        const estadoPagoIDV = global.estadoPagoIDV
                                        const fechaCreacion = global.fechaCreacion
                                        const origenIDV = global.origenIDV

                                        const nombreCompletoTitular = detallesTitular.nombreTitular
                                        const tipoTitularIDV = detallesTitular.tipoTitularIDV
                                        const totalReserva = contenedorFinanciero?.desgloseFinanciero?.global?.totales?.totalFinal ?? "Sin información"

                                        const contenedor = document.createElement("div");
                                        contenedor.setAttribute("class", "administracionReservasDetalesMarcoEnvolventeInformacionGeneral");
                                        contenedor.setAttribute("contenedor", "panelGlobal")


                                        const contenedor_reservaUI = document.createElement("div");
                                        contenedor_reservaUI.setAttribute("class", "administracion_reservas_detallesReserva_contenedorReservaUID");
                                        contenedor.appendChild(contenedor_reservaUI);

                                        const contenedor_restoGlobal = document.createElement("div")
                                        contenedor_restoGlobal.classList.add("administracion_reservas_detallesReserva_contenedorRestoGlobal")
                                        contenedor.appendChild(contenedor_restoGlobal);

                                        const reservaUI = this.com.reservaUI(reservaUID)
                                        contenedor_reservaUI.appendChild(reservaUI)

                                        const tipoTitular = () => {
                                            if (tipoTitularIDV === "titularCliente") {
                                                return detallesTitular.clienteUID
                                            }
                                        }

                                        const configuracionGlobal = [{
                                            titulo: "Titular de la reserva",
                                            valor: nombreCompletoTitular || "Reserva sin titular",
                                            selecionable: "si",
                                            atributos: {
                                                contenedor: {
                                                    titularUID: tipoTitular(),
                                                    contenedor: "titular"
                                                },
                                                data: {
                                                    dataReserva: "nombreTitular"
                                                }
                                            }
                                        }, {
                                            titulo: "Fecha de creación UTC",
                                            valor: fechaCreacion,
                                        }, {
                                            titulo: "Origen de la reserva",
                                            valor: casaVitini.componentes.diccionarios.reserva.origenIDV(origenIDV),
                                            atributos: {
                                                data: {
                                                    dataReserva: "origen"
                                                }
                                            }
                                        }, {
                                            titulo: "Estado de la reserva",
                                            valor: casaVitini.componentes.diccionarios.reserva.estadoReservaIDV(estadoReservaIDV),
                                            selecionable: "si",
                                            atributos: {
                                                contenedor: {
                                                    contenedor: "estadoReserva"
                                                },
                                                data: {
                                                    dataReserva: "estado",
                                                    estadoReservaIDV: estadoReservaIDV
                                                }
                                            }
                                        }, {
                                            titulo: "Estado del pago",
                                            valor: casaVitini.componentes.diccionarios.reserva.estadoPagoIDV(estadoPagoIDV),
                                            atributos: {
                                                data: {
                                                    dataReserva: "estadoPago",
                                                    estadoReservaIDV: estadoReservaIDV
                                                }
                                            }
                                        }, {
                                            titulo: "Total",
                                            valor: totalReserva,
                                            atributos: {
                                                data: {
                                                    dataReserva: "totalReservaConImpuestos",
                                                    estadoReservaIDV: estadoReservaIDV
                                                }
                                            }
                                        }]

                                        configuracionGlobal.forEach((c) => {
                                            const menuGlobalUI = this.com.infoGlobalUI(c)
                                            contenedor_restoGlobal.appendChild(menuGlobalUI)
                                        })


                                        return contenedor
                                    },
                                    com: {
                                        reservaUI: (reservaUID) => {
                                            const contenedor = document.createElement("div");
                                            contenedor.style.overflow = "hidden"
                                            contenedor.classList.add(
                                                "flexVertical",
                                                "padding4",
                                                "flextJustificacion_center",
                                                "borderRadius12"
                                            );

                                            const titulo = document.createElement("p");
                                            titulo.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                            titulo.textContent = "Reserva";
                                            contenedor.appendChild(titulo);

                                            const data = document.createElement("p");
                                            data.classList.add("contenedroTextoEspansivo");
                                            data.setAttribute("dataReserva", "reservaID");
                                            data.setAttribute("componente", "reservaUID_" + reservaUID)
                                            data.textContent = reservaUID;
                                            contenedor.appendChild(data);

                                            return contenedor

                                        },
                                        infoGlobalUI: (d) => {
                                            const titulo = d.titulo
                                            const valor = d.valor
                                            const atributos = d.atributos || {}
                                            const atributosContenedor = atributos.contenedor || {}
                                            const atributosData = atributos.data || {}
                                            const selecionable = d.selecionable

                                            const contenedor = document.createElement("div");
                                            contenedor.style.overflow = "hidden"
                                            contenedor.classList.add(
                                                "flexVertical",
                                                "padding8",
                                                "noSelecionable",
                                                "flextJustificacion_center",
                                                "borderRadius12"
                                            );
                                            Object.entries(atributosContenedor).forEach(([nombreAtributo, valorAtributo]) => {
                                                contenedor.setAttribute(nombreAtributo, valorAtributo)
                                            });
                                            if (selecionable === "si") {
                                                contenedor.classList.add("comportamientoBoton");
                                            }

                                            const tituloUI = document.createElement("p");
                                            tituloUI.classList.add(
                                                "negrita",
                                                "textoCentrado"
                                            );
                                            tituloUI.textContent = titulo;
                                            contenedor.appendChild(tituloUI);

                                            const data = document.createElement("p");
                                            data.classList.add("contenedroTextoEspansivo");
                                            Object.entries(atributosData).forEach(([nombreAtributo, valorAtributo]) => {
                                                data.setAttribute(nombreAtributo, valorAtributo)
                                            });

                                            data.textContent = valor;
                                            contenedor.appendChild(data);
                                            return contenedor

                                        }

                                    }
                                },
                                barraProgreso: (data) => {

                                    const reservaUID = data.reservaUID
                                    const porcentajeTranscurrido = data.porcentajeTranscurrido
                                    const claseUID = `barraProgresso-anchoDinamico-${reservaUID}`

                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                    )
                                    contenedor.style.height = "20px"
                                    contenedor.style.overflow = "hidden"

                                    const style = document.createElement('style');
                                    style.innerHTML = `
                                        .${claseUID} {
                                            width: ${porcentajeTranscurrido}%;
                                    `;
                                    contenedor.appendChild(style);

                                    const barraProgresso = document.createElement("div")
                                    barraProgresso.setAttribute("componente", "progreso")
                                    barraProgresso.classList.add(
                                        "barraProgresso",
                                        claseUID
                                    )

                                    contenedor.appendChild(barraProgresso);
                                    return contenedor

                                },
                                categoriasGlobalesUI: {
                                    despliege: function (metadatos) {
                                        const reservaUID = metadatos.reservaUID
                                        const configuracionVista = metadatos.configuracionVista

                                        let url
                                        if (configuracionVista === "publica") {
                                            url = "/micasa/reservas/reserva:" + reservaUID + "/zona:"
                                        } else {
                                            url = "/administracion/reservas/reserva:" + reservaUID + "/zona:"
                                        }

                                        const contenedor = document.createElement("div");
                                        contenedor.classList.add(
                                            "flexVertical"
                                        );
                                        contenedor.setAttribute("componente", "panelDetallesReserva")

                                        const contenedorBotonesExpandidos = document.createElement("div")
                                        contenedorBotonesExpandidos.classList.add("administracion_reservas_detallesReserva_contenedorMenuExpandido")
                                        contenedorBotonesExpandidos.setAttribute("contenedor", "botonesExpandidos")
                                        if (configuracionVista === "publica") {


                                        } else {

                                        }
                                        contenedor.appendChild(contenedorBotonesExpandidos)

                                        const marcoMenuResponsivo = document.createElement("div");
                                        marcoMenuResponsivo.setAttribute("class", "administracion_reserva_detallesReserva_marcoMenuResponsivo");
                                        marcoMenuResponsivo.textContent = "Menú reserva"
                                        marcoMenuResponsivo.addEventListener("click", () => {
                                            document.body.style.overflow = "hidden";
                                            this.desplegarMenuResponsivo({
                                                reservaUID,
                                                configuracionVista
                                            })

                                        })
                                        contenedor.appendChild(marcoMenuResponsivo);




                                        const botonNuevaReserva = document.createElement("a");
                                        botonNuevaReserva.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonNuevaReserva.setAttribute("categoriaReserva", "alojamiento");
                                        botonNuevaReserva.setAttribute("href", url + "alojamiento");
                                        botonNuevaReserva.addEventListener("click", (e) => {
                                            e.preventDefault()

                                            this.controladorCategorias({
                                                categoria: "alojamiento",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            })

                                        })
                                        botonNuevaReserva.textContent = "Alojamiento";
                                        contenedorBotonesExpandidos.appendChild(botonNuevaReserva);


                                        const botonCompAlo = document.createElement("a");
                                        botonCompAlo.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonCompAlo.setAttribute("categoriaReserva", "complementosDeAlojamiento");
                                        botonCompAlo.setAttribute("href", url + "complementos_de_alojamiento");
                                        botonCompAlo.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "complementosDeAlojamiento",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)

                                        })
                                        botonCompAlo.textContent = "Complementos de alojamiento";
                                        contenedorBotonesExpandidos.appendChild(botonCompAlo);




                                        const botonCalcularPrecio = document.createElement("a");
                                        botonCalcularPrecio.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonCalcularPrecio.setAttribute("componente", "botonCalcularPrecioReserva");
                                        botonCalcularPrecio.setAttribute("categoriaReserva", "enlacesDePago");
                                        botonCalcularPrecio.setAttribute("href", url + "enlaces_de_pago");
                                        botonCalcularPrecio.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "enlacesDePago",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        botonCalcularPrecio.textContent = "Enlaces de pago";

                                        if (configuracionVista === "publica") {
                                        } else {
                                            contenedorBotonesExpandidos.appendChild(botonCalcularPrecio);
                                        }

                                        const botonDetallesDelPago = document.createElement("a");
                                        botonDetallesDelPago.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonDetallesDelPago.setAttribute("categoriaReserva", "transacciones");
                                        botonDetallesDelPago.setAttribute("href", url + "transacciones");
                                        botonDetallesDelPago.textContent = "Transacciones";
                                        botonDetallesDelPago.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "transacciones",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })

                                        if (configuracionVista === "publica") {
                                        } else {
                                            contenedorBotonesExpandidos.appendChild(botonDetallesDelPago);
                                        }

                                        const botonEnlacePago = document.createElement("a");
                                        botonEnlacePago.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonEnlacePago.setAttribute("categoriaReserva", "desgloseTotal");
                                        botonEnlacePago.setAttribute("href", url + "desglose_total");
                                        botonEnlacePago.textContent = "Desglose del total";
                                        botonEnlacePago.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "desgloseTotal",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        contenedorBotonesExpandidos.appendChild(botonEnlacePago);

                                        const botonServicios = document.createElement("a");
                                        botonServicios.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonServicios.setAttribute("categoriaReserva", "servicios");
                                        botonServicios.setAttribute("href", url + "servicios");
                                        botonServicios.textContent = "Servicios";
                                        botonServicios.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "servicios",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        contenedorBotonesExpandidos.appendChild(botonServicios);

                                        const botonCancelarReserva = document.createElement("a");
                                        botonCancelarReserva.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonCancelarReserva.setAttribute("categoriaReserva", "cancelarReserva");
                                        botonCancelarReserva.setAttribute("href", url + "cancelar_reserva");
                                        botonCancelarReserva.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "cancelarReserva",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        botonCancelarReserva.textContent = "Cancelar reserva";

                                        if (configuracionVista === "publica") {
                                        } else {
                                            contenedorBotonesExpandidos.appendChild(botonCancelarReserva);
                                        }

                                        const botonMiscelanea = document.createElement("a");
                                        botonMiscelanea.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonMiscelanea.setAttribute("categoriaReserva", "miscelanea");
                                        botonMiscelanea.setAttribute("href", url + "miscelanea");
                                        botonMiscelanea.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "miscelanea",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        const lineaMiscelanea = document.createElement("div")
                                        lineaMiscelanea.setAttribute("componente", "iconoLineaMiscelanea")
                                        lineaMiscelanea.classList.add("administracion_reservas_detallesReseerva_iconoMiscelanea")
                                        botonMiscelanea.appendChild(lineaMiscelanea);
                                        contenedorBotonesExpandidos.appendChild(botonMiscelanea);

                                        return contenedor;
                                    },
                                    desplegarMenuResponsivo: function (data) {
                                        const reservaUID = data.reservaUID
                                        const configuracionVista = data.configuracionVista

                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        ui.setAttribute("controlador", "controlResponsivoVisibilidad")
                                        document.querySelector("main").appendChild(ui)

                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.style.paddingTop = "0px"

                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar";
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        contenedor.appendChild(botonCancelar)

                                        const metadatosMenuResponsivo = {
                                            reservaUID: reservaUID,
                                            configuracionVista
                                        }

                                        const panelGlobal = this.despliege(metadatosMenuResponsivo)
                                        const contenedorBotonesEspandidos = panelGlobal.querySelector("[contenedor=botonesExpandidos]")
                                        contenedorBotonesEspandidos.style.display = 'grid'
                                        contenedorBotonesEspandidos.style.gap = '6px'

                                        if (configuracionVista === "publica") {

                                        } else {

                                        }



                                        contenedorBotonesEspandidos.querySelectorAll("[categoriaReserva]").forEach((boton) => {
                                            boton.classList.add("botonV1BlancoIzquierda")

                                        })
                                        contenedor.appendChild(contenedorBotonesEspandidos)

                                        const selectorBotonMiscelaniea = contenedorBotonesEspandidos.querySelector("[categoriareserva=miscelanea]")
                                        selectorBotonMiscelaniea.innerHTML = null
                                        selectorBotonMiscelaniea.textContent = "Miscelanea"


                                        const controlResponsivoVisibilidad = () => {
                                            const selectorElementoObservado = document.querySelector("[controlador=controlResponsivoVisibilidad]")
                                            if (!selectorElementoObservado) {
                                                window.removeEventListener("resize", controlResponsivoVisibilidad);
                                                return
                                            }
                                            const windowWidth = window.innerWidth;
                                            const threshold = "922"
                                            if (windowWidth > threshold) {
                                                selectorElementoObservado?.remove()
                                            }
                                        }
                                        window.addEventListener("resize", controlResponsivoVisibilidad);

                                    },
                                    ocultaCategorias: function () {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                                        this.limpiarMenusCategorias()
                                        document.querySelector("[componente=contenedorDinamico]").innerHTML = null
                                    },
                                    limpiarMenusCategorias: () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                                        document.querySelector("[componente=iconoLineaMiscelanea]").removeAttribute("style")
                                        const botonesCategoria = document.querySelectorAll("[categoriaReserva]")
                                        botonesCategoria.forEach((boton) => {
                                            boton.removeAttribute("style")
                                            boton.setAttribute("estadoCategoria", "otra")
                                        })
                                        document.querySelector("[componente=contenedorDinamico]").innerHTML = null
                                        const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                        contenedorDinamico.removeAttribute("style")
                                    },

                                    controladorCategorias: async function (metadatos) {
                                        const origen = metadatos.origen
                                        const categoriaIDV = metadatos.categoria
                                        const reservaUI = document.querySelector("[reservaUID]")
                                        const reservaUID = reservaUI.getAttribute("reservaUID")
                                        const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                        const selectorBotonCategoriaRenderizado = document.querySelector(`[categoriaReserva="${categoriaIDV}"]`)
                                        const estadoCategoria = selectorBotonCategoriaRenderizado?.getAttribute("estadoCategoria")
                                        const categoriaActual = document.querySelector("[estadoCategoria=actual]")?.getAttribute("categoriaReserva")
                                        this.limpiarMenusCategorias()
                                        selectorBotonCategoriaRenderizado.setAttribute("estadoCategoria", "actual")

                                        const funcionPersonalizada = `ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.ui.componentesUI.categoriasGlobalesUI.controladorCategorias`

                                        let url
                                        if (configuracionVista === "publica") {
                                            url = "/micasa/reservas/reserva:" + reservaUID + "/zona:"
                                        } else {
                                            url = "/administracion/reservas/reserva:" + reservaUID + "/zona:"
                                        }

                                        const constructorDireccionFuncion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales[categoriaIDV]?.arranque
                                        if (typeof constructorDireccionFuncion === "function") {
                                            const botonCategoriaGlobal = document.querySelector(`[categoriaReserva=${categoriaIDV}]`)
                                            botonCategoriaGlobal.style.background = "blue"
                                            botonCategoriaGlobal.style.color = "white"

                                            await casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales[categoriaIDV]?.arranque();

                                            const categoriaURL = casaVitini.utilidades.cadenas.camelToSnake(categoriaIDV)
                                            const directoriosFusion = url + categoriaURL
                                            const componentesExistenteUID = "reservaUID_" + reservaUID
                                            const titulo = "Casa Vitini"
                                            const estado = {
                                                zona: directoriosFusion,
                                                EstadoInternoZona: "estado",
                                                tipoCambio: "parcial",
                                                componenteExistente: componentesExistenteUID,
                                                funcionPersonalizada: funcionPersonalizada,
                                                args: {
                                                    origen: "url",
                                                    categoria: categoriaIDV
                                                }
                                            }

                                            if (!categoriaActual || categoriaIDV === categoriaActual) {
                                                window.history.replaceState(estado, titulo, directoriosFusion)
                                            } else if (categoriaIDV !== categoriaActual) {
                                                if (origen === "url") {
                                                    window.history.replaceState(estado, titulo, directoriosFusion);
                                                }
                                                if (origen === "botonCategoria" && (estadoCategoria === "otra" || !estadoCategoria)) {
                                                    window.history.pushState(estado, titulo, directoriosFusion);
                                                }
                                                if (origen === "botonCategoria" && estadoCategoria === "actual") {
                                                    window.history.replaceState(estado, titulo, directoriosFusion);
                                                }
                                            }
                                        } else {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const mensaje = "El controlador de categorías no encuentra la función"
                                            casaVitini.ui.componentes.advertenciaInmersiva(mensaje)
                                        }
                                    },
                                },
                                contenedorDinamico: () => {
                                    const contenedor = document.createElement("div");
                                    contenedor.setAttribute("componente", "contenedorDinamico");
                                    contenedor.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "borderRadius16",
                                        "backgroundWhite3"
                                    )
                                    return contenedor
                                },

                            }
                        },
                        global: {
                            obtenerReserva: async (data) => {
                                const reservaUID = data.reservaUID
                                const configuracionVista = data.configuracionVista
                                const transaccion = {
                                    reservaUID: reservaUID
                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"

                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "titular",
                                        "desgloseFinanciero"
                                    ]
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.mensajeSimple({
                                        titulo: respuestaServidor?.error,
                                    })
                                }
                                if (respuestaServidor?.ok) {
                                    return respuestaServidor
                                }
                            }
                        },
                        fechas: {
                            seleccionarDia: (dia_) => {
                                const diaSeleccionado = dia_.target.getAttribute("dia").padStart(2, "0")
                                const diaSeleccionadoComoElemento = dia_.target;
                                const calendario = diaSeleccionadoComoElemento.closest("[componente=marcoCalendario]")
                                const calendarioIO = calendario.getAttribute("calendarioIO")
                                if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                                    if (calendarioIO === "entrada") {

                                        document.querySelector("[componente=bloquePropuestaNuevaFechaEntrada]")?.remove()
                                        diaSeleccionadoComoElemento.style.background = ""
                                        diaSeleccionadoComoElemento.style.color = ""
                                    }
                                    if (calendarioIO === "salida") {
                                        document.querySelector("[componente=bloquePropuestaNuevaFechaSalida]")?.remove()
                                        diaSeleccionadoComoElemento.style.background = ""
                                        diaSeleccionadoComoElemento.style.color = ""
                                    }
                                    diaSeleccionadoComoElemento.removeAttribute("estadoDia")
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.controladorZonaPropuestasCambioFechas()

                                }
                                document.querySelectorAll("[estado=disponible]").forEach(diaDisponible => {

                                    diaDisponible.removeAttribute("estadoDia")
                                    diaDisponible.style.background = ""
                                    diaDisponible.style.color = ""
                                });
                                diaSeleccionadoComoElemento.style.background = "red"
                                diaSeleccionadoComoElemento.style.color = "white"
                                diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                                const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                                const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                                const selectorPropuestaCambioFecha = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]")
                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                if (calendarioIO === "entrada") {

                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const contenedorPropuesta = document.createElement("div")
                                    contenedorPropuesta.classList.add(
                                        "contenedorPropuesta",
                                        "flexVertical",
                                        "gap6"
                                    )
                                    const tituloPropuesta = document.createElement("p")
                                    tituloPropuesta.classList.add(
                                        "tituloGris",
                                        "padding14"
                                    )
                                    tituloPropuesta.textContent = "Propuesta de cambio de la fecha de entrada de la reserva " + reservaUID
                                    tituloPropuesta.style.color = "black"
                                    contenedorPropuesta.appendChild(tituloPropuesta)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cerrar propuesta y volver atrás"
                                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    contenedorPropuesta.appendChild(botonCancelar)
                                    const infoPropuesta = document.createElement("div")
                                    infoPropuesta.classList.add("padding14")
                                    infoPropuesta.textContent = `Has propuesto cambiar la fecha de entrada de esta reserva a ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}. Si quieres confirmar la propuesta y cambiar la reserva, pulsa en el botón de confirmar de abajo. Si deseas cancelar, pulsa en el botón cancelar de arriba. Cuando pulses el botón confirmar, se realizará una última verificación para comprobar que los días siguen disponibles.`
                                    contenedorPropuesta.appendChild(infoPropuesta)

                                    const informacionImplicacion = document.createElement("div")
                                    informacionImplicacion.classList.add("padding14")
                                    informacionImplicacion.textContent = `Aviso importante: Cuando se quitan días a una reserva, si luego se vuelven a añadir esos días, los precios se insertan al precio actual del mercado establecido en el hub de precios base y de comportamientos. Siempre puede alterar los precios de la reserva mediante el sistema de sobre control. Si hay pernoctantes con fechas de checkin que queden fuera del nuevo rango de fechas de la reserva, se eliminarán las fechas de check-in y checkout de los pernoctantes.`
                                    contenedorPropuesta.appendChild(informacionImplicacion)

                                    const botonAceptarPropuesta = document.createElement("div")
                                    botonAceptarPropuesta.classList.add("botonV1BlancoIzquierda")
                                    botonAceptarPropuesta.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonAceptarPropuesta.textContent = "Confirmar propuesta y aplicar nueva fecha de entrada a la reserva"
                                    botonAceptarPropuesta.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const nuevaFecha = {
                                            fechaSolicitada_ISO: `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`,
                                            reservaUID: reservaUID,
                                            sentidoRango: "pasado"
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.confirmarCambioFecha(nuevaFecha)
                                    })
                                    contenedorPropuesta.appendChild(botonAceptarPropuesta)
                                    const propuestaUI = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    propuestaUI.querySelector("[contenedor=contenidoAdvertenciaInmersiva]").appendChild(contenedorPropuesta)
                                    document.querySelector("main").appendChild(propuestaUI)
                                }
                                if (calendarioIO === "salida") {

                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const contenedorPropuesta = document.createElement("div")
                                    contenedorPropuesta.classList.add(
                                        "contenedorPropuesta",
                                        "flexVertical",
                                        "gap6"
                                    )
                                    const tituloPropuesta = document.createElement("p")
                                    tituloPropuesta.classList.add(
                                        "tituloGris",
                                        "padding14"
                                    )

                                    tituloPropuesta.textContent = "Propuesta de cambio de la fecha de salida de la reserva " + reservaUID
                                    tituloPropuesta.style.color = "black"
                                    contenedorPropuesta.appendChild(tituloPropuesta)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cerrar propuesta y volver atrás"
                                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    contenedorPropuesta.appendChild(botonCancelar)
                                    const infoPropuesta = document.createElement("div")
                                    infoPropuesta.classList.add("padding14")
                                    infoPropuesta.textContent = `Has propuesto cambiar la fecha de salida de la reserva a ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}. Si quieres confirmar la propuesta y cambiar la reserva, pulsa en el botón de confirmar de abajo. Si deseas cancelar, pulsa en el botón cancelar de arriba. Cuando pulses el botón confirmar, se realizará una última verificación para comprobar que los días siguen disponibles.`
                                    contenedorPropuesta.appendChild(infoPropuesta)

                                    const informacionImplicacion = document.createElement("div")
                                    informacionImplicacion.classList.add("padding14")
                                    informacionImplicacion.textContent = `Aviso importante: Cuando se quitan días a una reserva, si luego se vuelven a añadir esos días, los precios se insertan al precio actual del mercado establecido en el hub de precios base y de comportamientos. Siempre puede alterar los precios de la reserva mediante el sistema de sobre control. Si hay pernoctantes con fechas de checkin que queden fuera del nuevo rango de fechas de la reserva, se eliminarán las fechas de check-in y checkout de los pernoctantes.`
                                    contenedorPropuesta.appendChild(informacionImplicacion)


                                    const botonAceptarPropuesta = document.createElement("div")
                                    botonAceptarPropuesta.classList.add("botonV1BlancoIzquierda")
                                    botonAceptarPropuesta.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonAceptarPropuesta.textContent = "Confirmar propuesta y aplicar nueva fecha de salida a la reserva"
                                    botonAceptarPropuesta.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const nuevaFecha = {
                                            fechaSolicitada_ISO: `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`,
                                            reservaUID: reservaUID,
                                            sentidoRango: "futuro"
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.confirmarCambioFecha(nuevaFecha)
                                    })
                                    contenedorPropuesta.appendChild(botonAceptarPropuesta)
                                    const propuestaUI = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    propuestaUI.querySelector("[contenedor=contenidoAdvertenciaInmersiva]").appendChild(contenedorPropuesta)
                                    document.querySelector("main").appendChild(propuestaUI)
                                }
                            },
                            confirmarCambioFecha: async (propuesta) => {
                                const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                const sentidoRango = propuesta.sentidoRango
                                const reservaUID = propuesta.reservaUID
                                const fechaSolicitada_ISO = propuesta.fechaSolicitada_ISO
                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/confirmarModificarFechaReserva",
                                    reservaUID: String(reservaUID),
                                    sentidoRango: sentidoRango,
                                    fechaSolicitada_ISO: fechaSolicitada_ISO
                                }

                                const mensajes = {
                                    pasado: [
                                        "Confirmando la nueva fecha de entrada, por favor espere...",
                                        "No se puede establecer la fecha de entrada porque los apartamentos de esta reserva están en otro evento que ocurre al mismo tiempo.A continuación tienes una lista de los eventos que entran en conflicto.",
                                    ],
                                    futuro: [
                                        "Confirmando la nueva fecha de salida, por favor espere...",
                                        "No se puede establecer la fecha de salida porque los apartamentos de esta reserva están en otro evento que ocurre al mismo tiempo.A continuación tienes una lista de los eventos que entran en conflicto."
                                    ]
                                }
                                const datosPantallaSuperpuesta = {
                                    instanciaUID: instanciaUID_pantallaDeCarga,
                                    mensaje: mensajes[sentidoRango][0]
                                }
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const pantallaDeCargaRenderizada = document.querySelector(`[componente=advertenciaInmersiva][instanciaUID="${instanciaUID_pantallaDeCarga}"]`)

                                if (!pantallaDeCargaRenderizada) {
                                    return
                                }
                                if (respuestaServidor?.error) {
                                    const eventos = respuestaServidor.eventos
                                    if (eventos) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const contenedorError = document.createElement("div")
                                        contenedorError.classList.add("contenedorErrorPropuesta")
                                        const tituloPropuesta = document.createElement("p")
                                        tituloPropuesta.classList.add(
                                            "tituloGris",
                                            "padding14",
                                            "textoCentrado"
                                        )
                                        tituloPropuesta.textContent = "No se puede cambiar la fecha debido a otros eventos ya existentes."
                                        tituloPropuesta.style.color = "black"
                                        contenedorError.appendChild(tituloPropuesta)
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                        contenedorError.appendChild(botonCancelar)
                                        const infoPropuesta = document.createElement("div")
                                        infoPropuesta.classList.add("padding14")
                                        infoPropuesta.textContent = mensajes[sentidoRango][1]
                                        contenedorError.appendChild(infoPropuesta)
                                        for (const detallesDelEvento of eventos) {
                                            const fechaEntrada = detallesDelEvento.fechaEntrada
                                            const fechaSalida = detallesDelEvento.fechaSalida
                                            const fechaEntrada_array = fechaEntrada.split("-")
                                            const fechaSalida_array = fechaSalida.split("-")
                                            const fechaEntrada_Humana = `${fechaEntrada_array[2]}/${fechaEntrada_array[1]}/${fechaEntrada_array[0]}`
                                            const fechaSalida_Humana = `${fechaSalida_array[2]}/${fechaSalida_array[1]}/${fechaSalida_array[0]}`
                                            const eventoUID = detallesDelEvento.uid
                                            const tipoElemento = detallesDelEvento.tipoElemento
                                            const descripcion = detallesDelEvento.descripcion
                                            const contenedorEvento = document.createElement("div")
                                            contenedorEvento.classList.add(
                                                "flexVertical",
                                                "borderRadius20",
                                                "backgroundWhite3",
                                                "padding6",
                                                "gap6"
                                            )
                                            contenedorError.appendChild(contenedorEvento)

                                            const contenedorData = document.createElement("div")
                                            contenedorData.classList.add(
                                                "flexVertcial",
                                                "gap6",
                                                "padding14"
                                            )
                                            contenedorEvento.appendChild(contenedorData)

                                            const tipoEvento = document.createElement("div")
                                            tipoEvento.classList.add("negrita")
                                            tipoEvento.textContent = tipoElemento.toUpperCase()
                                            contenedorData.appendChild(tipoEvento)
                                            const nombreDato = document.createElement("div")
                                            nombreDato.textContent = "Rango del evento"
                                            contenedorData.appendChild(nombreDato)
                                            const fechaEvento = document.createElement("div")
                                            fechaEvento.textContent = `${fechaEntrada_Humana} >>> ${fechaSalida_Humana}`
                                            contenedorData.appendChild(fechaEvento)

                                            if (tipoElemento === "reserva") {
                                                const botonIrAlEvento = document.createElement("a")
                                                botonIrAlEvento.classList.add("botonV1BlancoIzquierda")
                                                botonIrAlEvento.textContent = "Ir a los detalles de la reserva"
                                                botonIrAlEvento.setAttribute("href", "/administracion/reservas/reserva:" + eventoUID)
                                                botonIrAlEvento.setAttribute("vista", "/administracion/reservas/reserva:" + eventoUID)
                                                botonIrAlEvento.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contenedorEvento.appendChild(botonIrAlEvento)
                                            }
                                            if (tipoElemento === "bloqueo") {
                                                const apartamentoIDV = detallesDelEvento.apartamentoIDV
                                                const botonIrAlEvento = document.createElement("a")
                                                botonIrAlEvento.classList.add("botonV1BlancoIzquierda")
                                                botonIrAlEvento.textContent = "Ir a los detalles del bloqueo"
                                                botonIrAlEvento.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV + "/" + eventoUID)
                                                botonIrAlEvento.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV + "/" + eventoUID)
                                                botonIrAlEvento.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contenedorEvento.appendChild(botonIrAlEvento)
                                            }
                                            if (tipoElemento === "eventoCalendarioSincronizado" && descripcion) {
                                                const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                                                const match = descripcion.match(regex);
                                                const urlEvento = match?.[1] ?? "No se encontró la URL en el texto proporcionado.";
                                                const botonIrAlEvento = document.createElement("a")
                                                botonIrAlEvento.classList.add("botonV1BlancoIzquierda")
                                                botonIrAlEvento.textContent = "Ir a los detalles del calendario sincronizado"
                                                botonIrAlEvento.setAttribute("href", urlEvento)
                                                botonIrAlEvento.setAttribute("vista", urlEvento)
                                                contenedorEvento.appendChild(botonIrAlEvento)
                                            }
                                            if (tipoElemento === "eventoCalendarioSincronizado" && !descripcion) {
                                                const botonIrAlEvento = document.createElement("a")
                                                botonIrAlEvento.classList.add("infoEventoSinDetalles")
                                                botonIrAlEvento.textContent = "Este evento es de un calendario externo sincronizado y no ofrece detalles del mismo"
                                                contenedorEvento.appendChild(botonIrAlEvento)
                                            }
                                        }
                                        const mensajeError = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        mensajeError.querySelector("[contenedor=contenidoAdvertenciaInmersiva]").appendChild(contenedorError)
                                        document.querySelector("main").appendChild(mensajeError)
                                        pantallaDeCargaRenderizada.remove()

                                        // casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    } else {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                    }


                                } else if (respuestaServidor?.ok) {

                                    pantallaDeCargaRenderizada?.remove()
                                    const sentidoRangoRespueata = respuestaServidor.sentidoRango
                                    const fecha_ISO = respuestaServidor.fecha_ISO
                                    const fechaArray_ISO = fecha_ISO.split("-")
                                    const fecha_Humano = `${fechaArray_ISO[2]}/${fechaArray_ISO[1]}/${fechaArray_ISO[0]}`

                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()
                                    if (sentidoRangoRespueata === "pasado" && pantallaDeCargaRenderizada) {
                                        const selectorFechaEntrada = document.querySelector("[calendario=entrada]")
                                        const selectorFechaEntradaUI = document.querySelector("[fechaUI=fechaInicio]")
                                        selectorFechaEntrada.setAttribute("memoriaVolatil", fecha_ISO)
                                        selectorFechaEntradaUI.textContent = fecha_Humano
                                    }
                                    if (sentidoRangoRespueata === "futuro" && pantallaDeCargaRenderizada) {
                                        const selectorFechaSalida = document.querySelector("[calendario=salida]")
                                        const selectorFechaSalidaUI = document.querySelector("[fechaUI=fechaFin]")
                                        selectorFechaSalida.setAttribute("memoriaVolatil", fecha_ISO)
                                        selectorFechaSalidaUI.textContent = fecha_Humano
                                    }


                                    const selectorMarcoAlojamiento = document.querySelector(`[reservaUID="${reservaUID}"] [componente=marcoAlojamiento]`)
                                    if (selectorMarcoAlojamiento) {
                                        //  casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.arranque()

                                    }
                                }
                            },
                            controladorZonaPropuestasCambioFechas: () => {
                                const selectorZonaPropuestas = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]").childElementCount
                                if (selectorZonaPropuestas > 0) {
                                    document.querySelector("[componente=espacioPropuestaCambioFechaReserva]").style.display = "grid"
                                } else {
                                    document.querySelector("[componente=espacioPropuestaCambioFechaReserva]").style.display = "none"
                                }
                            },
                            cancelarPropuestaCambioFecha: (propuesta) => {
                                propuesta.target.parentNode.remove()
                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.controladorZonaPropuestasCambioFechas()
                            },
                        },
                        titular: {
                            desplegarUI: async function (reservaUID) {
                                document.body.style.overflow = "hidden";
                                const main = document.querySelector("main")

                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const instanciaUID = ui.getAttribute("instanciaUID")

                                main.appendChild(ui)
                                const contenedor = ui.querySelector("[componente=contenedor]")

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensase: "Esperando al servidor...."
                                })
                                contenedor.appendChild(spinner)

                                const respuestaServidor = await casaVitini.shell.servidor({
                                    zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                    reservaUID: reservaUID,
                                    capas: [
                                        "titular"
                                    ]
                                })
                                const ui_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                if (!ui_renderizada) { return }
                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    contenedor.innerHTML = null
                                    const detallesTitular = respuestaServidor.ok.titular
                                    const tipoTitularIDV = detallesTitular?.tipoTitularIDV
                                    const clienteUID = detallesTitular?.clienteUID
                                    const nombreTitular = detallesTitular?.nombreTitular
                                    const pasaporteTitular = detallesTitular?.pasaporteTitular
                                    const tipoTitular = detallesTitular?.tipoTitular
                                    const mailTitular = detallesTitular?.mailTitular
                                    const telefonoTitular = detallesTitular?.telefonoTitular

                                    const tituloUI = (titulo) => {
                                        return this.componentes.titulo(titulo)
                                    }
                                    const infoUI = (info) => {
                                        return this.componentes.infoUI(info)
                                    }
                                    const detallesDelTitularUI = (data) => {
                                        return this.componentes.detallesDelTitularUI(data)
                                    }
                                    const botonIrALaFichaDelClinete = (clienteUID) => {
                                        return this.componentes.botonIrALaFichaDelClinete(clienteUID)
                                    }
                                    const botonCambiarTitular = (instanciaUID) => {
                                        return this.componentes.botonCambiarTitular(instanciaUID)
                                    }
                                    const botonDesasociar = (data) => {
                                        return this.componentes.botonDesasociar(data)
                                    }
                                    const botonCerrarFormularioExpandidoCambiarTitular = (instanciaUID) => {
                                        return this.componentes.botonCerrarFormularioExpandidoCambiarTitular(instanciaUID)
                                    }
                                    const buscadorUI = (reservaUID) => {
                                        return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.componentes.buscadorRapido.UI({
                                            reservaUID: reservaUID,
                                            metodoFinal: "ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.componentes.transacciones.asociarTitularConLaReserva"
                                        })
                                    }
                                    const formularioNuevoTitular = (reservaUID) => {
                                        return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.componentes.nuevoClienteOTitular.UI({
                                            metodoFinal: "ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.componentes.transacciones.transactorCrearClienteComoTitular",
                                            tituloUI: "Crear nuevo cliente e insertarlo en la reserva como titular",
                                            tituloBoton: "Crear cliente y insertarlo como titular de la reserva",
                                            reservaUID: reservaUID
                                        })
                                    }
                                    if (!tipoTitularIDV) {
                                        const titulo = "Añadir titular a la reserva"
                                        const info = "Esta reserva ahora mismo no tiene ningún titular asignado.Para añadir un titular a la reserva, puedes buscar con el campo de búsqueda inferior un cliente existente para asociarlo como titular.También puedes crear un cliente nuevo rellenando el formulario para crear un cliente y añadirlo como titular a esta reserva."

                                        contenedor.appendChild(tituloUI(titulo))
                                        contenedor.appendChild(infoUI(info))
                                        contenedor.appendChild(buscadorUI(reservaUID))
                                        contenedor.appendChild(formularioNuevoTitular(reservaUID))

                                    } else if (tipoTitularIDV === "titularCliente") {
                                        const titulo = "Detalles del titular"
                                        const info = "Vista rápida de los detalles del titular de la reserva.Puedes cambiar el titular de la reserva si lo necesitas o desasociar el titular.También puedes cambiar el titular, esto te permite rellenar los datos mientras ves los datos del actual titular por si fuera necesario."

                                        contenedor.appendChild(tituloUI(titulo))
                                        contenedor.appendChild(infoUI(info))
                                        contenedor.appendChild(detallesDelTitularUI({
                                            clienteUID: clienteUID,
                                            nombreTitular: nombreTitular,
                                            pasaporteTitular: pasaporteTitular,
                                            tipoTitular: "titularCliente",
                                            mailTitular: mailTitular,
                                            telefonoTitular: telefonoTitular,
                                        }))

                                        contenedor.appendChild(botonIrALaFichaDelClinete(clienteUID))
                                        contenedor.appendChild(botonCambiarTitular(instanciaUID))

                                        const botonCerrarFormularioExpandidoCambiarTitular_ = botonCerrarFormularioExpandidoCambiarTitular(instanciaUID)
                                        botonCerrarFormularioExpandidoCambiarTitular_.style.display = "none"

                                        contenedor.appendChild(botonCerrarFormularioExpandidoCambiarTitular_)
                                        contenedor.appendChild(botonDesasociar({
                                            instanciaUID: instanciaUID,
                                            reservaUID: reservaUID
                                        }))

                                        const buscadorUI_ = buscadorUI(reservaUID)
                                        buscadorUI_.style.display = "none"
                                        contenedor.appendChild(buscadorUI_)

                                        const formularioNuevoTitular_ = formularioNuevoTitular(reservaUID)
                                        formularioNuevoTitular_.style.display = "none"
                                        contenedor.appendChild(formularioNuevoTitular_)

                                    } else if (tipoTitularIDV === "titularPool") {
                                        const titulo = "Datos del titular no verificado (POOL)"
                                        const info = `Los datos proporcionados provienen directamente del cliente, por que esta reservas ha sido hecha por el, lo que implica que su exactitud depende de la información suministrada por el propio cliente. Dado que la fuente de estos datos es el propio cliente, es crucial proceder a una verificación exhaustiva cruzando dicha información con la base de datos de clientes. 
                                        Este proceso es fundamental para garantizar la coherencia y precisión de los datos antes de su utilización o procesamiento posterior.
                                        Para ello, puedes utilizar el buscador ubicado más abajo. Si al realizar la búsqueda no encuentras coincidencias, puedes optar por completar el formulario disponible más abajo para crear un nuevo titular de la reserva. 
                                        
                                        Este nuevo titular podrá ser insertado directamente en la reserva, asegurando que la información sea correcta y esté actualizada en el sistema.
                                        En caso de que los datos sean similares a los de otro cliente existente, no te preocupes por crear una ficha duplicada o parecida, ya que más adelante podrás utilizar la herramienta de fusión para combinar los registros y evitar duplicidades.
                                        `

                                        contenedor.appendChild(tituloUI(titulo))
                                        contenedor.appendChild(infoUI(info))
                                        contenedor.appendChild(detallesDelTitularUI({

                                            nombreTitular: nombreTitular,
                                            pasaporteTitular: pasaporteTitular,
                                            tipoTitular: "titularCliente",
                                            mailTitular: mailTitular,
                                            telefonoTitular: telefonoTitular,
                                        }))
                                        contenedor.appendChild(buscadorUI(reservaUID))
                                        contenedor.appendChild(formularioNuevoTitular(reservaUID))
                                    }
                                    contenedor.appendChild(this.componentes.botonCerrar())
                                }
                            },

                            componentes: {
                                transacciones: {
                                    asociarTitularConLaReserva: async function (data) {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const clienteUID = data.clienteUID
                                        const instanciaUID = data.instanciaUID
                                        const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        const opcionesPantallaDeCarga = {
                                            instanciaUID: instanciaUIDPantallaDeCarga,
                                            mensaje: "Asociando cliente a la titularidad de esta reserva"
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                        const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/gestionTitular/asociarTitular",
                                            clienteUID: String(clienteUID),
                                            reservaUID: reservaUID
                                        })
                                        pantallaDeCargaRenderizada?.remove()

                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {

                                            const nuevoClienteUID = respuestaServidor.clienteUID
                                            const nombreCompleto = respuestaServidor.nombreCompleto

                                            const selectorNombreTitularRenderizado = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            const selectorNombreTitular = document.querySelector(`[dataReserva=nombreTitular]`)
                                            if (selectorNombreTitularRenderizado && selectorNombreTitular) {
                                                selectorNombreTitular.textContent = nombreCompleto
                                                const selectorBloqueTitular = document.querySelector(`[contenedor=titular]`)
                                                selectorBloqueTitular.setAttribute("tipoTitular", "titularCliente")
                                                selectorBloqueTitular.setAttribute("titularUID", nuevoClienteUID)
                                            }
                                            const instanciaUID_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                            if (instanciaUID_renderizada) {
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.desplegarUI(reservaUID)
                                            }


                                        }
                                    },
                                    transactorCrearClienteComoTitular: async (data) => {

                                        const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        const opcionesPantallaDeCarga = {
                                            instanciaUID: instanciaUIDPantallaDeCarga,
                                            mensaje: "Asociando cliente a la titularidad de esta reserva"
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                        const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                        const reservaUID = data.reservaUID
                                        const instanciaUID = data.instanciaUID
                                        const datos = data.datos


                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/gestionTitular/crearTitular",
                                            reservaUID: String(reservaUID),
                                            ...datos
                                        })
                                        pantallaDeCargaRenderizada?.remove()

                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {

                                            pantallaDeCargaRenderizada?.remove()
                                            const nuevoClienteUID = respuestaServidor.clienteUID
                                            const nombreCompleto = respuestaServidor.nombreCompleto

                                            const selectorNombreTitularRenderizado = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            const selectorNombreTitular = selectorNombreTitularRenderizado.querySelector(`[dataReserva=nombreTitular]`)
                                            if (selectorNombreTitular) {
                                                selectorNombreTitular.textContent = nombreCompleto
                                                const selectorBloqueTitular = document.querySelector(`[contenedor=titular]`)
                                                selectorBloqueTitular.setAttribute("tipoTitular", "titularCliente")
                                                selectorBloqueTitular.setAttribute("titularUID", nuevoClienteUID)
                                            }
                                            const instanciaUID_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                            if (instanciaUID_renderizada) {
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.desplegarUI(reservaUID)
                                            }

                                        }
                                    },
                                    desasociarClienteComoTitular: async function (metadatos) {
                                        const instanciaUID = metadatos.instanciaUID
                                        const reservaUID = metadatos.reservaUID
                                        const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        const opcionesPantallaDeCarga = {
                                            instanciaUID: instanciaUIDPantallaDeCarga,
                                            mensaje: "Desasociando cliente como titular de la reserva"
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                        const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                        const metadatosPantallaDeCarga = {
                                            zona: "administracion/reservas/detallesReserva/gestionTitular/desasociarClienteComoTitular",
                                            reservaUID: String(reservaUID)
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(metadatosPantallaDeCarga)
                                        if (respuestaServidor?.error) {
                                            pantallaDeCargaRenderizada?.remove()
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            pantallaDeCargaRenderizada?.remove()
                                            const selectorNombreTitularRenderizado = document.querySelector(`[reservaUID="${reservaUID}"]`).querySelector(`[dataReserva=nombreTitular]`)
                                            if (selectorNombreTitularRenderizado) {
                                                selectorNombreTitularRenderizado.textContent = "(Níngun titular asignado)"
                                                const selectorBloqueTitular = document.querySelector(`[contenedor=titular]`)
                                                selectorBloqueTitular.removeAttribute("tipoTitular")
                                                selectorBloqueTitular.removeAttribute("titularUID")
                                            }
                                            const selectorDestinoRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                            if (selectorDestinoRenderizado) {
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                            }
                                        }
                                    },
                                },
                                detallesDelTitularUI: (detallesDelTitular) => {
                                    const clienteUID = detallesDelTitular.clienteUID
                                    const nombreTitular = detallesDelTitular.nombreTitular
                                    const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                    const tipoTitular = detallesDelTitular.tipoTitular
                                    const mailTitular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                    const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin Teléfono)"
                                    const detallesRapidosDelTitular = document.createElement("div")
                                    detallesRapidosDelTitular.classList.add(
                                        "flexVertical",
                                        "backgroundWhite3",
                                        "borderRadius14",
                                        "padding14",
                                        "gap6"
                                    )

                                    let contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    let nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Nombre completo del titular"
                                    contenedorDato.appendChild(nombreDato)
                                    let valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = nombreTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Pasaporte"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = pasaporteTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Teléfono"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = telefonoTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "e - Mail"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = mailTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)
                                    return detallesRapidosDelTitular
                                },
                                detallesDelTitularPoolUI: (detallesDelTitular) => {
                                    const nombreTitular = detallesDelTitular.nombreTitular
                                    const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                    const tipoTitular = "Titular pool"
                                    const mailtular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                    const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin Teléfono)"
                                    const detallesRapidosDelTitular = document.createElement("div")
                                    detallesRapidosDelTitular.classList.add("tarjetaGris")

                                    let contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    let nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Nombre completo del titular"
                                    contenedorDato.appendChild(nombreDato)
                                    let valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = nombreTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Pasaporte"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = pasaporteTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Teléfono"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = telefonoTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "e - Mail"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = mailtular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)
                                    return detallesRapidosDelTitular
                                },
                                botonCerrar: () => {
                                    const boton = document.createElement("div")
                                    boton.classList.add("botonV1")
                                    boton.innerHTML = "Cerrar gestión del titular de la reserva"
                                    boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    return boton
                                },
                                botonDesasociar: function (metadatos) {
                                    const boton = document.createElement("div")
                                    boton.classList.add("botonV1BlancoIzquierda")
                                    boton.innerHTML = "Desasociar cliente como titular"
                                    boton.setAttribute("boton", "desasociarTitular")
                                    boton.addEventListener("click", () => {
                                        this.transacciones.desasociarClienteComoTitular(metadatos)
                                    })
                                    return boton
                                },
                                botonCambiarTitular: function (instanciaUID) {
                                    const boton = document.createElement("div")
                                    boton.classList.add("botonV1BlancoIzquierda")
                                    boton.innerHTML = "Cambiar titular"
                                    boton.setAttribute("boton", "cambiarTitular")
                                    boton.addEventListener("click", () => {
                                        this.cambiarTitular(instanciaUID)
                                    })
                                    return boton
                                },
                                botonIrALaFichaDelClinete: (clienteUID) => {
                                    const boton = document.createElement("a")
                                    boton.classList.add("botonV1BlancoIzquierda")
                                    boton.innerHTML = "Ir a la ficha del cliente"
                                    boton.setAttribute("href", "/administracion/clientes/cliente:" + clienteUID)
                                    boton.setAttribute("vista", "/administracion/clientes/cliente:" + clienteUID)
                                    boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    return boton
                                },
                                titulo: (titulo) => {
                                    const tituloUI = document.createElement("p")
                                    tituloUI.classList.add(
                                        "tituloGris",
                                        "padding18",
                                    )
                                    tituloUI.textContent = titulo
                                    return tituloUI
                                },
                                infoUI: (info) => {
                                    const infoUI = document.createElement("p")
                                    infoUI.classList.add(
                                        "padding18"
                                    )
                                    infoUI.textContent = info
                                    return infoUI
                                },
                                botonCerrarFormularioExpandidoCambiarTitular: function (instanciaUID) {
                                    const boton = document.createElement("div")
                                    boton.classList.add("botonV1BlancoIzquierda")
                                    boton.innerHTML = "Cerrar formulario expandido para cambiar de titular"
                                    boton.setAttribute("boton", "cerrarCambiarTitular")
                                    boton.addEventListener("click", () => {
                                        this.cancelarCambiarTitular(instanciaUID)
                                    })
                                    return boton
                                },
                                cambiarTitular: (instanciaUID) => {
                                    const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                                    const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                                    selectorBotonCambiarTitular.style.display = "none"
                                    selectorBotonDesasociar.style.display = "none"
                                    const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                                    selectorNuevoClienteUI.removeAttribute("style")
                                    const selectorBuscadorRapidoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [contenedor=buscador]`)
                                    selectorBuscadorRapidoClienteUI.removeAttribute("style")
                                    const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                                    selectorbotonCerrarCambiarTitular.removeAttribute("style")
                                },
                                cancelarCambiarTitular: (instanciaUID) => {
                                    const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                                    const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                                    selectorBotonCambiarTitular.removeAttribute("style")
                                    selectorBotonDesasociar.removeAttribute("style")
                                    const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                                    selectorNuevoClienteUI.style.display = "none"
                                    const selectorBuscadorRapidoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [contenedor=buscador]`)
                                    selectorBuscadorRapidoClienteUI.style.display = "none"
                                    const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                                    selectorbotonCerrarCambiarTitular.style.display = "none"
                                },
                            }
                        },
                        estado: {
                            aceptarReserva: async function (data) {
                                const reservaUID = data.reservaUID
                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Confirmas que aceptas la reserva ${reservaUID}`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = "AAl confirmar una reserva pendiente, cambiarás el estado de pendiente.Ha confirmado.La reserva dejará de ser visible desde la sección de reservas confirmadas.Si necesitas volver a poner la reserva en estado pendiente, pulsa en el estado de la reserva para poder cambiarla."

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.textContent = "Comfirmar y aceptar reserva"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarNuevoEstado({
                                        reservaUID,
                                        instanciaUID_aceptarReserva,
                                        nuevoEstado: "confirmada"
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            rechazarReserva: async function (data) {
                                const reservaUID = data.reservaUID
                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()

                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Confirmas que rechazas la reserva ${reservaUID}`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = "Rechazar una reserva implica cancelar la reserva."

                                const botonRechazar = constructor.querySelector("[boton=aceptar]")
                                botonRechazar.textContent = "Rechazar reserva"
                                botonRechazar.addEventListener("click", (e) => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.confirmaCancelacion({
                                        tipoBloqueoIDV: "sinBloqueo"
                                    })
                                })

                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cerrar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            ponerReservaEnPendiente: async function (data) {
                                const reservaUID = data.reservaUID
                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Confirmas que aceptas la reserva ${reservaUID}`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = "Al confirmar una reserva pendiente, cambiarás el estado de pendiente.Ha confirmado.La reserva dejará de ser visible desde la sección de reservas confirmadas.Si necesitas volver a poner la reserva en estado pendiente, pulsa en el estado de la reserva para poder cambiarla"

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.textContent = "Comfirmar y aceptar reserva"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarNuevoEstado({
                                        reservaUID,
                                        instanciaUID_aceptarReserva,
                                        nuevoEstado: "pendiente"
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            confirmarNuevoEstado: async function (data) {
                                const reservaUID = data.reservaUID
                                const nuevoEstado = data.nuevoEstado
                                const instanciaUID_aceptarReserva = data.instanciaUID_aceptarReserva

                                const ui = document.querySelector(`[instanciaUID="${instanciaUID_aceptarReserva}"]`)
                                const contenedor = ui.querySelector("[componente=constructor]")
                                contenedor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Aceptando reserva un momento por favor..."
                                })
                                contenedor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/actualizarEstadoReserva",
                                    reservaUID: String(reservaUID),
                                    nuevoEstado
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                if (!uiRenderizada) { return }
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();

                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    const estadoUI = uiRenderizada.querySelector("[dataReserva=estado]")
                                    const contenedorPendienteUI = uiRenderizada.querySelector("[contenedor=pendiente]")
                                    const estadoActual = respuestaServidor.estadoActual


                                    if (estadoActual === "pendiente") {
                                        estadoUI.textContent = "Pendiente"
                                        estadoUI.setAttribute("estadoReservaIDV", "pendiente")
                                        contenedorPendienteUI.style.display = "grid"

                                    }
                                    if (estadoActual === "confirmada") {
                                        estadoUI.textContent = "Confirmada"
                                        estadoUI.setAttribute("estadoReservaIDV", "confirmada")
                                        contenedorPendienteUI.style.display = "none"
                                    }

                                }

                            },
                            panelExpandidoUI: async function (reservaUID) {
                                const estadoActual = document.querySelector("[contenedor=panelGlobal] [contenedor=estadoReserva] [estadoReservaIDV]").getAttribute("estadoReservaIDV")

                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                pantallaInmersiva.style.justifyContent = "center"
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Estado de la reserva ${reservaUID}`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")

                                if (estadoActual === "confirmada") {
                                    mensaje.textContent = "El estado actual de la reserva es confirmado.Si se necesita, puedes cambiar el estado de esta reserva a pendiente.Esto permitirá insertar la reserva en reservas pendientes de revisión"

                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                    botonAceptar.textContent = "Pasar el estado de esta reserva a pendiente de revisión"
                                    botonAceptar.addEventListener("click", () => {
                                        this.confirmarNuevoEstado({
                                            reservaUID,
                                            instanciaUID_aceptarReserva,
                                            nuevoEstado: "pendiente"
                                        })
                                    })
                                } else
                                    if (estadoActual === "pendiente") {
                                        mensaje.textContent = "El estado de esta reserva es pendiente, en este estado es recomendable revisar la reserva para tomar la decisión de aceptarla o rechazarla.Es recomendable revisar las reservas pendientes y aceptar o rechazarlas para mantener la lista de reservas pendientes sin saturar."
                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Aceptar reserva"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarNuevoEstado({
                                                reservaUID,
                                                instanciaUID_aceptarReserva,
                                                nuevoEstado: "confirmada"
                                            })
                                        })
                                    } else if (estadoActual === "cancelada") {
                                        titulo.textContent = `La reserva ${reservaUID} esta cancelada`
                                        mensaje.textContent = "Esta reserva está cancelada.Las reservas canceladas no pueden revertir su estado.Puede eliminar definitivamente la reserva de la base de datos para que no esté almacenada desde el apartado de cancelar reserva dentro de la reserva."

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.remove()
                                    }

                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)

                            }
                        },
                        actualizarReservaRenderizada: async () => {
                            const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                            const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                            const selectorEstadoPago = document.querySelector("[dataReserva=estadoPago]")
                            const selectorTotalConImpuestos = document.querySelector("[dataReserva=totalReservaConImpuestos]")
                            selectorEstadoPago.textContent = "Obteniendo..."
                            selectorTotalConImpuestos.textContent = "Recalculando..."

                            const instanciaUID_paraSelectores = casaVitini.utilidades.codigoFechaInstancia()
                            selectorTotalConImpuestos.setAttribute("instanciaUID", instanciaUID_paraSelectores)

                            const transaccion = {
                                zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                reservaUID: String(reservaUID),
                                capas: [
                                    "titular",
                                    "desgloseFinanciero"
                                ]
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const selectorUIRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_paraSelectores}"]`)
                            if (!selectorUIRenderizada) {
                                return
                            }
                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                const porcentajeTranscurrido = respuestaServidor.ok.global.porcentajeTranscurrido
                                const estadoPago = respuestaServidor.ok.global.estadoPagoIDV
                                const estadoPagoUI = {
                                    pagado: "Pagado",
                                    noPagado: "No pagado",
                                    pagadoSuperadamente: "Pagado superadamente",
                                    pagadoParcialmente: "Pagado parcialmente"
                                }
                                const totalConImpuestos = respuestaServidor.ok.contenedorFinanciero.desgloseFinanciero?.global?.totales?.totalFinal ?
                                    respuestaServidor.ok.contenedorFinanciero.desgloseFinanciero?.global?.totales?.totalFinal + "$" :
                                    "Sin información"
                                selectorEstadoPago.textContent = estadoPagoUI[estadoPago]
                                selectorTotalConImpuestos.textContent = totalConImpuestos
                                const section = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                const selectorListaDePagosRenderizada = section.querySelector("[contenedorID=transacciones]")
                                const selectorDesgloseFinancieroUIRenderizado = section.querySelector("[componente=contenedorDesgloseTotal]")
                                const selectorProgreso = section.querySelector("[componente=progreso]")
                                selectorProgreso.style.width = porcentajeTranscurrido + "%"

                                if (selectorListaDePagosRenderizada) {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.actualizarDatosGlobalesPago({
                                        reservaUID
                                    })
                                }
                                if (selectorDesgloseFinancieroUIRenderizado) {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                        reservaUID
                                    })
                                }
                            }
                        },
                        rechazarReserva: {
                            UI: (metadatos) => {
                                const reservaUID = metadatos.reservaUID
                                const origen = metadatos.origen
                                const e = metadatos.e
                                const uiRenderizada = e.target.closest("[componente=advertenciaInmersiva]")

                                const contenedor = uiRenderizada.querySelector("[componente=constructor]")

                                contenedor.innerHTML = null

                                const instanciaUID_listaReservasPendientes = metadatos.instanciaUID_listaReservasPendientes
                                uiRenderizada.style.transition = "background 500ms"
                                uiRenderizada.style.background = "rgba(0, 0, 0, 0.3)"

                                const instanciaUID_opcionesReserva = uiRenderizada.getAttribute("instanciaUID")
                                const contenedorCancelacion = document.createElement("div")
                                contenedorCancelacion.classList.add("administracion_reservas_detallesReservas_cancelarReserva_contenedorCancelacion")
                                const tituloCancelarReserva = document.createElement("p")
                                tituloCancelarReserva.classList.add("tituloGris")
                                tituloCancelarReserva.textContent = "Rechazar y eliminar la reserva " + reservaUID
                                tituloCancelarReserva.style.color = "red"
                                contenedorCancelacion.appendChild(tituloCancelarReserva)
                                const botonCancelarProcesoCancelacion = document.createElement("div")
                                botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                                botonCancelarProcesoCancelacion.textContent = "Cerrar y volver atras"
                                botonCancelarProcesoCancelacion.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                contenedorCancelacion.appendChild(botonCancelarProcesoCancelacion)
                                const bloqueBloqueoApartamentos = document.createElement("div")
                                bloqueBloqueoApartamentos.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                const tituloBloquoApartamentos = document.createElement("div")
                                tituloBloquoApartamentos.classList.add(
                                    "padding10"
                                )

                                tituloBloquoApartamentos.textContent = "Rechazar la reserva elimina la reserva del sistema y libera los apartamentos, haciéndolos de nuevo disponibles para reservas.Para rechazar la reserva y eliminarla irreversiblemente junto con toda su información relacionada, debe escribir su contraseña de usuario y su cuenta debe tener autorización administrativa."
                                bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                                const campo = document.createElement("input")
                                campo.classList.add("administracion_reserva_detallesReserva_cancelarReserva_eliminarReserva_campo")
                                campo.setAttribute("campo", "clave")
                                campo.type = "password"
                                campo.placeholder = "Escriba la contraseña de su VitiniID"
                                bloqueBloqueoApartamentos.appendChild(campo)
                                contenedorCancelacion.appendChild(bloqueBloqueoApartamentos)
                                const bloqueBotones = document.createElement("div")
                                bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("administracion_reserva_detallesReserva_cancelarReserva_eliminarReserva_botonV1")
                                botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                botonCancelar.textContent = "Eliminar la reserva irreversiblemente."
                                botonCancelar.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.eliminarReservaIrreversiblemente.confirmar({
                                        reservaUID,
                                        instanciaUID: instanciaUID_opcionesReserva,
                                        origen
                                    })
                                })
                                bloqueBloqueoApartamentos.appendChild(botonCancelar)
                                contenedorCancelacion.appendChild(bloqueBotones)
                                contenedor.appendChild(contenedorCancelacion)
                            },
                        },
                    },
                    categoriasGlobales: {
                        alojamiento: {
                            arranque: async function () {
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                                const reservaUI = document.querySelector("[reservaUID]")
                                const reservaUID = reservaUI.getAttribute("reservaUID")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")

                                const marcoAlojamiento = document.createElement("div");
                                marcoAlojamiento.setAttribute("class", "reservaDetallesBloqueAlojamineto");
                                marcoAlojamiento.setAttribute("componente", "marcoAlojamiento");
                                marcoAlojamiento.setAttribute("instanciaUID", instanciaUID)
                                const mensajeSpinner = "Esperando a Casa Vitini..."
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple(mensajeSpinner)
                                marcoAlojamiento.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(marcoAlojamiento)
                                const transaccion = {
                                    reservaUID
                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"
                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "alojamiento",
                                        "pernoctantes",
                                    ]
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[componente=marcoAlojamiento][instanciaUID="${instanciaUID}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null

                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }
                                if (respuestaServidor?.ok) {
                                    const detallesReserva = respuestaServidor.ok
                                    const alojamiento = detallesReserva.alojamiento
                                    const pernoctantes = detallesReserva.pernoctantes

                                    const divPernoctantesSinAlojamiento = document.createElement("div");
                                    divPernoctantesSinAlojamiento.setAttribute("class", "resertaDetallesPernoctantesSinalojamiento elementoOcultoInicialmente");
                                    divPernoctantesSinAlojamiento.setAttribute("componente", "espacioPernoctantesSinAlojamiento");

                                    const tituloPernoctantesSinHabitacion = document.createElement("div")
                                    tituloPernoctantesSinHabitacion.classList.add("flexVertical", "padding10", "textoCentrado")
                                    tituloPernoctantesSinHabitacion.textContent = "Pernoctantes en esta reserva sin alojamiento ni habitación asignados"

                                    divPernoctantesSinAlojamiento.appendChild(tituloPernoctantesSinHabitacion)
                                    const contenedorPernoctantesSinHabitacion = document.createElement("div")
                                    contenedorPernoctantesSinHabitacion.classList.add("administracion_reservas_detallesReserva_contenedorPernoctantesSinHabitacion")
                                    contenedorPernoctantesSinHabitacion.setAttribute("componente", "contenedorPernoctantesSinHabitacion");
                                    divPernoctantesSinAlojamiento.appendChild(contenedorPernoctantesSinHabitacion)
                                    instanciaDestino.appendChild(divPernoctantesSinAlojamiento)

                                    const contenedorAlojamientoUI = document.createElement("div")
                                    contenedorAlojamientoUI.classList.add("administracionReservaDetallesBloqueContendioAlojamiento")
                                    contenedorAlojamientoUI.setAttribute("componente", "contenedorIntermedioAlojamiento")

                                    if (configuracionVista === "publica") {

                                    } else {
                                        instanciaDestino.appendChild(contenedorAlojamientoUI)
                                    }

                                    const botonAnadirApartamento = document.createElement("p");
                                    botonAnadirApartamento.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                    botonAnadirApartamento.setAttribute("componenteBoton", "anadirApartamento");
                                    botonAnadirApartamento.setAttribute("componente", "menuDesplegable");
                                    botonAnadirApartamento.addEventListener("click", this.apartamentos.abrirMenuReservas)
                                    botonAnadirApartamento.textContent = "Añadir apartamento";
                                    contenedorAlojamientoUI.appendChild(botonAnadirApartamento)


                                    const espacioAlojamiento = document.createElement("div")
                                    espacioAlojamiento.classList.add("reservasDetallesBloqueAlojamiennto")
                                    espacioAlojamiento.setAttribute("componente", "espacioAlojamiento")
                                    instanciaDestino.appendChild(espacioAlojamiento)
                                    for (const [apartamentoIDV, configuracionApartamento] of Object.entries(alojamiento)) {
                                        const apartamentoUID = configuracionApartamento.apartamentoUID
                                        const apartamentoUI = configuracionApartamento.apartamentoUI
                                        const configuracionesHabitacion = configuracionApartamento.habitaciones

                                        const apartamentoComponenteUI = this.apartamentos.apatamentoUI({
                                            apartamentoIDV: apartamentoIDV,
                                            apartamentoUID: apartamentoUID,
                                            apartamentoUI: apartamentoUI
                                        })
                                        const apartamentoTituloComponenteUI = this.apartamentos.apartamentoTituloUI({
                                            apartamentoIDV: apartamentoIDV,
                                            apartamentoUID: apartamentoUID,
                                            apartamentoUI: apartamentoUI
                                        })
                                        apartamentoComponenteUI.appendChild(apartamentoTituloComponenteUI)
                                        delete configuracionApartamento.uid
                                        for (const [habitacionIDV, configuracionHabitacion] of Object.entries(configuracionesHabitacion)) {

                                            const habitacionUID = configuracionHabitacion.habitacionUID
                                            const habitacionUI = configuracionHabitacion.habitacionUI
                                            const camas = configuracionHabitacion.camas


                                            const habitacionComponenteUI = this.habitaciones.habitacionUI({
                                                habitacionIDV: habitacionIDV,
                                                habitacionUID: habitacionUID,
                                                apartamentoIDV: apartamentoIDV,
                                                habitacionUI: habitacionUI,
                                            })
                                            const habitacionTituloComponenteUI = this.habitaciones.habitacionTituloUI({
                                                habitacionIDV: habitacionIDV,
                                                habitacionUID: habitacionUID,
                                                apartamentoIDV: apartamentoIDV,
                                                habitacionUI: habitacionUI,
                                            })
                                            habitacionComponenteUI.appendChild(habitacionTituloComponenteUI)

                                            const camaComponenteUI = this.camas.contenedorCamasUI({
                                                habitacionIDV: habitacionIDV,
                                                habitacionUI: habitacionUI,
                                                apartamentoUI: apartamentoUI,
                                                apartamentoIDV: apartamentoIDV,
                                                habitacionUID: habitacionUID,
                                                camas: camas,
                                                reservaUID: reservaUID
                                            })
                                            habitacionComponenteUI.appendChild(camaComponenteUI)

                                            apartamentoComponenteUI.appendChild(habitacionComponenteUI)
                                        }
                                        espacioAlojamiento.appendChild(apartamentoComponenteUI)
                                    }

                                    for (const detallesPernoctante of pernoctantes) {
                                        const tipoPernoctante = detallesPernoctante.tipoPernoctante
                                        const nombreCompleto = detallesPernoctante.nombreCompleto
                                        const pasaporte = detallesPernoctante.pasaporte
                                        const clienteUID = detallesPernoctante?.clienteUID
                                        const habitacionUID = detallesPernoctante?.habitacionUID
                                        const pernoctanteUID = detallesPernoctante.pernoctanteUID
                                        const fechaCheckIn = detallesPernoctante.fechaCheckIn
                                        const fechaCheckOutAdelantado = detallesPernoctante.fechaCheckOutAdelantado
                                        const metadatos = {
                                            tipoPernoctante,
                                            clienteUID,
                                            pernoctanteUID,
                                            fechaCheckIn,
                                            fechaCheckOutAdelantado,
                                            nombreCompleto,
                                            pasaporte
                                        }
                                        if (habitacionUID) {
                                            metadatos.estadoAlojamiento = "alojado"
                                        } else {
                                            metadatos.estadoAlojamiento = "noAlojado"
                                        }
                                        const bloquePernoctantes = this.pernoctantes.pernoctanteUI(metadatos)

                                        const nombrePernoctante = this.pernoctantes.pernoctanteNombreUI(metadatos)
                                        bloquePernoctantes.appendChild(nombrePernoctante)
                                        const identificacionPernoctante = this.pernoctantes.pernoctantePasaporteUI(metadatos)
                                        bloquePernoctantes.appendChild(identificacionPernoctante)

                                        if (habitacionUID) {
                                            const selectorHabitacionUID = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                            selectorHabitacionUID.appendChild(bloquePernoctantes)
                                        } else {
                                            contenedorPernoctantesSinHabitacion.appendChild(bloquePernoctantes)
                                            divPernoctantesSinAlojamiento.classList.remove("elementoOcultoInicialmente")
                                        }
                                    }
                                    contenedorDinamico.appendChild(instanciaDestino)
                                    this.componentesUI.controlEspacioAlojamiento()
                                }
                            },
                            componentesUI: {
                                controlEspacioAlojamiento: () => {
                                    const selectorMarcoalojamiento = document.querySelector("[componente=marcoAlojamiento]")
                                    const selectorApartamentos = document.querySelectorAll("[componente=marcoAlojamiento] [apartamentoIDV]")
                                    if (selectorApartamentos.length > 0) {
                                        document.querySelector("[componente=infoSinAlojamiento]")?.remove()
                                    } else {
                                        const infoNoAlojamiento = document.createElement("div")
                                        infoNoAlojamiento.classList.add("reservas_detalles_infoDesgloseNo")
                                        infoNoAlojamiento.setAttribute("componente", "infoSinAlojamiento")
                                        infoNoAlojamiento.textContent = "Esta reserva no contiene ningún apartamento."
                                        selectorMarcoalojamiento.appendChild(infoNoAlojamiento)
                                    }
                                },
                                bannerReservaMenus: () => {
                                    const main = document.querySelector("main")
                                    const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")

                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",



                                    )
                                    const titulo = document.createElement("p")
                                    titulo.textContent = "Reserva"
                                    banner.appendChild(titulo)

                                    const reservaUID_UI = document.createElement("p")
                                    reservaUID_UI.classList.add(
                                        "negrita"
                                    )
                                    reservaUID_UI.textContent = reservaUID
                                    banner.appendChild(reservaUID_UI)
                                    return banner
                                },
                                bannerAlojamiento: (data) => {
                                    const apartamentoUI = data.apartamentoUI
                                    const apartamentoIDV = data.apartamentoIDV

                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",



                                    )
                                    const titulo = document.createElement("p")
                                    titulo.textContent = "Alojamiento"
                                    banner.appendChild(titulo)

                                    const alojamientoUI = document.createElement("p")
                                    alojamientoUI.classList.add(
                                        "negrita"
                                    )
                                    if (apartamentoIDV) {
                                        alojamientoUI.textContent = `${apartamentoUI} (${apartamentoIDV})`
                                    } else {
                                        alojamientoUI.textContent = `${apartamentoUI}`
                                        alojamientoUI.style.color = "red"
                                    }
                                    banner.appendChild(alojamientoUI)
                                    return banner

                                },
                                bannerHabitacion: (data) => {
                                    const habitacionUI = data.habitacionUI
                                    const habitacionIDV = data.habitacionIDV

                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",



                                    )
                                    const titulo = document.createElement("p")
                                    titulo.textContent = "Habitación del alojamiento"
                                    banner.appendChild(titulo)

                                    const habitacionUI_UI = document.createElement("p")
                                    habitacionUI_UI.classList.add(
                                        "negrita"
                                    )
                                    if (habitacionIDV) {
                                        habitacionUI_UI.textContent = `${habitacionUI} (${habitacionIDV})`
                                    } else {
                                        habitacionUI_UI.textContent = `${habitacionUI}`
                                        habitacionUI_UI.style.color = "red"
                                    }
                                    banner.appendChild(habitacionUI_UI)
                                    return banner

                                }
                            },
                            habitaciones: {
                                habitacionUI: (metadatos) => {
                                    const habitacionUI = document.createElement("div")
                                    habitacionUI.classList.add("administracionReservasDetallesBloqueHabitacion")
                                    habitacionUI.setAttribute("habitacionIDV", metadatos.habitacionIDV)
                                    habitacionUI.setAttribute("habitacionUID", metadatos.habitacionUID)

                                    return habitacionUI
                                },
                                habitacionTituloUI: function (metadatos) {
                                    const habitacionUI = metadatos.habitacionUI
                                    const habitacionIDV = metadatos.habitacionIDV
                                    const habitacionTituloUI = document.createElement("div")
                                    habitacionTituloUI.setAttribute("componente", "menuDesplegable")
                                    habitacionTituloUI.setAttribute("habitacionUI", habitacionUI)

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")


                                    if (configuracionVista === "publica") {
                                        habitacionTituloUI.classList.add("tituloHabitacion_noSel")

                                    } else {
                                        habitacionTituloUI.classList.add("tituloHabitacion")

                                        habitacionTituloUI.addEventListener("click", (e) => {
                                            const habitacionUID = e.target.closest("[habitacionUID]").getAttribute("habitacionUID")
                                            const apartamentoUI = e.target.closest("[apartamentoUI]").getAttribute("apartamentoUI")
                                            const apartamentoIDV = e.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV")


                                            this.opcionesHabitacion({
                                                habitacionUID,
                                                habitacionUI,
                                                apartamentoUI,
                                                habitacionIDV,
                                                apartamentoIDV

                                            })
                                        })
                                    }



                                    habitacionTituloUI.textContent = metadatos.habitacionUI
                                    return habitacionTituloUI
                                },
                                selectorCambioHabitacionUI: (pernoctanteUID) => {
                                    const selectorCambioHabitacionUI = document.createElement("div")
                                    selectorCambioHabitacionUI.classList.add("reservaDetallesCambioPernoctante")
                                    selectorCambioHabitacionUI.classList.add("parpadea")
                                    selectorCambioHabitacionUI.setAttribute("componente", "botonMoverCliente")
                                    selectorCambioHabitacionUI.textContent = "Cambiar aquí al pernoctante seleccionado"
                                    selectorCambioHabitacionUI.addEventListener("click", (e) => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.cambiarPernoctanteHabitacion(pernoctanteUID, e)
                                    })
                                    return selectorCambioHabitacionUI
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales
                                },
                                propuestaEliminarHabitacionUI: (datosEliminacion) => {
                                    const opcionPernoctantes = datosEliminacion.opcionesPernoctantes
                                    const habitacionUID = datosEliminacion.habitacionUID
                                    const habitacionUI = document
                                        .querySelector(`[habitacionUID="${habitacionUID}"]`)
                                        .querySelector("[habitacionUI]")
                                        .getAttribute("habitacionUI")
                                    let mensajeUI
                                    if (opcionPernoctantes === "conservar") {
                                        mensajeUI = `¿Confirmas eliminar la ${habitacionUI} del apartamento pero conservar los pernoctantes de esta habitación en la reserva, en la zona de pernoctantes en la reserva sin alojamiento?`
                                    }
                                    if (opcionPernoctantes === "eliminar") {
                                        mensajeUI = `¿Confirmas eliminar la ${habitacionUI} del apartamento junto con los pernoctantes que contiene de la reserva?`
                                    }
                                    let botonMenajeUI
                                    if (opcionPernoctantes === "eliminar") {
                                        botonMenajeUI = `Eliminar la ${habitacionUI} del apartamento y los pernoctantes que contiene de la reserva`
                                    }
                                    if (opcionPernoctantes === "conservar") {
                                        botonMenajeUI = `Eliminar la ${habitacionUI} del apartamento pero conservar a sus pernoctantes en la reserva`
                                    }

                                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                    pantallaInmersiva.style.justifyContent = "center"
                                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                    const titulo = constructor.querySelector("[componente=titulo]")
                                    titulo.textContent = "Confirmar la eliminación"
                                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                    mensaje.textContent = mensajeUI

                                    const contenedorEspacio = constructor.querySelector("[componente=contenedor]")


                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                    botonAceptar.textContent = botonMenajeUI
                                    botonAceptar.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const datosEliminacion = {
                                            habitacionUID: habitacionUID,
                                            opcionPernoctantes: opcionPernoctantes,
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.eliminarHabitacion(datosEliminacion)
                                    })

                                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                    botonCancelar.textContent = "Cancelar la eliminación"

                                    document.querySelector("main").appendChild(pantallaInmersiva)


                                },
                                opcionesHabitacion: async (data) => {
                                    const main = document.querySelector("main")
                                    const habitacionUID = data.habitacionUID
                                    const habitacionUI = data.habitacionUI
                                    const apartamentoUI = data.apartamentoUI
                                    const apartamentoIDV = data.apartamentoIDV
                                    const habitacionIDV = data.habitacionIDV


                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    main.appendChild(ui)
                                    const contenedor = ui.querySelector("[componente=contenedor]")

                                    const titulo = document.createElement("div")
                                    titulo.classList.add(
                                        "tituloGris",
                                        "padding14"
                                    )
                                    titulo.textContent = `Opciones de la ${habitacionUI} en ${apartamentoUI}`
                                    contenedor.appendChild(titulo)


                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",
                                        "borderRadius12",
                                        "backgroundGrey1",
                                        "padding14",
                                        "gap6"
                                    )
                                    contenedor.appendChild(banner)


                                    const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                        alojamiento.
                                        componentesUI.
                                        bannerReservaMenus()
                                    banner.appendChild(bannerReserva)

                                    const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                        alojamiento.
                                        componentesUI.
                                        bannerAlojamiento({
                                            apartamentoUI: apartamentoUI,
                                            apartamentoIDV: apartamentoIDV

                                        })
                                    banner.appendChild(bannerAlojamiento)

                                    const bannerHabitacion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                        alojamiento.
                                        componentesUI.
                                        bannerHabitacion({
                                            habitacionUI: habitacionUI,
                                            habitacionIDV: habitacionIDV

                                        })
                                    banner.appendChild(bannerHabitacion)

                                    const opcionAddPernoctante = document.createElement("p")
                                    opcionAddPernoctante.classList.add("botonV1BlancoIzquierda")
                                    opcionAddPernoctante.textContent = `Añadir pernoctante en la ${habitacionUI}`
                                    opcionAddPernoctante.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.formularioNuevoPernoctanteEnHabitacionUI({
                                            habitacionUID,
                                            habitacionUI,
                                            apartamentoUI,
                                            habitacionIDV,
                                            apartamentoIDV
                                        })
                                    })
                                    contenedor.appendChild(opcionAddPernoctante)


                                    const infoElimiacion = document.createElement("p")
                                    infoElimiacion.classList.add(
                                        "padding12"
                                    )
                                    infoElimiacion.textContent = "Opciones de eliminación de la habitación"
                                    contenedor.append(infoElimiacion)

                                    const opcionEliminarHabSinPernoc = document.createElement("p")
                                    opcionEliminarHabSinPernoc.classList.add("botonV1BlancoIzquierda")
                                    opcionEliminarHabSinPernoc.textContent = `Eliminar la ${habitacionUI} pero mantener los pernoctantes que contiene asignados a esta reserva`
                                    opcionEliminarHabSinPernoc.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.propuestaEliminarHabitacionUI({
                                            opcionesPernoctantes: "conservar",
                                            habitacionUID: habitacionUID
                                        })
                                    })
                                    contenedor.appendChild(opcionEliminarHabSinPernoc)


                                    const eliminarHabYPernoc = document.createElement("p")
                                    eliminarHabYPernoc.classList.add("botonV1BlancoIzquierda")
                                    eliminarHabYPernoc.textContent = `Eliminar la ${habitacionUI} y tambien los pernoctantes que contiene de la reserva`
                                    eliminarHabYPernoc.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.propuestaEliminarHabitacionUI({
                                            opcionesPernoctantes: "eliminar",
                                            habitacionUID: habitacionUID
                                        })
                                    })
                                    contenedor.appendChild(eliminarHabYPernoc)

                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.setAttribute("boton", "cancelar")
                                    botonCancelar.textContent = "Cerrar y volver a la reserva"
                                    botonCancelar.addEventListener("click", () => {
                                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    contenedor.appendChild(botonCancelar)
                                },
                                eliminarHabitacion: async (datosElimiacion) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const habitacionUID = datosElimiacion.habitacionUID
                                    const opcionPernoctantes = datosElimiacion.opcionPernoctantes
                                    const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const opcionesPantallaDeCarga = {
                                        instanciaUID: instanciaUIDPantallaDeCarga,
                                        mensaje: "Eliminando habitación..."
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                    const pantallaDeCargaRenderizada = document
                                        .querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/alojamiento/eliminarHabitacionReserva",
                                        reservaUID: String(reservaUID),
                                        habitacionUID: String(habitacionUID),
                                        pernoctantes: opcionPernoctantes
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    pantallaDeCargaRenderizada?.remove()
                                    if (respuestaServidor?.error) {
                                        if (!pantallaDeCargaRenderizada) {

                                        }
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        if (opcionPernoctantes === "eliminar") {
                                            document.querySelector(`[habitacionUID="${habitacionUID}"]`)?.remove()
                                        }
                                        if (opcionPernoctantes === "conservar") {
                                            const selectorPernoctantesHabitacion = document
                                                .querySelectorAll(`[habitacionUID="${habitacionUID}"] [tipoCliente]`)
                                            selectorPernoctantesHabitacion.forEach((pernoctanteSeleccionado) => {
                                                const nombreCompleto = pernoctanteSeleccionado.querySelector("[componente=nombreCompleto]").textContent
                                                const pasaporte = pernoctanteSeleccionado.querySelector("[componente=pasaporte]").textContent
                                                const tipoCliente = pernoctanteSeleccionado.getAttribute("tipoCliente")
                                                const pernoctanteUID = pernoctanteSeleccionado.getAttribute("pernoctanteUID")
                                                const clienteUID = pernoctanteSeleccionado.getAttribute("clienteUID")
                                                const fechaCheckIn = pernoctanteSeleccionado.getAttribute("fechaCheckIn")
                                                const fechaCheckOut = pernoctanteSeleccionado.getAttribute("fechaCheckOut")
                                                const datosPernoctante = {
                                                    tipoPernoctante: tipoCliente,
                                                    clienteUID: clienteUID,
                                                    pernoctanteUID: pernoctanteUID,
                                                    estadoAlojamiento: "noAlojado",
                                                    fechaCheckIn: fechaCheckIn,
                                                    fechaCheckOutAdelantado: fechaCheckOut
                                                }
                                                const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(datosPernoctante)
                                                const datosNombre = {
                                                    nombreCompleto: nombreCompleto,
                                                }
                                                const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(datosNombre)
                                                bloquePernoctantes.appendChild(nombrePernoctante)
                                                const datosPasaporte = {
                                                    pasaporte: pasaporte,
                                                }
                                                const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(datosPasaporte)
                                                bloquePernoctantes.appendChild(identificacionPernoctante)
                                                if (document.querySelector("[reservaUID]").getAttribute("reservaUID") === reservaUID) {
                                                    const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                                    zonaDestino.appendChild(bloquePernoctantes)
                                                }
                                            })
                                            document.querySelector(`[habitacionUID="${habitacionUID}"]`)?.remove()
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                    }
                                },

                            },
                            apartamentos: {
                                apatamentoUI: (metadatos) => {
                                    const apartamento = document.createElement("div")
                                    apartamento.classList.add("administracionReservasDetallesBloqueApartamento")
                                    apartamento.setAttribute("apartamentoIDV", metadatos.apartamentoIDV)
                                    apartamento.setAttribute("apartamentoUID", metadatos.apartamentoUID)
                                    apartamento.setAttribute("apartamentoUI", metadatos.apartamentoUI)
                                    return apartamento
                                },
                                apartamentoTituloUI: function (metadatos) {

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const apartamentoTitulo = document.createElement("div")
                                    apartamentoTitulo.setAttribute("componente", "menuDesplegable")
                                    apartamentoTitulo.textContent = metadatos.apartamentoUI

                                    if (configuracionVista === "publica") {
                                        apartamentoTitulo.classList.add("tituloApartamento_noSel")
                                    } else {
                                        apartamentoTitulo.classList.add("tituloApartamento")
                                        apartamentoTitulo.addEventListener("click", this.opcionesApartamento)
                                    }

                                    return apartamentoTitulo
                                },
                                propuestaEliminarApartamentoUI: (datosElimiacion) => {

                                    const apartamentoUID = datosElimiacion.apartamentoUID
                                    const apartamentoUI = datosElimiacion.apartamentoUI
                                    const tipoBloqueo = datosElimiacion.tipoBloqueo
                                    let mensajeUI
                                    if (tipoBloqueo === "sinBloqueo") {
                                        mensajeUI = `¿Confirmas eliminar el ${apartamentoUI} y liberarlo para que esté disponible para reservar públicamente? Los pernoctantes de este apartamento no se eliminarán de la reserva`
                                    }
                                    if (tipoBloqueo === "permanente") {
                                        mensajeUI = `¿Confirmas eliminar el ${apartamentoUI} y bloquearlo indefinidamente? (Hay que desbloquearlo manualmente) Los pernoctantes de este apartamento no se eliminarán de la reserva`
                                    }
                                    if (tipoBloqueo === "rangoTemporal") {
                                        mensajeUI = `¿Confirmas eliminar el ${apartamentoUI} y bloquearlo durante el mismo rango de fechas que esta reserva? Los pernoctantes de este apartamento no se eliminarán de la reserva`
                                    }
                                    let botonMenajeUI
                                    if (tipoBloqueo === "permanente") {
                                        botonMenajeUI = `Eliminar el ${apartamentoUI} de la reserva y bloquearlo indefinidamente`
                                    }
                                    if (tipoBloqueo === "sinBloqueo") {
                                        botonMenajeUI = `Eliminar la ${apartamentoUI} de la reserva y liberarlo para que se pueda reservas`
                                    }
                                    if (tipoBloqueo === "rangoTemporal") {
                                        botonMenajeUI = `Eliminar la ${apartamentoUI} de la reserva y bloquearlo durante el mismo rango que la reserva`
                                    }



                                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                    pantallaInmersiva.style.justifyContent = "center"

                                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                    const titulo = constructor.querySelector("[componente=titulo]")
                                    titulo.textContent = "Confirmar la eliminación"
                                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                    mensaje.textContent = mensajeUI

                                    const contenedorEspacio = constructor.querySelector("[componente=contenedor]")

                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                    botonAceptar.textContent = botonMenajeUI
                                    botonAceptar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.eliminarApartamento({
                                            apartamentoUID: apartamentoUID,
                                            tipoBloqueo: tipoBloqueo,
                                        })
                                    })
                                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                    botonCancelar.textContent = "Cancelar la eliminación"

                                    document.querySelector("main").appendChild(pantallaInmersiva)

                                },
                                abrirMenuReservas: async () => {
                                    const main = document.querySelector("main")
                                    const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    const instanciaUID = ui.getAttribute("instanciaUID")
                                    const contenedor = ui.querySelector("[componente=contenedor]")
                                    main.appendChild(ui)

                                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                                    contenedor.appendChild(spinner)

                                    const botonCerrar = document.createElement("div")
                                    botonCerrar.classList.add(
                                        "botonV1",
                                        "comportamientoBoton"
                                    )
                                    botonCerrar.textContent = "Cerrar y volver"
                                    botonCerrar.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    contenedor.appendChild(botonCerrar)


                                    const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                                    const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/alojamiento/apartamentosDisponiblesParaAnadirAReserva",
                                        reservaUID: String(reservaUID),

                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    contenedor.innerHTML = null

                                    const botonCerrar1 = document.createElement("div")
                                    botonCerrar1.classList.add(
                                        "botonV1",
                                        "comportamientoBoton"
                                    )
                                    botonCerrar1.textContent = "Cerrar y volver"
                                    botonCerrar1.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    contenedor.appendChild(botonCerrar1)

                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const apartamentosDisponibles = respuestaServidor?.ok.apartamentosDisponibles
                                        const apartamentosNoDisponibles = respuestaServidor?.ok.apartamentosNoDisponibles
                                        if (apartamentosDisponibles.length > 0) {
                                            const bloqueApartamentos = document.createElement("div")
                                            bloqueApartamentos.classList.add(
                                                "flexVertical",
                                                "gap10"

                                            )
                                            const tituloApartamentoComponenteUIs = document.createElement("div")
                                            tituloApartamentoComponenteUIs.classList.add(
                                                "padding14",
                                                "negrita"

                                            )
                                            tituloApartamentoComponenteUIs.textContent = "Apartamentos disponibles"
                                            bloqueApartamentos.appendChild(tituloApartamentoComponenteUIs)
                                            for (const detallesApartamento of apartamentosDisponibles) {
                                                const apartamentoUI = document.createElement("div")
                                                apartamentoUI.classList.add("botonV1BlancoIzquierda")
                                                apartamentoUI.textContent = detallesApartamento.apartamentoUI
                                                apartamentoUI.addEventListener("click", (e) => {
                                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.anadirApartamento({

                                                        instanciaUID_contenedorUI: instanciaUID,
                                                        apartamentoIDV: detallesApartamento.apartamentoIDV
                                                    })
                                                })
                                                bloqueApartamentos.appendChild(apartamentoUI)
                                            }
                                            contenedor.appendChild(bloqueApartamentos)
                                        }
                                        if (apartamentosNoDisponibles.length > 0) {
                                            const bloqueApartamentos = document.createElement("div")
                                            bloqueApartamentos.classList.add(
                                                "flexVertical",
                                                "gap10"

                                            )
                                            const tituloApartamentoComponenteUIs = document.createElement("div")
                                            tituloApartamentoComponenteUIs.classList.add(
                                                "padding14",
                                                "negrita"
                                            )
                                            tituloApartamentoComponenteUIs.textContent = "Apartamentos no disponibles"
                                            bloqueApartamentos.appendChild(tituloApartamentoComponenteUIs)
                                            for (const detallesApartamento of apartamentosNoDisponibles) {
                                                const apartamentoUI = document.createElement("div")
                                                apartamentoUI.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                apartamentoUI.textContent = detallesApartamento.apartamentoUI
                                                bloqueApartamentos.appendChild(apartamentoUI)
                                            }
                                            contenedor.appendChild(bloqueApartamentos)
                                        }
                                    }

                                },
                                opcionesApartamento: async (apartamento) => {

                                    const main = document.querySelector("main")
                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const instanciaUID = ui.getAttribute("instanciaUID")

                                    main.appendChild(ui)
                                    const contenedor = ui.querySelector("[componente=contenedor]")
                                    const spinner = casaVitini.ui.componentes.spinner({
                                        mensaje: "Obteniendo las opciones del apartamento..."
                                    })
                                    contenedor.appendChild(spinner)

                                    const contenedorApartmeanto = apartamento.target.closest("[apartamentoIDV]")
                                    const apartamentoIDV = contenedorApartmeanto.getAttribute("apartamentoIDV")
                                    const apartamentoUID = contenedorApartmeanto.getAttribute("apartamentoUID")
                                    const apartamentoUI = apartamento.target.textContent

                                    const respuestaServidor = await casaVitini.shell.servidor({
                                        zona: "administracion/reservas/detallesReserva/alojamiento/estadoHabitacionesApartamento",
                                        reservaUID: reservaUID,
                                        apartamentoUID: apartamentoUID
                                    })
                                    contenedor.innerHTML = null

                                    const titulo = document.createElement("div")
                                    titulo.classList.add(
                                        "tituloGris",
                                        "padding14"
                                    )
                                    titulo.textContent = `Opciones del ${apartamentoUI}`
                                    contenedor.appendChild(titulo)

                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",
                                        "borderRadius12",
                                        "backgroundGrey1",
                                        "padding14",
                                        "gap6"
                                    )
                                    contenedor.appendChild(banner)


                                    const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.componentesUI.bannerReservaMenus()
                                    banner.appendChild(bannerReserva)

                                    const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                        alojamiento.
                                        componentesUI.
                                        bannerAlojamiento({
                                            apartamentoUI: apartamentoUI,
                                            apartamentoIDV: apartamentoIDV
                                        })
                                    banner.appendChild(bannerAlojamiento)


                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                    }


                                    const opcionesEliminacion = function (selector) {



                                        if (selector === "sinBloqueo") {
                                            const opcion = document.createElement("p")
                                            opcion.classList.add("botonV1BlancoIzquierda")
                                            opcion.setAttribute("componente", "menuVolatil")
                                            opcion.textContent = `Eliminar ${apartamentoUI} y liberarlo para que este disponible para reservar`
                                            opcion.addEventListener("click", () => {
                                                casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.propuestaEliminarApartamentoUI({
                                                    apartamentoUID: apartamentoUID,
                                                    apartamentoUI: apartamentoUI,
                                                    tipoBloqueo: "sinBloqueo"
                                                })
                                            })
                                            return opcion
                                        }
                                        if (selector === "bloqueoPermanente") {
                                            const opcion = document.createElement("p")
                                            opcion.classList.add("botonV1BlancoIzquierda")
                                            opcion.textContent = `Eliminar ${apartamentoUI} bloquearlo permanentemente. (Deberá desbloquearlo manualmente el bloqueo permanente)`
                                            opcion.setAttribute("componente", "menuVolatil")
                                            opcion.addEventListener("click", () => {
                                                casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()
                                                const datosPropuestaElimiacion = {
                                                    apartamentoUID: apartamentoUID,
                                                    apartamentoUI: apartamentoUI,
                                                    tipoBloqueo: "permanente"
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.propuestaEliminarApartamentoUI(datosPropuestaElimiacion)
                                            })
                                            return opcion


                                        }
                                        if (selector === "bloqueoTemporal") {
                                            const opcion = document.createElement("p")
                                            opcion.classList.add("botonV1BlancoIzquierda")
                                            opcion.setAttribute("componente", "menuVolatil")
                                            opcion.textContent = `Eliminar ${apartamentoUI} y mantenerlo bloqueado en el rango de fechas de esta reserva`
                                            opcion.addEventListener("click", () => {
                                                casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()
                                                const datosPropuestaElimiacion = {
                                                    apartamentoUID: apartamentoUID,
                                                    apartamentoUI: apartamentoUI,
                                                    tipoBloqueo: "rangoTemporal"
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.propuestaEliminarApartamentoUI(datosPropuestaElimiacion)
                                            })
                                            return opcion


                                        }
                                    }
                                    if (respuestaServidor?.info) {
                                        const opcionApartamento = document.createElement("p")
                                        opcionApartamento.classList.add("opcionDeInformacion")
                                        opcionApartamento.setAttribute("componente", "menuVolatil")
                                        opcionApartamento.textContent = respuestaServidor?.info
                                        contenedor.appendChild(opcionApartamento)

                                        const opcionSinBloqueo = opcionesEliminacion("sinBloqueo")
                                        contenedor.appendChild(opcionSinBloqueo)

                                    }
                                    if (respuestaServidor?.ok) {

                                        const habitacionesApartamento = respuestaServidor?.ok
                                        if (habitacionesApartamento.length === 0) {
                                            const opcionApartamento = document.createElement("p")
                                            opcionApartamento.classList.add(
                                                "padding14",
                                                "negrita"
                                            )
                                            opcionApartamento.textContent = `Este apartamento tiene ya todas las habitaciones implementadas en la reserva, según su configuración de alojamiento.`
                                            contenedor.appendChild(opcionApartamento)
                                        } else if (habitacionesApartamento.length > 0) {

                                            const infoHabitaciones = document.createElement("p")
                                            infoHabitaciones.classList.add(
                                                "padding14"
                                            )
                                            infoHabitaciones.textContent = `Lista de habitaciones disponibles`
                                            contenedor.appendChild(infoHabitaciones)


                                            habitacionesApartamento.forEach((habitacion) => {
                                                const opcionApartamento = document.createElement("p")
                                                opcionApartamento.classList.add("botonV1BlancoIzquierda")
                                                opcionApartamento.setAttribute("componente", "menuVolatil")
                                                opcionApartamento.textContent = `Anadir ${habitacion.habitacionUI}`
                                                opcionApartamento.addEventListener("click", async () => {

                                                    const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()

                                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                        instanciaUID: instanciaUID_pantallaDeCarga,
                                                        mensaje: "Obteniendo habitaciónes..."
                                                    })

                                                    const transaccion = {
                                                        zona: "administracion/reservas/detallesReserva/alojamiento/anadirHabitacionAlApartamentoEnReserva",
                                                        reservaUID: String(reservaUID),
                                                        apartamentoUID: String(apartamentoUID),
                                                        habitacionIDV: habitacion.habitacionIDV
                                                    }
                                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCarga}"]`)
                                                    if (!pantallaDeCargaRenderizada) {
                                                        return
                                                    }
                                                    pantallaDeCargaRenderizada?.remove()

                                                    if (respuestaServidor?.error) {
                                                        return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                                    }
                                                    if (respuestaServidor?.ok) {
                                                        const uiContenedor = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                                        if (!uiContenedor) {
                                                            return
                                                        }
                                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                                        const bloqueHabitacionUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.habitacionUI({
                                                            habitacionIDV: habitacion.habitacionIDV,
                                                            habitacionUID: respuestaServidor?.nuevoUID,
                                                            apartamentoIDV: apartamentoIDV
                                                        })

                                                        const nombreHabitacionUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.habitacionTituloUI({
                                                            habitacionIDV: habitacion.habitacionIDV,
                                                            habitacionUID: respuestaServidor?.nuevoUID,
                                                            apartamentoIDV: apartamentoIDV,
                                                            habitacionUI: habitacion.habitacionUI,

                                                        })
                                                        bloqueHabitacionUI.appendChild(nombreHabitacionUI)

                                                        const camaComponenteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.camas.contenedorCamasUI({
                                                            habitacionIDV: habitacion.habitacionIDV,
                                                            apartamentoIDV: apartamentoIDV,
                                                            habitacionUID: respuestaServidor?.nuevoUID,
                                                            habitacionUI: habitacion.habitacionUI,
                                                            apartamentoUI: apartamentoUI,
                                                            camas: {
                                                                compartida: {
                                                                    camaUI: "Sin cama asignada"
                                                                },
                                                                fisicas: []
                                                            },
                                                            reservaUID: reservaUID
                                                        })
                                                        bloqueHabitacionUI.appendChild(camaComponenteUI)
                                                        document.querySelector(`[apartamentoUID="${apartamentoUID}"]`).appendChild(bloqueHabitacionUI)
                                                    }
                                                })
                                                contenedor.appendChild(opcionApartamento)
                                            })
                                        }



                                        const infoEliminacion = document.createElement("p")
                                        infoEliminacion.classList.add(
                                            "padding14"
                                        )
                                        infoEliminacion.textContent = `Opciones de eliminación del ${apartamentoUI}`
                                        contenedor.appendChild(infoEliminacion)

                                        const opcionSinBloqueo = opcionesEliminacion("sinBloqueo")
                                        contenedor.appendChild(opcionSinBloqueo)


                                        const infoEliminacionConBloqueo = document.createElement("p")
                                        infoEliminacionConBloqueo.classList.add(
                                            "padding14"
                                        )
                                        infoEliminacionConBloqueo.textContent = `Eliminar el ${apartamentoUI} aplicando un bloqueo`
                                        contenedor.appendChild(infoEliminacionConBloqueo)

                                        const opcionbloqueoTemporal = opcionesEliminacion("bloqueoTemporal")
                                        contenedor.appendChild(opcionbloqueoTemporal)
                                        const opcionbloqueoPermanente = opcionesEliminacion("bloqueoPermanente")
                                        contenedor.appendChild(opcionbloqueoPermanente)
                                    }


                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.setAttribute("boton", "cancelar")
                                    botonCancelar.textContent = "Cerrar y volver a la reserva"
                                    botonCancelar.addEventListener("click", () => {
                                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    contenedor.appendChild(botonCancelar)
                                },
                                anadirApartamento: async (data) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const apartamentoIDV = data.apartamentoIDV
                                    const instanciaUI_conteneodrUI = data.instanciaUID_contenedorUI
                                    const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()

                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                        instanciaUID: instanciaUID_pantallaDeCarga,
                                        mensaje: "Añadiendo alojamiento a la reserva..."
                                    })


                                    const respuestaServidor = await casaVitini.shell.servidor({
                                        zona: "administracion/reservas/detallesReserva/alojamiento/anadirApartamentoReserva",
                                        reservaUID: String(reservaUID),
                                        apartamentoIDV: apartamentoIDV
                                    })
                                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCarga}"]`)
                                    if (!pantallaDeCargaRenderizada) {
                                        return
                                    }
                                    pantallaDeCargaRenderizada?.remove()

                                    if (respuestaServidor?.error) {
                                        return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {

                                        const uiContenedor = document.querySelector(`[instanciaUID="${instanciaUI_conteneodrUI}"]`)
                                        if (!uiContenedor) {
                                            return
                                        }

                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        const apartamentoComponenteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.apatamentoUI({
                                            apartamentoIDV: apartamentoIDV,
                                            apartamentoUID: respuestaServidor?.nuevoUID,
                                            apartamentoUI: respuestaServidor?.apartamentoUI
                                        })

                                        const tituloApartamentoComponenteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.apartamentoTituloUI({
                                            apartamentoUI: respuestaServidor?.apartamentoUI
                                        })
                                        apartamentoComponenteUI.appendChild(tituloApartamentoComponenteUI)













                                        document.querySelector("[componente=espacioAlojamiento]").appendChild(apartamentoComponenteUI)
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.componentesUI.controlEspacioAlojamiento()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()
                                    }
                                },
                                eliminarApartamento: async (metadatos) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const tipoBloqueo = metadatos.tipoBloqueo
                                    const apartamentoUID = metadatos.apartamentoUID
                                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                    const opcionesPantallaDeCarga = {
                                        instanciaUID: instanciaUID,
                                        mensaje: "Eliminando habitación..."
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)

                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/alojamiento/eliminarApartamentoReserva",
                                        reservaUID: reservaUID,
                                        apartamentoUID: apartamentoUID,
                                        tipoBloqueo: tipoBloqueo
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const pantallaDeCargaRenderizada = document
                                        .querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUID}"]`)
                                    pantallaDeCargaRenderizada?.remove()
                                    if (!pantallaDeCargaRenderizada) {
                                        return
                                    }
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const selectorPernoctantesHabitacion = document.querySelectorAll(`[apartamentoUID="${apartamentoUID}"] [pernoctanteUID]`)
                                        selectorPernoctantesHabitacion.forEach((pernoctanteSeleccionado) => {
                                            const nombreCompleto = pernoctanteSeleccionado.querySelector("[componente=nombreCompleto]").textContent
                                            const pasaporte = pernoctanteSeleccionado.querySelector("[componente=pasaporte]").textContent
                                            const tipoCliente = pernoctanteSeleccionado.getAttribute("tipoCliente")
                                            const pernoctanteUID = pernoctanteSeleccionado.getAttribute("pernoctanteUID")
                                            const clienteUID = pernoctanteSeleccionado.getAttribute("clienteUID")
                                            const fechaCheckIn = pernoctanteSeleccionado.getAttribute("fechaCheckIn")
                                            const fechaCheckOut = pernoctanteSeleccionado.getAttribute("fechaCheckOut")

                                            const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI({
                                                tipoPernoctante: tipoCliente,
                                                clienteUID: clienteUID,
                                                pernoctanteUID: pernoctanteUID,
                                                estadoAlojamiento: "noAlojado",
                                                fechaCheckIn: fechaCheckIn,
                                                fechaCheckOutAdelantado: fechaCheckOut
                                            })

                                            const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI({
                                                nombreCompleto: nombreCompleto,
                                            })
                                            bloquePernoctantes.appendChild(nombrePernoctante)

                                            const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI({
                                                pasaporte: pasaporte,
                                            })
                                            bloquePernoctantes.appendChild(identificacionPernoctante)
                                            const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                            zonaDestino.appendChild(bloquePernoctantes)
                                            zonaDestino.classList.remove("elementoOcultoInicialmente")
                                        })
                                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                        document.querySelector(`[apartamentoUID="${apartamentoUID}"]`).remove()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.componentesUI.controlEspacioAlojamiento()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                    }
                                    if (respuestaServidor?.estadoDesgloseFinanciero === "actualizar") {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()
                                    }
                                },
                            },
                            camas: {
                                contenedorCamasUI: function (data) {

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const camas = data.camas
                                    const habitacionIDV = data.habitacionIDV
                                    const apartamentoIDV = data.apartamentoIDV
                                    const apartamentoUI = data.apartamentoUI
                                    const habitacionUID = data.habitacionUID
                                    const habitacionUI = data.habitacionUI
                                    const reservaUID = data.reservaUID

                                    const camaCompartida = camas.compartida
                                    const contenedorCamasFisicas = camas.fisicas

                                    const contenedorCamasUI = document.createElement("div")
                                    contenedorCamasUI.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "padding2",
                                        "ratonDefault"

                                    )
                                    contenedorCamasUI.setAttribute("contenedor", "camas")

                                    const camaCompartidaUI = document.createElement("div")
                                    camaCompartidaUI.classList.add(
                                        "padding10",
                                        "borderRadius6",
                                        "backgroundGrey1"

                                    )
                                    camaCompartidaUI.setAttribute("contenedor", "camaCompartida")
                                    camaCompartidaUI.setAttribute("componente", "menuDesplegable")
                                    camaCompartidaUI.textContent = camaCompartida.camaUI

                                    if (configuracionVista === "publica") {
                                    } else {
                                        camaCompartidaUI.classList.add("comportamientoBoton")
                                        camaCompartidaUI.addEventListener("click", (e) => {
                                            this.anadirCama(e, {
                                                apartamentoIDV,
                                                apartamentoUI,
                                                habitacionIDV,
                                                habitacionUID,
                                                habitacionUI
                                            })
                                        })
                                    }


                                    contenedorCamasUI.appendChild(camaCompartidaUI)

                                    if (contenedorCamasFisicas.length > 0) {
                                        const contenedorCamasFisicasUI = this.contenedorCamasFisicas()
                                        contenedorCamasUI.appendChild(contenedorCamasFisicasUI)

                                        contenedorCamasFisicas.forEach((camaFisica) => {
                                            const componenteUID = camaFisica.componenteUID
                                            const camaIDV = camaFisica.camaIDV
                                            const camaUI = camaFisica.camaUI

                                            const camaFisicaUI = this.camaFisicaUI({
                                                componenteUID,
                                                camaIDV,
                                                reservaUID,
                                                habitacionUID,
                                                habitacionUI,
                                                camaUI,
                                            })
                                            contenedorCamasFisicasUI.appendChild(camaFisicaUI)
                                        })
                                    }

                                    return contenedorCamasUI
                                },
                                camaFisicaUI: function (data) {


                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const componenteUID = data.componenteUID
                                    const camaIDV = data.camaIDV
                                    const reservaUID = data.reservaUID
                                    const camaUI = data.camaUI
                                    const habitacionUI = data.habitacionUI
                                    const habitacionUID = data.habitacionUID



                                    const camaFisicaUI = document.createElement("div")
                                    camaFisicaUI.classList.add(
                                        "padding10",
                                        "borderRadius6",
                                        "backgroundGrey1"
                                    )
                                    camaFisicaUI.setAttribute("componente", "menuDesplegable")
                                    camaFisicaUI.setAttribute("camaIDV", camaIDV)
                                    camaFisicaUI.setAttribute("componenteUID", componenteUID)
                                    camaFisicaUI.textContent = camaUI

                                    if (configuracionVista === "publica") {
                                    } else {
                                        camaFisicaUI.classList.add("comportamientoBoton")
                                        camaFisicaUI.addEventListener("click", () => {
                                            this.eliminarCamaFisica.ui({
                                                camaUI,
                                                componenteUID,
                                                habitacionUI,
                                                reservaUID,
                                                camaIDV,
                                                habitacionUID
                                            })
                                        })
                                    }
                                    return camaFisicaUI
                                },
                                contenedorCamasFisicas: () => {
                                    const contenedorCamasFisicasUI = document.createElement("div")
                                    contenedorCamasFisicasUI.setAttribute("contenedor", "camasFisicas")
                                    contenedorCamasFisicasUI.classList.add(
                                        "flexVertical",
                                        "gap6",
                                    )
                                    const titulo = document.createElement("div")
                                    titulo.classList.add(
                                        "padding10"
                                    )
                                    titulo.textContent = "Camas extra"
                                    contenedorCamasFisicasUI.appendChild(titulo)
                                    return contenedorCamasFisicasUI
                                },
                                eliminarCamaFisica: {
                                    ui: function (data) {

                                        const camaUI = data.camaUI
                                        const componenteUID = data.componenteUID
                                        const habitacionUI = data.habitacionUI
                                        const reservaUID = data.reservaUID
                                        const camaIDV = data.camaIDV
                                        const habitacionUID = data.habitacionUID

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        pantallaInmersiva.style.justifyContent = "center"
                                        const instanciaUID_pantallaInmersia = pantallaInmersiva.getAttribute("instanciaUID")
                                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Eliminar ${camaUI}`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = `Confirmar eliminar la cama física ${camaUI} de la habitación ${habitacionUI} de la reserva ${reservaUID}, ¿Estás de acuerdo?`

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Eliminar cama física"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmar({
                                                componenteUID,
                                                habitacionUI,
                                                reservaUID,
                                                camaIDV,
                                                habitacionUID,
                                                instanciaUID_pantallaInmersia
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"

                                        document.querySelector("main").appendChild(pantallaInmersiva)

                                    },
                                    confirmar: async (data) => {

                                        const componenteUID = data.componenteUID
                                        const habitacionUI = data.habitacionUI
                                        const reservaUID = data.reservaUID
                                        const camaIDV = data.camaIDV
                                        const habitacionUID = data.habitacionUID

                                        const instanciaUID_pantallaInmersia = data.instanciaUID_pantallaInmersia
                                        const instanciaUID_pantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        const mensaje = "Eliminado cama..."

                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                            instanciaUID: instanciaUID_pantallaCarga,
                                            mensaje: mensaje
                                        })
                                        await casaVitini.utilidades.ralentizador(2000)

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/alojamiento/eliminarCamaFisicaDeHabitacion",
                                            componenteUID: String(componenteUID),
                                            habitacionUI: String(habitacionUI),
                                            reservaUID: String(reservaUID)
                                        })

                                        document.querySelector(`[instanciaUID="${instanciaUID_pantallaCarga}"]`)?.remove()

                                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaInmersia}"]`)
                                        if (!instanciaRenderizada) { return }
                                        instanciaRenderizada.remove()

                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            const contenedorSelectorCamas = document
                                                .querySelector(`[reservaUID="${reservaUID}"]`)
                                                .querySelector(`[habitacionUID="${habitacionUID}"]`)
                                                .querySelector(`[contenedor=camasFisicas]`)

                                            const selectorCamaObsoleta = contenedorSelectorCamas
                                                .querySelector(`[componenteUID="${componenteUID}"]`)


                                            selectorCamaObsoleta?.remove()

                                            const selectorCamasFisicasRestantes = contenedorSelectorCamas
                                                .querySelectorAll(`[componenteUID]`)

                                            if (selectorCamasFisicasRestantes.length === 0) {
                                                contenedorSelectorCamas?.remove()
                                            }
                                        }
                                    }
                                },
                                anadirCama: async (elementoCama, data) => {

                                    const apartamentoUI = data.apartamentoUI
                                    const apartamentoIDV = data.apartamentoIDV
                                    const habitacionIDV = data.habitacionIDV
                                    const habitacionUID = data.habitacionUID
                                    const habitacionUI = data.habitacionUI

                                    const main = document.querySelector("main")
                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const instanciaUID = ui.getAttribute("instanciaUID")

                                    main.appendChild(ui)
                                    const contenedor = ui.querySelector("[componente=contenedor]")
                                    const spinner = casaVitini.ui.componentes.spinner({
                                        mensaje: "Obteniendo camas del apartamento..."
                                    })
                                    contenedor.appendChild(spinner)

                                    const respuestaServidor = await casaVitini.shell.servidor({
                                        zona: "administracion/reservas/detallesReserva/alojamiento/listarTipoCamasHabitacion",
                                        apartamentoIDV: apartamentoIDV,
                                        habitacionIDV: habitacionIDV
                                    })

                                    contenedor.innerHTML = null
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }

                                    if (respuestaServidor.ok) {
                                        const titulo = document.createElement("div")
                                        titulo.classList.add(
                                            "titulo"
                                        )
                                        titulo.textContent = `Camas disponibles para ${habitacionUI} en ${apartamentoUI}`
                                        contenedor.appendChild(titulo)


                                        const banner = document.createElement("div")
                                        banner.classList.add(
                                            "flexVertical",
                                            "borderRadius12",
                                            "backgroundGrey1",
                                            "padding14",
                                            "gap6"
                                        )
                                        contenedor.appendChild(banner)


                                        const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerReservaMenus()
                                        banner.appendChild(bannerReserva)

                                        const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerAlojamiento({
                                                apartamentoUI: apartamentoUI,
                                                apartamentoIDV: apartamentoIDV

                                            })
                                        banner.appendChild(bannerAlojamiento)

                                        const bannerHabitacion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerHabitacion({
                                                habitacionUI: habitacionUI,
                                                habitacionIDV: habitacionIDV

                                            })
                                        banner.appendChild(bannerHabitacion)

                                        const contenedorCamasCompartidas = document.createElement("div")
                                        contenedorCamasCompartidas.classList.add(
                                            "flexVertical",
                                            "gap10",

                                        )
                                        contenedor.appendChild(contenedorCamasCompartidas)

                                        const tituloCamasCompartidas = document.createElement("div")
                                        tituloCamasCompartidas.classList.add(
                                            "padding12"
                                        )
                                        tituloCamasCompartidas.textContent = "Camas compartidas"
                                        contenedorCamasCompartidas.appendChild(tituloCamasCompartidas)

                                        respuestaServidor.listaCamasDisponiblesPorHabitacion.forEach(cama => {
                                            const camaIDV = cama.camaIDV
                                            const camaUI = cama.camaUI
                                            const tipoCama = document.createElement("p")
                                            tipoCama.classList.add("botonV1BlancoIzquierda")
                                            tipoCama.setAttribute("componente", "opcionesCama")
                                            tipoCama.setAttribute("camaIDV", camaIDV)
                                            tipoCama.textContent = camaUI

                                            tipoCama.addEventListener("click", async () => {
                                                const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()

                                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                    mensaje: `Estableciendo ${camaUI} en la habitacion...`,
                                                    instanciaUID: instanciaUID_localProceso,
                                                })
                                                await casaVitini.utilidades.ralentizador(2000)

                                                const respuestaServidor = await casaVitini.shell.servidor({
                                                    zona: "administracion/reservas/detallesReserva/alojamiento/gestionarCamasDeHabitacion",
                                                    reservaUID,
                                                    habitacionUID: String(habitacionUID),
                                                    nuevaCamaIDV: camaIDV,
                                                    tipoIDV: "compartida"
                                                })
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                document.querySelector(`[instanciaUID="${instanciaUID_localProceso}"]`)?.remove()



                                                if (respuestaServidor?.error) {
                                                    casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()
                                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                                }
                                                if (respuestaServidor?.ok) {

                                                    const nuevoUID = respuestaServidor?.nuevoUID
                                                    const selectorTituloCama = document.querySelector(`[habitacionUID="${habitacionUID}"] [contenedor=camas] [contenedor=camaCompartida]`)
                                                    selectorTituloCama.textContent = camaUI
                                                    selectorTituloCama.setAttribute("camaIDV", camaIDV)
                                                    if (nuevoUID) {
                                                        selectorTituloCama.setAttribute("camaUID", nuevoUID)
                                                    }
                                                }
                                            })
                                            contenedorCamasCompartidas.appendChild(tipoCama)
                                        })

                                        if (respuestaServidor.listaCamasFisicas.length > 0) {
                                            const contenedorCamasFisicas = document.createElement("div")
                                            contenedorCamasFisicas.classList.add(
                                                "flexVertical",
                                                "gap10",

                                            )
                                            contenedor.appendChild(contenedorCamasFisicas)

                                            const tituloCamasFisicas = document.createElement("div")
                                            tituloCamasFisicas.classList.add(
                                                "padding12"
                                            )
                                            tituloCamasFisicas.textContent = "Camas físicas"
                                            contenedorCamasFisicas.appendChild(tituloCamasFisicas)
                                            respuestaServidor.listaCamasFisicas.forEach(cama => {
                                                const camaIDV = cama.camaIDV
                                                const camaUI = cama.camaUI
                                                const tipoCama = document.createElement("p")
                                                tipoCama.classList.add("botonV1BlancoIzquierda")
                                                tipoCama.setAttribute("componente", "opcionesCama")
                                                tipoCama.setAttribute("camaIDV", camaIDV)
                                                tipoCama.textContent = camaUI
                                                tipoCama.addEventListener("click", async () => {
                                                    const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()
                                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                        mensaje: `Estableciendo ${camaUI} en la habitacion...`,
                                                        instanciaUID: instanciaUID_localProceso,
                                                    })
                                                    await casaVitini.utilidades.ralentizador(2000)
                                                    const respuestaServidor = await casaVitini.shell.servidor({
                                                        zona: "administracion/reservas/detallesReserva/alojamiento/gestionarCamasDeHabitacion",
                                                        reservaUID,
                                                        habitacionUID: String(habitacionUID),
                                                        nuevaCamaIDV: String(camaIDV),
                                                        tipoIDV: "fisica"
                                                    })
                                                    document.querySelector(`[instanciaUID="${instanciaUID_localProceso}"]`)?.remove()
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()


                                                    if (respuestaServidor?.error) {
                                                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                                    }
                                                    if (respuestaServidor?.ok) {
                                                        const camaIDV = respuestaServidor.camaIDV
                                                        const componenteUID = respuestaServidor.componenteUID
                                                        const camaUI = respuestaServidor.camaUI


                                                        const selectorContenedorCamas = document.querySelector(`[habitacionUID="${habitacionUID}"] [contenedor=camas]`)
                                                        if (!selectorContenedorCamas) {
                                                            return
                                                        }

                                                        const selectorContenedorCamasFisicasRenderizados = selectorContenedorCamas.querySelector("[contenedor=camasFisicas]")
                                                        if (!selectorContenedorCamasFisicasRenderizados) {
                                                            const contenedorCamasFisicasUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.camas.contenedorCamasFisicas()
                                                            selectorContenedorCamas.appendChild(contenedorCamasFisicasUI)
                                                        }

                                                        const contenedorCamasFisicas_renderizado = selectorContenedorCamas.querySelector("[contenedor=camasFisicas]")
                                                        const camaFisicaUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.camas.camaFisicaUI({
                                                            componenteUID: componenteUID,
                                                            camaIDV: camaIDV,
                                                            reservaUID: reservaUID,
                                                            camaUI: camaUI,
                                                            habitacionUI: habitacionUI,
                                                            habitacionUID: habitacionUID
                                                        })
                                                        contenedorCamasFisicas_renderizado.appendChild(camaFisicaUI)
                                                    }
                                                })
                                                contenedorCamasFisicas.appendChild(tipoCama)
                                            })
                                        }


                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        contenedor.appendChild(botonCancelar)
                                    }

                                },
                            },
                            pernoctantes: {
                                pernoctanteUI: function (metadatos) {

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const estadoAlojamiento = metadatos.estadoAlojamiento
                                    const tipoPernoctante = metadatos.tipoPernoctante
                                    const fechaCheckIn = metadatos.fechaCheckIn
                                    const fechaCheckOutAdelantado = metadatos.fechaCheckOutAdelantado
                                    const clienteUID = metadatos.clienteUID
                                    const pernoctanteUID = metadatos.pernoctanteUID
                                    const pernoctanteUI = document.createElement("div")
                                    pernoctanteUI.classList.add(
                                        "flexVertical",
                                        "borderRadius8",
                                        "gap6",
                                        "padding10",
                                        "ratonDefault"
                                    )
                                    if (estadoAlojamiento === "alojado") {

                                    }

                                    pernoctanteUI.setAttribute("tipoCliente", tipoPernoctante)
                                    pernoctanteUI.setAttribute("estadoAlojamiento", estadoAlojamiento)
                                    pernoctanteUI.setAttribute("componente", "contenedorPernocanteHabitacion")
                                    if (estadoAlojamiento === "noAlojado") {
                                        pernoctanteUI.style.borderRadius = "8px"
                                        pernoctanteUI.classList.add("tarjetaGris")
                                    }

                                    if (configuracionVista === "publica") {

                                    } else {

                                        pernoctanteUI.classList.add("comportamientoBoton")
                                        pernoctanteUI.addEventListener("click", () => {
                                            this.detallesPernoctante.ui({
                                                pernoctanteUID
                                            })
                                        })
                                    }



                                    pernoctanteUI.setAttribute("clienteUID", clienteUID)
                                    pernoctanteUI.setAttribute("contenedor", "pernoctante")
                                    pernoctanteUI.setAttribute("componente", "menuDesplegable")
                                    pernoctanteUI.setAttribute("pernoctanteUID", pernoctanteUID)
                                    if (tipoPernoctante === "clientePool") {
                                        const tipoPernoctanteUI = document.createElement("div")
                                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloPendienteComprobacion")
                                        tipoPernoctanteUI.classList.add("parpadea")
                                        tipoPernoctanteUI.setAttribute("componente", "pendienteComprobacion")
                                        tipoPernoctanteUI.textContent = "Pendiente de comprobación documental"
                                        pernoctanteUI.appendChild(tipoPernoctanteUI)
                                    }
                                    if (tipoPernoctante === "cliente") {
                                        if (!fechaCheckIn) {
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")

                                            tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                                            tipoPernoctanteUI.textContent = "Pendiente de checkin"
                                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                                        } else {
                                            pernoctanteUI.setAttribute("fechaCheckIn", fechaCheckIn)
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")

                                            tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                                            tipoPernoctanteUI.textContent = "> " + fechaCheckIn
                                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                                        }
                                        if (fechaCheckOutAdelantado) {
                                            pernoctanteUI.setAttribute("fechaCheckOut", fechaCheckOutAdelantado)
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                                            tipoPernoctanteUI.classList.add("letraRoja")
                                            tipoPernoctanteUI.setAttribute("componente", "checkOutInfo")
                                            tipoPernoctanteUI.textContent = "< " + fechaCheckOutAdelantado
                                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                                        } else {
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                                            tipoPernoctanteUI.classList.add("letraRoja")
                                            tipoPernoctanteUI.style.display = "none"
                                            tipoPernoctanteUI.setAttribute("componente", "checkOutInfo")

                                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                                        }
                                    }
                                    return pernoctanteUI
                                },
                                pernoctanteNombreUI: (metadatos) => {
                                    const pernoctanteNombreUI = document.createElement("div")
                                    pernoctanteNombreUI.classList.add("administracionReservasDetallesNombrePernoctante")
                                    pernoctanteNombreUI.setAttribute("componente", "nombreCompleto")
                                    pernoctanteNombreUI.textContent = metadatos.nombreCompleto
                                    return pernoctanteNombreUI
                                },
                                pernoctantePasaporteUI: (metadatos) => {
                                    const pernoctantePasaporteUI = document.createElement("div")
                                    pernoctantePasaporteUI.classList.add("administracionReservasDetallesIdentificacionPernoctante")
                                    pernoctantePasaporteUI.setAttribute("componente", "pasaporte")
                                    pernoctantePasaporteUI.textContent = metadatos.pasaporte
                                    return pernoctantePasaporteUI
                                },
                                propuestaEliminarPernoctanteUI: (datosEliminacion) => {
                                    const tipoEliminacion = datosEliminacion.tipoEliminacion
                                    const pernoctanteUID = datosEliminacion.pernoctanteUID

                                    const nombreCompleto = document
                                        .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        .querySelector("[componente=nombreCompleto]")
                                        .textContent
                                    const pasaporte = document
                                        .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        .querySelector("[componente=pasaporte]")
                                        .textContent

                                    let mensajeUI
                                    if (tipoEliminacion === "habitacion") {
                                        mensajeUI = "Confirmas la eliminación de este pernoctante de la habitación pero no de la reserva.Este pernoctante pasará a la sección de pernoctantes asociados a la reserva pero sin alojamiento asignado"
                                    }
                                    if (tipoEliminacion === "reserva") {
                                        mensajeUI = "¿Confirmas la eliminación de este pernoctante de la reserva? Si confirmas la eliminación el pernoctante será eliminado de esta reserva."
                                    }
                                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                    pantallaInmersiva.style.justifyContent = "center"
                                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                    const titulo = constructor.querySelector("[componente=titulo]")
                                    titulo.textContent = "Confirmar la elimiación del pernoctante"
                                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                    mensaje.textContent = mensajeUI

                                    const contenedorEspacio = constructor.querySelector("[componente=contenedor]")
                                    contenedorEspacio.classList.add(
                                        "padding14",
                                        "borderRadius14",
                                        "backgroundGrey1"
                                    )
                                    const nombreCompletoPropuesta = document.createElement("p")
                                    nombreCompletoPropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolnombreCompletoPropuesta")
                                    nombreCompletoPropuesta.setAttribute("componente", "nombrePropuesto")
                                    nombreCompletoPropuesta.textContent = nombreCompleto
                                    contenedorEspacio.appendChild(nombreCompletoPropuesta)
                                    const pasaportePropuesta = document.createElement("p")
                                    pasaportePropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolpasaportePropuesta")
                                    pasaportePropuesta.textContent = pasaporte
                                    contenedorEspacio.appendChild(pasaportePropuesta)

                                    let botonMenajeUI
                                    if (tipoEliminacion === "habitacion") {
                                        botonMenajeUI = "Eliminar de la habitación"
                                    }
                                    if (tipoEliminacion === "reserva") {
                                        botonMenajeUI = "Eliminar de la reserva"
                                    }

                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                    botonAceptar.textContent = botonMenajeUI
                                    botonAceptar.addEventListener("click", () => {
                                        const metadatosTipoEliminacion = {
                                            pernoctanteUID: pernoctanteUID,
                                            tipoEliminacion: tipoEliminacion
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.eliminarPernoctante(metadatosTipoEliminacion)
                                    })
                                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                    botonCancelar.textContent = "Cancelar la eliminación"

                                    document.querySelector("main").appendChild(pantallaInmersiva)
                                },
                                checkin: {
                                    UI: async (pernoctanteUID) => {

                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada({
                                            alineacion: "arriba"
                                        })
                                        const instanciaUID = ui.getAttribute("instanciaUID")
                                        ui.setAttribute("contenedor", "checkin")
                                        main.appendChild(ui)
                                        const contenedor = ui.querySelector("[componente=contenedor]")

                                        const pernoctanteElemento = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        const nombreCompleto = pernoctanteElemento.querySelector("[componente=nombreCompleto]").textContent
                                        const pasaporte = pernoctanteElemento.querySelector("[componente=pasaporte]").textContent

                                        const tituloCancelarReserva = document.createElement("p")
                                        tituloCancelarReserva.classList.add(
                                            "tituloGris",
                                            "padding14"
                                        )
                                        tituloCancelarReserva.textContent = "Realizar checkin"
                                        contenedor.appendChild(tituloCancelarReserva)
                                        const datosTitular = {
                                            nombreCompleto: nombreCompleto,
                                            pasaporte: pasaporte
                                        }
                                        const pernoctanteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.detallesDelTitularUI(datosTitular)
                                        contenedor.appendChild(pernoctanteUI)
                                        const instanciaUID_Calendario = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosCalendario = {
                                            tipoFecha: "entrada",
                                            almacenamientoCalendarioID: "administracionCalendario",
                                            perfilMes: "calendario_entrada_asistido_detallesReserva_checkIn_conPasado",
                                            calendarioIO: "entrada",
                                            mensajeInfo: "Selecciona el día de checkin",
                                            alturaDinamica: "10",
                                            instanciaUID: instanciaUID_Calendario,
                                            metodoSelectorDia: "ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.seleccionarDia"
                                        }
                                        const calendarioIncrustado = casaVitini.ui.componentes.calendario.constructorCalendarioIncrustado(metadatosCalendario)
                                        contenedor.appendChild(calendarioIncrustado)
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1BlancoIzquierda")
                                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                        botonCancelar.textContent = "Seleccionar una fecha del checkin"
                                        botonCancelar.addEventListener("click", (e) => {
                                            const datosCheckIn = {
                                                fechaCheckIn: e.target.getAttribute("fechaCheckIn"),
                                                pernoctanteUID: pernoctanteUID,
                                                instanciaUID: instanciaUID
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.confirmar(datosCheckIn)
                                        }
                                        )
                                        contenedor.appendChild(botonCancelar)
                                        const infoEliminarReserva = document.createElement("div")
                                        infoEliminarReserva.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                        infoEliminarReserva.style.marginTop = "50px"
                                        infoEliminarReserva.textContent = "También puedes eliminar irreversiblemente una reserva.La eliminación irreversible de una reserva borra la información de la reserva, así como los pagos asociados a la reserva y toda la información relacionada con la reserva.A diferencia de la cancelación, los datos dejarán de estar disponibles."
                                        const selectorCheckIn = document
                                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            .getAttribute("fechaCheckIn")

                                        if (selectorCheckIn) {
                                            contenedor.setAttribute("fechaCheckIn", selectorCheckIn)
                                            const botonEliminarCheckIn = document.createElement("div")
                                            botonEliminarCheckIn.classList.add("botonV1BlancoIzquierda")
                                            botonEliminarCheckIn.setAttribute("componente", "botonConfirmarCancelarReserva")
                                            botonEliminarCheckIn.textContent = "Eliminar checkin"
                                            botonEliminarCheckIn.addEventListener("click", () => {
                                                const eliminarCheckIN = {
                                                    pernoctanteUID,
                                                    instanciaUID
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.eliminar(eliminarCheckIN)
                                            })
                                            contenedor.appendChild(botonEliminarCheckIn)
                                        }
                                        const selectorCheckOutAdelantado = document
                                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            .getAttribute("fechaCheckOut")
                                        if (selectorCheckOutAdelantado) {
                                            contenedor.setAttribute("fechaCheckOut", selectorCheckOutAdelantado)
                                        }
                                        const botonCancelarCheckin = document.createElement("div")
                                        botonCancelarCheckin.classList.add("botonV1")
                                        botonCancelarCheckin.setAttribute("componente", "botonConfirmarCancelarReserva")
                                        botonCancelarCheckin.textContent = "Cancelar checkin y volver a la reserva"
                                        botonCancelarCheckin.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        })
                                        contenedor.appendChild(botonCancelarCheckin)

                                        const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                                        const fechaEntradaArray = fechaEntrada.split("-")
                                        const mesEntrada = fechaEntradaArray[1]
                                        const anoEntrada = fechaEntradaArray[0]

                                        const resolucionCalendario = {
                                            tipo: "personalizado",

                                            ano: Number(anoEntrada),
                                            mes: Number(mesEntrada)
                                        }
                                        if (selectorCheckIn) {
                                            const fechaCheckInArray = selectorCheckIn.split("-")
                                            const mesCheckIn = Number(fechaCheckInArray[1])
                                            const anoCheckIn = Number(fechaCheckInArray[0])
                                            resolucionCalendario.mes = mesCheckIn
                                            resolucionCalendario.ano = anoCheckIn
                                        }


                                        const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolucionCalendario)



                                        calendarioResuelto.instanciaUID = instanciaUID_Calendario
                                        calendarioResuelto.pernoctanteUID = pernoctanteUID
                                        await casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                                    },
                                    detallesDelTitularUI: (detallesDelTitular) => {
                                        const nombreCompleto = detallesDelTitular.nombreCompleto
                                        const pasaporte = detallesDelTitular.pasaporte
                                        const detallesRapidosDelTitular = document.createElement("div")
                                        detallesRapidosDelTitular.classList.add("tarjetaGris")

                                        let contenedorDato = document.createElement("div")
                                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                        let nombreDato = document.createElement("div")
                                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                        nombreDato.textContent = "Nombre del pernoctante"
                                        contenedorDato.appendChild(nombreDato)
                                        let valorDato = document.createElement("div")
                                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                        valorDato.classList.add("negrita")
                                        valorDato.setAttribute("componente", "nombreCompleto")
                                        valorDato.textContent = nombreCompleto
                                        contenedorDato.appendChild(valorDato)
                                        detallesRapidosDelTitular.appendChild(contenedorDato)

                                        contenedorDato = document.createElement("div")
                                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                        nombreDato = document.createElement("div")
                                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                        nombreDato.textContent = "Pasaporte del pernoctante"
                                        contenedorDato.appendChild(nombreDato)
                                        valorDato = document.createElement("div")
                                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                        valorDato.classList.add("negrita")
                                        valorDato.setAttribute("componente", "pasaporte")
                                        valorDato.textContent = pasaporte
                                        contenedorDato.appendChild(valorDato)
                                        detallesRapidosDelTitular.appendChild(contenedorDato)
                                        return detallesRapidosDelTitular
                                    },
                                    seleccionarDia: (dia) => {
                                        const diaSeleccionado = dia.target.getAttribute("dia").padStart(2, "0")
                                        const diaSeleccionadoComoElemento = dia.target;
                                        const instanciaUID_contenedorCheckIn = dia.target.closest("[contenedor=checkin][instanciaUID]")?.getAttribute("instanciaUID")
                                        const calendario = diaSeleccionadoComoElemento.closest("[componente=marcoCalendario]")
                                        const calendarioIO = calendario.getAttribute("calendarioIO")
                                        if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                                            diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                                            if (calendarioIO === "entrada") {
                                                const selectorBotonConfirmar = document
                                                    .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckIn}"]`)
                                                    .querySelector("[componente=botonConfirmarCancelarReserva]")
                                                selectorBotonConfirmar.textContent = "Seleccionar una fecha del checkin"
                                                selectorBotonConfirmar.removeAttribute("style")
                                                diaSeleccionadoComoElemento.style.background = ""
                                                diaSeleccionadoComoElemento.style.color = ""
                                                selectorBotonConfirmar.removeAttribute("fechaCheckIn")
                                            } else if (calendarioIO === "salida") {
                                                document.querySelector("[componente=bloquePropuestaNuevaFechaSalida]")?.remove()
                                                diaSeleccionadoComoElemento.style.background = ""
                                                diaSeleccionadoComoElemento.style.color = ""
                                            }
                                            diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                                            return
                                        }
                                        calendario.querySelectorAll("[estadoDia=seleccionado]").forEach(diasDelCalendario => {

                                            diasDelCalendario.removeAttribute("estadoDia")
                                            diasDelCalendario.style.background = ""
                                            diasDelCalendario.style.color = ""
                                        });
                                        diaSeleccionadoComoElemento.style.background = "green"
                                        diaSeleccionadoComoElemento.style.color = "white"
                                        diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                                        const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                                        const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                                        if (calendarioIO === "entrada") {

                                            const selectorBotonConfirmar = document
                                                .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckIn}"]`)
                                                .querySelector("[componente=botonConfirmarCancelarReserva]")
                                            selectorBotonConfirmar.textContent = `Confirmar checkin para el ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                                            selectorBotonConfirmar.style.pointerEvents = "all"
                                            selectorBotonConfirmar.setAttribute("fechaCheckIn", `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`)
                                            selectorBotonConfirmar.style.fontWeight = "bold"
                                        }
                                    },
                                    confirmar: async (checkIn) => {
                                        const pernoctanteUID = checkIn.pernoctanteUID
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const fechaCheckIn = checkIn.fechaCheckIn
                                        const instanciaUID = checkIn.instanciaUID
                                        const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosPantallaCarga = {
                                            mensaje: "Esperando al servidor...",
                                            instanciaUID: instanciaUID_localProceso,
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                        const estadoReserva = {
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/confirmarFechaCheckIn",
                                            pernoctanteUID: String(pernoctanteUID),
                                            fechaCheckIn: fechaCheckIn,
                                            reservaUID: String(reservaUID)
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(estadoReserva)

                                        const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                        selectorPantallaDeCarga.forEach((pantalla) => {
                                            pantalla.remove()
                                        })
                                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!selectorInstanciaRaiz) {

                                        }
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctante.setAttribute("fechaCheckIn", fechaCheckIn)
                                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkInInfo]`)
                                            selectorCheckInInfo.textContent = "> " + fechaCheckIn
                                        }
                                    },
                                    eliminar: async (data) => {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const pernoctanteUID = data.pernoctanteUID
                                        const instanciaUID = data.instanciaUID
                                        const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosPantallaCarga = {
                                            mensaje: "Esperando al servidor...",
                                            instanciaUID: instanciaUID_localProceso,
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                        const estadoReserva = {
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/eliminarCheckIN",
                                            pernoctanteUID: String(pernoctanteUID),
                                            reservaUID: String(reservaUID)
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(estadoReserva)
                                        const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                        selectorPantallaDeCarga.forEach((pantalla) => {
                                            pantalla.remove()
                                        })
                                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!selectorInstanciaRaiz) {

                                        }
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctante.removeAttribute("fechaCheckIn")
                                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkInInfo]`)
                                            selectorCheckInInfo.textContent = "Pendiente de checkin"
                                            selectorPernoctante.removeAttribute("fechaCheckOut")
                                            const selectorCheckOutInfo = selectorPernoctante.querySelector(`[componente=checkOutInfo]`)
                                            selectorCheckOutInfo.style.display = "none"
                                            selectorCheckOutInfo.textContent = null
                                        }
                                    }
                                },
                                checkout: {
                                    UI: async (pernoctanteUID) => {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada({
                                            alineacion: "arriba"
                                        })
                                        const instanciaUID = ui.getAttribute("instanciaUID")
                                        ui.setAttribute("contenedor", "checkout")
                                        main.appendChild(ui)
                                        const contenedor = ui.querySelector("[componente=contenedor]")

                                        const pernoctanteElemento = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        const nombreCompleto = pernoctanteElemento.querySelector("[componente=nombreCompleto]").textContent
                                        const pasaporte = pernoctanteElemento.querySelector("[componente=pasaporte]").textContent

                                        const tituloCancelarReserva = document.createElement("p")
                                        tituloCancelarReserva.classList.add(
                                            "tituloGris",
                                            "padding14"
                                        )
                                        tituloCancelarReserva.textContent = "Checkout adelantado"
                                        contenedor.appendChild(tituloCancelarReserva)
                                        const datosTitular = {
                                            nombreCompleto: nombreCompleto,
                                            pasaporte: pasaporte
                                        }
                                        const pernoctanteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.detallesDelTitularUI(datosTitular)
                                        contenedor.appendChild(pernoctanteUI)
                                        const instanciaUID_Calendario = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosCalendario = {
                                            tipoFecha: "salida",
                                            almacenamientoCalendarioID: "administracionCalendario",
                                            perfilMes: "calendario_salida_asistido_detallesReserva_checkOut_conPasado",
                                            calendarioIO: "salida",
                                            mensajeInfo: "Selecciona el día de checkout adelantado",
                                            alturaDinamica: "10",
                                            instanciaUID: instanciaUID_Calendario,
                                            metodoSelectorDia: "ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.seleccionarDia"
                                        }
                                        const calendarioIncrustado = casaVitini.ui.componentes.calendario.constructorCalendarioIncrustado(metadatosCalendario)
                                        contenedor.appendChild(calendarioIncrustado)
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1BlancoIzquierda")
                                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                        botonCancelar.textContent = "Seleccionar una fecha del checkout adelantado"
                                        botonCancelar.addEventListener("click", (e) => {
                                            const datosCheckIn = {
                                                fechaCheckOut: e.target.getAttribute("fechaCheckOut"),
                                                pernoctanteUID: pernoctanteUID,
                                                instanciaUID: instanciaUID
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.confirmar(datosCheckIn)
                                        }
                                        )
                                        contenedor.appendChild(botonCancelar)
                                        const infoEliminarReserva = document.createElement("div")
                                        infoEliminarReserva.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                        infoEliminarReserva.style.marginTop = "50px"
                                        infoEliminarReserva.textContent = "También puedes eliminar irreversiblemente una reserva.La eliminación irreversible de una reserva borra la información de la reserva, así como los pagos asociados a la reserva y toda la información relacionada con la reserva.A diferencia de la cancelación, los datos dejarán de estar disponibles."
                                        const selectorCheckOut = document
                                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            .getAttribute("fechaCheckOut")
                                        if (selectorCheckOut) {
                                            contenedor.setAttribute("fechaCheckOut", selectorCheckOut)
                                            const botonEliminar = document.createElement("div")
                                            botonEliminar.classList.add("botonV1BlancoIzquierda")
                                            botonEliminar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                            botonEliminar.textContent = "Eliminar checkout adelantado"
                                            botonEliminar.addEventListener("click", () => {
                                                const eliminarCheckOut = {
                                                    pernoctanteUID: pernoctanteUID,
                                                    instanciaUID: instanciaUID
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.eliminar(eliminarCheckOut)
                                            })
                                            contenedor.appendChild(botonEliminar)
                                        }
                                        const selectorCheckIn = document
                                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            .getAttribute("fechaCheckIn")
                                        if (selectorCheckIn) {
                                            contenedor.setAttribute("fechaCheckIn", selectorCheckIn)
                                        }
                                        const botonCancelarCheckin = document.createElement("div")
                                        botonCancelarCheckin.classList.add("botonV1")
                                        botonCancelarCheckin.setAttribute("componente", "botonConfirmarCancelarReserva")
                                        botonCancelarCheckin.textContent = "Cancelar checkout adelantado y volver a la reserva"
                                        botonCancelarCheckin.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        })
                                        contenedor.appendChild(botonCancelarCheckin)

                                        const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                                        const fechaSalidaArray = fechaSalida.split("-")
                                        const mesSalida = fechaSalidaArray[1]
                                        const anoSalida = fechaSalidaArray[0]
                                        const resolucionCalendario = {
                                            tipo: "personalizado",

                                            mes: Number(mesSalida),
                                            ano: Number(anoSalida),
                                        }

                                        if (selectorCheckOut) {
                                            const fechaCheckOutArray = selectorCheckOut.split("-")
                                            const mesCheckOut = Number(fechaCheckOutArray[1])
                                            const anoCheckOut = Number(fechaCheckOutArray[0])
                                            resolucionCalendario.mes = mesCheckOut
                                            resolucionCalendario.ano = anoCheckOut
                                        }

                                        const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolucionCalendario)
                                        calendarioResuelto.instanciaUID = instanciaUID_Calendario
                                        calendarioResuelto.pernoctanteUID = pernoctanteUID
                                        await casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                                    },
                                    detallesDelTitularUI: (detallesDelTitular) => {
                                        const nombreCompleto = detallesDelTitular.nombreCompleto
                                        const pasaporte = detallesDelTitular.pasaporte
                                        const detallesRapidosDelTitular = document.createElement("div")
                                        detallesRapidosDelTitular.classList.add("tarjetaGris")

                                        let contenedorDato = document.createElement("div")
                                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                        let nombreDato = document.createElement("div")
                                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                        nombreDato.textContent = "Nombre del pernoctante"
                                        contenedorDato.appendChild(nombreDato)
                                        let valorDato = document.createElement("div")
                                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                        valorDato.classList.add("negrita")
                                        valorDato.setAttribute("componente", "nombreCompleto")
                                        valorDato.textContent = nombreCompleto
                                        contenedorDato.appendChild(valorDato)
                                        detallesRapidosDelTitular.appendChild(contenedorDato)

                                        contenedorDato = document.createElement("div")
                                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                        nombreDato = document.createElement("div")
                                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                        nombreDato.textContent = "Pasaporte del pernoctante"
                                        contenedorDato.appendChild(nombreDato)
                                        valorDato = document.createElement("div")
                                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                        valorDato.classList.add("negrita")
                                        valorDato.setAttribute("componente", "pasaporte")
                                        valorDato.textContent = pasaporte
                                        contenedorDato.appendChild(valorDato)
                                        detallesRapidosDelTitular.appendChild(contenedorDato)
                                        return detallesRapidosDelTitular
                                    },
                                    seleccionarDia: (dia) => {
                                        const diaSeleccionado = dia.target.getAttribute("dia").padStart(2, "0")
                                        const diaSeleccionadoComoElemento = dia.target;
                                        const instanciaUID_contenedorCheckOut = dia.target.closest("[contenedor=checkout][instanciaUID]")?.getAttribute("instanciaUID")
                                        const calendario = diaSeleccionadoComoElemento.closest("[componente=marcoCalendario]")
                                        const calendarioIO = calendario.getAttribute("calendarioIO")
                                        if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                                            diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                                            if (calendarioIO === "salida") {
                                                const selectorBotonConfirmar = document
                                                    .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckOut}"]`)
                                                    .querySelector("[componente=botonConfirmarCancelarReserva]")
                                                selectorBotonConfirmar.textContent = "Seleccionar una fecha del checkout adelantado"
                                                selectorBotonConfirmar.removeAttribute("style")
                                                diaSeleccionadoComoElemento.style.background = ""
                                                diaSeleccionadoComoElemento.style.color = ""
                                                selectorBotonConfirmar.removeAttribute("fechaCheckOut")
                                            }
                                            diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                                            return
                                        }
                                        calendario.querySelectorAll("[estadoDia=seleccionado]").forEach(diasDelCalendario => {

                                            diasDelCalendario.removeAttribute("estadoDia")
                                            diasDelCalendario.style.background = ""
                                            diasDelCalendario.style.color = ""
                                        });
                                        diaSeleccionadoComoElemento.style.background = "green"
                                        diaSeleccionadoComoElemento.style.color = "white"
                                        diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                                        const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                                        const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                                        const selectorPropuestaCambioFecha = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]")
                                        if (calendarioIO === "salida") {
                                            const selectorBotonConfirmar = document
                                                .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckOut}"]`)
                                                .querySelector("[componente=botonConfirmarCancelarReserva]")
                                            selectorBotonConfirmar.textContent = `Confirmar checkout adelantador para el ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                                            selectorBotonConfirmar.style.pointerEvents = "all"
                                            selectorBotonConfirmar.setAttribute("fechaCheckOut", `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`)
                                            selectorBotonConfirmar.style.fontWeight = "bold"
                                        }
                                    },
                                    confirmar: async (checkOut) => {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const pernoctanteUID = checkOut.pernoctanteUID
                                        const fechaCheckOut = checkOut.fechaCheckOut
                                        const instanciaUID = checkOut.instanciaUID
                                        const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosPantallaCarga = {
                                            mensaje: "Esperando al servidor...",
                                            instanciaUID: instanciaUID_localProceso,
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                        const estadoReserva = {
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/confirmarFechaCheckOutAdelantado",
                                            reservaUID: String(reservaUID),
                                            pernoctanteUID: String(pernoctanteUID),
                                            fechaCheckOut: fechaCheckOut
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(estadoReserva)
                                        const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                        selectorPantallaDeCarga.forEach((pantalla) => {
                                            pantalla.remove()
                                        })
                                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!selectorInstanciaRaiz) {

                                        }
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctante.setAttribute("fechaCheckOut", fechaCheckOut)
                                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkOutInfo]`)
                                            selectorCheckInInfo.textContent = "< " + fechaCheckOut
                                            selectorCheckInInfo.removeAttribute("style")
                                        }
                                    },
                                    eliminar: async (checkOut) => {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const pernoctanteUID = checkOut.pernoctanteUID
                                        const instanciaUID = checkOut.instanciaUID
                                        const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosPantallaCarga = {
                                            mensaje: "Esperando al servidor...",
                                            instanciaUID: instanciaUID_localProceso,
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                        const estadoReserva = {
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/eliminarCheckOutAdelantado",
                                            pernoctanteUID: String(pernoctanteUID),
                                            reservaUID: String(reservaUID)
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(estadoReserva)
                                        const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                        selectorPantallaDeCarga.forEach((pantalla) => {
                                            pantalla.remove()
                                        })
                                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!selectorInstanciaRaiz) {

                                        }
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctante.removeAttribute("fechacheckout")
                                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkOutInfo]`)
                                            selectorCheckInInfo.style.display = "none"
                                            selectorCheckInInfo.textContent = null
                                        }
                                    }
                                },
                                detallesPernoctante: {
                                    ui: async function (data) {
                                        const pernoctanteUID = data.pernoctanteUID
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        main.appendChild(ui)
                                        const instanciaUID = ui.getAttribute("instanciaUID")
                                        const contenedor = ui.querySelector("[componente=contenedor]")

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Esperando al servidor...."
                                        })
                                        contenedor.appendChild(spinner)

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/detallesDelPernoctantePorPernoctaneUID",
                                            reservaUID,
                                            pernoctanteUID: String(pernoctanteUID)
                                        })

                                        const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        contenedor.innerHTML = null
                                        contenedor.style.justifyContent = "flex - start";

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {

                                            const data = respuestaServidor.ok

                                            const datosCliente = data.cliente
                                            const datosPernoctante = data.pernoctante

                                            const pernoctanteUID = datosPernoctante.componenteUID
                                            const habitacionUID = datosPernoctante.habitacionUID

                                            const nombreCompleto = datosCliente.nombreCompleto
                                            const pasaporte = datosCliente.pasaporte
                                            const tipoPernoctante = datosCliente.tipoPernoctante
                                            const fechaCheckIn = datosPernoctante.fechaCheckIn
                                            const fechaCheckOutAdelantado = datosPernoctante.fechaCheckOutAdelantado


                                            if (tipoPernoctante === "cliente") {
                                                const clienteUID = datosCliente.clienteUID
                                                const mail = datosCliente.mail
                                                const telefono = datosCliente.telefono

                                                this.componentes.respuestaUnificadaUI({
                                                    clienteUID,
                                                    nombreCompleto,
                                                    pernoctanteUID,
                                                    telefono,
                                                    pasaporte,
                                                    mail,
                                                    instanciaUID,
                                                    fechaCheckIn,
                                                    fechaCheckOutAdelantado,
                                                    reservaUID,
                                                    habitacionUID
                                                })
                                            }
                                            if (tipoPernoctante === "clientePool") {
                                                const metadatosTitualPool = {
                                                    nombreTitular: detallesTitular.nombreTitular,
                                                    pasaporteTitular: detallesTitular.pasaporteTitular,
                                                    mailTitular: detallesTitular.mailTitular,
                                                    telefonoTitular: detallesTitular.telefonoTitular,
                                                    instanciaUID: instanciaUID
                                                }
                                                this.componentes.titularPool.UI(metadatosTitualPool)
                                            }

                                        }
                                    },
                                    componentes: {
                                        desasociarClienteComoTitular: async (metadatos) => {
                                            const instanciaUID = metadatos.instanciaUID
                                            const reservaUID = metadatos.reservaUID
                                            const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                            const opcionesPantallaDeCarga = {
                                                instanciaUID: instanciaUIDPantallaDeCarga,
                                                mensaje: "Desasociando cliente como titular de la reserva"
                                            }
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                            const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                            const metadatosPantallaDeCarga = {
                                                zona: "administracion/reservas/gestionTitular/desasociarClienteComoTitular",
                                                reservaUID: reservaUID
                                            }
                                            const respuestaServidor = await casaVitini.shell.servidor(metadatosPantallaDeCarga)
                                            if (respuestaServidor?.error) {
                                                pantallaDeCargaRenderizada?.remove()
                                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                pantallaDeCargaRenderizada?.remove()
                                                const selectorNombreTitularRenderizado = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                                const selectorNombreTitular = document.querySelector(`[dataReserva=nombreTitular]`)
                                                if (selectorNombreTitularRenderizado && selectorNombreTitular) {
                                                    selectorNombreTitular.textContent = "(Ningún titular asignado)"
                                                    const selectorBloqueTitular = document.querySelector(`[contenedor=titular]`)
                                                    selectorBloqueTitular.removeAttribute("tipoTitular")
                                                    selectorBloqueTitular.removeAttribute("titularUID")
                                                }
                                                const selectorDestinoRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"] [espacio=gestionTitular]`)
                                                if (selectorDestinoRenderizado) {


                                                }
                                            }
                                        },
                                        detallesDelTitularUI: (detallesDelTitular) => {

                                            const clienteUID = detallesDelTitular.clienteUID
                                            const nombreTitular = detallesDelTitular.nombreTitular
                                            const pasaporteTitular = detallesDelTitular.pasaporte
                                            const tipoTitular = detallesDelTitular.tipoTitular
                                            const mailTitular = detallesDelTitular.mail ? detallesDelTitular.mail : "(Sin mail)"
                                            const telefonoTitular = detallesDelTitular.telefono ? detallesDelTitular.telefono : "(Sin teléfono)"
                                            const detallesRapidosDelTitular = document.createElement("div")
                                            detallesRapidosDelTitular.classList.add("tarjetaGris")

                                            let contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            let nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Nombre completo del titular"
                                            contenedorDato.appendChild(nombreDato)
                                            let valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = nombreTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Pasaporte"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = pasaporteTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Teléfono"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = telefonoTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "e - Mail"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = mailTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)
                                            return detallesRapidosDelTitular
                                        },
                                        detallesDelTitularPoolUI: (detallesDelTitular) => {
                                            const nombreTitular = detallesDelTitular.nombreTitular
                                            const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                            const tipoTitular = "Titular pool"
                                            const mailTitular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                            const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin teléfono)"
                                            const detallesRapidosDelTitular = document.createElement("div")
                                            detallesRapidosDelTitular.classList.add("tarjetaGris")

                                            let contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            let nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Nombre completo del titular"
                                            contenedorDato.appendChild(nombreDato)
                                            let valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = nombreTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Pasaporte"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = pasaporteTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Teléfono"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = telefonoTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "e - Mail"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = mailTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)
                                            return detallesRapidosDelTitular
                                        },
                                        botonCerrarFormularioNuevoCliente: () => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Cerrar gestión del pernoctante"
                                            boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                            boton
                                        },
                                        botonCerrar: () => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1")
                                            boton.innerHTML = "Cerrar gestión del pernoctante"
                                            boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                            return boton
                                        },
                                        botonIrALaFichaDelClinete: (clienteUID) => {
                                            const boton = document.createElement("a")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Ir a la ficha del cliente"
                                            boton.setAttribute("href", "/administracion/clientes/cliente:" + clienteUID)
                                            boton.setAttribute("vista", "/administracion/clientes/cliente:" + clienteUID)
                                            boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                            return boton
                                        },
                                        botonCambiarDeHabitacion: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.textContent = "Cambiar de habitación"
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.addEventListener("click", () => {
                                                document.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.ocultarSelectoresCambioHabitacion)
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.mostrasSelectorCambioPernoctanteHabitacion(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonAsignarAHabitacion: (pernoctanteUID) => {

                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.textContent = "Asignar a una habitación"
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.addEventListener("click", () => {
                                                document.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.ocultarSelectoresCambioHabitacion)
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.mostrasSelectorCambioPernoctanteHabitacion(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonEliminarPernoctanteDeLaReserva: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.textContent = "Eliminar pernoctante de la reserva"
                                            boton.addEventListener("click", () => {
                                                const datosEliminacion = {
                                                    tipoEliminacion: "reserva",
                                                    pernoctanteUID: pernoctanteUID
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.propuestaEliminarPernoctanteUI(datosEliminacion)
                                            })
                                            return boton
                                        },
                                        botonModificarCheckIn: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add(
                                                "botonV1BlancoIzquierda",
                                                "negrita"
                                            )
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.setAttribute("tipoEliminacion", "habitacion")
                                            boton.textContent = "Modificar checkin"
                                            boton.addEventListener("click", () => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.UI(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonCheckOutAdelantado: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add(
                                                "botonV1BlancoIzquierda",
                                                "negrita"
                                            )
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.setAttribute("tipoEliminacion", "habitacion")
                                            boton.textContent = "Checkout Adelantado"
                                            boton.addEventListener("click", () => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.UI(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonCheckIn: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add(
                                                "botonV1BlancoIzquierda",
                                                "negrita"
                                            )
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.textContent = ">>> Realizar checkin"
                                            boton.addEventListener("click", () => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.UI(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonEliminarPernoctaneDeLaHabitacion: (pernoctanteUID) => {

                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.textContent = "Eliminar pernoctante solo de la habitación y mantenerlo en la reserva"
                                            boton.addEventListener("click", () => {
                                                const datosEliminacion = {
                                                    tipoEliminacion: "habitacion",
                                                    pernoctanteUID: pernoctanteUID
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.propuestaEliminarPernoctanteUI(datosEliminacion)
                                            })
                                            return boton
                                        },
                                        titulo: (titulo) => {
                                            const tituloUI = document.createElement("p")
                                            tituloUI.classList.add(
                                                "tituloGris",
                                                "padding14"
                                            )
                                            tituloUI.textContent = titulo
                                            return tituloUI
                                        },
                                        infoUI: (info) => {
                                            const infoUI = document.createElement("p")
                                            infoUI.classList.add("padding14")
                                            infoUI.textContent = info
                                            return infoUI
                                        },
                                        botonCerrarCambiarTitular: (instanciaUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Cerrar formulario para cambiar de titular"
                                            boton.setAttribute("boton", "cerrarCambiarTitular")
                                            boton.addEventListener("click", () => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.componentes.cancelarCambiarTitular(instanciaUID)
                                            })
                                            return boton
                                        },
                                        cambiarTitular: (instanciaUID) => {
                                            const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                                            const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                                            selectorBotonCambiarTitular.style.display = "none"
                                            selectorBotonDesasociar.style.display = "none"
                                            const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                                            selectorNuevoClienteUI.removeAttribute("style")
                                            const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                                            selectorbotonCerrarCambiarTitular.removeAttribute("style")
                                        },
                                        respuestaUnificadaUI: function (data) {
                                            const clienteUID = data.clienteUID
                                            const nombreCompleto = data.nombreCompleto
                                            const pasaporte = data.pasaporte
                                            const mail = data.mail
                                            const pernoctanteUID = data.pernoctanteUID
                                            const telefono = data.telefono
                                            const instanciaUID = data.instanciaUID
                                            const fechaCheckIn = data.fechaCheckIn
                                            const fechaCheckOutAdelantado = data.fechaCheckOutAdelantado
                                            const habitacionUID = data.habitacionUID

                                            const ui = document.querySelector(`[instanciaUID="${instanciaUID}"]`).querySelector("[componente=contenedor]")
                                            if (ui) {

                                                const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                                const apartamentoUI = selectorPernoctante.closest("[apartamentoUI]")?.getAttribute("apartamentoUI") || "Pernoctante sin alojamiento asignado"
                                                const apartamentoIDV = selectorPernoctante.closest("[apartamentoIDV]")?.getAttribute("apartamentoIDV") || ""
                                                const habitacionUI = selectorPernoctante.closest("[habitacionIDV]")?.querySelector("[habitacionUI]")?.getAttribute("habitacionUI") || "Pernoctante sin habbitación asignada"
                                                const habitacionIDV = selectorPernoctante.closest("[habitacionIDV]")?.getAttribute("habitacionIDV") || ""


                                                const titulo = "Detalles del pernoctante"
                                                const tituloUI = this.titulo(titulo)
                                                ui.appendChild(tituloUI)
                                                const info = "Vista rápida de los detalles del pernoctante"
                                                const infoUI = this.infoUI(info)



                                                const banner = document.createElement("div")
                                                banner.classList.add(
                                                    "flexVertical",
                                                    "borderRadius12",
                                                    "backgroundGrey1",
                                                    "padding14",
                                                    "gap6"
                                                )
                                                ui.appendChild(banner)


                                                const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.componentesUI.
                                                    bannerReservaMenus()
                                                banner.appendChild(bannerReserva)

                                                const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                                    alojamiento.
                                                    componentesUI.
                                                    bannerAlojamiento({
                                                        apartamentoUI: apartamentoUI,
                                                        apartamentoIDV: apartamentoIDV

                                                    })
                                                banner.appendChild(bannerAlojamiento)

                                                const bannerHabitacion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                                    alojamiento.
                                                    componentesUI.
                                                    bannerHabitacion({
                                                        habitacionUI: habitacionUI,
                                                        habitacionIDV: habitacionIDV

                                                    })
                                                banner.appendChild(bannerHabitacion)

                                                const detallesDelTitularUI = this.detallesDelTitularUI({
                                                    clienteUID: clienteUID,
                                                    nombreTitular: nombreCompleto,
                                                    pasaporte: pasaporte,
                                                    tipoTitular: "titularCliente",
                                                    mail: mail,
                                                    telefono: telefono,
                                                })
                                                ui.appendChild(detallesDelTitularUI)


                                                const infoCheck = document.createElement("p")
                                                infoCheck.classList.add(
                                                    "padding14"
                                                )
                                                infoCheck.textContent = "Operaciones de CheckIn CheckOut"
                                                ui.appendChild(infoCheck)

                                                if (!fechaCheckIn) {
                                                    const botonCheckIn = this.botonCheckIn(pernoctanteUID)
                                                    ui.appendChild(botonCheckIn)
                                                } else {
                                                    const botonModificarCheckIn = this.botonModificarCheckIn(pernoctanteUID)
                                                    ui.appendChild(botonModificarCheckIn)
                                                    const botonCheckOutAdelantado = this.botonCheckOutAdelantado(pernoctanteUID)
                                                    ui.appendChild(botonCheckOutAdelantado)
                                                }

                                                const infoGlobalCambioHab = document.createElement("p")
                                                infoGlobalCambioHab.classList.add(
                                                    "padding14"
                                                )
                                                infoGlobalCambioHab.textContent = "Informacion y cambio de habitación"
                                                ui.appendChild(infoGlobalCambioHab)

                                                const botonIrALaFichaDelClinete = this.botonIrALaFichaDelClinete(clienteUID)
                                                ui.appendChild(botonIrALaFichaDelClinete)


                                                if (habitacionUID) {
                                                    const botonCambiarDeHabitacion = this.botonCambiarDeHabitacion(pernoctanteUID)
                                                    ui.appendChild(botonCambiarDeHabitacion)

                                                } else {
                                                    const botonAsignarAHabitacion = this.botonAsignarAHabitacion(pernoctanteUID)
                                                    ui.appendChild(botonAsignarAHabitacion)

                                                }

                                                const infoElim = document.createElement("p")
                                                infoElim.classList.add(
                                                    "padding14"
                                                )
                                                infoElim.textContent = "Operaciones de eliminación del pernoctante"
                                                ui.appendChild(infoElim)

                                                const botonEliminarPernoctanteDeLaReserva = this.botonEliminarPernoctanteDeLaReserva(pernoctanteUID)
                                                ui.appendChild(botonEliminarPernoctanteDeLaReserva)

                                                if (habitacionUID) {
                                                    const botonEliminarPernoctaneDeLaHabitacion = this.botonEliminarPernoctaneDeLaHabitacion(pernoctanteUID)
                                                    ui.appendChild(botonEliminarPernoctaneDeLaHabitacion)
                                                }

                                                const botonCerrar = this.botonCerrar()
                                                ui.appendChild(botonCerrar)
                                            }
                                        },
                                        cancelarCambiarTitular: (instanciaUID) => {
                                            const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                                            const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                                            selectorBotonCambiarTitular.removeAttribute("style")
                                            selectorBotonDesasociar.removeAttribute("style")
                                            const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                                            selectorNuevoClienteUI.style.display = "none"
                                            const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                                            selectorbotonCerrarCambiarTitular.style.display = "none"
                                        },
                                    },
                                },
                                cambiarDeHabitacion: {
                                    mostrasSelectorCambioPernoctanteHabitacion: (pernoctanteUID) => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        const habitacionActual = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)?.closest("[habitacionUID]")?.getAttribute("habitacionUID")



                                        const selectorHabitaciones = document.querySelectorAll("[habitacionIDV]")
                                        const selectorBotonAsignarAHabitacionRenderizado = document.querySelectorAll("[componente=botonMoverCliente]")

                                        selectorBotonAsignarAHabitacionRenderizado.forEach(botonRenderizado => {
                                            botonRenderizado.remove()
                                        });


                                        selectorHabitaciones.forEach((habitacion) => {
                                            const habitacionUID = habitacion.getAttribute("habitacionUID")
                                            if (habitacionUID !== habitacionActual) {
                                                const bloqueSelectorCambio = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.selectorCambioHabitacionUI(pernoctanteUID)
                                                habitacion.appendChild(bloqueSelectorCambio)
                                            }
                                        })
                                    },
                                    ocultarSelectoresCambioHabitacion: (e) => {
                                        const componente = e.target?.getAttribute("componente")
                                        if (componente === "botonOpcionClientePool") {
                                            return
                                        }
                                        const selectorBotonMoverCliente = document.querySelectorAll("[componente=botonMoverCliente]")
                                        selectorBotonMoverCliente.forEach(selectorBotonMoverCliente => {
                                            selectorBotonMoverCliente.remove()
                                        })
                                        document.removeEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.ocultarSelectoresCambioHabitacion)
                                    },
                                    cambiarPernoctanteHabitacion: async (pernoctanteUID, e) => {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const habitacionUID = e.target.closest("[habitacionUID]").getAttribute("habitacionUID")
                                        const pernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        const clienteUID = pernoctante.getAttribute("clienteUID")
                                        const tipoCliente = pernoctante.getAttribute("tipoCliente")
                                        const nombrePernoctante = pernoctante.querySelector("[componente=nombreCompleto]").textContent
                                        const pasaportePernoctante = pernoctante.querySelector(`[componente=pasaporte]`).textContent
                                        const fechaCheckIn = pernoctante.getAttribute("fechaCheckIn")
                                        const fechaCheckOutAdelantado = pernoctante.getAttribute("fechaCheckOut")
                                        document.querySelectorAll("[componente=botonMoverCliente]").forEach(botonMover => {
                                            botonMover.remove()
                                        })
                                        document.querySelectorAll("[componente=opcionesCliente]").forEach(opcionesCliente => {
                                            opcionesCliente.remove()
                                        })
                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/alojamiento/cambiarPernoctanteDeHabitacion",
                                            reservaUID: String(reservaUID),
                                            habitacionDestinoUID: String(habitacionUID),
                                            pernoctanteUID: String(pernoctanteUID)
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                                .remove()
                                            const datoPernoctante = {
                                                tipoPernoctante: tipoCliente,
                                                clienteUID: clienteUID,
                                                pernoctanteUID: pernoctanteUID,
                                                estadoAlojamiento: "alojado",
                                                fechaCheckIn: fechaCheckIn,
                                                fechaCheckOutAdelantado: fechaCheckOutAdelantado,
                                            }
                                            const bloqueClienteMover = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(datoPernoctante)
                                            const datosNombre = {
                                                nombreCompleto: nombrePernoctante
                                            }
                                            const pernoctanteNombreUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(datosNombre)
                                            bloqueClienteMover.appendChild(pernoctanteNombreUI)
                                            const datosPasaporte = {
                                                pasaporte: pasaportePernoctante
                                            }
                                            const pernoctantePasaporteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(datosPasaporte)
                                            bloqueClienteMover.appendChild(pernoctantePasaporteUI)
                                            const selectorHabitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                            selectorHabitacionDestino?.appendChild(bloqueClienteMover)
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                        }
                                    },
                                },
                                eliminarPernoctante: async (metadatos) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const pernoctanteUID = metadatos.pernoctanteUID
                                    const pernoctante = document
                                        .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                    const tipoPernoctante = pernoctante.getAttribute("tipoCliente")
                                    const tipoEliminacion = metadatos.tipoEliminacion
                                    const clienteUID = pernoctante.getAttribute("clienteUID")
                                    const nombreCompleto = pernoctante.querySelector("[componente=nombreCompleto]").textContent
                                    const pasaporte = pernoctante.querySelector("[componente=pasaporte]").innerHTML
                                    const fechaCheckIn = pernoctante.getAttribute("fechaCheckIn")
                                    const fechaCheckOut = pernoctante.getAttribute("fechaCheckOut")
                                    const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/pernoctantes/eliminarPernoctanteReserva",
                                        reservaUID: String(reservaUID),
                                        pernoctanteUID: String(pernoctanteUID),
                                        tipoEliminacion: tipoEliminacion
                                    }

                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const metadatosPantallaCarga = {
                                        mensaje: "Esperando al servidor...",
                                        instanciaUID: instanciaUIDPantallaDeCarga,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUIDPantallaDeCarga}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        if (tipoEliminacion === "habitacion") {
                                            const metadatosPernoctante = {
                                                tipoPernoctante: "cliente",
                                                clienteUID: clienteUID,
                                                pernoctanteUID: pernoctanteUID,
                                                tipoPernoctante: tipoPernoctante,
                                                estadoAlojamiento: "noAlojado",
                                                fechaCheckIn: fechaCheckIn,
                                                fechaCheckOutAdelantado: fechaCheckOut
                                            }
                                            const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(metadatosPernoctante)
                                            const metadatosNombre = {
                                                nombreCompleto: nombreCompleto,
                                                clienteUID: clienteUID,
                                            }
                                            const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(metadatosNombre)
                                            bloquePernoctantes.appendChild(nombrePernoctante)
                                            const metadatosPasaporte = {
                                                pasaporte: pasaporte,
                                                clienteUID: clienteUID
                                            }
                                            const selectorPernoctanteRenderizado = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctanteRenderizado.remove()
                                            const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(metadatosPasaporte)
                                            bloquePernoctantes.appendChild(identificacionPernoctante)
                                            const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                            zonaDestino.appendChild(bloquePernoctantes)
                                            zonaDestino.classList.remove("elementoOcultoInicialmente")
                                        }
                                        if (tipoEliminacion === "reserva") {
                                            const selectorPernoctanteRenderizado = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctanteRenderizado.remove()
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                    }
                                },
                                controlEspacioPernoctantesSinAlojamiento: () => {
                                    const selectorMarcoPernoctantesSinAlojamiento = document.querySelector("[componente=espacioPernoctantesSinAlojamiento]")
                                    const selectorPernoctantes = selectorMarcoPernoctantesSinAlojamiento.querySelectorAll("[contenedor=pernoctante]")
                                    if (selectorPernoctantes.length > 0) {
                                        selectorMarcoPernoctantesSinAlojamiento.classList.remove("elementoOcultoInicialmente")
                                    } else {
                                        selectorMarcoPernoctantesSinAlojamiento.classList.add("elementoOcultoInicialmente")
                                    }
                                },
                                gestionPernoctante: {
                                    formularioNuevoPernoctanteEnHabitacionUI: async function (data) {
                                        const habitacionIDV = data.habitacionIDV
                                        const apartamentoIDV = data.apartamentoIDV
                                        const habitacionUID = data.habitacionUID
                                        const habitacionUI = data.habitacionUI
                                        const apartamentoUI = data.apartamentoUI
                                        const main = document.querySelector("main")
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")


                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        ui.setAttribute("operacion", "crearCliente")
                                        ui.setAttribute("habitacionUID", habitacionUID)

                                        const instanciaUID_ui = ui.getAttribute("instanciaUID")

                                        main.appendChild(ui)
                                        const contenedor = ui.querySelector("[componente=contenedor]")


                                        const titulo = `Añadir pernoctante en la ${habitacionUI} del ${apartamentoUI}`
                                        const tituloUI = this.componentes.titulo(titulo)
                                        contenedor.appendChild(tituloUI)


                                        const banner = document.createElement("div")
                                        banner.classList.add(
                                            "flexVertical",
                                            "borderRadius12",
                                            "backgroundGrey1",
                                            "padding14",
                                            "gap6"
                                        )
                                        contenedor.appendChild(banner)


                                        const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerReservaMenus()
                                        banner.appendChild(bannerReserva)

                                        const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerAlojamiento({
                                                apartamentoUI: apartamentoUI,
                                                apartamentoIDV: apartamentoIDV

                                            })
                                        banner.appendChild(bannerAlojamiento)

                                        const bannerHabitacion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerHabitacion({
                                                habitacionUI: habitacionUI,
                                                habitacionIDV: habitacionIDV

                                            })
                                        banner.appendChild(bannerHabitacion)

                                        const info = "Añade un pernoctante en la habitación, en el buscador rápido puedes buscar si ya existe el cliente a añadir como pernoctante o puedes crear uno directamente aquí y añadirlo a la habitación"
                                        const infoUI = this.componentes.infoUI(info)
                                        contenedor.appendChild(infoUI)

                                        const buscadorUI = this.componentes.buscadorRapido.UI({
                                            reservaUID: reservaUID,
                                            habitacionUID: habitacionUID,
                                            metodoFinal: "ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.componentes.buscadorRapido.anadirPernoctanteTransaccionDesdeBuscadorRapido"
                                        })

                                        contenedor.appendChild(buscadorUI)
                                        const nuevoClienteUI = this.componentes.nuevoClienteOTitular.UI({
                                            metodoFinal: "ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.componentes.guardarNuevoClienteYAnadirloComoPernoctnante",
                                            habitacionUID: habitacionUID,
                                            reservaUID: reservaUID,
                                            tituloBoton: "Crear nuevo cliente e insertarlo en la habitación",
                                            tituloUI: "Crear nuevo cliente e insertarlo como pernoctante de la habiación"
                                        })

                                        contenedor.appendChild(nuevoClienteUI)
                                        const botonCerrar = this.componentes.botonCerrar()
                                        contenedor.appendChild(botonCerrar)

                                    },
                                    componentes: {
                                        buscadorRapido: {
                                            UI: function (data) {
                                                const metodoFinal = data.metodoFinal
                                                const reservaUID = data.reservaUID
                                                const habitacionUID = data?.habitacionUID
                                                const contenedor = document.createElement("div")
                                                contenedor.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "borderRadius20",
                                                    "borderGrey1",
                                                    "gap6"
                                                )
                                                contenedor.setAttribute("contenedor", "buscador")
                                                const info = document.createElement("div")
                                                info.classList.add("adminsitracion_reservas_detallesReservas_gestionTitular_infoBuscador")

                                                const campoBuscador = document.createElement("input")
                                                campoBuscador.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                campoBuscador.placeholder = "Buscar un cliente existente"
                                                campoBuscador.setAttribute("campo", "buscador")
                                                campoBuscador.addEventListener("input", (e) => {
                                                    this.listaResultadosUI({
                                                        e,
                                                        metodoFinal,
                                                        reservaUID,
                                                        habitacionUID
                                                    })
                                                })
                                                contenedor.appendChild(campoBuscador)
                                                return contenedor
                                            },
                                            listaResultadosUI: async function (data) {
                                                const evento = data.e
                                                const elemento = evento.target
                                                const terminoBusqueda = elemento.value
                                                const metodoFinal = data.metodoFinal
                                                const reservaUID = data.reservaUID
                                                const habitacionUID = data?.habitacionUID

                                                const instanciaUIDBuscador = casaVitini.utilidades.codigoFechaInstancia()
                                                const buscadorUI = elemento.closest(`[contenedor=buscador]`)
                                                const instanciaUID = elemento.closest(`[componente=advertenciaInmersiva]`).getAttribute("instanciaUID")

                                                const campoVacio = elemento.value.length
                                                if (campoVacio === 0) {
                                                    clearTimeout(casaVitini.componentes.temporizador);
                                                    elemento.closest(`[contenedor=buscador]`).querySelector(`[instanciaUIDBuscador]`)?.remove()
                                                    return

                                                }
                                                const listaResultados_r = document.querySelector("[componente=buscadorRapidoCliente]")

                                                if (!listaResultados_r) {
                                                    const listaResultados = document.createElement("div")
                                                    listaResultados.setAttribute("componente", "buscadorRapidoCliente")
                                                    listaResultados.style.alignItems = "stretch"
                                                    listaResultados.classList.add(
                                                        "flexVertical",
                                                        "gap6",
                                                        "borderRadius14"
                                                    )

                                                    buscadorUI.appendChild(listaResultados)
                                                }
                                                const listaResultados_s = buscadorUI.querySelector("[componente=buscadorRapidoCliente]")
                                                listaResultados_s.setAttribute("instanciaUIDBuscador", instanciaUIDBuscador)

                                                const conntenedorInfo_r = buscadorUI.querySelector("[componente=info]")
                                                if (!conntenedorInfo_r) {
                                                    listaResultados_s.innerHTML = null
                                                    const conntenedorInfo = document.createElement("div")
                                                    conntenedorInfo.setAttribute("componente", "info")
                                                    conntenedorInfo.classList.add("efectoAparicion", "sobreControlAnimacionGlobal", "padding10")
                                                    listaResultados_s.appendChild(conntenedorInfo)

                                                    const info = document.createElement("div")
                                                    info.setAttribute("data", "info")
                                                    conntenedorInfo.appendChild(info)
                                                }
                                                const conntenedorInfo_s = buscadorUI.querySelector("[componente=info] [data=info]")
                                                conntenedorInfo_s.textContent = "Buscando..."

                                                clearTimeout(casaVitini.componentes.temporizador);
                                                casaVitini.componentes.temporizador = setTimeout(() => {
                                                    this.transactor({
                                                        terminoBusqueda: terminoBusqueda,
                                                        instanciaUIDBuscador: instanciaUIDBuscador,
                                                        instanciaUID,
                                                        metodoFinal,
                                                        reservaUID,
                                                        habitacionUID

                                                    })
                                                }, 1500);
                                            },
                                            transactor: async function (data) {
                                                const terminoBusqueda = data.terminoBusqueda
                                                const instanciaUIDBuscador = data.instanciaUIDBuscador
                                                const metodoFinal = data.metodoFinal
                                                const reservaUID = data.reservaUID
                                                const instanciaUID = data.instanciaUID
                                                const habitacionUID = data.habitacionUID

                                                const transaccion = {
                                                    zona: "administracion/clientes/buscar",
                                                    tipoBusqueda: "rapido",
                                                    buscar: terminoBusqueda
                                                }
                                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                                const listaBuscadorRenderizada = document.querySelector(`[instanciaUIDBuscador="${instanciaUIDBuscador}"]`)
                                                if (!listaBuscadorRenderizada) {
                                                    return
                                                }
                                                if (respuestaServidor?.error) {
                                                    return listaBuscadorRenderizada.querySelector("[data=info]").innerHTML = respuestaServidor?.error
                                                } else if (respuestaServidor?.tipo === "ROL") {
                                                    return
                                                }

                                                const resultadosClientes = respuestaServidor?.clientes
                                                if (resultadosClientes.length === 0) {
                                                    return listaBuscadorRenderizada.querySelector("[data=info]").innerHTML = "Nada encontrado"
                                                }
                                                listaBuscadorRenderizada.innerHTML = null
                                                resultadosClientes.forEach((clienteEncontrado) => {
                                                    const clienteUID = clienteEncontrado.clienteUID
                                                    const nombre = clienteEncontrado.nombre
                                                    const primerApellido = clienteEncontrado.primerApellido
                                                    const segundoApellido = clienteEncontrado.segundoApellido
                                                    const pasaporte = clienteEncontrado.pasaporte
                                                    const bloqueCliente = document.createElement("div")
                                                    bloqueCliente.classList.add(
                                                        "flexVertical",
                                                        "comportamientoBoton",
                                                        "padding6",
                                                        "borderRadius14"
                                                    )
                                                    bloqueCliente.setAttribute("componente", "elementoResultadosBuscadorRapido")

                                                    bloqueCliente.addEventListener("click", (e) => {
                                                        return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                                            ruta: metodoFinal,
                                                            args: {
                                                                clienteUID,
                                                                reservaUID,
                                                                instanciaUID,
                                                                habitacionUID
                                                            }
                                                        })
                                                    })
                                                    const filaNombre = document.createElement("p")
                                                    filaNombre.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaNombre")
                                                    filaNombre.textContent = `${nombre} ${primerApellido} ${segundoApellido}`
                                                    filaNombre.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                                    bloqueCliente.appendChild(filaNombre)
                                                    const filaPasaporte = document.createElement("p")
                                                    filaPasaporte.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaPasaporte")
                                                    filaPasaporte.textContent = pasaporte
                                                    filaPasaporte.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                                    bloqueCliente.appendChild(filaPasaporte)
                                                    listaBuscadorRenderizada.appendChild(bloqueCliente)
                                                })
                                            },

                                            anadirPernoctanteTransaccionDesdeBuscadorRapido: async (data) => {
                                                const reservaUID = data.reservaUID
                                                const clienteUID = data.clienteUID
                                                const habitacionUID = data.habitacionUID
                                                const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                                const instanciaUID = data.instanciaUID


                                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                    mensaje: "Añadiento al cliente como pernoctante de la habitacion...",
                                                    instanciaUID: instanciaUIDPantallaDeCarga,
                                                })

                                                const respuestaServidor = await casaVitini.shell.servidor({
                                                    zona: "administracion/reservas/detallesReserva/alojamiento/anadirPernoctanteHabitacion",
                                                    reservaUID,
                                                    clienteUID: String(clienteUID),
                                                    habitacionUID
                                                })

                                                const selectorPantallaDeCarga = document.querySelector(`[instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                                selectorPantallaDeCarga?.remove()

                                                const selectorBloqueAnadirPernoctante = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                                if (!selectorBloqueAnadirPernoctante) { return }
                                                if (respuestaServidor?.error) {
                                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                                }
                                                if (respuestaServidor?.ok) {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                                    const pernoctante = respuestaServidor.pernoctante
                                                    const cliente = respuestaServidor.cliente

                                                    const clienteUID = cliente.clienteUID
                                                    const pernoctanteUID = pernoctante.componenteUID
                                                    const nombre = cliente.nombre
                                                    const primerApellido = cliente.primerApellido
                                                    const segundoApellido = cliente.segundoApellido
                                                    const pasaporte = cliente.pasaporte

                                                    const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI({
                                                        tipoPernoctante: "cliente",
                                                        clienteUID: clienteUID,
                                                        pernoctanteUID: pernoctanteUID,
                                                        estadoAlojamiento: "alojado"
                                                    })

                                                    const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI({
                                                        nombreCompleto: `${nombre} ${primerApellido} ${segundoApellido}`,
                                                        clienteUID: clienteUID,
                                                    })
                                                    bloquePernoctantes.appendChild(nombrePernoctante)

                                                    const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI({
                                                        pasaporte: pasaporte,
                                                        clienteUID: clienteUID
                                                    })
                                                    bloquePernoctantes.appendChild(identificacionPernoctante)



                                                    const habitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                                    habitacionDestino.appendChild(bloquePernoctantes)
                                                }
                                            },
                                        },
                                        nuevoClienteOTitular: {
                                            UI: function (data) {

                                                const metodoFinal = data.metodoFinal
                                                const tituloUI = data.tituloUI
                                                const tituloBoton = data.tituloBoton
                                                const reservaUID = data.reservaUID
                                                const habitacionUID = data?.habitacionUID

                                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                                const nuevoClienteUI = document.createElement("details")

                                                nuevoClienteUI.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "borderRadius20",

                                                )
                                                nuevoClienteUI.setAttribute("instanciaUID", instanciaUID)
                                                nuevoClienteUI.setAttribute("formulario", "nuevoCliente")

                                                const info = document.createElement("summary")
                                                info.classList.add(
                                                    "negrita",
                                                    "textoCentrado",
                                                    "padding14",
                                                    "borderRadius14"

                                                )
                                                info.textContent = tituloUI
                                                nuevoClienteUI.appendChild(info)

                                                const form = document.createElement("div")
                                                form.classList.add(
                                                    "flexVertical",
                                                    "gap10"
                                                )
                                                nuevoClienteUI.appendChild(form)


                                                const nombreUI = document.createElement("div")
                                                nombreUI.classList.add(
                                                    "flexVertical",
                                                    "paddingLateral14"
                                                )
                                                nombreUI.textContent = "Nombre (Obligatorio)"
                                                form.appendChild(nombreUI)

                                                const campoNombre = document.createElement("input")
                                                campoNombre.classList.add("botonV1BlancoIzquierda_campo")
                                                campoNombre.setAttribute("campo", "nombre")
                                                campoNombre.setAttribute("formulario", "AnadirPernoctante")
                                                campoNombre.placeholder = "Nombre (obligatiorio)"
                                                form.appendChild(campoNombre)


                                                const primerApellidoUI = document.createElement("div")
                                                primerApellidoUI.classList.add(
                                                    "flexVertical",
                                                    "paddingLateral14"
                                                )
                                                primerApellidoUI.textContent = "Primer apellido"
                                                form.appendChild(primerApellidoUI)

                                                const primerApellido = document.createElement("input")
                                                primerApellido.classList.add("botonV1BlancoIzquierda_campo")
                                                primerApellido.setAttribute("campo", "primerApellido")
                                                primerApellido.setAttribute("formulario", "AnadirPernoctante")
                                                primerApellido.placeholder = "Primer apellido"
                                                form.appendChild(primerApellido)

                                                const segundoApellidoUI = document.createElement("div")
                                                segundoApellidoUI.classList.add(
                                                    "flexVertical",
                                                    "paddingLateral14"
                                                )
                                                segundoApellidoUI.textContent = "Segundo apellido"
                                                form.appendChild(segundoApellidoUI)

                                                const segundoApellido = document.createElement("input")
                                                segundoApellido.classList.add("botonV1BlancoIzquierda_campo")
                                                segundoApellido.setAttribute("campo", "segundoApellido")
                                                segundoApellido.setAttribute("formulario", "AnadirPernoctante")
                                                segundoApellido.placeholder = "Segundo apellido"
                                                form.appendChild(segundoApellido)


                                                const pasaporteUI = document.createElement("div")
                                                pasaporteUI.classList.add(
                                                    "flexVertical",
                                                    "paddingLateral14"
                                                )
                                                pasaporteUI.textContent = "Pasaporte (Obligatorio)"
                                                form.appendChild(pasaporteUI)

                                                const pasaporte = document.createElement("input")
                                                pasaporte.classList.add("botonV1BlancoIzquierda_campo")
                                                pasaporte.setAttribute("campo", "pasaporte")
                                                pasaporte.setAttribute("formulario", "AnadirPernoctante")
                                                pasaporte.placeholder = "Pasaporte (obligatorio)"
                                                form.appendChild(pasaporte)


                                                const telefonoUI = document.createElement("div")
                                                telefonoUI.classList.add(
                                                    "flexVertical",
                                                    "paddingLateral14"
                                                )
                                                telefonoUI.textContent = "Telefono"
                                                form.appendChild(telefonoUI)

                                                const telefono = document.createElement("input")
                                                telefono.classList.add("botonV1BlancoIzquierda_campo")
                                                telefono.setAttribute("campo", "telefono")
                                                telefono.setAttribute("formulario", "AnadirPernoctante")
                                                telefono.placeholder = "Teléfono"
                                                form.appendChild(telefono)



                                                const correoUI = document.createElement("div")
                                                correoUI.classList.add(
                                                    "flexVertical",
                                                    "paddingLateral14"
                                                )
                                                correoUI.textContent = "Mail"
                                                form.appendChild(correoUI)

                                                const correoElecotronico = document.createElement("input")
                                                correoElecotronico.classList.add("botonV1BlancoIzquierda_campo")
                                                correoElecotronico.setAttribute("campo", "correoElectronico")
                                                correoElecotronico.setAttribute("formulario", "AnadirPernoctante")
                                                correoElecotronico.placeholder = "Correo electrónico"
                                                form.appendChild(correoElecotronico)

                                                const botonGuardarNuevoCliente = document.createElement("div")
                                                botonGuardarNuevoCliente.setAttribute("boton", "crearCliente")
                                                botonGuardarNuevoCliente.classList.add("botonV1BlancoIzquierda")
                                                botonGuardarNuevoCliente.textContent = tituloBoton
                                                botonGuardarNuevoCliente.addEventListener("click", (e) => {
                                                    const campos = e.target.closest("[formulario=nuevoCliente]").querySelectorAll("[campo]")
                                                    const datos = {}
                                                    campos.forEach((e) => {
                                                        const nombreCampo = e.getAttribute("campo")
                                                        const valorCampo = e.value
                                                        datos[nombreCampo] = valorCampo
                                                    })
                                                    return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                                        ruta: metodoFinal,
                                                        args: {
                                                            reservaUID,
                                                            instanciaUID,
                                                            habitacionUID,
                                                            datos
                                                        }
                                                    })
                                                })
                                                form.appendChild(botonGuardarNuevoCliente)
                                                return nuevoClienteUI
                                            },
                                        },
                                        guardarNuevoClienteYSustituirloPorElClientePoolActual: async (instanciaUID) => {
                                            const pernoctanteUID_DesdeInstancia = document.querySelector(`[instanciaUID="${instanciaUID}"]`).getAttribute("pernoctanteUID")
                                            const instanciaUID_pantallaPropuestaConfirmada = casaVitini.utilidades.codigoFechaInstancia()
                                            const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                            const campos = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`).querySelectorAll("[campo]")
                                            const metadatosPantallaCarga = {
                                                mensaje: "Esperando al servidor...",
                                                instanciaUID: instanciaUID_pantallaPropuestaConfirmada,
                                            }
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                            const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaPropuestaConfirmada}"]`)
                                            const transaccion = {
                                                zona: "administracion/reservas/guardarNuevoClienteYSustituirloPorElClientePoolActual",
                                                reserva: Number(reservaUID),
                                                pernoctanteUID: Number(pernoctanteUID_DesdeInstancia)
                                            }
                                            campos.forEach((campo) => {
                                                const nombreCampo = campo.getAttribute("campo")
                                                const valorCampo = campo.value
                                                transaccion[nombreCampo] = valorCampo
                                            })
                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            if (!selectorPantallaDeCarga) {

                                            }
                                            selectorPantallaDeCarga.forEach((pantalla) => {
                                                pantalla.remove()
                                            })
                                            if (respuestaServidor?.error) {
                                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                const nuevoClienteUID = respuestaServidor.nuevoClienteUID
                                                const nombreCompleto = respuestaServidor.nombreCompleto
                                                const pasaporte = respuestaServidor.pasaporte
                                                const habitacionUID = respuestaServidor.habitacionUID
                                                const selectorInstanciaRaiz = document.querySelectorAll(`[instanciaUID="${instanciaUID}"]`)
                                                selectorInstanciaRaiz.forEach((pantalla) => {
                                                    pantalla.remove()
                                                })
                                                const selectorContenedorPernoctanteAntiguo = document.querySelector(`[contenedor=pernoctante][pernoctanteUID="${pernoctanteUID_DesdeInstancia}"]`)
                                                selectorContenedorPernoctanteAntiguo.remove()
                                                if (habitacionUID) {
                                                    const selectorHabitacion = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                                    let metadatos = {
                                                        tipoPernoctante: "cliente",
                                                        clienteUID: nuevoClienteUID,
                                                        pernoctanteUID: pernoctanteUID_DesdeInstancia,
                                                        estadoAlojamiento: "alojado",
                                                    }
                                                    const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(metadatos)
                                                    metadatos = {
                                                        nombreCompleto: nombreCompleto,
                                                    }
                                                    const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(metadatos)
                                                    bloquePernoctantes.appendChild(nombrePernoctante)
                                                    metadatos = {
                                                        pasaporte: pasaporte,
                                                    }
                                                    const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(metadatos)
                                                    bloquePernoctantes.appendChild(identificacionPernoctante)
                                                    selectorHabitacion.appendChild(bloquePernoctantes)
                                                } else {
                                                    const metadatosBloquePernoctantes = {
                                                        tipoPernoctante: "cliente",
                                                        clienteUID: nuevoClienteUID,
                                                        pernoctanteUID: pernoctanteUID_DesdeInstancia,
                                                        estadoAlojamiento: "noAlojado"
                                                    }
                                                    const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(metadatosBloquePernoctantes)
                                                    const metadatosNombreUi = {
                                                        nombreCompleto: nombreCompleto,
                                                    }
                                                    const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(metadatosNombreUi)
                                                    bloquePernoctantes.appendChild(nombrePernoctante)
                                                    const metadatosPasaporte = {
                                                        pasaporte: pasaporte,
                                                    }
                                                    const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(metadatosPasaporte)
                                                    bloquePernoctantes.appendChild(identificacionPernoctante)
                                                    const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                                    zonaDestino.appendChild(bloquePernoctantes)
                                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                                }
                                            }
                                        },
                                        guardarNuevoClienteYAnadirloComoPernoctnante: async (data) => {

                                            const instanciaUID_contenedorNuevoPernoctanteUI = data.instanciaUID
                                            const habitacionUID = data.habitacionUID
                                            const reservaUID = data.reservaUID
                                            const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                            const datos = data.datos

                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                mensaje: "Creando cliente y asignándolo a la habitación...",
                                                instanciaUID: instanciaUIDPantallaDeCarga,
                                            })
                                            await casaVitini.utilidades.ralentizador(2000)


                                            const respuestaServidor = await casaVitini.shell.servidor({
                                                zona: "administracion/reservas/detallesReserva/pernoctantes/crearClienteDesdeReservaYAnadirloAreserva",
                                                reservaUID: reservaUID,
                                                habitacionUID: habitacionUID,
                                                ...datos
                                            }
                                            )

                                            const selectorPantallaDeCarga = document.querySelector(`[instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                            if (!selectorPantallaDeCarga) {
                                                return
                                            }
                                            selectorPantallaDeCarga.remove()
                                            if (respuestaServidor?.error) {
                                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor.error)
                                            }
                                            if (respuestaServidor?.ok) {

                                                const selectorAnadirPernoctanteRedenrizada = document.querySelector(`[instanciaUID="${instanciaUID_contenedorNuevoPernoctanteUI}"]`)
                                                if (selectorAnadirPernoctanteRedenrizada) {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                }

                                                const datosNuevoCliente = respuestaServidor.nuevoCliente
                                                const nombre = datosNuevoCliente.nombre
                                                const primerApellido = datosNuevoCliente.primerApellido ? datosNuevoCliente.primerApellido : ""
                                                const segundoApellido = datosNuevoCliente.segundoApellido ? datosNuevoCliente.segundoApellido : ""
                                                const pasaporte = datosNuevoCliente.pasaporte
                                                const telefono = datosNuevoCliente.telefono
                                                const correoElectronico = datosNuevoCliente.correoElectronico

                                                const pernoctanteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI({
                                                    tipoPernoctante: "cliente",
                                                    clienteUID: respuestaServidor?.nuevoUIDCliente,
                                                    pernoctanteUID: respuestaServidor?.nuevoUIDPernoctante,
                                                    estadoAlojamiento: "alojado"
                                                })

                                                const pernoctanteNombreUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI({
                                                    clienteUID: respuestaServidor?.nuevoUIDCliente,
                                                    nombreCompleto: `${nombre} ${primerApellido} ${segundoApellido}`
                                                })

                                                const pernoctantePasaporteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI({
                                                    clienteUID: respuestaServidor?.nuevoUIDCliente,
                                                    pasaporte: datos.pasaporte
                                                })
                                                pernoctanteUI.appendChild(pernoctanteNombreUI)
                                                pernoctanteUI.appendChild(pernoctantePasaporteUI)
                                                const selectorHabitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                                selectorHabitacionDestino.appendChild(pernoctanteUI)
                                            }
                                        },
                                        bannerPernoctanteUI: (detallesDelTitular) => {
                                            const clienteUID = detallesDelTitular.clienteUID
                                            const nombreTitular = detallesDelTitular.nombreTitular
                                            const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                            const tipoTitular = detallesDelTitular.tipoTitular

                                            const mailTitular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                            const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin teléfono)"
                                            const detallesRapidosDelTitular = document.createElement("div")
                                            detallesRapidosDelTitular.classList.add("tarjetaGris")

                                            let contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            let nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Nombre completo del titular"
                                            contenedorDato.appendChild(nombreDato)
                                            let valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = nombreTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Pasaporte"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = pasaporteTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Teléfono"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = telefonoTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "e - Mail"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = mailTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)
                                            return detallesRapidosDelTitular
                                        },
                                        detallesDelTitularPoolUI: (detallesDelTitular) => {
                                            const nombreTitular = detallesDelTitular.nombreTitular
                                            const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                            const tipoTitular = "Titular pool"
                                            const mailTitular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                            const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin teléfono)"
                                            const detallesRapidosDelTitular = document.createElement("div")
                                            detallesRapidosDelTitular.classList.add("tarjetaGris")

                                            let contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            let nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Nombre completo del titular"
                                            contenedorDato.appendChild(nombreDato)
                                            let valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = nombreTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Pasaporte"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = pasaporteTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Teléfono"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = telefonoTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "e - Mail"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = mailTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)
                                            return detallesRapidosDelTitular
                                        },
                                        botonCerrarFormularioNuevoCliente: () => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Cerrar gestión del titular de la reserva"
                                            boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                            boton
                                        },
                                        botonCerrar: () => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1")
                                            boton.innerHTML = "Cerrar y volver a la reserva"
                                            boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                            return boton
                                        },











                                        botonIrALaFichaDelClinete: (clienteUID) => {
                                            const boton = document.createElement("a")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Ir a la ficha del cliente"
                                            boton.setAttribute("href", "/administracion/clientes/cliente:" + clienteUID)
                                            boton.setAttribute("vista", "/administracion/clientes/cliente:" + clienteUID)
                                            boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                            return boton
                                        },
                                        titulo: (titulo) => {
                                            const tituloUI = document.createElement("p")
                                            tituloUI.classList.add(
                                                "tituloGris",
                                                "padding14"
                                            )
                                            tituloUI.textContent = titulo
                                            return tituloUI
                                        },
                                        infoUI: (info) => {
                                            const infoUI = document.createElement("p")
                                            infoUI.classList.add("padding14")
                                            infoUI.textContent = info
                                            return infoUI
                                        },











                                    }
                                },
                            },
                        },
                        complementosDeAlojamiento: {
                            arranque: async function () {

                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const instanciaUID_contenedorComplementos = casaVitini.utilidades.codigoFechaInstancia()
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()

                                const contenedor = document.createElement("div")
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "padding6"
                                )
                                contenedor.setAttribute("instanciaUID", instanciaUID_contenedorComplementos)
                                contenedor.setAttribute("componente", "complementosDeAlojamiento")
                                contenedor.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(contenedor)
                                const reservaUI = document.querySelector("[reservaUID]")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                const reservaUID = reservaUI.getAttribute("reservaUID")

                                const transaccion = {
                                    reservaUID
                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"
                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "complementosDeAlojamiento",
                                        "alojamiento"
                                    ]
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[componente=complementosDeAlojamiento][instanciaUID="${instanciaUID_contenedorComplementos}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null
                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }
                                if (respuestaServidor?.ok) {

                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReserva_enlacesDePago_bloqueBotones")

                                    const boton = document.createElement("div")
                                    boton.classList.add("detallesReserva_transacciones_botonV1")
                                    boton.textContent = "Insertar complemento de alojamiento"
                                    boton.addEventListener("click", () => {
                                        this.componentesUI.insertarServicio.ui({
                                            instanciaUID_contenedorComplementos: instanciaUID_contenedorComplementos
                                        })
                                    })
                                    // bloqueBotones.appendChild(boton)

                                    const alojamiento = respuestaServidor.ok.alojamiento
                                    const complementosDeAlojamiento = respuestaServidor.ok.complementosDeAlojamiento

                                    if (configuracionVista === "publica") {
                                    } else {
                                        // instanciaDestino.appendChild(bloqueBotones)
                                    }

                                    const contenedorLista = document.createElement("div")
                                    contenedorLista.classList.add(
                                        "gridHorizontal2C",
                                        "gap6",
                                    )
                                    contenedorLista.setAttribute("componente", "contenedorLista")
                                    instanciaDestino.appendChild(contenedorLista)

                                    const apartamentoUI = (data) => {
                                        const apartamentoUI = data.apartamentoUI
                                        const apartamentoUID = data.apartamentoUID
                                        const apartamentoIDV = data.apartamentoIDV

                                        const ui = document.createElement("div")
                                        ui.setAttribute("apartamentoUID", apartamentoUID)
                                        ui.setAttribute("apartamentoIDV", apartamentoIDV)
                                        ui.classList.add(
                                            "flexVertical",
                                            "gap6",
                                            "padding6",
                                            "borderRadius12",
                                            "backgroundGrey1"
                                        )

                                        const n = document.createElement("p")
                                        n.classList.add(
                                            "negrita",
                                            "padding14"
                                        )
                                        n.textContent = apartamentoUI
                                        ui.appendChild(n)

                                        const contBo = document.createElement("div")
                                        contBo.classList.add("flexHorizontal")
                                        ui.appendChild(contBo)


                                        if (configuracionVista === "administrativa") {
                                            const b = document.createElement("div")
                                            b.classList.add("botonV3")
                                            b.textContent = "Añadir complemento de alojamiento"
                                            b.addEventListener("click", () => {
                                                this.componentesUI.insertarComplementoEnAlojamiento.ui({
                                                    instanciaUID_contenedorComplementos,
                                                    apartamentoIDV,
                                                })
                                            })
                                            contBo.appendChild(b)
                                        }



                                        const c = document.createElement("div")
                                        c.setAttribute("contenedor", "complementos")
                                        c.classList.add(
                                            "flexVertical",
                                            "gap6",
                                        )
                                        c.appendChild(this.componentesUI.infoSinComplemento())
                                        ui.appendChild(c)
                                        return ui
                                    }

                                    Object.entries(alojamiento).forEach(([apartamentoIDV, contenedor]) => {
                                        contenedorLista.appendChild(apartamentoUI({
                                            apartamentoIDV,
                                            apartamentoUI: contenedor.apartamentoUI,
                                            apartamentoUID: contenedor.apartamentoUID
                                        }))
                                    })

                                    complementosDeAlojamiento.forEach((com) => {
                                        const contenedor = instanciaDestino.querySelector(`[apartamentoIDV="${com.apartamentoIDV}"] [contenedor=complementos]`)
                                        contenedor.querySelector("[componente=sinInfo]")?.remove()
                                        contenedor.appendChild(this.componentesUI.complementoUI(com))
                                    })

                                    return

                                    instanciaDestino.style.justifyContent = "flex-start";
                                    const serviciosEnReserva = respuestaServidor.ok.servicios
                                    if (serviciosEnReserva.length === 0) {
                                        contenedorLista.style.display = "none"

                                        const infoSinEnlaces = this.componentesUI.infoSinServiciosUI()
                                        instanciaDestino.appendChild(infoSinEnlaces)
                                    }
                                    if (serviciosEnReserva.length > 0) {
                                        const contenedorListaServicios = instanciaDestino.querySelector(`[componente=contenedorLista]`)
                                        for (const servicioEnReserva of serviciosEnReserva) {
                                            const servicioUI = this.componentesUI.servicioUI({
                                                servicioUID_enReserva: servicioEnReserva.servicioUID,
                                                instanciaUID_contenedorServicios,
                                                nombreInterno: servicioEnReserva.nombre,
                                                contenedor: servicioEnReserva.contenedor
                                            })
                                            contenedorListaServicios.appendChild(servicioUI)
                                        }
                                    }
                                }
                            },
                            componentesUI: {
                                insertarComplementoEnAlojamiento: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_insertarComplementoUI = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorComplementos = data.instanciaUID_contenedorComplementos
                                        const apartamentoIDV = data.apartamentoIDV
                                        main.appendChild(ui)
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo complementos del alojamiento...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)


                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/complementosDeAlojamiento/obtenerComplementosPorAlojamiento",
                                            apartamentoIDV,
                                            filtro: "soloActivos"
                                        }
                                        )
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_contenedorComplementos}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()

                                            const complementosPorApartamentoIDV = respuestaServidor.complementosPorApartamentoIDV

                                            const contenedor = document.createElement("div")
                                            contenedor.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap10",
                                            )
                                            constructor.appendChild(contenedor)
                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activada"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivada"
                                                }

                                            }
                                            if (complementosPorApartamentoIDV.length > 0) {
                                                constructor.appendChild(this.botonCancelar())

                                            } else {
                                                const info = document.querySelector("p")
                                                info.classList.add("textoCentrado", "padding14")
                                                info.textContent = "Este alojamiento no tiene ningun complemento configurado."
                                                constructor.appendChild(info)
                                            }
                                            complementosPorApartamentoIDV.forEach((c) => {
                                                const complementoUI = c.complementoUI
                                                const complementoUID = c.complementoUID
                                                const estadoIDV = c.estadoIDV
                                                const tipoPrecio = c.tipoPrecio
                                                const precio = c.precio
                                                const definicion = c.definicion



                                                const contenedor = document.createElement("div")
                                                contenedor.setAttribute("complementoUID", complementoUID)
                                                contenedor.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = complementoUI
                                                contenedorGlobal.appendChild(nombreOfertaUI)


                                                const precioUI = document.createElement("div")
                                                precioUI.classList.add("negrita")
                                                if (tipoPrecio === "porNoche") {
                                                    precioUI.textContent = precio + "$ Por noche"
                                                } else if (tipoPrecio === "fijoPorReserva") {
                                                    precioUI.textContent = precio + "$ Precio final"
                                                }
                                                contenedorGlobal.appendChild(precioUI)

                                                const definicionUI = document.createElement("div")
                                                definicionUI.textContent = definicion
                                                contenedorGlobal.appendChild(definicionUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado del complemento"
                                                contenedorGlobal.appendChild(estadoTitulo)


                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedor.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )
                                                botonInsertar.textContent = "Insertar complemento en el alojamiento"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.confirmarInsertar({
                                                        reservaUID,
                                                        complementoUID,
                                                        instanciaUID_insertarComplementoUI,
                                                        instanciaUID_contenedorComplementos
                                                    })

                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir al complemento"
                                                botonVerOferta.setAttribute("href", "/administracion/complementos_de_alojamiento/complemento:" + complementoUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/complementos_de_alojamiento/complemento:" + complementoUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)

                                                contenedor.appendChild(contendorBotones)
                                                constructor.appendChild(contenedor)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }

                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const complementoUID = String(data.complementoUID)
                                        const instanciaUID_insertarComplementoUI = data.instanciaUID_insertarComplementoUI
                                        const instanciaUID_contenedorComplementos = data.instanciaUID_contenedorComplementos

                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarComplementoUI}"]`)
                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Insertando complemento en el alojamiento..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/complementosDeAlojamiento/insertarComplementoAlojamientoEnReserva",
                                            reservaUID,
                                            complementoUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_contenedorComplementos}"]`)
                                        if (!uiRenderizada) { return }
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            const complementoDeAlojamiento = respuestaServidor.complementoDeAlojamiento
                                            const apartamentoIDV_destino = complementoDeAlojamiento.apartamentoIDV

                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()

                                            const selectorContenedor = uiRenderizada.querySelector(`[apartamentoIDV="${apartamentoIDV_destino}"] [contenedor=complementos]`)
                                            if (!selectorContenedor) {
                                                return
                                            }

                                            const complementoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.complementosDeAlojamiento.componentesUI.complementoUI({
                                                complementoUID: complementoDeAlojamiento.complementoUID,
                                                complementoUI: complementoDeAlojamiento.complementoUI,
                                                definicion: complementoDeAlojamiento.definicion,
                                                precio: complementoDeAlojamiento.precio,
                                                tipoPrecio: complementoDeAlojamiento.tipoPrecio,
                                                apartamentoIDV: complementoDeAlojamiento.apartamentoIDV
                                            })
                                            const selectorInfo = selectorContenedor.querySelector("[componente=sinInfo]")
                                            selectorInfo?.remove()



                                            selectorContenedor.appendChild(complementoUI)

                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },
                                },
                                servicioUI: function (data) {


                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")


                                    const servicioUID_enReserva = data.servicioUID_enReserva
                                    const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                    const nombreInterno = data.nombreInterno
                                    const contenedor = data.contenedor

                                    const precio = contenedor.precio
                                    const definicion = contenedor.definicion
                                    const fechaFinal = contenedor.fechaFinal
                                    const duracionIDV = contenedor.duracionIDV
                                    const fechaInicio = contenedor.fechaInicio
                                    const tituloPublico = contenedor.tituloPublico
                                    const servicioUID = contenedor.servicioUID
                                    const disponibilidadIDV = contenedor.disponibilidadIDV

                                    const diccionario = {
                                        disponibilidad: {
                                            constante: "Disponible",
                                            variable: "Disponibilidad variable"
                                        }
                                    }

                                    const servicioUI = document.createElement("div")
                                    servicioUI.setAttribute("servicioUID_enReserva", servicioUID_enReserva)
                                    servicioUI.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "backgroundGrey1",
                                        "borderRadius14",
                                        "flexAlineacionI"
                                    )
                                    const contenedorData = document.createElement("div")
                                    contenedorData.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "padding10"
                                    )
                                    servicioUI.appendChild(contenedorData)

                                    const contenedorNombreInterno = document.createElement("div")
                                    contenedorNombreInterno.classList.add(
                                        "flexVertical",
                                    )
                                    if (configuracionVista === "publica") {
                                    } else {
                                        contenedorData.appendChild(contenedorNombreInterno)
                                    }

                                    const tituluNombreInternoUI = document.createElement("p")
                                    tituluNombreInternoUI.textContent = `Nombre administrativo`
                                    contenedorNombreInterno.appendChild(tituluNombreInternoUI)

                                    const nombreInternoUI = document.createElement("p")
                                    nombreInternoUI.classList.add(
                                        "negrita")
                                    nombreInternoUI.textContent = `${nombreInterno}`
                                    contenedorNombreInterno.appendChild(nombreInternoUI)

                                    const contenedorNombrePublico = document.createElement("div")
                                    contenedorNombrePublico.classList.add(
                                        "flexVertical",
                                    )
                                    contenedorData.appendChild(contenedorNombrePublico)

                                    const tituluNombrePublico = document.createElement("p")
                                    tituluNombrePublico.textContent = `Nombre público`
                                    contenedorNombrePublico.appendChild(tituluNombrePublico)

                                    const titulo = document.createElement("p")
                                    titulo.classList.add(
                                        "negrita")
                                    titulo.textContent = tituloPublico
                                    contenedorNombrePublico.appendChild(titulo)


                                    const disponibilidadUI = document.createElement("p")
                                    disponibilidadUI.classList.add(
                                    )
                                    disponibilidadUI.textContent = diccionario.disponibilidad[disponibilidadIDV]
                                    contenedorData.appendChild(disponibilidadUI)


                                    if (disponibilidadIDV === "variable") {

                                        const info = document.createElement("p")
                                        info.classList.add(
                                        )
                                        info.textContent = `Este servicio tiene una disponibilidad limitada. Es por eso que si selecciona este servicio, nos pondremos en contacto con el titular de la reserva en las próximas horas para confirmarle la disponibilidad del servicio para su reserva.`
                                        contenedorData.appendChild(info)
                                    }

                                    const precioUI = document.createElement("p")
                                    precioUI.classList.add(
                                        "negrita"
                                    )
                                    precioUI.textContent = precio + "$"
                                    contenedorData.appendChild(precioUI)

                                    if (duracionIDV === "rango") {
                                        const contenedorDuracion = document.createElement("div")
                                        contenedorDuracion.classList.add(
                                            "flexVertical",

                                        )
                                        contenedorData.appendChild(contenedorDuracion)

                                        const info = document.createElement("p")
                                        info.classList.add("negrita")
                                        info.textContent = `Servicio disponible solo desde ${fechaInicio} hata ${fechaFinal}. Ambas fechas incluidas.`
                                        contenedorDuracion.appendChild(info)

                                    }
                                    const definicionUI = document.createElement("p")
                                    definicionUI.classList.add(
                                    )
                                    definicionUI.textContent = definicion
                                    contenedorData.appendChild(definicionUI)

                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6"
                                    )
                                    const botonIr = document.createElement("a")
                                    botonIr.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonIr.textContent = "Ir al servicio"
                                    botonIr.setAttribute("href", "/administracion/servicios/servicio:" + servicioUID)
                                    botonIr.setAttribute("target", "_blank")
                                    contenedorBotones.appendChild(botonIr)

                                    const botonEliminar = document.createElement("div")
                                    botonEliminar.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonEliminar.textContent = "Eliminar servicio de la reserva 111"
                                    botonEliminar.addEventListener("click", () => {
                                        this.
                                            eliminarServicio
                                            .ui({
                                                instanciaUID_contenedorServicios,
                                                servicioUID_enReserva,
                                                nombreInterno
                                            })
                                    })
                                    contenedorBotones.appendChild(botonEliminar)

                                    if (configuracionVista === "publica") {
                                    } else {
                                        servicioUI.appendChild(contenedorBotones)
                                    }



                                    return servicioUI
                                },
                                eliminarComplementoDeAlojamiento: {
                                    ui: async function (data) {
                                        const complementoUI = data.complementoUI
                                        const apartamentoIDV = data.apartamentoIDV
                                        const instanciaUID_contenedorComplementosDeAlojamiento = data.instanciaUID_contenedorComplementosDeAlojamiento
                                        const complementoUID_enReserva = data.complementoUID_enReserva

                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        ui.style.justifyContent = "center"
                                        const instanciaUID_eliminarServicio = ui.getAttribute("instanciaUID")
                                        const constructor = ui.querySelector("[componente=constructor]")

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Confirmar eliminar el complemento de alojamiento ${complementoUI} de la reserva`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = "Var a eliminar el complemento de alojamiento de la reserva, ¿Estas de acuerdo?"

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Comfirmar la eliminacion"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarEliminar({
                                                complementoUID_enReserva,
                                                instanciaUID_eliminarServicio,
                                                instanciaUID_contenedorComplementosDeAlojamiento,
                                                apartamentoIDV
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"
                                        document.querySelector("main").appendChild(ui)

                                    },
                                    confirmarEliminar: async function (data) {
                                        const complementoUID_enReserva = String(data.complementoUID_enReserva)
                                        const apartamentoIDV = data.apartamentoIDV
                                        const instanciaUID_eliminarServicio = data.instanciaUID_eliminarServicio
                                        const instanciaUID_contenedorComplementosDeAlojamiento = data.instanciaUID_contenedorComplementosDeAlojamiento

                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarServicio}"]`)
                                        const contenedor = ui.querySelector("[componente=constructor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Eliminado servicio en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/complementosDeAlojamiento/eliminarComplementoDeAlojamientoEnReserva",
                                            complementoUID_enReserva
                                        }


                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()

                                            const selectorContenedor = document.querySelector(`[instanciaUID="${instanciaUID_contenedorComplementosDeAlojamiento}"] [apartamentoIDV="${apartamentoIDV}"] [contenedor=complementos]`)
                                            if (!selectorContenedor) {
                                                return
                                            }

                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            selectorContenedor.querySelector(`[complentoUID_enReserva="${complementoUID_enReserva}"]`)?.remove()

                                            const selectorContenedoresDeServiciosRenderizados = selectorContenedor.querySelectorAll("[complentoUID_enReserva]")
                                            if (selectorContenedoresDeServiciosRenderizados.length === 0) {
                                                const infoSinEnlaces = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.complementosDeAlojamiento.componentesUI.infoSinComplemento()
                                                selectorContenedor.appendChild(infoSinEnlaces)
                                            }
                                        }

                                    },

                                },
                                infoSinComplemento: () => {
                                    const info = document.createElement("p")
                                    info.classList.add("flexVertical", "textoCentrado", "padding14")
                                    info.setAttribute("componente", "sinInfo")
                                    info.textContent = "No hay ningún complemento en este alojamiento."
                                    return info
                                },
                                complementoUI: (data) => {
                                    const complementoUID = data.complementoUID
                                    const complementoUI = data.complementoUI
                                    const definicion = data.definicion
                                    const precio = data.precio
                                    const tipoPrecio = data.tipoPrecio
                                    const apartamentoIDV = data.apartamentoIDV
                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")


                                    const renderizaPrecio = (data) => {
                                        const precio = data.precio
                                        const tipoPrecio = data.tipoPrecio
                                        if (tipoPrecio === "fijoPorReserva") {
                                            return `${precio}$ Total`
                                        } else if (tipoPrecio === "porNoche") {
                                            return `${precio}$ / Por noche`
                                        }
                                    }


                                    const ui = document.createElement("div")
                                    ui.setAttribute("complentoUID_enReserva", complementoUID)
                                    ui.setAttribute("apartamentoIDV", apartamentoIDV)
                                    ui.style.alignItems = "start"
                                    ui.classList.add(
                                        "gridHorizontal2C-1fr-min",
                                        "gap6",
                                        "padding6",
                                        "borderRadius12",
                                        "backgroundGrey1"
                                    )

                                    const dataCont = document.createElement("div")
                                    dataCont.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "padding6",
                                    )
                                    ui.appendChild(dataCont)


                                    const n = document.createElement("p")
                                    n.classList.add(
                                        "negrita",
                                    )
                                    n.textContent = complementoUI
                                    dataCont.appendChild(n)


                                    const p = document.createElement("p")
                                    p.classList.add(
                                        //   "padding14"
                                    )
                                    p.textContent = renderizaPrecio({
                                        tipoPrecio,
                                        precio
                                    })
                                    dataCont.appendChild(p)


                                    const d = document.createElement("p")
                                    d.classList.add(
                                        //  "padding14"
                                    )
                                    d.textContent = definicion
                                    dataCont.appendChild(d)


                                    if (configuracionVista === "administrativa") {
                                        const b = document.createElement("div")
                                        b.style.borderRadius = "10px"
                                        b.classList.add("botonV1")
                                        b.addEventListener("click", (e) => {
                                            const instanciaUID_contenedorComplementosDeAlojamiento = e.target.closest("[componente=contenedorDinamico]").querySelector("[componente=complementosDeAlojamiento]").getAttribute("instanciaUID")
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.complementosDeAlojamiento.componentesUI.eliminarComplementoDeAlojamiento.ui({
                                                complementoUI,
                                                instanciaUID_contenedorComplementosDeAlojamiento,
                                                complementoUID_enReserva: complementoUID,
                                                apartamentoIDV
                                            })
                                        })
                                        b.textContent = "Eliminar"
                                        ui.appendChild(b)

                                    }



                                    return ui
                                }
                            },

                        },
                        enlacesDePago: {
                            arranque: async (e) => {
                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                const contenedorEnlacesDePago = document.createElement("div")
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()
                                contenedorEnlacesDePago.classList.add(
                                    "padding6",
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorEnlacesDePago.setAttribute("instanciaUID", instanciaUID)
                                contenedorEnlacesDePago.setAttribute("componente", "categoriaEnlacesDePago")
                                contenedorEnlacesDePago.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(contenedorEnlacesDePago)

                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                    reservaUID: String(reservaUID),
                                    capas: [
                                        "enlacesDePago"
                                    ]
                                }


                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[componente=categoriaEnlacesDePago][instanciaUID="${instanciaUID}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null
                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }
                                if (respuestaServidor?.ok) {
                                    const contenedorInformacionGlobal = document.createElement("div")
                                    contenedorInformacionGlobal.classList.add("administracion_reservas_detallesReserva_contenedorEnlacesDePago")

                                    const infoGlobal = document.createElement("div")
                                    infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                                    infoGlobal.textContent = `Aquí tienes los enlaces de pago generados para realizar pagos para esta reserva a través de la pasarela.`

                                    contenedorEnlacesDePago.appendChild(contenedorInformacionGlobal)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReserva_enlacesDePago_bloqueBotones")

                                    const botonCrearPagoManual = document.createElement("div")
                                    botonCrearPagoManual.classList.add("detallesReserva_transacciones_botonV1")
                                    botonCrearPagoManual.textContent = "Crear un enlace de pago"
                                    botonCrearPagoManual.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.crearEnlace.UI(instanciaUID)
                                    })
                                    bloqueBotones.appendChild(botonCrearPagoManual)
                                    contenedorInformacionGlobal.appendChild(bloqueBotones)

                                    const contenedorListaEnlacesDePagos = document.createElement("div")
                                    contenedorListaEnlacesDePagos.classList.add("administracion_reservas_detallesReserva_contenedorListaEnlacesDePago")
                                    contenedorListaEnlacesDePagos.setAttribute("componente", "contenedorListaEnlacesDePago")
                                    contenedorEnlacesDePago.appendChild(contenedorListaEnlacesDePagos)


                                    instanciaDestino.style.justifyContent = "flex-start";
                                    const enlacesDePagoGenerados = respuestaServidor?.ok.enlacesDePago
                                    if (enlacesDePagoGenerados.length === 0) {
                                        const infoSinEnlaces = document.createElement("div")
                                        infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                                        infoSinEnlaces.setAttribute("componente", "contenedorInfoSinEnlaces")
                                        infoSinEnlaces.textContent = "No hay ningún enlace de pago generado"
                                        contenedorDinamico.appendChild(infoSinEnlaces)
                                    } else if (enlacesDePagoGenerados.length > 0) {
                                        const contenedorEnlacesDePago = instanciaDestino.querySelector(`[componente=contenedorListaEnlacesDePago]`)

                                        for (const detallesDelEnlace of enlacesDePagoGenerados) {

                                            const enlaceUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.enlaceUI({
                                                enlaceUID: detallesDelEnlace.enlaceUID,
                                                nombreEnlace: detallesDelEnlace.nombreEnlace,
                                                enlace: detallesDelEnlace.enlace,
                                                cantidad: detallesDelEnlace.cantidad,
                                                estadoPago: detallesDelEnlace.estadoPagoIDV,
                                                instanciaUID: instanciaUID
                                            })
                                            contenedorEnlacesDePago.appendChild(enlaceUI)
                                        }
                                    }

                                }
                            },
                            eliminarEnlace: {
                                UI: async (datosElimiacion) => {
                                    document.body.style.overflow = "hidden";
                                    const enlaceUID = datosElimiacion.enlaceUID
                                    const instanciaUID = datosElimiacion.instanciaUID
                                    const advertenciaInmersivaIU = document.createElement("div")
                                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                                    const tituloCancelarReserva = document.createElement("p")
                                    tituloCancelarReserva.classList.add("tituloGris", "padding6")
                                    tituloCancelarReserva.textContent = "Eliminar enlace de pago"
                                    contenidoAdvertenciaInmersiva.appendChild(tituloCancelarReserva)
                                    const bloqueBloqueoApartamentos = document.createElement("div")
                                    bloqueBloqueoApartamentos.classList.add("flexVertical", "gap6")
                                    const tituloBloquoApartamentos = document.createElement("div")
                                    tituloBloquoApartamentos.classList.add("padding6", "textoCentrado")
                                    tituloBloquoApartamentos.textContent = "¿Quieres confirmar la eliminación de este enlace de pago? Sus implicaciones serán inmediatas y el enlace de acceso temporal pasará a ser obsoleto."
                                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                                    contenidoAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add(
                                        "flexVertical",
                                        "gap6"
                                    )
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonCancelar.textContent = "Confirmar y eliminar enlace"
                                    botonCancelar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.eliminarEnlace.confirmar({
                                            enlaceUID,
                                            instanciaUID
                                        })
                                    })
                                    bloqueBotones.appendChild(botonCancelar)
                                    const botonVolverAlEnlace = document.createElement("div")
                                    botonVolverAlEnlace.classList.add("detallesReservaCancelarBoton")
                                    botonVolverAlEnlace.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonVolverAlEnlace.textContent = "Volver a los detalles del enlace"
                                    botonVolverAlEnlace.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.desplegarUI)

                                    const botonCancelarProcesoCancelacion = document.createElement("div")
                                    botonCancelarProcesoCancelacion.classList.add("botonV1")
                                    botonCancelarProcesoCancelacion.textContent = "Cancelar la eliminación del enlace"
                                    botonCancelarProcesoCancelacion.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                                    contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)
                                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                                    document.querySelector("main").appendChild(advertenciaInmersivaIU)
                                },
                                confirmar: async (datosElimiacion) => {
                                    const instanciaUID_pantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const mensaje = "Elimiando enlace de pago..."
                                    const datosPantallaSuperpuesta = {
                                        instanciaUID: instanciaUID_pantallaCarga,
                                        mensaje: mensaje
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                    const enlaceUID = datosElimiacion.enlaceUID
                                    const instanciaUID = datosElimiacion.instanciaUID
                                    const transaccion = {
                                        zona: "administracion/enlacesDePago/eliminarEnlace",
                                        enlaceUID: String(enlaceUID)
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaCarga}"]`)
                                    if (!instanciaRenderizada) { return }
                                    instanciaRenderizada.remove()
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const contenedorEspacioEnlacesDePago = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        document.querySelector(`[enlacePagoUID="${enlaceUID}"]`)?.remove()
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const contenedorEnlacesDePago = contenedorEspacioEnlacesDePago.querySelector("[componente=contenedorListaEnlacesDePago]")
                                        const selectorEnlaces = contenedorEspacioEnlacesDePago.querySelectorAll("[enlacePagoUID]")
                                        if (selectorEnlaces.length === 0) {
                                            if (contenedorEspacioEnlacesDePago) {
                                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                                const infoSinEnlaces = document.createElement("div")
                                                infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                                                infoSinEnlaces.setAttribute("componente", "contenedorInfoSinEnlaces")
                                                infoSinEnlaces.textContent = "No hay ningún enlace de pago generado"
                                                contenedorDinamico.appendChild(infoSinEnlaces)
                                            }
                                        }
                                    }
                                }
                            },
                            crearEnlace: {
                                UI: async (instanciaUID) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const advertenciaInmersivaIU = document.createElement("div")
                                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                                    contenidoAdvertenciaInmersiva.setAttribute("espacio", "formularioCrearEnlaceDePago")
                                    const titulo = document.createElement("p")
                                    titulo.classList.add("tituloGris", "padding14")
                                    titulo.textContent = "Generar enlace de pago"
                                    contenidoAdvertenciaInmersiva.appendChild(titulo)
                                    const bloque = document.createElement("div")
                                    bloque.classList.add(
                                        "flexVertical",
                                        "gap6"
                                    )
                                    let info = document.createElement("div")
                                    info.classList.add("padding14")
                                    info.textContent = `
                            Genera un enlace de pago para poder enviarlo a un cliente y que realice el pago de la reserva. No es obligatorio escribir un nombre, pero sí recomendable, por si necesita acordarse de por qué genera este enlace. Si no define ningún nombre, este se llamará "Enlace de pago de la reserva ${reservaUID}". Este es el nombre automático que tendrá este enlace si no define un nombre en específico. Recuerde que todos los enlaces generados y su gestión centralizada la puede encontrar en el panel de administración, en el botón de Enlaces de pago desde el menú administración o en su reserva correspondiente dentro del apartado enlaces de pago.`
                                    bloque.appendChild(info)
                                    let campo = document.createElement("input")
                                    campo.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campo.setAttribute("campo", "nombreEnlace")
                                    campo.placeholder = "Escribe un nombre para el nuevo enlace si quiere"
                                    bloque.appendChild(campo)
                                    info = document.createElement("div")
                                    info.classList.add("padding14")
                                    info.textContent = `Determina la cantidad de pago del enlace, recuerda que los precios de cobro deben de escribirse con dos decimales separados por punto. Por ejemplo, para crear un enlace de pago de 35 dólares escribe 35.00`
                                    bloque.appendChild(info)
                                    campo = document.createElement("input")
                                    campo.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campo.classList.add("negrita")
                                    campo.setAttribute("campo", "cantidad")
                                    campo.placeholder = "Cantidad(Obligatorio)"
                                    bloque.appendChild(campo)
                                    info = document.createElement("div")
                                    info.classList.add("padding14")
                                    info.textContent = `Determina el tiempo de vigencia del enlace. Por defecto, el sistema aplica 72h si no especificas una vigencia concreta. Pasada la vigencia, el enlace ya no puede realizar el cobro y desaparece.`
                                    bloque.appendChild(info)
                                    campo = document.createElement("input")
                                    campo.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campo.setAttribute("campo", "horasCaducidad")
                                    campo.placeholder = "Caducidad en horas, por defecto, 72h."
                                    bloque.appendChild(campo)
                                    const campoDescripcion = document.createElement("textarea")
                                    campoDescripcion.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campoDescripcion.setAttribute("campo", "descripcion")
                                    campoDescripcion.placeholder = "No es obligatorio, pero escriba una descripción si quieres para definir aún más a este enlace si lo necesitas."

                                    contenidoAdvertenciaInmersiva.appendChild(bloque)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add(
                                        "flexVertical",
                                        "gap10"
                                    )
                                    const botonConfirmar = document.createElement("div")
                                    botonConfirmar.classList.add("botonV1BlancoIzquierda")
                                    botonConfirmar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonConfirmar.textContent = "Confirmar y crear enlace"
                                    botonConfirmar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.crearEnlace.confirmar(instanciaUID)
                                    })
                                    bloqueBotones.appendChild(botonConfirmar)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cancelar la creación del enlace"
                                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    bloqueBotones.appendChild(botonCancelar)
                                    contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)
                                    const contenedorGlobal = document.createElement("div")
                                    contenedorGlobal.classList.add("detallesReserva_enlaceDePago_contenedorGlobal")
                                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                                    document.querySelector("main").appendChild(advertenciaInmersivaIU)
                                },
                                confirmar: async (instanciaUID) => {
                                    const instanciaUID_pantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const mensaje = "Creando enlace..."
                                    const datosPantallaSuperpuesta = {
                                        instanciaUID: instanciaUID_pantallaCarga,
                                        mensaje: mensaje
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const nombreEnlace = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=nombreEnlace]")
                                    const cantidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=cantidad]")
                                    const horasCaducidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=horasCaducidad]")
                                    const transaccion = {
                                        zona: "administracion/enlacesDePago/crearNuevoEnlace",
                                        reservaUID: reservaUID,
                                        nombreEnlace: nombreEnlace.value,
                                        cantidad: cantidad.value,
                                        horasCaducidad: horasCaducidad.value,
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaCarga}"]`)

                                    if (!instanciaRenderizada) { return }
                                    instanciaRenderizada.remove()
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const seleccionarInstancia = document.querySelector(`[componente=categoriaEnlacesDePago][instanciaUID="${instanciaUID}"] [componente=contenedorListaEnlacesDePago]`)
                                        if (seleccionarInstancia) {
                                            const metadatos = {
                                                enlaceUID: respuestaServidor.enlaceUID,
                                                nombreEnlace: respuestaServidor.nombreEnlace,
                                                enlace: respuestaServidor.enlace,
                                                cantidad: respuestaServidor.cantidad,
                                                estadoPago: "noPagado",
                                                instanciaUID: instanciaUID
                                            }
                                            const enlaceUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.enlaceUI(metadatos)
                                            const primerElemento = seleccionarInstancia.firstChild;
                                            seleccionarInstancia.insertBefore(enlaceUI, primerElemento);
                                            document.querySelector("[componente=contenedorInfoSinEnlaces]")?.remove()
                                        }
                                    }
                                }
                            },
                            acutalizarEnlace: async () => {
                                const botonActualizar = document.querySelector("[componente=botonActualizarEnlace]")
                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                const nombreEnlace = document.querySelector("[campo=nombreEnlace]")
                                const descripcion = document.querySelector("[campo=descripcion]")
                                botonActualizar.textContent = "Actualizando, espera..."
                                botonActualizar.style.pointerEvents = "none"
                                const transaccion = {
                                    zona: "administracion/enlacesDePago/modificarEnlace",
                                    enlaceUID: Number(reservaUID),
                                    nombreEnlace: nombreEnlace.value,
                                    descripcion: descripcion.value
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                if (respuestaServidor?.error) {
                                    const advertenciasInmersivasRenderizadas = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                    advertenciasInmersivasRenderizadas.forEach((advertencia) =>
                                        advertencia.remove()
                                    )
                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    botonActualizar.textContent = "Actualizar enlace de pago"
                                    botonActualizar.removeAttribute("style")
                                }
                            },
                            enlaceUI: (metadatos) => {
                                const enlaceUID = metadatos.enlaceUID
                                const nombreEnlace = metadatos.nombreEnlace
                                const enlace = metadatos.enlace
                                const cantidad = metadatos.cantidad
                                const estadoPago = metadatos.estadoPago
                                const instanciaUID = metadatos.instanciaUID
                                const bloqueDatosGenerales = document.createElement("div")
                                bloqueDatosGenerales.classList.add("detallesReserva_enlacesDePago_bloqueDatosGenerales")
                                bloqueDatosGenerales.setAttribute("enlacePagoUID", enlaceUID)
                                const contenedorDatosEnlace = document.createElement("div")
                                contenedorDatosEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_contenedorDatosEnlace")

                                const dict = {
                                    enlacesDePago: {
                                        estados: {
                                            noPagado: "No pagado",
                                            pagado: "Pagado"
                                        }
                                    }
                                }

                                let bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                let bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.textContent = "Enlace UID"
                                bloqueInfoDato.appendChild(bloqueInfo)
                                let bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.textContent = enlaceUID
                                bloqueInfoDato.appendChild(bloqueDato)
                                contenedorDatosEnlace.appendChild(bloqueInfoDato)

                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.textContent = "Cantidad"
                                bloqueInfoDato.appendChild(bloqueInfo)
                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.textContent = cantidad + "$"
                                bloqueInfoDato.appendChild(bloqueDato)
                                contenedorDatosEnlace.appendChild(bloqueInfoDato)

                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.textContent = "Nombre del enlace"
                                bloqueInfoDato.appendChild(bloqueInfo)
                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.textContent = nombreEnlace
                                bloqueInfoDato.appendChild(bloqueDato)
                                contenedorDatosEnlace.appendChild(bloqueInfoDato)

                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.textContent = "Estado del pago"
                                bloqueInfoDato.appendChild(bloqueInfo)
                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.textContent = dict.enlacesDePago.estados[estadoPago]
                                bloqueInfoDato.appendChild(bloqueDato)
                                contenedorDatosEnlace.appendChild(bloqueInfoDato)
                                bloqueDatosGenerales.appendChild(contenedorDatosEnlace)
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("administracion_reservas_detallesReservas_enlacesDePago_contenedorBotones")
                                const botonIrAlEnlace = document.createElement("a")
                                botonIrAlEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                botonIrAlEnlace.textContent = "Ir al enlace"
                                botonIrAlEnlace.setAttribute("href", "/pagos/" + enlace)
                                botonIrAlEnlace.setAttribute("target", "_blank")
                                contenedorBotones.appendChild(botonIrAlEnlace)
                                const botonCopiarEnlace = document.createElement("div")
                                botonCopiarEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                botonCopiarEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonCopiarPulsacion")
                                botonCopiarEnlace.textContent = "Copiar URL al portapapeles"
                                botonCopiarEnlace.addEventListener("click", () => {
                                    const enlaceURL = window.location.hostname + "/pagos/" + enlace
                                    navigator.clipboard.writeText(enlaceURL)
                                        .then(() => {
                                        })
                                        .catch((err) => {
                                        });
                                })
                                contenedorBotones.appendChild(botonCopiarEnlace)
                                const botonEliminar = document.createElement("div")
                                botonEliminar.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                botonEliminar.textContent = "Eliminar enlaces"

                                botonEliminar.addEventListener("click", () => {
                                    const datosElimiacion = {
                                        enlaceUID: enlaceUID,
                                        instanciaUID: instanciaUID,
                                    }
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.eliminarEnlace.UI(datosElimiacion)
                                })
                                contenedorBotones.appendChild(botonEliminar)
                                bloqueDatosGenerales.appendChild(contenedorBotones)
                                return bloqueDatosGenerales
                            }
                        },
                        transacciones: {
                            arranque: async () => {

                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const advertenciasInmersivasRenderizadas = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                advertenciasInmersivasRenderizadas.forEach((advertencia) =>
                                    advertencia.remove()
                                )
                                const instanciaUID_contenedorDinamicoTransacciones = casaVitini.utilidades.codigoFechaInstancia()
                                const contenedorListaDePagos = document.createElement("div")
                                contenedorListaDePagos.setAttribute("class", "administracion_reservas_detallesReservas_transacciones_contenedorListaDePagos")
                                contenedorListaDePagos.setAttribute("instanciaUID", instanciaUID_contenedorDinamicoTransacciones)
                                contenedorListaDePagos.setAttribute("contenedorID", "transacciones")

                                const spinnerSimple = casaVitini.ui.componentes.spinnerSimple()
                                contenedorListaDePagos.appendChild(spinnerSimple)

                                contenedorDinamico.appendChild(contenedorListaDePagos)
                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                    reservaUID: reservaUID,
                                    capas: [
                                        "detallesPagos",
                                    ]
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[contenedorID=transacciones][instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null
                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)

                                }
                                if (respuestaServidor?.ok) {
                                    instanciaDestino.style.justifyContent = "flex - start";
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.listaDePagos({
                                        detallesPagos: respuestaServidor,
                                        instanciaUID_contenedorDinamicoTransacciones
                                    })

                                }
                            },
                            UI: {
                                listaDePagos: async (data) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const listaDePagos = data.detallesPagos.ok.detallesPagos
                                    const totalReserva = listaDePagos.totalReserva
                                    const totalPagado = listaDePagos.totalPagado
                                    const faltantePorPagar = listaDePagos.faltantePorPagar
                                    const instanciaUID_contenedorDinamicoTransacciones = data.instanciaUID_contenedorDinamicoTransacciones
                                    const totalReembolsado = listaDePagos.totalReembolsado
                                    const porcentajeReembolsado = listaDePagos.porcentajeReembolsado
                                    const porcentajePagado = listaDePagos.porcentajePagado
                                    const pagos = listaDePagos.pagos //array
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("administracion_reservas_detallesReserva_contenedorListaDePagos")
                                    const titulo = document.createElement("p")
                                    titulo.classList.add("detallesReserva_reembolso_tituloGlobal")
                                    titulo.textContent = "Transacciones"
                                    contenedorAdvertenciaInmersiva.appendChild(titulo)
                                    const infoGlobal = document.createElement("div")
                                    infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                                    infoGlobal.textContent = `Estos son los de pagos de esta reserva. Los pagos pueden realizarse por la pasarela o, si realiza un pago en efectivo, deberá añadir un pago manual desde el botón correspondiente. Para ver los detalles de un pago y sus reembolsos si los hubiera pulsado en un pago. Para realizar un reembolso, entra en los detalles de un pago y desde ahí podrás realizar el reembolso.`
                                    contenedorAdvertenciaInmersiva.appendChild(infoGlobal)
                                    const bloqueTransacciones = document.createElement("div")
                                    bloqueTransacciones.classList.add("detallesReserva_transacciones_bloqueGlobal")
                                    bloqueTransacciones.setAttribute("contenedor", "transaccionesUI")
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReserva_transacciones_bloqueBotones")
                                    const botonEnlacesDePago = document.createElement("div")
                                    botonEnlacesDePago.classList.add("detallesReserva_transacciones_botonV1")
                                    botonEnlacesDePago.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.enlacesDePago)
                                    botonEnlacesDePago.textContent = "Crear un enlace de pago"

                                    const botonCrearPagoManual = document.createElement("div")
                                    botonCrearPagoManual.classList.add("botonV1BlancoIzquierda")
                                    botonCrearPagoManual.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.UI()
                                    })
                                    botonCrearPagoManual.textContent = "Crear pago"
                                    bloqueBotones.appendChild(botonCrearPagoManual)
                                    const botonCerrar = document.createElement("div")
                                    botonCerrar.classList.add("detallesReserva_transacciones_botonV1")
                                    botonCerrar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    botonCerrar.textContent = "Cerrar"

                                    bloqueTransacciones.appendChild(bloqueBotones)
                                    const bloqueDatosGenerales = document.createElement("div")
                                    bloqueDatosGenerales.classList.add("detallesReserva_transacciones_bloqueDatosGenerales")

                                    let bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    let bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Total de la reserva"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    let bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.setAttribute("componentePago", "totalReserva")
                                    bloqueDato.textContent = totalReserva + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDatosGenerales.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.setAttribute("componentePago", "porcentajePagado")
                                    bloqueInfo.textContent = `Total pagado (${porcentajePagado})`
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.setAttribute("componentePago", "totalPagado")
                                    bloqueDato.textContent = totalPagado + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDatosGenerales.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.setAttribute("componentePago", "porcentajeReembolsado")
                                    bloqueInfo.textContent = `Total reembolsado (${porcentajeReembolsado})`
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.setAttribute("componentePago", "totalReembolsado")
                                    bloqueDato.textContent = totalReembolsado + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDatosGenerales.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Faltante por pagar"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.setAttribute("componentePago", "faltantePorPagar")
                                    bloqueDato.textContent = faltantePorPagar + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDatosGenerales.appendChild(bloqueInfoDato)
                                    bloqueTransacciones.appendChild(bloqueDatosGenerales)
                                    if (pagos.length === 0) {
                                        const infoNoPagoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.infoNoPagos()
                                        bloqueTransacciones.appendChild(infoNoPagoUI)

                                    }
                                    if (pagos.length > 0) {
                                        const bloqueListaDePagos = document.createElement("div")
                                        bloqueListaDePagos.classList.add("reservaDetalles_transacciones_bloqueListaDePagos")
                                        bloqueListaDePagos.setAttribute("contenedor", "listaDePagos")
                                        for (const detallesDelPago of pagos) {
                                            const pagoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.pagoUI(detallesDelPago)
                                            bloqueListaDePagos.appendChild(pagoUI)
                                        }
                                        bloqueTransacciones.appendChild(bloqueListaDePagos)
                                    }
                                    const enlacePagoUIRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                    enlacePagoUIRenderizada.innerHTML = null
                                    contenedorAdvertenciaInmersiva.appendChild(bloqueTransacciones)
                                    enlacePagoUIRenderizada.appendChild(contenedorAdvertenciaInmersiva)
                                },
































































































































                                pagoUI: (metadatos) => {

                                    const pagoUID = metadatos.pagoUID
                                    const plataformaDePagoIDV = metadatos.plataformaDePagoIDV
                                    const pagoUIDPasarela = metadatos.pagoUIDPasarela
                                    const tarjetaDigitos = metadatos.tarjetaDigitos
                                    const fechaPago = metadatos.fechaPago
                                    const fechaPagoTZ_ISO = metadatos.fechaPagoTZ_ISO
                                    const tarjeta = metadatos.tarjeta
                                    const cantidad = metadatos.cantidad
                                    const sumaDeLoReembolsado = metadatos.sumaDeLoReembolsado
                                    const reembolsado = metadatos.reembolsado
                                    const chequeUID = metadatos.chequeUID
                                    const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones

                                    const fechaPagoUTC_objeto = fechaPago.split("T")
                                    const fechaUTC_array = fechaPagoUTC_objeto[0].split("-")
                                    const horaUTC_array = fechaPagoUTC_objeto[1].split("-")[0]
                                    const fechaPagoUTC_humana = `${fechaUTC_array[2]}/${fechaUTC_array[1]}/${fechaUTC_array[0]} ${horaUTC_array}`

                                    const fechaPagoTZ_objeto = fechaPagoTZ_ISO.split("T")
                                    const fechaTZ_array = fechaPagoTZ_objeto[0].split("-")
                                    const horaTZ_array = fechaPagoTZ_objeto[1].split("-")[0]
                                    const fechaPagoTZ_humana = `${fechaTZ_array[2]}/${fechaTZ_array[1]}/${fechaTZ_array[0]} ${horaTZ_array}`

                                    const plataformaDePagoUI = {
                                        efectivo: "Efectivo",
                                        transferenciaBancaria: "Transferencia bancaria",
                                        tarjeta: "Tarteja TPV",
                                        pasarela: "Pasarela de pago",
                                        cheque: "Cheque"
                                    }

                                    const bloqueDetallesDelPago = document.createElement("div")
                                    bloqueDetallesDelPago.classList.add("flexVertical", "gap10", "borderRadius10", "backgroundGrey1", "padding10", "comportamientoBoton")
                                    bloqueDetallesDelPago.setAttribute("pagoUID", pagoUID)
                                    bloqueDetallesDelPago.addEventListener("click", () => {
                                        const metadatos = {
                                            pagoUID: pagoUID,
                                            instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.detallesDelPago.UI(metadatos)
                                    })

                                    let bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    let bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Identificador del pago (pagoUID)"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    let bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = pagoUID
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Plataforma de pago"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = plataformaDePagoUI[plataformaDePagoIDV]
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.textContent = "Identificador del pago dentro de la pasarela"
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = pagoUIDPasarela
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    if (plataformaDePagoIDV === "pasarela") {
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                    }

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Tarjeta de crédito"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = `**** **** **** ${tarjetaDigitos} (${tarjeta})`
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    if (plataformaDePagoIDV === "pasarela") {
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                    }

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Fecha del pago en UTC"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = fechaPagoUTC_humana
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Fecha del pago en hora local"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = fechaPagoTZ_humana
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Cantidad del pago"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = cantidad + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    const bloqueSumaDeLoReembolsado = document.createElement("div")
                                    bloqueSumaDeLoReembolsado.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Resumen de reembolsos"
                                    bloqueSumaDeLoReembolsado.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = `${sumaDeLoReembolsado}$, reembolsado ${reembolsado}`
                                    bloqueSumaDeLoReembolsado.appendChild(bloqueDato)
                                    if (sumaDeLoReembolsado) {
                                        bloqueDetallesDelPago.appendChild(bloqueSumaDeLoReembolsado)
                                    }

                                    const bloqueChequeUID = document.createElement("div")
                                    bloqueChequeUID.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Identificador del cheque"
                                    bloqueChequeUID.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = chequeUID
                                    bloqueChequeUID.appendChild(bloqueDato)
                                    if (chequeUID) {
                                        bloqueDetallesDelPago.appendChild(bloqueChequeUID)
                                    }
                                    return bloqueDetallesDelPago
                                },
                                infoNoPagos: () => {
                                    const infoNoPagos = document.createElement("div")
                                    infoNoPagos.classList.add("reservaDetalles_transacciones_textoV1")
                                    infoNoPagos.setAttribute("contenedor", "infoNoPagos")
                                    infoNoPagos.textContent = "Esta reserva no tiene ningún pago. Los pagos que se realicen por la pasarela de pagos se mostrarán automáticamente aquí. Sin embargo, si ha cobrado esta reserva, por ejemplo, en efectivo o con un TPV, debería de añadir un pago manual. No es obligatorio añadir un pago manual, pero si quiere tener un seguimiento centralizado de todos los pagos en esta reserva, tiene esa opción."
                                    return infoNoPagos
                                }
                            },

                            detallesDelPago: {
                                UI: async (metadatos) => {
                                    const pagoUID = metadatos.pagoUID
                                    const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones

                                    document.body.style.overflow = "hidden";
                                    const instanciaUIDDetalleDelPago = casaVitini.utilidades.codigoFechaInstancia()
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const spinnerPorRenderizar = casaVitini.ui.componentes.spinner({
                                        mensaje: "Esperando al servidor..."
                                    })
                                    const advertenciaInmersivaIU = document.createElement("div")
                                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("instanciaUID", instanciaUIDDetalleDelPago)
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                                    contenidoAdvertenciaInmersiva.setAttribute("espacio", "detallesDelPago")
                                    contenidoAdvertenciaInmersiva.appendChild(spinnerPorRenderizar)
                                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                                    document.querySelector("main").appendChild(advertenciaInmersivaIU)
                                    const ocultaPanales = () => {
                                        const selectorContenedores = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)
                                        const contenedorNuevoReembolso = selectorContenedores.querySelector("[contenedor=nuevoReembolso]")
                                        const contenedorEliminarPago = selectorContenedores.querySelector("[contenedor=eliminarPago]")
                                        contenedorNuevoReembolso.innerHTML = null
                                        contenedorNuevoReembolso.removeAttribute("style")
                                        contenedorEliminarPago.innerHTML = null
                                        contenedorEliminarPago.removeAttribute("style")
                                    }
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/obtenerDetallesDelPago",
                                        pagoUID: String(pagoUID)
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const detallesDelPago = respuestaServidor.detallesDelPago
                                        const plataformaDePagoIDV = detallesDelPago.plataformaDePagoIDV
                                        const pagoUID = detallesDelPago.pagoUID
                                        const pagoUIDPasarela = detallesDelPago.pagoUIDPasarela
                                        const tarjetaDigitos = detallesDelPago.tarjetaDigitos
                                        const fechaPagoUTC_ISO = detallesDelPago.fechaPagoUTC_ISO
                                        const fechaPagoTZ_ISO = detallesDelPago.fechaPagoTZ_ISO

                                        const fechaPagoUTC_objeto = fechaPagoUTC_ISO.split("T")
                                        const fechaUTC_array = fechaPagoUTC_objeto[0].split("-")
                                        const horaUTC_array = fechaPagoUTC_objeto[1].split("-")[0]
                                        const fechaPagoUTC_humana = `${fechaUTC_array[2]}/${fechaUTC_array[1]}/${fechaUTC_array[0]} ${horaUTC_array}`

                                        const fechaPagoTZ_objeto = fechaPagoTZ_ISO.split("T")
                                        const fechaTZ_array = fechaPagoTZ_objeto[0].split("-")
                                        const horaTZ_array = fechaPagoTZ_objeto[1].split("-")[0]
                                        const fechaPagoTZ_humana = `${fechaTZ_array[2]}/${fechaTZ_array[1]}/${fechaTZ_array[0]} ${horaTZ_array}`


                                        const tarjeta = detallesDelPago.tarjeta
                                        const cantidad = detallesDelPago.cantidad
                                        const sumaDeLoReembolsado = detallesDelPago.sumaDeLoReembolsado
                                        const reembolsado = detallesDelPago.reembolsado
                                        const deglosePorReembolso = respuestaServidor.deglosePorReembolso
                                        const plataformaDePagoUI = {
                                            efectivo: "Efectivo",
                                            transferenciaBancaria: "Transferencia bancaria",
                                            tarjeta: "Tarteja TPV",
                                            pasarela: "Pasarela de pago",
                                            cheque: "Cheque"
                                        }


                                        const selectorInstanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)?.querySelector("[espacio=detallesDelPago]")
                                        if (!selectorInstanciaRenderizada) {
                                            return
                                        }
                                        selectorInstanciaRenderizada.innerHTML = null
                                        const bloque = document.createElement("div")
                                        bloque.classList.add("flexVertical", "gap6")
                                        const info = document.createElement("div")
                                        info.classList.add("padding14")
                                        info.textContent = `Detalles del pago ${pagoUID} de la reserva ${reservaUID} junto con sus reembolsos. Desde aquí puedes ver los detalles de este pago y gestionar los reembolsos. Puedes crear reembolsos. Tanto los pagos hechos por la pasarela como los reembolsos enviados a la pasarela no se pueden eliminar. Solo se pueden eliminar los pagos manuales.`
                                        bloque.appendChild(info)
                                        selectorInstanciaRenderizada.appendChild(bloque)
                                        const bloqueDetallesDelPago = document.createElement("div")
                                        bloqueDetallesDelPago.classList.add("flexVertical", "gap6", "padding14", "borderRadius20", "backgroundGrey1")
                                        bloqueDetallesDelPago.setAttribute("pagoUID", pagoUID)

                                        let bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        let bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Identificador del pago (pagoUID)"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        let bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = pagoUID
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Plataforma de pago"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = plataformaDePagoUI[plataformaDePagoIDV]
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.textContent = "Identificador del pago dentro de la pasarela"
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = pagoUIDPasarela
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        if (plataformaDePagoIDV === "pasarela") {
                                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                        }

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Tarjeta de crédito"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = `**** **** **** ${tarjetaDigitos} (${tarjeta})`
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        if (plataformaDePagoIDV === "pasarela") {
                                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                        }

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Fecha del pago UTC"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = fechaPagoUTC_humana
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Fecha del pago hora local"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = fechaPagoTZ_humana
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Cantidad del pago"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.setAttribute("cantidadPago", cantidad)
                                        bloqueDato.textContent = cantidad + "$"
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Resumen de reembolsos"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.setAttribute("sumaDeLoReembolsado", sumaDeLoReembolsado)
                                        bloqueDato.textContent = `${sumaDeLoReembolsado}$, reembolsado ${reembolsado}`
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        if (sumaDeLoReembolsado) {
                                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                        }
                                        selectorInstanciaRenderizada.appendChild(bloqueDetallesDelPago)
                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add("flexVertical", "gap10")
                                        const botonCrearReembolso = document.createElement("div")
                                        botonCrearReembolso.classList.add("botonV1BlancoIzquierda")
                                        botonCrearReembolso.textContent = "Crear un reembolso"
                                        botonCrearReembolso.addEventListener("click", () => {
                                            ocultaPanales()
                                            const selectorContenedorReembolso = document.querySelector("[contenedor=nuevoReembolso]")
                                            selectorContenedorReembolso.textContent = null
                                            const metadatos = {
                                                pagoUID: pagoUID,
                                                instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones,
                                                instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.reembolsos.reembolsoUI(metadatos)
                                        })
                                        contenedorBotones.appendChild(botonCrearReembolso)

                                        const botonEliminarPago = document.createElement("div")
                                        botonEliminarPago.classList.add("botonV1BlancoIzquierda")
                                        botonEliminarPago.textContent = "Eliminar pago"
                                        if (plataformaDePagoIDV !== "pasarela") {
                                            contenedorBotones.appendChild(botonEliminarPago)
                                        }
                                        botonEliminarPago.addEventListener("click", () => {
                                            ocultaPanales()
                                            const selectorContenedorEliminarPago = document.querySelector("[contenedor=eliminarPago]")
                                            selectorContenedorEliminarPago.innerHTML = null
                                            const metadatos = {
                                                instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                            }
                                            const eliminarPagoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.eliminarPagoManual.UI(metadatos)
                                            selectorContenedorEliminarPago.appendChild(eliminarPagoUI)
                                            selectorContenedorEliminarPago.style.display = "flex"
                                        })
                                        const botonCerrar = document.createElement("div")
                                        botonCerrar.classList.add("botonV1")
                                        botonCerrar.textContent = "Cerrar detalles del pago"
                                        botonCerrar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                        contenedorBotones.appendChild(botonCerrar)

                                        selectorInstanciaRenderizada.appendChild(contenedorBotones)
                                        const contenedorEliminarPago = document.createElement("div")
                                        contenedorEliminarPago.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedorEliminarPago.setAttribute("contenedor", "eliminarPago")
                                        selectorInstanciaRenderizada.appendChild(contenedorEliminarPago)
                                        const contenedorCrearReembolso = document.createElement("div")
                                        contenedorCrearReembolso.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedorCrearReembolso.setAttribute("contenedor", "nuevoReembolso")
                                        selectorInstanciaRenderizada.appendChild(contenedorCrearReembolso)
                                        const contenedorReembolsos = document.createElement("div")
                                        contenedorReembolsos.classList.add("flexVertical", "gap6", "padding6", "borderRadius20", "borderGrey1")
                                        if (deglosePorReembolso.length === 0) {
                                            const info = document.createElement("div")
                                            info.classList.add("padding10", "textoCentrado")
                                            info.textContent = "Este pago no tiene ningún reembolso"
                                            contenedorReembolsos.appendChild(info)

                                        }
                                        const botonOpcionesReembolsoUI = (metadatos) => {
                                            const botonEliminarReembolso = document.createElement("div")
                                            botonEliminarReembolso.classList.add("botonV1BlancoIzquierda_sinRadius", "borderRadius12")
                                            botonEliminarReembolso.textContent = "Opciones del reembolso"
                                            botonEliminarReembolso.addEventListener("click", () => {
                                                opcionesReembolsoUI(metadatos)
                                            })
                                            return botonEliminarReembolso
                                        }
                                        const restaurarTodasLasOpcionesDeTodosLosReembolsos = (pagoUID, instanciaUIDDetalleDelPago) => {
                                            const reembolsosOpcionesDesplegadas = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)?.querySelectorAll("[contenedor=opcionesDelReembolso][estado=opcionesDesplegadas]")
                                            reembolsosOpcionesDesplegadas.forEach(contenedorOpcionesReembolso => {
                                                contenedorOpcionesReembolso.innerHTML = null
                                                const reembolsoUID = contenedorOpcionesReembolso.closest("[reembolsoUID]").getAttribute("reembolsoUID")
                                                const metadatosOpcionesReembolso = {
                                                    instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago,
                                                    reembolsoUID: reembolsoUID,
                                                    pagoIUD: pagoUID
                                                }
                                                contenedorOpcionesReembolso.appendChild(botonOpcionesReembolsoUI(metadatosOpcionesReembolso))
                                            });
                                        }
                                        const opcionesReembolsoUI = (metadatos) => {
                                            const reembolsoUID = metadatos.reembolsoUID
                                            const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                            const pagoUID = metadatos.pagoUID
                                            const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones
                                            restaurarTodasLasOpcionesDeTodosLosReembolsos(pagoUID, instanciaUIDDetalleDelPago)
                                            const selectorReembolso = document.querySelector(`[reembolsoUID="${reembolsoUID}"]`).querySelector("[contenedor=opcionesDelReembolso]")
                                            selectorReembolso.setAttribute("estado", "opcionesDesplegadas")
                                            selectorReembolso.innerHTML = null
                                            const contenedor = document.createElement("div")
                                            contenedor.classList.add("administracion_reservas_detallesReserva_transacciones_opcionesReembolso")
                                            const campoPalabra = document.createElement("input")
                                            campoPalabra.classList.add("botonV1BlancoIzquierda_noSeleccionable_sinRadius")
                                            campoPalabra.style.borderRadius = "12px"
                                            campoPalabra.setAttribute("campo", "palabra")
                                            campoPalabra.placeholder = "Escribe la palabra eliminar"
                                            selectorReembolso.appendChild(campoPalabra)
                                            const botonEliminarReembolso = document.createElement("div")
                                            botonEliminarReembolso.classList.add("botonV1BlancoIzquierda_sinRadius", "borderRadius12")
                                            botonEliminarReembolso.textContent = "Confirmar la eliminación irreversible del reembolso"
                                            botonEliminarReembolso.addEventListener("click", () => {
                                                const metadatosEliminarReembolso = {
                                                    instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago,
                                                    reembolsoUID: reembolsoUID,
                                                    instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.reembolsos.eliminarReembolso(metadatosEliminarReembolso)
                                            })
                                            selectorReembolso.appendChild(botonEliminarReembolso)
                                            const botonCerrarOpcionesDeReembolso = document.createElement("div")
                                            botonCerrarOpcionesDeReembolso.classList.add("botonV1BlancoIzquierda_sinRadius", "borderRadius12")
                                            botonCerrarOpcionesDeReembolso.textContent = "Cerrar opciones del reembolso"
                                            botonCerrarOpcionesDeReembolso.addEventListener("click", () => {
                                                restaurarTodasLasOpcionesDeTodosLosReembolsos(pagoUID, instanciaUIDDetalleDelPago)
                                            })
                                            selectorReembolso.appendChild(botonCerrarOpcionesDeReembolso)
                                        }
                                        deglosePorReembolso.forEach((detallesDelReembolso) => {
                                            const reembolsoUID = detallesDelReembolso.reembolsoUID
                                            const plataformaDePagoIDV = detallesDelReembolso.plataformaDePagoIDV

                                            const cantidad = detallesDelReembolso.cantidad
                                            const reembolsoUIDPasarela = detallesDelReembolso.reembolsoUIDPasarela

                                            const fechaCreacionUTC_ISO = detallesDelReembolso.fechaCreacionUTC_ISO
                                            const fechaCreacionTZ_ISO = detallesDelReembolso.fechaCreacionTZ_ISO

                                            const fechaActualizacionUTC_ISO = detallesDelReembolso.fechaActualizacionUTC_ISO
                                            const fechaActualizacionTZ_ISO = detallesDelReembolso.fechaActualizacionTZ_ISO

                                            const fechaCreacionUTC_objeto = fechaCreacionUTC_ISO.split("T")
                                            const fechaCreacionUTC_array = fechaCreacionUTC_objeto[0].split("-")
                                            const horaCreacionUTC_array = fechaCreacionUTC_objeto[1].split("-")[0]
                                            const fechaCreacionUTC_humana = `${fechaCreacionUTC_array[2]}/${fechaCreacionUTC_array[1]}/${fechaCreacionUTC_array[0]} ${horaCreacionUTC_array}`

                                            const fechaCreacionTZ_objeto = fechaCreacionTZ_ISO.split("T")
                                            const fechaCreacionTZ_array = fechaCreacionTZ_objeto[0].split("-")
                                            const horaCreacionTZ_array = fechaCreacionTZ_objeto[1].split("-")[0]
                                            const fechaCreacionTZ_humana = `${fechaCreacionTZ_array[2]}/${fechaCreacionTZ_array[1]}/${fechaCreacionTZ_array[0]} ${horaCreacionTZ_array}`


                                            const fechaActualizacionUTC_objeto = fechaActualizacionUTC_ISO?.split("T") || []
                                            const fechaActualizacionUTC_array = fechaActualizacionUTC_objeto[0]?.split("-") || []
                                            const horaActualizacionUTC_array = fechaActualizacionUTC_objeto[1]?.split("-")[0] || []
                                            const fechaActualizacionUTC_humana = `${fechaActualizacionUTC_array[2]}/${fechaActualizacionUTC_array[1]}/${fechaActualizacionUTC_array[0]} ${horaActualizacionUTC_array}`

                                            const fechaActualizacionTZ_objeto = fechaActualizacionTZ_ISO?.split("T") || []
                                            const fechaActualizacionTZ_array = fechaActualizacionTZ_objeto[0]?.split("-") || []
                                            const horaActualizacionTZ_array = fechaActualizacionTZ_objeto[1]?.split("-")[0] || []
                                            const fechaActualizacionTZ_humana = `${fechaActualizacionTZ_array[2]}/${fechaActualizacionTZ_array[1]}/${fechaActualizacionTZ_array[0]} ${horaActualizacionTZ_array}`

                                            const plataformaDePagoUI = {
                                                efectivo: "Efectivo",
                                                transferenciaBancaria: "Transferencia bancaria",
                                                tarjeta: "Tarteja TPV",
                                                pasarela: "Pasarela de pago",
                                                cheque: "Cheque"
                                            }


                                            const contenedorRembolsoEnDetalle = document.createElement("div")
                                            contenedorRembolsoEnDetalle.classList.add("flexVertical", "gap6", "padding6", "borderRadius16", "backgroundGrey1")
                                            contenedorRembolsoEnDetalle.setAttribute("reembolsoUID", reembolsoUID)

                                            const contenedorData = document.createElement("div")
                                            contenedorData.classList.add(
                                                "flexVertical", "gap10", "padding14"
                                            )
                                            contenedorRembolsoEnDetalle.appendChild(contenedorData)

                                            const tituloReembolso = document.createElement("div")
                                            tituloReembolso.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_tituloReembolso")
                                            tituloReembolso.classList.add("negrita")
                                            tituloReembolso.textContent = "Reembolso " + reembolsoUID
                                            contenedorData.appendChild(tituloReembolso)

                                            let bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            let bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Plataforma de reembolso"
                                            bloque.appendChild(bloqueTitulo)
                                            let bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato");
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = plataformaDePagoUI[plataformaDePagoIDV]
                                            bloque.appendChild(bloqueDato)
                                            contenedorData.appendChild(bloque)

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Cantidad del reembolso"
                                            bloque.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato");
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = cantidad + "$"
                                            bloque.appendChild(bloqueDato)
                                            contenedorData.appendChild(bloque)

                                            const bloqueReembolsoUIDPasarela = document.createElement("div")
                                            bloqueReembolsoUIDPasarela.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Reembolso UID en pasarela"
                                            bloqueReembolsoUIDPasarela.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = reembolsoUIDPasarela
                                            bloqueReembolsoUIDPasarela.appendChild(bloqueDato)
                                            if (plataformaDePagoIDV === "pasarela") {
                                                contenedorData.appendChild(bloqueReembolsoUIDPasarela)
                                            }

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Fecha de creación UTC"
                                            bloque.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = fechaCreacionUTC_humana
                                            bloque.appendChild(bloqueDato)
                                            contenedorData.appendChild(bloque)

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Fecha de creación hora local"
                                            bloque.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = fechaCreacionTZ_humana
                                            bloque.appendChild(bloqueDato)
                                            contenedorData.appendChild(bloque)

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Fecha de actualización UTC"
                                            bloque.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = fechaActualizacionUTC_humana
                                            bloque.appendChild(bloqueDato)
                                            if (plataformaDePagoIDV === "pasarela") {
                                                contenedorData.appendChild(bloque)
                                            }

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Fecha de actualización UTC"
                                            bloque.appendChild(bloqueTitulo)

                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = fechaActualizacionTZ_humana
                                            bloque.appendChild(bloqueDato)
                                            if (plataformaDePagoIDV === "pasarela") {
                                                contenedorData.appendChild(bloque)
                                            }

                                            const contenedorBotones = document.createElement("div")
                                            contenedorBotones.classList.add("flexVertical", "gap6")
                                            contenedorBotones.setAttribute("contenedor", "opcionesDelReembolso")
                                            const metadatosOpcionesReembolso = {
                                                instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones,
                                                instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago,
                                                reembolsoUID: reembolsoUID,
                                                pagoIUD: pagoUID
                                            }
                                            contenedorBotones.appendChild(botonOpcionesReembolsoUI(metadatosOpcionesReembolso))
                                            if (plataformaDePagoIDV !== "pasarela") {
                                                contenedorRembolsoEnDetalle.appendChild(contenedorBotones)
                                            }
                                            contenedorReembolsos.appendChild(contenedorRembolsoEnDetalle)
                                        })
                                        selectorInstanciaRenderizada.appendChild(contenedorReembolsos)
                                    }
                                },
                                confirmar: async () => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const nombreEnlace = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=nombreEnlace]")
                                    const cantidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=cantidad]")
                                    const horasCaducidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=horasCaducidad]")
                                    const transaccion = {
                                        zona: "administracion/enlacesDePago/crearNuevoEnlace",
                                        reservaUID: reservaUID,
                                        nombreEnlace: nombreEnlace.value,
                                        cantidad: cantidad.value,
                                        horasCaducidad: horasCaducidad.value,
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.enlacesDePago()
                                    }
                                }
                            },
                            reembolsos: {
                                reembolsoUI: async (metadatos) => {
                                    const pagoUID = metadatos.pagoUID

                                    const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones
                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const selectorContenedorCrearReembolso = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedor=nuevoReembolso]`)
                                    selectorContenedorCrearReembolso.style.display = "flex"
                                    const mostrarContenedorPorTipo = (tipoReembolso) => {
                                        const selectorTipoContenedores = selectorContenedorCrearReembolso.querySelectorAll("[contenedorTipoReembolso]")
                                        selectorTipoContenedores.forEach((contenedor) => {
                                            contenedor.style.display = "none"
                                        })
                                        selectorContenedorCrearReembolso.querySelector(`[contenedorTipoReembolso="${tipoReembolso}"]`).removeAttribute("style")
                                    }
                                    const reseteaBotonesTipoReembolso = () => {
                                        const selectorBotonesTipoReembolso = selectorContenedorCrearReembolso.querySelectorAll("[botonTipoReembolso]")
                                        selectorBotonesTipoReembolso.forEach((botonTipoReembolso) => {
                                            botonTipoReembolso.removeAttribute("style")
                                            botonTipoReembolso.removeAttribute("tipoReembolsoSeleccionado")
                                        })
                                    }
                                    const maximoReembolsable = async () => {
                                        const totalPagado = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [cantidadPago]`).getAttribute("cantidadPago")
                                        const totalReembolsado = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [sumaDeLoReembolsado]`)?.getAttribute("sumaDeLoReembolsado")
                                        const selectorUI = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [componente=totalReembolsable]`)
                                        selectorUI.textContent = "Esperando resultado del calculo..."
                                        if (!totalReembolsado) {
                                            selectorUI.textContent = `Total reembolsable ${totalPagado}$`
                                            selectorUI.setAttribute("totalReembolsable", totalPagado)

                                        }
                                        try {
                                            const transaccion = {
                                                zona: "administracion/componentes/calculadora",
                                                numero1: totalPagado,
                                                numero2: totalReembolsado || "0.00",
                                                operador: "-"
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            if (respuestaServidor?.error) {
                                                casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                const resultado = Number(respuestaServidor?.ok).toFixed(2)
                                                selectorUI.textContent = `Total reembolsable ${resultado}$`
                                                selectorUI.setAttribute("totalReembolsable", resultado)
                                            }

                                        } catch (errorCapturado) {
                                            const error = errorCapturado.message
                                            casaVitini.ui.componentes.advertenciaInmersiva(error)
                                        }
                                    }
                                    const reglaDeTresPorcentaje = async (porcentaje) => {
                                        let totalReembolsable
                                        const selectorTotalReembolsableConReeembolsos = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [totalReembolsable]`)
                                        if (selectorTotalReembolsableConReeembolsos) {
                                            totalReembolsable = selectorTotalReembolsableConReeembolsos.getAttribute("totalReembolsable")
                                        } else {
                                            const selectorTotalReembolsableSinReembolsos = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [cantidadPago]`).getAttribute("cantidadPago")
                                            totalReembolsable = selectorTotalReembolsableSinReembolsos
                                        }
                                        const selectorUI = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [informacionPorcentaje=informacionPorcentaje]`)
                                        selectorUI.innerHTML = "Calculando..."
                                        try {
                                            const transaccion = {
                                                zona: "administracion/componentes/calculadora",
                                                numero1: totalReembolsable,
                                                numero2: porcentaje,
                                                operador: "%"
                                            }
                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            if (respuestaServidor?.error) {
                                                casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                const resultado = Number(respuestaServidor?.ok).toFixed(2)
                                                selectorUI.textContent = `El reembolso sería de ${resultado}$ (El ${porcentaje}% de ${totalReembolsable}$ es ${resultado}$)`
                                                selectorUI.setAttribute("totalReembolso", resultado)
                                            }
                                        } catch (errorCapturado) {
                                            const error = errorCapturado.message
                                            casaVitini.ui.componentes.advertenciaInmersiva(error)
                                        }

                                    };
                                    const contenedorEmitirReembolso = document.createElement("div")
                                    contenedorEmitirReembolso.classList.add("flexVertical", "padding6", "gap6", "borderGrey1", "borderRadius20")
                                    contenedorEmitirReembolso.setAttribute("contenedor", "emitirReembolso")
                                    const titulo = document.createElement("p")
                                    titulo.classList.add("tituloGris", "padding14")
                                    titulo.textContent = "Realizar un reembolso"
                                    contenedorEmitirReembolso.appendChild(titulo)
                                    const bloqueReembolso = document.createElement("div")
                                    bloqueReembolso.classList.add("flexVertical", "gap6")
                                    let bloqueInterno = document.createElement("div")
                                    bloqueInterno.classList.add("flexVertical", "gap6", "padding14")
                                    const info = document.createElement("div")
                                    info.textContent = `Para realizar el reembolso, por favor, escribe reembolso en minúsculas en el campo de texto y, pulse realizar reembolso. Se exige escribir reembolso como medida para evitar un falso clic en el botón de confirmación al querer hacer clic en el botón de cerrar opciones de emisión de reembolso.`
                                    bloqueInterno.appendChild(info)
                                    bloqueReembolso.appendChild(bloqueInterno)
                                    const infoTotalReembolsable = document.createElement("div")

                                    infoTotalReembolsable.classList.add("negrita")
                                    infoTotalReembolsable.setAttribute("componente", "totalReembolsable")

                                    bloqueInterno.appendChild(infoTotalReembolsable)
                                    bloqueReembolso.appendChild(bloqueInterno)
                                    const contenedorTipoReembolsos = document.createElement("div")
                                    contenedorTipoReembolsos.classList.add("gridHorizontal2C", "borderRadius18", "backgroundGrey1", "padding6", "gap6")
                                    const reembolsoPorCantidad = document.createElement("div")
                                    reembolsoPorCantidad.classList.add("flexVertical", "borderRadius12", "backgroundGrey1", "padding10", "textoCentrado")
                                    reembolsoPorCantidad.textContent = "Por cantidad"
                                    reembolsoPorCantidad.setAttribute("botonTipoReembolso", "porCantidad")
                                    reembolsoPorCantidad.setAttribute("tipoReembolso", "porCantidad")
                                    reembolsoPorCantidad.addEventListener("click", (e) => {
                                        reseteaBotonesTipoReembolso()
                                        e.target.setAttribute("tipoReembolsoSeleccionado", "porCantidad")
                                        e.target.style.background = "blue"
                                        e.target.style.color = "white"
                                        const tipoReembolso = e.target.getAttribute("tipoReembolso")
                                        mostrarContenedorPorTipo(tipoReembolso)
                                    })
                                    contenedorTipoReembolsos.appendChild(reembolsoPorCantidad)
                                    const reembolsoPorPorcentaje = document.createElement("div")
                                    reembolsoPorPorcentaje.classList.add("flexVertical", "borderRadius12", "backgroundGrey1", "padding10", "textoCentrado")
                                    reembolsoPorPorcentaje.textContent = "Por porcentaje"
                                    reembolsoPorPorcentaje.setAttribute("botonTipoReembolso", "porPorcentaje")
                                    reembolsoPorPorcentaje.setAttribute("tipoReembolso", "porPorcentaje")
                                    reembolsoPorPorcentaje.addEventListener("click", (e) => {
                                        reseteaBotonesTipoReembolso()
                                        e.target.setAttribute("tipoReembolsoSeleccionado", "porPorcentaje")
                                        e.target.style.background = "blue"
                                        e.target.style.color = "white"
                                        const tipoReembolso = e.target.getAttribute("tipoReembolso")
                                        mostrarContenedorPorTipo(tipoReembolso)
                                    })
                                    contenedorTipoReembolsos.appendChild(reembolsoPorPorcentaje)
                                    bloqueReembolso.appendChild(contenedorTipoReembolsos)
                                    const contenedorDinamicoTipo = document.createElement("div")
                                    contenedorDinamicoTipo.classList.add("flexVertical", "gap6")
                                    const contenedorPorCantidad = document.createElement("div")
                                    contenedorPorCantidad.classList.add("flexVertical", "gap6")
                                    contenedorPorCantidad.style.display = "none"
                                    contenedorPorCantidad.setAttribute("contenedorTipoReembolso", "porCantidad")
                                    const infoPorCantidad = document.createElement("div")
                                    infoPorCantidad.classList.add("padding14")
                                    infoPorCantidad.textContent = `Determina la cantidad total del reembolso. Si quieres emitir, por ejemplo, un reembolso de 100, entonces debes de escribir también los dos decimales separados por punto, por ejemplo, 100.00. Luego establece la moneda.`
                                    contenedorPorCantidad.appendChild(infoPorCantidad)
                                    const campoCantidadReembolso = document.createElement("input")
                                    campoCantidadReembolso.classList.add("detallesReserva_reembolso_campo")
                                    campoCantidadReembolso.setAttribute("campo", "porCantidad")
                                    campoCantidadReembolso.placeholder = "0.00"
                                    contenedorPorCantidad.appendChild(campoCantidadReembolso)
                                    const campoMonedaReembolso = document.createElement("input")
                                    campoMonedaReembolso.classList.add("detallesReserva_reembolso_campo")
                                    campoMonedaReembolso.setAttribute("campo", "moneda")
                                    campoMonedaReembolso.placeholder = "EUR"

                                    contenedorDinamicoTipo.appendChild(contenedorPorCantidad)
                                    const contenedorPorPorcentaje = document.createElement("div")
                                    contenedorPorPorcentaje.classList.add("flexVertical", "gap6")
                                    contenedorPorPorcentaje.style.display = "none"
                                    contenedorPorPorcentaje.setAttribute("contenedorTipoReembolso", "porPorcentaje")
                                    const contenedorInfo = document.createElement("div")
                                    contenedorInfo.classList.add("flexVertical", "gap6", "padding14")
                                    contenedorPorPorcentaje.appendChild(contenedorInfo)
                                    const infoPorPorcentaje = document.createElement("div")
                                    infoPorPorcentaje.textContent = `Determina el porcentaje del reembolso.`
                                    contenedorInfo.appendChild(infoPorPorcentaje)
                                    const resultadoPorcentaje = document.createElement("div")
                                    resultadoPorcentaje.classList.add("negrita")
                                    resultadoPorcentaje.setAttribute("informacionPorcentaje", "informacionPorcentaje")
                                    resultadoPorcentaje.textContent = `Escribe un porcentaje para ver su cálculo`
                                    contenedorInfo.appendChild(resultadoPorcentaje)
                                    const campoPorcentajeReembolso = document.createElement("input")
                                    campoPorcentajeReembolso.classList.add("detallesReserva_reembolso_campo")
                                    campoPorcentajeReembolso.placeholder = "0%"
                                    campoPorcentajeReembolso.addEventListener("input", (e) => {
                                        const entrada = e.target.value
                                        const selectorInformacionResultadoPorcentaje = document.querySelector("[informacionPorcentaje=informacionPorcentaje]")
                                        const controlFormato = /^\d+%$/.test(entrada);
                                        if (entrada.length === 0) {
                                            selectorInformacionResultadoPorcentaje.textContent = "Escribe un porcentaje para ver su cálculo"
                                            e.target.removeAttribute("totalReembolso")
                                        } else {
                                            if (!controlFormato) {
                                                selectorInformacionResultadoPorcentaje.textContent = "No te olvides del signo de porcentaje %, solo números enteros sin decimales."
                                                e.target.removeAttribute("totalReembolso")
                                            } else {
                                                const numeroLimpio = entrada.replace("%", "")
                                                reglaDeTresPorcentaje(numeroLimpio)
                                            }
                                        }
                                    })
                                    contenedorPorPorcentaje.appendChild(campoPorcentajeReembolso)
                                    contenedorDinamicoTipo.appendChild(contenedorPorPorcentaje)
                                    const campoMoneda = document.createElement("input")
                                    campoMoneda.classList.add("detallesReserva_reembolso_campo")
                                    campoMoneda.setAttribute("campo", "moneda")
                                    campoMoneda.placeholder = "Moneda, por ejemplo EUR o USD"

                                    contenedorDinamicoTipo.appendChild(contenedorPorPorcentaje)
                                    const selectorTipoReembolso = document.createElement("select")
                                    selectorTipoReembolso.addEventListener("change", (e) => {
                                        const tipoReembolso = e.target.value

                                        const contenedorEmitirReembolso = e.target.closest("[contenedor=emitirReembolso]")
                                        const contenedorPalabra = contenedorEmitirReembolso.querySelector("[contenedor=palabraReembolso]")
                                        if (tipoReembolso === "pasarela") {
                                            contenedorPalabra.classList.remove("ocultoInicial")
                                        } else {
                                            contenedorPalabra.classList.add("ocultoInicial")
                                        }
                                    })

                                    selectorTipoReembolso.setAttribute("campo", "plataformaDePagoEntrada")
                                    const opcionPreterminada = document.createElement("option");
                                    opcionPreterminada.value = "";
                                    opcionPreterminada.selected = "true"
                                    opcionPreterminada.disabled = "true"
                                    opcionPreterminada.text = "Selecciona como realizar este reeembolso";
                                    selectorTipoReembolso.add(opcionPreterminada);
                                    let opcion = document.createElement("option");
                                    opcion.value = "efectivo";
                                    opcion.text = "Efectivo";
                                    selectorTipoReembolso.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "tarjeta";
                                    opcion.text = "Tarjeta TPV";
                                    selectorTipoReembolso.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "cheque";
                                    opcion.text = "Cheque";
                                    selectorTipoReembolso.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "pasarela";
                                    opcion.text = "Pasarela";
                                    selectorTipoReembolso.add(opcion);

                                    contenedorDinamicoTipo.appendChild(selectorTipoReembolso)
                                    bloqueReembolso.appendChild(contenedorDinamicoTipo)
                                    bloqueInterno = document.createElement("div")
                                    bloqueInterno.classList.add("flexVertical", "gap6", "ocultoInicial")
                                    bloqueInterno.setAttribute("contenedor", "palabraReembolso")
                                    const infoCampoConfirmacion = document.createElement("div")
                                    infoCampoConfirmacion.classList.add("padding14")
                                    infoCampoConfirmacion.textContent = `Los reembolsos emitidos por la pasarela de pago son irreversibles, no se pueden deshacer, si bien se puede eliminar la copia de este de la base de datos de Casa Vitini no se puede deshacer de la pasarela. Por esta circunstancia, para emitir un reembolso por la pasarela de pago tienes que escribir la palabra "reembolso" en el campo de texto de abajo. Esto es así para evitar falsos clics.`
                                    bloqueInterno.appendChild(infoCampoConfirmacion)
                                    const campoConfirmacion = document.createElement("input")
                                    campoConfirmacion.classList.add("detallesReserva_reembolso_campoConfirmacion")
                                    campoConfirmacion.setAttribute("campo", "palabra")
                                    campoConfirmacion.placeholder = "Escribe la palabra reembolso"
                                    bloqueInterno.appendChild(campoConfirmacion)
                                    bloqueReembolso.appendChild(bloqueInterno)
                                    contenedorEmitirReembolso.appendChild(bloqueReembolso)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("flexVertical", "gap6")
                                    const botonConfirmar = document.createElement("div")
                                    botonConfirmar.classList.add("botonV1BlancoIzquierda")
                                    botonConfirmar.setAttribute("componente", "botonActualizarEnlace")
                                    botonConfirmar.textContent = "Realizar reembolso"
                                    botonConfirmar.addEventListener("click", () => {

                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.reembolsos.confirmarReembolso({
                                            pagoUID: pagoUID,
                                            instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones,
                                            instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                        })
                                    })
                                    bloqueBotones.appendChild(botonConfirmar)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cerrar opciones de emitir reembolso"
                                    botonCancelar.addEventListener("click", () => {
                                        selectorContenedorCrearReembolso.innerHTML = null
                                        selectorContenedorCrearReembolso.removeAttribute("style")
                                    })
                                    bloqueBotones.appendChild(botonCancelar)
                                    contenedorEmitirReembolso.appendChild(bloqueBotones)
                                    selectorContenedorCrearReembolso.appendChild(contenedorEmitirReembolso)
                                    maximoReembolsable();
                                },
                                eliminarReembolso: async (metadatos) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const reembolsoUID = metadatos.reembolsoUID
                                    const instanciaUID = metadatos.instanciaUID
                                    const metadatosPantallaCarga = {
                                        mensaje: "Eliminando reembolso...",
                                        instanciaUID: instanciaUIDDetalleDelPago,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const pagoUID = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector("[pagoUID]").getAttribute("pagoUID")
                                    const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector(`[reembolsoUID="${reembolsoUID}"] [campo=palabra]`).value
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/eliminarReembolsoManual",
                                        reembolsoUID: String(reembolsoUID),
                                        palabra: palabra
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUIDDetalleDelPago}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const selectorDetallesDelPagoRenderizado = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)
                                        if (selectorDetallesDelPagoRenderizado) {
                                            //  casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.arranque()
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.ui.componentesUI.categoriasGlobalesUI.controladorCategorias({
                                                categoria: "transacciones",
                                                origen: "url",
                                                reservaUID: reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const metadatos = {
                                                pagoUID: pagoUID,
                                                instanciaUID: instanciaUID
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.detallesDelPago.UI(metadatos)
                                        }
                                    }
                                },
                                confirmarReembolso: async (metadatos) => {
                                    const pagoUID = String(metadatos.pagoUID)
                                    const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones
                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const tipoReembolso = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [tipoReembolsoSeleccionado]`)?.getAttribute("tipoReembolsoSeleccionado")

                                    const metadatosPantallaCarga = {
                                        mensaje: "Esperando al servidor...",
                                        instanciaUID: instanciaUID_pantallaDeCarga,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/realizarReembolso",
                                        reservaUID: reservaUID,
                                        pagoUID: pagoUID
                                    }
                                    if (tipoReembolso === "porPorcentaje") {
                                        const cantidad = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedortiporeembolso=porPorcentaje] [totalReembolso]`)?.getAttribute("totalReembolso")
                                        transaccion.cantidad = cantidad
                                    }
                                    if (tipoReembolso === "porCantidad") {
                                        const cantidad = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedortiporeembolso=porCantidad] [campo=porCantidad]`)?.value
                                        transaccion.cantidad = cantidad
                                    }
                                    transaccion.tipoReembolso = tipoReembolso
                                    const plataformaDePagoEntrada = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedor=nuevoReembolso] [campo=plataformaDePagoEntrada]`).value
                                    transaccion.plataformaDePagoEntrada = plataformaDePagoEntrada
                                    if (tipoReembolso === "pasarela") {
                                        const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [campo=palabra]`)?.value
                                        transaccion.palabra = palabra
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaDeCarga}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        //casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.arranque()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.ui.componentesUI.categoriasGlobalesUI.controladorCategorias({
                                            categoria: "transacciones",
                                            origen: "url",
                                            reservaUID: reservaUID
                                        })

                                        const mensaje = respuestaServidor?.ok
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.detallesDelPago.UI({
                                            pagoUID: pagoUID,
                                            instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones
                                        })

                                    }
                                }
                            },
                            crearPagoManual: {
                                UI: () => {
                                    const mostrarContenedorTipoPago = (opcion) => {
                                        const selectorInfo = document.querySelector("[componente=advertenciaInmersiva] [componente=infoDesplegable]")
                                        selectorInfo?.remove()
                                        const selectorTodosLosContenedorTipoPago = document.querySelectorAll(`[componente=advertenciaInmersiva] [contenedorTipoPago]`)
                                        selectorTodosLosContenedorTipoPago.forEach((contenedorTipoPago) => {
                                            contenedorTipoPago.removeAttribute("style")
                                            contenedorTipoPago.removeAttribute("estado")
                                        })
                                        const tipoPago = opcion.target.value
                                        const selectorContenedorTipoPago = document.querySelector(`[componente=advertenciaInmersiva] [contenedorTipoPago=${tipoPago}]`)
                                        if (selectorContenedorTipoPago) {
                                            selectorContenedorTipoPago.style.display = "flex"
                                            selectorContenedorTipoPago.setAttribute("estado", "activa")
                                        }
                                    }
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const advertenciaInmersivaIU = document.createElement("div")
                                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                                    contenidoAdvertenciaInmersiva.setAttribute("espacio", "formularioCrearPagoManual")
                                    const titulo = document.createElement("p")
                                    titulo.classList.add("tituloGris", "padding14")
                                    titulo.textContent = "Crear un pago manual"
                                    contenidoAdvertenciaInmersiva.appendChild(titulo)
                                    const bloque = document.createElement("div")
                                    bloque.classList.add("flexVertical", "gap10")
                                    let info = document.createElement("div")
                                    info.classList.add("padding14")
                                    info.textContent = `Crea un pago manual cuando necesites crear un pago por fuera de la pasarela. Escoge el tipo de pago, si es efectivo o si es por TPV por ejemplo. Luego rellena los datos y el pago se añadirá a la lista de pagos de la reserva. Los pagos manuales requieren una acción manual.`
                                    bloque.appendChild(info)
                                    const selectorTipoDePago = document.createElement("select")
                                    selectorTipoDePago.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    selectorTipoDePago.setAttribute("campo", "selectorRol")
                                    selectorTipoDePago.addEventListener("change", mostrarContenedorTipoPago)
                                    const opcionPreterminada = document.createElement("option");
                                    opcionPreterminada.value = "";
                                    opcionPreterminada.selected = "true"
                                    opcionPreterminada.disabled = "true"
                                    opcionPreterminada.text = "Selecciona la plataforma pago";
                                    selectorTipoDePago.add(opcionPreterminada);
                                    let opcion = document.createElement("option");
                                    opcion.value = "efectivo";
                                    opcion.text = "Efectivo";
                                    selectorTipoDePago.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "transferenciaBancaria";
                                    opcion.text = "Transferencia bancaria";
                                    selectorTipoDePago.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "tarjeta";
                                    opcion.text = "Tarjeta TPV";
                                    selectorTipoDePago.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "cheque";
                                    opcion.text = "Cheque";
                                    selectorTipoDePago.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "pasarela";
                                    opcion.text = "Pasarela(Asociar pago)";
                                    selectorTipoDePago.add(opcion);

                                    bloque.appendChild(selectorTipoDePago)
                                    const contenedorTipoPago = document.createElement("div")
                                    contenedorTipoPago.classList.add("flexVertical", "gap6")
                                    const infoDesplegable = document.createElement("p")
                                    infoDesplegable.classList.add("padding14")
                                    infoDesplegable.setAttribute("componente", "infoDesplegable")
                                    infoDesplegable.textContent = "Selecciona el tipo de plataforma de pago en el desplegable"
                                    contenedorTipoPago.appendChild(infoDesplegable)
                                    const contenedorEfectivo = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.efectivo()
                                    contenedorTipoPago.appendChild(contenedorEfectivo)
                                    const contenedorCheque = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.cheque()
                                    contenedorTipoPago.appendChild(contenedorCheque)
                                    const contenedorTransferenciaBancaria = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.transferenciaBancaria()
                                    contenedorTipoPago.appendChild(contenedorTransferenciaBancaria)
                                    const contenedorTarjeta = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.tarjeta()
                                    contenedorTipoPago.appendChild(contenedorTarjeta)
                                    const contenedorPasarela = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.pasarela()
                                    contenedorTipoPago.appendChild(contenedorPasarela)
                                    bloque.appendChild(contenedorTipoPago)
                                    contenidoAdvertenciaInmersiva.appendChild(bloque)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("flexVertical", "gap10")
                                    const botonConfirmar = document.createElement("div")
                                    botonConfirmar.classList.add("botonV1BlancoIzquierda")
                                    botonConfirmar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonConfirmar.textContent = "Crear pago y guardarlo en la reserva"
                                    botonConfirmar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.confirmar()
                                    })
                                    bloqueBotones.appendChild(botonConfirmar)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cancelar y volver"
                                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    bloqueBotones.appendChild(botonCancelar)
                                    contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)
                                    const contenedorGlobal = document.createElement("div")
                                    contenedorGlobal.classList.add("detallesReserva_enlaceDePago_contenedorGlobal")
                                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                                    document.querySelector("main").appendChild(advertenciaInmersivaIU)
                                },
                                confirmar: async () => {
                                    const instanciaUID_contenedorDinamicoTransacciones = document.querySelector("[contenedorID=transacciones]").getAttribute("instanciaUID")
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const contenedorActivo = document.querySelector("[estado=activa][contenedorTipoPago]")
                                    const plataformaDePago = document.querySelector("[campo=selectorRol]").value
                                    const instanciaUID_pantallaEspera = casaVitini.utilidades.codigoFechaInstancia()
                                    const metadatosPantallaCarga = {
                                        mensaje: "Esperando al servidor...",
                                        instanciaUID: instanciaUID_pantallaEspera,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/crearPagoManual",
                                        plataformaDePago: plataformaDePago,
                                        reservaUID: reservaUID
                                    }
                                    if (contenedorActivo) {
                                        contenedorActivo.querySelectorAll("[campo]").forEach((campo) => {
                                            const nombreCampo = campo.getAttribute("campo")
                                            const valorCampo = campo.value
                                            transaccion[nombreCampo] = valorCampo
                                        })
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaEspera}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const seleccionarInstancia = document.querySelector(`[instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                        if (seleccionarInstancia) {
                                            const datosPagosGlobal = {
                                                reservaUID: reservaUID,
                                                instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.actualizarDatosGlobalesPago(datosPagosGlobal)
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorInfoNoPago = seleccionarInstancia.querySelector(`[contenedor=infoNoPagos]`)
                                            if (selectorInfoNoPago) {
                                                selectorInfoNoPago.remove()
                                            }
                                            const selectorContenedorListaDePagos = seleccionarInstancia.querySelector(`[contenedor=listaDePagos]`)
                                            const selectorTransaccionesUI = seleccionarInstancia.querySelector("[contenedor=transaccionesUI]")
                                            if (!selectorContenedorListaDePagos) {
                                                const bloqueListaDePagos = document.createElement("div")
                                                bloqueListaDePagos.classList.add("reservaDetalles_transacciones_bloqueListaDePagos")
                                                bloqueListaDePagos.setAttribute("contenedor", "listaDePagos")
                                                selectorTransaccionesUI.appendChild(bloqueListaDePagos)
                                            }
                                            const detallesDelPago = respuestaServidor.detallesDelPago
                                            const enlaceUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.pagoUI(detallesDelPago)
                                            const listaDePagosRenderizada = seleccionarInstancia.querySelector(`[contenedor=listaDePagos]`)
                                            if (listaDePagosRenderizada.childElementCount === 0) {
                                                listaDePagosRenderizada.appendChild(enlaceUI);
                                            } else if (listaDePagosRenderizada.childElementCount > 0) {
                                                const primerElemento = listaDePagosRenderizada.firstChild;
                                                listaDePagosRenderizada.insertBefore(enlaceUI, primerElemento);
                                            }
                                        }
                                    }
                                },
                                contenedoresTipoPago: {
                                    efectivo: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "efectivo")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Determina la cantidad del pago, recuerda que debe tener dos decimales siempre, por ejemplo, 10.00.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "cantidad")
                                        campo.placeholder = "Cantidad del pago, ejemplo 12.95"
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    },
                                    transferenciaBancaria: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "transferenciaBancaria")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Determina la cantidad de la transferencia bancaria. Recuerda que la cantidad debe tener dos decimales siempre, por ejemplo, 10.00.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "transferenciaUID")
                                        campo.placeholder = "Código identificador de la transferencia bancaria."
                                        contenedor.appendChild(campo)
                                        campo = document.createElement("input")
                                        campo.setAttribute("campo", "cantidad")
                                        campo.placeholder = "Cantidad especificada en la transferencia bancaria, ejemplo: 12.95."
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    },
                                    cheque: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "cheque")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Determina la cantidad del pago en modalidad cheque bancario. Recuerda que la cantidad especificada debe tener dos decimales siempre, por ejemplo, 10.00.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "chequeUID")
                                        campo.placeholder = "Código identificador del cheque."
                                        contenedor.appendChild(campo)
                                        campo = document.createElement("input")
                                        campo.setAttribute("campo", "cantidad")
                                        campo.placeholder = "Cantidad especificada en el cheque, ejemplo: 12.95."
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    },
                                    tarjeta: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "tarjeta")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Determina la cantidad del pago en tarjeta, inserte los datos del pago realizado con el TPV.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "tarjetaUltimos")
                                        campo.placeholder = "Cuatro últimos dígitos de la tarjeta."
                                        contenedor.appendChild(campo)
                                        campo = document.createElement("input")
                                        campo.setAttribute("campo", "cantidad")
                                        campo.placeholder = "Cantidad especificada en el pago por TPV, ejemplo: 12.95."
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    },
                                    pasarela: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "pasarela")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Si algún pago no se ha sincronizado o si quieres sincronizar un pago, inserta el código identificador del pago de la pasarela.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "pagoUIDPasarela")
                                        campo.placeholder = "Código identificador de pago, por ejemplo: h8qikEKdMiyPEtm5pKgjwv1fMSeZY"
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    }
                                }
                            },
                            eliminarPagoManual: {
                                UI: (metadatos) => {

                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add("flexVertical", "gap6", "padding6", "borderRadius20", "borderGrey1")
                                    const infoGlobal = document.createElement("div")
                                    infoGlobal.classList.add("padding14")
                                    infoGlobal.textContent = `Para eliminar este pago, escriba la palabra eliminar en el campo de texto y pulse el botón eliminar. Recuerda que esto es una operación irreversible porque estás eliminado el pago de la base de datos. Los reembolsos de este pago también se eliminarán.`
                                    contenedor.appendChild(infoGlobal)
                                    const campoEliminar = document.createElement("input")
                                    campoEliminar.classList.add("detallesReserva_reembolso_campo")
                                    campoEliminar.setAttribute("campo", "palabra")
                                    campoEliminar.placeholder = "Escriba la palabra eliminar"
                                    contenedor.appendChild(campoEliminar)
                                    const botonConfirmar = document.createElement("div")
                                    botonConfirmar.classList.add("botonV1BlancoIzquierda")
                                    botonConfirmar.setAttribute("componente", "botonActualizarEnlace")
                                    botonConfirmar.textContent = "Eliminar irreversiblemente el pago"
                                    botonConfirmar.addEventListener("click", () => {
                                        const metadatos = {
                                            instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.eliminarPagoManual.confirmar(metadatos)
                                    })
                                    contenedor.appendChild(botonConfirmar)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.setAttribute("componente", "botonActualizarEnlace")
                                    botonCancelar.textContent = "Cerrar opciones de eliminación del pago"
                                    botonCancelar.addEventListener("click", (e) => {
                                        const selectorContenedorEliminar = e.target.closest("[contenedor=eliminarPago]")
                                        selectorContenedorEliminar.innerHTML = null
                                        selectorContenedorEliminar.removeAttribute("style")
                                    })
                                    contenedor.appendChild(botonCancelar)
                                    return contenedor
                                },
                                confirmar: async (metadatos) => {
                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const metadatosPantallaCarga = {
                                        mensaje: "Esperando al servidor...",
                                        instanciaUID: instanciaUID_pantallaDeCarga,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const pagoUID = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector("[pagoUID]").getAttribute("pagoUID")
                                    const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector("[contenedor=eliminarPago] [campo=palabra]").value
                                    const instanciaUID_contenedorDinamicoTransacciones = document.querySelector(`[reservaUID="${reservaUID}"] [contenedorID=transacciones]`).getAttribute("instanciaUID")
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/eliminarPagoManual",
                                        pagoUID: String(pagoUID),
                                        palabra: palabra,
                                        reservaUID: String(reservaUID)
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaDeCarga}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const datosActualizar = {
                                            reservaUID: reservaUID,
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.actualizarDatosGlobalesPago(datosActualizar)
                                        document.body.removeAttribute("style")
                                        document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)?.remove()


                                        const contenedorTransacciones = document.querySelector(`[contenedorID=transacciones][instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                        const listaDePagos = contenedorTransacciones.querySelector(`[contenedor=listaDePagos]`)
                                        listaDePagos.querySelector(`[pagoUID="${pagoUID}"]`)?.remove()
                                        const pagosRestantes = listaDePagos.querySelectorAll(`[pagoUID]`)
                                        if (pagosRestantes.length === 0) {
                                            listaDePagos?.remove()
                                            const infoNoPagoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.infoNoPagos()
                                            contenedorTransacciones.querySelector("[contenedor=transaccionesUI]").appendChild(infoNoPagoUI)
                                        }
                                    }
                                }
                            },
                            actualizarDatosGlobalesPago: async (metadatos) => {
                                const reservaUID = metadatos.reservaUID
                                const instanciaUID_contenedorDinamicoTransacciones = document.querySelector("[contenedorID=transacciones]").getAttribute("instanciaUID")
                                const selectorTotalReservaEnPanelGlobal = document.querySelector(`[dataReserva=totalReservaConImpuestos]`)
                                const selectorTotalReserva = document.querySelector(`[componentePago=totalReserva]`)
                                const selectorTotalPagado = document.querySelector(`[componentePago=totalPagado]`)
                                const selectorFaltantePorPagar = document.querySelector(`[componentePago=faltantePorPagar]`)
                                const selectorEstadoPago = document.querySelector(`[dataReserva=estadoPago]`)
                                const selectorPorecentajeReembolsado = document.querySelector(`[componentePago=porcentajeReembolsado]`)
                                const selectorPorecentajePagado = document.querySelector(`[componentePago=porcentajePagado]`)
                                const selectorTotalReembolsado = document.querySelector(`[componentePago=totalReembolsado]`)
                                const reservaAcutalRenderizada = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                if (reservaAcutalRenderizada === reservaUID) {
                                    selectorTotalReservaEnPanelGlobal.innerHTML = "Recalculando..."
                                }
                                selectorTotalReserva.innerHTML = "Recalculando..."
                                selectorTotalPagado.innerHTML = "Recalculando..."
                                selectorFaltantePorPagar.innerHTML = "Recalculando..."
                                selectorEstadoPago.innerHTML = "Recalculando..."
                                selectorPorecentajeReembolsado.innerHTML = "Total reembolsado"
                                selectorPorecentajePagado.innerHTML = "Total pagado"
                                selectorTotalReembolsado.innerHTML = "Recalculando..."
                                const obtenerPagoaActualizados = {
                                    zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                    reservaUID: reservaUID,
                                    capas: [
                                        "detallesPagos",
                                    ]
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(obtenerPagoaActualizados)
                                const seleccionarInstancia = document.querySelector(`[instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                if (respuestaServidor?.error) {
                                    if (seleccionarInstancia) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                }
                                if (respuestaServidor?.ok) {
                                    const data = respuestaServidor.ok
                                    const estadoPago = respuestaServidor.ok.global.estadoPagoIDV
                                    const detallesPagos = data.detallesPagos
                                    const totalReserva = detallesPagos.totalReserva
                                    const totalPagado = detallesPagos.totalPagado
                                    const faltantePorPagar = detallesPagos.faltantePorPagar
                                    const totalReembolsado = detallesPagos.totalReembolsado
                                    const porcentajeReembolsado = detallesPagos.porcentajeReembolsado
                                    const porcentajePagado = detallesPagos.porcentajePagado
                                    if (reservaAcutalRenderizada === reservaUID) {
                                        selectorTotalReservaEnPanelGlobal.innerHTML = totalReserva + "$"
                                    }
                                    if (!seleccionarInstancia) {


                                    }
                                    selectorTotalReserva.innerHTML = totalReserva + "$"
                                    selectorTotalPagado.innerHTML = totalPagado + "$"
                                    selectorFaltantePorPagar.innerHTML = faltantePorPagar + "$"
                                    selectorPorecentajeReembolsado.innerHTML = `Total reembolsado (${porcentajeReembolsado})`
                                    selectorPorecentajePagado.innerHTML = `Total pagado (${porcentajePagado})`
                                    selectorTotalReembolsado.innerHTML = totalReembolsado + "$"
                                    let estadoPagoUI
                                    if (estadoPago === "pagado") {
                                        estadoPagoUI = "Pagado"
                                    }
                                    if (estadoPago === "noPagado") {
                                        estadoPagoUI = "No pagado"
                                    }
                                    if (estadoPago === "pagadoParcialmente") {
                                        estadoPagoUI = "Pagado parcialmente"
                                    }
                                    if (estadoPago === "pagadoSuperadamente") {
                                        estadoPagoUI = "Pagado superadamente"
                                    }
                                    selectorEstadoPago.innerHTML = estadoPagoUI
                                }
                            },

                        },
                        servicios: {
                            arranque: async function (e) {
                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const instanciaUID_contenedorServicios = casaVitini.utilidades.codigoFechaInstancia()
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()

                                const contenedor = document.createElement("div")
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "padding6"
                                )
                                contenedor.setAttribute("instanciaUID", instanciaUID_contenedorServicios)
                                contenedor.setAttribute("componente", "categoriaServicios")
                                contenedor.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(contenedor)
                                const reservaUI = document.querySelector("[reservaUID]")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                const reservaUID = reservaUI.getAttribute("reservaUID")

                                const transaccion = {
                                    reservaUID
                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"
                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "servicios",
                                    ]
                                }



                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[componente=categoriaServicios][instanciaUID="${instanciaUID_contenedorServicios}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null
                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }
                                if (respuestaServidor?.ok) {

                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReserva_enlacesDePago_bloqueBotones")

                                    const boton = document.createElement("div")
                                    boton.classList.add("detallesReserva_transacciones_botonV1")
                                    boton.textContent = "Insertar servicio"
                                    boton.addEventListener("click", () => {
                                        this.componentesUI.insertarServicio.ui({
                                            instanciaUID_contenedorServicios: instanciaUID_contenedorServicios
                                        })
                                    })
                                    bloqueBotones.appendChild(boton)

                                    if (configuracionVista === "publica") {

                                    } else {
                                        instanciaDestino.appendChild(bloqueBotones)
                                    }

                                    const contenedorListaServicios = document.createElement("div")
                                    contenedorListaServicios.classList.add(
                                        "flexVertical",
                                        "gap6",
                                    )
                                    contenedorListaServicios.setAttribute("componente", "contenedorListaServiciosEnReserva")
                                    instanciaDestino.appendChild(contenedorListaServicios)

                                    instanciaDestino.style.justifyContent = "flex-start";
                                    const serviciosEnReserva = respuestaServidor.ok.servicios
                                    if (serviciosEnReserva.length === 0) {
                                        contenedorListaServicios.style.display = "none"

                                        const infoSinEnlaces = this.componentesUI.infoSinServiciosUI()
                                        instanciaDestino.appendChild(infoSinEnlaces)
                                    }
                                    if (serviciosEnReserva.length > 0) {
                                        const contenedorListaServicios = instanciaDestino.querySelector(`[componente=contenedorListaServiciosEnReserva]`)
                                        for (const servicioEnReserva of serviciosEnReserva) {


                                            const servicioUI = this.componentesUI.servicioUI({
                                                servicioUID_enReserva: servicioEnReserva.servicioUID,
                                                instanciaUID_contenedorServicios,
                                                nombreInterno: servicioEnReserva.nombre,
                                                contenedor: servicioEnReserva.contenedor,
                                                opcionesSeleccionadas: servicioEnReserva.opcionesSel

                                            })
                                            contenedorListaServicios.appendChild(servicioUI)
                                        }
                                    }
                                }
                            },
                            componentesUI: {
                                acutalizarServicioEnReserva: {

                                    ui: async function (data) {

                                        const servicioUID_enReserva = data.servicioUID_enReserva
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const main = document.querySelector("main")
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const instanciaUID_UIFlotanteServicios = ui.getAttribute("instanciaUID")
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        main.appendChild(ui)

                                        const botonCerrar = document.createElement("div")
                                        botonCerrar.classList.add("botonV1")
                                        botonCerrar.textContent = "Cerrar y volver"
                                        botonCerrar.setAttribute("boton", "cancelar")
                                        botonCerrar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        constructor.appendChild(botonCerrar)

                                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                                        constructor.appendChild(spinner)

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/servicios/obtenerDetallesDelServicioEnReserva",
                                            servicioUID_enReserva: String(servicioUID_enReserva),
                                            reservaUID: String(reservaUID)
                                        })

                                        const ui_enEspera = document.querySelector(`[instanciaUID="${instanciaUID_UIFlotanteServicios}"]`)
                                        if (!ui_enEspera) { return }
                                        if (respuestaServidor?.error) {
                                            const info = {
                                                titulo: "No existe ningúna servicio con ese identificador",
                                                descripcion: "Revisa el identificador porque este servicio que buscas no existe. Quizás este identificador existió y borraste esta servicio.."
                                            }
                                            casaVitini.ui.componentes.mensajeSimple(info)
                                        } else if (respuestaServidor?.ok) {
                                            constructor.innerHTML = null

                                            const botonCerrar = document.createElement("div")
                                            botonCerrar.classList.add("botonV1")
                                            botonCerrar.textContent = "Cerrar y volver"
                                            botonCerrar.setAttribute("boton", "cancelar")
                                            botonCerrar.addEventListener("click", () => {
                                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            })
                                            constructor.appendChild(botonCerrar)

                                            const servicio = respuestaServidor.servicio
                                            const servicioUID = servicio.servicioUID
                                            const contenedor = servicio.contenedor

                                            const servicioUI = casaVitini.view.__sharedMethods__.servicioUI({
                                                servicioUID,
                                                contenedor
                                            })
                                            servicioUI.setAttribute("estadoServicio", "selCompleta")
                                            servicioUI.querySelector("[componente=indicadorSelecion]").style.background = "rgb(0, 255, 0)"

                                            constructor.appendChild(servicioUI)
                                            const opcionesSel = servicio.opcionesSel

                                            Object.entries(opcionesSel).forEach(([grupoIDV, contenedorSel]) => {
                                                const selectorGrupo = servicioUI.querySelector(`[grupoIDV="${grupoIDV}"]`)
                                                contenedorSel.forEach(opcionIDV => {
                                                    const selectorOpcion = selectorGrupo.querySelector(`[opcionIDV="${opcionIDV}"]`)
                                                    selectorOpcion.setAttribute("estado", "activado")
                                                    selectorOpcion.querySelector("[componente=indicadorSelecion]").style.background = "rgb(0, 255, 0)"
                                                })
                                            })


                                            const botonInsertar = document.createElement("div")
                                            botonInsertar.classList.add("botonV1BlancoIzquierda")
                                            botonInsertar.textContent = "Actualizar servicio en reserva"
                                            botonInsertar.setAttribute("boton", "volver")
                                            botonInsertar.addEventListener("click", (e) => {
                                                const servicioUI_selector = e.target.closest("[componente=contenedor]").querySelector("[servicioUID]")

                                                const servicioUID = servicioUI_selector.getAttribute("servicioUID")
                                                const grupoDeOpciones = servicioUI_selector.querySelector("[area=grupoOpciones]").querySelectorAll("[componente=grupo]")
                                                const opcionesSeleccionadasDelServicio = {
                                                    servicioUID,
                                                    opcionesSeleccionadas: {}
                                                }
                                                const opcionesSeleccionadas = opcionesSeleccionadasDelServicio.opcionesSeleccionadas
                                                grupoDeOpciones.forEach((grupo) => {
                                                    const grupoIDV = grupo.getAttribute("grupoIDV")
                                                    opcionesSeleccionadas[grupoIDV] = []

                                                    const opcionesDelGrupoSeleccionadas = grupo.querySelectorAll("[selector=opcion][estado=activado]")
                                                    opcionesDelGrupoSeleccionadas.forEach(opcionSel => {
                                                        const opcionIDV = opcionSel.getAttribute("opcionIDV")
                                                        opcionesSeleccionadas[grupoIDV].push(opcionIDV)
                                                    })
                                                })

                                                // Poner una advertenc  ia superpuesta para al espera.
                                                this.confirmarActualizar({
                                                    servicioUID_enReserva,
                                                    reservaUID,
                                                    instanciaUID_UIFlotanteServicios,
                                                    instanciaUID_contenedorServicios,
                                                    opcionesSeleccionadasDelServicio
                                                })

                                            })
                                            constructor.appendChild(botonInsertar)
                                        }
                                    },
                                    confirmarActualizar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const servicioUID_enReserva = String(data.servicioUID_enReserva)
                                        const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const opcionesSeleccionadasDelServicio = data.opcionesSeleccionadasDelServicio

                                        const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                            mensaje: "Actualizando el servicio en la reserva",
                                            textoBoton: "ocultar",
                                            instanciaUID: instanciaPantallaCarga
                                        })

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/servicios/actualizarServicioEnReserva",
                                            reservaUID,
                                            servicioUID_enReserva,
                                            opcionesSeleccionadasDelServicio
                                        })


                                        document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`).remove()
                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {

                                            const servicioData = respuestaServidor.servicio
                                            const servicioUID_enReserva = servicioData.servicioUID
                                            const nombreInterno = servicioData.nombre
                                            const contenedor = servicioData.contenedor
                                            const opcionesSel = servicioData.opcionesSel


                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()

                                            const selectorContenedorServicios = document.querySelector(`[instanciaUID="${instanciaUID_contenedorServicios}"]`)
                                            if (!selectorContenedorServicios) {
                                                return
                                            }


                                            const servicioUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.servicios.componentesUI.servicioUI({
                                                servicioUID_enReserva: servicioUID_enReserva,
                                                instanciaUID_contenedorServicios,
                                                nombreInterno: nombreInterno,
                                                contenedor: contenedor,
                                                opcionesSeleccionadas: opcionesSel

                                            })
                                            const selectorInfo = selectorContenedorServicios.querySelector("[componente=contenedorInfoSinServicios]")
                                            selectorInfo?.remove()

                                            const selectorListaServicios = selectorContenedorServicios.querySelector("[componente=contenedorListaServiciosEnReserva]")
                                            selectorListaServicios.removeAttribute("style")

                                            const selContenedorServicio = selectorListaServicios.querySelector(`[servicioUID_enReserva="${servicioUID_enReserva}"]`)
                                            selectorListaServicios.replaceChild(servicioUI, selContenedorServicio);


                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },
                                },
                                insertarServicio: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_UIFlotanteServicios = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        main.appendChild(ui)

                                        await this.despliegeListaServicios({
                                            ui,
                                            instanciaUID_UIFlotanteServicios,
                                            instanciaUID_contenedorServicios,
                                            reservaUID
                                        })

                                    },
                                    despliegeListaServicios: async function (data) {

                                        const ui = data.ui
                                        const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const reservaUID = data.reservaUID

                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        constructor.innerHTML = null
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo servicios...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)


                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/servicios/obtenerServiciosDisponibles"
                                        })
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_UIFlotanteServicios}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()
                                            constructor.appendChild(this.botonCancelar())

                                            const servicios = respuestaServidor.servicios

                                            const contenedor = document.createElement("div")
                                            contenedor.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap10",
                                            )
                                            constructor.appendChild(contenedor)
                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activado"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivado"
                                                }

                                            }

                                            servicios.forEach((detalles) => {
                                                const nombre = detalles.nombre
                                                const servicioUID = detalles.servicioUID
                                                const estadoIDV = detalles.estadoIDV
                                                const zonaIDV = detalles.zonaIDV
                                                const contenedorData = detalles.contenedor


                                                const contenedorServicio = document.createElement("div")
                                                contenedorServicio.setAttribute("servicioUID", servicioUID)
                                                contenedorServicio.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = nombre
                                                contenedorGlobal.appendChild(nombreOfertaUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado del servicio"
                                                contenedorGlobal.appendChild(estadoTitulo)


                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedorServicio.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )
                                                botonInsertar.textContent = "Seleccionar servicio"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.despliegeDeSeleccionEnServicio({
                                                        reservaUID,
                                                        servicioUID,
                                                        instanciaUID_UIFlotanteServicios,
                                                        instanciaUID_contenedorServicios,
                                                        ui,
                                                        constructor
                                                    })

                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir al servicio"
                                                botonVerOferta.setAttribute("href", "/administracion/servicios/servicio:" + servicioUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/servicios/servicio:" + servicioUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)

                                                contenedorServicio.appendChild(contendorBotones)
                                                contenedor.appendChild(contenedorServicio)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }
                                    },
                                    despliegeDeSeleccionEnServicio: async function (data) {

                                        const reservaUID = data.reservaUID
                                        const servicioUID = data.servicioUID
                                        const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const ui = data.ui
                                        const constructor = data.constructor
                                        constructor.innerHTML = null

                                        const botonCerrar = document.createElement("div")
                                        botonCerrar.classList.add("botonV1")
                                        botonCerrar.textContent = "Cerrar y volver"
                                        botonCerrar.setAttribute("boton", "cancelar")
                                        botonCerrar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        constructor.appendChild(botonCerrar)

                                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/servicios/detallesServicio",
                                            servicioUID: String(servicioUID)
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const ui_enEspera = document.querySelector(`[instanciaUID="${instanciaUID_UIFlotanteServicios}"]`)
                                        if (!ui_enEspera) { return }
                                        if (respuestaServidor?.error) {
                                            const info = {
                                                titulo: "No existe ningúna servicio con ese identificador",
                                                descripcion: "Revisa el identificador porque este servicio que buscas no existe. Quizás este identificador existió y borraste esta servicio.."
                                            }
                                            casaVitini.ui.componentes.mensajeSimple(info)
                                        } else if (respuestaServidor?.ok) {
                                            constructor.innerHTML = null

                                            const botonCerrar = document.createElement("div")
                                            botonCerrar.classList.add("botonV1")
                                            botonCerrar.textContent = "Cerrar y volver"
                                            botonCerrar.setAttribute("boton", "cancelar")
                                            botonCerrar.addEventListener("click", () => {
                                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            })
                                            constructor.appendChild(botonCerrar)

                                            const botonVolver = document.createElement("div")
                                            botonVolver.classList.add("botonV1BlancoIzquierda")
                                            botonVolver.textContent = "Volver a la lista de servicios"
                                            botonVolver.setAttribute("boton", "volver")
                                            botonVolver.addEventListener("click", () => {
                                                return this.despliegeListaServicios({
                                                    ui,
                                                    instanciaUID_UIFlotanteServicios,
                                                    instanciaUID_contenedorServicios,
                                                    reservaUID
                                                })
                                            })

                                            constructor.appendChild(botonVolver)

                                            const servicio = respuestaServidor.ok
                                            const servicioUID = servicio.servicioUID
                                            const contenedor = servicio.contenedor

                                            const servicioUI = casaVitini.view.__sharedMethods__.servicioUI({
                                                servicioUID,
                                                contenedor

                                            })
                                            constructor.appendChild(servicioUI)


                                            const botonInsertar = document.createElement("div")
                                            botonInsertar.classList.add("botonV1BlancoIzquierda")
                                            botonInsertar.textContent = "Insertar servicio en reserva"
                                            botonInsertar.setAttribute("boton", "volver")
                                            botonInsertar.addEventListener("click", (e) => {
                                                const servicioUI_selector = e.target.closest("[componente=contenedor]").querySelector("[servicioUID]")

                                                const servicioUID = servicioUI_selector.getAttribute("servicioUID")
                                                const grupoDeOpciones = servicioUI_selector.querySelector("[area=grupoOpciones]").querySelectorAll("[componente=grupo]")
                                                const opcionesSeleccionadasDelServicio = {
                                                    servicioUID,
                                                    opcionesSeleccionadas: {}
                                                }
                                                const opcionesSeleccionadas = opcionesSeleccionadasDelServicio.opcionesSeleccionadas
                                                grupoDeOpciones.forEach((grupo) => {
                                                    const grupoIDV = grupo.getAttribute("grupoIDV")
                                                    opcionesSeleccionadas[grupoIDV] = []

                                                    const opcionesDelGrupoSeleccionadas = grupo.querySelectorAll("[selector=opcion][estado=activado]")
                                                    opcionesDelGrupoSeleccionadas.forEach(opcionSel => {
                                                        const opcionIDV = opcionSel.getAttribute("opcionIDV")
                                                        opcionesSeleccionadas[grupoIDV].push(opcionIDV)
                                                    })
                                                })

                                                // Poner una advertenc  ia superpuesta para al espera.
                                                this.confirmarInsertar({
                                                    servicioUID,
                                                    reservaUID,
                                                    instanciaUID_UIFlotanteServicios,
                                                    instanciaUID_contenedorServicios,
                                                    opcionesSeleccionadasDelServicio
                                                })

                                            })
                                            constructor.appendChild(botonInsertar)
                                        }
                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const servicioUID = String(data.servicioUID)
                                        const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const opcionesSeleccionadasDelServicio = data.opcionesSeleccionadasDelServicio

                                        const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                            mensaje: "Insertando el servicio en la reserva",
                                            textoBoton: "ocultar",
                                            instanciaUID: instanciaPantallaCarga
                                        })

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/servicios/insertarServicioEnReserva",
                                            reservaUID,
                                            servicioUID,
                                            opcionesSeleccionadasDelServicio
                                        })

                                        document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`).remove()

                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            const servicioData = respuestaServidor.servicio
                                            const servicioUID_enReserva = servicioData.servicioUID
                                            const nombreInterno = servicioData.nombre
                                            const contenedor = servicioData.contenedor
                                            const opcionesSel = servicioData.opcionesSel

                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()

                                            const selectorContenedorServicios = document.querySelector(`[instanciaUID="${instanciaUID_contenedorServicios}"]`)
                                            if (!selectorContenedorServicios) {
                                                return
                                            }
                                            const servicioUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.servicios.componentesUI.servicioUI({
                                                servicioUID_enReserva: servicioUID_enReserva,
                                                instanciaUID_contenedorServicios: instanciaUID_contenedorServicios,
                                                nombreInterno: nombreInterno,
                                                contenedor: contenedor,
                                                opcionesSeleccionadas: opcionesSel
                                            })
                                            const selectorInfo = selectorContenedorServicios.querySelector("[componente=contenedorInfoSinServicios]")
                                            selectorInfo?.remove()

                                            const selectorListaServicios = selectorContenedorServicios.querySelector("[componente=contenedorListaServiciosEnReserva]")
                                            selectorListaServicios.removeAttribute("style")
                                            selectorListaServicios.appendChild(servicioUI)

                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },
                                },
                                servicioUI: function (data) {

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const servicioUID_enReserva = data.servicioUID_enReserva
                                    const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                    const nombreInterno = data.nombreInterno
                                    const opcionesSeleccionadas = data.opcionesSeleccionadas
                                    const contenedor = data.contenedor

                                    const definicion = contenedor.definicion
                                    const fechaFinal = contenedor.fechaFinal
                                    const duracionIDV = contenedor.duracionIDV
                                    const fechaInicio = contenedor.fechaInicio
                                    const tituloPublico = contenedor.tituloPublico
                                    const servicioUID = contenedor.servicioUID
                                    const disponibilidadIDV = contenedor.disponibilidadIDV
                                    const gruposDeOpciones = contenedor.gruposDeOpciones


                                    const diccionario = {
                                        disponibilidad: {
                                            constante: "Disponible",
                                            variable: "Disponibilidad variable"
                                        }
                                    }

                                    const servicioUI = document.createElement("div")
                                    servicioUI.setAttribute("servicioUID_enReserva", servicioUID_enReserva)
                                    servicioUI.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6",
                                        "backgroundGrey1",
                                        "borderRadius14"
                                    )
                                    const contenedorData = document.createElement("div")
                                    contenedorData.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "padding10"
                                    )
                                    servicioUI.appendChild(contenedorData)

                                    const contenedorNombreInterno = document.createElement("div")
                                    contenedorNombreInterno.classList.add(
                                        "flexVertical",
                                    )
                                    if (configuracionVista === "publica") {
                                    } else {
                                        contenedorData.appendChild(contenedorNombreInterno)
                                    }

                                    const tituluNombreInternoUI = document.createElement("p")
                                    tituluNombreInternoUI.textContent = `Nombre administrativo`
                                    contenedorNombreInterno.appendChild(tituluNombreInternoUI)

                                    const nombreInternoUI = document.createElement("p")
                                    nombreInternoUI.classList.add(
                                        "negrita")
                                    nombreInternoUI.textContent = `${nombreInterno}`
                                    contenedorNombreInterno.appendChild(nombreInternoUI)

                                    const contenedorNombrePublico = document.createElement("div")
                                    contenedorNombrePublico.classList.add(
                                        "flexVertical",
                                    )
                                    contenedorData.appendChild(contenedorNombrePublico)

                                    const tituluNombrePublico = document.createElement("p")
                                    tituluNombrePublico.textContent = `Nombre público`
                                    contenedorNombrePublico.appendChild(tituluNombrePublico)

                                    const titulo = document.createElement("p")
                                    titulo.classList.add(
                                        "negrita")
                                    titulo.textContent = tituloPublico
                                    contenedorNombrePublico.appendChild(titulo)


                                    const disponibilidadUI = document.createElement("p")
                                    disponibilidadUI.classList.add(
                                    )
                                    disponibilidadUI.textContent = diccionario.disponibilidad[disponibilidadIDV]
                                    contenedorData.appendChild(disponibilidadUI)


                                    if (disponibilidadIDV === "variable") {

                                        const info = document.createElement("p")
                                        info.classList.add(
                                        )
                                        info.textContent = `Este servicio tiene una disponibilidad limitada. Es por eso que si selecciona este servicio, nos pondremos en contacto con el titular de la reserva en las próximas horas para confirmarle la disponibilidad del servicio para su reserva.`
                                        contenedorData.appendChild(info)
                                    }



                                    if (duracionIDV === "rango") {
                                        const contenedorDuracion = document.createElement("div")
                                        contenedorDuracion.classList.add(
                                            "flexVertical",

                                        )
                                        contenedorData.appendChild(contenedorDuracion)

                                        const info = document.createElement("p")
                                        info.classList.add("negrita")
                                        info.textContent = `Servicio disponible solo desde ${fechaInicio} hata ${fechaFinal}. Ambas fechas incluidas.`
                                        contenedorDuracion.appendChild(info)

                                    }
                                    const definicionUI = document.createElement("p")
                                    definicionUI.classList.add(
                                    )
                                    definicionUI.textContent = definicion
                                    contenedorData.appendChild(definicionUI)





                                    Object.entries(gruposDeOpciones).forEach(([grupoIDV, gDP]) => {
                                        const nombreGrupo = gDP.nombreGrupo
                                        const opcionesGrupo = gDP.opcionesGrupo

                                        const contenedorGrupo = document.createElement("div")
                                        contenedorGrupo.setAttribute("grupoIDV", grupoIDV)
                                        contenedorGrupo.classList.add(
                                            "flexVertical", "gap6", "borderGrey1", "borderRadius14", "padding6"
                                        )


                                        const tituloGrupo = document.createElement("p")
                                        tituloGrupo.classList.add("negrita", "padding10")
                                        tituloGrupo.textContent = nombreGrupo
                                        contenedorGrupo.appendChild(tituloGrupo)


                                        const contenedorOpcionesGrupo = document.createElement("div")
                                        contenedorOpcionesGrupo.classList.add(
                                            "flexVertical", "gap6"
                                        )
                                        contenedorGrupo.appendChild(contenedorOpcionesGrupo)

                                        let interruptor = false

                                        opcionesGrupo.forEach((op) => {
                                            const opcionIDV = op.opcionIDV
                                            const nombreOpcion = op.nombreOpcion
                                            const precioOpcion = op.precioOpcion ? op.precioOpcion + "$" : "0.00$ (Sin coste añadido)"

                                            const selectorOpcionesGrupo = opcionesSeleccionadas[grupoIDV] || []
                                            if (selectorOpcionesGrupo.includes(opcionIDV)) {
                                                interruptor = true
                                                const contenedorOpcion = document.createElement("div")
                                                contenedorOpcion.classList.add(
                                                    "flexVertical", "gap6", "backgroundGrey1", "borderRadius10", "padding14"
                                                )
                                                contenedorOpcionesGrupo.appendChild(contenedorOpcion)

                                                // const grupoRenderizado_selector = servicioUI.querySelector(`[grupoIDV="${grupoIDV}"]`)
                                                // if (!grupoRenderizado_selector) {
                                                //     servicioUI.appendChild(contenedorGrupo)
                                                // }

                                                const opcionUI = document.createElement("p")
                                                opcionUI.setAttribute("opcionIDV", opcionIDV)

                                                opcionUI.textContent = nombreOpcion
                                                contenedorOpcion.appendChild(opcionUI)


                                                const precioUI = document.createElement("p")
                                                precioUI.setAttribute("opcionIDV", opcionIDV)
                                                precioUI.classList.add(
                                                    "textoNegrita"
                                                )
                                                precioUI.textContent = precioOpcion
                                                contenedorOpcion.appendChild(precioUI)
                                            }
                                        })
                                        if (interruptor) {
                                            servicioUI.appendChild(contenedorGrupo)
                                        }
                                    })

                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6"
                                    )

                                    if (configuracionVista === "publica") {
                                    } else {
                                        servicioUI.appendChild(contenedorBotones)
                                    }


                                    const botonModificar = document.createElement("div")
                                    botonModificar.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonModificar.textContent = "Modificar servicio en reserva"
                                    botonModificar.addEventListener("click", () => {

                                        this.acutalizarServicioEnReserva.ui({
                                            servicioUID_enReserva,
                                            instanciaUID_contenedorServicios
                                        })
                                    })
                                    contenedorBotones.appendChild(botonModificar)


                                    const botonIr = document.createElement("a")
                                    botonIr.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonIr.textContent = "Ir al servicio"
                                    botonIr.setAttribute("href", "/administracion/servicios/servicio:" + servicioUID)
                                    botonIr.setAttribute("target", "_blank")
                                    contenedorBotones.appendChild(botonIr)

                                    const botonEliminar = document.createElement("div")
                                    botonEliminar.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonEliminar.textContent = "Eliminar servicio de la reserva"
                                    botonEliminar.addEventListener("click", () => {
                                        this.
                                            eliminarServicio
                                            .ui({
                                                instanciaUID_contenedorServicios,
                                                servicioUID_enReserva,
                                                nombreInterno
                                            })
                                    })
                                    contenedorBotones.appendChild(botonEliminar)



                                    return servicioUI
                                },
                                eliminarServicio: {
                                    ui: async function (data) {
                                        const nombreInterno = data.nombreInterno
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const servicioUID_enReserva = data.servicioUID_enReserva

                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        ui.style.justifyContent = "center"
                                        const instanciaUID_eliminarServicio = ui.getAttribute("instanciaUID")
                                        const constructor = ui.querySelector("[componente=constructor]")

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Confirmar eliminar el servicio ${nombreInterno} de la reserva`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = "Var a eliminar el servicio de la reserva, ¿Estas de acuerdo?"

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Comfirmar la eliminacion"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarEliminar({
                                                servicioUID_enReserva,
                                                instanciaUID_eliminarServicio,
                                                instanciaUID_contenedorServicios
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"
                                        document.querySelector("main").appendChild(ui)

                                    },
                                    confirmarEliminar: async function (data) {
                                        const servicioUID_enReserva = String(data.servicioUID_enReserva)
                                        const instanciaUID_eliminarServicio = data.instanciaUID_eliminarServicio
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios

                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarServicio}"]`)
                                        const contenedor = ui.querySelector("[componente=constructor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Eliminado servicio en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/servicios/eliminarServicioEnReserva",
                                            servicioUID_enReserva
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()
                                            const selectorContenedorServicios = document.querySelector(`[instanciaUID="${instanciaUID_contenedorServicios}"]`)
                                            if (!selectorContenedorServicios) {
                                                return
                                            }
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            selectorContenedorServicios.querySelector(`[servicioUID_enReserva="${servicioUID_enReserva}"]`)?.remove()

                                            const selectorContenedoresDeServiciosRenderizados = selectorContenedorServicios.querySelectorAll("[servicioUID_enReserva]")
                                            if (selectorContenedoresDeServiciosRenderizados.length === 0) {
                                                selectorContenedorServicios.querySelector("[componente=contenedorListaServiciosEnReserva]").style.display = "none"
                                                const infoSinEnlaces = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.servicios.componentesUI.infoSinServiciosUI()

                                                selectorContenedorServicios.appendChild(infoSinEnlaces)
                                            }
                                        }

                                    },

                                },
                                infoSinServiciosUI: () => {
                                    const infoSinEnlaces = document.createElement("div")
                                    infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                                    infoSinEnlaces.setAttribute("componente", "contenedorInfoSinServicios")
                                    infoSinEnlaces.textContent = "No hay ningún servicio en la reserva."
                                    return infoSinEnlaces
                                }
                            },

                        },
                        desgloseTotal: {
                            arranque: async function () {
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                document.querySelector(`[categoriaReserva=desgloseTotal]`).setAttribute("estadoCategoria", "actual")
                                const reservaUI = document.querySelector("[reservaUID]")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                const reservaUID = reservaUI.getAttribute("reservaUID")


                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                contenedorDinamico.style.background = "transparent"
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()
                                const contenedorDesgloseDelTotal = document.createElement("div")
                                contenedorDesgloseDelTotal.classList.add("administracion_reserver_detallesReserva_contenedorDesgloseTotal")
                                contenedorDesgloseDelTotal.setAttribute("instanciaUID", instanciaUID)
                                contenedorDesgloseDelTotal.setAttribute("componente", "contenedorDesgloseTotal")
                                contenedorDesgloseDelTotal.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(contenedorDesgloseDelTotal)
                                const transaccion = {
                                    reservaUID

                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"
                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "desgloseFinanciero",
                                    ]
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                const instanciaDestino = document.querySelector(`[componente=contenedorDesgloseTotal][instanciaUID="${instanciaUID}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null

                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }

                                if (respuestaServidor?.ok) {

                                    const panelBotones = document.createElement("nav")
                                    panelBotones.classList.add(
                                        "borderRadius10",
                                        "flexHorizontal",
                                        "gap6",
                                        "paddinHorizontal6",
                                        "paddinTop6",
                                        "elementosExpandidos",

                                    )


                                    const botonInsertarDescuento = document.createElement("div")
                                    botonInsertarDescuento.classList.add(
                                        "comportamientoBoton",
                                        "botonV3",
                                        "width100"
                                    )
                                    botonInsertarDescuento.textContent = "Insertar descuento"
                                    botonInsertarDescuento.addEventListener("click", () => {
                                        this.componentesUI.insertarDescuentos.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    panelBotones.appendChild(botonInsertarDescuento)

                                    const botonDescuentosCompatibles = document.createElement("div")
                                    botonDescuentosCompatibles.classList.add(
                                        "comportamientoBoton",
                                        "botonV3",
                                        "width100"
                                    )
                                    botonDescuentosCompatibles.textContent = "Descuentos compatibles"
                                    panelBotones.appendChild(botonDescuentosCompatibles)

                                    const botonSobreControlDePrecios = document.createElement("div")
                                    botonSobreControlDePrecios.classList.add(
                                        "comportamientoBoton",
                                        "botonV1",
                                        "width100"
                                    )
                                    botonSobreControlDePrecios.textContent = "Sobre control de precios"
                                    botonSobreControlDePrecios.addEventListener("click", () => {
                                        this.componentesUI.sobreControlPrecios.arranque()
                                    })
                                    panelBotones.appendChild(botonSobreControlDePrecios)

                                    const botonReconstruirTotal = document.createElement("div")
                                    botonReconstruirTotal.classList.add(
                                        "comportamientoBoton",
                                        "botonV1",
                                        "width100"
                                    )
                                    botonReconstruirTotal.textContent = "Reconstruir total"
                                    panelBotones.appendChild(botonReconstruirTotal)

                                    let modoUI_contenedorFinanciero
                                    if (configuracionVista === "publica") {
                                        modoUI_contenedorFinanciero = "plaza"
                                    } else {
                                        modoUI_contenedorFinanciero = "administracion"
                                    }

                                    const contenedorFinanciero = respuestaServidor.ok.contenedorFinanciero

                                    casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                        destino: `[instanciaUID="${instanciaUID}"][componente=contenedorDesgloseTotal]`,
                                        contenedorFinanciero,
                                        modoUI: modoUI_contenedorFinanciero

                                    })



                                }
                            },

                            componentesUI: {
                                insertarDescuentos: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_insertarDescuentosUI = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        main.appendChild(ui)
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo ofertas...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/ofertas/listasOfertasAdministracion"
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()
                                            constructor.appendChild(this.botonCancelar())

                                            const ofertas = respuestaServidor.ok

                                            const contenedorOfertas = document.createElement("div")
                                            contenedorOfertas.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap10",
                                            )
                                            constructor.appendChild(contenedorOfertas)
                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activada"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivada"
                                                }

                                            }

                                            ofertas.forEach((detalles) => {
                                                const nombreOferta = detalles.nombreOferta
                                                const ofertaUID = detalles.ofertaUID
                                                const fechaInicio = detalles.fechaInicio
                                                const fechaFinal = detalles.fechaFinal
                                                const estadoIDV = detalles.estadoIDV
                                                const zonaIDV = detalles.zonaIDV


                                                const contenedorOferta = document.createElement("div")
                                                contenedorOferta.setAttribute("ofertaUID", ofertaUID)
                                                contenedorOferta.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = nombreOferta
                                                contenedorGlobal.appendChild(nombreOfertaUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado de la oferta"
                                                contenedorGlobal.appendChild(estadoTitulo)


                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedorOferta.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )
                                                botonInsertar.textContent = "Insertar descuento en la reserva"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.confirmarInsertar({
                                                        reservaUID,
                                                        ofertaUID,
                                                        instanciaUID_insertarDescuentosUI,
                                                        instanciaUID_contenedorFinanciero
                                                    })

                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir a la oferta"
                                                botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)


                                                contenedorOferta.appendChild(contendorBotones)

                                                contenedorOfertas.appendChild(contenedorOferta)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }

                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const ofertaUID = String(data.ofertaUID)
                                        const instanciaUID_insertarDescuentosUI = data.instanciaUID_insertarDescuentosUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Insertando oferta en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/descuentos/insertarDescuentoPorAdministrador",
                                            reservaUID,
                                            ofertaUID
                                        }


                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {

                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },

                                },
                                insertarOfertasCompatibles: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_insertarDescuentosUI = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        main.appendChild(ui)
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo ofertas compatibles con la oferta...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/descuentos/obtenerDescuentosCompatiblesConLaReserva",
                                            reservaUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()
                                            const ofertas = respuestaServidor.ofertasCompatibles
                                            if (ofertas.length > 0) {
                                                constructor.appendChild(this.botonCancelar())
                                            } else {
                                                const info = document.createElement("p")
                                                info.classList.add("textoCentrado")
                                                info.textContent = "No hay ofertas compatibles con esta reserva. Si quieres insertar ofertas no compatibles de manera arbitraria, a esta reserva usa el botón de insertar descuentos."
                                                constructor.appendChild(info)
                                            }

                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activada"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivada"
                                                }
                                            }

                                            const contenedorOfertas = document.createElement("div")
                                            contenedorOfertas.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap10",
                                            )
                                            constructor.appendChild(contenedorOfertas)

                                            ofertas.forEach((contenedorOferta) => {
                                                const detalles = contenedorOferta.oferta
                                                const nombreOferta = detalles.nombreOferta
                                                const ofertaUID = detalles.ofertaUID
                                                const fechaInicio = detalles.fechaInicio
                                                const fechaFinal = detalles.fechaFinal
                                                const estadoIDV = detalles.estadoIDV
                                                const zonaIDV = detalles.zonaIDV

                                                const contenedorOfertaUI = document.createElement("div")
                                                contenedorOfertaUI.setAttribute("ofertaUID", ofertaUID)
                                                contenedorOfertaUI.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = nombreOferta
                                                contenedorGlobal.appendChild(nombreOfertaUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado de la oferta"
                                                contenedorGlobal.appendChild(estadoTitulo)

                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedorOfertaUI.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )

                                                botonInsertar.textContent = "Insertar descuento en la reserva"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.confirmarInsertarCompatible({
                                                        reservaUID,
                                                        ofertaUID,
                                                        instanciaUID_insertarDescuentosUI,
                                                        instanciaUID_contenedorFinanciero
                                                    })
                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir a la oferta"
                                                botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)

                                                contenedorOfertaUI.appendChild(contendorBotones)

                                                contenedorOfertas.appendChild(contenedorOfertaUI)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }

                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertarCompatible: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const ofertaUID = String(data.ofertaUID)
                                        const instanciaUID_insertarDescuentosUI = data.instanciaUID_insertarDescuentosUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Insertando oferta en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/descuentos/insertarDescuentoPorCompatible",
                                            reservaUID,
                                            ofertaUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },

                                },
                                sobreControlPrecios: {
                                    componentesUI: {
                                        botonAlterarPrecio: () => {
                                            const botonDeslegarOpciones = document.createElement("div")
                                            botonDeslegarOpciones.classList.add(
                                                "padding6",
                                                "botonV1",
                                                "comportamientoBoton"
                                            )
                                            botonDeslegarOpciones.textContent = "Alterar precio"
                                            return botonDeslegarOpciones
                                        },
                                        nocheUI: async function (data) {
                                            const fechaNoche = data.fechaNoche
                                            const apartamentoIDV = data.apartamentoIDV
                                            const main = document.querySelector("main")
                                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                            const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                            const instanciaUID_sobreControlUI = ui.getAttribute("instanciaUID")
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            main.appendChild(ui)
                                            const contenedor = ui.querySelector("[componente=contenedor]")
                                            const spinner = casaVitini.ui.componentes.spinner({
                                                mensaje: "Obteniendo detalles de la noche...",
                                                textoBoton: "Cancelar"
                                            })
                                            contenedor.appendChild(spinner)

                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/sobreControlPrecios/obtenerDetallesSobreControlNoche",
                                                reservaUID,
                                                apartamentoIDV: apartamentoIDV,
                                                fechaNoche: fechaNoche
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)

                                            if (!uiRenderizada) { return }
                                            if (respuestaServidor?.error) {
                                                uiRenderizada?.remove()
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor.ok) {
                                                contenedor.innerHTML = null

                                                const data = respuestaServidor.ok
                                                const instantanea = data.instantaneaNetoApartamento
                                                const apartamentoUI = instantanea.apartamentoUI
                                                const precioNetoApartamento = instantanea.precioNetoApartamento

                                                const sobreControl = data?.sobreControl
                                                const detallesSobreControl = sobreControl.detallesSobreControl || {}
                                                const operacion = detallesSobreControl?.operacion
                                                const valorSobreControl = detallesSobreControl?.valor || "0.00"

                                                const titulo = document.createElement("div")
                                                titulo.classList.add(
                                                    "tituloGris",
                                                    "textoCentrado"
                                                )
                                                titulo.textContent = `Detalles del ${apartamentoUI} en la noche de ${fechaNoche}`
                                                contenedor.appendChild(titulo)

                                                const contenedorValorOrigen = document.createElement("div")
                                                contenedorValorOrigen.classList.add(
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding16",
                                                    "borderRadius16"
                                                )
                                                contenedor.appendChild(contenedorValorOrigen)

                                                const tituloValorOrigen = document.createElement("div")
                                                tituloValorOrigen.textContent = "Valor origen"
                                                contenedorValorOrigen.appendChild(tituloValorOrigen)

                                                const datoValorOrigen = document.createElement("div")
                                                datoValorOrigen.classList.add(
                                                    "negrita"
                                                )
                                                datoValorOrigen.textContent = precioNetoApartamento
                                                contenedorValorOrigen.appendChild(datoValorOrigen)

                                                const selectorTipoSobreControl = document.createElement("select")
                                                selectorTipoSobreControl.classList.add(
                                                    "botonV1BlancoIzquierda_campo"
                                                )
                                                selectorTipoSobreControl.setAttribute("campo", "tipoOperacion")

                                                const tituloSelector = document.createElement("option");
                                                if (!operacion) {
                                                    tituloSelector.selected = true;
                                                }
                                                tituloSelector.disabled = true;
                                                tituloSelector.text = "Seleccionar el tipo de sobre control";
                                                selectorTipoSobreControl.appendChild(tituloSelector);

                                                const opciones = [
                                                    { value: "aumentarPorPorcentaje", text: "Aumentar por porcentaje" },
                                                    { value: "reducirPorPorcentaje", text: "Reducir por porcentaje" },
                                                    { value: "aumentarPorCantidadFija", text: "Aumentar por cantidad fija" },
                                                    { value: "reducirPorCantidadFila", text: "Reducir por cantidad fila" },
                                                    { value: "establecerCantidad", text: "Establecer cantidad" }
                                                ]
                                                for (const opcionData of opciones) {
                                                    const value = opcionData.value
                                                    const opcion = document.createElement("option");
                                                    opcion.value = opcionData.value;
                                                    opcion.text = opcionData.text;
                                                    if (operacion === value) {
                                                        opcion.selected = true;
                                                    }
                                                    selectorTipoSobreControl.appendChild(opcion);
                                                }
                                                contenedor.appendChild(selectorTipoSobreControl)
                                                const campoValor = document.createElement("input")
                                                campoValor.classList.add(
                                                    "botonV1BlancoIzquierda_campo"
                                                )
                                                campoValor.setAttribute("campo", "valor")
                                                campoValor.placeholder = "Escribe la cantidad con dos decimales separados por punto, por ejemplo 0.00"
                                                campoValor.value = valorSobreControl

                                                contenedor.appendChild(campoValor)


                                                if (Object.keys(detallesSobreControl).length > 0) {
                                                    const boton = document.createElement("div")
                                                    boton.classList.add("botonV1")
                                                    boton.textContent = "Actualizar sobre control de precio"
                                                    boton.addEventListener("click", () => {
                                                        this.confirmar({
                                                            instanciaUID_sobreControlUI,
                                                            instanciaUID_contenedorFinanciero,
                                                            reservaUID,
                                                            apartamentoIDV,
                                                            tipoOperacion: selectorTipoSobreControl.value,
                                                            fechaNoche,
                                                            valorSobreControl: campoValor.value
                                                        })
                                                    })
                                                    contenedor.appendChild(boton)
                                                    const botonEliminar = document.createElement("div")
                                                    botonEliminar.classList.add("botonV1")
                                                    botonEliminar.textContent = "Eliminar sobre control de precio"
                                                    botonEliminar.addEventListener("click", () => {
                                                        this.eliminarSobreControl({
                                                            instanciaUID_sobreControlUI,
                                                            instanciaUID_contenedorFinanciero,
                                                            reservaUID,
                                                            apartamentoIDV,
                                                            fechaNoche
                                                        })
                                                    })
                                                    contenedor.appendChild(botonEliminar)
                                                } else {
                                                    const boton = document.createElement("div")
                                                    boton.classList.add("botonV1")
                                                    boton.textContent = "Crear sobre control de precio"
                                                    boton.addEventListener("click", () => {
                                                        this.confirmar({
                                                            instanciaUID_sobreControlUI,
                                                            instanciaUID_contenedorFinanciero,
                                                            reservaUID,
                                                            apartamentoIDV,
                                                            tipoOperacion: selectorTipoSobreControl.value,
                                                            fechaNoche,
                                                            valorSobreControl: campoValor.value
                                                        })
                                                    })
                                                    contenedor.appendChild(boton)
                                                }

                                                const botonCancelar = document.createElement("div")
                                                botonCancelar.classList.add("botonV1")
                                                botonCancelar.textContent = "Cancelar y volver al desglose por noche."
                                                botonCancelar.addEventListener("click", () => {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                })
                                                contenedor.appendChild(botonCancelar)
                                            }
                                        },
                                        confirmar: async (data) => {
                                            const instanciaUID_sobreControlUI = data.instanciaUID_sobreControlUI
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            const reservaUID = data.reservaUID
                                            const apartamentoIDV = data.apartamentoIDV
                                            const tipoOperacion = data.tipoOperacion
                                            const fechaNoche = data.fechaNoche
                                            const valorSobreControl = data.valorSobreControl
                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/sobreControlPrecios/actualizarSobreControlNoche",
                                                reservaUID,
                                                apartamentoIDV,
                                                fechaNoche,
                                                tipoOperacion,
                                                valorSobreControl
                                            }
                                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                            const contenedor = uiRenderizada.querySelector("[componente=contenedor]")


                                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                mensaje: "Aplicando sobrecontrol de precio",
                                                textoBoton: "ocultar",
                                                instanciaUID: instanciaPantallaCarga
                                            })

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const instanciaPantallaCargaUI = document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`)
                                            instanciaPantallaCargaUI?.remove()

                                            const uiContenedorFinanciero = document.querySelector(`[instanciaUID="${instanciaUID_contenedorFinanciero}"]`)


                                            if (respuestaServidor?.error) {
                                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor.ok) {
                                                const sobreControlUI = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                                if (sobreControlUI) {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                }

                                                const selectorDesgloseEnPantalla = document.querySelector(`[reservaUID="${reservaUID}"] [componente=contenedorDesgloseTotal]`)
                                                if (!selectorDesgloseEnPantalla) {
                                                    return
                                                }
                                                return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                    instanciaUID_contenedorFinanciero,
                                                    reservaUID
                                                })
                                            }
                                        },
                                        eliminarSobreControl: async (data) => {
                                            const instanciaUID_sobreControlUI = data.instanciaUID_sobreControlUI
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            const reservaUID = data.reservaUID
                                            const apartamentoIDV = data.apartamentoIDV
                                            const fechaNoche = data.fechaNoche
                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/sobreControlPrecios/eliminarSobreControlNoche",
                                                reservaUID,
                                                apartamentoIDV,
                                                fechaNoche
                                            }
                                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                            const contenedor = uiRenderizada.querySelector("[componente=contenedor]")

                                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                mensaje: "Eliminado sobrecontrol de precio",
                                                textoBoton: "ocultar",
                                                instanciaUID: instanciaPantallaCarga
                                            })

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const instanciaPantallaCargaUI = document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`)
                                            instanciaPantallaCargaUI?.remove()

                                            if (respuestaServidor?.error) {
                                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor.ok) {
                                                const sobreControlUI = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                                if (sobreControlUI) {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                }

                                                const selectorDesgloseEnPantalla = document.querySelector(`[reservaUID="${reservaUID}"] [componente=contenedorDesgloseTotal]`)
                                                if (!selectorDesgloseEnPantalla) {
                                                    return
                                                }
                                                return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                    instanciaUID_contenedorFinanciero,
                                                    reservaUID
                                                })
                                            }
                                        }
                                    },
                                },
                                eliminarOfertaEnReserva: {
                                    ui: async function (data) {

                                        const nombreOferta = data.nombreOferta
                                        const ofertaUID = data.ofertaUID
                                        const posicion = data.posicion
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const origen = data.origen

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        pantallaInmersiva.style.justifyContent = "center"

                                        const instanciaUID = pantallaInmersiva.getAttribute("instanciaUID")
                                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.classList.add(
                                            "negrita"
                                        )
                                        titulo.textContent = nombreOferta
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = `Confirmas o no la eliminación de la oferta de la reserva, ¿Estás de acuerdo?`

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Confirmar la eliminación de la oferta de esta reserva"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmar({
                                                reservaUID,
                                                ofertaUID,
                                                posicion,
                                                origen,
                                                instanciaUID
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver a la reserva"
                                        document.querySelector("main").appendChild(pantallaInmersiva)

                                    },
                                    confirmar: async (data) => {

                                        const ofertaUID = data.ofertaUID
                                        const posicion = data.posicion
                                        const reservaUID = data.reservaUID
                                        const origen = data.origen

                                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                        const mensaje = "Elimiando oferta de la reserva..."
                                        const datosPantallaSuperpuesta = {
                                            instanciaUID: instanciaUID,
                                            mensaje: mensaje
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/descuentos/eliminarDescuentoEnReserva",
                                            reservaUID: String(reservaUID),
                                            ofertaUID: String(ofertaUID),
                                            origen,
                                            posicion: String(posicion)
                                        }


                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        instanciaRenderizada.remove()

                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                reservaUID
                                            })
                                        }
                                    }

                                },
                                actualizarEstadoAutorizacion: async (data) => {

                                    const ofertaUID = data.ofertaUID
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const e = data.e
                                    const area = e.target.closest("[ofertaUID][posicion]")
                                    const autorizacionUI = area.querySelector("[dato=autorizacion]")
                                    const estadoActualData = area.querySelector("[estadoActual]")
                                    const estadoActual = estadoActualData.getAttribute("estadoActual")




                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/descuentos/actualizarAutorizacionDescuentoCompatible",
                                        reservaUID: String(reservaUID),
                                        ofertaUID: String(ofertaUID),
                                    }

                                    if (estadoActual === "aceptada") {
                                        autorizacionUI.textContent = "Rechazando..."
                                        transaccion.nuevaAutorizacion = "rechazada"
                                    } else if (estadoActual === "rechazada") {
                                        autorizacionUI.textContent = "Aceptando..."
                                        transaccion.nuevaAutorizacion = "aceptada"
                                    }



                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const estadoAutorizado = respuestaServidor.autorizacion
                                        estadoActualData.setAttribute("estadoActual", estadoAutorizado)

                                        if (estadoAutorizado === "aceptada") {
                                            autorizacionUI.textContent = "Aceptada"
                                            estadoActualData.textContent = "Rechazar oferta"
                                        } else if (estadoAutorizado === "rechazada") {
                                            autorizacionUI.textContent = "Rechazada"
                                            estadoActualData.textContent = "Aceptar oferta"
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                            reservaUID
                                        })
                                    }
                                },
                                insertarImpuesto: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_insertarImpuestoUI = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        main.appendChild(ui)
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo impuestos...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/impuestos/listarTodosLosImpuestos"
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarImpuestoUI}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()
                                            constructor.appendChild(this.botonCancelar())

                                            const impuestos = respuestaServidor.impuestos

                                            const contenedorOfertas = document.createElement("div")
                                            contenedorOfertas.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap6",
                                            )
                                            constructor.appendChild(contenedorOfertas)
                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activada"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivada"
                                                }

                                            }

                                            impuestos.forEach((impuesto) => {
                                                const impuestoUID = impuesto.impuestoUID
                                                const nombre = impuesto.nombre
                                                const tipoImpositivo = impuesto.tipoImpositivo
                                                const tipoValorIDV = impuesto.tipoValorIDV
                                                const entidadIDV = impuesto.entidadIDV
                                                const estadoIDV = impuesto.estadoIDV


                                                const contenedorOferta = document.createElement("div")
                                                contenedorOferta.setAttribute("impuestoUID", impuestoUID)
                                                contenedorOferta.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap10",
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = nombre
                                                contenedorGlobal.appendChild(nombreOfertaUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado del impuesto"
                                                contenedorGlobal.appendChild(estadoTitulo)


                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedorOferta.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )
                                                botonInsertar.textContent = "Insertar impuesto en la reserva"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.confirmarInsertar({
                                                        reservaUID,
                                                        impuestoUID,
                                                        instanciaUID_insertarImpuestoUI,
                                                        instanciaUID_contenedorFinanciero
                                                    })

                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir al impuesto"
                                                botonVerOferta.setAttribute("href", "/administracion/impuestos/" + impuestoUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/impuestos/" + impuestoUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)


                                                contenedorOferta.appendChild(contendorBotones)

                                                contenedorOfertas.appendChild(contenedorOferta)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }

                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const impuestoUID = String(data.impuestoUID)
                                        const instanciaUID_insertarImpuestoUI = data.instanciaUID_insertarImpuestoUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarImpuestoUI}"]`)
                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Insertando oferta en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/impuestos/insertarImpuestoEnReserva",
                                            reservaUID,
                                            impuestoUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },

                                },
                                eliminarImpuesto: {
                                    ui: async function (data) {
                                        const nombreImpuesto = data.nombreImpuesto
                                        const impuestoUID = data.impuestoUID
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        pantallaInmersiva.style.justifyContent = "center"

                                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                        const instanciaUID_eliminarImpuestoUI = pantallaInmersiva.getAttribute("instanciaUID")


                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Confirmar eliminar impuesto ${nombreImpuesto} de la reserva`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = "Var a eliminar el impuesto de la reserva, ¿Estas de acuerdo ? "

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Comfirmar la eliminacion"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarEliminar({
                                                impuestoUID,
                                                reservaUID,
                                                instanciaUID_contenedorFinanciero,
                                                instanciaUID_eliminarImpuestoUI
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"

                                        document.querySelector("main").appendChild(pantallaInmersiva)

                                    },
                                    confirmarEliminar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const impuestoUID = String(data.impuestoUID)
                                        const instanciaUID_eliminarImpuestoUI = data.instanciaUID_eliminarImpuestoUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarImpuestoUI}"]`)
                                        const contenedor = ui.querySelector("[componente=constructor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Eliminado impuesto en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/impuestos/eliminarImpuestoEnReserva",
                                            reservaUID,
                                            impuestoUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },

                                },
                                crearImpuestoAdHoc: {
                                    ui: async function (data) {
                                        const nombreImpuesto = data.nombreImpuesto
                                        const impuestoUID = data.impuestoUID
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                        const instanciaUID_eliminarImpuestoUI = pantallaInmersiva.getAttribute("instanciaUID")
                                        const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")



                                        const opcionesEntidad = [
                                            {
                                                entidadIDV: "reserva",
                                                entidadUI: "Reserva"
                                            },
                                            {
                                                entidadIDV: "servicio",
                                                entidadUI: "Servicios"
                                            },
                                            {
                                                entidadIDV: "global",
                                                entidadUI: "Global"
                                            },

                                        ]

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Crear impuesto dedicado solo para esta reserva`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = "Impuesto dedicado solo para esta reserva. Este impuesto solo existirá en esta reserva. Si necesitas crear un impuesto que quieras usar para insertar en reservas, pero que no se aplique, crea un impuesto en el hub de impuestos y mantenlo desactivado."

                                        const contenedorFormulario = document.createElement("div")
                                        contenedorFormulario.classList.add(
                                            "flexVertical",
                                            "gap10"
                                        )
                                        contenedor.appendChild(contenedorFormulario)


                                        const campoCraerNuevoImpuesto = document.createElement("input")
                                        campoCraerNuevoImpuesto.classList.add("botonV1BlancoIzquierda_campo")
                                        campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "nombre")
                                        campoCraerNuevoImpuesto.placeholder = "Escribo el nombre del nuevo impuesto"
                                        contenedorFormulario.appendChild(campoCraerNuevoImpuesto)

                                        const campoTipoImpositivo = document.createElement("input")
                                        campoTipoImpositivo.classList.add("botonV1BlancoIzquierda_campo"
                                        )
                                        campoTipoImpositivo.setAttribute("comNuevoImpuesto", "tipoImpositivo")
                                        campoTipoImpositivo.placeholder = "0.00"
                                        contenedorFormulario.appendChild(campoTipoImpositivo)

                                        const contenedorOpciones = document.createElement("select")
                                        contenedorOpciones.classList.add("botonV1BlancoIzquierda_campo"
                                        )
                                        contenedorOpciones.setAttribute("comNuevoImpuesto", "tipoValor")
                                        const tipoValorLista = [
                                            {
                                                tipoValorIDV: "",
                                                tipoValorUI: "Selecciona el tipo de impuesto"
                                            },
                                            {
                                                tipoValorIDV: "porcentaje",
                                                tipoValorUI: "Porcentaje"
                                            },
                                            {
                                                tipoValorIDV: "tasa",
                                                tipoValorUI: "Tasa"
                                            },

                                        ]

                                        tipoValorLista.forEach((contenedorTipoValor) => {
                                            const tipoValorIDV = contenedorTipoValor.tipoValorIDV
                                            const tipoValorUI = contenedorTipoValor.tipoValorUI
                                            const opcion = document.createElement("option");
                                            if (!tipoValorIDV) {
                                                opcion.selected = true;
                                                opcion.disabled = true;

                                            }
                                            opcion.value = tipoValorIDV;
                                            opcion.text = tipoValorUI;
                                            opcion.setAttribute("opcion", tipoValorIDV)
                                            contenedorOpciones.add(opcion);
                                        })
                                        contenedorFormulario.appendChild(contenedorOpciones)



                                        const selectorTipoEntidad = document.createElement("select")
                                        contenedorOpciones.setAttribute("comNuevoImpuesto", "entidadIDV")

                                        selectorTipoEntidad.classList.add("botonV1BlancoIzquierda_campo")
                                        contenedorFormulario.appendChild(selectorTipoEntidad)


                                        const tiopEntidades = document.createElement("option")
                                        tiopEntidades.selected = "true"
                                        tiopEntidades.disabled = "true"
                                        tiopEntidades.value = ""
                                        tiopEntidades.text = "Selecciona el tipo de entidad"
                                        selectorTipoEntidad.appendChild(tiopEntidades)

                                        opcionesEntidad.forEach((entidad) => {
                                            const entidadIDV = entidad.entidadIDV
                                            const entidadUI = entidad.entidadUI
                                            const opcion = document.createElement("option");
                                            opcion.value = entidadIDV;
                                            opcion.text = entidadUI;
                                            opcion.setAttribute("opcion", entidadIDV)
                                            selectorTipoEntidad.add(opcion);
                                        })


                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Crear impuesto dedicado para esta reserva"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarCrearImpuestoAdHoc({
                                                reservaUID,
                                                instanciaUID_contenedorFinanciero,
                                                instanciaUID_eliminarImpuestoUI,
                                                nombre: campoCraerNuevoImpuesto.value,
                                                tipoImpositivo: campoTipoImpositivo.value,
                                                tipoValorIDV: contenedorOpciones.value,
                                                entidadIDV: selectorTipoEntidad.value

                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"

                                        document.querySelector("main").appendChild(pantallaInmersiva)

                                    },
                                    confirmarCrearImpuestoAdHoc: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const nombre = data.nombre
                                        const tipoImpositivo = data.tipoImpositivo
                                        const tipoValorIDV = data.tipoValorIDV
                                        const entidadIDV = data.entidadIDV


                                        const instanciaUID_eliminarImpuestoUI = data.instanciaUID_eliminarImpuestoUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                                        const instanciaUID_pantallaDeCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()

                                        const datosPantallaSuperpuesta = {
                                            instanciaUID: instanciaUID_pantallaDeCargaSuperPuesta,
                                            mensaje: "Creando impuesto dedicado e insertando en la reserva..."
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/impuestos/insertarImpuestoDedicadoEnReserva",
                                            reservaUID,
                                            nombre,
                                            tipoImpositivo,
                                            tipoValorIDV,
                                            entidadIDV
                                        }



                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCargaSuperPuesta}"]`)?.remove()

                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }
                                    },

                                },

                                reconstruirDesgloseFinanciero: {
                                    ui: async function (data) {
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")
                                        const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")
                                        document.querySelector("main").appendChild(pantallaInmersiva)



                                        const tituloUI = document.createElement("p")
                                        tituloUI.classList.add("tituloGris")
                                        tituloUI.setAttribute("componente", "titulo")
                                        tituloUI.textContent = `Elige el origen de la reconstrucion del desglose financiero de la reserva ${reservaUID}`
                                        contenedor.appendChild(tituloUI)



                                        const mensajeUI = document.createElement("div")
                                        mensajeUI.classList.add("mensajeUI")
                                        mensajeUI.setAttribute("componente", "mensajeUI")
                                        mensajeUI.textContent = "Esta operación reconstruye el desglose financiero.Reconstruir desde la instantánea, regenera el desglose financiero desde las instantáneas del contenedor financiero de la reserva.Esta operación es útil si no se ha reconstituido por alguna razón el desglose financiero correctamente tras alguna operación."
                                        contenedor.appendChild(mensajeUI)


                                        const botonDesdeInstantaneas = document.createElement("div")
                                        botonDesdeInstantaneas.classList.add("botonV1")
                                        botonDesdeInstantaneas.setAttribute("boton", "aceptar")
                                        botonDesdeInstantaneas.textContent = "Reconstruir desde instantaneas"
                                        botonDesdeInstantaneas.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            this.desdeInstantaneas.ui({
                                                reservaUID,
                                                instanciaUID_contenedorFinanciero,
                                                instanciaUID_reconstrucion
                                            })
                                        })
                                        contenedor.appendChild(botonDesdeInstantaneas)


                                        const mensajeUI_ = document.createElement("div")
                                        mensajeUI_.classList.add("mensajeUI")
                                        mensajeUI_.setAttribute("componente", "mensajeUI")
                                        mensajeUI_.textContent = "Reconstruir el desglose financiero desde el hub, reconstruirá el desglose financiero actualizando las instantáneas de la reserva desde el hub de precios base, comportamiento de precios y ofertas actualmente configurados.Esta operación es irreversible y puede ser útil cuando necesito actualizar ciertos datos del contenedor financiero de la reserva desde los hubs de origen."
                                        contenedor.appendChild(mensajeUI_)

                                        const botonDesdeHub = document.createElement("div")
                                        botonDesdeHub.classList.add("botonV1")
                                        botonDesdeHub.setAttribute("boton", "aceptar")
                                        botonDesdeHub.textContent = "Reconstruir desde el hub"
                                        botonDesdeHub.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            this.desdeHub.ui({
                                                reservaUID,
                                                instanciaUID_contenedorFinanciero,
                                                instanciaUID_reconstrucion
                                            })

                                        })

                                        contenedor.appendChild(botonDesdeHub)

                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cancelar y volver"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        contenedor.appendChild(botonCancelar)

                                    },
                                    desdeInstantaneas: {
                                        ui: async function (data) {
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            pantallaInmersiva.style.justifyContent = "center"

                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")


                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmar reconstruir el desglose de la reserva ${reservaUID} de las instantaneas`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "Esta operacion reconstruye el desglose financiero.Si ha ocurrido un algun tipo de error en algun calculo drante la construcion del deshlose financiero, esta opcion podrai recuperar la intergrdiad del desglose financiero."

                                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                            botonAceptar.textContent = "Comfirmar la reconstrucción"
                                            botonAceptar.addEventListener("click", () => {
                                                this.confirmarReconstrucion({
                                                    reservaUID,
                                                    instanciaUID_contenedorFinanciero,
                                                    instanciaUID_reconstrucion
                                                })
                                            })
                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"

                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        confirmarReconstrucion: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const instanciaUID_reconstrucion = data.instanciaUID_reconstrucion
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_reconstrucion}"]`)
                                            const contenedor = ui.querySelector("[componente=constructor]")
                                            contenedor.innerHTML = null

                                            const spinner = casaVitini.ui.componentes.spinner({
                                                mensaje: "Reconstruyendo el desglose financiero desde las instantaneas de la reserva..."
                                            })
                                            contenedor.appendChild(spinner)

                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/contenedorFinanciero/reconstruirDesgloseDesdeInstantaneas",
                                                reservaUID
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            if (!uiRenderizada) { return }

                                            if (respuestaServidor?.error) {
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                    instanciaUID_contenedorFinanciero,
                                                    reservaUID
                                                })
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            }

                                        },
                                    },
                                    desdeHub: {
                                        ui: async function (data) {
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")
                                            const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")
                                            contenedor.classList.add(
                                                "flexVertical"
                                            )



                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmar reconstruir el desglose de la reserva ${reservaUID} desde el hub (Operación irreversible)`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "Esta operación reconstruye el desglose financiero.Sí ha ocurrido un algún tipo de error en algún cálculo durante la construcción del desglose financiero, esta opción podría recuperar la integridad del desglose financiero."

                                            const campo = document.createElement("input")
                                            campo.placeholder = "Escribe la palabra reconstruir"
                                            campo.classList.add(
                                                "botonV1BlancoIzquierda_campo"
                                            )
                                            contenedor.appendChild(campo)
                                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                            botonAceptar.textContent = "Confirmar la reconstrucción irreversible de todo el contenedor financiero de la reserva."
                                            botonAceptar.addEventListener("click", () => {
                                                this.confirmarReconstrucion({
                                                    reservaUID,
                                                    instanciaUID_contenedorFinanciero,
                                                    instanciaUID_reconstrucion,
                                                    palabra: campo.value
                                                })
                                            })
                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"

                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        confirmarReconstrucion: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const palabra = data.palabra
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                                            const instanciaUID_pantallaDeCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()

                                            const datosPantallaSuperpuesta = {
                                                instanciaUID: instanciaUID_pantallaDeCargaSuperPuesta,
                                                mensaje: "Reconstruyendo todo el contenedor financiero de la reserva desde los hubs..."
                                            }
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/contenedorFinanciero/reconstruirDesgloseDesdeHubs",
                                                reservaUID,
                                                palabra,
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const pantallaDeCarga_renderizda = document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCargaSuperPuesta}"]`)
                                            pantallaDeCarga_renderizda?.remove()

                                            const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            if (!uiRenderizada) { return }

                                            if (respuestaServidor?.error) {
                                                if (pantallaDeCarga_renderizda) {
                                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                                }
                                            }
                                            if (respuestaServidor?.ok) {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                    instanciaUID_contenedorFinanciero,
                                                    reservaUID
                                                })
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            }

                                        },
                                    }

                                },
                            },
                            controladores: {
                                desplegarContenedorFinanciero: async (data) => {
                                    const reservaUID = data.reservaUID
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                        reservaUID: reservaUID,
                                        capas: [
                                            "desgloseFinanciero",
                                        ]
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                    const instanciaRenderizada = document.querySelector(`[reservaUID="${reservaUID}"] [componente=contenedorDesgloseTotal]`)
                                    if (!instanciaRenderizada) {
                                        return
                                    }
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const totalGlobal = document.querySelector("[dataReserva=totalReservaConImpuestos]")

                                        const contenedorFinanciero = respuestaServidor.ok.contenedorFinanciero
                                        const totalFinal = contenedorFinanciero.desgloseFinanciero.global.totales.totalFinal
                                        totalGlobal.textContent = totalFinal

                                        casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                            destino: `[reservaUID="${reservaUID}"] [componente=contenedorDesgloseTotal]`,
                                            contenedorFinanciero,
                                            modoUI: "administracion"
                                        })
                                    }
                                }
                            }


                        },
                        cancelarReserva: {
                            arranque: async () => {
                                document.body.style.overflow = "hidden";
                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")

                                const main = document.querySelector("main")

                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const instanciaUID = ui.getAttribute("instanciaUID")

                                main.appendChild(ui)
                                const contenedor = ui.querySelector("[componente=contenedor]")

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Obtenido estado de la reserva...",
                                    textoBoton: "Cancelar"
                                })
                                contenedor.appendChild(spinner)
                                const respuestaServidor = await casaVitini.shell.servidor({
                                    zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                    reservaUID: reservaUID,
                                    capas: []
                                })
                                const ui_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                if (!ui_renderizada) { return }
                                spinner?.remove()
                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {

                                    const estadoReservaIDV = respuestaServidor.ok.global.estadoReservaIDV

                                    const tituloCancelarReserva = document.createElement("p")
                                    tituloCancelarReserva.classList.add("tituloGris", "padding12", "textoCentrado")
                                    contenedor.appendChild(tituloCancelarReserva)

                                    const botonCerrar = () => {
                                        const ui = document.createElement("div")
                                        ui.classList.add("botonV1")
                                        ui.textContent = "Cerrar y volver atras"
                                        ui.addEventListener("click", () => {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.salirDelProceso(reservaUID)
                                        })
                                        return ui
                                    }
                                    contenedor.appendChild(botonCerrar())

                                    if (estadoReservaIDV === "cancelada") {
                                        tituloCancelarReserva.textContent = `La reserva ${reservaUID} ya esta cancelada`
                                    } else {
                                        tituloCancelarReserva.textContent = `Opciones de cancelación y eliminación de la reserva ${reservaUID}`

                                        const bloqueBloqueoApartamentos = document.createElement("div")
                                        bloqueBloqueoApartamentos.classList.add(
                                            "flexVertical",
                                            "borderRadius22",
                                            "borderGrey1",
                                            "padding6",
                                            "gap6"
                                        )
                                        contenedor.appendChild(bloqueBloqueoApartamentos)

                                        const tituloBloquoApartamentos = document.createElement("div")
                                        tituloBloquoApartamentos.classList.add("padding12")
                                        tituloBloquoApartamentos.textContent = "Selecciona qué tipo de bloqueo quieres aplicar a los apartamentos de esta reserva tras la cancelación."
                                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)

                                        const opcionBloqueoTemporalPorRango = document.createElement("p")
                                        opcionBloqueoTemporalPorRango.classList.add("botonV1BlancoIzquierda")
                                        opcionBloqueoTemporalPorRango.setAttribute("componente", "cancelarReservaOpcionBloqueo")
                                        opcionBloqueoTemporalPorRango.setAttribute("cancelarReservatipoBloqueo", "rangoTemporal")
                                        opcionBloqueoTemporalPorRango.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.seleccionarOpcionBloqueoApartametos)
                                        opcionBloqueoTemporalPorRango.textContent = "Bloquear los apartamentos de esta reserva tras la cancelación durante el mismo rango que tiene esta reserva."
                                        bloqueBloqueoApartamentos.appendChild(opcionBloqueoTemporalPorRango)

                                        const opcionBloqueoPermanente = document.createElement("p")
                                        opcionBloqueoPermanente.classList.add("botonV1BlancoIzquierda")
                                        opcionBloqueoPermanente.setAttribute("componente", "cancelarReservaOpcionBloqueo")
                                        opcionBloqueoPermanente.setAttribute("cancelarReservatipoBloqueo", "permanente")
                                        opcionBloqueoPermanente.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.seleccionarOpcionBloqueoApartametos)
                                        opcionBloqueoPermanente.textContent = "Bloquear los apartamentos de esta reserva tras la cancelación con un bloqueo permanente. Deberá liberarlos manualmente."
                                        bloqueBloqueoApartamentos.appendChild(opcionBloqueoPermanente)


                                        const tituloSinBloquoApartamentos = document.createElement("div")
                                        tituloSinBloquoApartamentos.classList.add("padding12")
                                        tituloSinBloquoApartamentos.textContent = "Cancela la reserva sin bloquear los apartamentos y liberarlos para que esten disponibles inmediatament despues de cancelar la reserva."
                                        bloqueBloqueoApartamentos.appendChild(tituloSinBloquoApartamentos)


                                        const opcionBloqueoPorLiberacion = document.createElement("p")
                                        opcionBloqueoPorLiberacion.classList.add("botonV1BlancoIzquierda")
                                        opcionBloqueoPorLiberacion.setAttribute("componente", "cancelarReservaOpcionBloqueo")
                                        opcionBloqueoPorLiberacion.setAttribute("cancelarReservatipoBloqueo", "sinBloqueo")
                                        opcionBloqueoPorLiberacion.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.seleccionarOpcionBloqueoApartametos)
                                        opcionBloqueoPorLiberacion.textContent = "Liberar los apartamentos de esta reserva tras la cancelación para que pasen a estar disponibles para su reserva."
                                        bloqueBloqueoApartamentos.appendChild(opcionBloqueoPorLiberacion)

                                        const bloqueBotones = document.createElement("div")
                                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                                        const entradaPalabraCancelar = document.createElement("input")
                                        entradaPalabraCancelar.classList.add("detallesReservaCancelarEntradaTextoCancelar")
                                        entradaPalabraCancelar.placeholder = "Escriba la palabra cancelar"

                                        const infoBotonCancelar = document.createElement("div")
                                        infoBotonCancelar.classList.add("padding12")
                                        infoBotonCancelar.textContent = "Para que se habilite el botón, tienes que seleccionar una de las tres opciones de arriba.Confirmar y cancelar la reserva."
                                        bloqueBloqueoApartamentos.appendChild(infoBotonCancelar)
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1BlancoIzquierda")
                                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                        botonCancelar.style.pointerEvents = "none"
                                        botonCancelar.style.color = "#313131"
                                        botonCancelar.textContent = "Confirmar y cancelar reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            const tipoBloqueoIDV = document.querySelector("[componente=cancelarReservaOpcionBloqueo][estado=activo]").getAttribute("cancelarReservatipoBloqueo")
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.confirmaCancelacion({
                                                tipoBloqueoIDV
                                            })
                                        })
                                        bloqueBloqueoApartamentos.appendChild(botonCancelar)


                                    }

                                    const infoEliminarReserva = document.createElement("div")
                                    infoEliminarReserva.classList.add("padding12")
                                    contenedor.appendChild(infoEliminarReserva)

                                    if (estadoReservaIDV === "cancelada") {
                                        infoEliminarReserva.textContent = "La reserva está cancelada. Por lo tanto, ya no tiene vigencia pernoctaría. Si lo prefieres puedes eliminar la reserva completamente. Esta operación borra toda la información dentro de la reserva, como el alojamiento, complementos de alojamiento, ofertas y servicios. Esta información solo se borra de dentro de la reserva."
                                    } else {
                                        infoEliminarReserva.textContent = "También puedes eliminar irreversiblemente una reserva.La eliminación irreversible de una reserva borra la información de la reserva, así como los pagos asociados a la reserva y toda la información relacionada con la reserva, menos los datos de los clientes y titulares que permanecen disponibles para otras reservas.A diferencia de la cancelación, los datos de la reserva dejarán de estar disponibles."
                                    }




                                    const botonEliminarReserva = document.createElement("div")
                                    botonEliminarReserva.classList.add("botonV1BlancoIzquierda")
                                    botonEliminarReserva.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonEliminarReserva.textContent = "Eliminar irreversiblemente la reserva"
                                    botonEliminarReserva.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.eliminarReservaIrreversiblemente.UI)
                                    contenedor.appendChild(botonEliminarReserva)
                                    //contenedor.appendChild(bloqueBotones)
                                }

                            },
                            seleccionarOpcionBloqueoApartametos: (opcion) => {
                                let selectorOpciones = document.querySelectorAll("[componente=cancelarReservaOpcionBloqueo]")
                                let opcionBloqueo = opcion.target
                                let botonCancelar = document.querySelector("[componente=botonConfirmarCancelarReserva]")
                                if (opcionBloqueo.getAttribute("estado") === "activo") {
                                    opcionBloqueo.removeAttribute("estado")
                                    botonCancelar.style.pointerEvents = "none"
                                    botonCancelar.style.color = "#313131"
                                    opcionBloqueo.removeAttribute("style")

                                }
                                selectorOpciones.forEach((opcionBloqueo) => {
                                    opcionBloqueo.removeAttribute("style")
                                    opcionBloqueo.removeAttribute("estado")
                                })
                                opcionBloqueo.style.background = "blue"
                                opcionBloqueo.style.color = "white"
                                opcionBloqueo.setAttribute("estado", "activo")
                                botonCancelar.removeAttribute("style")
                            },
                            confirmaCancelacion: async function (data) {
                                const instanciaUID_pantallaEspera = casaVitini.utilidades.codigoFechaInstancia()
                                const metadatosPantallaCarga = {
                                    mensaje: "Cancelando reserva...",
                                    instanciaUID: instanciaUID_pantallaEspera,
                                }
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                const tipoBloqueoIDV = data.tipoBloqueoIDV
                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/cancelarReserva",
                                    reservaUID: String(reservaUID),
                                    tipoBloqueoIDV: tipoBloqueoIDV
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const selectorPantallaDeCarga = document.querySelector(`[instanciaUID="${instanciaUID_pantallaEspera}"]`)
                                selectorPantallaDeCarga?.remove()

                                const reservaUI = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                if (!reservaUI) { return }

                                if (respuestaServidor?.error) {
                                    casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                } else if (respuestaServidor?.ok) {
                                    const m = "Reserva cancelada"
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    casaVitini.ui.componentes.advertenciaInmersiva(m)
                                    document.querySelector(`[reservaUID="${reservaUID}"] [dataReserva=estado]`).textContent = "Cancelada"
                                    document.querySelector(`[reservaUID="${reservaUID}"] [contenedor=pendiente]`).style.display = "none"
                                    document.querySelector(`[reservaUID="${reservaUID}"] [estadoReservaIDV]`).setAttribute("estadoReservaIDV", "cancelada")

                                    this.salirDelProceso(reservaUID)
                                }
                            },
                            eliminarReservaIrreversiblemente: {
                                UI: function (e) {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                    const contenedor = e.target.closest("[componente=advertenciaInmersiva]")
                                    contenedor.style.transition = "background 500ms"
                                    contenedor.style.background = "rgba(255, 0, 0, 0.3)"
                                    contenedor.setAttribute("instanciaUID", instanciaUID)
                                    const selectorContenido = contenedor.querySelector("[componente=contenedor]")
                                    selectorContenido.innerHTML = null
                                    const contenedorCancelacion = document.createElement("div")
                                    contenedorCancelacion.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    const tituloCancelarReserva = document.createElement("p")
                                    tituloCancelarReserva.classList.add("tituloGris", "padding12", "textoCentrado")
                                    tituloCancelarReserva.textContent = "Eliminar irreversiblemente una reserva"
                                    tituloCancelarReserva.style.color = "red"
                                    contenedorCancelacion.appendChild(tituloCancelarReserva)
                                    const botonCancelarProcesoCancelacion = document.createElement("div")
                                    botonCancelarProcesoCancelacion.classList.add("botonV1")
                                    botonCancelarProcesoCancelacion.textContent = "Cerrar y volver atras"
                                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.salirDelProceso(reservaUID)
                                    })
                                    contenedorCancelacion.appendChild(botonCancelarProcesoCancelacion)
                                    const bloqueBloqueoApartamentos = document.createElement("div")
                                    bloqueBloqueoApartamentos.classList.add("flexVertical", "gap6")
                                    const tituloBloquoApartamentos = document.createElement("div")
                                    tituloBloquoApartamentos.classList.add("padding12")
                                    tituloBloquoApartamentos.textContent = "Eliminar irreversiblemente una reserva, elimina de la base de datos la información de la reserva, los alojamientos asociados, los pernoctantes y el titular de la reserva (pero no sus datos como cliente), los pagos y los reembolsos.Esta eliminación es irreversible.Los datos desaparecerán de la base de datos y si no existen en una copia de seguridad, no serán recuperables.Si solo desea cancelar una reserva para liberar los apartamentos y hacer que deje de tener vigencia, cancélela y podrá seguir teniendo acceso a los datos de esta sin que tenga vigencia pernoctativa y ocupacional."
                                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                                    const infoSeguridad = document.createElement("div")
                                    infoSeguridad.classList.add("padding12")
                                    infoSeguridad.textContent = "Para eliminar una reserva irreversiblemente junto con toda su información relacionada, debe escribir su contraseña de usuario y su cuenta debe tener autorización administrativa."
                                    bloqueBloqueoApartamentos.appendChild(infoSeguridad)
                                    const campo = document.createElement("input")
                                    campo.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campo.setAttribute("campo", "clave")
                                    campo.type = "password"
                                    campo.placeholder = "Escriba la contraseña de su VitiniID"
                                    bloqueBloqueoApartamentos.appendChild(campo)
                                    contenedorCancelacion.appendChild(bloqueBloqueoApartamentos)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1BlancoIzquierda")
                                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonCancelar.textContent = "Eliminar reseva irreversiblemente"
                                    botonCancelar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.eliminarReservaIrreversiblemente.confirmar({
                                            instanciaUID,
                                            reservaUID
                                        })
                                    })
                                    bloqueBloqueoApartamentos.appendChild(botonCancelar)
                                    contenedorCancelacion.appendChild(bloqueBotones)
                                    selectorContenido.appendChild(contenedorCancelacion)

                                },
                                confirmar: async (data) => {

                                    const reservaUID = data.reservaUID
                                    const instanciaUID = data.instanciaUID

                                    const clave = document.querySelector(`[instanciaUID="${instanciaUID}"] [campo=clave]`)
                                    const instanciaUID_pantallDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const metadatosPantallaCarga = {
                                        mensaje: "Eliminado reserva...",
                                        instanciaUID: instanciaUID_pantallDeCarga,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/global/eliminarIrreversiblementeReserva",
                                        reservaUID: String(reservaUID),
                                        clave: clave?.value
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelector(`[instanciaUID="${instanciaUID_pantallDeCarga}"]`)
                                    selectorPantallaDeCarga?.remove()

                                    const reservaUI = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                    if (!reservaUI) { return }

                                    if (respuestaServidor?.error) {

                                        document.querySelector(`[instanciaUID="${instanciaUID}"] [campo=clave]`).value = ""
                                        return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                                        granuladoURL.rawArray.pop()
                                        const rawArray = granuladoURL.rawArray

                                        const main = document.querySelector("main")
                                        main.innerHTML = null

                                        const directoriosFusion = "/administracion/reservas"
                                        const componentesExistenteUID = "reservaUID_" + reservaUID
                                        const titulo = "Casa Vitini"
                                        const estado = {
                                            zona: directoriosFusion,
                                            EstadoInternoZona: "estado",
                                            tipoCambio: "parcial",
                                            componenteExistente: componentesExistenteUID,
                                            funcionPersonalizada: "administracion.reservas.detallesReserva.reservaUI.categorias.limpiarMenusCategorias"
                                        }
                                        window.history.pushState(estado, titulo, directoriosFusion);

                                        const info = document.createElement("div")
                                        info.classList.add(
                                            "margin10",
                                            "textoCentrado",
                                            "negritas"
                                        )
                                        info.textContent = `Se ha eliminado la reserva ${reservaUID}`
                                        main.appendChild(info)


                                    }
                                }
                            },
                            salirDelProceso: (reservaUID) => {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                                const granuladoURL = casaVitini.utilidades.granuladorURL()
                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.ui.componentesUI.categoriasGlobalesUI.limpiarMenusCategorias()
                                granuladoURL.rawArray.pop()
                                const rawArray = granuladoURL.rawArray
                                const directoriosFusion = "/" + rawArray.join("/")
                                const componentesExistenteUID = "reservaUID_" + reservaUID
                                const titulo = "Casa Vitini"
                                const estado = {
                                    zona: directoriosFusion,
                                    EstadoInternoZona: "estado",
                                    tipoCambio: "parcial",
                                    componenteExistente: componentesExistenteUID,
                                    funcionPersonalizada: "casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.categorias.limpiarMenusCategorias"
                                }
                                window.history.pushState(estado, titulo, directoriosFusion);
                            },
                        },
                        miscelanea: {
                            arranque: async () => {
                                const reservaUI = document.querySelector("[reservaUID]")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                const reservaUID = reservaUI.getAttribute("reservaUID")
                                const obtenerPDF = async () => {


                                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                    pantallaInmersiva.style.justifyContent = "center"
                                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                    const instanciaUID = pantallaInmersiva.closest("[instanciaUID]").getAttribute("instanciaUID")


                                    const titulo = constructor.querySelector("[componente=titulo]")
                                    titulo.textContent = "Reserva en pdf"
                                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                    mensaje.textContent = "Generando el pdf..."

                                    const contenedorEspacio = constructor.querySelector("[componente=contenedor]")
                                    const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()
                                    contenedorEspacio.appendChild(spinnerPorRenderizar)

                                    const botonDescargar = constructor.querySelector("[boton=aceptar]")
                                    botonDescargar.style.display = "none"

                                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                    botonCancelar.textContent = "Cancelar generacion del pdf..."

                                    document.querySelector("main").appendChild(pantallaInmersiva)
                                    const advertenciaInmersivaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                                    const transaccion = {
                                        reservaUID
                                    }

                                    if (configuracionVista === "publica") {
                                        transaccion.zona = "miCasa/misReservas/obtenerPDF"
                                    } else {
                                        transaccion.zona = "administracion/reservas/detallesReserva/miscelanea/pdfReserva"
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const pantallaInmersivaRenderizda = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                    if (!pantallaInmersivaRenderizda) {
                                        return
                                    }
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                    }
                                    if (respuestaServidor.ok) {
                                        const pdfBase64 = respuestaServidor.pdf
                                        const selectorZonaGestion = advertenciaInmersivaRenderizada.querySelector("[componente=contenedor]");
                                        selectorZonaGestion.innerHTML = null;
                                        mensaje.textContent = "Se ha generado el archivo PDF con el resumen de esta reserva.Para descargar el PDF, pulsa en el botón inferior.";

                                        const botonDescargarPDF = document.createElement("a")
                                        botonDescargarPDF.classList.add(
                                            "botonV1"
                                        )
                                        botonDescargarPDF.textContent = "Descargar un resumen de la reserva en PDF"
                                        botonDescargarPDF.download = "Reserva.pdf"
                                        botonDescargarPDF.title = "Descargar PDF"
                                        botonDescargarPDF.href = `data:application/pdf;base64,${pdfBase64}`


                                        botonDescargar.parentNode.replaceChild(botonDescargarPDF, botonDescargar);
                                        botonCancelar.textContent = "Cancelar y volver"
                                    }

                                }

                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const contenedorDesgloseDelTotal = document.createElement("div")
                                contenedorDesgloseDelTotal.classList.add("administracion_reserver_detallesReserva_contenedorDesgloseTotal")
                                contenedorDesgloseDelTotal.setAttribute("instanciaUID", instanciaUID)
                                contenedorDesgloseDelTotal.setAttribute("componente", "contenedorDesgloseTotal")
                                contenedorDinamico.appendChild(contenedorDesgloseDelTotal)
                                const contenedorAdvertenciaInmersiva = document.createElement("div")
                                contenedorAdvertenciaInmersiva.classList.add("administracion_reservas_detallesReserva_contenedorMisleanea")
                                const titulo = document.createElement("p")
                                titulo.classList.add("detallesReserva_reembolso_tituloGlobal")
                                titulo.textContent = "Miscelánea"
                                contenedorAdvertenciaInmersiva.appendChild(titulo)
                                const infoGlobal = document.createElement("div")
                                infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                                infoGlobal.textContent = `En la miscelánea de la reserva encontrará operaciones y demás propósitos u opciones que, por su idiosincrasia específica, no requieren de un contexto dedicado.`
                                contenedorAdvertenciaInmersiva.appendChild(infoGlobal)
                                let boton = document.createElement("div")
                                boton.classList.add("botonV1BlancoIzquierda_sinRadius", "borderRadius12")
                                boton.addEventListener("click", obtenerPDF)
                                boton.textContent = "Generar un PDF del resumen de la reserva"
                                contenedorAdvertenciaInmersiva.appendChild(boton)
                                boton = document.createElement("div")
                                boton.classList.add("administracion_reservas_detallesReserfa_miscelanea_botonOpcion")
                                boton.textContent = "Generar un PDF del resumen de la reserva y enviar por mail(implementandose)"

                                const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                instanciaRenderizada.innerHTML = null
                                instanciaRenderizada.appendChild(contenedorAdvertenciaInmersiva)
                            }
                        },
                    },
                },
                ampliadorDeImagen: {
                    cerrarImagen: (e) => {
                        const contenedorImagenAmpliada = e.target.closest("[componente=contenedorImagenAmpliada]")

                        const grupoActual = contenedorImagenAmpliada.getAttribute("grupoActualIDV")
                        const numeroImagen = contenedorImagenAmpliada.getAttribute("numeroImagen")
                        const imagenElemento = document.querySelector(`main [grupoIDV="${grupoActual}"] [numeroImagen="${numeroImagen}"]`)
                        const posicionImagen = imagenElemento.getBoundingClientRect();
                        const contenedorImagen = contenedorImagenAmpliada.querySelector("[contenedor=imagenVolatil]")
                        contenedorImagen.addEventListener("transitionend", () => {
                            contenedorImagenAmpliada.remove()
                        })
                        const galeriaFlotante = imagenElemento.closest("[contenedor=galeriaFlotante]")
                        if (!galeriaFlotante) {
                            document.body.style.removeProperty("overflow")
                        }
                        contenedorImagenAmpliada.removeAttribute("style")
                        contenedorImagenAmpliada.style.pointerEvents = "none"
                        contenedorImagen.style.top = posicionImagen.y + "px"
                        contenedorImagen.style.left = posicionImagen.x + "px"
                        contenedorImagen.style.width = posicionImagen.width + "px"
                        contenedorImagen.style.height = posicionImagen.height + "px"
                        contenedorImagenAmpliada.style.opacity = "0"
                    },
                    cambiarImagen: function (data) {

                        const sentido = data.sentido
                        const contenedorImagenAmpliada = data.e.target.closest("[componente=contenedorImagenAmpliada]")
                        const grupoActual = contenedorImagenAmpliada.getAttribute("grupoActualIDV")
                        const imagenActual = contenedorImagenAmpliada.getAttribute("numeroImagen")
                        const numerosTotales = contenedorImagenAmpliada.getAttribute("numerosTotales")
                        let imagenDestino
                        if (sentido === "imagenSiguiente") {
                            const imagenSiguiente = Number(imagenActual) + 1
                            imagenDestino = imagenSiguiente > numerosTotales ? 0 : imagenSiguiente
                        } else if (sentido === "imagenAnterior") {
                            const imagenAnterior = Number(imagenActual) - 1
                            imagenDestino = imagenAnterior < 0 ? numerosTotales : imagenAnterior
                        }
                        contenedorImagenAmpliada.setAttribute("numeroImagen", imagenDestino)
                        const contenedorImagen = document
                            .querySelector(`[grupoIDV="${grupoActual}"] [numeroImagen="${imagenDestino}"]`)
                        const imagenUID = contenedorImagen.getAttribute("imagenUID")
                        contenedorImagenAmpliada.setAttribute("imagenUID_ampliada", imagenUID)
                        const imagen = contenedorImagen.querySelector("[contenedor=imagenBase64]")
                        const imagenBase64 = imagen.style.backgroundImage
                        const imagenVolatil = contenedorImagenAmpliada.querySelector(`[contenedor=imagenVolatil]`)
                        imagenVolatil.style.backgroundImage = imagenBase64

                        const titulo = imagen.getAttribute("titulo")
                        const descripcion = imagen.getAttribute("descripcion")

                        this.uiInfoImagen({
                            titulo,
                            descripcion
                        })
                    },
                    uiInfoImagen: function (data) {
                        const titulo = data.titulo || ""
                        const descripcion = data.descripcion || ""
                        const contenedorImagenAmpliada = document.querySelector(`[componente=contenedorImagenAmpliada]`)

                        if (titulo.length > 0 || descripcion.length > 0) {
                            const uiRenderizada = contenedorImagenAmpliada.querySelector("[contenedor=infoImagen]")
                            if (!uiRenderizada) {
                                const uiInfo = document.createElement("div")
                                uiInfo.setAttribute("contenedor", "infoImagen")
                                uiInfo.classList.add("flexVertical", "borderRadius20", "padding18", "backgroundWhite3", "blur50")
                                uiInfo.style.bottom = "0px"
                                uiInfo.style.position = "absolute"
                                uiInfo.style.margin = "20px"
                                uiInfo.style.wordBreak = "break-all"

                                const tituloUI = document.createElement("p")
                                tituloUI.setAttribute("data", "titulo")
                                tituloUI.classList.add("negrita")
                                tituloUI.textContent = titulo
                                uiInfo.appendChild(tituloUI)

                                const descripcionUI = document.createElement("p")
                                descripcionUI.setAttribute("data", "descripcion")
                                descripcionUI.textContent = descripcion
                                uiInfo.appendChild(descripcionUI)

                                contenedorImagenAmpliada.appendChild(uiInfo)
                            } else {
                                uiRenderizada.querySelector("[data=titulo]").textContent = titulo
                                uiRenderizada.querySelector("[data=descripcion]").textContent = descripcion
                            }

                        } else {
                            contenedorImagenAmpliada.querySelector("[contenedor=infoImagen]")?.remove()
                        }
                    },
                    ampliarImagen: function (imagen) {

                        const imagenesAmpliadasObsoletas = document.querySelectorAll("[componente=contenedorImagenAmpliada]")
                        imagenesAmpliadasObsoletas.forEach(iA => iA?.remove())

                        document.body.style.overflow = 'hidden';
                        const imagenElemento = imagen.target.closest("[componente=fotoAmpliable]")
                        const contenedorImagen = imagenElemento.querySelector("[contenedor=imagenBase64]")
                        const fondoClaseCSS = contenedorImagen.style.backgroundImage
                        const areaGaleria = imagen.target.closest("[grupoIDV]")
                        const grupoIDV = areaGaleria.getAttribute("grupoIDV")
                        const imagenesAmpliables = areaGaleria.querySelectorAll("[componente=fotoAmpliable]")
                        const titulo = contenedorImagen.getAttribute("titulo") || ""
                        const descripcion = contenedorImagen.getAttribute("descripcion") || ""
                        const imagenUID = imagenElemento.getAttribute("imagenUID")
                        const estadoActual = imagenElemento.getAttribute("estadoActual")


                        let numerosTotales = 0
                        imagenesAmpliables.forEach((imagenDelGrupo, numero) => {
                            numerosTotales = numero
                            imagenDelGrupo.removeAttribute("style")
                            imagenDelGrupo.removeAttribute("numeroImagen")
                            imagenDelGrupo.setAttribute("numeroImagen", numero)
                        })

                        const numeroImagen = imagenElemento.getAttribute("numeroImagen")
                        const posicionImagen = imagenElemento.getBoundingClientRect();
                        const contenedorImagenAmpliada = document.createElement("div")
                        contenedorImagenAmpliada.classList.add("contenedorImagenAmpliada", "sobreControlAnimacionGlobal")
                        contenedorImagenAmpliada.setAttribute("componente", "contenedorImagenAmpliada")
                        contenedorImagenAmpliada.setAttribute("grupoActualIDV", grupoIDV)
                        contenedorImagenAmpliada.setAttribute("numeroImagen", numeroImagen)
                        contenedorImagenAmpliada.setAttribute("numerosTotales", numerosTotales)
                        contenedorImagenAmpliada.setAttribute("imagenUID_ampliada", imagenUID)
                        document.querySelector("main").appendChild(contenedorImagenAmpliada)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.setAttribute("componente", "contenedorBotones")

                        const botonAtras = document.createElement("div")
                        botonAtras.classList.add("botonV1Blanco", "blur50")
                        botonAtras.textContent = "Atrás"
                        botonAtras.addEventListener("click", (e) => {
                            this.cambiarImagen({
                                sentido: "imagenAnterior",
                                e
                            })
                        })

                        const botonCerrar = document.createElement("div")
                        botonCerrar.classList.add("botonV1Blanco", "blur50")
                        botonCerrar.textContent = "Cerrar"

                        botonCerrar.addEventListener("click", (e) => {
                            this.cerrarImagen(e)

                        })

                        const botonSiguiente = document.createElement("div")
                        botonSiguiente.classList.add("botonV1Blanco", "blur50")
                        botonSiguiente.textContent = "Siguiente"
                        botonSiguiente.addEventListener("click", (e) => {
                            this.cambiarImagen({
                                sentido: "imagenSiguiente",
                                e
                            })
                        })

                        const marcoEspaciadorContenedorBotones = document.createElement("div")
                        marcoEspaciadorContenedorBotones.classList.add("marcoEspaciadoContenedorBotones")
                        marcoEspaciadorContenedorBotones.appendChild(contenedorBotones)
                        contenedorImagenAmpliada.appendChild(marcoEspaciadorContenedorBotones)

                        if (numerosTotales === 0) {
                            contenedorBotones.classList.add("flexVertical", "gap10", "padding10")
                            contenedorBotones.appendChild(botonCerrar)
                        } else {
                            contenedorBotones.classList.add("gridHorizotnal3C", "gap10", "padding10")
                            contenedorBotones.appendChild(botonAtras)
                            contenedorBotones.appendChild(botonCerrar)
                            contenedorBotones.appendChild(botonSiguiente)
                        }
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                        const contenedorImagenVolatil = document.createElement("div")
                        contenedorImagenVolatil.classList.add("contenedorImagenVolatil", `calendarioFlotante_${instanciaUID}`)
                        contenedorImagenVolatil.style.backgroundImage = fondoClaseCSS
                        contenedorImagenVolatil.setAttribute("contenedor", "imagenVolatil")
                        const claseDinamica = document.createElement('style');
                        claseDinamica.innerHTML = `
                            .calendarioFlotante_${instanciaUID} {
                                transition: all 250ms linear;
                                top: 0px;
                                left: 0;
                                height: 100vh;
                                width: 100vw;
                                
                                @starting-style {
                                    top: ${posicionImagen.y}px;
                                    left: ${posicionImagen.x}px;
                                    width: ${posicionImagen.width}px;
                                    height: ${posicionImagen.height}px;
                                    border-radius: 20px;
                                    }
                                }
                        `;
                        contenedorImagenVolatil.appendChild(claseDinamica);
                        contenedorImagenAmpliada.appendChild(contenedorImagenVolatil)


                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                        spinner.classList.add("blur50", "backgroundWhite3")

                        if (estadoActual === "cargando") {
                            contenedorImagenVolatil.appendChild(spinner)
                        }

                        contenedorImagenVolatil.addEventListener("transitionend", (e) => {
                            e.target.closest("[componente=contenedorImagenAmpliada]").style.transition = "all 0ms"

                        })

                        this.uiInfoImagen({
                            titulo,
                            descripcion
                        })

                    }

                }
            },
            widgetsUI: {
                contenedorTituloDescripcionSimple: (data) => {

                    const titulo = data.titulo
                    const dato = data.dato
                    const contenedor = document.createElement("div")
                    contenedor.classList.add(
                        "flexVertical"
                    )
                    const tituloUI = document.createElement("p")
                    tituloUI.setAttribute("data", "tituloUI")
                    tituloUI.textContent = titulo
                    contenedor.appendChild(tituloUI)

                    const dataUI = document.createElement("p")
                    dataUI.setAttribute("data", "dataUI")
                    dataUI.textContent = dato

                    contenedor.appendChild(dataUI)
                    return contenedor

                },
                textoSimple: (texto) => {
                    const contenedor = document.createElement("div")
                    contenedor.textContent = texto
                    return contenedor
                }
            },
            serviciosUI: {
                contenedor_gruposDeOpciones: () => {
                    const contenedor = document.createElement("div")
                    contenedor.setAttribute("area", "grupoOpciones")
                    contenedor.classList.add(
                        "flexVertical",
                        "gap6",
                    )
                    return contenedor
                },
                grupoDeOpciones: () => {
                    const c = document.createElement("details")
                    c.setAttribute("componente", "grupo")
                    c.classList.add(
                        "flexVertical",
                        "padding6",
                        "borderGrey1",
                        "borderRadius14"
                    )

                    const titulo = document.createElement("summary")
                    titulo.setAttribute("data", "titulo")
                    titulo.classList.add(
                        "padding10",
                        "negrita",
                        // "textoCentrado"
                    )
                    titulo.textContent = "Titulo o definición del grupo"
                    c.appendChild(titulo)

                    const opcionesDelContenedor = document.createElement("div")
                    opcionesDelContenedor.setAttribute("area", "seleccion")
                    opcionesDelContenedor.setAttribute("areaIDV", "areaIDV_destino")
                    opcionesDelContenedor.classList.add(
                        "flexVertical",
                        "gap6",
                        "padding6",
                        "borderGrey1",
                        "borderRadius14",
                        "ratonDefault"
                    )
                    // c.appendChild(opcionesDelContenedor)

                    return c
                },
                opcionUI: () => {
                    const contenedorGlobal = document.createElement("div")
                    contenedorGlobal.classList.add("contenedorGlobal", "contenedorGlobal_hover", "padding4")
                    contenedorGlobal.setAttribute("selector", "opcion")
                    contenedorGlobal.setAttribute("opcionIDV", "opcionIDV_destino")
                    //  contenedorGlobal.addEventListener("click", (e) => {

                    // const botonesGrupo = e.target.closest("[area=seleccion]").querySelectorAll("[selector=opcion]")
                    // botonesGrupo.forEach((b) => {
                    //     b.removeAttribute("estado")
                    //     const indicadorEsfera = b.querySelector("[componente=indicadorSelecion]")
                    //     indicadorEsfera.removeAttribute("style")

                    // })
                    // const contenedorSelecioando = e.target.closest("[selector=opcion]")
                    // contenedorSelecioando.setAttribute("estado", "activado")
                    // contenedorSelecioando.querySelector("[componente=indicadorSelecion]").style.background = "blue"
                    //  })

                    const esferaSeleccionable = document.createElement("div")
                    esferaSeleccionable.classList.add(
                        "esferaSeleccionable"
                    )
                    contenedorGlobal.appendChild(esferaSeleccionable)

                    const indicadorDeSeleccion = document.createElement("div")
                    indicadorDeSeleccion.setAttribute("componente", "indicadorSelecion")
                    indicadorDeSeleccion.classList.add(
                        "indicadorDeSeleccion"
                    )
                    esferaSeleccionable.appendChild(indicadorDeSeleccion)

                    const tituloConf = document.createElement("p")
                    tituloConf.setAttribute("data", "opcionUI")
                    tituloConf.classList.add(
                        "padding6",
                    )
                    tituloConf.textContent = "Nombre de la opcion"
                    contenedorGlobal.appendChild(tituloConf)

                    return contenedorGlobal
                },
                controladorSeleccion: async function (e) {

                    const opcionPulsada = e.target.closest("[selector=opcion]")
                    const confGrupo = JSON.parse(e.target.closest("[conf]").getAttribute("conf"))
                    const confSelNumero = confGrupo.confSelNumero
                    const estadoActual = opcionPulsada.getAttribute("estado")

                    const selectorGrupo = e.target.closest("[componente=grupo]")
                    const opcionesDelGrupo = selectorGrupo.querySelectorAll("[selector=opcion]")

                    if (confSelNumero.includes("maximoUnaOpcion")) {
                        opcionesDelGrupo.forEach(opcion => {
                            opcion.removeAttribute("estado")
                            const indicadorEsfera = opcion.querySelector("[componente=indicadorSelecion]")
                            indicadorEsfera.removeAttribute("style")
                        })
                    }
                    if (estadoActual === "activado") {
                        opcionPulsada.removeAttribute("estado")
                        opcionPulsada.querySelector("[componente=indicadorSelecion]").removeAttribute("style")
                    } else {
                        opcionPulsada.setAttribute("estado", "activado")
                        opcionPulsada.querySelector("[componente=indicadorSelecion]").style.background = "blue"
                    }

                    const areaGrupoOpciones = e.target.closest("[area=grupoOpciones]")
                    await this.controladorEstadoGrupos(areaGrupoOpciones)


                },
                controladorEstadoGrupos: async (areaGrupoOpciones) => {

                    const gruposDelServicio = areaGrupoOpciones.querySelectorAll("[componente=grupo]")
                    let interruptorRevisarGrupos = null
                    const servicioUI = areaGrupoOpciones.closest("[servicioUID]")
                    const iconoGlobalServicio = servicioUI.querySelector("[indicador=global]")

                    gruposDelServicio.forEach(grupo => {

                        const configuracionDelGrupo = JSON.parse(grupo.getAttribute("conf"))
                        const opcionesDelGrupo = grupo.querySelectorAll("[selector=opcion]")
                        for (const o of opcionesDelGrupo) {
                            const estadoOpcionObligatoria = o.getAttribute("estado")
                            if (estadoOpcionObligatoria === "activado") {
                                interruptorRevisarGrupos = "activar"
                                continue
                            }
                        }

                    })
                    if (interruptorRevisarGrupos === "activar") {

                        gruposDelServicio.forEach(grupo => {
                            let estadoGrupoObligatorio = null

                            const configuracionDelGrupo = JSON.parse(grupo.getAttribute("conf"))
                            const confSelObligatoria = configuracionDelGrupo.confSelObligatoria
                            if (confSelObligatoria.includes("unaObligatoria")) {

                                const opcionesDelGrupo = grupo.querySelectorAll("[selector=opcion]")
                                for (const o of opcionesDelGrupo) {
                                    const estadoOpcionObligatoria = o.getAttribute("estado")
                                    if (estadoOpcionObligatoria === "activado") {
                                        estadoGrupoObligatorio = "activar"
                                        continue
                                    }
                                }
                                if (estadoGrupoObligatorio === "activar") {
                                    grupo.removeAttribute("style")
                                    grupo.setAttribute("estadoGrupo", "sel")
                                } else {
                                    grupo.style.background = "red"
                                    grupo.removeAttribute("estadoGrupo")
                                }
                            }
                        })
                        // Si todas las opciones de un grupo estan seleccionadas, se considera el grupo completamtne selecionado
                        let estadoSelServicio = "sel"

                        for (const grupo of gruposDelServicio) {

                            const configuracionDelGrupo = JSON.parse(grupo.getAttribute("conf"))
                            const confSelObligatoria = configuracionDelGrupo.confSelObligatoria
                            if (confSelObligatoria.includes("unaObligatoria")) {
                                const estadoGrupoObligatorio = grupo.getAttribute("estadoGrupo")
                                if (estadoGrupoObligatorio !== "sel") {
                                    estadoSelServicio = "desactivado"
                                    break
                                }
                            }
                        }
                        if (estadoSelServicio === "sel") {
                            servicioUI.setAttribute("estadoServicio", "selCompleta")
                            iconoGlobalServicio.style.background = "green"

                        } else {
                            iconoGlobalServicio.style.background = "orange"
                            servicioUI.removeAttribute("estadoServicio")
                        }
                    } else {
                        gruposDelServicio.forEach(grupo => {
                            const configuracionDelGrupo = JSON.parse(grupo.getAttribute("conf"))
                            const confSelObligatoria = configuracionDelGrupo.confSelObligatoria
                            if (confSelObligatoria.includes("unaObligatoria")) {
                                grupo.removeAttribute("style")
                                grupo.removeAttribute("estadoGrupo")
                            }
                        })
                        servicioUI.removeAttribute("estadoServicio")
                        iconoGlobalServicio.removeAttribute("style")

                    }
                },

            }
        }
    },
    componentes: {
        temporizador: null,
        pasarelas: {
            square: {
                crearSesionPago: async (instanciaUID) => {
                    const transaccion = {
                        zona: "componentes/pasarela/squareConstruyeCliente"
                    };
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    const selectorSesionesPago = document.querySelectorAll("#sessionPagoSquare")
                    selectorSesionesPago.forEach(session => {
                        session.remove()
                    })
                    const metadataClienteSquare = document.createElement("script")
                    metadataClienteSquare.setAttribute("id", "sessionPagoSquare")
                    metadataClienteSquare.setAttribute("type", "text/javascript")
                    metadataClienteSquare.innerHTML = `
                window.applicationId="${respuestaServidor?.squareApplicationId}";
                window.locationId="${respuestaServidor?.squareLocationId}";
                window.currency="${respuestaServidor?.squareAccountCurrency}";
                window.country="${respuestaServidor?.squareAccountCountry}";
                window.idempotencyKey="${respuestaServidor?.idempotencyKey}"
                `
                    const selectorSquareJS = document.querySelector("section:not([estado=obsoleto])")
                    const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (instanciaUIDRenderizada) {
                        selectorSquareJS.insertAdjacentElement("afterend", metadataClienteSquare);
                    }
                },
                inyectorSquareJS: async (instanciaUID) => {
                    return new Promise((resolve, reject) => {
                        const selectorMotorarranque = document.querySelector("[square=motorarranque]")
                        const squareJS = document.createElement("script");
                        squareJS.setAttribute("type", "text/javascript");

                        squareJS.setAttribute("src", "https://sandbox.web.squarecdn.com/v1/square.js");
                        squareJS.setAttribute("id", "squareJS")
                        squareJS.onload = resolve;
                        squareJS.onerror = () => {
                            reject(new Error("Error al cargar el archivo square.js"))
                        }
                        const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (instanciaUIDRenderizada) {
                            selectorMotorarranque.insertAdjacentElement("afterend", squareJS);
                        }
                    })
                },
                inyectorMetodosPago: async (instanciaUID) => {
                    return new Promise((resolve, reject) => {
                        const seccion = document.querySelector("section:not([estado=obsoleto])")
                        let metodoPagoCargadoCorrectamente = 0;
                        const totalMetodosPago = 4;
                        const metodosPago = [
                            "/componentes/javascript/square/sq-ach.js",
                            "/componentes/javascript/square/sq-apple-pay.js",
                            "/componentes/javascript/square/sq-google-pay.js",
                            "/componentes/javascript/square/sq-card-pay.js"
                        ];
                        metodosPago.forEach(metodoPago => {
                            const metodoPagoElemento = document.createElement('script');
                            metodoPagoElemento.setAttribute("type", "text/javascript")
                            metodoPagoElemento.src = metodoPago;
                            metodoPagoElemento.onload = () => {
                                metodoPagoCargadoCorrectamente++;
                                if (metodoPagoCargadoCorrectamente === totalMetodosPago) {
                                    resolve();
                                }
                            };
                            metodoPagoElemento.onerror = () => {
                                reject(new Error(`Error al cargar el metodo de pago: ${metodoPago}`));
                            };
                            const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (instanciaUIDRenderizada) {
                                seccion.appendChild(metodoPagoElemento);
                            }
                        });
                    });
                },
                inyectorFlujoPago: async (instanciaUID) => {
                    return new Promise((resolve, reject) => {
                        const seccion = document.querySelector("section:not([estado=obsoleto])")
                        const flujoPago = document.createElement("script");
                        flujoPago.setAttribute("type", "text/javascript");
                        flujoPago.setAttribute("src", "/componentes/javascript/square/sq-payment-flow.js");
                        flujoPago.onload = resolve;
                        flujoPago.onerror = () => {
                            reject(new Error("Error al cargar el archivo sq-payment-flow.js"))
                        }
                        const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (instanciaUIDRenderizada) {
                            seccion.appendChild(flujoPago)
                        }
                    })
                },
                uiForm: (destino) => {
                    const selectorDestino = document.querySelector(destino);
                    if (selectorDestino === null) {
                        const error = "casaVitini.componentes.square.intectorFlujoPago no encuentra el elemento de destino"
                        return casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }

                    const paymentForm = document.createElement("form");
                    paymentForm.className = "payment-form";
                    paymentForm.id = "fast-checkout";

                    const wrapperDiv = document.createElement("div");
                    wrapperDiv.className = "wrapper";
                    paymentForm.appendChild(wrapperDiv);

                    const applePayButton = document.createElement("div");
                    applePayButton.id = "apple-pay-button";
                    applePayButton.alt = "apple-pay";
                    applePayButton.type = "button";
                    wrapperDiv.appendChild(applePayButton);

                    const googlePayButton = document.createElement("div");
                    googlePayButton.id = "google-pay-button";
                    googlePayButton.alt = "google-pay";
                    googlePayButton.type = "button";
                    wrapperDiv.appendChild(googlePayButton);

                    let borderDiv = document.createElement("div");
                    borderDiv.className = "border";
                    wrapperDiv.appendChild(borderDiv);
                    const numberSpan = document.createElement("span");
                    numberSpan.textContent = "O";
                    borderDiv.appendChild(numberSpan);

                    const achWrapperDiv = document.createElement("div");
                    achWrapperDiv.id = "ach-wrapper";
                    wrapperDiv.appendChild(achWrapperDiv);
                    const achLabel = document.createElement("label");
                    achLabel.htmlFor = "ach-account-holder-name";
                    achLabel.textContent = "Full Name";
                    achWrapperDiv.appendChild(achLabel);
                    const achInput = document.createElement("input");
                    achInput.id = "ach-account-holder-name";
                    achInput.type = "text";
                    achInput.placeholder = "Jane Doe";
                    achInput.name = "ach-account-holder-name";
                    achInput.autocomplete = "name";
                    achWrapperDiv.appendChild(achInput);
                    const achMessageSpan = document.createElement("span");
                    achMessageSpan.id = "ach-message";
                    achWrapperDiv.appendChild(achMessageSpan);
                    const achButton = document.createElement("button");
                    achButton.id = "ach-button";
                    achButton.type = "button";
                    achButton.textContent = "Pay with Bank Account";
                    achWrapperDiv.appendChild(achButton);

                    borderDiv = document.createElement("div");
                    borderDiv.className = "border";

                    const orSpan = document.createElement("span");
                    orSpan.textContent = "OR";


                    const cardContainerDiv = document.createElement("div");
                    cardContainerDiv.id = "card-container";
                    wrapperDiv.appendChild(cardContainerDiv);

                    const cardButton = document.createElement("button");
                    cardButton.id = "card-button";
                    cardButton.type = "button";
                    cardButton.textContent = "Pagar reserva y confirmarla";
                    wrapperDiv.appendChild(cardButton);

                    const paymentFlowMessageSpan = document.createElement("span");
                    paymentFlowMessageSpan.id = "payment-flow-message";
                    wrapperDiv.appendChild(paymentFlowMessageSpan);
                    selectorDestino.appendChild(paymentForm);
                },
                flujoPagoUI: {
                    desplegarUI: (mensaje) => {
                        document.body.style.overflow = 'hidden';
                        const advertenciaInmersivaUI = document.createElement("section")
                        advertenciaInmersivaUI.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")
                        const spinnerContainer = document.createElement('div');
                        spinnerContainer.setAttribute("componente", "iconoFlujoPago");
                        spinnerContainer.classList.add("lds-spinner");
                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement('div');
                            spinnerContainer.appendChild(div);
                        }
                        advertenciaInmersivaUI.appendChild(spinnerContainer)
                        const info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.textContent = mensaje
                        advertenciaInmersivaUI.appendChild(info)
                        document.body.appendChild(advertenciaInmersivaUI)
                    },
                    botonAcetpar: () => {
                        const boton = document.createElement("div")
                        boton.setAttribute("class", "botonV1")
                        boton.textContent = "Aceptar"
                        boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                        return boton
                    },
                    infoDuranteFlujo: (mensaje) => {
                        const contenedorMensaje = document.querySelector("[componente=mensajeFlujoPasarela]")
                        contenedorMensaje.textContent = "Comprodando datos para realizar el pago..."
                    },
                    errorInfo: (mensaje) => {
                        document.querySelector("[componente=iconoFlujoPago]")?.remove()
                        const contenedorMensaje = document.querySelector("[componente=mensajeFlujoPasarela]")
                        contenedorMensaje.textContent = mensaje
                        const advertenciaInmersivaUI = document.querySelector("[componente=advertenciaInmersiva]")
                        const botonAceptar = casaVitini.componentes.flujoPagoUI.botonAcetpar()
                        advertenciaInmersivaUI.appendChild(botonAceptar)
                    }
                },
            },
        },
        loginUI: async () => {
            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
            const url = window.location.pathname;
            const zona = {
                vista: url,
                tipoOrigen: "historial",
            }
            await casaVitini.shell.navegacion.controladorVista(zona)
        },
        privacidad: {
            arranque: (vista) => {
                const filtro = /privacidad(\/.*)?$/
                const resultadoFiltro = filtro.test(vista)
                if (vista && resultadoFiltro) {
                    return false
                }

                const cookies = casaVitini.componentes.privacidad.obtenerCookies()
                if (cookies.privacidad !== "consentimientoAceptado") {
                    return true
                }
            },
            obtenerCookies: () => {
                const cookiesArray = document.cookie.split("; ")
                const cookiesObjeto = {}

                for (const cadenaDeLaCookie of cookiesArray) {
                    const arrayPorCookie = cadenaDeLaCookie.split("=")
                    const nombre = arrayPorCookie[0]
                    const valor = arrayPorCookie[1]
                    cookiesObjeto[nombre] = valor
                }
                return cookiesObjeto
            },
            borrarCookies: () => {
                localStorage.clear()
                const cookies = casaVitini.componentes.privacidad.obtenerCookies()
                for (const [nombreCookies, valorCookie] of Object.entries(cookies)) {
                    if ('cookieStore' in window) {
                        cookieStore?.delete(nombreCookies)
                    } else {
                        document.cookie = nombreCookies + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
                    }
                }
            },
            crearCookieConsentimiento: () => {
                const fecha = new Date();
                fecha.setTime(fecha.getTime() + (365 * 24 * 60 * 60 * 1000));  // 24 horas desde ahora
                const expira = "expires=" + fecha.toUTCString();
                document.cookie = "privacidad=consentimientoAceptado; " + expira + "; SameSite=Strict; path=/; Secure";
            },
            advertenciaPrivacidadInicial: () => {

                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "privacidad")

                const titulo = document.createElement("p")
                titulo.textContent = "Advertencia de privacidad y uso de cookies "
                titulo.classList.add("tituloGris")
                main.appendChild(titulo)

                const resumenInicial = document.createElement("p")
                resumenInicial.style.marginTop = "10px"
                resumenInicial.textContent = `Este sitio web usa cookies propias y de terceros para soportar la navegación, mejorar la experiencia de usuario, personalizar el contenido y realizar análisis estadísticos sobre los hábitos de navegación.`
                main.appendChild(resumenInicial)

                const contenedorBotones = casaVitini.componentes.privacidad.ui.contenedorSecciones()
                main.appendChild(contenedorBotones)

                const contenedorDecision = casaVitini.componentes.privacidad.ui.contenedorDecision()
                main.appendChild(contenedorDecision)


            },
            ui: {
                contenedorSecciones: () => {

                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElasticoRelativo")
                    marcoElastico.style.maxWidth = "720px"
                    marcoElastico.style.gap = "10px"
                    marcoElastico.setAttribute("espacio", "politicas")

                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("flexVertical", "gap10")
                    marcoElastico.appendChild(contenedorBotones)


                    const botonPoliticaCookies = document.createElement("a")
                    botonPoliticaCookies.classList.add("botonV1")
                    botonPoliticaCookies.textContent = "Política de cookies"
                    botonPoliticaCookies.setAttribute("href", "/politicas/privacidad/cookies")
                    botonPoliticaCookies.setAttribute("vista", "/politicas/privacidad/cookies")
                    botonPoliticaCookies.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(botonPoliticaCookies)

                    const botonPoliticaPrivacidad = document.createElement("a")
                    botonPoliticaPrivacidad.classList.add("botonV1")
                    botonPoliticaPrivacidad.textContent = "Política de privacidad"
                    botonPoliticaPrivacidad.setAttribute("href", "/politicas/privacidad/politica_de_privacidad")
                    botonPoliticaPrivacidad.setAttribute("vista", "/politicas/privacidad/politica_de_privacidad")
                    botonPoliticaPrivacidad.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(botonPoliticaPrivacidad)

                    const botonCondicionesDeUso = document.createElement("a")
                    botonCondicionesDeUso.classList.add("botonV1")
                    botonCondicionesDeUso.setAttribute("href", "/politicas/privacidad/condiciones_de_uso")
                    botonCondicionesDeUso.setAttribute("vista", "/politicas/privacidad/condiciones_de_uso")
                    botonCondicionesDeUso.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    botonCondicionesDeUso.textContent = "Condiciones de uso"
                    contenedorBotones.appendChild(botonCondicionesDeUso)

                    return marcoElastico
                },
                contenedorDecision: () => {
                    const contenedorDecision = document.createElement("div")
                    contenedorDecision.classList.add("contenedorDecision")
                    contenedorDecision.setAttribute("contenedor", "botones")

                    const botonRechazar = document.createElement("a")
                    botonRechazar.classList.add("botonPrivacidad")
                    botonRechazar.textContent = "Rechazar todo"
                    botonRechazar.addEventListener("click", () => {
                        casaVitini.componentes.privacidad.borrarCookies()
                        window.location.href = "about:blank"
                    })
                    contenedorDecision.appendChild(botonRechazar)

                    const botonAceptar = document.createElement("a")
                    botonAceptar.classList.add("botonPrivacidad")
                    botonAceptar.textContent = "Aceptar todo"
                    botonAceptar.addEventListener("click", () => {

                        casaVitini.componentes.privacidad.crearCookieConsentimiento()
                        const url = window.location.pathname;
                        if (url === "/") {
                            return casaVitini.shell.navegacion.controladorVista("portada")
                        } else if (url === "/politicas/privacidad") {
                            const main = document.querySelector("main")
                            main.querySelector("[contenedor=botones]")?.remove()
                            const contenedorDecision = casaVitini.componentes.privacidad.ui.revocarDecision()
                            main.querySelector("[espacio=politicas]").appendChild(contenedorDecision)
                        } else {
                            return casaVitini.shell.navegacion.controladorVista(url)
                        }
                    })
                    contenedorDecision.appendChild(botonAceptar)
                    return contenedorDecision
                },
                revocarDecision: () => {
                    const contenedorDecision = document.createElement("div")
                    contenedorDecision.classList.add("flexVertical", "gap10")
                    contenedorDecision.setAttribute("contenedor", "botones")


                    const textoInfo = document.createElement("div")
                    textoInfo.classList.add("padding14", "textoCentrado")
                    textoInfo.textContent = "Ha aceptado las políticas de privacidad y condiciones de uso de Casa Vitini, si quiere, puede revocarlas en cualquier momento borrando la cache de su navegador o pulsando en el botón de revocar de abajo."
                    contenedorDecision.appendChild(textoInfo)

                    const botonRechazar = document.createElement("a")
                    botonRechazar.classList.add("botonV1")
                    botonRechazar.textContent = "Revocar decisión y borrar cookies"
                    botonRechazar.addEventListener("click", () => {
                        casaVitini.componentes.privacidad.borrarCookies()
                        document.querySelector("[contenedor=botones]")?.remove()
                        const main = document.querySelector("main")
                        const contenedorDecision = casaVitini.componentes.privacidad.ui.contenedorDecision()
                        main.querySelector("[espacio=politicas]").appendChild(contenedorDecision)


                    })
                    contenedorDecision.appendChild(botonRechazar)
                    return contenedorDecision


                }
            }
        },
        diccionarios: {
            reserva: {
                estadoPagoUI: "Estado del pago",
                estadoReservaIDV: (data) => {
                    if (data === "pendiente") {
                        return "Pendiente"
                    }
                    if (data === "confirmada") {
                        return "confirmada"
                    }
                    if (data === "cancelada") {
                        return "Cancelada"
                    }
                },
                origenIDV: (data) => {
                    if (data === "cliente") {
                        return "Cliente"
                    }
                    if (data === "administracion") {
                        return "Adminitración"
                    }
                },
                estadoPagoIDV: (data) => {
                    if (data === "noPagado") {
                        return "No pagado"
                    }
                    if (data === "pagadoParcialmente") {
                        return "Pagado parcialmente"
                    }
                    if (data === "pagadoSuperadamente") {
                        return "Pagado superadament"
                    }
                }
            }

        }
    },
    utilidades: {
        cadenas: {
            snakeToCamel: (snake) => {
                return snake.replace(/_([a-z])/g, (match, group) => {
                    return group.toUpperCase();
                });
            },
            camelToSnake: (camel) => {

                return camel.replace(/[A-Z]/g, (match) => {
                    return '_' + match.toLowerCase();
                });
            },
            constructorComasEY: (data) => {
                const array = data.array
                const articulo = data.articulo || ""
                if (array.length === 1) {
                    return array[0];
                } else {
                    const formattedString = array.slice(0, -1).join(', ' + articulo + " ") + ' y ' + articulo + " " + array.slice(-1);
                    return formattedString;
                }

            },
        },
        conversor: {
            fecha_humana_hacia_ISO: (fecha) => {
                const filtroFechaHumana = /^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[0-2])\/(\d{4})$/;
                if (filtroFechaHumana.test(fecha)) {
                    const fechaArray = fecha.split("/")
                    const dia = fechaArray[0]
                    const mes = fechaArray[1]
                    const ano = fechaArray[2]
                    const fechaISO = `${ano}-${mes}-${dia}`
                    return fechaISO
                } else {
                    const m = "En fecha_humana_hacia_ISO no se reconoce el formato humano"
                    return casaVitini.ui.componentes.advertenciaInmersiva(m)
                }
            },
            fecha_ISO_hacia_humana: (fecha) => {

                const filtroFechaISO = /^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;
                if (filtroFechaISO.test(fecha)) {
                    const fechaArray = fecha.split("-")
                    const dia = fechaArray[2]
                    const mes = fechaArray[1]
                    const ano = fechaArray[0]
                    const fechaHumana = `${dia}/${mes}/${ano}`
                    return fechaHumana
                } else {
                    const m = "En fecha_ISO_hacia_humana no se reconoce el formato ISO"
                    return casaVitini.ui.componentes.advertenciaInmersiva(m)
                }
            },
            extraerFechasInternas: (inicio, fin) => {
                const fechas = [];
                const inicio_objeto = new Date(inicio);
                const fin_objeto = new Date(fin);


                fin_objeto.setDate(fin_objeto.getDate() + 1);

                while (inicio_objeto < fin_objeto) {
                    fechas.push(inicio_objeto.toISOString().split("T")[0]);
                    inicio_objeto.setDate(inicio_objeto.getDate() + 1);
                }
                return fechas;
            },
            base64HaciaCadena: (base64) => {
                const binaryString = atob(base64);
                const asciiString = Array.from(binaryString, char => char).join('');
                return asciiString
            }
        },
        observador: {
            medirPorJerarquiaDom: {
                horizontal: (elemento) => {
                    let distancia = 0;

                    while (elemento) {
                        distancia += elemento.offsetLeft;
                        elemento = elemento.offsetParent;
                    }
                    return distancia;
                },
                vertical: {
                    desdeArribaDelElemento: (elemento) => {
                        let distancia = 0;

                        while (elemento) {
                            distancia += elemento.offsetTop;
                            elemento = elemento.offsetParent;
                        }
                        return distancia;
                    },
                    desdeAbajoDelElemento: (elemento) => {
                        let distancia = elemento.clientHeight;

                        while (elemento) {
                            distancia += (elemento.offsetTop);
                            elemento = elemento.offsetParent;
                        }
                        return distancia;
                    }
                }
            },
            anchoActualVentanad: window.innerWidth,
            menusFlotanes: (configuracion) => {
                const elementoParaObservar = configuracion.elementoParaObservar
                const elementoDestino = configuracion.elementoDestino


                const borrarInstancia = () => {
                    if (instanciaDelObservador) {
                        instanciaDelObservador.disconnect(); // Deja de observar el elemento
                        instanciaDelObservador = null; // Limpia la referencia a la instancia del observador
                    }
                };

                const selectorElementoOrigen = document.querySelector(elementoParaObservar);
                let instanciaDelObservador; // Declara la variable fuera del alcance de la función observador
                if (!selectorElementoOrigen) {
                    const mensaje = "No se encuentra el elemento a observar";
                    return casaVitini.ui.componentes.advertenciaInmersiva(mensaje);
                }
                const selectorElementoDestino = document.querySelector(elementoParaObservar);
                if (!selectorElementoDestino) {
                    const mensaje = "No se encuentra el elemento de destino";
                    borrarInstancia()
                    return casaVitini.ui.componentes.advertenciaInmersiva(mensaje);
                }

                instanciaDelObservador = new ResizeObserver(entries => {
                    for (let entry of entries) {
                        const { width, height, x, y } = entry.contentRect;
                        const contenedorRetorno = {
                            width: width,
                            height: height,
                            x: x,
                            y: y
                        }
                        const altoMenuFlotante = y + height
                        const ladoMenuFlotante = x
                    }
                });
                instanciaDelObservador.observe(selectorElementoOrigen);
            }

        },
        granuladorURL: () => {
            const urlActual = window.location.pathname
            const directoriosURL = []
            const parametrosURL = {}
            const parametrosArray = []
            let arrayURL = urlActual.split("/")
            arrayURL = arrayURL.filter((url) => url)
            arrayURL.forEach((bloque) => {
                if (bloque.includes(":")) {
                    const desgloseParametro = bloque.split(":")
                    parametrosURL[desgloseParametro[0]] = desgloseParametro[1]
                    const par = {
                        parametro: desgloseParametro[0],
                        valor: desgloseParametro[1]
                    }
                    parametrosArray.push(par)
                } else {
                    directoriosURL.push(bloque)
                }
            })
            const contenedorSeguroParaParametros = []
            for (const par of parametrosArray) {
                const parametro = par.parametro
                const valor = par.valor
                const estructura = parametro + ":" + valor
                contenedorSeguroParaParametros.push(estructura)
            }
            const contenedorParametrosParaFusion = []
            for (const [parametro, valor] of Object.entries(parametrosURL)) {
                const estructura = parametro + ":" + valor
                contenedorParametrosParaFusion.push(estructura)
            }
            const estructuraFinal = {
                rawArray: arrayURL,
                raw: urlActual,
                directorios: directoriosURL,
                parametros: parametrosURL,
                directoriosFusion: "/" + directoriosURL.join("/"),
                parametrosFusion: "/" + contenedorParametrosParaFusion.join("/"),
                contenedorSeguroParaParametros: contenedorSeguroParaParametros
            }
            return estructuraFinal
        },
        codigoFechaInstancia: function () {
            const generarUID = (() => {
                let ultimoUID = null;

                return () => {
                    let uid;
                    let fecha;
                    let año, mes, dia, horas, minutos, segundos, milisegundos;

                    do {
                        fecha = new Date();
                        año = fecha.getFullYear();
                        mes = String(fecha.getMonth() + 1).padStart(2, "0");
                        dia = String(fecha.getDate()).padStart(2, "0");
                        horas = String(fecha.getHours()).padStart(2, "0");
                        minutos = String(fecha.getMinutes()).padStart(2, "0");
                        segundos = String(fecha.getSeconds()).padStart(2, "0");
                        milisegundos = String(fecha.getMilliseconds()).padStart(3, "0");


                        uid = `${año}${mes}${dia}${horas}${minutos}${segundos}${milisegundos}`;
                    } while (uid === ultimoUID)
                    ultimoUID = uid;

                    return uid;
                };
            })();

            const contenedorVolatil = casaVitini.utilidades.contenedorVolatil || {};
            let uid = generarUID();

            while (contenedorVolatil[uid]) {
                uid = generarUID();
            }

            Object.keys(contenedorVolatil).forEach((contenedorUID) => {
                delete contenedorVolatil[contenedorUID];
            });

            contenedorVolatil[uid] = true;
            casaVitini.utilidades.contenedorVolatil = contenedorVolatil;

            return uid;
        },
        contenedorVolatil: null,
        ralentizador: async (milisegundos) => {
            await new Promise(resolve => setTimeout(resolve, Number(milisegundos)));
        },
        fechas: {
            constructorObjetoEstructuraPrecioDia: (fechaEntrada, fechaSalida) => {
                const arregloFechas = []
                let fechaEntrada_Objeto = new Date(fechaEntrada)
                const fechaSalida_Objeto = new Date(fechaSalida)

                fechaEntrada_Objeto.setHours(0, 0, 0, 0)
                fechaSalida_Objeto.setHours(0, 0, 0, 0)

                while (fechaEntrada_Objeto <= fechaSalida_Objeto) {
                    arregloFechas.push(fechaEntrada_Objeto.toISOString().split('T')[0])
                    fechaEntrada_Objeto.setDate(fechaEntrada_Objeto.getDate() + 1)
                }

                return arregloFechas
            }
        },
        borrarPosicionDeArrayPorCandena: (data) => {
            const array = data.array
            const cadenaParaBorrar = data.cadenaParaBorrar
            const indice = array.indexOf(cadenaParaBorrar);
            if (indice !== -1) {
                array.splice(indice, 1);
            }
            return array
        },
        validarRutaAFuncion: (ruta) => {
            const partes = ruta.split('.');
            let actual = casaVitini;

            for (let parte of partes) {
                if (!actual[parte]) {
                    return false;
                }
                actual = actual[parte];
            }

            return typeof actual === 'function';

        },
        ejecutarFuncionPorNomreDinamicoSinContexto: function (data) {
            const ruta = data.ruta
            const args = data.args
            const metodo = ruta.split('.').reduce((acc, parte) => acc[parte], casaVitini);
            if (typeof metodo === 'function') {
                return metodo(args);
            } else {
                throw new Error(`La ruta ${ruta} no corresponde a una función`);
            }
        },
        ejecutarFuncionPorNombreDinamicoConContexto: async function (data) {
            try {

                const ruta = data.ruta;
                const args = data.args;

                const partes = ruta.split('.');
                const contexto = partes.slice(0, -1).reduce((acc, parte) => acc[parte], casaVitini);
                const metodo = contexto[partes[partes.length - 1]];

                if (typeof metodo === 'function') {
                    return await metodo.call(contexto, args);
                } else {
                    throw new Error(`La ruta ${ruta} no corresponde a una función`);
                }
            } catch (error) {
                console.error(error)
            }

        },
        calendarios: {
            calcularNumeroSemanasDelMes: (data) => {

                const diasAnterioresAlPrimerDia = data.posicionPrimerDiaSemana - 1
                const numeroDiasPorMes = data.numeroDiasPorMes
                const totalDias = numeroDiasPorMes + diasAnterioresAlPrimerDia;

                const incertidumbre = totalDias / 7;

                const semanas = Number.isInteger(incertidumbre) ? incertidumbre : Math.ceil(totalDias / 7);

                return semanas;
            },
            tiempoDeLaFechas: (data) => {
                const fechaPresenteISO = data.fechaPresenteISO
                const fechaCompararISO = data.fechaCompararISO
                const fechaPresente = new Date(fechaPresenteISO);
                const fechaComparar = new Date(fechaCompararISO);
                const tiempoPresente = fechaPresente.getTime();
                const tiempoComparar = fechaComparar.getTime();

                // Comparamos las fechas
                if (tiempoComparar < tiempoPresente) {
                    return "pasado";
                } else if (tiempoComparar > tiempoPresente) {
                    return "futuro";
                } else {
                    return "presente";
                }
            }

        },
        formatos: {
            imagenes: {
                base64: (base64String) => {
                    const binarioMagicoPNG = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);
                    const binarioMagicoJPEG = new Uint8Array([255, 216, 255]);
                    const binarioMagicoTIFF = new Uint8Array([73, 73, 42, 0]); // Ajustado a 4 bytes
                    const arrayBuffer = Uint8Array.from(atob(base64String), c => c.charCodeAt(0));
                    const buffer = new Uint8Array(arrayBuffer);

                    const compareBytes = (buffer, magicBytes) => magicBytes.every((byte, index) => buffer[index] === byte);
                    if (compareBytes(buffer.subarray(0, 8), binarioMagicoPNG)) {
                        return "PNG";
                    } else if (compareBytes(buffer.subarray(0, 3), binarioMagicoJPEG)) {
                        return "JPEG"; // Verifica TIFF 
                    } else if (compareBytes(buffer.subarray(0, 4), binarioMagicoTIFF)) {
                        return "TIFF";
                    } else {
                        const m = "Tipo de imagen desconocido";
                        return casaVitini.ui.componentes.advertenciaInmersiva(m);
                    }
                }
            }
        },
    },
    view: {}
}
casaVitini.shell.arranque()