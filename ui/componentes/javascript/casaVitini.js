const casaVitini = {
    shell: {
        navegacion: {
            navegacionInversa: async (e) => {
                const zona = (history.state)?.zona || "portada"
                const tipoCambio = (history.state)?.tipoCambio || "parcial"
                const componenteExistente = history.state?.componenteExistente
                const componente = document.querySelector(`[componente="${componenteExistente}"]`)

                if (tipoCambio === "parcial") {
                    const funcionPersonalizada = history.state?.funcionPersonalizada
                    const args = history.state?.args || null

                    if (componente) {
                        if (args) {
                            const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                            args.instanciaUID = instanciaUID
                        }

                        return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                            ruta: funcionPersonalizada,
                            args: args
                        })
                    }

                }
                if (tipoCambio === "total" || !componente) {
                    return casaVitini.shell.navegacion.controladorVista({
                        vista: zona,
                    })
                }
            },
            cambiarVista: (vistaMenu) => {
                if (vistaMenu.button === 0) { // 0 es el botón izquierdo, 1 es el botón central
                    vistaMenu.preventDefault()
                    vistaMenu.stopPropagation()
                    const vista = vistaMenu.target.closest("[vista]").getAttribute("vista")
                    return casaVitini.shell.navegacion.controladorVista({
                        vista: vista,
                        tipoOrigen: "menuNavegador",
                        objetoOrigen: vistaMenu
                    })
                }
            },
            controladorVista: async (data) => {
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const objetoOrigen = data.objetoOrigen?.target
                const selectorMenuRenderizado = document.querySelector("header [estructura=menu]")
                const tipoOrigen = data.tipoOrigen
                const vista = data.vista || "portada"


                const main = document.querySelector("main")
                main.setAttribute("instanciaUID", instanciaUID)

                if (objetoOrigen?.getAttribute("tipoMenu") === "volatil") {
                    const zonaUI = objetoOrigen.getAttribute("zona")

                    selectorMenuRenderizado.querySelectorAll("[tipoMenu=volatil]").forEach((menu) => {
                        menu.removeAttribute("style")
                    })
                    selectorMenuRenderizado
                        .querySelector(`[zona="${zonaUI}"]`)
                        .style.background = "rgba(0, 0, 0, 0.2)"
                    const selectorMenuGlobalFlotanteRenderizado = document.querySelector("[componente=menuGlobalFlotante]")
                    if (selectorMenuGlobalFlotanteRenderizado) {
                        selectorMenuGlobalFlotanteRenderizado.remove()
                    }
                }
                casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante(data)

                main.style.transition = "opacity 0s linear"
                main.style.opacity = "0"
                main.style.pointerEvents = "none"

                const selectorPantallaCargaRenderizda = document.querySelector("[ui=pantallaDeCarga]")
                if (!selectorPantallaCargaRenderizda) {
                    const pantallaCarga = document.createElement("div")
                    pantallaCarga.setAttribute("ui", "pantallaDeCarga")
                    const spinnerSimple = casaVitini.ui.componentes.spinnerSimple()
                    pantallaCarga.appendChild(spinnerSimple)
                    document.body.appendChild(pantallaCarga)
                }
                const selectorAdvertenciasInmersivas = document.querySelectorAll("[componente=errorUI], [componente=menuVolatil]")
                selectorAdvertenciasInmersivas.forEach((advertenciaInmersivaRenderizada) => {
                    advertenciaInmersivaRenderizada.remove()
                })
                const selectorCalendarioRenderizados = document.querySelectorAll("[contenedor=calendario]")
                selectorCalendarioRenderizados.forEach((calendarioRenderizado) => {
                    calendarioRenderizado.remove()
                })

                const vistaActual = selectorMenuRenderizado.getAttribute("vistaActual")
                let url = window.location.pathname.split("/");
                delete url[0]
                delete url[1]
                delete url[2]
                url = url.filter((url) => url)
                if (vista === "portada") {
                    selectorMenuRenderizado.querySelectorAll("[componente=contenedorMenu] [zona]").forEach(zona => {
                        zona.removeAttribute("style")
                    });
                }

                const transaccion = {
                    zona: "componentes/cambiarVista",
                    vista: vista
                }

                const privacidad = casaVitini.componentes.privacidad.arranque(vista)
                if (privacidad) {
                    transaccion.vista = "politicas/privacidad"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                const contenedorVista = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                if (contenedorVista) {
                    const selectorPantallaCargaRenderizdaPostPeticion = document.querySelector("[ui=pantallaDeCarga]")
                    main.removeAttribute("rama")

                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.limpiarMain()
                        contenedorVista.removeAttribute("rama")
                        await casaVitini.shell.controladoresUI.controladorEstadoIDX()
                        contenedorVista.innerHTML = null
                        casaVitini.shell.controladoresUI.eliminarTodasLasPropiedadesCSSMenosUna(["opacity", "transition"])

                        casaVitini.shell.controladoresUI.limpiezaUI()

                        const marcoError = document.createElement("div")
                        marcoError.classList.add("plaza_marcoError_seccion")
                        marcoError.textContent = respuestaServidor.error
                        contenedorVista.appendChild(marcoError)
                        main.removeAttribute("style")

                    } else if (respuestaServidor?.ok) {
                        const zona = respuestaServidor?.zona

                        document.documentElement.scrollTop = 0;
                        const codigo = respuestaServidor.ok
                        contenedorVista.innerHTML = null
                        contenedorVista.setAttribute("rama", zona)

                        const menu_renderizado = document.querySelector("[componente=contenedorMenu]")
                        menu_renderizado.querySelectorAll("[tipoMenu=volatil]").forEach((menu) => {
                            menu.removeAttribute("style")
                        })

                        casaVitini.shell.controladoresUI.limpiezaUI({ zonaDestino: zona })
                        if (menu_renderizado.querySelector("[zona=" + zona + "]")) {
                            menu_renderizado.querySelector("[zona=" + zona + "]").style.background = "rgba(0, 0, 0, 0.6)"
                            menu_renderizado.querySelector("[zona=" + zona + "]").style.color = "white"
                        }

                        await casaVitini.shell.controladoresUI.controladorEstadoIDX()
                        casaVitini.shell.controladoresUI.eliminarTodasLasPropiedadesCSSMenosUna(["opacity", "transition"])
                        let urlVista = respuestaServidor.url
                        if (privacidad) {
                            urlVista = vista === "portada" ? "/" : vista;
                        }
                        urlVista = urlVista === "/portada" ? "/" : urlVista;
                        urlVista = decodeURIComponent(urlVista);

                        let controladorUrl;
                        if (vistaActual?.toLowerCase() === vista?.toLowerCase()) {
                            controladorUrl = "soloActualiza"
                        }
                        selectorMenuRenderizado.setAttribute("vistaActual", vista)
                        const titulo = 'Casa Vitini';
                        const estado = {
                            zona: vista === "portada" ? "" : vista,
                            tipoCambio: "total"
                        }
                        if (tipoOrigen === "menuNavegador" && !controladorUrl) {
                            window.history.pushState(estado, titulo, urlVista);
                        } else if (controladorUrl === "soloActualiza") {
                            window.history.replaceState(estado, titulo, urlVista);
                        } else if (!tipoOrigen && !controladorUrl) {
                            window.history.replaceState(estado, titulo, urlVista);
                        }

                        const granuladorURL = casaVitini.utilidades.granuladorURL()
                        const directoriosFusion = granuladorURL.directoriosFusion
                        contenedorVista.setAttribute("zonaCSS", directoriosFusion)

                        contenedorVista.innerHTML = codigo
                        const arranqueVistaPublica = contenedorVista?.querySelector("arranque")?.getAttribute("publico")
                        const arranqueVistaAdministrativa = contenedorVista?.querySelector("arranque")?.getAttribute("administracion")
                        if (arranqueVistaPublica) {

                            const ruta = "ui.vistas." + arranqueVistaPublica
                            casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                ruta: ruta,
                                args: null
                            })
                        } else if (arranqueVistaAdministrativa) {

                            const ruta = "administracion." + arranqueVistaAdministrativa
                            casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                ruta: ruta,
                                args: null
                            })
                        }
                        selectorPantallaCargaRenderizdaPostPeticion?.remove()

                        main.style.transition = "opacity 250ms linear"
                        main.style.opacity = "1"
                    }
                }

            },
            sobreControlMenuGlobal: (e) => {

                const menu_renderizado = document.querySelector("[componente=contenedorMenu]")

                const usuarioActual = menu_renderizado.querySelector("[data=vitiniIDX]").textContent
                const menuActual = menu_renderizado.getAttribute("menuID")

                const menuFinal = (menuID) => {
                    if (menuID === "panelControl") {
                        menu_renderizado.setAttribute("sobreControl", "activo")
                        return "publico"
                    } else if (menuID === "publico") {
                        menu_renderizado.removeAttribute("sobreControl")
                        return "panelControl"
                    }
                }

                casaVitini.shell.navegacion.constructorMenuUI({
                    tipoMenu: menuFinal(menuActual),
                    destino: "header [contenedor=intermedio]",
                    usuario: usuarioActual,
                    origen: "sobreControl"
                })
                const zonaActual = document.querySelector("main").getAttribute("rama")
                menu_renderizado.querySelectorAll("[zona]").forEach(zonaObsoleta => {
                    zonaObsoleta.removeAttribute("style")
                })
                if (menu_renderizado.querySelector("[zona=" + zonaActual + "]")) {
                    menu_renderizado.querySelector("[zona=" + zonaActual + "]").style.background = "rgba(0, 0, 0, 0.6)"
                    menu_renderizado.querySelector("[zona=" + zonaActual + "]").style.color = "white"
                }
                const menuResponsivoRenderizado = document.querySelector("[componente=menuGlobalFlotante]")
                if (menuResponsivoRenderizado) {
                    casaVitini.shell.controladoresUI.menuResponsivo.renderizaMenuResponsivo()
                }



            },
            controladorNavegacion: async function (navegacion) {

                const estadoIDV = navegacion.estadoIDV
                const usuario = navegacion.usuario
                const tipoBarraNavegacion = navegacion.tipo
                const origen = navegacion.origen

                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const panelNavegacion = document.querySelector("header [componente=contenedorMenu]")
                const menuRenderizado = panelNavegacion.getAttribute("menuID")

                const zonaActual = document.querySelector("main").getAttribute("rama")
                const estadoSobreControl = panelNavegacion.getAttribute("sobreControl")
                if (estadoIDV === "conectado" && estadoSobreControl === "activo") {
                    return
                }



                if (tipoBarraNavegacion === "panelControl" && menuRenderizado !== tipoBarraNavegacion) {
                    panelNavegacion.setAttribute("menuID", tipoBarraNavegacion)

                    casaVitini.shell.navegacion.constructorMenuUI({
                        tipoMenu: "panelControl",
                        destino: "header [contenedor=intermedio]",
                        usuario: usuario
                    })

                } else if (tipoBarraNavegacion === "publico" && menuRenderizado !== tipoBarraNavegacion) {
                    panelNavegacion.setAttribute("menuID", tipoBarraNavegacion)

                    casaVitini.shell.navegacion.constructorMenuUI({
                        tipoMenu: "publico",
                        destino: "header [contenedor=intermedio]",
                        usuario: usuario
                    })
                }

                const selectorMenuRenderizado = document.querySelector("header [estructura=menu]")
                const menuID = selectorMenuRenderizado.querySelector("[data=vitiniIDX]")

                if (estadoIDV === "conectado") {
                    menuID.textContent = usuario
                }
                if (estadoIDV === "desconectado") {
                    menuID.textContent = "Mi Casa"
                    panelNavegacion.removeAttribute("sobreControl")
                    panelNavegacion.querySelector("[elemento=esfera]")?.remove()
                }
                selectorMenuRenderizado.querySelectorAll("[zona]").forEach(zonaObsoleta => {
                    zonaObsoleta.removeAttribute("style")
                })
                if (zonaActual && selectorMenuRenderizado.querySelector("[zona=" + zonaActual + "]")) {
                    selectorMenuRenderizado.querySelector("[zona=" + zonaActual + "]").style.background = "rgba(0, 0, 0, 0.6)"
                    selectorMenuRenderizado.querySelector("[zona=" + zonaActual + "]").style.color = "white"
                }

            },
            constructorMenuUI: (data) => {
                const tipoMenu = data.tipoMenu
                const destino = data.destino
                const usuario = data.usuario
                const origen = data.origen



                const menuAdminData = [{
                    href: "/administracion",
                    nombre: "Administración",
                    zona: "administracion"
                }, {
                    href: "/administracion/situacion",
                    nombre: "Situación",
                    zona: "situacion"

                }, {
                    href: "/administracion/calendario",
                    nombre: "Calendario",
                    zona: "calendario"

                }, {
                    href: "/administracion/reservas",
                    nombre: "Reservas",
                    zona: "reservas"

                }, {
                    href: "/administracion/clientes",
                    nombre: "Clientes",
                    zona: "clientes"

                }, {
                    tipo: "sobreControlMenu"
                }]

                const menuPublicoData = [{
                    href: "/alojamiento",
                    nombre: "Alojamiento",
                    zona: "alojamiento"

                },
                {
                    href: "/conozcanos",
                    nombre: "Conózcanos",
                    zona: "conozcanos"

                }, {
                    href: "/instalaciones",
                    nombre: "Instalaciones",
                    zona: "instalaciones"

                }, {
                    href: "/contacto",
                    nombre: "Contacto",
                    zona: "contacto"

                }, {
                    tipo: "sobreControlMenu"
                }]

                document.querySelector("[componente=contenedorMenu]").setAttribute("menuID", tipoMenu)

                const selectorDestino = document.querySelector(destino)

                const estructura_selector = selectorDestino.querySelector("[estructura=menu]")
                if (!estructura_selector) {
                    const estructuraMenu = document.createElement("div")
                    estructuraMenu.setAttribute("estructura", "menu")
                    estructuraMenu.classList.add(
                        "estructura"
                    )
                    selectorDestino.appendChild(estructuraMenu)

                    const contenedorZonas = document.createElement("div")
                    contenedorZonas.setAttribute("contenedor", "zonas")
                    contenedorZonas.classList.add(
                        "zonas"
                    )

                    const contenedorIDX = document.createElement("a")
                    contenedorIDX.setAttribute("href", "/micasa")
                    contenedorIDX.setAttribute("class", "uiCategoria")
                    contenedorIDX.setAttribute("tipoMenu", "volatil")
                    contenedorIDX.setAttribute("vista", "/micasa")
                    contenedorIDX.setAttribute("zona", "micasa")
                    contenedorIDX.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                    estructuraMenu.appendChild(contenedorIDX)

                    const textoIDV = document.createElement("div")
                    textoIDV.classList.add("elipsisIDX")
                    textoIDV.setAttribute("data", "vitiniIDX")
                    textoIDV.textContent = !usuario ? "Mi Casa" : usuario
                    contenedorIDX.appendChild(textoIDV)
                }
                const estructura_renderizada = selectorDestino.querySelector("[estructura=menu]")

                estructura_renderizada.querySelectorAll("[tipoMenu=volatil]").forEach((zonaObsoleta) => {
                    const zona = zonaObsoleta.getAttribute("zona")
                    if (zona !== "micasa") {
                        zonaObsoleta?.remove()
                    }
                })

                const zonaMiCasaRenderizada = estructura_renderizada.querySelector("[zona=micasa]")

                const zonaUI = (data) => {
                    const href = data.href
                    const nombre = data.nombre
                    const zonaIDV = data.zonaIDV

                    const zona = document.createElement("a")
                    zona.setAttribute("href", href)
                    zona.setAttribute("class", "uiCategoria")
                    zona.setAttribute("tipoMenu", "volatil")
                    zona.setAttribute("vista", href)
                    zona.setAttribute("zona", zonaIDV)
                    zona.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    zona.textContent = nombre
                    return zona
                }

                const sobreControlUI = () => {
                    const sobreControl = document.createElement("a")
                    sobreControl.setAttribute("class", "esferaUI_flotante")
                    sobreControl.setAttribute("tipoMenu", "volatil")
                    sobreControl.setAttribute("elemento", "esfera")
                    sobreControl.setAttribute("controlFlotante", "cancelar")
                    sobreControl.addEventListener("click", casaVitini.shell.navegacion.sobreControlMenuGlobal)
                    return sobreControl
                }

                if (tipoMenu === "publico") {
                    menuPublicoData.forEach((menu) => {
                        const href = menu.href
                        const nombre = menu.nombre
                        const zonaIDV = menu.zona
                        const tipo = menu?.tipo



                        if (!tipo) {
                            const zona = zonaUI({
                                href,
                                nombre,
                                zonaIDV,
                            })
                            estructura_renderizada.insertBefore(zona, zonaMiCasaRenderizada);

                        } else if (tipo === "sobreControlMenu" && origen === "sobreControl") {
                            const sobreControl = sobreControlUI()
                            estructura_renderizada.insertBefore(sobreControl, zonaMiCasaRenderizada);
                        }
                    })
                } else if (tipoMenu === "panelControl") {

                    menuAdminData.forEach((menu) => {
                        const href = menu.href
                        const nombre = menu.nombre
                        const tipo = menu?.tipo
                        const zonaIDV = menu.zona

                        if (!tipo) {
                            const zona = zonaUI({
                                href,
                                nombre,
                                zonaIDV,
                            })
                            estructura_renderizada.insertBefore(zona, zonaMiCasaRenderizada);

                        } else if (tipo === "sobreControlMenu") {
                            const sobreControl = sobreControlUI()
                            estructura_renderizada.insertBefore(sobreControl, zonaMiCasaRenderizada);
                        }

                    })
                }
            },
        },
        arranque: async () => {
            window.addEventListener("popstate", casaVitini.shell.navegacion.navegacionInversa)
            await casaVitini.shell.controladoresUI.controladorEstadoIDX()
            document.querySelector("[componente=botonMenuResponsivo]").addEventListener("click", () => {
                casaVitini.shell.controladoresUI.menuResponsivo.despliege()
            })
            const vistas = document.querySelectorAll("[vista]")
            for (const vistaMenu of vistas) {
                vistaMenu.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
            }
            const url = window.location.pathname;
            if (url === "/") {
                return casaVitini.shell.navegacion.controladorVista({
                    vista: "portada"
                })
            } else {
                return casaVitini.shell.navegacion.controladorVista({
                    vista: url
                })
            }
        },
        IDX: {
            iniciarSession: async (IDX) => {
                const usuario = IDX.usuario
                const clave = IDX.clave
                const contenedorBotones = document.querySelector("[componente=contenedorBotones]")
                const bloqueRespuesta = document.querySelector("[componente=bloqueRespuesta")
                bloqueRespuesta.style.color = "white"
                const campos = document.querySelectorAll("[componente=campoID]")
                campos.forEach((campo) => {
                    campo.removeAttribute("style")
                })
                const circuloAnimado = document.createElement("span")
                circuloAnimado.classList.add("circuloAnimado")
                const mensajeIniciando = document.createElement("div")
                mensajeIniciando.classList.add("flexVertical")
                mensajeIniciando.textContent = "Iniciando session..."
                bloqueRespuesta.appendChild(circuloAnimado)
                bloqueRespuesta.appendChild(mensajeIniciando)
                bloqueRespuesta.style.opacity = "1"

                const respuestaServidor = await casaVitini.shell.servidor({
                    zona: "IDX/conectar",
                    usuario: usuario,
                    clave: clave
                })

                if (respuestaServidor?.error) {
                    bloqueRespuesta.textContent = respuestaServidor?.error


                    campos.forEach(campo => {
                        campo.style.background = "rgba(255, 0, 0, 0.5)"
                    });
                }
                if (respuestaServidor?.ok) {

                    let tipo;
                    const rolIDV = respuestaServidor?.rolIDV;
                    if (rolIDV === "cliente") {
                        tipo = "publico"
                    }
                    if (rolIDV === "administrador" ||
                        rolIDV === "empleado") {
                        tipo = "panelControl"
                    }

                    const zonaActual = document.querySelector("header [estructura=menu]").getAttribute("vistaActual")

                    return casaVitini.shell.navegacion.controladorVista({
                        vista: zonaActual,
                        tipoOrigen: "menuNavegador"
                    })
                }
            },
            cerrarSession: async () => {

                const respuestaServidor = await casaVitini.shell.servidor({
                    zona: "IDX/desconectar"
                })
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    return false
                }
                if (respuestaServidor?.estadoIDV === "desconectado") {
                    return respuestaServidor
                }

            },
            estadoSession: async () => {
                const transaccion = {
                    zona: "IDX/estado",
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                return respuestaServidor
            },
        },
        controladoresUI: {
            interrumpirTransicionVistas: () => {
                const main = document.querySelector("main")
                const pantallaCarga = document.querySelector("[ui=pantallaDeCarga]")
                main.removeAttribute("style")
                pantallaCarga?.remove()

            },
            eliminarTodasLasPropiedadesCSSMenosUna: (propiedadesArray) => {
                const elemento = document.querySelector("main");


                const propiedadesInline = elemento.style.cssText;



                const propiedadesFiltradas = propiedadesInline
                    .split(";")
                    .filter(propiedad => {
                        const [nombre] = propiedad.split(":");
                        return propiedadesArray.includes(nombre.trim());
                    })
                    .join(";");




                elemento.style.cssText = propiedadesFiltradas;
            },
            controlHorizotnalVetana: () => {
                const currentWidth = window.innerWidth;
                const previousWidth = casaVitini.componentes.controladores.anchoActualVentanad

                if (currentWidth !== previousWidth) {



                    casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                } else {

                }
            },
            menuResponsivo: {
                despliege: function () {
                    selectorMenuFlotanteRenderizado = document.querySelector("[componente=menuGlobalFlotante]")
                    if (selectorMenuFlotanteRenderizado) {
                        selectorMenuFlotanteRenderizado.remove()
                    } else {
                        this.tranformaMenuARespontivo()
                        window.addEventListener("click", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                        window.addEventListener("resize", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                        window.addEventListener("scroll", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                    }
                },
                tranformaMenuARespontivo: function () {
                    const menu_selector = document.querySelector("[componente=menuGlobalFlotante]")
                    if (menu_selector) {
                        menu_selector.innerHTML = null
                    } else {
                        const menuFlotante = document.createElement("div")
                        menuFlotante.setAttribute("componente", "menuGlobalFlotante")
                        menuFlotante.classList.add("uiMenuGlobalResponsivo")
                        document.body.appendChild(menuFlotante)
                    }
                    this.renderizaMenuResponsivo()

                },

                renderizaMenuResponsivo: () => {
                    const menu_renderizado = document.querySelector("[componente=menuGlobalFlotante]")

                    const contenedorMenu = document.querySelector("[componente=contenedorMenu]")
                    const menuID = contenedorMenu.getAttribute("menuID")
                    const usuario = contenedorMenu.querySelector("[data=vitiniIDX]").textContent

                    const sobreControl = contenedorMenu?.getAttribute("sobreControl") === "activo" ? "sobreControl" : null

                    casaVitini.shell.navegacion.constructorMenuUI({
                        tipoMenu: menuID,
                        destino: "body [componente=menuGlobalFlotante]",
                        usuario: usuario,
                        origen: sobreControl
                    })
                    const menuRenderizado = menu_renderizado.querySelector("[estructura=menu]")
                    menuRenderizado.classList.add("estructuraVertical")
                    const zonasRenderizadas = menuRenderizado.querySelectorAll("[zona]")
                    zonasRenderizadas.forEach((zona) => zona.style.borderRadius = "12px")

                    const selectorEsfera = menu_renderizado.querySelector("[elemento=esfera]")
                    if (selectorEsfera) {
                        selectorEsfera.classList.remove("esferaUI_flotante")
                        selectorEsfera.classList.add("esferaUI_flotante_responsiva")
                    }


                    const zonaActual = document.querySelector("main").getAttribute("rama")
                    if (menu_renderizado.querySelector("[zona=" + zonaActual + "]")) {
                        menu_renderizado.querySelector("[zona=" + zonaActual + "]").style.background = "rgba(0, 0, 0, 0.6)"
                        menu_renderizado.querySelector("[zona=" + zonaActual + "]").style.color = "white"
                    }
                }
            },
            controladorEstadoIDX: async () => {

                const IDX = await casaVitini.shell.IDX.estadoSession()
                const estadoIDV = IDX?.estadoIDV || null
                const rolIDV = IDX?.rolIDV
                if (estadoIDV === "desconectado" || !estadoIDV) {
                    const navegacion = {
                        tipo: "publico",
                        estadoIDV: "desconectado",
                        origen: "controlador",
                        estadoIDV: estadoIDV

                    }

                    casaVitini.shell.navegacion.controladorNavegacion(navegacion)

                } else if (estadoIDV === "conectado" && (rolIDV === "administrador" || rolIDV === "empleado")) {
                    const navegacion = {
                        tipo: "panelControl",
                        usuario: IDX.usuario,
                        rolIDV: rolIDV,
                        estadoIDV: estadoIDV,
                        origen: "controlador"
                    }

                    casaVitini.shell.navegacion.controladorNavegacion(navegacion)

                } else if (estadoIDV === "conectado" && rolIDV === "cliente") {
                    const navegacion = {
                        tipo: "publico",
                        usuario: IDX.usuario,
                        rolIDV: rolIDV,
                        estadoIDV: estadoIDV,
                        origen: "controlador"
                    }

                    casaVitini.shell.navegacion.controladorNavegacion(navegacion)

                }
            },
            controlLogoScroll: (metadatos) => {
                const sectionUID = metadatos.sectionUID
                const elementoScroll = metadatos.elementoScroll
                if (!sectionUID) {
                    const mensaje = "Falta el sectionUID para determinar si el evento debe de crearse o eliminarse"
                    return casaVitini.ui.componentes.advertenciaInmersiva(mensaje)
                }
                const elemento = document.querySelector(`[instanciaUID="${sectionUID}"] ${elementoScroll}`)
                if (!elemento) {
                    document.querySelector(`[instanciaUID="${sectionUID}"] ${elementoScroll}`).removeEventListener("scroll", controladorEvento)
                    return
                }
                const logo = document.querySelector("[componente=logoCasaVitini]")
                const controladorEvento = (e) => {
                    e.stopPropagation()
                    const alturaScroll = e.target.scrollTop
                    if (alturaScroll > 10) {
                        logo.style.opacity = "0"
                        logo.style.pointerEvents = "none"
                    } else {
                        logo.style.opacity = "1"
                        logo.style.pointerEvents = "all"
                    }
                }
                elemento.addEventListener("scroll", controladorEvento)
            },
            restaurarMenu: (componente) => {
                componente.stopPropagation()

                let componenteID = componente.target
                if (componenteID.id !== "navegadorResponsivo" && componenteID.id !== "botonMenuResponsivo" && !componenteID.getAttribute("vista") && componenteID?.getAttribute("class") !== "contenedorMenu") {
                    casaVitini.shell.controladoresUI.menuResponsivo()
                }
            },
            ocultarMenusVolatiles: (menuVolatil) => {

                window.removeEventListener("resize", casaVitini.shell.controladoresUI.controlHorizotnalVetana)
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                screen.orientation?.removeEventListener("change", casaVitini.shell.controladoresUI.ocultarMenusVolatiles);

                const componente = menuVolatil?.target?.getAttribute("componente") || null
                if (componente === "menuDesplegable") {
                    return
                }
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)

                if (componente !== "menuVolatil") {
                    window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                    const selectorMenusVolatiles = document.querySelectorAll("[componente=menuVolatil]")
                    selectorMenusVolatiles.forEach(menuVolatil => {
                        menuVolatil.remove()
                    })
                }
                const selectoresErrorUI = document.querySelectorAll("[componente=errorUI]")
                selectoresErrorUI.forEach((errorUI) => {
                    errorUI.remove()
                })

            },
            ocultarMenusVolatilesSimple: () => {
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatilesSimple)
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.ocultarMenusVolatilesSimple)

                const selectorMenusVolatiles = document.querySelectorAll("[componente=menuVolatil]")
                selectorMenusVolatiles.forEach(menuVolatil => {
                    menuVolatil.remove()
                })
            },
            limpiarAdvertenciasInmersivas: () => {
                document.body.style.removeProperty("overflow")
                document.querySelectorAll("[componente=bloqueCalendario]").forEach((calendarioRenderizado) => {
                    calendarioRenderizado.remove()
                })
                document.querySelectorAll("[componente=advertenciaInmersiva]").forEach((advertenciaInmersiva) => {
                    advertenciaInmersiva.remove()
                })
            },
            limpiarTodoElementoFlotante: () => {
                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                document.querySelectorAll("[componente=menuVolatil]").forEach((menuVolatil) => {
                    menuVolatil.remove()
                })
                document.querySelectorAll("[componente=advertenciaIntegrada]").forEach((menuVolatil) => {
                    menuVolatil.remove()
                })
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatilesSimple)
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.controlHorizotnalVetana)
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)
                document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarMenusVolatiles)



            },
            ocultarElementos: (e) => {
                if (e?.target) {
                    const botonDesplegarCalendario = e.target.closest("[boton=desplegarCalendario]")
                    if (botonDesplegarCalendario) {
                        return
                    }
                    const selectorFlotante = e.target.closest("[elemento]")?.getAttribute("elemento")
                    if (selectorFlotante === "flotante") {
                        return
                    }
                    const selectorParalizador = e.target.closest("[paralizadorEvento]")?.getAttribute("paralizadorEvento")
                    if (selectorParalizador === "ocultadorCalendarios") {
                        return
                    }
                }
                const bloqueCalendario = document.querySelectorAll("[componente=bloqueCalendario]")
                bloqueCalendario.forEach(calendarioRenderizado => {
                    calendarioRenderizado.remove()
                });
                document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
            },
            controlGlobalScroll: () => {

                const selectorBloqueMenusGlobales = document.querySelector("[componente=marcoNavegacion]")
                const selectorLogo = document.querySelector("[componente=logoCasaVitini]")
                document.addEventListener('scroll', () => {
                    const selectorStyle = selectorLogo.style.filter
                    const mediaQuery = window.matchMedia('(max-width: 850px)');
                    document.querySelector("#navegadorResponsivo").style.removeProperty("display")
                    if (window.scrollY === 0) {
                        selectorBloqueMenusGlobales.classList.remove('globa_marcoNavegacion_desenfoque');
                        if (mediaQuery.matches && selectorStyle === "invert(0)") {
                            selectorLogo.style.filter = "invert(1)"
                        }
                    } else {
                        if (mediaQuery.matches && selectorStyle === "invert(1)") {
                            selectorLogo.style.filter = "invert(0)"
                        }
                        selectorBloqueMenusGlobales.classList.add('globa_marcoNavegacion_desenfoque');
                    }
                })
            },
            controlCodigoAdministracion: async () => {

                const convertirCadenasEnFunciones = (objeto) => {
                    for (const clave in objeto) {
                        if (typeof objeto[clave] === "string") {
                            try {
                                const functionConstructor = new Function(`return ${objeto[clave]}`);
                                objeto[clave] = functionConstructor();
                            } catch (errorCapturado) {

                            }
                        } else if (typeof objeto[clave] === "object") {

                            convertirCadenasEnFunciones(objeto[clave]);
                        }
                    }
                }
                if (!casaVitini.administracion) {
                    const transaccion = {
                        zona: "administracion/componentes/administracionUI"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.tipo === "IDX") {

                    }
                    if (respuestaServidor?.ok) {
                        const JS = JSON.parse(respuestaServidor.ok)
                        convertirCadenasEnFunciones(JS);
                        casaVitini["administracion"] = JS
                    }
                }
            },
            ocultaMenuGlobalFlotante: (e) => {
                const controlFlotante = e.type === "click" ?
                    e?.target?.getAttribute("controlFlotante") : null
                if (controlFlotante !== "cancelar") {
                    const selectorMenuFlotanteRenderizado = document.querySelector("[componente=menuGlobalFlotante]")
                    selectorMenuFlotanteRenderizado?.remove()
                    window.removeEventListener("click", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                    window.removeEventListener("resize", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                    window.removeEventListener("scroll", casaVitini.shell.controladoresUI.ocultaMenuGlobalFlotante)
                }
            },
            limpiarMain: () => {

                const selectorPantallaCargaRenderizdaPostPeticion = document.querySelector("[ui=pantallaDeCarga]")
                selectorPantallaCargaRenderizdaPostPeticion?.remove()
                const main = document.querySelector("main")
                document.querySelectorAll("html, #uiLogo, body, header, [componente=contenedorMenu], #botonMenuResponsivo")
                    .forEach((elementoReseteo) => {
                        elementoReseteo.removeAttribute("style")
                    })
                main.innerHTML = null
                main.removeAttribute("rama")
                main.removeAttribute("zonaCSS")
                main.removeAttribute("ui")
                casaVitini.shell.controladoresUI.eliminarTodasLasPropiedadesCSSMenosUna("opacity")
                main.style.transition = "opacity 250ms linear"
                main.style.opacity = "1"


            },
            iconosGlobales: {
                telefonoPublicoWhatsApp: async (data = {}) => {
                    const zonaIcono = data.zonaIcono
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "plaza/reservas/telefonoPublicoWhatsApp"
                    })

                    if (respuestaServidor?.error) {

                    } else if (respuestaServidor.ok) {
                        const telefonoPublicoWhatsApp = respuestaServidor.ok.telefonoPublicoWhatsApp
                        const selectorIconosGlobales = document.querySelector("header [componente=iconos]")
                        const seletorIconosRenderizado = selectorIconosGlobales.querySelector("[iconoGlobal=whatsApp]")
                        if (!seletorIconosRenderizado && telefonoPublicoWhatsApp.length > 0) {
                            const whatsAppIcono = "/componentes/iconos/whatsapp-icono.svg"
                            const contenedor = document.createElement("a")
                            contenedor.setAttribute("iconoGlobal", "whatsApp")
                            contenedor.setAttribute("zona", zonaIcono)
                            contenedor.classList.add("efectoAparicion")
                            contenedor.style.backgroundImage = `url('${whatsAppIcono}')`;
                            contenedor.style.backgroundSize = `cover`;
                            contenedor.style.height = `30px`;
                            contenedor.style.width = `30px`;
                            contenedor.target = "_blank"
                            contenedor.href = `https://wa.me/${telefonoPublicoWhatsApp}`
                            selectorIconosGlobales.appendChild(contenedor)
                        }
                    }
                }
            },
            limpiezaUI: (data = {}) => {
                const main = document.querySelector("main")
                const zonaDestino = data?.zonaDestino
                casaVitini.ui.vistas.conozcanos.instanciasTemporales.parallaxControlador?.destroy()
                window.removeEventListener("resize", casaVitini.ui.vistas.conozcanos.instanciasTemporales.parallaxControlador?.resizeIsDone);
                window.removeEventListener('scroll', casaVitini.ui.vistas.conozcanos.scrollHandler);
                window.removeEventListener('scroll', casaVitini.ui.vistas.conozcanos.controladorIconoMouse);
                window.removeEventListener("resize", casaVitini.shell.controladoresUI.controlHorizotnalVetana)
                screen.orientation?.removeEventListener("change", casaVitini.shell.controladoresUI.ocultarMenusVolatiles);
                document.querySelectorAll("html, #uiLogo, body, header, [componente=contenedorMenu], [componente=botonMenuResponsivo]")
                    .forEach((e) => {
                        e.removeAttribute("style")
                    })
                main.removeAttribute("zonaCSS")
                main.removeAttribute("ui")

                const iconosGlobalesRenderizados = document.querySelectorAll("header [componente=iconos] [iconoGlobal]")
                iconosGlobalesRenderizados.forEach((icono) => {
                    const zonaDelIcono = icono.getAttribute("zona")
                    if (zonaDelIcono !== zonaDestino) {
                        icono?.remove()
                    }
                })
                const menu_renderizado = document.querySelector("[componente=contenedorMenu]")
                menu_renderizado.querySelectorAll("[tipoMenu=volatil]").forEach((menu) => {
                    menu.removeAttribute("style")
                })
            }
        },
        servidor: async function (transaccion) {
            const puerto = '/puerto';
            const peticion = {
                method: 'POST',
                headers: {
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaccion)
            };
            try {

                const servidor = await fetch(puerto, peticion);
                const respuestaServidor = await servidor.json();
                if (!respuestaServidor) {
                    this.controladoresUI.interrumpirTransicionVistas()
                    return casaVitini.ui.componentes.errorUI()
                } else if (respuestaServidor.tipo === "IDX") {
                    return casaVitini.componentes.loginUI()
                } else if (respuestaServidor.tipo === "ROL") {
                    this.controladoresUI.interrumpirTransicionVistas()
                    const mensaje = "Tu VitiniID no esta autorizado a realizar esta operación."
                    casaVitini.ui.componentes.advertenciaInmersiva(mensaje)
                    return
                } else if (respuestaServidor.codigo === "mantenimiento") {
                    casaVitini.shell.controladoresUI.limpiarMain()
                    this.controladoresUI.interrumpirTransicionVistas()
                    const mensaje = respuestaServidor.error
                    casaVitini.ui.componentes.mensajeSimple({
                        titulo: "No se ha procesado la peticion",
                        descripcion: mensaje
                    })
                    return
                } else if (respuestaServidor?.error === "noExisteLaVista") {
                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    casaVitini.shell.controladoresUI.limpiarMain()
                    return casaVitini.ui.componentes.urlDesconocida()
                } else {
                    return respuestaServidor
                }


            } catch (errorCapturado) {
                this.controladoresUI.interrumpirTransicionVistas()

                if (errorCapturado.name === 'AbortError') {
                }
                if (errorCapturado instanceof TypeError) {
                    return casaVitini.ui.componentes.errorUI()
                }
            }
        },
    },
    ui: {
        vistas: {
            portada: {
                arranque: async () => {
                    const video = document.querySelector("[componente=video]")
                    video.addEventListener('loadedmetadata', () => {
                        const tiempos = [
                            "00:00",
                            "00:36",
                            "00:51",
                            "01:07",
                            "01:20",
                            "01:51",
                            "02:07",
                            "02:41",
                            "02:49",
                            "02:58",
                            "03:09",
                            "03:35",
                            "03:46",
                            "04:03",
                            "04:13",
                            "04:28",
                            "04:50",
                            "05:33",
                            "06:03",
                            "07:03",
                            "07:48",
                            "08:05"
                        ];

                        const posicionAleatoria = Math.floor(Math.random() * tiempos.length)
                        const tiempoAleatorio = tiempos[posicionAleatoria];

                        const mmssASegundos = (tiempo) => {
                            const [minutos, segundos] = tiempo.split(':').map(Number);
                            return (minutos * 60) + segundos;
                        }
                        video.currentTime = mmssASegundos(tiempoAleatorio);
                        video.play();
                    })
                    document.querySelector("[componente=botonCambiaVistaEnSection]")
                        .addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    const instanciaUID = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "plaza/portada/obtenerMensajes"
                    })
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor?.ok) {
                        const mensajes = respuestaServidor.ok
                        const titulo = seccionRenderizada.querySelector("[componente=titulo]")
                        for (const detallesDelMensaje of mensajes) {
                            const mensaje = detallesDelMensaje.mensaje
                            const tituloUI = document.createElement("pre")
                            tituloUI.classList.add("tituloUI")
                            tituloUI.textContent = mensaje
                            titulo.insertAdjacentElement("afterend", tituloUI);
                        }
                    }
                },
            },
            alojamiento: {
                portada: {
                    arranque: async () => {


                        document.body.style.backgroundColor = "rgb(214, 192, 157)"
                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                        const directorios = granuladoURL.directorios[granuladoURL.directorios.length - 1]

                        casaVitini.shell.controladoresUI.iconosGlobales.telefonoPublicoWhatsApp({
                            zonaIcono: "alojamiento"
                        })
                        if (directorios === "alojamiento") {
                            return casaVitini.ui.vistas.alojamiento.portada.buscarAlojamientoUI()
                        } else if (directorios === "reserva_confirmada") {
                            const reservaConfirmada = JSON.parse(localStorage.getItem("reservaConfirmada")) || null
                            if (reservaConfirmada) {
                                casaVitini.ui.vistas.alojamiento.reservaConfirmada.ui()
                            } else {
                                const entrada = {
                                    vista: "/alojamiento",
                                    tipoOrigen: "menuNavegador"
                                }
                                return casaVitini.shell.navegacion.controladorVista(entrada)
                            }
                        }
                    },
                    buscarAlojamientoUI: async () => {
                        try {

                            document.querySelector("html").style.height = "100%"
                            const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()
                            const reservaLocal = JSON.parse(sessionStorage.getItem("reserva"))
                            const reservaEnCache = localStorage.getItem("reservaConfirmada");
                            const reservaConfirmadaLocal = reservaEnCache ? JSON.parse(reservaEnCache) : null;
                            const main = document.querySelector("main")
                            main.style.padding = "6px"



                            const metodoSelectorPasarela = "ui.vistas.alojamiento.portada.metodoSelectorPasarela"
                            const tituloUI = document.createElement("p")
                            tituloUI.classList.add("tituloGris")
                            tituloUI.textContent = "Alojamiento"

                            const marcoElasticoRelativo = document.createElement('div');
                            marcoElasticoRelativo.classList.add('marcoElasticoRelativo');
                            marcoElasticoRelativo.setAttribute("espacio", "marcoElastico")
                            marcoElasticoRelativo.style.transition = "background 250ms linear"
                            marcoElasticoRelativo.style.flex = "1"
                            marcoElasticoRelativo.style.padding = "6px"
                            marcoElasticoRelativo.classList.add(
                                "fondoAlojamiento"
                            )


                            marcoElasticoRelativo.style.justifyContent = "flex-start"
                            main.appendChild(marcoElasticoRelativo);

                            const bloquePasosReservaNuevo = document.createElement('div');
                            bloquePasosReservaNuevo.setAttribute('class', 'bloquePasosReservaNuevo');
                            bloquePasosReservaNuevo.setAttribute('contenedor', 'busquedaAlojamiento');
                            marcoElasticoRelativo.appendChild(bloquePasosReservaNuevo);




                            const mensajeErrorCompartido = "Ha ocurrido un error y no se han podido obtener ciertos datos. Por favor, actualiza la página."

                            const transaccion = {
                                zona: "componentes/horaLimiteDelMismoDia",
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            if (respuestaServidor?.error) {

                                const contenedorBanner = document.createElement("div")
                                contenedorBanner.classList.add("plaza_reservas_reservaConfirmada_banner")
                                contenedorBanner.textContent = mensajeErrorCompartido
                                bloquePasosReservaNuevo.appendChild(contenedorBanner)
                            } else if (respuestaServidor.ok) {

                                const mismoDiaAceptable = respuestaServidor.mismoDiaAceptable
                                const estadoAceptacion = respuestaServidor.estadoAceptacion
                                const horaLimiteDelMismoDia = respuestaServidor.horaLimiteDelMismoDia
                                const zonaHoraria = respuestaServidor.zonaHoraria

                                if (mismoDiaAceptable === "si" && estadoAceptacion === "no") {

                                    const contenedorBanner = document.createElement("div")
                                    contenedorBanner.classList.add("bannerTiempoRestante")
                                    contenedorBanner.textContent = casaVitini.ui.vistas.alojamiento.componentes.mensajeNoAceptacion({
                                        horaLimite: horaLimiteDelMismoDia,
                                        zonaHoraria: zonaHoraria
                                    })
                                    bloquePasosReservaNuevo.appendChild(contenedorBanner)

                                } else if (mismoDiaAceptable === "si" && estadoAceptacion === "si") {
                                    const cuentaAtras = respuestaServidor.cuentaAtras
                                    const dias = cuentaAtras.dias
                                    const horas = cuentaAtras.horas
                                    const minutos = cuentaAtras.minutos
                                    const segundos = cuentaAtras.segundos


                                    const totalCuentaAtrasEnReseugnos =
                                        (dias * 24 * 60 * 60) +  // Convertir días a segundos
                                        (horas * 60 * 60) +      // Convertir horas a segundos
                                        (minutos * 60) +         // Convertir minutos a segundos
                                        segundos;                // Segundos ya en segundos


                                    const instanciaUID_cuentaAttras = casaVitini.utilidades.codigoFechaInstancia()


                                    const contenedorBanner = document.createElement("div")
                                    contenedorBanner.classList.add("bannerTiempoRestante")
                                    contenedorBanner.setAttribute("instanciaUID", instanciaUID_cuentaAttras)


                                    const info = document.createElement("p")
                                    info.textContent = `Si quieres hacer una reserva con fecha de entrada para hoy mismo, tienes que hacerlo antes de la ${horaLimiteDelMismoDia}. Esta hora límite para hacer la reserva con fecha de entrada para hoy está en formato 24 H en hora local de ${zonaHoraria}. Pasada esta hora, para realizar una reserva con fecha de entrada para el día de hoy, por favor, ponte en contacto con nuestro equipo. Dirígete a la sección de Contacto donde encontrarás distintas formas de comunicarte con nosotros.`
                                    //  contenedorBanner.appendChild(info)

                                    const cuentaAtrasUI = document.createElement("p")
                                    cuentaAtrasUI.setAttribute("contenedor", "cuentaAtras")
                                    cuentaAtrasUI.classList.add(
                                        "negrita"
                                    )
                                    contenedorBanner.appendChild(cuentaAtrasUI)

                                    //  bloquePasosReservaNuevo.appendChild(contenedorBanner)

                                    // casaVitini.ui.vistas.alojamiento.componentes.controladorCuentaAtras({
                                    //     instanciaUID: instanciaUID_cuentaAttras,
                                    //     segundosDeLaCuentaAtras: totalCuentaAtrasEnReseugnos,
                                    //     zonaHoraria,
                                    //     horaLimiteDelMismoDia
                                    // })
                                }
                            }



                            if (reservaConfirmadaLocal) {

                                const contenedorBanner = document.createElement("a")
                                contenedorBanner.classList.add("plaza_reservas_reservaConfirmada_banner")
                                contenedorBanner.textContent = "Tienes una reserva guardada en la cache de tu navegador. Esta reserva se ha guardado tras confirmar tu reserva. Para ver los detalles de la confirmación, pulsa aquí. Si borras la cache de tu navegador esta información desaparecerá. Si quieres un acceso persistente puedes crear un VitiniID desde MiCasa."
                                contenedorBanner.setAttribute("href", "/alojamiento/reserva_confirmada")
                                contenedorBanner.setAttribute("vista", "/alojamiento/reserva_confirmada")
                                contenedorBanner.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                bloquePasosReservaNuevo.appendChild(contenedorBanner)
                            }

                            const bloqueSelecionDias = document.createElement('div');
                            bloqueSelecionDias.setAttribute('class', 'bloqueSelecionDias');

                            const plazaAlojamientoContenedor = document.createElement('div');
                            plazaAlojamientoContenedor.setAttribute('class', 'plaza_alojamiento_contenedor');
                            plazaAlojamientoContenedor.setAttribute('contenedor', 'alojamiento');
                            plazaAlojamientoContenedor.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                            const diaEntradaNuevo = document.createElement('div');
                            diaEntradaNuevo.setAttribute('class', 'diaEntradaNuevo plaza_alojamiento_marcoFechaCompartido');
                            diaEntradaNuevo.setAttribute('calendario', 'entrada');
                            diaEntradaNuevo.setAttribute('boton', 'desplegarCalendario');
                            if (reservaLocal?.entrada) {
                                diaEntradaNuevo.setAttribute("memoriaVolatil", reservaLocal.entrada)
                            } else {
                                diaEntradaNuevo.classList.add("parpadeaFondo")
                            }
                            diaEntradaNuevo.addEventListener("click", async () => {
                                await casaVitini.ui.componentes.calendario.configurarCalendario({
                                    perfilMes: "calendario_entrada_publico_sinPasado",
                                    contenedorOrigenIDV: "[calendario=entrada]",
                                    instanciaUID_contenedorFechas,
                                    rangoIDV: "inicioRango",
                                    metodoSelectorDia: metodoSelectorPasarela,
                                    tituloCalendario: "Selecciona una fecha de entrada por favor"
                                })
                            })
                            const textoDiaEntrada = document.createElement('div');
                            textoDiaEntrada.setAttribute('class', 'textoDiaNuevo');
                            textoDiaEntrada.textContent = 'Fecha de entrada';
                            diaEntradaNuevo.appendChild(textoDiaEntrada);
                            const plazaAlojamientoMarcoFechaEntrada = document.createElement('div');
                            plazaAlojamientoMarcoFechaEntrada.setAttribute('class', 'plaza_alojamiento_marcoFechaCompartido_contenedorFecha');
                            plazaAlojamientoMarcoFechaEntrada.setAttribute('fechaUI', 'fechaInicio');
                            if (reservaLocal?.entrada) {
                                plazaAlojamientoMarcoFechaEntrada.textContent = reservaLocal.entrada
                            } else {
                                plazaAlojamientoMarcoFechaEntrada.textContent = '(Seleccionar)';
                            }
                            diaEntradaNuevo.appendChild(plazaAlojamientoMarcoFechaEntrada);

                            const diaSalidaNuevo = document.createElement('div');
                            diaSalidaNuevo.setAttribute('class', 'diaSalidaNuevo plaza_alojamiento_marcoFechaCompartido');
                            diaSalidaNuevo.setAttribute('calendario', 'salida');
                            diaSalidaNuevo.setAttribute('boton', 'desplegarCalendario');
                            if (reservaLocal?.salida) {
                                diaSalidaNuevo.setAttribute("memoriaVolatil", reservaLocal.salida)
                            } else {

                            }
                            diaSalidaNuevo.addEventListener("click", async () => {

                                await casaVitini.ui.componentes.calendario.configurarCalendario({
                                    perfilMes: "calendario_salida_publico_sinPasado",
                                    contenedorOrigenIDV: "[calendario=salida]",
                                    instanciaUID_contenedorFechas,
                                    rangoIDV: "finalRango",
                                    metodoSelectorDia: metodoSelectorPasarela,
                                    tituloCalendario: "Selecciona una fecha de salida por favor"

                                })
                            })
                            const textoDiaSalida = document.createElement('div');
                            textoDiaSalida.setAttribute('class', 'textoDiaNuevo');
                            textoDiaSalida.textContent = 'Fecha de Salida';
                            diaSalidaNuevo.appendChild(textoDiaSalida);
                            const plazaAlojamientoMarcoFechaSalida = document.createElement('div');
                            plazaAlojamientoMarcoFechaSalida.setAttribute('class', 'plaza_alojamiento_marcoFechaCompartido_contenedorFecha');
                            plazaAlojamientoMarcoFechaSalida.setAttribute('fechaUI', 'fechaFin');
                            if (reservaLocal?.salida) {
                                plazaAlojamientoMarcoFechaSalida.textContent = reservaLocal.salida
                            } else {
                                plazaAlojamientoMarcoFechaSalida.textContent = '(Seleccionar)';
                            }
                            diaSalidaNuevo.appendChild(plazaAlojamientoMarcoFechaSalida);

                            const botonMostrarDisponibilidad = document.createElement('div');
                            botonMostrarDisponibilidad.setAttribute('class', 'botonMostrarDisponibilidad');
                            botonMostrarDisponibilidad.setAttribute('componente', 'botonDisponibilidad');
                            botonMostrarDisponibilidad.setAttribute('boton', 'mostrarDisponibilidad');
                            botonMostrarDisponibilidad.textContent = 'Buscar';
                            botonMostrarDisponibilidad.addEventListener("click", casaVitini.ui.vistas.alojamiento.portada.buscarApartamentosDisponibles)

                            plazaAlojamientoContenedor.appendChild(diaEntradaNuevo);
                            plazaAlojamientoContenedor.appendChild(diaSalidaNuevo);
                            plazaAlojamientoContenedor.appendChild(botonMostrarDisponibilidad);
                            bloqueSelecionDias.appendChild(plazaAlojamientoContenedor);
                            const botonBorrarBusquedaAlojamiento = document.createElement("div")
                            botonBorrarBusquedaAlojamiento.classList.add("plaza_alojamiento_botonBorrarBusquedaAlojamiento")
                            botonBorrarBusquedaAlojamiento.setAttribute("componente", "botonBorrarBusquedaAlojamiento")
                            botonBorrarBusquedaAlojamiento.textContent = "Borrar búsqueda de alojamiento "
                            botonBorrarBusquedaAlojamiento.addEventListener("click", (e) => {
                                document.body.removeAttribute("class")
                                document.querySelector("[calendario=entrada]").classList.add("parpadeaFondo")
                                document.querySelector("[calendario=salida]").classList.remove("parpadeaFondo")
                                document.querySelector("[espacio=marcoElastico]").classList.remove("fondoTransparente")
                                document.querySelector("[componente=botonDisponibilidad]").classList.remove("parpadeaFondo")
                                const selectorCalendarios = document.querySelectorAll("[calendario]")
                                selectorCalendarios.forEach((memoriaVolatil) => {
                                    memoriaVolatil.removeAttribute("memoriaVolatil")
                                })
                                const fechaEntradaUI = document.querySelector("[fechaUI=fechaInicio]")
                                fechaEntradaUI.textContent = "(Seleccionar)"
                                const fechaSalidaUI = document.querySelector("[fechaUI=fechaFin]")
                                fechaSalidaUI.textContent = "(Seleccionar)"
                                sessionStorage.removeItem("reserva")
                                const selectorSuperBloque = document.querySelector("[componente=superBloque]")
                                selectorSuperBloque?.remove()
                                e.target.removeAttribute("style")
                                document.querySelector("[espacio=marcoElastico]").classList.add("fondoAlojamiento")

                            })
                            bloqueSelecionDias.appendChild(botonBorrarBusquedaAlojamiento);
                            bloquePasosReservaNuevo.appendChild(bloqueSelecionDias);
                            if (reservaLocal?.entrada && reservaLocal?.salida) {
                                await casaVitini.ui.vistas.alojamiento.portada.buscarApartamentosDisponibles("botonDisponibilidad")
                            }
                            if (reservaLocal?.alojamiento) {
                                const alojamiento = reservaLocal.alojamiento
                                for (const apartamento in alojamiento) {

                                    const habitacionesPorApartamento = alojamiento[apartamento]["habitaciones"]
                                    for (const habitacion in habitacionesPorApartamento) {
                                        const camaIDV = habitacionesPorApartamento[habitacion]["camaIDV"]
                                        const constructorSelector = `[apartamentoIDV='${apartamento}'][habitacionIDV='${habitacion}'][camaIDV='${camaIDV}']`
                                        document.querySelector(constructorSelector)?.click()












                                    }
                                }
                            }


                            const img = document.createElement("div")
                            img.style.backgroundImage = 'url("/componentes/imagenes/test/image00061.jpeg")';
                            img.style.flex = "1"
                            img.style.padding = "12px"
                            img.style.borderRadius = "15px"

                            img.style.backgroundSize = "cover";
                            img.style.backgroundRepeat = "no-repeat";
                            img.style.backgroundAttachment = "fixed";
                            img.style.backgroundPosition = "center center";


                        } catch (error) {

                            casaVitini.ui.componentes.errorRenderizacionVista()
                        }

                    },
                    metodoSelectorPasarela: (e) => {
                        casaVitini.ui.componentes.calendario.calendarioCompartido.seleccionarDia(e)
                        casaVitini.ui.vistas.alojamiento.portada.asistenteCalendarios()
                    },
                    asistenteCalendarios: async () => {
                        const contenedorAlojamiento = document.querySelector("[contenedor=alojamiento]")
                        const contenedorEntrada = contenedorAlojamiento.querySelector("[calendario=entrada]")
                        const contenedorSalida = contenedorAlojamiento.querySelector("[calendario=salida]")
                        const fechaEntrada = contenedorEntrada.getAttribute("memoriaVolatil")
                        const fechaSalida = contenedorSalida.getAttribute("memoriaVolatil")
                        const botonDisponibilidad = contenedorAlojamiento.querySelector("[boton=mostrarDisponibilidad]")
                        const metodoSelectorPasarela = "ui.vistas.alojamiento.portada.metodoSelectorPasarela"
                        const instanciaUID_contenedorFechas = contenedorAlojamiento.getAttribute("instanciaUID_contenedorFechas")

                        const contenedores = contenedorAlojamiento.querySelectorAll("[boton]")
                        contenedores.forEach((contenedor) => {
                            contenedor.classList.remove("parpadeaFondo")
                        })
                        casaVitini.shell.controladoresUI.ocultarElementos()
                        if (fechaEntrada && fechaSalida) {

                            return casaVitini.ui.vistas.alojamiento.portada.buscarApartamentosDisponibles()
                        } else if (fechaEntrada) {
                            contenedorSalida.classList.add("parpadeaFondo")
                            await casaVitini.ui.componentes.calendario.configurarCalendario({
                                perfilMes: "calendario_salida_publico_sinPasado",
                                contenedorOrigenIDV: "[calendario=salida]",
                                instanciaUID_contenedorFechas,
                                rangoIDV: "finalRango",
                                metodoSelectorDia: metodoSelectorPasarela
                            })
                        } else if (fechaSalida) {
                            contenedorEntrada.classList.add("parpadeaFondo")
                            await casaVitini.ui.componentes.calendario.configurarCalendario({
                                perfilMes: "calendario_entrada_publico_sinPasado",
                                contenedorOrigenIDV: "[calendario=entrada]",
                                instanciaUID_contenedorFechas,
                                rangoIDV: "inicioRango",
                                metodoSelectorDia: metodoSelectorPasarela
                            })
                        }
                    },
                    buscarApartamentosDisponibles: async () => {

                        document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                        const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                        casaVitini.shell.controladoresUI.ocultarElementos()

                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const bloqueCalendario = document.createElement("div")
                        bloqueCalendario.setAttribute("class", "bloqueCalendarioNuevo")
                        const cartelInfoCalendarioEstado = document.createElement("div")
                        cartelInfoCalendarioEstado.setAttribute("class", "cartelInfoCalendarioEstado")
                        cartelInfoCalendarioEstado.setAttribute("componente", "infoCalendario")
                        if (!fechaEntradaVolatil_Humana) {
                            const error = "Por favor, selecciona la fecha de entrada haciendo clic en el recuadro correspondiente y elige la fecha deseada en el calendario desplegable."
                            return casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                        if (!fechaSalidaVolatil_Humana) {
                            const error = "Selecciona una fecha de salida pulsando en el cuadro de fecha de salida y seleccionando la fecha en el calendario flotante"
                            return casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                        document.querySelector("[espacio=marcoElastico]").classList.remove("fondoAlojamiento")
                        document.querySelector("[espacio=marcoElastico]").classList.add("fondoTransparente")

                        document.body.style.backgroundColor = "rgb(214, 192, 157)"
                        document.querySelector(".bloquePernoctacion")?.remove()
                        document.querySelector(".bloqueBotonResumenReserva")?.remove()
                        document.querySelectorAll("[componente=superBloque]").forEach((contenedorAlojamientoRenderizado) => {
                            contenedorAlojamientoRenderizado.remove()
                        })
                        const contenedorBusquedaAlojamiento = document.querySelector("[contenedor=busquedaAlojamiento]")
                        const superBloqueReserva = document.createElement("div")
                        superBloqueReserva.classList.add("plaza_alojamiento_superBloque")
                        superBloqueReserva.setAttribute("componente", "superBloque")
                        superBloqueReserva.setAttribute("instanciaUID", instanciaUID)
                        const contenedorEstadoBusqueda = document.createElement("div")
                        contenedorEstadoBusqueda.classList.add("plaza_alojamiento_contenedorEsperaAlojamiento")
                        const spinnerContainer = document.createElement('div');
                        spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                        spinnerContainer.classList.add("lds-spinner");
                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement('div');
                            spinnerContainer.appendChild(div);
                        }
                        contenedorEstadoBusqueda.appendChild(spinnerContainer)
                        const info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.textContent = "Buscando alojamiento..."
                        contenedorEstadoBusqueda.appendChild(info)
                        const boton = document.createElement("div")
                        boton.setAttribute("class", "botonV1")
                        boton.classList.add("blur")
                        boton.textContent = "Cancelar"
                        boton.addEventListener("click", () => {
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).remove()
                            document.body.removeAttribute("class")
                            document.querySelector("[espacio=marcoElastico]").classList.remove("fondoAlojamiento")

                        })
                        contenedorEstadoBusqueda.appendChild(boton)
                        superBloqueReserva.appendChild(contenedorEstadoBusqueda)
                        contenedorBusquedaAlojamiento.appendChild(superBloqueReserva)
                        const botonBorrarBusquedaAlojamiento = document.querySelector("[componente=botonBorrarBusquedaAlojamiento]")
                        botonBorrarBusquedaAlojamiento.style.display = "flex"




                        document.querySelector("[componente=botonDisponibilidad]").classList.remove("parpadeaFondo")
                        const transaccion = {
                            zona: "plaza/reservas/apartamentosDisponiblesPublico",
                            fechaEntrada: fechaEntradaVolatil_Humana,
                            fechaSalida: fechaSalidaVolatil_Humana
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        if (!document.querySelector(`[instanciaUID="${instanciaUID}"]`)) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).remove()
                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor.ok) {
                            const apartamentosDisponibles = respuestaServidor?.ok.apartamentosDisponibles
                            const contenedorFinanciero = respuestaServidor?.ok.contenedorFinanciero
                            const complementosAlojamiento = respuestaServidor?.ok.complementosAlojamiento

                            const superBloqueReservaRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            superBloqueReservaRenderizado.innerHTML = null
                            if (!superBloqueReservaRenderizado) {
                                return
                            }
                            if (Object.keys(apartamentosDisponibles).length === 0) {
                                const infoSinAlojamiento = document.createElement("p")
                                infoSinAlojamiento.setAttribute("class", "plaza_alojamiento_infoSinAlojamientoDisponible")
                                infoSinAlojamiento.textContent = "No hay níngun alojamiento dispopnible para las fechas seleccionadas."
                                superBloqueReservaRenderizado.appendChild(infoSinAlojamiento);
                                return
                            }

                            const tituloBloqueAlojamiento = document.createElement("p")
                            tituloBloqueAlojamiento.setAttribute("class", "tituloBloqueAlojamiento parpadeaFondoTransparente")
                            tituloBloqueAlojamiento.setAttribute("componente", "tituloInfoSeleccionar")
                            tituloBloqueAlojamiento.textContent = "Selecciona los apartamentos que quieres reservas. Se aplicaran las ofertas automáticamente."
                            superBloqueReservaRenderizado.appendChild(tituloBloqueAlojamiento);
                            const bloqueAlojamientoUI = document.createElement("div")
                            bloqueAlojamientoUI.classList.add("bloqueAlojamiento")
                            bloqueAlojamientoUI.setAttribute("contenedor", "alojamiento")
                            superBloqueReservaRenderizado.appendChild(bloqueAlojamientoUI)





                            for (const apartamento of Object.entries(apartamentosDisponibles)) {
                                const apartamentoIDV = apartamento[0]
                                const apartamentoUI = apartamento[1].apartamentoUI
                                const habitaciones = apartamento[1].habitaciones
                                const caracteristicas = apartamento[1].caracteristicas
                                const totalInicial = contenedorFinanciero[apartamentoIDV].global.totales.totalFinal
                                const contenedorOFertasPorCondicion = contenedorFinanciero[apartamentoIDV].contenedorOfertas.ofertas.porCondicion
                                // const complementosAlojamiento = complementosAlojamiento[apartamentoIDV]

                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                const bloqueApartamento = document.createElement("div")
                                bloqueApartamento.setAttribute("class", "plaza_alojamiento_contenedorApartamento")
                                bloqueApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                bloqueApartamento.setAttribute("apartamentoUI", apartamentoUI)
                                bloqueApartamento.setAttribute("instanciaUID", instanciaUID)
                                bloqueApartamento.setAttribute("habitaciones", JSON.stringify(habitaciones))
                                //bloqueApartamento.setAttribute("complementosAlojamiento", JSON.stringify(complementosAlojamiento))

                                bloqueApartamento.addEventListener("click", () => {


                                    const selectorApartamento = document.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                                    const selectorSelectorApartamento = selectorApartamento.querySelector("[componente=selectorApartamento]")

                                    if (selectorApartamento.getAttribute("estadoApartamento") !== "seleccionado") {
                                        selectorApartamento.setAttribute("estadoApartamento", "seleccionado")
                                        selectorSelectorApartamento.style.opacity = "1"
                                    } else {
                                        selectorApartamento.removeAttribute("estadoApartamento")
                                        selectorSelectorApartamento.removeAttribute("style")
                                    }
                                    const numeroApartamentosSeleccionado = document.querySelectorAll("[apartamentoIDV][estadoApartamento=seleccionado]").length
                                    const selectorApartamentosSeleccionados = document.querySelectorAll("[estadoApartamento=seleccionado]")
                                    const marcoFlotante = document.querySelector("[componente=marcoFlotanteIrAResumen]")
                                    const selectorInfoTextoParpadeo = document.querySelector("[componente=tituloInfoSeleccionar]")
                                    const selectorBotonIrAlResumen = marcoFlotante.querySelector("[componente=botonIrAResumenReserva]")
                                    const selectorEstadoSeleccion = selectorBotonIrAlResumen.querySelector("[contenedor=estadoSeleccion]")
                                    selectorEstadoSeleccion.innerHTML = "Selecciona tu alojamiento"
                                    if (selectorApartamentosSeleccionados.length > 0) {
                                        selectorInfoTextoParpadeo.classList.remove("parpadeaFondoTransparente")
                                        marcoFlotante.style.opacity = "1"
                                        marcoFlotante.querySelector("[componente=botonIrAResumenReserva]")
                                            .style.pointerEvents = "all"

                                        if (numeroApartamentosSeleccionado === 1) {
                                            selectorEstadoSeleccion.textContent = `1 Apartamento seleccionado`
                                        } else if (numeroApartamentosSeleccionado > 1) {
                                            selectorEstadoSeleccion.textContent = `${numeroApartamentosSeleccionado} Apartamentos seleccionados`
                                        }

                                    } else {
                                        selectorInfoTextoParpadeo.classList.add("parpadeaFondoTransparente")
                                        marcoFlotante.removeAttribute("style")





                                    }

                                    casaVitini.ui.vistas.alojamiento.portada.actualizarPreciosPorSeleccion()
                                })
                                bloqueAlojamientoUI.appendChild(bloqueApartamento)
                                const bloqueImagen = document.createElement("div")
                                bloqueImagen.setAttribute("class", "bloqueImagen")

                                const contenedorTitulo = document.createElement("div")
                                contenedorTitulo.classList.add("plaza_alojamiento_contenedorApartamento_contenedorTitulo")
                                const bloqueVerticalTitulo = document.createElement("div")
                                bloqueVerticalTitulo.setAttribute("class", "bloqueVerticalTitulo")
                                const elementoTituloNombre = document.createElement("div")
                                elementoTituloNombre.setAttribute("class", "elementoTituloPrincipal")
                                elementoTituloNombre.textContent = apartamentoUI
                                bloqueVerticalTitulo.appendChild(elementoTituloNombre)
                                const bloqueTituloApartamentoComponenteUI = document.createElement("div")
                                bloqueTituloApartamentoComponenteUI.setAttribute("class", "tituloApartamentoComponenteUI")
                                bloqueVerticalTitulo.appendChild(bloqueTituloApartamentoComponenteUI)
                                contenedorTitulo.appendChild(bloqueVerticalTitulo)
                                const bloqueCaracteristicas = document.createElement("div")
                                bloqueCaracteristicas.classList.add("plaza_alojamiento_contenedorApartmento_contenedorCaracteristicas")
                                for (const caracteristica of caracteristicas) {
                                    const caracteristicaUI = document.createElement("div")
                                    caracteristicaUI.classList.add("plaza_alojamiento_contenedorCaracteristicas_caracteristicas")
                                    caracteristicaUI.textContent = caracteristica.caracteristicaUI
                                    bloqueCaracteristicas.appendChild(caracteristicaUI)
                                }
                                if (caracteristicas.length > 0) {
                                    contenedorTitulo.appendChild(bloqueCaracteristicas)
                                }

                                bloqueApartamento.appendChild(contenedorTitulo)

                                const contenedorTotalYOfertas = document.createElement("div")
                                contenedorTotalYOfertas.classList.add(
                                    "flexVertical",
                                    "gap10",

                                )
                                contenedorTotalYOfertas.setAttribute("contenedor", "totalYOfertas")
                                bloqueTituloApartamentoComponenteUI.appendChild(contenedorTotalYOfertas)

                                const totaUI = document.createElement("div")
                                totaUI.setAttribute("class", "elementoTitulo")
                                totaUI.setAttribute("totalInicial", totalInicial)
                                totaUI.setAttribute("contenedorOfertasInicial", JSON.stringify(contenedorOFertasPorCondicion))
                                totaUI.setAttribute("componente", "valorTotal")
                                contenedorTotalYOfertas.appendChild(totaUI)

                                const contenedorOfertasUI = document.createElement("div")
                                contenedorOfertasUI.classList.add(
                                    "flexVertical",
                                    "gap10",
                                    "efectoAparicion",
                                    "ocultoInicial"
                                )
                                contenedorOfertasUI.setAttribute("contenedor", "ofertas")
                                contenedorTotalYOfertas.appendChild(contenedorOfertasUI)


                                casaVitini.ui.vistas.alojamiento.portada.aplicaPrecioAlApartamento({
                                    apartamentoIDV: apartamentoIDV,
                                    contenedorOfertas: contenedorOFertasPorCondicion,
                                    total: totalInicial
                                })

                                const bloqueHabitaciones = document.createElement("div")
                                bloqueHabitaciones.classList.add("plaza_alojamiento_contenedorApartmento_contenedorHabitaciones")
                                bloqueHabitaciones.setAttribute("componente", "bloqueHabitaciones")
                                const checkUI = document.createElement("div")
                                checkUI.classList.add("plaza_alojamiento_contenedorApartmento_check")
                                checkUI.setAttribute("componente", "selectorApartamento")
                                checkUI.textContent = "Seleccionado"
                                bloqueApartamento.appendChild(checkUI)
                                for (const habitacion of Object.entries(habitaciones)) {
                                    const habitacionIDV = habitacion[0]
                                    const habitacionUI = habitacion[1].habitacionUI
                                    const configuracionesHabitacion = habitacion[1].configuraciones
                                    const numeroDeCamasPorHabitacion = Object.keys(configuracionesHabitacion).length
                                    const habitacionBloque = document.createElement("div")
                                    habitacionBloque.setAttribute("class", "habitacion")
                                    habitacionBloque.setAttribute("componente", "habitacacionContenedor")
                                    habitacionBloque.setAttribute("habitacionIDV", habitacionIDV)
                                    habitacionBloque.addEventListener("click", (e) => {

                                    })
                                    const habitacionNombre = document.createElement("div")
                                    habitacionNombre.setAttribute("class", "habitacionNombre")
                                    habitacionNombre.textContent = habitacionUI
                                    habitacionBloque.appendChild(habitacionNombre)
                                    if (numeroDeCamasPorHabitacion > 1) {
                                        const infoHabitacion = document.createElement("div")
                                        infoHabitacion.classList.add("plaza_alojamiento_contenedorHabitacion_infoSeleccionTipoCama")
                                        infoHabitacion.setAttribute("componente", "infoSeleccionCama")
                                        infoHabitacion.textContent = "Selecciona el tipo de cama para la habitación."
                                        habitacionBloque.appendChild(infoHabitacion)
                                    }
                                    if (numeroDeCamasPorHabitacion === 1) {
                                        const infoHabitacion = document.createElement("div")
                                        infoHabitacion.classList.add("plaza_alojamiento_contenedorHabitacion_infoSeleccionTipoCama")
                                        infoHabitacion.textContent = "Esta habitación solo dispone de este tipo de cama. Al seleccionar este apartamento, se selecciona esta cama para esta habitación"
                                        habitacionBloque.appendChild(infoHabitacion)
                                    }
                                    const bloqueHabitacionCamas = document.createElement("div")
                                    bloqueHabitacionCamas.setAttribute("class", "bloqueHabitacion")
                                    for (const configuracionHabitacion of Object.entries(configuracionesHabitacion)) {
                                        const camaIDV = configuracionHabitacion[1].camaIDV
                                        const camaUI = configuracionHabitacion[1].camaUI
                                        const capacidad = configuracionHabitacion[1].capacidad
                                        const bloqueCama = document.createElement("div")
                                        bloqueCama.setAttribute("class", "habitacionCamas")
                                        bloqueCama.setAttribute("camaIDV", camaIDV)
                                        bloqueCama.setAttribute("capacidadPernoctativa", capacidad)
                                        bloqueCama.setAttribute("componente", "botonSelectorCama")
                                        bloqueCama.textContent = camaUI
                                        if (numeroDeCamasPorHabitacion > 1) {
                                            bloqueCama.addEventListener("click", (e) => {
                                                e.stopPropagation()
                                                const datosCama = {
                                                    apartamentoIDV: apartamentoIDV,
                                                    habitacionIDV: habitacionIDV,
                                                    camaIDV: camaIDV
                                                }
                                                casaVitini.ui.vistas.alojamiento.seleccionarCama(datosCama)
                                            })
                                        }
                                        bloqueHabitacionCamas.appendChild(bloqueCama)
                                        habitacionBloque.appendChild(bloqueCama)
                                    }

                                    bloqueHabitaciones.appendChild(habitacionBloque)
                                }

                                const metadatos = {
                                    apartamentoIDV: apartamentoIDV,
                                    instanciaUID: instanciaUID,
                                }
                                casaVitini.ui.vistas.alojamiento.portada.obtenerImagenApartamento(metadatos)

                            }

                            const marcoBotonFlotanteIrAResumenReserva = document.createElement("div")
                            marcoBotonFlotanteIrAResumenReserva.classList.add("plaza_alojamiento_marcoBotonIreAResumenReserva")
                            marcoBotonFlotanteIrAResumenReserva.setAttribute("componente", "marcoFlotanteIrAResumen")
                            const marcoIntermedio = document.createElement("div")
                            marcoIntermedio.classList.add("plaza_alojamiento_marcoIntermedioBotonIrResumenReserva")
                            const botonResumenReserva = document.createElement("div")
                            botonResumenReserva.classList.add("plaza_alojamiento_boronResumenReservaEnMarcoFlotante")
                            botonResumenReserva.classList.add("parpadeaFondoSemiBlanco")
                            botonResumenReserva.setAttribute("componente", "botonIrAResumenReserva")

                            botonResumenReserva.addEventListener("click", casaVitini.ui.vistas.alojamiento.portada.iraResumenReserva)
                            marcoIntermedio.append(botonResumenReserva)

                            const contenedorEstadoSeleccion = document.createElement("div")
                            contenedorEstadoSeleccion.setAttribute("contenedor", "estadoSeleccion")
                            botonResumenReserva.appendChild(contenedorEstadoSeleccion)

                            const info = document.createElement("div")
                            info.classList.add(
                                "negrita"
                            )
                            info.textContent = "Ir al resumen de mi reserva"
                            botonResumenReserva.appendChild(info)

                            marcoBotonFlotanteIrAResumenReserva.append(marcoIntermedio)
                            superBloqueReservaRenderizado.appendChild(marcoBotonFlotanteIrAResumenReserva)
                        }

                    },
                    obtenerImagenApartamento: async (metadatos) => {
                        const apartamentoIDV = metadatos.apartamentoIDV
                        const instanciaUIDDestino = metadatos.instanciaUID
                        const transacccion = {
                            zona: "componentes/imagenDelApartamento",
                            apartamentoIDV: apartamentoIDV
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                        if (respuestaServidor?.error) {
                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const contenedorApartamentoRenderizado = document.querySelector(`[apartamentoIDV=${apartamentoIDV}][instanciaUID="${instanciaUIDDestino}"]`)
                            if (contenedorApartamentoRenderizado) {
                                const imagen = respuestaServidor.imagen
                                const detectarTipoDeImagen = (base64String) => {
                                    const binarioMagicoPNG = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);
                                    const binarioMagicoJPEG = new Uint8Array([255, 216, 255]);
                                    const binarioMagicoTIFF = new Uint8Array([73, 73, 42]);
                                    const arrayBuffer = Uint8Array.from(atob(base64String), c => c.charCodeAt(0));
                                    const buffer = new Uint8Array(arrayBuffer);
                                    if (buffer.subarray(0, 8).every((value, index) => value === binarioMagicoPNG[index])) {
                                        return "PNG";
                                    } else if (buffer.subarray(0, 3).every((value, index) => value === binarioMagicoJPEG[index])) {
                                        return "JPEG";
                                    } else if (buffer.subarray(0, 3).every((value, index) => value === binarioMagicoTIFF[index])) {
                                        return "TIFF";
                                    } else {
                                        return "Tipo de imagen desconocido";
                                    }
                                };
                                const tipoDeImagen = detectarTipoDeImagen(imagen);
                                contenedorApartamentoRenderizado.style.backgroundImage = `url(data:image/${tipoDeImagen.toLowerCase()};base64,${imagen})`;
                                contenedorApartamentoRenderizado.style.backgroundSize = "cover";
                                contenedorApartamentoRenderizado.style.backgroundPosition = "center";
                                contenedorApartamentoRenderizado.style.backgroundRepeat = "no-repeat";
                            }
                        }
                    },
                    iraResumenReserva: function () {
                        const reservaLocal = {}
                        const fechaEntradaVolatil_ISO = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                        const fechaSalidaVolatil_ISO = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                        reservaLocal.fechaEntrada = fechaEntradaVolatil_ISO
                        reservaLocal.fechaSalida = fechaSalidaVolatil_ISO
                        reservaLocal.alojamiento = {}
                        const apartamentosSeleccionados = document.querySelectorAll("[estadoApartamento=seleccionado]")
                        apartamentosSeleccionados.forEach((apartamento) => {
                            const apartamentoIDV = apartamento.getAttribute("apartamentoIDV")
                            const apartamentoUI = apartamento.getAttribute("apartamentoUI")
                            const habitaciones = JSON.parse(apartamento.getAttribute("habitaciones"))
                            reservaLocal.alojamiento[apartamentoIDV] = {
                                // apartamentoUI: apartamentoUI,
                                // habitaciones: habitaciones
                            }

                        })
                        const reservaLocalJSON = JSON.stringify(reservaLocal)
                        sessionStorage.setItem("preReservaLocal", reservaLocalJSON)
                        return casaVitini.shell.navegacion.controladorVista({
                            vista: "/alojamiento/resumen",
                            tipoOrigen: "menuNavegador"
                        })
                    },
                    componenteSelectorCamas: (metadatos) => {
                        let capacidadPernoctativa = metadatos.getAttribute("capacidadPernoctativa")
                        let habitacionIDV = metadatos.getAttribute("habitacionIDV")
                        let habitacionUI = metadatos.getAttribute("habitacionUI")
                        let camaNombre = metadatos.getAttribute("camaUI")
                        let camaIDV = metadatos.getAttribute("camaIDV")
                        let camaUI = metadatos.getAttribute("camaUI")
                        let camaSeleccionada = metadatos
                        let apartamentoIDV = metadatos.getAttribute("apartamentoIDV")
                        let apartamentoUI = metadatos.getAttribute("apartamentoUI")
                        let selectorHabitacion = document.querySelector(`.bloquePernoctacion .bloqueInquilino[apartamentoIDV='${apartamentoIDV}']  .bloqueHabitacionInquilino[bloqueHabitacionID_Compartido='${habitacionIDV}']`)
                        let bloqueInquilinoSelector = document.querySelector(`.bloquePernoctacion .bloqueInquilino[apartamentoIDV='${apartamentoIDV}']`)
                        let selectorBotonResumenReserva = document.querySelector(".bloquePasosReservaNuevo .bloqueBotonResumenReserva")
                        if (selectorHabitacion) {
                            selectorHabitacion.remove()
                        }
                        camaSeleccionada.style.background = "red"
                        camaSeleccionada.style.color = "white"
                        camaSeleccionada.setAttribute("estadoCama", "camaSeleccionada")

                        let bloqueInquilino = document.createElement("div")
                        bloqueInquilino.setAttribute("class", "bloqueInquilino")
                        bloqueInquilino.setAttribute("apartamentoIDV", apartamentoIDV)
                        bloqueInquilino.setAttribute("apartamentoUI", apartamentoUI)
                        bloqueInquilino.setAttribute("componente", "habitacionPernoctantes")
                        bloqueInquilino.setAttribute("zona", "apartamentoPernoctacion")
                        let tituloInquilino = document.createElement("p")
                        tituloInquilino.setAttribute("class", "tituloInquilino")
                        tituloInquilino.textContent = "Anadir pernoctantes en " + apartamentoUI
                        bloqueInquilino.appendChild(tituloInquilino)
                        let bloqueHabitacion = document.createElement("div")
                        bloqueHabitacion.setAttribute("class", "bloqueHabitacionInquilino")
                        bloqueHabitacion.setAttribute("habitacionIDV", habitacionIDV)
                        bloqueHabitacion.setAttribute("habitacionUI", habitacionUI)
                        let bloqueTituloHabitacion = document.createElement("div")
                        bloqueTituloHabitacion.setAttribute("class", "bloqueTituloHabitacion")
                        bloqueTituloHabitacion.setAttribute("camaIDV", camaIDV)
                        bloqueTituloHabitacion.setAttribute("camaUI", camaUI)
                        bloqueTituloHabitacion.textContent = habitacionUI + " - " + camaUI
                        bloqueHabitacion.appendChild(bloqueTituloHabitacion)
                        if (!bloqueInquilinoSelector) {
                            bloqueInquilino.appendChild(bloqueHabitacion)
                        } else {
                            bloqueInquilinoSelector.appendChild(bloqueHabitacion)
                        }
                        for (let ciclo = 0; ciclo < capacidadPernoctativa; ciclo++) {
                            let bloqueNombrePasaporte = document.createElement("div")
                            bloqueNombrePasaporte.setAttribute("class", "bloqueNombrePasaporte")
                            bloqueNombrePasaporte.setAttribute("bloquePernoctante", "bloquePernoctante")
                            let campoNombreInquilino = document.createElement("input")
                            campoNombreInquilino.setAttribute("class", "campoNombreInquilino campoSuperior")
                            campoNombreInquilino.setAttribute("pernoctante", "nombre")
                            campoNombreInquilino.setAttribute("placeholder", "Nombre y apellidos")
                            bloqueNombrePasaporte.appendChild(campoNombreInquilino)
                            let campoPasaporte = document.createElement("input")
                            campoPasaporte.setAttribute("class", "campoNombreInquilino campoInferior")
                            campoPasaporte.setAttribute("pernoctante", "pasaporte")
                            campoPasaporte.setAttribute("placeholder", "Documento de identificación")
                            bloqueNombrePasaporte.appendChild(campoPasaporte)
                            bloqueHabitacion.appendChild(bloqueNombrePasaporte)
                        }
                        let bloquePernoctacion = document.querySelector(".bloquePernoctacion")
                        if (!bloqueInquilinoSelector) {
                            bloquePernoctacion.appendChild(bloqueInquilino)
                        }
                        if (!selectorBotonResumenReserva) {
                            let bloqueBotonResumenReserva = document.createElement("div")
                            bloqueBotonResumenReserva.setAttribute("class", "bloqueBotonResumenReserva")
                            let BotonResumenReserva = document.createElement("div")
                            BotonResumenReserva.setAttribute("class", "botonResumenReserva")
                            BotonResumenReserva.textContent = "Ir al resumen de la reserva"
                            BotonResumenReserva.addEventListener("click", casaVitini.ui.vistas.alojamiento.iraResumenReserva)
                            bloqueBotonResumenReserva.appendChild(BotonResumenReserva)
                            let bloquePasosReserva = document.querySelector(".bloquePasosReservaNuevo")
                            bloquePasosReserva.appendChild(bloqueBotonResumenReserva)
                        }
                    },
                    actualizarPreciosPorSeleccion: async () => {
                        const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                        const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                        const contenedorSobreBloque = document.querySelector("[componente=superBloque]")
                        const selectorTodosApartamentos = contenedorSobreBloque.querySelectorAll("[apartamentoIDV]")
                        const selectorApartamentosSiSeleccionados = contenedorSobreBloque.querySelectorAll("[estadoApartamento=seleccionado]")
                        const selectorApartamentosNoSeleccionados = contenedorSobreBloque.querySelectorAll("[apartamentoIDV]:not([estadoApartamento=seleccionado])")

                        const apartamentosSeleccionados = []
                        selectorApartamentosSiSeleccionados.forEach((apartamento) => {
                            const apartamentoIDV = apartamento.getAttribute("apartamentoIDV")
                            apartamentosSeleccionados.push(apartamentoIDV)
                        })
                        if (apartamentosSeleccionados.length === 1) {
                            selectorTodosApartamentos.forEach((apartamento) => {
                                const apartamentoIDV = apartamento.getAttribute("apartamentoIDV")
                                const totalInicial = apartamento.querySelector("[componente=valorTotal]").getAttribute("totalInicial")
                                const contenedorOfertasInicial = JSON.parse(apartamento.querySelector("[componente=valorTotal]").getAttribute("contenedorOfertasInicial")) || []
                                casaVitini.ui.vistas.alojamiento.portada.aplicaPrecioAlApartamento({
                                    apartamentoIDV: apartamentoIDV,
                                    contenedorOfertas: contenedorOfertasInicial,
                                    total: totalInicial
                                })
                            })

                        } else if (apartamentosSeleccionados.length > 1) {
                            selectorApartamentosNoSeleccionados.forEach((apartamento) => {
                                const apartamentoIDV = apartamento.getAttribute("apartamentoIDV")
                                const totalInicial = apartamento.querySelector("[componente=valorTotal]").getAttribute("totalInicial")
                                const contenedorOfertasInicial = JSON.parse(apartamento.querySelector("[componente=valorTotal]").getAttribute("contenedorOfertasInicial")) || []
                                casaVitini.ui.vistas.alojamiento.portada.aplicaPrecioAlApartamento({
                                    apartamentoIDV: apartamentoIDV,
                                    contenedorOfertas: contenedorOfertasInicial,
                                    total: totalInicial
                                })
                            })

                            const contenedorInstanciasUID = {}
                            apartamentosSeleccionados.forEach((apartamentoIDV) => {
                                const contenedorApartamento = contenedorSobreBloque.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                                const instanciaUID_proceso = casaVitini.utilidades.codigoFechaInstancia()
                                contenedorInstanciasUID[apartamentoIDV] = instanciaUID_proceso
                                contenedorApartamento.setAttribute("instanciaUID", instanciaUID_proceso)
                                const selectorTotalUI = contenedorApartamento.querySelector(`[componente=valorTotal]`)
                                selectorTotalUI.textContent = "Calculando precio..."
                                const selectorContenedorOfertas = contenedorApartamento.querySelector("[contenedor=ofertas]")
                                selectorContenedorOfertas.innerHTML = null

                            })

                            const respuestaServidor = await casaVitini.shell.servidor({
                                zona: "plaza/reservas/preciosPorSeleccion",
                                fechaEntrada: fechaEntrada,
                                fechaSalida: fechaSalida,
                                apartamentosIDVARRAY: apartamentosSeleccionados
                            })


                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                            }
                            if (respuestaServidor.ok) {
                                const preciosPorSeleccion = respuestaServidor.preciosPorSeleccion
                                const desgloseFinanciero = respuestaServidor.desgloseFinanciero
                                const contenedorOFertasPorCondicion = desgloseFinanciero.contenedorOfertas.ofertas.porCondicion



                                const contenedorSimplificadoOfertas = []
                                contenedorOFertasPorCondicion.forEach((contenedorOferta, i) => {
                                    if (i < 2) {
                                        const nombreOferta = contenedorOferta.oferta.nombreOferta
                                        const estructura = {
                                            nombreOferta,
                                            contenedorOferta
                                        }
                                        contenedorSimplificadoOfertas.push(estructura)
                                    }
                                })


                                apartamentosSeleccionados.forEach((apartamentoIDV) => {
                                    const instanciaUID = contenedorInstanciasUID[apartamentoIDV]
                                    const selectorContenedorApartamento = document.querySelector(`[apartamentoIDV="${apartamentoIDV}"][instanciaUID="${instanciaUID}"]`)
                                    if (selectorContenedorApartamento) {
                                        const valorFinalUI = preciosPorSeleccion[apartamentoIDV].precioEnBaseASeleccion
                                        casaVitini.ui.vistas.alojamiento.portada.aplicaPrecioAlApartamento({
                                            apartamentoIDV,
                                            contenedorOfertas: contenedorOFertasPorCondicion,
                                            total: valorFinalUI
                                        })
                                    }
                                })
                            }
                        }
                    },
                    aplicaPrecioAlApartamento: (data) => {
                        const apartamentoIDV = data.apartamentoIDV
                        const total = data.total
                        const contenedorOfertas = data.contenedorOfertas


                        const selectorApartamento = document.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                        const selectorTotalUI = selectorApartamento.querySelector(`[componente=valorTotal]`)
                        const selectorContenedorOfertas = selectorApartamento.querySelector(`[contenedor=ofertas]`)
                        selectorContenedorOfertas.innerHTML = null
                        selectorContenedorOfertas.classList.add("ocultoInicial")
                        selectorTotalUI.textContent = `${total}$ Total`

                        const contenedorSimplificadoOfertas = []
                        contenedorOfertas.forEach((contenedorOferta, i) => {

                            const nombreOferta = contenedorOferta.oferta.nombreOferta
                            const estructura = {
                                nombreOferta,
                                contenedorOferta
                            }
                            contenedorSimplificadoOfertas.push(estructura)

                        })
                        if (contenedorSimplificadoOfertas.length > 0) {
                            selectorContenedorOfertas.classList.remove("ocultoInicial")
                        }
                        contenedorSimplificadoOfertas.forEach((contenedorOferta) => {
                            const nombreOferta = contenedorOferta.nombreOferta
                            const contenedorOfertaIndividual = document.createElement("a")
                            contenedorOfertaIndividual.setAttribute("contenedor", "ofertaIndividual")
                            contenedorOfertaIndividual.classList.add(
                                "botonOfertaEnApartamento",
                            )
                            contenedorOfertaIndividual.textContent = nombreOferta
                            contenedorOfertaIndividual.addEventListener("click", (e) => {
                                e.preventDefault()
                                e.stopPropagation()
                                e.stopImmediatePropagation()
                                const main = document.querySelector("main")
                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                ui.style.zIndex = "300"
                                const contenedor = ui.querySelector("[componente=contenedor]")
                                main.appendChild(ui)


                                const tituloUI = document.createElement("p")
                                tituloUI.classList.add("tituloGris", "padding18")
                                tituloUI.setAttribute("componente", "titulo")
                                tituloUI.textContent = "Detalles de la oferta seleccionada"
                                contenedor.appendChild(tituloUI)

                                const botonCancelar1 = document.createElement("div")
                                botonCancelar1.classList.add("botonV1")
                                botonCancelar1.setAttribute("boton", "cancelar")
                                botonCancelar1.textContent = "Volver a la selección de apartamentos"
                                botonCancelar1.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCancelar1)

                                const ofertaUI = casaVitini.ui.vistas.alojamiento.portada.ofertas.ofertaUI({
                                    contenedorOferta: contenedorOferta.contenedorOferta.oferta
                                })
                                contenedor.appendChild(ofertaUI)

                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("botonV1")
                                botonCancelar.setAttribute("boton", "cancelar")
                                botonCancelar.textContent = "Volver a la selección de apartamentos"
                                botonCancelar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCancelar)

                            })
                            selectorContenedorOfertas.appendChild(contenedorOfertaIndividual)
                        })









                    },
                    ofertas: {
                        ofertaUI: function (data) {

                            const contenedorOferta = data.contenedorOferta
                            const nombreOferta = contenedorOferta.nombreOferta
                            const fechaInicio = contenedorOferta.fechaInicio
                            const fechaFinal = contenedorOferta.fechaFinal
                            const entidadIDV = contenedorOferta.entidadIDV
                            const estadoIDV = contenedorOferta.estadoIDV
                            const zonaIDV = contenedorOferta.zonaIDV
                            const condicionesArray = contenedorOferta.condicionesArray
                            const descuentosJSON = contenedorOferta.descuentosJSON
                            const estadoUI = {
                                activado: "Activada",
                                desactivado: "Desactivada"
                            }
                            const entidadUI = {
                                reserva: "Reserva"
                            }
                            const zonaUI = {
                                global: "Global",
                                privado: "privado",
                                publico: "publica"
                            }
                            const ofertaUI = document.createElement("a")
                            ofertaUI.classList.add("ofertaUI")
                            const tituloOferta = document.createElement("p")
                            tituloOferta.classList.add(
                                "ofertaUITituloOferta",
                                "negrita"
                            )
                            tituloOferta.textContent = nombreOferta
                            ofertaUI.appendChild(tituloOferta)
                            const contenedorGlobalOferta = document.createElement("div")
                            contenedorGlobalOferta.classList.add("ofertaUIContenedorGlobalOferta")

                            const contenedorDetalleOferta = document.createElement("div")
                            contenedorDetalleOferta.classList.add("ofertaUIContenedorDetalles")

                            const fechaInicioContenedor = document.createElement("div")
                            fechaInicioContenedor.classList.add("ofertaUIFechaContenedor")
                            const tituloFechaInicio = document.createElement("div")
                            tituloFechaInicio.classList.add("ofertaUITituloFecha")
                            tituloFechaInicio.textContent = "Fecha de inicio"
                            fechaInicioContenedor.appendChild(tituloFechaInicio)
                            const datoFechaInicio = document.createElement("div")
                            datoFechaInicio.classList.add("ofertaUIDatoFecha")
                            datoFechaInicio.textContent = fechaInicio
                            fechaInicioContenedor.appendChild(datoFechaInicio)
                            contenedorDetalleOferta.appendChild(fechaInicioContenedor)
                            const fechaFinContenedor = document.createElement("div")
                            fechaFinContenedor.classList.add("ofertaUIFechaContenedor")
                            const tituloFechaFin = document.createElement("div")
                            tituloFechaFin.classList.add("ofertaUITituloFecha")
                            tituloFechaFin.textContent = "Fecha de fin"
                            fechaFinContenedor.appendChild(tituloFechaFin)
                            const datoFechaFin = document.createElement("div")
                            datoFechaFin.classList.add("ofertaUIDatoFecha")
                            datoFechaFin.textContent = fechaFinal
                            fechaFinContenedor.appendChild(datoFechaFin)
                            contenedorDetalleOferta.appendChild(fechaFinContenedor)
                            contenedorGlobalOferta.appendChild(contenedorDetalleOferta)
                            ofertaUI.appendChild(contenedorGlobalOferta)

                            const contenedorCYD = document.createElement("div")
                            contenedorCYD.classList.add(
                                "flexVertical",
                                "gap6"
                            )
                            contenedorCYD.setAttribute("contenedor", "condicionesDescuentos")

                            const condicionesUI = this.condicionesUI({
                                condicionesArray
                            })
                            contenedorCYD.appendChild(condicionesUI)

                            const descuentoUI = this.descuentosUI({
                                descuentosJSON
                            })
                            contenedorCYD.appendChild(descuentoUI)

                            contenedorGlobalOferta.appendChild(contenedorCYD)
                            return ofertaUI
                        },
                        condicionesUI: (data) => {
                            const condicionesArray = data.condicionesArray
                            const contenedorCondiciones = document.createElement("div")
                            contenedorCondiciones.setAttribute("contenedor", "condiciones")
                            contenedorCondiciones.classList.add(
                                "flexVertical",
                                "gap6",
                                "backgroundGrey1",
                                "padding6",
                                "borderRadius14"
                            )
                            const tituloContendor = document.createElement("div")
                            tituloContendor.classList.add(
                                "negrita",
                                "padding6",

                            )
                            tituloContendor.textContent = "Condiciones de la oferta"
                            contenedorCondiciones.appendChild(tituloContendor)

                            condicionesArray.forEach((condicion) => {
                                const tipoCondicion = condicion.tipoCondicion

                                const contenedorCondicion = document.createElement("div")
                                contenedorCondicion.classList.add("contenedorCondicion")
                                contenedorCondicion.setAttribute("tipoCondicion", tipoCondicion)
                                contenedorCondicion.classList.add(
                                    "flexVertical",
                                    "padding6",
                                )
                                const definicionCondicion = casaVitini
                                    .ui
                                    .componentes
                                    .contenedorFinanciero
                                    .componentesUI
                                    .ofertas
                                    .componentesUI
                                    .definicionCondiciones({
                                        tipoCondicion,
                                        condicion
                                    })
                                contenedorCondicion.appendChild(definicionCondicion)
                                contenedorCondiciones.appendChild(contenedorCondicion)
                            })
                            return contenedorCondiciones

                        },
                        descuentosUI: (data) => {
                            const descuentosJSON = data.descuentosJSON
                            const tipoDescuento = descuentosJSON?.tipoDescuento
                            const subTipoDescuento = descuentosJSON?.subTipoDescuento

                            const contenedorDescuentos = document.createElement("div")
                            contenedorDescuentos.setAttribute("contenedor", "descuentos")
                            contenedorDescuentos.classList.add(
                                "flexVertical",
                                "backgroundGrey1",
                                "padding6",
                                "borderRadius14",
                                "gap6"
                            )
                            const tituloContendor = document.createElement("div")
                            tituloContendor.classList.add(
                                "negrita",
                                "padding6",

                            )
                            tituloContendor.textContent = "Descuentos de la oferta"
                            contenedorDescuentos.appendChild(tituloContendor)

                            const desfinicionDescuento = casaVitini
                                .ui
                                .componentes
                                .contenedorFinanciero
                                .componentesUI
                                .ofertas
                                .componentesUI.definicionDescuentos({
                                    tipoDescuento,
                                    subTipoDescuento,
                                    descuentosJSON
                                })
                            contenedorDescuentos.appendChild(desfinicionDescuento)

                            return contenedorDescuentos
                        },
                    },


                },
                resumen: {
                    arranque: async function () {
                        document.body.style.background = "rgb(214 192 157)"
                        const main = document.querySelector("main")
                        const instanciaUID = main.getAttribute("instanciaUID")
                        main.setAttribute("zonaCSS", "/alojamiento/resumen")
                        const reservaLocal = JSON.parse(sessionStorage.getItem("preReservaLocal")) || {}

                        casaVitini.shell.controladoresUI.iconosGlobales.telefonoPublicoWhatsApp({
                            zonaIcono: "alojamiento"
                        })
                        if (Object.keys(reservaLocal).length === 0) {
                            const ui = this.uiConReserva()
                            main.appendChild(ui)
                        } else {
                            const fechaEntrada = reservaLocal.fechaEntrada
                            const fechaSalida = reservaLocal.fechaSalida
                            const alojamiento = reservaLocal.alojamiento
                            const codigoDescuentoPorComprobar = reservaLocal?.codigosDescuento || []

                            const fechaEntrada_Humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaEntrada)
                            const fechaSalida_Humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaSalida)

                            const ui = this.ui()
                            main.appendChild(ui)

                            const selectorFechaEntrada = ui.querySelector("[data=fechaEntrada]")
                            const selectorFechaSalida = ui.querySelector("[data=fechaSalida]")
                            selectorFechaEntrada.textContent = fechaEntrada_Humana
                            selectorFechaSalida.textContent = fechaSalida_Humana

                            //const selectorAlojamiento = ui.querySelector("[data=alojamiento")
                            await this.bloqueAlojamientoUI({
                                instanciaUID,
                                reservaLocal
                            })
                            //selectorAlojamiento.appendChild(contenedorApartamentos)

                            await this.tiempoRestanteUI({
                                selectorDestino: "[contenedor=tiempoRestante]",
                                fechaEntrada
                            })

                            await this.servicios.renderizarServiciosPublicos()

                            if (codigoDescuentoPorComprobar.length > 0) {
                                const selectorOfertasComprobadas = document.querySelector("[contenedor=ofertasComprobadas]")
                                const spinner = casaVitini.ui.componentes.spinnerSimple()
                                selectorOfertasComprobadas.appendChild(spinner)
                                await this.descuentos.contenedorCodigoDescuentos.recuperarOfertasPorArrayDeCodigos()
                            }
                            await this.actualizarPrecioEnUI({
                                aplicarUIData: "no"
                            })
                        }

                    },
                    uiConReserva: () => {
                        const reservaConfirmada = JSON.parse(sessionStorage.getItem("reservaConfirmada"))

                        const contenedor = document.createElement("div")
                        contenedor.classList.add(
                            "flexVertical",
                            "gap14",
                            "padding14"
                        )
                        contenedor.setAttribute("componente", "espacioConfirmarReserva")
                        if (reservaConfirmada) {
                            const botonIrAReservaConfirmada = document.createElement("a")
                            botonIrAReservaConfirmada.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIrAReservaConfirmada.textContent = "Tienes una reserva guardada en la cache de tu navegador. Esta reserva se ha guardado tras confirmar tu reserva. Para ver los detalles de la confirmación pulsa aquí. Si borras la cache de tu navegador esta información desaparecerá. Si quieres un acceso persistente puedes crear un VitiniID desde MiCasa."
                            botonIrAReservaConfirmada.setAttribute("href", "/alojamiento/reserva_confirmada")
                            botonIrAReservaConfirmada.setAttribute("vista", "/alojamiento/reserva_confirmada")
                            botonIrAReservaConfirmada.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            contenedor.appendChild(botonIrAReservaConfirmada)
                        }


                        const botonIrAlInicioDelProcesoDeReserva = document.createElement("a")
                        botonIrAlInicioDelProcesoDeReserva.classList.add("plaza_reservas_reservaConfirmada_banner")
                        botonIrAlInicioDelProcesoDeReserva.textContent = "Ir al incio del proceso de la reserva"
                        botonIrAlInicioDelProcesoDeReserva.setAttribute("href", "/alojamiento")
                        botonIrAlInicioDelProcesoDeReserva.setAttribute("vista", "/alojamiento")
                        botonIrAlInicioDelProcesoDeReserva.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        contenedor.appendChild(botonIrAlInicioDelProcesoDeReserva)
                        return contenedor
                    },
                    tiempoRestanteUI: async (data) => {

                        const selectorDestino = data.selectorDestino
                        const fechaEntrada = data.fechaEntrada
                        const selectorContenedor = document.querySelector(selectorDestino)
                        const mensajeErrorCompartido = "Ha ocurrido un error y no se han podido obtener ciertos datos. Por favor, actualiza la página."

                        const transaccion = {
                            zona: "componentes/horaLimiteDelMismoDia",
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            selectorContenedor.removeAttribute("style")

                            const contenedorBanner = document.createElement("div")
                            contenedorBanner.classList.add("plaza_reservas_reservaConfirmada_banner")
                            contenedorBanner.textContent = mensajeErrorCompartido
                            selectorContenedor.appendChild(contenedorBanner)
                        } else if (respuestaServidor.ok) {

                            const mismoDiaAceptable = respuestaServidor.mismoDiaAceptable
                            const estadoAceptacion = respuestaServidor.estadoAceptacion
                            const horaLimiteDelMismoDia = respuestaServidor.horaLimiteDelMismoDia
                            const zonaHoraria = respuestaServidor.zonaHoraria
                            const fechaActual = respuestaServidor.fechaActual

                            const mismoDia = fechaActual === fechaEntrada

                            if (mismoDia && estadoAceptacion === "no") {
                                selectorContenedor.removeAttribute("style")

                                const contenedorBanner = document.createElement("div")
                                contenedorBanner.classList.add("bannerTiempoRestante")

                                const info = document.createElement("p")
                                info.textContent = casaVitini.ui.vistas.alojamiento.componentes.mensajeNoAceptacion({
                                    horaLimite: horaLimiteDelMismoDia,
                                    zonaHoraria: zonaHoraria
                                });
                                contenedorBanner.appendChild(info)


                                selectorContenedor.appendChild(contenedorBanner)
                            } else if (mismoDia && estadoAceptacion === "si") {
                                selectorContenedor.removeAttribute("style")

                                const cuentaAtras = respuestaServidor.cuentaAtras
                                const dias = cuentaAtras.dias
                                const horas = cuentaAtras.horas
                                const minutos = cuentaAtras.minutos
                                const segundos = cuentaAtras.segundos

                                const totalCuentaAtrasEnReseugnos =
                                    (dias * 24 * 60 * 60) +  // Convertir días a segundos
                                    (horas * 60 * 60) +      // Convertir horas a segundos
                                    (minutos * 60) +         // Convertir minutos a segundos
                                    segundos;                // Segundos ya en segundos
                                const instanciaUID_cuentaAttras = casaVitini.utilidades.codigoFechaInstancia()


                                const contenedorBanner = document.createElement("div")
                                contenedorBanner.classList.add("bannerTiempoRestante")
                                contenedorBanner.setAttribute("instanciaUID", instanciaUID_cuentaAttras)

                                const info = document.createElement("p")

                                // La fecha limite para reservar con fecha de entrada pra hoy, es a las ${horaLimiteDelMismoDia} hora local Nicaragua. 
                                info.textContent = `
                                La fecha limite para reservar con fecha de entrada para hoy, es a las ${horaLimiteDelMismoDia} hora local ${zonaHoraria}.`
                                contenedorBanner.appendChild(info)

                                const cuentaAtrasUI = document.createElement("p")
                                cuentaAtrasUI.setAttribute("contenedor", "cuentaAtras")
                                cuentaAtrasUI.classList.add(
                                    "negrita"
                                )
                                contenedorBanner.appendChild(cuentaAtrasUI)
                                selectorContenedor.appendChild(contenedorBanner)

                                casaVitini.ui.vistas.alojamiento.componentes.controladorCuentaAtras({
                                    instanciaUID: instanciaUID_cuentaAttras,
                                    segundosDeLaCuentaAtras: totalCuentaAtrasEnReseugnos,
                                    zonaHoraria,
                                    horaLimiteDelMismoDia
                                })
                            }
                        }
                    },
                    ui: function () {
                        const contenedor = document.createElement("div")
                        contenedor.classList.add(
                            "flexVertical",
                            "gap14",
                            "padding14"
                        )
                        contenedor.setAttribute("componente", "espacioConfirmarReserva")

                        const titulo = document.createElement("p")
                        titulo.classList.add(
                            "tituloBloque"
                        )
                        titulo.textContent = "Resumen de la reserva"
                        contenedor.appendChild(titulo)


                        const infoTiempoRestante = document.createElement("div")
                        infoTiempoRestante.setAttribute("contenedor", "tiempoRestante")
                        infoTiempoRestante.style.display = "none"
                        contenedor.appendChild(infoTiempoRestante)

                        const infoResumenReserva = document.createElement("p")
                        infoResumenReserva.classList.add(
                            "padding6",
                            "textoCentrado"
                        )
                        infoResumenReserva.textContent = "Por favor, verifique que las fechas y los detalles del alojamiento son los que usted desea."
                        contenedor.appendChild(infoResumenReserva)

                        const contenedorFechas = document.createElement("div")
                        contenedorFechas.classList.add(
                            "blackgroundWhite30O",
                            "flexHorizontal",
                            "borderRadius14",
                            "padding14",
                            "flexJustificacion_spacearound"
                        )
                        contenedorFechas.setAttribute("contenedor", "fechas")
                        contenedor.appendChild(contenedorFechas)

                        const fechaEntradaContenedor = document.createElement("div")
                        fechaEntradaContenedor.classList.add(
                            "bloqueResumenDia",
                        )
                        contenedorFechas.appendChild(fechaEntradaContenedor)

                        const fechaEntradaTitulo = document.createElement("p")
                        fechaEntradaTitulo.classList.add(
                            "negrita",
                            "textoCentrado"
                        )
                        fechaEntradaTitulo.textContent = "Fecha de entrada"
                        fechaEntradaContenedor.appendChild(fechaEntradaTitulo)

                        const fechaEntradaUI = document.createElement("p")
                        fechaEntradaUI.setAttribute("data", "fechaEntrada")
                        fechaEntradaUI.classList.add(
                            "negrita",
                            "textoCentrado"
                        )
                        fechaEntradaUI.textContent = "data"
                        fechaEntradaContenedor.appendChild(fechaEntradaUI)

                        const fechaSalidaContenedor = document.createElement("div")
                        fechaSalidaContenedor.classList.add(
                            "bloqueResumenDia",
                        )
                        contenedorFechas.appendChild(fechaSalidaContenedor)

                        const fechaSalidaTitulo = document.createElement("p")
                        fechaSalidaTitulo.classList.add(
                            "negrita",
                            "textoCentrado"
                        )
                        fechaSalidaTitulo.textContent = "Fecha de salida"
                        fechaSalidaContenedor.appendChild(fechaSalidaTitulo)

                        const fechaSalidaUI = document.createElement("p")
                        fechaSalidaUI.setAttribute("data", "fechaSalida")
                        fechaSalidaUI.classList.add(
                            "negrita",
                            "textoCentrado"
                        )
                        fechaSalidaUI.textContent = "data"
                        fechaSalidaContenedor.appendChild(fechaSalidaUI)


                        const contenedorAlojamiento = document.createElement("div")
                        contenedorAlojamiento.setAttribute("data", "alojamiento")
                        contenedor.appendChild(contenedorAlojamiento)

                        const tituloAlojamiento = document.createElement("p")
                        tituloAlojamiento.classList.add(
                            "tituloBloqueSeccion"
                        )
                        tituloAlojamiento.textContent = "Alojamiento"
                        contenedor.appendChild(contenedorAlojamiento)


                        const contenedorServicios = () => {
                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("contenedor", "serviciosUI")
                            contenedor.classList.add(
                                "flexVertical",
                                "ocultoInicial",
                                "gap6"
                            )

                            const titulo = document.createElement("p")
                            titulo.classList.add(
                                "negrita",
                                "textoCentrado"
                            )
                            titulo.textContent = "Servicios adicionales"
                            contenedor.appendChild(titulo)

                            const info = document.createElement("p")
                            info.classList.add(
                                "padding14"
                            )
                            info.textContent = "Le invitamos también a conocer nuestra oferta de eventos privados, reservando el complejo completo para realizar eventos privados como cumpleaños, bodas o eventos de negocios..y poder así disfrutar de una privacidad máxima y mucha mas flexibilidad en las normas de funcionamiento, adaptándonos debidamente al motivo de su evento. Estos eventos pueden incluir servicios de comida, dj, actuaciones, personal de asistencia personalizada y equipamiento externo para el evento."
                            // contenedor.appendChild(info)


                            const contenedorServicios = document.createElement("div")
                            contenedorServicios.setAttribute("contenedor", "servicios")
                            contenedorServicios.classList.add(
                                "flexVertical",
                                "gap6",
                                "padding6",
                                "borderRadius16",
                                "borderGrey1"
                            )
                            contenedor.appendChild(contenedorServicios)

                            return contenedor
                        }

                        contenedor.appendChild(contenedorServicios())

                        const contenedorTitular = document.createElement("div")
                        contenedorTitular.classList.add(
                            "flexVertical",
                            "gap14",

                        )
                        contenedor.appendChild(contenedorTitular)

                        const tituloTitular = document.createElement("p")
                        tituloTitular.classList.add(
                            "textoCentrado",
                            "negrita"
                        )
                        contenedorTitular.appendChild(tituloTitular)

                        const infoTitular = document.createElement("p")
                        infoTitular.classList.add(
                            "padding6"
                        )
                        infoTitular.textContent = "Para garantizar una reserva exitosa, por favor sigue las siguientes instrucciones: Ingresa los datos del titular de la reserva. Si estás viajando desde fuera de Nicaragua, proporciona los detalles de tu pasaporte. Si eres residente de Nicaragua, proporciona tu número de identificación nacional. Es crucial asegurar la precisión de esta información para confirmar tu reserva de manera eficiente y proporcionarte una experiencia fluida. Agradecemos tu atención a estos detalles. ¡Gracias!"
                        // contenedorTitular.appendChild(infoTitular)

                        const tituloTitularInfo = document.createElement("p")
                        tituloTitularInfo.textContent = "Nombre completo del titular de la reserva"
                        tituloTitularInfo.classList.add(
                            "paddinHorizontal6"
                        )
                        contenedorTitular.appendChild(tituloTitularInfo)

                        const campoNombreTitular = document.createElement("input")
                        campoNombreTitular.classList.add(
                            "campoTitular"
                        )
                        campoNombreTitular.placeholder = "Nombre del titular de la reserva"
                        campoNombreTitular.setAttribute("campo", "nombreTitular")
                        campoNombreTitular.value = "test"
                        contenedorTitular.appendChild(campoNombreTitular)

                        const tituloPasaporteInfo = document.createElement("p")
                        tituloPasaporteInfo.textContent = "Pasaporte o documento nacional de identificación del titular de la reserva"
                        tituloPasaporteInfo.classList.add(
                            "paddinHorizontal6"
                        )
                        //contenedorTitular.appendChild(tituloPasaporteInfo)


                        const campoPasaporteTitular = document.createElement("input")
                        campoPasaporteTitular.classList.add(
                            "campoTitular"
                        )
                        campoPasaporteTitular.placeholder = "Pasaporte del titular de la reserva"
                        campoPasaporteTitular.setAttribute("campo", "pasaporteTitular")
                        //campoPasaporteTitular.value = ""
                        //contenedorTitular.appendChild(campoPasaporteTitular)

                        const tituloTelefonoInfo = document.createElement("p")
                        tituloTelefonoInfo.textContent = "Telefono del titular de la reserva"
                        tituloTelefonoInfo.classList.add(
                            "paddinHorizontal6"
                        )
                        contenedorTitular.appendChild(tituloTelefonoInfo)

                        const contenedorNumero = document.createElement("div")
                        contenedorNumero.classList.add(
                            "gridHorizontal2C_personalizado",
                        )
                        contenedorTitular.appendChild(contenedorNumero)


                        const listaCodigosInternacionales = this.listaCodigosInternacionalUI()
                        listaCodigosInternacionales.value = "+1"
                        contenedorNumero.appendChild(listaCodigosInternacionales)

                        const campoTelefonoTitular = document.createElement("input")
                        campoTelefonoTitular.style.borderBottomLeftRadius = "0px"
                        campoTelefonoTitular.style.borderTopLeftRadius = "0px"
                        campoTelefonoTitular.style.borderBottomRightRadius = "14px"
                        campoTelefonoTitular.style.borderTopRightRadius = "14px"
                        campoTelefonoTitular.classList.add(
                            "campoTitular"
                        )
                        campoTelefonoTitular.placeholder = "Teléfono del titular de la reserva"
                        campoTelefonoTitular.setAttribute("campo", "telefonoTitular")
                        campoTelefonoTitular.value = "3333"
                        contenedorNumero.appendChild(campoTelefonoTitular)

                        const tituloMailInfo = document.createElement("p")
                        tituloMailInfo.textContent = "Correo electrónico titular de la reserva"
                        tituloMailInfo.classList.add(
                            "paddinHorizontal6"
                        )
                        contenedorTitular.appendChild(tituloMailInfo)

                        const campoMailTitular = document.createElement("input")
                        campoMailTitular.classList.add(
                            "campoTitular"
                        )
                        campoMailTitular.placeholder = "Correo del titular de la reserva"
                        campoMailTitular.setAttribute("campo", "correoTitular")
                        campoMailTitular.value = "test@test.com"
                        contenedorTitular.appendChild(campoMailTitular)

                        contenedor.appendChild(this.descuentos.contenedorCodigoDescuentos.ui())


                        const contenedorTotal = document.createElement("div")
                        contenedorTotal.classList.add(
                            "flexVertical",
                            "gap14"
                        )
                        contenedor.appendChild(contenedorTotal)


                        const infoTotal = document.createElement("p")
                        infoTotal.classList.add(
                            "textoCentrado"
                        )
                        infoTotal.textContent = "Total a pagar:"
                        contenedorTotal.appendChild(infoTotal)


                        const totalData = document.createElement("p")
                        totalData.setAttribute("data", "totalFinal")
                        totalData.classList.add(
                            "textoCentrado",
                            "negrita",
                            "textSize16"
                        )
                        totalData.textContent = "Calculando..."
                        contenedorTotal.appendChild(totalData)

                        const botonDesplegarDesglose = document.createElement("p")
                        botonDesplegarDesglose.setAttribute("boton", "desplegarDesglose")
                        botonDesplegarDesglose.style.display = "none"
                        botonDesplegarDesglose.classList.add(
                            "textoCentrado",
                            "botonV1",
                            "comportamientoBoton"
                        )

                        botonDesplegarDesglose.textContent = "Ver el desglose detallado del total"
                        botonDesplegarDesglose.addEventListener("click", this.desplegarDesgloseFinancieroBajoDemanda)
                        contenedorTotal.appendChild(botonDesplegarDesglose)

                        const infoPreConfirmar = document.createElement("p")
                        infoPreConfirmar.classList.add(
                            "padding14"
                        )
                        infoPreConfirmar.textContent = "Para continuar con el proceso de reserva, haz clic en el botón de abajo. Una vez verifiquemos las fechas solicitadas. Nos pondremos en contacto con usted, por mail o por teléfono para comunicarle el estado de su reserva. Posteriormente, abriremos un plazo de 48 horas para queda realizar el depósito. Si pasado este plazo no se ha realizado el depósito no podemos garantizar su reserva. Si tiene algún problema o duda, póngase en contacto con nosotros."
                        contenedor.appendChild(infoPreConfirmar)

                        const infoAceptacion = document.createElement("p")
                        infoAceptacion.classList.add(
                            "padding14"
                        )
                        infoAceptacion.textContent = "Preconfirmar esta reserva implica la aceptación de nuestras políticas de privacidad y el consentimiento para su aplicación, así como nuestras políticas de cancelación de la reserva. Por favor, lea detenidamente toda la información sobre nuestras políticas de privacidad, el uso de cookies y las condiciones de uso haciendo clic aquí."
                        contenedor.appendChild(infoAceptacion)

                        const portilicasCancelacion = document.createElement("details")
                        portilicasCancelacion.classList.add(
                            "areaSinDecoracionPredeterminada",
                            "padding14",
                            "backgroundGrey1",
                            "borderRadius14"
                        )
                        portilicasCancelacion.textContent = `Para recibir un reembolso completo deberas cancelar al menos 30 dias antes de la llegada. Sí entre siete y 30 días antes de que empieze la estancía deberas pagar un importe correspondiente al 50% de las noches reservadas. Si cancelas cuando faltan menos de 7 días para que comience la estancia, deberas pagar el 100% de todas las noches.`
                        contenedor.appendChild(portilicasCancelacion)

                        const tituloPoliticasCancelacion = document.createElement("summary")
                        tituloPoliticasCancelacion.textContent = "Ver politícas de cancelación"
                        portilicasCancelacion.appendChild(tituloPoliticasCancelacion)

                        const portilicasPrivacida = document.createElement("a")
                        portilicasPrivacida.classList.add(
                            "areaSinDecoracionPredeterminada",
                            "padding14"
                        )
                        portilicasPrivacida.href = "/politicas/privacidad"
                        portilicasPrivacida.target = "_blank"
                        portilicasPrivacida.textContent = "Ver políticas de privacidad, condiciones de uso y gestión de cookies. (Se abrirá otra ventana del navegador.)"
                        contenedor.appendChild(portilicasPrivacida)

                        const botonConfirmar = document.createElement("div")
                        botonConfirmar.classList.add(
                            "blackgroundWhite30O",
                            "textoCentrado",
                            "borderRadius14",
                            "padding14",
                            "comportamientoBoton",
                            "negrita",
                            "noSelecionable",
                            "retonDefault"
                        )
                        botonConfirmar.setAttribute("boton", "preConfirmar")
                        botonConfirmar.textContent = "Continuar con el proceso de reserva"
                        botonConfirmar.addEventListener("click", () => {
                            this.preConfirmar()
                        })
                        contenedor.appendChild(botonConfirmar)
                        return contenedor

                    },
                    bloqueAlojamientoUI: async function (data) {
                        const instanciaUID = data.instanciaUID
                        const reservaLocal = data.reservaLocal
                        const fechaEntrada = reservaLocal.fechaEntrada
                        const fechaSalida = reservaLocal.fechaSalida
                        const alojamiento = reservaLocal.alojamiento
                        const uiDestinno = document.querySelector(`[instanciaUID="${instanciaUID}"] [data=alojamiento]`)

                        const spinnerSimple = casaVitini.ui.componentes.spinnerSimple()
                        uiDestinno.appendChild(spinnerSimple)

                        const respuestaServidor = await casaVitini.shell.servidor({
                            zona: "plaza/reservas/apartamentosDisponiblesPublico",
                            fechaEntrada: fechaEntrada,
                            fechaSalida: fechaSalida
                        })

                        if (!document.querySelector(`[instanciaUID="${instanciaUID}"]`)) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor.ok) {
                            const apartamentosDisponibles = respuestaServidor?.ok.apartamentosDisponibles
                            const contenedorFinanciero = respuestaServidor?.ok.contenedorFinanciero
                            const complementosAlojamiento = respuestaServidor?.ok.complementosAlojamiento

                            uiDestinno.innerHTML = null
                            const contenedorUI = document.createElement("div")
                            contenedorUI.classList.add(
                                "flexVertical",
                                "gap14",
                            )
                            uiDestinno.appendChild(contenedorUI)
                            for (const [apartamentoIDV, contenedor] of Object.entries(alojamiento)) {
                                if (!apartamentosDisponibles.hasOwnProperty(apartamentoIDV)) {
                                    delete alojamiento[apartamentoIDV]
                                    continue
                                }

                                const apartamentoUI = apartamentosDisponibles[apartamentoIDV].apartamentoUI
                                const complementosAlojamientoArray = complementosAlojamiento[apartamentoIDV]
                                const habitaciones = apartamentosDisponibles[apartamentoIDV].habitaciones




                                const bloqueApartamento = document.createElement("div")
                                bloqueApartamento.setAttribute("class", "bloqueApartamenteo")
                                bloqueApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                const tituloApartamentoComponenteUI = document.createElement("p")
                                tituloApartamentoComponenteUI.setAttribute("class", "tituloMedia")
                                tituloApartamentoComponenteUI.setAttribute("apartamentoUI", apartamentoUI)
                                tituloApartamentoComponenteUI.textContent = apartamentoUI
                                bloqueApartamento.appendChild(tituloApartamentoComponenteUI)


                                const contenedorComplementos = document.createElement("div")
                                contenedorComplementos.classList.add(
                                    "flexVertical", "gap6", "padding6", "borderRadius18", "backgroundGrey1"
                                )

                                const tituloComplementos = document.createElement("p")
                                tituloComplementos.classList.add("padding6", "textoCentrado")
                                tituloComplementos.textContent = "Complementos del alojamiento"
                                contenedorComplementos.appendChild(tituloComplementos)

                                complementosAlojamientoArray.forEach((comp) => {
                                    const complementoUI = this.componentesAlojamiento.componentesUI(comp)
                                    contenedorComplementos.appendChild(complementoUI)
                                })

                                if (complementosAlojamientoArray.length > 0) {
                                    bloqueApartamento.appendChild(contenedorComplementos)
                                }








                                const contenedorHabitaciones = document.createElement("div")
                                contenedorHabitaciones.classList.add("flexVertical")
                                bloqueApartamento.appendChild(contenedorHabitaciones)

                                const habitacionesArray = Object.entries(habitaciones);
                                const ultimaIteracion = habitacionesArray.length - 1;

                                for (let i = 0; i < habitacionesArray.length; i++) {
                                    const [habitacionIDV, contenedor] = habitacionesArray[i];
                                    const habitacionUI = contenedor.habitacionUI
                                    const configuracionesCama = contenedor.configuraciones
                                    const bloqueHabitaciones = document.createElement("div")
                                    bloqueHabitaciones.classList.add("plaza_alojamiento_resumenReserva_bloqueHabitaciones")
                                    const bloqueHabitacion = document.createElement("div")
                                    bloqueHabitacion.setAttribute("class", "plaza_alojamiento_resumenReserva_bloqueHabitacion")
                                    bloqueHabitacion.setAttribute("habitacionIDV", habitacionIDV)
                                    contenedorHabitaciones.appendChild(bloqueHabitacion)
                                    const tituloHabitacion = document.createElement("p")
                                    tituloHabitacion.setAttribute("class", "tituloBloqueHabitacion")
                                    tituloHabitacion.setAttribute("habitacionUI", habitacionUI)
                                    tituloHabitacion.textContent = habitacionUI
                                    bloqueHabitacion.appendChild(tituloHabitacion)
                                    if (Object.entries(configuracionesCama).length > 1) {
                                        const selectorCama = document.createElement("select")
                                        selectorCama.classList.add("selectorCama")
                                        selectorCama.setAttribute("componente", "selectorCama")
                                        selectorCama.addEventListener("change", (e) => {
                                            const apartamentoIDV = e.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV")
                                            const habitacionIDV = e.target.closest("[habitacionIDV]").getAttribute("habitacionIDV")
                                            const camaIDV = e.target.value
                                            const camaUI = e.target.options[e.target.selectedIndex].getAttribute("camaUI");

                                            const reservaIN = JSON.parse(sessionStorage.getItem("preReservaLocal"))
                                            const apartamentoObjeto = reservaIN.alojamiento[apartamentoIDV]
                                            if (!apartamentoObjeto.hasOwnProperty("habitaciones")) {
                                                apartamentoObjeto.habitaciones = {}
                                            }
                                            const habitaciones = apartamentoObjeto.habitaciones
                                            if (!habitaciones.hasOwnProperty(habitacionIDV)) {
                                                habitaciones[habitacionIDV] = {}
                                            }
                                            const habitacion = habitaciones[habitacionIDV]
                                            habitacion.camaSeleccionada = {
                                                camaIDV: camaIDV,
                                                //camaUI: camaUI
                                            }
                                            const reservaOUT = JSON.stringify(reservaIN)
                                            sessionStorage.setItem("preReservaLocal", reservaOUT)
                                        })
                                        const opcionPreterminada = document.createElement("option");
                                        opcionPreterminada.value = "";
                                        opcionPreterminada.selected = "true"
                                        opcionPreterminada.disabled = "true"
                                        opcionPreterminada.text = "Seleccionar tipo de cama";
                                        selectorCama.add(opcionPreterminada);
                                        for (const configuracionCama of Object.entries(configuracionesCama)) {
                                            const camaIDV = configuracionCama[1].camaIDV
                                            const camaUI = configuracionCama[1].camaUI
                                            const capacidad = configuracionCama[1].capacidad
                                            const opcion = document.createElement("option");
                                            opcion.value = camaIDV;
                                            opcion.setAttribute("camaUI", camaUI)
                                            opcion.text = camaUI + ` (Capacidad: ${capacidad})`;
                                            selectorCama.add(opcion);
                                        }
                                        bloqueHabitacion.appendChild(selectorCama)
                                    } else {
                                        const configuracionUnica = Object.entries(configuracionesCama)
                                        const camaUI = configuracionUnica[0][1].camaUI
                                        const camaIDV = configuracionUnica[0][1].camaIDV

                                        const camaUnica = document.createElement("div")
                                        camaUnica.classList.add("plaza_alojamiento_resumenReserva_camaUnicaInfo")
                                        if (i === ultimaIteracion) {
                                            camaUnica.style.paddingBottom = "4px"
                                        }
                                        camaUnica.textContent = camaUI
                                        bloqueHabitacion.appendChild(camaUnica)
                                        const reservaIN = JSON.parse(sessionStorage.getItem("preReservaLocal"))
                                        const alojamiento = reservaIN.alojamiento[apartamentoIDV]
                                        if (!alojamiento.hasOwnProperty("habitaciones")) {
                                            alojamiento.habitaciones = {}
                                        }
                                        const habitaciones = alojamiento.habitaciones
                                        if (!habitaciones.hasOwnProperty(habitacionIDV)) {
                                            habitaciones[habitacionIDV] = {}
                                        }
                                        const habitacion = habitaciones[habitacionIDV]
                                        habitacion.camaSeleccionada = {
                                            camaIDV: camaIDV,
                                            camaUI: camaUI
                                        }
                                        const reservaOUT = JSON.stringify(reservaIN)
                                        //  sessionStorage.setItem("preReservaLocal", reservaOUT)
                                    }
                                }
                                contenedorUI.appendChild(bloqueApartamento)
                            }
                        }
                    },
                    preConfirmar: async function () {
                        const main = document.querySelector("main")
                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                        const contenedor = ui.querySelector("[componente=contenedor]")
                        main.appendChild(ui)

                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                        contenedor.appendChild(spinner)

                        const reservaPublica = sessionStorage.getItem("preReservaLocal") ? JSON.parse(sessionStorage.getItem("preReservaLocal")) : {};


                        const nombreTitular = document.querySelector("[campo=nombreTitular]").value
                        //const pasaporteTitular = document.querySelector("[campo=pasaporteTitular]").value
                        const correoTitular = document.querySelector("[campo=correoTitular]").value
                        const codigoInternacional = document.querySelector("[campo=codigoInternacional]").value
                        const telefonoTitular = document.querySelector("[campo=telefonoTitular]").value
                        reservaPublica.titular = {
                            nombreTitular: nombreTitular,
                            //   pasaporteTitular: pasaporteTitular,
                            correoTitular: correoTitular,
                            telefonoTitular: telefonoTitular,
                            codigoInternacional: codigoInternacional
                        }

                        // const serviciosSelecionados = []
                        // document.querySelectorAll(`[servicioUID][estado="activado"]`).forEach((servicioUISelecionado) => {
                        //     const servicioUID = servicioUISelecionado.getAttribute("servicioUID")
                        //     const servicioUI = servicioUISelecionado.querySelector("[data=servicioUI]").textContent
                        //     serviciosSelecionados.push({
                        //         servicioUID,
                        //         servicioUI
                        //     })
                        // })
                        // if (serviciosSelecionados.length === 0) {
                        //     delete reservaPublica.servicios
                        // } else {
                        //     reservaPublica.servicios = serviciosSelecionados
                        // }

                        const codigosRenderizados = []
                        document.querySelectorAll("[contenedor=ofertasComprobadas] [codigosUID]").forEach((ofertaRenderizada) => {
                            const codigosUID = JSON.parse(ofertaRenderizada.getAttribute("codigosUID"))
                            const descuentoUI = ofertaRenderizada.querySelector("[data=descuentoUI]").textContent
                            const ofertaUID = ofertaRenderizada.getAttribute("ofertaUID")

                            codigosRenderizados.push({
                                codigosUID,
                                descuentoUI,
                                ofertaUID
                            })
                        })

                        if (codigosRenderizados.length === 0) {
                            delete reservaPublica.codigosDescuento
                        } else {
                            reservaPublica.codigosDescuento = codigosRenderizados
                        }

                        const respuestaServidor = await casaVitini.shell.servidor({
                            zona: "plaza/reservas/preConfirmarReserva",
                            reserva: reservaPublica
                        })
                        if (respuestaServidor?.error) {

                            if (respuestaServidor?.contenedorErrorInfoObsoleta) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.vistas.alojamiento.resumen.errorUI(respuestaServidor?.contenedorErrorInfoObsoleta)
                                this.actualizarPrecioEnUI({
                                    aplicarUIData: "si"
                                })

                            } else {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                            }

                        } else if (respuestaServidor.ok) {
                            const reservaConfirmada = respuestaServidor.detalles


                            reservaConfirmada.pdf = respuestaServidor.pdf
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            sessionStorage.removeItem("preReservaLocal");
                            localStorage.setItem("reservaConfirmada", JSON.stringify(reservaConfirmada))

                            return casaVitini.shell.navegacion.controladorVista({
                                vista: "/alojamiento/reserva_confirmada",
                            })


                            document.documentElement.scrollTop = 0;
                            document.body.scrollTop = 0;
                            const url = "/alojamiento/reserva_confirmada"
                            const estado = {
                                zona: url,
                                estadoInternoZona: "estado",
                                tipoCambio: "total"
                            }
                            const titulo = "Casa Vitini"
                            window.history.replaceState(estado, titulo, url);
                            return casaVitini.ui.vistas.alojamiento.reservaConfirmada.ui()
                        }
                    },
                    // confirmarReserva: async () => {
                    //     const reservaLocal = JSON.parse(sessionStorage.getItem("reserva"))
                    //     const Peticion = {
                    //         zona: "plaza/reservas/confirmarReserva",
                    //         reserva: reservaLocal
                    //     };
                    //     const respuestaServidor = await casaVitini.shell.servidor(Peticion)
                    //     if (respuestaServidor?.OK) {
                    //         window.location.href = respuestaServidor?.temaPago;
                    //     }
                    // },
                    seleccionarCama: (datosCama) => {
                        const apartamentoIDV = datosCama.apartamentoIDV
                        const habitacionIDV = datosCama.habitacionIDV
                        const camaIDV = datosCama.camaIDV
                        const selectorApartamento = document.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                        selectorApartamento.setAttribute("estadoApartamento", "seleccionado")
                        const selectorSelectorApartamento = selectorApartamento.querySelector("[componente=selectorApartamento]")
                        selectorSelectorApartamento.textContent = "Apartamento seleccionado"
                        const selectorInfoHabitacion = selectorApartamento
                            .querySelector(`[habitacionIDV='${habitacionIDV}']`)
                            .querySelector("[componente=infoSeleccionCama]")
                        const botonesCamasPorHabitacion = selectorApartamento
                            .querySelector(`[habitacionIDV='${habitacionIDV}']`)
                            .querySelectorAll("[componente=botonSelectorCama]")
                        const botonCama = selectorApartamento
                            .querySelector(`[habitacionIDV="${habitacionIDV}"]`)
                            .querySelector(`[camaIDV="${camaIDV}"]`)
                        const estadoCama = selectorApartamento
                            .querySelector(`[habitacionIDV="${habitacionIDV}"]`)
                            .querySelector(`[camaIDV="${camaIDV}"]`)
                            ?.getAttribute("estadoCama")
                        if (estadoCama === "camaSeleccionada") {
                            botonCama.removeAttribute("style")
                            botonCama.removeAttribute("estadoCama")
                            selectorInfoHabitacion.classList.add("parpadea")
                        } else {
                            botonesCamasPorHabitacion.forEach((botonCamaEnHabitacion) => {
                                botonCamaEnHabitacion.removeAttribute("style")
                                botonCamaEnHabitacion.removeAttribute("estadoCAma")
                            })
                            botonCama.style.background = "green"
                            botonCama.setAttribute("estadoCama", "camaSeleccionada")
                            selectorInfoHabitacion.classList.remove("parpadea")
                        }
                    },
                    obtenerContenedorFinanciero: async (data) => {
                        const reservaNoConfirmada = sessionStorage.getItem("preReservaLocal") ? JSON.parse(sessionStorage.getItem("preReservaLocal")) : null;

                        const aplicarUIData = data?.aplicarUIData
                        if (aplicarUIData === "si") {
                            const complementosAlojamientoSeleccionados = []
                            document.querySelectorAll(`[complementoUID][estado="activado"]`).forEach((e) => {
                                const complementoUID = e.getAttribute("complementoUID")
                                const complementoUI = e.querySelector("[data=complementoUI]").textContent
                                complementosAlojamientoSeleccionados.push({
                                    complementoUID,
                                    complementoUI
                                })
                            })
                            if (complementosAlojamientoSeleccionados.length === 0) {
                                delete reservaNoConfirmada.complementosAlojamiento
                            } else {
                                reservaNoConfirmada.complementosAlojamiento = complementosAlojamientoSeleccionados
                            }


                            const serviciosSelecionados = []
                            document.querySelectorAll(`[servicioUID][estadoServicio=selCompleta]`).forEach((servicioUISelecionado) => {
                                const servicioUID = servicioUISelecionado.getAttribute("servicioUID")
                                const grupoDeOpciones = servicioUISelecionado.querySelector("[area=grupoOpciones]").querySelectorAll("[componente=grupo]")
                                const servicioSeleccionado = {
                                    servicioUID,
                                    opcionesSeleccionadas: {}
                                }
                                const opcionesSeleccionadas = servicioSeleccionado.opcionesSeleccionadas
                                grupoDeOpciones.forEach((grupo) => {
                                    const grupoIDV = grupo.getAttribute("grupoIDV")
                                    opcionesSeleccionadas[grupoIDV] = []
                                    const opcionesDelGrupoSeleccionadas = grupo.querySelectorAll("[selector=opcion][estado=activado]")
                                    opcionesDelGrupoSeleccionadas.forEach(opcionSel => {
                                        const opcionIDV = opcionSel.getAttribute("opcionIDV")
                                        opcionesSeleccionadas[grupoIDV].push(opcionIDV)
                                    })
                                })
                                serviciosSelecionados.push(servicioSeleccionado)
                            })

                            if (serviciosSelecionados.length === 0) {
                                delete reservaNoConfirmada.servicios
                            } else {
                                reservaNoConfirmada.servicios = serviciosSelecionados
                            }

                            const codigosRenderizados = []
                            document.querySelectorAll("[contenedor=ofertasComprobadas] [ofertaUID]").forEach((ofertaRenderizada) => {
                                const ofertaUID = ofertaRenderizada.getAttribute("ofertaUID")
                                const codigosUID = JSON.parse(ofertaRenderizada.getAttribute("codigosUID")) || []
                                const descuentoUI = ofertaRenderizada.querySelector("[data=descuentoUI]").textContent

                                codigosRenderizados.push({
                                    ofertaUID,
                                    codigosUID,
                                    descuentoUI
                                })
                            })
                            if (codigosRenderizados.length === 0) {
                                delete reservaNoConfirmada.codigosDescuento
                            } else {
                                reservaNoConfirmada.codigosDescuento = codigosRenderizados
                            }
                        }


                        if (reservaNoConfirmada) {
                            const transaccion = {
                                zona: "componentes/precioReservaPublica",
                                reserva: reservaNoConfirmada
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                            return respuestaServidor
                        }

                    },
                    actualizarPrecioEnUI: async function (data) {
                        const aplicarUIData = data?.aplicarUIData
                        if (aplicarUIData !== "no" && aplicarUIData !== "si") {
                            const m = "aplicarUIData tiene que estar ne si o no"
                            return casaVitini.ui.componentes.advertenciaInmersiva(m)
                        }
                        const selectorBotonDesplegarDesglose = document.querySelector("[boton=desplegarDesglose]")
                        if (selectorBotonDesplegarDesglose) {
                            selectorBotonDesplegarDesglose.style.transition = "all 0ms linear"
                            selectorBotonDesplegarDesglose.style.opacity = "0"
                            selectorBotonDesplegarDesglose.style.pointerEvents = "none"
                        }

                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const selectorTotalFinal = document.querySelector("[data=totalFinal]")
                        if (selectorTotalFinal) {
                            selectorTotalFinal.setAttribute("instanciaUID", instanciaUID)
                            selectorTotalFinal.textContent = "Actualizando el total..."
                        }

                        const contenedorFinanciero = await casaVitini.ui.vistas.alojamiento.resumen.obtenerContenedorFinanciero({
                            aplicarUIData: aplicarUIData
                        })

                        if (contenedorFinanciero?.error) {
                            return casaVitini.ui.componentes.advertenciaInmersiva(contenedorFinanciero?.error)
                        }
                        const selectorTotalDestino = document.querySelector(`[data=totalFinal][instanciaUID="${instanciaUID}"]`)
                        if (selectorTotalDestino) {
                            const reservaNoConfirmada = sessionStorage.getItem("preReservaLocal") ? JSON.parse(sessionStorage.getItem("preReservaLocal")) : null;
                            const control = contenedorFinanciero?.control

                            const serviciosSiReconocidos = control?.servicios?.serviciosSiReconocidos || []
                            const serviciosNoReconocidos = control?.servicios?.serviciosNoReconocidos || []
                            const codigosDescuentosSiReconocidos = control?.codigosDescuentos?.codigosDescuentosSiReconocidos || []
                            const codigosDescuentosNoReconocidos = control?.codigosDescuentos?.codigosDescuentosNoReconocidos || []

                            const complementosSiReconocidos = control?.complementosAlojamiento?.complementosSiReconocidos || []
                            const complementosNoReconocidos = control?.complementosAlojamiento?.complementosNoReconocidos || []

                            codigosDescuentosSiReconocidos.forEach((contenedor) => {

                                const codigosUID = contenedor.codigosUID
                                codigosUID.forEach((codigoUID, i) => {
                                    codigosUID[i] = codigoUID
                                })
                            })
                            codigosDescuentosNoReconocidos.forEach((contenedor, i) => {
                                const codigosUID = contenedor.codigosUID
                                codigosUID.forEach((codigoUID, i) => {
                                    codigosUID[i] = codigoUID
                                })
                            })
                            if (serviciosSiReconocidos.length > 0) {
                                reservaNoConfirmada.servicios = serviciosSiReconocidos
                            } else {
                                delete reservaNoConfirmada?.servicios
                            }
                            if (codigosDescuentosSiReconocidos.length > 0) {
                                reservaNoConfirmada.codigosDescuento = codigosDescuentosSiReconocidos
                            } else {
                                delete reservaNoConfirmada.codigosDescuento
                            }

                            if (complementosSiReconocidos.length > 0) {
                                reservaNoConfirmada.complementosAlojamiento = complementosSiReconocidos.map(c => {
                                    return {
                                        complementoUI: c.complementoUI,
                                        complementoUID: c.complementoUID
                                    }
                                })
                            } else {
                                delete reservaNoConfirmada?.complementosAlojamiento
                            }

                            complementosNoReconocidos.forEach((contenedor) => {
                                const complementoUID = contenedor.complementoUID
                                document.querySelector(`[complementoUID="${complementoUID}"]`)?.remove()
                            })
                            complementosSiReconocidos.forEach((contenedor) => {
                                const complementoUID = contenedor.complementoUID
                                const complementoUI = document.querySelector(`[complementoUID="${complementoUID}"]`)
                                complementoUI.setAttribute("estado", "activado")
                                complementoUI.querySelector("[componente=indicadorSelecion]").style.background = "rgb(0, 255, 0)"

                            })

                            const serviciosObsoletos = []


                            serviciosNoReconocidos.forEach((contenedor) => {
                                const servicioUID = contenedor.servicioUID
                                const servicioUI = document.querySelector(`[contenedor=servicios] [servicioUID="${servicioUID}"]`)
                                if (servicioUI) {
                                    const tituloServicioObsoleto = servicioUI.querySelector("[data=servicioUI]").textContent
                                    serviciosObsoletos.push(tituloServicioObsoleto)
                                }
                                servicioUI?.remove()
                            })

                            if (serviciosObsoletos.length > 0) {
                                this.servicios.infoServiciosObsoletos(serviciosObsoletos)
                            }

                            serviciosSiReconocidos.forEach((contenedor) => {
                                const servicioUID = contenedor.servicioUID
                                const opcionesSeleccionadas = contenedor.opcionesSeleccionadas
                                const servicioUI = document.querySelector(`[contenedor=servicios] [servicioUID="${servicioUID}"]`)
                                servicioUI.setAttribute("estadoServicio", "selCompleta")
                                servicioUI.querySelector("[componente=indicadorSelecion]").style.background = "rgb(0, 255, 0)"

                                Object.entries(opcionesSeleccionadas).forEach(([grupoIDV, contenedorSel]) => {
                                    const selectorGrupo = servicioUI.querySelector(`[grupoIDV="${grupoIDV}"]`)
                                    contenedorSel.forEach(opcionIDV => {
                                        const selectorOpcion = selectorGrupo.querySelector(`[opcionIDV="${opcionIDV}"]`)
                                        selectorOpcion.setAttribute("estado", "activado")
                                        selectorOpcion.querySelector("[componente=indicadorSelecion]").style.background = "rgb(0, 255, 0)"
                                    })
                                })
                            })
                            const selectorServicioUI = document.querySelector("[componente=espacioConfirmarReserva] [contenedor=serviciosUI]")
                            const serviciosUI = selectorServicioUI.querySelectorAll(`[servicioUID]`)

                            if (serviciosUI.length === 0) {
                                selectorServicioUI.classList.add("ocultoInicial")
                            }


                            codigosDescuentosNoReconocidos.forEach((contenedor) => {
                                const codigoUID = contenedor.codigoUID
                                document.querySelector(`[contenedor=ofertasComprobadas] [codigoUID="${codigoUID}"]`)?.remove()
                            })
                            sessionStorage.setItem("preReservaLocal", JSON.stringify(reservaNoConfirmada))

                            const totalFinal = contenedorFinanciero.desgloseFinanciero.global.totales.totalFinal
                            selectorTotalDestino.textContent = totalFinal + "$"
                            selectorTotalDestino.setAttribute("contenedorFinanciero", JSON.stringify(contenedorFinanciero.desgloseFinanciero))
                            selectorBotonDesplegarDesglose.removeAttribute("style")
                        }
                    },
                    limpiezaObjetoLocalPreEnvio: () => {
                        const reservaNoConfirmada = sessionStorage.getItem("preReservaLocal") ? JSON.parse(sessionStorage.getItem("preReservaLocal")) : {};
                        if (reservaNoConfirmada.hasOwnProperty("alojamiento")) {
                            for (const alojamiento of Object.values(reservaNoConfirmada.alojamiento)) {
                                const habitaciones = alojamiento.habitaciones
                                if (habitaciones) {
                                    for (const habitacion of Object.values(habitaciones)) {
                                        delete habitacion.configuraciones
                                    }
                                }

                            }
                        }
                        return reservaNoConfirmada

                    },
                    controlPrevioEnvioDatos: () => {
                        try {

                            const selectoresCamas = document.querySelectorAll("[componente=selectorCama]")
                            selectoresCamas.forEach((selectorCama) => {
                                if (!selectorCama.value) {
                                    const apartamentoUI = selectorCama.closest("[apartamentoIDV]")
                                        .querySelector("[apartamentoUI]")
                                        .getAttribute("apartamentoUI")
                                    const habitacionUI = selectorCama.closest("[habitacionIDV]")
                                        .querySelector("[habitacionUI]")
                                        .getAttribute("habitacionUI")
                                    const errorCamas = `Atención, es necesario que seleccione qué tipo de cama quiere para la ${habitacionUI} del ${apartamentoUI}.`
                                    throw new Error(errorCamas)
                                }
                            })

                            const nombreTitular = document.querySelector("[campo=nombreTitular]").value
                            const pasaporteTitular = document.querySelector("[campo=pasaporteTitular]").value
                            const telefonoTitular = document.querySelector("[campo=telefonoTitular]").value
                            let correoTitular = document.querySelector("[campo=correoTitular]").value
                            const filtroCorreoElectronico = /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z0-9]+$/;
                            correoTitular = correoTitular
                                .trim()
                                .toLowerCase()
                            const filtroTelefono = /[^0-9+\s]/
                            if (!nombreTitular) {
                                const errorCamas = `Por favor escriba el nombre completo del titular de la reserva`
                                throw new Error(errorCamas)
                            } else if (!pasaporteTitular) {
                                const errorCamas = `Por favor escriba el pasaporte completo del titular de la reserva`
                                throw new Error(errorCamas)
                            }
                            else if (!telefonoTitular || filtroTelefono.test(telefonoTitular)) {
                                const errorTelefono = "En el campo teléfono solo pueden contener números y el símbolo + para el código internacional. Revisa el campo teléfono por favor.";
                                throw new Error(errorTelefono);
                            }
                            else if (!correoTitular || !filtroCorreoElectronico.test(correoTitular)) {
                                const error = "El campo de correo electrónico no cumple con el formato esperado, se espera un formato tal que así: ejemplo@servidor.com"
                                throw new Error(error)
                            }
                        } catch (errorCapturado) {
                            throw errorCapturado
                        }
                    },
                    desplegarDesgloseFinancieroBajoDemanda: async () => {
                        const main = document.querySelector("main")
                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                        const instanciaUID = ui.getAttribute("instanciaUID")
                        const contenedor = ui.querySelector("[componente=contenedor]")
                        main.appendChild(ui)

                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                        contenedor.appendChild(spinner)




                        contenedor.innerHTML = null

                        const titulo = document.createElement("div")
                        titulo.classList.add(
                            "tituloGris",
                            "padding10",
                            "textoCentrado"
                        )
                        titulo.textContent = "Desglose del resumen su reserva (Su reserva aun no esta confirmada)"
                        contenedor.appendChild(titulo)


                        const testInfo = document.createElement("div")
                        testInfo.classList.add(
                            "textoCentrado", "padding10"
                        )
                        testInfo.textContent = "Aquí tienes el desglose de importe total de la reserva, detallando los cargos, impuestos y conceptos asociados."
                        contenedor.appendChild(testInfo)

                        const botonCerrar = document.createElement("div")
                        botonCerrar.classList.add("botonV1")
                        botonCerrar.textContent = "Cerrar y volver"
                        botonCerrar.setAttribute("boton", "cancelar")
                        botonCerrar.addEventListener("click", () => {
                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        })
                        contenedor.appendChild(botonCerrar)
                        const desgloseFinanciero = JSON.parse(document.querySelector("[contenedorFinanciero]").getAttribute("contenedorFinanciero"))

                        casaVitini.ui.componentes.contenedorFinanciero.constructor({
                            destino: `[instanciaUID="${instanciaUID}"] [componente=contenedor]`,
                            contenedorFinanciero: { desgloseFinanciero },
                            modoUI: "plaza"
                        })
                        const contenedorFinancieroUI = ui.querySelector("[contenedor=financiero]")
                        contenedorFinancieroUI.classList.add(
                            "borderRadius10"
                        )

                        const botonCerrarInferior = document.createElement("div")
                        botonCerrarInferior.classList.add("botonV1")
                        botonCerrarInferior.textContent = "Cerrar y volver"
                        botonCerrarInferior.setAttribute("boton", "cancelar")
                        botonCerrarInferior.addEventListener("click", () => {
                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        })
                        contenedor.appendChild(botonCerrarInferior)
                    },
                    errorUI: (data) => {

                        const arrayInfoObsoleta = data
                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = ui.querySelector("[componente=constructor]")

                        const contenedor = ui.querySelector("[componente=contenedor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = "No se ha confirmado la reserva"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = "Durante la realización de su reserva, algunos elementos han dejado de estar disponibles. A continuación, se detallan los elementos afectados. Asimismo, se ha actualizado su resumen, eliminando los elementos que ya no están disponibles, y se ha ajustado el precio en consecuencia."

                        const dic = {
                            servicios: "servicioUI",
                            codigosDescuento: "descuentoUI"
                        }
                        const contenedorDesgloses = document.createElement("div")
                        contenedorDesgloses.classList.add(
                            "flexVertical",
                            "gap6"
                        )
                        contenedor.appendChild(contenedorDesgloses)


                        arrayInfoObsoleta.forEach((c) => {
                            const infoError = c.error
                            const lista = c.lista
                            const tipo = c.tipo

                            const contenedorUI = document.createElement("div")
                            contenedorUI.classList.add(
                                "flexVertical",
                                "padding12",
                                "backgroundGrey1",
                                "borderRadius12"
                            )
                            contenedorDesgloses.appendChild(contenedorUI)

                            const infoUI = document.createElement("p")
                            infoUI.textContent = infoError
                            contenedorUI.appendChild(infoUI)

                            const contenedorLista = document.createElement("div")
                            contenedorLista.classList.add(
                                "flexVertical"
                            )
                            contenedorUI.appendChild(contenedorLista)


                            lista.forEach((detalleLista) => {

                                const tituloUI = detalleLista[dic[tipo]]

                                const elementoUI = document.createElement("p")
                                elementoUI.classList.add(
                                    "negrita"
                                )
                                elementoUI.textContent = tituloUI
                                contenedorLista.appendChild(elementoUI)
                            })


                        })


                        constructor.querySelector("[boton=aceptar]").remove()

                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Volver al resumen"

                        document.querySelector("main").appendChild(ui)
                    },
                    descuentos: {




















































































                        contenedorCodigoDescuentos: {
                            ui: function () {
                                const contenedor = document.createElement("div")
                                contenedor.setAttribute("area", "codigosDescuentos")
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "borderGrey1",
                                    "padding6",
                                    "borderRadius24"
                                )
                                const ofertasComprobadas = document.createElement("div")
                                ofertasComprobadas.setAttribute("contenedor", "ofertasComprobadas")
                                ofertasComprobadas.classList.add(
                                    "flexVertical",
                                    "gap6"

                                )
                                contenedor.appendChild(ofertasComprobadas)
                                const campos = document.createElement("div")
                                campos.setAttribute("contenedor", "camposDescuentos")
                                campos.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                campos.appendChild(this.estadoInicial())
                                contenedor.appendChild(campos)
                                return contenedor
                            },
                            estadoInicial: function () {
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                                const contenedor = document.createElement("div")
                                contenedor.setAttribute("instanciaUID", instanciaUID)
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )

                                const info = document.createElement("div")
                                info.classList.add(
                                    "padding6",
                                    "textoCentrado"
                                )
                                info.textContent = "Si tienes un código de descuento, insértalo aquí para agregar el descuento a tu reserva. Una vez comprobado el código, confirma tu reserva."
                                contenedor.appendChild(info)

                                const campoUI = document.createElement("input")
                                campoUI.setAttribute("campo", "codigoDescuento")
                                campoUI.classList.add(
                                    "padding12",
                                    "borderRadius10",
                                )
                                campoUI.placeholder = "Inserta tu código de descuento"


                                const botonUsar = document.createElement("div")
                                botonUsar.classList.add(
                                    "botonV1",
                                    "comportamientoBoton"
                                )
                                botonUsar.textContent = "Usar código de descuento"
                                botonUsar.addEventListener("click", (e) => {
                                    const instanciaUID = e.target.closest("[instanciaUID]").getAttribute("instanciaUID")





                                })

                                contenedor.appendChild(this.uiCodigosMultiples({
                                    instanciaUID: instanciaUID
                                }))

                                return contenedor
                            },
                            compobrobarCodigo: async function (data) {
                                const areaCamposDescuentos = document.querySelector("[area=codigosDescuentos]")
                                const contenedorListaDescuentos = areaCamposDescuentos.querySelector("[contenedor=listaDescuentos]")
                                const camposRenderizados = contenedorListaDescuentos.querySelectorAll("[campo=codigoDescuento]")
                                const codigosArray = []
                                camposRenderizados.forEach((campo) => {
                                    const codigo = campo.value
                                    if (codigo.length > 0) {
                                        codigosArray.push(codigo)
                                    }
                                })

                                const instanciaUID_vistaOrigen = document.querySelector("main").getAttribute("instanciaUID")
                                const reservaLocal = JSON.parse(sessionStorage.getItem("preReservaLocal"))

                                const contendedorCodigosActuales = reservaLocal?.codigosDescuento || []


                                const codidosActuales = []
                                contendedorCodigosActuales.forEach((contenedor) => {
                                    const codigosUID = contenedor.codigosUID
                                    codigosUID.forEach((codigoUID) => {
                                        codidosActuales.push(codigoUID)
                                    })
                                })

                                const codigosRepeditos = []
                                codidosActuales.map((codigoActual) => {
                                    if (codigosArray.includes(codigoActual)) {
                                        codigosRepeditos.push(codigoActual)
                                    }
                                })


                                if (codigosRepeditos.length === 1) {
                                    const m = `El código ${codigosRepeditos[0]} insertado ya esta aderido a la reserva`
                                    return casaVitini.ui.componentes.advertenciaInmersiva(m)
                                } else if (codigosRepeditos.length > 1) {
                                    const codigosUI = casaVitini.utilidades.cadenas.constructorComasEY({
                                        array: codigosRepeditos
                                    })
                                    const m = `Los códigos ${codigosUI} ya estan insertados aderidos al la reserva`
                                    return casaVitini.ui.componentes.advertenciaInmersiva(m)
                                }

                                const instanciaUID_pantallDeCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()

                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                    instanciaUID: instanciaUID_pantallDeCargaSuperPuesta,
                                    mensaje: "Comprobando el código de descuento",
                                    botonCancelar: "ocultar"
                                })
                                const instanciaUID_formularioOrigen = casaVitini.utilidades.codigoFechaInstancia()
                                areaCamposDescuentos.setAttribute("instanciaUID", instanciaUID_formularioOrigen)

                                const respuestaServidor = await casaVitini.shell.servidor({
                                    zona: "plaza/reservas/preComprobarCodigoDescuento",
                                    reserva: reservaLocal,
                                    codigoDescuento: codigosArray
                                })

                                const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallDeCargaSuperPuesta}"]`)
                                pantallaDeCargaRenderizada?.remove()

                                const instanciaRenderizda = document.querySelector(`[instanciaUID="${instanciaUID_vistaOrigen}"]`)
                                if (!instanciaRenderizda) { return }

                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    if (respuestaServidor.hasOwnProperty("ofertas")) {
                                        return this.errorUICondiciones(respuestaServidor)
                                    } else {
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                    }
                                }
                                if (respuestaServidor.ok) {

                                    const ofertas = respuestaServidor.ofertas
                                    const formularioOrigen = document.querySelector(`[instanciaUID="${instanciaUID_formularioOrigen}"`)



                                    if (!reservaLocal.hasOwnProperty("codigosDescuento")) {
                                        reservaLocal.codigosDescuento = []
                                    }
                                    const selectorContenedorOfertas = document.querySelector(`[contenedor=ofertasComprobadas]`)

                                    ofertas.forEach((oferta) => {
                                        const ofertaUID = oferta.oferta.ofertaUID
                                        const nombreOferta = oferta.oferta.nombreOferta
                                        const descuentosJSON = oferta.oferta.descuentosJSON
                                        const condicionesArray = oferta.oferta.condicionesArray

                                        const codgosDeLaOferta = []
                                        condicionesArray.forEach((condicion) => {
                                            const tipoCondicion = condicion.tipoCondicion
                                            if (tipoCondicion === "porCodigoDescuento") {
                                                const codigoDescuento = condicion.codigoDescuento
                                                const decodedBytes = Uint8Array.from(atob(codigoDescuento), c => c.charCodeAt(0))
                                                const codigoDescuentoUTF = new TextDecoder().decode(decodedBytes)

                                                codgosDeLaOferta.push(codigoDescuentoUTF)
                                            }
                                        })

                                        const contenedorDescuentoComprobnado = {
                                            ofertaUID: ofertaUID,
                                            codigosUID: codgosDeLaOferta,
                                            descuentoUI: nombreOferta
                                        }
                                        reservaLocal.codigosDescuento.push(contenedorDescuentoComprobnado)
                                        const ofertaUI = this.ofertaUI({
                                            ofertaUID,
                                            nombreOferta,
                                            descuentosJSON,
                                            condicionesArray,
                                            codigos: codgosDeLaOferta,
                                            botonEliminar: "activado"

                                        })
                                        selectorContenedorOfertas.appendChild(ofertaUI)
                                    })
                                    sessionStorage.setItem("preReservaLocal", JSON.stringify(reservaLocal))
                                }
                                await casaVitini.ui.vistas.alojamiento.resumen.actualizarPrecioEnUI({
                                    aplicarUIData: "si"
                                })
                            },
                            recuperarOfertasPorArrayDeCodigos: async function () {
                                const reservaLocal = JSON.parse(sessionStorage.getItem("preReservaLocal"))
                                const codigosArray = []
                                reservaLocal.codigosDescuento.map((contenedor) => {
                                    const codigosUID = contenedor.codigosUID
                                    codigosUID.forEach((codigo) => {
                                        codigosArray.push(codigo)
                                    })
                                })
                                const c = {
                                    zona: "plaza/reservas/preComprobarCodigoDescuento",
                                    reserva: reservaLocal,
                                    codigoDescuento: codigosArray
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(c)
                                if (respuestaServidor?.error) {
                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                }
                                if (respuestaServidor.ok) {
                                    const ofertas = respuestaServidor.ofertas
                                    const selectorContenedorOfertas = document.querySelector(`[contenedor=ofertasComprobadas]`)
                                    selectorContenedorOfertas.innerHTML = null

                                    let contenedorCodigoParaObjeto = []
                                    ofertas.forEach((oferta) => {
                                        const ofertaUID = oferta.oferta.ofertaUID
                                        const nombreOferta = oferta.oferta.nombreOferta
                                        const descuentosJSON = oferta.oferta.descuentosJSON
                                        const condicionesArray = oferta.oferta.condicionesArray

                                        const codigosValidados = []
                                        for (const condicion of condicionesArray) {
                                            const tipoCondicion = condicion.tipoCondicion
                                            if (tipoCondicion === "porCodigoDescuento") {
                                                const codigoDescuentoB64 = condicion.codigoDescuento
                                                const decodedBytes = Uint8Array.from(atob(codigoDescuentoB64), c => c.charCodeAt(0))
                                                const codigoDescuentoUTF = new TextDecoder().decode(decodedBytes)

                                                if (codigosArray.includes(codigoDescuentoUTF)) {
                                                    codigosValidados.push(codigoDescuentoUTF)
                                                }
                                            }
                                        }
                                        const ofertaUI = this.ofertaUI({
                                            ofertaUID,
                                            nombreOferta,
                                            descuentosJSON,
                                            condicionesArray,
                                            codigos: codigosValidados,
                                            botonEliminar: "activado"
                                        })
                                        selectorContenedorOfertas.appendChild(ofertaUI)

                                        const estructuraCodigoObjeto = {
                                            ofertaUID,
                                            descuentoUI: nombreOferta,
                                            codigosUID: codigosValidados
                                        }
                                        contenedorCodigoParaObjeto.push(estructuraCodigoObjeto)
                                    })
                                    reservaLocal.codigosDescuento = contenedorCodigoParaObjeto
                                    sessionStorage.setItem("preReservaLocal", JSON.stringify(reservaLocal))
                                }


                            },
                            borrarCodigo: async (ofertaUID_paraBorrar) => {
                                const reservaLocal = JSON.parse(sessionStorage.getItem("preReservaLocal"))
                                const codigosActuales = reservaLocal?.codigosDescuento || []

                                codigosActuales.forEach((contendor) => {
                                    const ofertaUID = contendor.ofertaUID
                                    if (ofertaUID === ofertaUID_paraBorrar) {
                                        delete contendor
                                    }
                                })
                                if (codigosActuales.length === 0) {
                                    delete reservaLocal?.codigosDescuento
                                }
                                sessionStorage.setItem("preReservaLocal", JSON.stringify(reservaLocal))
                                await casaVitini.ui.vistas.alojamiento.resumen.actualizarPrecioEnUI({
                                    aplicarUIData: "si"
                                })
                            },
                            ofertaUI: function (data) {
                                const ofertaUID = data.ofertaUID
                                const nombreOferta = data.nombreOferta
                                const descuentosJSON = data.descuentosJSON
                                const condicionesArray = data.condicionesArray
                                const codigos = data.codigos
                                const botonEliminar = data.botonEliminar


                                const contenedorOfertaComprobada = document.createElement("div")
                                contenedorOfertaComprobada.setAttribute("ofertaUID", ofertaUID)
                                contenedorOfertaComprobada.setAttribute("codigosUID", JSON.stringify(codigos))

                                contenedorOfertaComprobada.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "borderGrey1",
                                    "padding6",
                                    "borderRadius20"

                                )

                                const tituloOferta = document.createElement("div")
                                tituloOferta.setAttribute("data", "descuentoUI")
                                tituloOferta.classList.add(
                                    "padding14",
                                    "negrita"
                                )
                                tituloOferta.innerHTML = nombreOferta
                                contenedorOfertaComprobada.appendChild(tituloOferta)

                                const info = document.createElement("div")
                                info.classList.add(
                                    "padding6"
                                )
                                info.innerHTML = "Oferta adherida a tu reserva. Ahora puedes confirmar la reserva y la oferta ser adherida"





                                const contenedorCondiciones = document.createElement("div")
                                contenedorCondiciones.classList.add(
                                    "flexVertical"
                                )
                                contenedorCondiciones.appendChild(this.condicionesUI({ condicionesArray }))
                                contenedorOfertaComprobada.appendChild(contenedorCondiciones)

                                const contenedorDescuentos = document.createElement("div")
                                contenedorDescuentos.classList.add(
                                    "flexVertical"
                                )
                                contenedorDescuentos.appendChild(this.descuentosUI({
                                    descuentosJSON
                                }))
                                contenedorOfertaComprobada.appendChild(contenedorDescuentos)



                                if (botonEliminar === "activado") {
                                    const botonDesaderir = document.createElement("div")
                                    botonDesaderir.classList.add(
                                        "botonV1",
                                        "comportameintoBoton"
                                    )
                                    botonDesaderir.textContent = "Eliminar codigo de descuento"
                                    botonDesaderir.addEventListener("click", async (e) => {
                                        e.target.closest("[ofertaUID]").remove()
                                        await this.borrarCodigo(ofertaUID)
                                    })
                                    contenedorOfertaComprobada.appendChild(botonDesaderir)
                                }

                                return contenedorOfertaComprobada
                            },
                            descuentosUI: (data) => {
                                const descuentosJSON = data.descuentosJSON
                                const tipoDescuento = descuentosJSON?.tipoDescuento
                                const subTipoDescuento = descuentosJSON?.subTipoDescuento

                                const contenedorDescuentos = document.createElement("div")
                                contenedorDescuentos.setAttribute("contenedor", "descuentos")
                                contenedorDescuentos.classList.add(
                                    "flexVertical",
                                    "backgroundGrey1",
                                    "padding6",
                                    "borderRadius14"
                                )
                                const tituloContendor = document.createElement("div")
                                tituloContendor.classList.add(
                                    "negrita",
                                    "padding6",
                                )
                                tituloContendor.textContent = "Descuentos de la oferta"
                                contenedorDescuentos.appendChild(tituloContendor)

                                const desfinicionDescuento = casaVitini
                                    .ui
                                    .componentes
                                    .contenedorFinanciero
                                    .componentesUI
                                    .ofertas
                                    .componentesUI.definicionDescuentos({
                                        tipoDescuento,
                                        subTipoDescuento,
                                        descuentosJSON
                                    })
                                contenedorDescuentos.appendChild(desfinicionDescuento)

                                return contenedorDescuentos
                            },
                            condicionesUI: (data) => {
                                const condicionesArray = data.condicionesArray

                                const contenedorCondiciones = document.createElement("div")
                                contenedorCondiciones.setAttribute("contenedor", "condiciones")
                                contenedorCondiciones.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "backgroundGrey1",
                                    "padding6",
                                    "borderRadius14"
                                )

                                const tituloContendor = document.createElement("div")
                                tituloContendor.classList.add(
                                    "negrita",
                                    "padding6",

                                )
                                tituloContendor.textContent = "Condiciones de la oferta"
                                contenedorCondiciones.appendChild(tituloContendor)

                                contenedorCondiciones.querySelectorAll("[tipoCondicion]").forEach((contenedorTipoCondicion) => {
                                    contenedorTipoCondicion.remove()
                                })

                                condicionesArray.forEach((condicion) => {
                                    const tipoCondicion = condicion.tipoCondicion

                                    const contenedorCondicion = document.createElement("div")
                                    contenedorCondicion.classList.add("contenedorCondicion")
                                    contenedorCondicion.setAttribute("tipoCondicion", tipoCondicion)
                                    contenedorCondicion.classList.add(
                                        "flexVertical",
                                        "padding6",
                                    )
                                    const definicionCondicion = casaVitini
                                        .ui
                                        .componentes
                                        .contenedorFinanciero
                                        .componentesUI
                                        .ofertas
                                        .componentesUI
                                        .definicionCondiciones({
                                            tipoCondicion,
                                            condicion
                                        })
                                    contenedorCondicion.appendChild(definicionCondicion)
                                    contenedorCondiciones.appendChild(contenedorCondicion)
                                })
                                return contenedorCondiciones
                            },
                            errorUICondiciones: function (data) {

                                const mensajeError = data.error
                                const ofertas = data.ofertas

                                const main = document.querySelector("main")
                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const instanciaUID = ui.getAttribute("instanciaUID")
                                const contenedor = ui.querySelector("[componente=contenedor]")
                                main.appendChild(ui)


                                const info = document.createElement("div")
                                info.classList.add(
                                    "textoCentrado"
                                )
                                info.textContent = mensajeError
                                contenedor.appendChild(info)

                                const botonCerrarInferior = document.createElement("div")
                                botonCerrarInferior.classList.add("botonV1")
                                botonCerrarInferior.textContent = "Cerrar y volver"
                                botonCerrarInferior.setAttribute("boton", "cancelar")
                                botonCerrarInferior.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCerrarInferior)

                                ofertas.forEach((oferta) => {
                                    const nombreOferta = oferta.oferta.nombreOferta
                                    const descuentosJSON = oferta.oferta.descuentosJSON
                                    const condicionesArray = oferta.oferta.condicionesArray












                                    const ofertaUI = this.ofertaUI({
                                        nombreOferta,
                                        descuentosJSON,
                                        condicionesArray,
                                        codigo: null,
                                    })
                                    contenedor.appendChild(ofertaUI)
                                })

                            },
                            uiCodigosMultiples: function (data) {
                                const contenedorZonaCodigo = document.createElement("div")
                                contenedorZonaCodigo.setAttribute("contenedor", "codigosDescuento")
                                contenedorZonaCodigo.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "backgroundGrey1",
                                    "padding6",
                                    "borderRadius20"
                                )


                                const contendorBotonesCampoCodigoDescuento = document.createElement("div")
                                contendorBotonesCampoCodigoDescuento.classList.add(
                                    "flexHorizontal",
                                    "flexApiladoI",
                                )
                                contenedorZonaCodigo.appendChild(contendorBotonesCampoCodigoDescuento)


                                const botonAgregarCampoCodigoDescuento = document.createElement("div")
                                botonAgregarCampoCodigoDescuento.classList.add(
                                    "botonV1"
                                )
                                botonAgregarCampoCodigoDescuento.textContent = "Agregar codigo de descuento"
                                botonAgregarCampoCodigoDescuento.addEventListener("click", () => {

                                    const contenedorCodigosDecuentos = document.querySelector("[contenedor=codigosDescuento]")
                                    const lista = contenedorCodigosDecuentos.querySelector("[contenedor=listaDescuentos]")
                                    lista.removeAttribute("style")
                                    const contenedorCampoUI = this.contenedorCampo()
                                    lista.appendChild(contenedorCampoUI)

                                    const botonComprobar = this.botonComprobar()
                                    const selectorBotonComprobar_renderizado = contenedorCodigosDecuentos.querySelector("[boton=comprobar]")
                                    if (!selectorBotonComprobar_renderizado) {
                                        contenedorCodigosDecuentos.appendChild(botonComprobar)
                                    }
                                })
                                contendorBotonesCampoCodigoDescuento.appendChild(botonAgregarCampoCodigoDescuento)



                                const contenedorCodigosDescuentosPorVerificar = document.createElement("div")
                                contenedorCodigosDescuentosPorVerificar.setAttribute("contenedor", "listaDescuentos")
                                contenedorCodigosDescuentosPorVerificar.style.display = "none"
                                contenedorCodigosDescuentosPorVerificar
                                contenedorCodigosDescuentosPorVerificar.classList.add(
                                    "flexVertical",
                                    "gap6",
                                )
                                contenedorZonaCodigo.appendChild(contenedorCodigosDescuentosPorVerificar)
                                return contenedorZonaCodigo

                            },
                            infoInit: () => {
                                const info = document.createElement("div")
                                info.classList.add(
                                    "flexVertical"
                                )
                                info.textContent = "Añada descuentos para verificarlos"
                                return info
                            },
                            descuentoUI: (data) => {
                                const descuentoBASE64 = data.descuentoBASE64

                                const contenedor = document.createElement("div")
                                contenedor.classList.add(
                                    "flexVertical"
                                )
                                const info = document.createElement("p")
                                info.textContent = descuentoBASE64
                                contenedor.appendChild(info)

                                const botonEliminar = document.createElement("p")
                                botonEliminar.textContent = "Elimnar codigo descuento"
                                contenedor.appendChild(botonEliminar)

                                return contenedor
                            },
                            contenedorCampo: (data) => {

                                const campoData = data?.campoData || ""

                                const contenedor = document.createElement("div")
                                contenedor.style.gridTemplateColumns = "1fr auto"
                                contenedor.setAttribute("componente", "campoDescuento")
                                contenedor.classList.add(
                                    "gridHorizontal2C",
                                    "gap6",
                                    "padding6",
                                    "borderRadius20",
                                    "borderGrey1"
                                )

                                const campoCodigo = document.createElement("input")
                                campoCodigo.setAttribute("campo", "codigoDescuento")
                                campoCodigo.classList.add(
                                    "padding10",
                                    "borderRadius16",
                                )
                                campoCodigo.placeholder = "Inserta un codigo de descuento para comprobar"
                                campoCodigo.value = campoData
                                contenedor.appendChild(campoCodigo)

                                const botonComprobar = document.createElement("div")
                                botonComprobar.classList.add(
                                    "padding10",
                                    "borderRadius8",
                                    "botonV1",
                                )
                                botonComprobar.textContent = "Eliminar"
                                botonComprobar.addEventListener("click", (e) => {

                                    const contenedorDescuentos = e.target.closest("[contenedor=codigosDescuento]")
                                    const numeroCampos = contenedorDescuentos.querySelectorAll("[componente=campoDescuento]")
                                    if (numeroCampos.length === 1) {
                                        contenedorDescuentos.querySelector("[boton=comprobar]")?.remove()
                                        const lista = contenedorDescuentos.querySelector("[contenedor=listaDescuentos]")
                                        lista.style.display = "none"
                                    }
                                    const contenedorCampo = e.target.closest("[componente=campoDescuento]")
                                    contenedorCampo?.remove()
                                })
                                contenedor.appendChild(botonComprobar)
                                return contenedor
                            },
                            botonComprobar: function () {
                                const boton = document.createElement("div")
                                boton.setAttribute("boton", "comprobar")
                                boton.classList.add(
                                    "botonV1"
                                )
                                boton.textContent = "Comprobar codigo."
                                boton.addEventListener("click", () => {
                                    this.compobrobarCodigo()
                                })
                                return boton
                            },
                        }

                    },
                    servicios: {
                        controladorSelectorServicios: (e) => {
                            const servicioUI = e.target.closest("[servicioUID]")
                            const selectorIndicador = servicioUI.querySelector("[componente=indicadorSelecion]")
                            const estadoActual = servicioUI.getAttribute("estado")

                            if (estadoActual === "activado") {
                                servicioUI.removeAttribute("estado")
                                selectorIndicador.removeAttribute("style")

                            } else {
                                servicioUI.setAttribute("estado", "activado")
                                selectorIndicador.style.background = "#00ff00"
                            }
                            casaVitini.ui.vistas.alojamiento.resumen.actualizarPrecioEnUI({
                                aplicarUIData: "si"
                            })

                        },
                        renderizarServiciosPublicos: async function () {
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const selectorContenedorServicios = document.querySelector("[contenedor=servicios]")
                            if (selectorContenedorServicios) {
                                selectorContenedorServicios.setAttribute("instanciaUID", instanciaUID)
                                selectorContenedorServicios.innerHTML = null
                                selectorContenedorServicios.textContent = "Obteniendo servicios..."
                            }

                            const respuestaServidor = await casaVitini.shell.servidor({
                                zona: "plaza/reservas/obtenerServiciosPublicos",
                            })
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const selector_UI_enEspera = document.querySelector(`[contenedor=servicios][instanciaUID="${instanciaUID}"]`)
                                if (selector_UI_enEspera) {


                                    const listaServiciosPublicos = respuestaServidor.servicios
                                    selectorContenedorServicios.innerHTML = null
                                    listaServiciosPublicos.forEach(servicio => {

                                        const servicioUID = servicio.servicioUID
                                        const contenedor = servicio.contenedor

                                        const servicioUI = this.servicioUI({
                                            servicioUID,
                                            contenedor
                                        })

                                        const opciones = servicioUI.querySelectorAll("[opcionIDV]")
                                        opciones.forEach((o) => {
                                            o.addEventListener("click", () => {
                                                return casaVitini.ui.vistas.alojamiento.resumen.actualizarPrecioEnUI({
                                                    aplicarUIData: "si"
                                                })
                                            })
                                        })
                                        selectorContenedorServicios.appendChild(servicioUI)

                                        const selectorServicioUI = document.querySelector("[componente=espacioConfirmarReserva] [contenedor=serviciosUI]")

                                        if (listaServiciosPublicos.length > 0) {
                                            selectorServicioUI.classList.remove("ocultoInicial")
                                        } else {
                                            selectorServicioUI.classList.add("ocultoInicial")

                                        }
                                    })

                                }
                            }
                        },
                        servicioUI: function (data) {

                            const servicioUID = data.servicioUID
                            const contenedor = data.contenedor
                            const gruposDeOpciones = contenedor.gruposDeOpciones
                            const definicion = contenedor.definicion
                            const fechaFinal = contenedor.fechaFinal
                            const duracionIDV = contenedor.duracionIDV
                            const fechaInicio = contenedor.fechaInicio
                            const tituloPublico = contenedor.tituloPublico
                            const disponibilidadIDV = contenedor.disponibilidadIDV


                            const diccionario = {
                                disponibilidad: {
                                    constante: "Disponible",
                                    variable: "Disponibilidad variable"
                                }
                            }

                            const servicioUI = document.createElement("div")
                            servicioUI.setAttribute("servicioUID", servicioUID)
                            servicioUI.classList.add(
                                "flexVertical",
                                "padding6",
                                "backgroundGrey1",
                                "borderRadius14"

                            )
                            const contenedorGlobal = document.createElement("div")
                            contenedorGlobal.classList.add(
                                "contenedorGlobal"
                            )
                            servicioUI.appendChild(contenedorGlobal)

                            const esferaSeleccionable = document.createElement("div")
                            esferaSeleccionable.classList.add(
                                "esferaSeleccionable"
                            )
                            contenedorGlobal.appendChild(esferaSeleccionable)

                            const indicadorDeSeleccion = document.createElement("div")
                            indicadorDeSeleccion.setAttribute("componente", "indicadorSelecion")
                            indicadorDeSeleccion.setAttribute("indicador", "global")
                            indicadorDeSeleccion.classList.add(
                                "indicadorDeSeleccion"
                            )
                            esferaSeleccionable.appendChild(indicadorDeSeleccion)

                            const titulo = document.createElement("p")
                            titulo.setAttribute("data", "servicioUI")
                            titulo.classList.add(
                                "padding6",
                                "negrita"
                            )
                            titulo.textContent = tituloPublico
                            contenedorGlobal.appendChild(titulo)

                            const disponibilidadUI = document.createElement("p")
                            disponibilidadUI.classList.add(
                                "padding6"
                            )
                            disponibilidadUI.textContent = diccionario.disponibilidad[disponibilidadIDV]
                            servicioUI.appendChild(disponibilidadUI)

                            if (disponibilidadIDV === "variable") {

                                const info = document.createElement("p")
                                info.classList.add(
                                    "padding6"
                                )
                                info.textContent = `Este servicio tiene una disponibilidad limitada. Es por eso que si selecciona este servicio, nos pondremos en contacto con el titular de la reserva en las próximas horas para confirmarle la disponibilidad del servicio para su reserva.`
                                servicioUI.appendChild(info)
                            }

                            if (duracionIDV === "rango") {
                                const contenedorDuracion = document.createElement("div")
                                contenedorDuracion.classList.add(
                                    "flexVertical",
                                    "padding6"

                                )
                                servicioUI.appendChild(contenedorDuracion)

                                const info = document.createElement("p")
                                info.classList.add("negrita")
                                info.textContent = `Servicio disponible solo desde ${fechaInicio} hata ${fechaFinal}. Ambas fechas incluidas.`
                                contenedorDuracion.appendChild(info)

                            }
                            const definicionUI = document.createElement("pre")
                            definicionUI.classList.add(
                                "padding6",
                                "whiteSpace"
                            )
                            definicionUI.textContent = definicion
                            servicioUI.appendChild(definicionUI)

                            const componentesUI = casaVitini.ui.componentes.serviciosUI
                            const cgdoUI = componentesUI.contenedor_gruposDeOpciones()
                            servicioUI.appendChild(cgdoUI)

                            Object.entries(gruposDeOpciones).forEach(([grupoIDV, go]) => {
                                const nombreGrupo = go.nombreGrupo


                                const configuracionGrupo = go.configuracionGrupo
                                const grupoDeOpciones = componentesUI.grupoDeOpciones()
                                grupoDeOpciones.querySelector("[data=titulo]").textContent = nombreGrupo
                                grupoDeOpciones.setAttribute("grupoIDV", grupoIDV)
                                grupoDeOpciones.setAttribute("conf", JSON.stringify(configuracionGrupo))
                                cgdoUI.appendChild(grupoDeOpciones)

                                const opcionesGrupo = go.opcionesGrupo
                                opcionesGrupo.forEach((og) => {
                                    const nombreOpcion = og.nombreOpcion
                                    const precioOpcion = og.precioOpcion
                                    const opcionIDV = og.opcionIDV


                                    const opcionUI = componentesUI.opcionUI()
                                    opcionUI.addEventListener("click", (e) => {
                                        componentesUI.controladorSeleccion(e)
                                    })
                                    opcionUI.setAttribute("opcionIDV", opcionIDV)
                                    opcionUI.querySelector("[data=opcionUI]").textContent = nombreOpcion
                                    grupoDeOpciones.appendChild(opcionUI)
                                })
                            })
                            return servicioUI
                        },
                        infoServiciosObsoletos: (serviciosObsoletos) => {
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const instanciaUID = ui.getAttribute("instanciaUID")
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            main.appendChild(ui)

                            const titulo = document.createElement("div")
                            titulo.classList.add(
                                "tituloGris",
                                "padding10",
                                "textoCentrado"
                            )
                            titulo.textContent = "Hay servicios que usted ha seleccionado que se han actualizado."
                            contenedor.appendChild(titulo)

                            const info = document.createElement("div")
                            info.classList.add(
                                "padding10",
                                //   "textoCentrado"
                            )
                            info.textContent = `Estimado/a visitante,
Durante el proceso de selección de servicios, algunos de ellos han sido actualizados. Para asegurarnos de que el proceso cumpla con sus expectativas, hemos actualizado la interfaz con la nueva información disponible, y hemos deseleccionado los servicios que han cambiado. Le pedimos amablemente que revise nuevamente su selección para confirmar que todo esté acorde a sus preferencias.
Este ajuste se ha realizado porque, mientras realizaba su selección, algunos servicios experimentaron modificaciones en su oferta. Queremos garantizarle que dispone de la información más actualizada para tomar su decisión.
Gracias por su comprensión y disculpe las molestias ocasionadas.
Servicios que usted habia seleccionado y que han experimentado una actualziación:`
                            contenedor.appendChild(info)


                            const contenedorTitulosObsoletos = document.createElement("div")
                            contenedorTitulosObsoletos.classList.add(
                                "flexVertical",
                                "gap6",

                            )
                            contenedor.appendChild(contenedorTitulosObsoletos)

                            serviciosObsoletos.forEach((tituloObsoleto) => {

                                const tituloObsoletoUI = document.createElement("div")
                                tituloObsoletoUI.classList.add(
                                    "padding14",
                                    "borderGrey1",
                                    "borderRadius16"
                                )
                                tituloObsoletoUI.textContent = tituloObsoleto
                                contenedorTitulosObsoletos.appendChild(tituloObsoletoUI)
                            })

                            const botonCerrar = document.createElement("div")
                            botonCerrar.classList.add("botonV1")
                            botonCerrar.textContent = "Cerrar y volver"
                            botonCerrar.setAttribute("boton", "cancelar")
                            botonCerrar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            contenedor.appendChild(botonCerrar)
                        }
                    },
                    listaCodigosInternacionalUI: () => {

                        const codigosInternacionales = [
                            { pais: "Afganistán", codigo: "+93" },
                            { pais: "Albania", codigo: "+355" },
                            { pais: "Alemania", codigo: "+49" },
                            { pais: "Andorra", codigo: "+376" },
                            { pais: "Angola", codigo: "+244" },
                            { pais: "Argentina", codigo: "+54" },
                            { pais: "Armenia", codigo: "+374" },
                            { pais: "Australia", codigo: "+61" },
                            { pais: "Austria", codigo: "+43" },
                            { pais: "Azerbaiyán", codigo: "+994" },
                            { pais: "Bahamas", codigo: "+1-242" },
                            { pais: "Bahréin", codigo: "+973" },
                            { pais: "Bangladés", codigo: "+880" },
                            { pais: "Barbados", codigo: "+1-246" },
                            { pais: "Bélgica", codigo: "+32" },
                            { pais: "Bielorrusia", codigo: "+375" },
                            { pais: "Bolivia", codigo: "+591" },
                            { pais: "Bosnia y Herzegovina", codigo: "+387" },
                            { pais: "Botsuana", codigo: "+267" },
                            { pais: "Brasil", codigo: "+55" },
                            { pais: "Brunéi", codigo: "+673" },
                            { pais: "Bulgaria", codigo: "+359" },
                            { pais: "Cabo Verde", codigo: "+238" },
                            { pais: "Camboya", codigo: "+855" },
                            { pais: "Canadá", codigo: "+1" },
                            { pais: "Chile", codigo: "+56" },
                            { pais: "China", codigo: "+86" },
                            { pais: "Colombia", codigo: "+57" },
                            { pais: "Comoras", codigo: "+269" },
                            { pais: "Corea del Norte", codigo: "+850" },
                            { pais: "Corea del Sur", codigo: "+82" },
                            { pais: "Costa Rica", codigo: "+506" },
                            { pais: "Croacia", codigo: "+385" },
                            { pais: "Cuba", codigo: "+53" },
                            { pais: "Dinamarca", codigo: "+45" },
                            { pais: "Dominica", codigo: "+1-767" },
                            { pais: "Ecuador", codigo: "+593" },
                            { pais: "Egipto", codigo: "+20" },
                            { pais: "El Salvador", codigo: "+503" },
                            { pais: "Emiratos Árabes Unidos", codigo: "+971" },
                            { pais: "Eslovaquia", codigo: "+421" },
                            { pais: "Eslovenia", codigo: "+386" },
                            { pais: "España", codigo: "+34" },
                            { pais: "Estados Unidos", codigo: "+1" },
                            { pais: "Estonia", codigo: "+372" },
                            { pais: "Eswatini", codigo: "+268" },
                            { pais: "Etiopía", codigo: "+251" },
                            { pais: "Filipinas", codigo: "+63" },
                            { pais: "Finlandia", codigo: "+358" },
                            { pais: "Francia", codigo: "+33" },
                            { pais: "Gabón", codigo: "+241" },
                            { pais: "Gambia", codigo: "+220" },
                            { pais: "Georgia", codigo: "+995" },
                            { pais: "Ghana", codigo: "+233" },
                            { pais: "Grecia", codigo: "+30" },
                            { pais: "Guatemala", codigo: "+502" },
                            { pais: "Guinea", codigo: "+224" },
                            { pais: "Guinea Ecuatorial", codigo: "+240" },
                            { pais: "Guyana", codigo: "+592" },
                            { pais: "Haití", codigo: "+509" },
                            { pais: "Honduras", codigo: "+504" },
                            { pais: "Hungría", codigo: "+36" },
                            { pais: "India", codigo: "+91" },
                            { pais: "Indonesia", codigo: "+62" },
                            { pais: "Irán", codigo: "+98" },
                            { pais: "Irak", codigo: "+964" },
                            { pais: "Irlanda", codigo: "+353" },
                            { pais: "Islandia", codigo: "+354" },
                            { pais: "Islas Caimán", codigo: "+1-345" },
                            { pais: "Islas Malvinas", codigo: "+500" },
                            { pais: "Islas Marshall", codigo: "+692" },
                            { pais: "Islas Salomón", codigo: "+677" },
                            { pais: "Italia", codigo: "+39" },
                            { pais: "Jamaica", codigo: "+1-876" },
                            { pais: "Japón", codigo: "+81" },
                            { pais: "Jordania", codigo: "+962" },
                            { pais: "Kazajistán", codigo: "+7" },
                            { pais: "Kenia", codigo: "+254" },
                            { pais: "Kirguistán", codigo: "+996" },
                            { pais: "Kiribati", codigo: "+686" },
                            { pais: "Kuwait", codigo: "+965" },
                            { pais: "Laos", codigo: "+856" },
                            { pais: "Letonia", codigo: "+371" },
                            { pais: "Líbano", codigo: "+961" },
                            { pais: "Liberia", codigo: "+231" },
                            { pais: "Libia", codigo: "+218" },
                            { pais: "Liechtenstein", codigo: "+423" },
                            { pais: "Lituania", codigo: "+370" },
                            { pais: "Luxemburgo", codigo: "+352" },
                            { pais: "Malasia", codigo: "+60" },
                            { pais: "Malawi", codigo: "+265" },
                            { pais: "Maldivas", codigo: "+960" },
                            { pais: "Mali", codigo: "+223" },
                            { pais: "Malta", codigo: "+356" },
                            { pais: "Marruecos", codigo: "+212" },
                            { pais: "Mauricio", codigo: "+230" },
                            { pais: "Mauritania", codigo: "+222" },
                            { pais: "México", codigo: "+52" },
                            { pais: "Moldavia", codigo: "+373" },
                            { pais: "Mónaco", codigo: "+377" },
                            { pais: "Mongolia", codigo: "+976" },
                            { pais: "Mozambique", codigo: "+258" },
                            { pais: "Namibia", codigo: "+264" },
                            { pais: "Nepal", codigo: "+977" },
                            { pais: "Nicaragua", codigo: "+505" },
                            { pais: "Nigeria", codigo: "+234" },
                            { pais: "Noruega", codigo: "+47" },
                            { pais: "Nueva Zelanda", codigo: "+64" },
                            { pais: "Omán", codigo: "+968" },
                            { pais: "Pakistán", codigo: "+92" },
                            { pais: "Palaos", codigo: "+680" },
                            { pais: "Panamá", codigo: "+507" },
                            { pais: "Papúa Nueva Guinea", codigo: "+675" },
                            { pais: "Paraguay", codigo: "+595" },
                            { pais: "Países Bajos", codigo: "+31" },
                            { pais: "Perú", codigo: "+51" },
                            { pais: "Polonia", codigo: "+48" },
                            { pais: "Portugal", codigo: "+351" },
                            { pais: "Reino Unido", codigo: "+44" },
                            { pais: "República Centroafricana", codigo: "+236" },
                            { pais: "República Checa", codigo: "+420" },
                            { pais: "República del Congo", codigo: "+242" },
                            { pais: "República Dominicana", codigo: "+1-809" },
                            { pais: "Rumania", codigo: "+40" },
                            { pais: "Rusia", codigo: "+7" },
                            { pais: "Rwanda", codigo: "+250" },
                            { pais: "Samoa", codigo: "+685" },
                            { pais: "San Cristóbal y Nieves", codigo: "+1-869" },
                            { pais: "San Marino", codigo: "+378" },
                            { pais: "Santa Lucía", codigo: "+1-758" },
                            { pais: "Santo Tomé y Príncipe", codigo: "+239" },
                            { pais: "Senegal", codigo: "+221" },
                            { pais: "Serbia", codigo: "+381" },
                            { pais: "Seychelles", codigo: "+248" },
                            { pais: "Singapur", codigo: "+65" },
                            { pais: "Siria", codigo: "+963" },
                            { pais: "Somalia", codigo: "+252" },
                            { pais: "Sudáfrica", codigo: "+27" },
                            { pais: "Sudán", codigo: "+249" },
                            { pais: "Sudán del Sur", codigo: "+211" },
                            { pais: "Suecia", codigo: "+46" },
                            { pais: "Suiza", codigo: "+41" },
                            { pais: "Tailandia", codigo: "+66" },
                            { pais: "Taiwán", codigo: "+886" },
                            { pais: "Tanzania", codigo: "+255" },
                            { pais: "Tayikistán", codigo: "+992" },
                            { pais: "Togo", codigo: "+228" },
                            { pais: "Tonga", codigo: "+676" },
                            { pais: "Trinidad y Tobago", codigo: "+1-868" },
                            { pais: "Túnez", codigo: "+216" },
                            { pais: "Turkmenistán", codigo: "+993" },
                            { pais: "Turquía", codigo: "+90" },
                            { pais: "Tuvalu", codigo: "+688" },
                            { pais: "Uganda", codigo: "+256" },
                            { pais: "Ucrania", codigo: "+380" },
                            { pais: "Emiratos Árabes Unidos", codigo: "+971" },
                            { pais: "Repub. de Macedonia del Norte", codigo: "+389" },
                            { pais: "Vanuatu", codigo: "+678" },
                            { pais: "Vaticano", codigo: "+39" },
                            { pais: "Venezuela", codigo: "+58" },
                            { pais: "Vietnam", codigo: "+84" },
                            { pais: "Zambia", codigo: "+260" },
                            { pais: "Zimbabue", codigo: "+263" },
                        ]

                        const s = document.createElement("select")
                        //s.classList.add("claseapraahroa")
                        s.style.borderBottomLeftRadius = "14px"
                        s.style.borderTopLeftRadius = "14px"
                        s.style.borderBottomRightRadius = "0px"
                        s.style.borderTopRightRadius = "0px"

                        s.setAttribute("campo", "codigoInternacional")
                        const titulo = document.createElement("option");
                        titulo.value = "";
                        titulo.selected = true
                        titulo.disabled = true
                        titulo.text = `Selecciona el código internacional`;
                        s.add(titulo);

                        for (const c of codigosInternacionales) {
                            const pais = c.pais
                            const codigo = c.codigo
                            const opcion = document.createElement("option");
                            opcion.value = codigo;
                            opcion.text = `${pais} ${codigo}`;
                            s.add(opcion);
                        }
                        return s

                    },
                    componentesAlojamiento: {
                        componentesUI: function (data) {
                            const complementoUID = data.complementoUID
                            const definicion = data.definicion
                            const estadoIDV = data.estadoIDV
                            const complementoUI = data.complementoUI
                            const precio = data.precio
                            const tipoPrecio = data.tipoPrecio


                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("complementoUID", complementoUID)
                            contenedor.classList.add(
                                "flexVertical",
                                "padding14",
                                "backgroundGrey1",
                                "borderRadius14"

                            )
                            contenedor.addEventListener("click", (e) => {
                                this.controladorSelectorServicios(e)
                            })
                            const renderizaPrecio = (data) => {
                                const precio = data.precio
                                const tipoPrecio = data.tipoPrecio
                                if (tipoPrecio === "fijoPorReserva") {
                                    return `${precio}$ Total`
                                } else if (tipoPrecio === "porNoche") {
                                    return `${precio}$ / Por noche`
                                }
                            }

                            const contenedorGlobal = document.createElement("div")
                            contenedorGlobal.classList.add("contenedorGlobal")
                            contenedor.appendChild(contenedorGlobal)


                            const esferaSeleccionable = document.createElement("div")
                            esferaSeleccionable.classList.add(
                                "esferaSeleccionable"
                            )
                            contenedorGlobal.appendChild(esferaSeleccionable)

                            const indicadorDeSeleccion = document.createElement("div")
                            indicadorDeSeleccion.setAttribute("componente", "indicadorSelecion")
                            indicadorDeSeleccion.classList.add(
                                "indicadorDeSeleccion"
                            )
                            esferaSeleccionable.appendChild(indicadorDeSeleccion)

                            const titulo = document.createElement("p")
                            titulo.setAttribute("data", "complementoUI")
                            titulo.classList.add(
                                "padding6",
                                "negrita"
                            )
                            titulo.textContent = complementoUI
                            contenedorGlobal.appendChild(titulo)

                            const precioUI = document.createElement("p")
                            precioUI.classList.add(
                                "textoNegrita",
                                "padding6",
                            )
                            precioUI.textContent = renderizaPrecio({
                                tipoPrecio,
                                precio
                            })
                            contenedor.appendChild(precioUI)

                            const definicionUI = document.createElement("pre")
                            definicionUI.classList.add(
                                "padding6",
                                "whiteSpace"
                            )
                            definicionUI.textContent = definicion
                            contenedor.appendChild(definicionUI)

                            return contenedor
                        },
                        controladorSelectorServicios: (e) => {
                            const servicioUI = e.target.closest("[complementoUID]")
                            const selectorIndicador = servicioUI.querySelector("[componente=indicadorSelecion]")
                            const estadoActual = servicioUI.getAttribute("estado")

                            if (estadoActual === "activado") {
                                servicioUI.removeAttribute("estado")
                                selectorIndicador.removeAttribute("style")

                            } else {
                                servicioUI.setAttribute("estado", "activado")
                                selectorIndicador.style.background = "#00ff00"
                            }
                            casaVitini.ui.vistas.alojamiento.resumen.actualizarPrecioEnUI({
                                aplicarUIData: "si"
                            })

                        },
                    }
                },
                reservaConfirmada: {
                    ui: async function () {
                        const reservaConfirmada = JSON.parse(localStorage.getItem("reservaConfirmada"))
                        if (reservaConfirmada) {
                            document.body.style.background = "rgb(214 192 157)"
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "/alojamiento/reserva_confirmada")

                            const pdfCodificado = reservaConfirmada.pdf

                            const reservaUID = reservaConfirmada.global.reservaUID
                            const fechaEntrada = reservaConfirmada.global.fechaEntrada
                            const fechaSalida = reservaConfirmada.global.fechaSalida

                            const fechaEntrada_Humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaEntrada)
                            const fechaSalida_Humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaSalida)

                            const estadoReserva = reservaConfirmada.global.estadoReservaIDV
                            const estadoPago = reservaConfirmada.global.estadoPagoIDV
                            const creacion = reservaConfirmada.global.fechaCreacion_simple

                            const titular = reservaConfirmada.titular

                            const nombreTitular = titular.nombreTitular
                            const pasaporteTitular = titular.pasaporteTitular
                            const mailTitular = titular.mailTitular
                            const telefonoTitular = titular.telefonoTitular

                            const contenedorFinanciero = reservaConfirmada.contenedorFinanciero
                            const totalFinal = contenedorFinanciero.desgloseFinanciero.global.totales.totalFinal


                            const marcoElasticoRelatico = document.createElement("div")
                            marcoElasticoRelatico.classList.add("marcoElasticoRelativo")

                            const marcoElastico = document.createElement("div")
                            marcoElastico.classList.add("marcoElastico")
                            marcoElastico.setAttribute("contenedor", "reservaconfirmada")

                            const titulo = document.createElement("div")
                            titulo.classList.add("tituloGrande", "padding10", "textoCentrado")
                            titulo.textContent = "Su reserva esta pendiente de confirmación"
                            marcoElastico.appendChild(titulo)


                            const infoGlobal = document.createElement("div")
                            infoGlobal.classList.add("plaza_reservas_reservaConfirmada_infoGlobal")
                            infoGlobal.textContent = "Su reserva está confirmada y le estamos esperando. Aquí tiene los detalles de su reserva. Puede descargar un resumen de su reserva en formato de documento PDF. Su reserva se ha registrado junto a su correo electrónico. Si desea ver con más detalle su reserva puede crear una cuenta en MiCasa para poder ver todos los detalles de su reserva. Si necesita contactar con Casa Vitini puede encontrar toda la información de contacto en la sección Contacto. Se ha enviado una copia del resumen de su reserva a su dirección de correo electrónico."


                            const infoIngreso = document.createElement("pre")
                            infoIngreso.classList.add("plaza_reservas_reservaConfirmada_infoIngreso")

                            const spinner = casaVitini.ui.componentes.spinnerSimple()
                            infoIngreso.appendChild(spinner)

                            const mensajePrincipal = await this.obtenerMensajePrincipal()
                            infoIngreso.innerHTML = null
                            infoIngreso.textContent = mensajePrincipal

                            marcoElastico.appendChild(infoIngreso)
                            const contenedor = document.createElement("div")
                            contenedor.classList.add("plaza_reservas_reservaConfirmada_contenedor")
                            const espacioDatosGlobalesReserva = document.createElement("div")
                            espacioDatosGlobalesReserva.classList.add("administracion_reservas_detallesReservas_contenedorTotales")
                            espacioDatosGlobalesReserva.setAttribute("contenedor", "espacioDatosGlobalesReserva")
                            const reversaUI = document.createElement("div")
                            reversaUI.classList.add("administracion_reservas_detallesReservas_contenedorReservaUID")
                            const nombreReserva = document.createElement("div")
                            nombreReserva.textContent = "Reserva"
                            reversaUI.appendChild(nombreReserva)
                            const numeroReservaUID = document.createElement("div")
                            numeroReservaUID.classList.add("administracion_reservas_detallesReservas_contenedorResevaUID_UID")
                            numeroReservaUID.classList.add("negrita")
                            numeroReservaUID.textContent = reservaUID
                            reversaUI.appendChild(numeroReservaUID)
                            espacioDatosGlobalesReserva.appendChild(reversaUI)
                            const botonDescargarPDF = document.createElement("a")
                            botonDescargarPDF.classList.add("botonV1")
                            botonDescargarPDF.textContent = "Descargar un resumen de la reserva en PDF"
                            botonDescargarPDF.download = "Reserva.pdf"
                            botonDescargarPDF.href = `data:application/pdf;base64,${pdfCodificado}`

                            espacioDatosGlobalesReserva.appendChild(botonDescargarPDF)

                            const contenedorTitular = document.createElement("div")
                            contenedorTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular")
                            const infoTitular = document.createElement("div")
                            infoTitular.classList.add("plaza_reservas_reservaConfirmada_infoTitular")
                            infoTitular.textContent = "Datos del titular de la reserva"

                            const contenedorDatosDelTitular = document.createElement("div")
                            contenedorDatosDelTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular_contenedorDatosDelTitular")
                            let bloqueDatoTitular = document.createElement("div")
                            bloqueDatoTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular_contenedorDatosDelTitular_bloque")
                            let bloqueTituloTitular = document.createElement("div")
                            bloqueTituloTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular_contenedorDatosDelTitular_bloqueTitulo")
                            bloqueTituloTitular.textContent = "Nombre y apellidos"
                            bloqueDatoTitular.appendChild(bloqueTituloTitular)
                            const nombreTitularUI = document.createElement("div")
                            nombreTitularUI.classList.add("negrita")
                            nombreTitularUI.textContent = nombreTitular
                            bloqueDatoTitular.appendChild(nombreTitularUI)
                            contenedorDatosDelTitular.appendChild(bloqueDatoTitular)
                            bloqueDatoTitular = document.createElement("div")
                            bloqueDatoTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular_contenedorDatosDelTitular_bloque")
                            bloqueTituloTitular = document.createElement("div")
                            bloqueTituloTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular_contenedorDatosDelTitular_bloqueTitulo")
                            bloqueTituloTitular.textContent = "Pasaporte"
                            bloqueDatoTitular.appendChild(bloqueTituloTitular)
                            const pasaporteTitularUI = document.createElement("div")
                            pasaporteTitularUI.classList.add("negrita")
                            pasaporteTitularUI.textContent = pasaporteTitular
                            bloqueDatoTitular.appendChild(pasaporteTitularUI)
                            contenedorDatosDelTitular.appendChild(bloqueDatoTitular)
                            bloqueDatoTitular = document.createElement("div")
                            bloqueDatoTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular_contenedorDatosDelTitular_bloque")
                            bloqueTituloTitular = document.createElement("div")
                            bloqueTituloTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular_contenedorDatosDelTitular_bloqueTitulo")
                            bloqueTituloTitular.textContent = "Correo electroníco"
                            bloqueDatoTitular.appendChild(bloqueTituloTitular)
                            const mailTitularUI = document.createElement("div")
                            mailTitularUI.classList.add("negrita")
                            mailTitularUI.textContent = mailTitular
                            bloqueDatoTitular.appendChild(mailTitularUI)
                            contenedorDatosDelTitular.appendChild(bloqueDatoTitular)
                            bloqueDatoTitular = document.createElement("div")
                            bloqueDatoTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular_contenedorDatosDelTitular_bloque")
                            bloqueTituloTitular = document.createElement("div")
                            bloqueTituloTitular.classList.add("plaza_reservas_reservaConfirmada_contenedorTitular_contenedorDatosDelTitular_bloqueTitulo")
                            bloqueTituloTitular.textContent = "Teléfono"
                            bloqueDatoTitular.appendChild(bloqueTituloTitular)
                            const telefonoTitularUI = document.createElement("div")
                            telefonoTitularUI.classList.add("negrita")
                            telefonoTitularUI.textContent = telefonoTitular
                            bloqueDatoTitular.appendChild(telefonoTitularUI)
                            contenedorDatosDelTitular.appendChild(bloqueDatoTitular)
                            contenedorTitular.appendChild(contenedorDatosDelTitular)
                            espacioDatosGlobalesReserva.appendChild(contenedorTitular)

                            const contenedorFechas = document.createElement("div")
                            contenedorFechas.classList.add("plaza_reservas_reservaConfirmada_contenedorFechas")

                            const contenedorFechaEntrada = document.createElement("div")
                            contenedorFechaEntrada.classList.add("plaza_reservas_reservaConfirmada_contenedorFechas_contenedorFecha")
                            const tituloFechaEntrada = document.createElement("div")
                            tituloFechaEntrada.classList.add("plaza_reservas_reservaConfirmada_contenedorFechas_contenedorFecha_titulo")
                            tituloFechaEntrada.textContent = "Fecha de entrada"
                            contenedorFechaEntrada.appendChild(tituloFechaEntrada)
                            const fechaEntradaUI = document.createElement("div")
                            fechaEntradaUI.classList.add("plaza_reservas_reservaConfirmada_contenedorFechas_contenedorFecha_fecha")
                            fechaEntradaUI.classList.add("negrita")
                            fechaEntradaUI.textContent = fechaEntrada_Humana
                            contenedorFechaEntrada.appendChild(fechaEntradaUI)
                            contenedorFechas.appendChild(contenedorFechaEntrada)

                            const contenedorFechaSalida = document.createElement("div")
                            contenedorFechaSalida.classList.add("plaza_reservas_reservaConfirmada_contenedorFechas_contenedorFecha")
                            const tituloFechaSalida = document.createElement("div")
                            tituloFechaSalida.classList.add("plaza_reservas_reservaConfirmada_contenedorFechas_contenedorFecha_titulo")
                            tituloFechaSalida.textContent = "Fecha de salida"
                            contenedorFechaSalida.appendChild(tituloFechaSalida)
                            const fechaSalidaUI = document.createElement("div")
                            fechaSalidaUI.classList.add("plaza_reservas_reservaConfirmada_contenedorFechas_contenedorFecha_fecha")
                            fechaSalidaUI.classList.add("negrita")
                            fechaSalidaUI.textContent = fechaSalida_Humana
                            contenedorFechaSalida.appendChild(fechaSalidaUI)
                            contenedorFechas.appendChild(contenedorFechaSalida)
                            espacioDatosGlobalesReserva.appendChild(contenedorFechas)

                            contenedor.appendChild(espacioDatosGlobalesReserva)
                            marcoElastico.appendChild(contenedor)
                            const infoGlobal2 = document.createElement("div")
                            infoGlobal2.classList.add("plaza_reservas_reservaConfirmada_infoGlobal")
                            infoGlobal2.textContent = `Tu reserva se guarda localmente en tu navegador. Si no borras la caché o eliminas la reserva manualmente, seguirá ahí para tu comodidad. También puedes registrarte y crear una cuenta en MiCasa con el mismo correo para acceder a los detalles de tus reservas desde cualquier lugar. Si usas un dispositivo público, asegúrate de borrar la caché. ¡Crear un VitiniID es gratis!`
                            marcoElastico.appendChild(infoGlobal2)
                            const infoGlobal3 = document.createElement("div")
                            infoGlobal3.classList.add("plaza_reservas_reservaConfirmada_infoGlobal")
                            infoGlobal3.textContent = "Cree su propio VitiniID y acceda a los detalles de su reserva de manera persistente y desde cualquier lugar. Recuerde registrarse con la misma cuenta de correo electrónico con la que realizó la reserva. Puedes cambiar su cuenta de correo electrónico en cualquier momento desde su cuenta con su VitiniID. Registrar su propio VitiniID es gratuito."

                            const botonBorrarReserva = document.createElement("div")
                            botonBorrarReserva.classList.add("plaza_reservas_reservaConfirmada_botonV1")
                            botonBorrarReserva.textContent = "Borrar la información de esta reserva de la cache de mi navegador "
                            botonBorrarReserva.addEventListener("click", casaVitini.ui.vistas.alojamiento.reservaConfirmada.borrarReservaLocal)
                            marcoElastico.appendChild(botonBorrarReserva)
                            marcoElasticoRelatico.appendChild(marcoElastico)
                            const seccion = document.querySelector("main")

                            seccion.innerHTML = null
                            seccion.appendChild(marcoElasticoRelatico)

                            const contenedorTotal = document.createElement("div")
                            contenedorTotal.classList.add("contenedorTotal")
                            const tituloTotal = document.createElement("p")
                            tituloTotal.classList.add("tituloContenedor")
                            tituloTotal.textContent = "Total de la reserva"
                            contenedorTotal.appendChild(tituloTotal)
                            const totalReserva = document.createElement("p")
                            totalReserva.classList.add("totalReserva")
                            totalReserva.textContent = totalFinal + "$"
                            contenedorTotal.appendChild(totalReserva)
                            const masInfo = document.createElement("p")
                            masInfo.classList.add("botonV1")
                            masInfo.textContent = "Abrir desglose del total (Si desea ver el detalle del total pulse aquí)"
                            masInfo.addEventListener("click", () => {
                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const instanciaUID = ui.getAttribute("instanciaUID")
                                const contenedor = ui.querySelector("[componente=contenedor]")
                                main.appendChild(ui)

                                const titulo = document.createElement("div")
                                titulo.classList.add(
                                    "tituloGris",
                                    "padding10"
                                )
                                titulo.textContent = "Desglose de la reserva"
                                contenedor.appendChild(titulo)


                                const testInfo = document.createElement("div")
                                testInfo.classList.add(
                                    "textoJustificado", "padding10"
                                )
                                testInfo.textContent = "Aquí tiene desglose de importa de la reserva, detallando los cargos, impuestos y conceptos asociados."
                                contenedor.appendChild(testInfo)

                                const botonCerrar = document.createElement("div")
                                botonCerrar.classList.add("botonV1")
                                botonCerrar.textContent = "Cerrar y volver"
                                botonCerrar.setAttribute("boton", "cancelar")
                                botonCerrar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCerrar)

                                casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                    destino: `[instanciaUID="${instanciaUID}"] [componente=contenedor]`,
                                    contenedorFinanciero: contenedorFinanciero,
                                    modoUI: "plaza"
                                })
                                const contenedorFinancieroUI = ui.querySelector("[contenedor=financiero]")
                                contenedorFinancieroUI.classList.add(
                                    "borderRadius10"
                                )

                                const botonCerrarInferior = document.createElement("div")
                                botonCerrarInferior.classList.add("botonV1")
                                botonCerrarInferior.textContent = "Cerrar y volver"
                                botonCerrarInferior.setAttribute("boton", "cancelar")
                                botonCerrarInferior.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCerrarInferior)
                            })
                            contenedorTotal.appendChild(masInfo)
                            espacioDatosGlobalesReserva.appendChild(contenedorTotal)
                        } else {
                            const marcoElasticoRelatico = document.createElement("div")
                            marcoElasticoRelatico.classList.add("marcoElasticoRelativo")
                            const marcoElastico = document.createElement("div")
                            marcoElastico.classList.add("marcoElastico")
                            marcoElastico.style.alignItems = "stretch"
                            marcoElastico.style.gap = "4px"
                            const titulo = document.createElement("div")
                            titulo.classList.add("tituloGris")
                            titulo.textContent = "Nínguna reserva que mostrar"
                            marcoElastico.appendChild(titulo)

                            const contenedorBanner = document.createElement("a")
                            contenedorBanner.classList.add("plaza_reservas_reservaConfirmada_bannerV2")
                            contenedorBanner.textContent = "Esta página muestra el resumen de tu reserva confirmada, pero no encuentra ninguna reserva guardada en la caché local de tu navegador. Cuando haces una reserva, los datos de la reserva, luego de guardarse en el servidor de Casa Vitini, se guarda una copia local en tu navegador. Esto se hace para la comodidad del usuario. Para que pueda acceder al resumen de su reserva confirmada cómodamente. Pero si el usuario borra la caché de navegador o esta se borra por la configuración del navegador, ya no se puede acceder a la reserva porque ya no existe en la caché del navegador. Si quieres volver a ver el resumen de tu reserva, tienes varias opciones. La más cómoda e inmediata es registrar una nueva cuenta en Mi Casa para obtener tu VitiniID y poder acceder a tu cuenta de usuario donde podrá ver tus reservas. Otra opción es ponerte en contacto con nosotros. Para ellos ves al apartado Contacto, donde podrás obtener las distintas formas de contacto con nosotros y te responderemos lo antes posible. Ten en cuenta que, debido a las zonas horarias, si cuando nos llamas no estamos disponibles por la diferencia horaria, puedes enviarnos un correo o un mensaje instantáneo. La primera opción, registrar una cuenta, es una opción instantánea y es la que te recomendamos."
                            marcoElastico.appendChild(contenedorBanner)
                            const botonIniciarReserva = document.createElement("a")
                            botonIrARegistrarse.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIrARegistrarse.textContent = "Iniciar una nueva reserva"
                            botonIrARegistrarse.setAttribute("href", "/alojamiento")
                            botonIrARegistrarse.setAttribute("vista", "/alojamiento")
                            botonIrARegistrarse.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            marcoElastico.appendChild(botonIniciarReserva)
                            const botonIrARegistrarse = document.createElement("a")
                            botonIrARegistrarse.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIrARegistrarse.textContent = "Ir a crear una cuenta a MiCasa"
                            botonIrARegistrarse.setAttribute("href", "/micasa/crear_nueva_cuenta")
                            botonIrARegistrarse.setAttribute("vista", "/micasa/crear_nueva_cuenta")
                            botonIrARegistrarse.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            marcoElastico.appendChild(botonIrARegistrarse)
                            const botonInciarSession = document.createElement("a")
                            botonInciarSession.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonInciarSession.textContent = "Iniciar session con mi VitiniID en MiCasa"
                            botonInciarSession.setAttribute("href", "/micasa")
                            botonInciarSession.setAttribute("vista", "/micasa")
                            botonInciarSession.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            marcoElastico.appendChild(botonInciarSession)
                            marcoElasticoRelatico.appendChild(marcoElastico)
                            const seccion = document.querySelector("main")
                            seccion.innerHTML = null
                            seccion.appendChild(marcoElasticoRelatico)
                        }

                    },
                    borrarReservaLocal: () => {
                        document.body.style.overflow = 'hidden';
                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("contenedor", "opcionesCancelacion")
                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                        const contenidoAdvertenciaInmersiva = document.createElement("div")
                        contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                        contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                        const contenedorCancelacion = document.createElement("div")
                        contenedorCancelacion.classList.add("administracion_reservas_detallesReservas_cancelarReserva_contenedorCancelacion")
                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("tituloGris")
                        tituloCancelarReserva.textContent = "Borrar esta copia de mi reserva"
                        contenedorCancelacion.appendChild(tituloCancelarReserva)
                        const infoEliminarReserva = document.createElement("div")
                        infoEliminarReserva.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        infoEliminarReserva.style.marginTop = "0px"
                        infoEliminarReserva.textContent = "Cuando realizas una reserva y la confirmas. Una copia de la reserva se guarda en tu navegador en el almacén de memoria local que tiene el navegador. Esta copia de la reserva está para su comodidad. Para que pueda regresar a los datos de su reserva, sí visita Casa Vitini desde el mismo navegador donde realizó la reserva. Si desea borrar esta copia almacenada en la memoria local de su navegador, puede hacerlo pulsando el botón de abajo para eliminar o eliminando la cache de su navegador. Recuerde que si se registra y obtiene su VitiniID puede acceder a una copia de su reserva siempre que quiera. Para ello, debe de registrarse con la misma dirección de correo electrónico con la que confirmó la reserva."
                        contenedorCancelacion.appendChild(infoEliminarReserva)
                        const botonEliminarReserva = document.createElement("div")
                        botonEliminarReserva.classList.add("botonV1")
                        botonEliminarReserva.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonEliminarReserva.textContent = "Eliminar esta copia de la reserva almacenada localmente en mi navegador"
                        botonEliminarReserva.addEventListener("click", () => {
                            localStorage.removeItem("reservaConfirmada")
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            const navegacion = {
                                vista: "/alojamiento",
                                tipoOrigen: "menuNavegador"
                            }
                            return casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                        )
                        contenedorCancelacion.appendChild(botonEliminarReserva)
                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("botonV1")
                        botonCancelarProcesoCancelacion.textContent = "Cancelar, no eliminar y volver atras"
                        botonCancelarProcesoCancelacion.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                        contenedorCancelacion.appendChild(botonCancelarProcesoCancelacion)
                        contenidoAdvertenciaInmersiva.appendChild(contenedorCancelacion)
                        contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                        document.querySelector("main").appendChild(advertenciaInmersivaIU)
                    },
                    reservaConfirmadaUI: async () => {
                    },
                    obtenerMensajePrincipal: async () => {
                        const respuestaServidor = await casaVitini.shell.servidor({
                            zona: "plaza/reservas/mensajeReservaConfirmada"
                        })
                        if (respuestaServidor?.error) {
                            return respuestaServidor.error
                        } else if (respuestaServidor.ok) {
                            const mensajePrincipalEnReservaConfirmada = respuestaServidor.ok.mensajePrincipalEnReservaConfirmada
                            return mensajePrincipalEnReservaConfirmada
                        }
                    }
                },
                componentes: {
                    controladorCuentaAtras: function (data) {

                        let segundosDeLaCuentaAtras = data.segundosDeLaCuentaAtras
                        const zonaHoraria = data.zonaHoraria
                        const horaLimiteDelMismoDia = data.horaLimiteDelMismoDia
                        const instanciaUID = data.instanciaUID
                        const selectorDestino = `[instanciaUID="${instanciaUID}"] [contenedor=cuentaAtras]`

                        const selector = document.querySelector(selectorDestino);


                        const actualizarCuenta = () => {


                            const selectorRenderizado = document.querySelector(selectorDestino);


                            if (!selectorRenderizado) {

                                clearInterval(countdownInterval);
                            }

                            const days = Math.floor(segundosDeLaCuentaAtras / (24 * 60 * 60));
                            const hours = Math.floor((segundosDeLaCuentaAtras % (24 * 60 * 60)) / (60 * 60));
                            const minutes = Math.floor((segundosDeLaCuentaAtras % (60 * 60)) / 60);
                            const seconds = segundosDeLaCuentaAtras % 60;
                            let cuentraAtrasFormateadaUI

                            if (days > 0) {
                                cuentraAtrasFormateadaUI = `${days} Días ${hours} Horas ${minutes} Minutos ${seconds < 10 ? '0' : ''}${seconds} Segundos`;
                            } else if (hours > 0) {
                                cuentraAtrasFormateadaUI = `${hours} Horas ${minutes} Minutos ${seconds < 10 ? '0' : ''}${seconds} Segundos`;
                            } else if (minutes > 0) {
                                cuentraAtrasFormateadaUI = `${minutes} Minutos ${seconds < 10 ? '0' : ''}${seconds} Segundos`;
                            } else if (seconds > 0) {
                                cuentraAtrasFormateadaUI = `${seconds < 10 ? '0' : ''}${seconds} Segundos`;
                            }


                            selector.textContent = `Tiempo restante reservar hoy: ${cuentraAtrasFormateadaUI}`;


                            segundosDeLaCuentaAtras--;


                            if (segundosDeLaCuentaAtras < 0) {
                                clearInterval(countdownInterval);
                                const selectorContenedor = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                if (selectorContenedor) {
                                    selectorContenedor.innerHTML = null
                                    selectorContenedor.textContent = this.mensajeNoAceptacion({
                                        horaLimite: horaLimiteDelMismoDia,
                                        zonaHoraria: zonaHoraria
                                    });
                                }

                            }
                        }


                        const countdownInterval = setInterval(actualizarCuenta, 1000);


                        actualizarCuenta();
                    },
                    mensajeNoAceptacion: (data) => {
                        const horaLimite = data.horaLimite
                        const zonaHoraria = data.zonaHoraria
                        return `¡Ya no aceptamos reservas con fecha de entrada para hoy online pasadas las ${horaLimite} (Hora local en zona horaria de ${zonaHoraria} en formato 24H). Póngase en contacto con nosotros si desea hacer su reserva con fecha de entrada para hoy. Si desea realizar una reserva con fecha de entrada para mañana o más adelante, puede seguir realizándola online. Gracias.`
                    },























































































                },
                reservaLocal: {

                }
            },
            qr: {
                portada: {
                    arranque: async function () {

                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                        const parametros = granuladoURL.parametros

                        if (Object.keys(parametros).length === 1 && parametros.hasOwnProperty("reserva")) {


                            const preconfirmarReserva = {
                                zona: "componentes/resolverQR",
                                codigoIDV: "reserva",
                                reservaUID: parametros.reserva
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(preconfirmarReserva)


                            if (respuestaServidor?.error) {
                                return this.errorUI(respuestaServidor.error)
                            } else if (respuestaServidor.ok) {

                                const url = respuestaServidor.url
                                return casaVitini.shell.navegacion.controladorVista({
                                    vista: url
                                })
                            }
                        } else {
                            this.campoUI()
                        }
                    },
                    parametroNoReconocido: () => {


                        const main = document.querySelector("main")
                        main.innerHTML = null

                        const info = document.createElement("div")
                        info.classList.add(
                            "textoCentrado",
                            "negrita",
                            "padding12"

                        )
                        info.textContent = "No existe nada en esta dirección :)"
                        main.appendChild(info)

                        const boton = document.createElement("a")
                        boton.classList.add(
                            "botonV1",
                            "comportamientoBoton",
                            "areaSinDecoracionPredeterminada",
                            "margin10"
                        )
                        boton.textContent = "Ir a Administración"
                        boton.setAttribute("href", "/administracion")
                        boton.setAttribute("vista", "/administracion")
                        boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        main.appendChild(boton)

                    },
                    campoUI: () => {

                        const titulo = document.createElement('p');
                        titulo.className = 'titulo';
                        titulo.textContent = 'Escanea el codigo QR';
                        const marcoElasticoRelativo = document.createElement('div');
                        marcoElasticoRelativo.className = 'marcoElasticoRelativo';
                        const marcoElastico = document.createElement('div');
                        marcoElastico.className = 'marcoElastico';
                        const contenedorCrearCuenta = document.createElement('form');
                        contenedorCrearCuenta.className = 'miCasa_crearCuenta_contenedorCrearCuenta';
                        const texto = document.createElement('p');
                        texto.className = 'texto padding6';
                        texto.textContent = 'Casa Vitini puede proporcionar documentos como resguardos de reservas con códigos QR. Estos códigos están situados en la parte superior derecha de los documentos y son cuadrados compuestos por cuadrados internos. Estos códigos pueden ser leídos por teléfonos móviles, entre otros dispositivos. Para leer estos códigos, puedes usar la aplicación de cámara de tu teléfono. Si al abrir la cámara y escanear el código QR no aparece ninguna información, entra en los ajustes de la app de cámara y asegúrate de que esté activada la función de escanear códigos QR. Si aun así no consigues escanear el código QR, busca en la tienda de aplicaciones de tu teléfono aplicaciones para escanear códigos QR.';


                        const secction = document.querySelector("main")
                        secction.appendChild(titulo);
                        contenedorCrearCuenta.appendChild(texto);
                        marcoElastico.appendChild(contenedorCrearCuenta);
                        marcoElasticoRelativo.appendChild(marcoElastico);
                        secction.appendChild(marcoElasticoRelativo);
                    },
                    errorUI: (mensaje) => {

                        const titulo = document.createElement('p');
                        titulo.className = 'titulo';
                        titulo.textContent = 'Tu codigo qr ha producido un error';
                        const marcoElasticoRelativo = document.createElement('div');
                        marcoElasticoRelativo.className = 'marcoElasticoRelativo';
                        const marcoElastico = document.createElement('div');
                        marcoElastico.className = 'marcoElastico';
                        const contenedorCrearCuenta = document.createElement('form');
                        contenedorCrearCuenta.className = 'miCasa_crearCuenta_contenedorCrearCuenta';
                        const texto = document.createElement('p');
                        texto.classList.add(
                            "texto", "padding6",
                            "textoCentrado"
                        )
                        texto.textContent = mensaje


                        const secction = document.querySelector("main")
                        secction.appendChild(titulo);
                        contenedorCrearCuenta.appendChild(texto);
                        marcoElastico.appendChild(contenedorCrearCuenta);
                        marcoElasticoRelativo.appendChild(marcoElastico);
                        secction.appendChild(marcoElasticoRelativo);
                    },
                },

            },
            miCasa: {
                cuenta: {
                    portada: {
                        arranque: async () => {
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "/micasa")
                            const marcoCuenta = document.querySelector("[componente=marcoCuenta]")
                            const metadatos = {
                                zona: "IDX/estado"
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(metadatos)
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.usuario) {

                                const usuarioIDX = respuestaServidor?.usuario
                                const rolIDV = respuestaServidor?.rolIDV
                                const cuentaVerificadaIDV = respuestaServidor?.cuentaVerificadaIDV
                                const metadatosBanner = {
                                    usuarioIDX: usuarioIDX,
                                    rolIDV: rolIDV
                                }
                                let rolUI
                                if (rolIDV === "empleado") {
                                    rolUI = "empleado"
                                }
                                if (rolIDV === "cliente") {
                                    rolUI = "usuario"
                                }
                                if (cuentaVerificadaIDV === "no" && rolIDV !== "administrador") {
                                    const infoCuentaNoVerificada = document.createElement("p")
                                    infoCuentaNoVerificada.classList.add("infoCuenta")
                                    infoCuentaNoVerificada.innerHTML = `Tu cuenta de ${rolUI} no está verificada. Para verificar tu cuenta, valida tu correo electrónico. Si no verificas tu cuenta de ${rolUI}, no podrás acceder a tus reservas, no podras recuperar tu cuenta en caso de olvido de la contraseña y la cuenta se eliminará pasadas 24h. Si necesitas que te reenviemos otra vez el mail de verificación, entra en la sección de recuperación de cuentas yendo a Mi Casa > <a href="/micasa/recuperar_cuenta" class="enlace">Recuperar mi cuenta</a>`
                                    marcoCuenta.appendChild(infoCuentaNoVerificada)
                                }
                                if (cuentaVerificadaIDV === "no" && rolIDV === "administrador") {
                                    const infoCuentaNoVerificada = document.createElement("p")
                                    infoCuentaNoVerificada.classList.add("infoCuenta")
                                    infoCuentaNoVerificada.innerHTML = `Tu cuenta administrativa no está verificada. Para verificar tu cuenta, valida tu correo electrónico. Si no verificas tu cuenta administrativa, aunque podrás usar el panel de administración, no podrás acceder a tus reservas personales y si olvidas tu contraseña, no podrás recuperar tu cuenta a menos que te pongas en contacto con otro administrador. Las cuentas administrativas no verificadas no caducan con el tiempo. Si necesitas que te reenviemos otra vez el mail de verificación, entra en la sección de recuperación de cuentas yendo a Mi Casa > <a href="/micasa/recuperar_cuenta" class="enlace">Recuperar mi cuenta</a>`
                                    marcoCuenta.appendChild(infoCuentaNoVerificada)
                                }
                                const contenedorBanner = document.createElement("div")
                                contenedorBanner.classList.add("miCasa_marcoIDX_contenedor")
                                const bannerIDX = casaVitini.ui.vistas.miCasa.componentes.bannerIDX(metadatosBanner)
                                contenedorBanner.appendChild(bannerIDX)
                                marcoCuenta.appendChild(contenedorBanner)
                                const botonReservas = document.createElement("a")
                                botonReservas.setAttribute("class", "botonUsuario")
                                botonReservas.setAttribute("href", "/micasa/reservas")
                                botonReservas.setAttribute("vista", "/micasa/reservas")
                                botonReservas.classList.add("miCasa_marcoUsuario_opcion")
                                botonReservas.textContent = "Mis Reservas"
                                botonReservas.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                const botonModificarIDX = document.createElement("a")
                                botonModificarIDX.setAttribute("class", "botonUsuario")
                                botonModificarIDX.setAttribute("href", "/micasa/modificar_nombre_de_usuario")
                                botonModificarIDX.setAttribute("vista", "/micasa/modificar_nombre_de_usuario")
                                botonModificarIDX.classList.add("miCasa_marcoUsuario_opcion")
                                botonModificarIDX.textContent = "Modificar nombre de usuario"
                                botonModificarIDX.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                const botonDatosPersonales = document.createElement("a")
                                botonDatosPersonales.setAttribute("class", "botonUsuario")
                                botonDatosPersonales.setAttribute("href", "/micasa/mis_datos_personales")
                                botonDatosPersonales.setAttribute("vista", "/micasa/mis_datos_personales")
                                botonDatosPersonales.classList.add("miCasa_marcoUsuario_opcion")
                                botonDatosPersonales.textContent = "Mis datos personales"
                                botonDatosPersonales.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                const botonCambiarContrasena = document.createElement("a")
                                botonCambiarContrasena.setAttribute("class", "botonUsuario")
                                botonCambiarContrasena.setAttribute("href", "/micasa/cambiar_clave")
                                botonCambiarContrasena.setAttribute("vista", "/micasa/cambiar_clave")
                                botonCambiarContrasena.classList.add("miCasa_marcoUsuario_opcion")
                                botonCambiarContrasena.textContent = "Cambiar contrasena"
                                botonCambiarContrasena.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                const botonSessionesActivas = document.createElement("a")
                                botonSessionesActivas.setAttribute("class", "botonUsuario")
                                botonSessionesActivas.setAttribute("href", "/micasa/sessiones")
                                botonSessionesActivas.setAttribute("vista", "/micasa/sessiones")
                                botonSessionesActivas.classList.add("miCasa_marcoUsuario_opcion")
                                botonSessionesActivas.textContent = "Sessiones activas"
                                botonSessionesActivas.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                const botonZonaHoraria = document.createElement("a")
                                botonZonaHoraria.setAttribute("class", "botonUsuario")
                                botonZonaHoraria.setAttribute("href", "/micasa/zona_horaria")
                                botonZonaHoraria.setAttribute("vista", "/micasa/zona_horaria")
                                botonZonaHoraria.classList.add("miCasa_marcoUsuario_opcion")
                                botonZonaHoraria.textContent = "Configuración de la zona horaria"
                                botonZonaHoraria.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                const botonCerrarSession = document.createElement("a")
                                botonCerrarSession.setAttribute("class", "botonUsuario")
                                botonCerrarSession.setAttribute("componente", "botonCerrarSession")
                                botonCerrarSession.classList.add("miCasa_marcoUsuario_opcion")
                                botonCerrarSession.textContent = "Cerrar session"
                                botonCerrarSession.addEventListener("click", casaVitini.ui.vistas.miCasa.cerrarSession)
                                const botonEliminarCuenta = document.createElement("a")
                                botonEliminarCuenta.setAttribute("class", "botonUsuario")
                                botonEliminarCuenta.setAttribute("href", "/micasa/eliminar_cuenta")
                                botonEliminarCuenta.setAttribute("vista", "/micasa/eliminar_cuenta")
                                botonEliminarCuenta.setAttribute("componente", "botonEliminarCuenta")
                                botonEliminarCuenta.classList.add("miCasa_marcoUsuario_opcion")
                                botonEliminarCuenta.textContent = "Eliminar cuenta"
                                botonEliminarCuenta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                                const marcoUsuario = document.createElement("div")
                                marcoUsuario.classList.add("miCasa_marcoUsuario")
                                marcoUsuario.setAttribute("componente", "marcoUsuario")
                                if (rolIDV === "cliente") {
                                    marcoUsuario.appendChild(botonReservas)
                                    marcoUsuario.appendChild(botonModificarIDX)
                                    marcoUsuario.appendChild(botonDatosPersonales)
                                    marcoUsuario.appendChild(botonSessionesActivas)
                                    marcoUsuario.appendChild(botonCambiarContrasena)
                                    marcoUsuario.appendChild(botonEliminarCuenta)
                                    marcoUsuario.appendChild(botonCerrarSession)
                                }
                                if (rolIDV === "administrador" || rolIDV === "empleado") {
                                    marcoUsuario.appendChild(botonReservas)
                                    marcoUsuario.appendChild(botonModificarIDX)
                                    marcoUsuario.appendChild(botonDatosPersonales)
                                    marcoUsuario.appendChild(botonSessionesActivas)

                                    marcoUsuario.appendChild(botonCambiarContrasena)
                                    marcoUsuario.appendChild(botonEliminarCuenta)
                                    marcoUsuario.appendChild(botonCerrarSession)
                                }
                                marcoCuenta.appendChild(marcoUsuario)
                            }
                        },
                    },
                    datosPersonales: {
                        arranque: async () => {
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "/micasa")
                            const contenedorDatosPersonales = document.querySelector("[componente=marcoCuenta]")
                            const transaccion = {
                                zona: "/miCasa/datosPersonalesDesdeMiCasa"
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                const detallesUsuario = respuestaServidor?.ok
                                const usuarioIDX = detallesUsuario.usuarioIDX
                                const rolIDV = detallesUsuario.rolIDV
                                const nombre = detallesUsuario.nombre || ""
                                const primerApellido = detallesUsuario.primerApellido || ""
                                const segundoApellido = detallesUsuario.segundoApellido || ""
                                const pasaporte = detallesUsuario.pasaporte || ""
                                const telefono = detallesUsuario.telefono || ""
                                const mail = detallesUsuario.mail || ""
                                const datosBanner = {
                                    usuarioIDX: usuarioIDX,
                                    rolIDV: rolIDV
                                }

                                const contenedorBanner = document.createElement("div")
                                contenedorBanner.classList.add("miCasa_marcoIDX_contenedor")
                                const contenedorUsuarioIDX = casaVitini.ui.vistas.miCasa.componentes.bannerIDX(datosBanner)
                                contenedorBanner.appendChild(contenedorUsuarioIDX)
                                contenedorDatosPersonales.appendChild(contenedorBanner)
                                const contenedorDatosUsuario = document.createElement("div")
                                contenedorDatosUsuario.classList.add("detallesUsuario_contenedorDatosUsuario")
                                const nombreUI = document.createElement("a")
                                nombreUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                                let titulo = document.createElement("p")
                                titulo.classList.add("tituloDato")
                                titulo.textContent = "Nombre"
                                nombreUI.appendChild(titulo)
                                const campoNombre = document.createElement("input")
                                campoNombre.classList.add("detallesUsuario_campoDatosUsuario")
                                campoNombre.setAttribute("campo", "nombre")
                                campoNombre.setAttribute("valorInicial", nombre)
                                campoNombre.value = nombre
                                nombreUI.appendChild(campoNombre)
                                contenedorDatosUsuario.appendChild(nombreUI)
                                const primerApellidoUI = document.createElement("a")
                                primerApellidoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                                titulo = document.createElement("p")
                                titulo.classList.add("tituloDato")
                                titulo.textContent = "Primero apellido"
                                primerApellidoUI.appendChild(titulo)
                                const campoPrimerApellido = document.createElement("input")
                                campoPrimerApellido.classList.add("detallesUsuario_campoDatosUsuario")
                                campoPrimerApellido.setAttribute("campo", "primerApellido")
                                campoPrimerApellido.setAttribute("valorInicial", primerApellido)
                                campoPrimerApellido.value = primerApellido
                                primerApellidoUI.appendChild(campoPrimerApellido)
                                contenedorDatosUsuario.appendChild(primerApellidoUI)
                                const segundoApellidoUI = document.createElement("a")
                                segundoApellidoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                                titulo = document.createElement("p")
                                titulo.classList.add("tituloDato")
                                titulo.textContent = "Segundo apellido"
                                segundoApellidoUI.appendChild(titulo)
                                const campoSegundoApellido = document.createElement("input")
                                campoSegundoApellido.classList.add("detallesUsuario_campoDatosUsuario")
                                campoSegundoApellido.setAttribute("campo", "segundoApellido")
                                campoSegundoApellido.setAttribute("valorInicial", segundoApellido)
                                campoSegundoApellido.value = segundoApellido
                                segundoApellidoUI.appendChild(campoSegundoApellido)
                                contenedorDatosUsuario.appendChild(segundoApellidoUI)
                                const pasaporteUI = document.createElement("a")
                                pasaporteUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                                titulo = document.createElement("p")
                                titulo.classList.add("tituloDato")

                                titulo.textContent = "Pasaporte"
                                pasaporteUI.appendChild(titulo)
                                const campoPasaporte = document.createElement("input")
                                campoPasaporte.classList.add("detallesUsuario_campoDatosUsuario")
                                campoPasaporte.setAttribute("campo", "pasaporte")
                                campoPasaporte.setAttribute("valorInicial", pasaporte)
                                campoPasaporte.value = pasaporte
                                pasaporteUI.appendChild(campoPasaporte)
                                contenedorDatosUsuario.appendChild(pasaporteUI)
                                const telefonoUI = document.createElement("a")
                                telefonoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                                titulo = document.createElement("p")
                                titulo.classList.add("tituloDato")
                                titulo.textContent = "Teléfono"
                                telefonoUI.appendChild(titulo)
                                const campoTelefono = document.createElement("input")
                                campoTelefono.classList.add("detallesUsuario_campoDatosUsuario")
                                campoTelefono.setAttribute("campo", "telefono")
                                campoTelefono.setAttribute("valorInicial", telefono)
                                campoTelefono.value = telefono
                                telefonoUI.appendChild(campoTelefono)
                                contenedorDatosUsuario.appendChild(telefonoUI)
                                const mailUI = document.createElement("a")
                                mailUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                                titulo = document.createElement("p")
                                titulo.classList.add("tituloDato")
                                titulo.textContent = "Correo electroníco"
                                mailUI.appendChild(titulo)
                                const campomail = document.createElement("input")
                                campomail.classList.add("detallesUsuario_campoDatosUsuario")
                                campomail.setAttribute("campo", "mail")
                                campomail.setAttribute("valorInicial", mail)
                                campomail.value = mail
                                mailUI.appendChild(campomail)
                                contenedorDatosUsuario.appendChild(mailUI)
                                contenedorDatosPersonales.appendChild(contenedorDatosUsuario)
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                                contenedorBotones.setAttribute("componente", "contenedorBotones")
                                const botonGuardarCambios = document.createElement("div")
                                botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                                botonGuardarCambios.addEventListener("click", casaVitini.ui.vistas.miCasa.cuenta.datosPersonales.guardarCambios)
                                botonGuardarCambios.textContent = "Guardar cambios"
                                contenedorBotones.appendChild(botonGuardarCambios)
                                const botonCancelarCambios = document.createElement("div")
                                botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                                botonCancelarCambios.textContent = "Cancelar cambios"
                                botonCancelarCambios.addEventListener("click", casaVitini.ui.vistas.miCasa.cuenta.datosPersonales.cancelarCambios)
                                contenedorBotones.appendChild(botonCancelarCambios)
                                contenedorDatosPersonales.appendChild(contenedorBotones)
                                const campos = document.querySelectorAll("[campo]")
                                const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")

                                const controladorCampos = () => {
                                    let estadoUI = "ocultar"
                                    campos.forEach((campo) => {
                                        const campoValor = campo.value
                                        const valorInicial = campo.getAttribute("valorInicial")

                                        if (campoValor !== valorInicial) {
                                            selectorContenedorBotones.style.display = "flex"
                                            estadoUI = "activado"
                                        }
                                        if (estadoUI === "ocultar") {
                                            selectorContenedorBotones.removeAttribute("style")
                                        }

                                    })
                                }
                                campos.forEach((campo) => {
                                    campo.addEventListener("input", controladorCampos)
                                })
                            }
                        },
                        cancelarCambios: () => {
                            const campos = document.querySelectorAll("[campo]")
                            campos.forEach((campo) => {
                                const valorInicial = campo.getAttribute("valorInicial")
                                campo.value = valorInicial
                            })
                            const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                            selectorContenedorBotones.removeAttribute("style")
                        },
                        guardarCambios: async () => {
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Actualizando tu datos..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje,
                                botonCancelar: "ocultar"
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const campos = document.querySelectorAll("[campo]")
                            const datosParaActualizar = {
                                zona: "miCasa/actualizarDatosUsuarioDesdeMiCasa",
                            }
                            campos.forEach((campo) => {
                                const campoID = campo.getAttribute("campo")
                                const campoDato = campo.value
                                datosParaActualizar[campoID] = campoDato
                            })
                            const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)

                            const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!pantallaDeCargaRenderizada) { return }
                            pantallaDeCargaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const detallesUsuario = respuestaServidor?.datosActualizados
                                const nombre = detallesUsuario.nombre
                                const primerApellido = detallesUsuario.primerApellido
                                const segundoApellido = detallesUsuario.segundoApellido
                                const pasaporte = detallesUsuario.pasaporte
                                const telefono = detallesUsuario.telefono
                                const mail = detallesUsuario.mail
                                campos.forEach((campo) => {
                                    const campoID = campo.getAttribute("campo")
                                    campo.value = detallesUsuario[campoID]
                                    campo.setAttribute("valorInicial", detallesUsuario[campoID])
                                })
                                const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                                selectorContenedorBotones.removeAttribute("style")
                            }
                        }
                    },
                    sessionesActivas: {
                        arranque: async () => {
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "/micasa")
                            const espacioBotones = document.querySelector("[componente=espacioBotones]")
                            const espacioSessiones = document.querySelector("[componente=espacioSessiones]")
                            const botonCerrarRestoSessiones = document.createElement("div")
                            botonCerrarRestoSessiones.classList.add("miCasa_sessiones_botonV2")
                            botonCerrarRestoSessiones.textContent = "Cerrar el resto de sessiones menos esta"
                            botonCerrarRestoSessiones.addEventListener("click", casaVitini.ui.vistas.miCasa.cuenta.sessionesActivas.cerrarTodasSessioneMenosUna)
                            espacioBotones.appendChild(botonCerrarRestoSessiones)
                            const transaccion = {
                                zona: "miCasa/obtenerSessionesActivasDesdeMiCasa"
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const sessionesActivas = respuestaServidor?.sessionesActivas

                                if (sessionesActivas.length === 0) {

                                } else {
                                    const sessionIDX = respuestaServidor?.sessionIDX
                                    sessionesActivas.forEach((detallesSession) => {
                                        const sessionIDX_detallesSession = detallesSession.sessionIDX
                                        const caducidadUTC = detallesSession.caducidadUTC
                                        const tiempoRestante = detallesSession.tiempoRestante
                                        const ip = detallesSession.ip
                                        const userAgent = detallesSession.userAgent
                                        let sessionActual_UI = "(En otro equipo)"
                                        if (sessionIDX_detallesSession === sessionIDX) {
                                            sessionActual_UI = "(Session actual)"
                                        }
                                        const contenedorSession = document.createElement("div")
                                        contenedorSession.classList.add("miCasa_sessiones_contenedorSession")
                                        contenedorSession.setAttribute("componente", "contenedorSession")
                                        contenedorSession.setAttribute("sessionIDX", sessionIDX_detallesSession)
                                        contenedorSession.setAttribute("sessionActual", sessionIDX)
                                        const contenedorSessionID = document.createElement("div")
                                        contenedorSessionID.classList.add("miCasa_sessiones_contenedorBloque")
                                        const sessionInfo = document.createElement("div")
                                        sessionInfo.classList.add("miCasa_sessiones_texto")
                                        sessionInfo.classList.add("negrita")
                                        sessionInfo.textContent = "Vitini IDX " + sessionActual_UI
                                        contenedorSessionID.appendChild(sessionInfo)
                                        const sessionIDX_UI = document.createElement("div")
                                        sessionIDX_UI.classList.add("miCasa_sessiones_texto")
                                        sessionIDX_UI.textContent = sessionIDX_detallesSession
                                        contenedorSessionID.appendChild(sessionIDX_UI)
                                        contenedorSession.appendChild(contenedorSessionID)
                                        const ipSessionUI = document.createElement("div")
                                        ipSessionUI.classList.add("miCasa_sessiones_textoIP")
                                        ipSessionUI.textContent = ip
                                        contenedorSession.appendChild(ipSessionUI)
                                        const userAgentUI = document.createElement("div")
                                        userAgentUI.classList.add("miCasa_sessiones_textoIP")
                                        userAgentUI.textContent = userAgent
                                        contenedorSession.appendChild(userAgentUI)
                                        const contenedorCaducidad = document.createElement("div")
                                        contenedorCaducidad.classList.add("miCasa_sessiones_contenedorBloque")
                                        const caducidadInfo = document.createElement("div")
                                        caducidadInfo.classList.add("miCasa_sessiones_texto")
                                        caducidadInfo.textContent = "Caducidad de la información de sesión local en hora UTC si no se produce una nueva petición:"
                                        contenedorCaducidad.appendChild(caducidadInfo)
                                        const caducidadESP_UI = document.createElement("div")
                                        caducidadESP_UI.classList.add("miCasa_sessiones_texto")
                                        caducidadESP_UI.classList.add("negrita")
                                        caducidadESP_UI.textContent = caducidadUTC
                                        contenedorCaducidad.appendChild(caducidadESP_UI)
                                        const tiempoRestante_UI = document.createElement("div")
                                        tiempoRestante_UI.classList.add("miCasa_sessiones_texto")
                                        tiempoRestante_UI.classList.add("negrita")
                                        tiempoRestante_UI.textContent = tiempoRestante
                                        contenedorCaducidad.appendChild(tiempoRestante_UI)
                                        contenedorSession.appendChild(contenedorCaducidad)
                                        const botonCerrarSession = document.createElement("div")
                                        botonCerrarSession.classList.add("miCasa_sessiones_botonCerrarSession")
                                        botonCerrarSession.addEventListener("click", casaVitini.ui.vistas.miCasa.cuenta.sessionesActivas.cerraSessionUnica)
                                        botonCerrarSession.textContent = "Cerrar session"
                                        contenedorSession.appendChild(botonCerrarSession)
                                        espacioSessiones.appendChild(contenedorSession)
                                    })
                                }
                            }
                        },
                        cerraSessionUnica: async (sessions) => {
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Cerrando la session seleccionada..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje,
                                botonCancelar: "ocultar"
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const sessionIDX = sessions.target.closest("[sessionIDX]")
                            const transaccion = {
                                zona: "miCasa/cerrarSessionSelectivamenteDesdeMiCasa",
                                tipoOperacion: "cerrarUna",
                                sessionIDX: sessionIDX.getAttribute("sessionIDX")
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!pantallaDeCargaRenderizada) { return }
                            pantallaDeCargaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const sessionActual = sessionIDX.getAttribute("sessionActual")
                                const sessionIDX_ = sessionIDX.getAttribute("sessionIDX")
                                sessionIDX.remove()
                                if (sessionActual === sessionIDX_) {
                                    const navegacion = {
                                        "vista": "/miCasa/sessiones",
                                        "tipoOrigen": "menuNavegador"
                                    }
                                    return casaVitini.shell.navegacion.controladorVista(navegacion)
                                }
                            }
                        },
                        cerrarTodasSessioneMenosUna: async () => {
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Cerrando todas la sessiones menos esta..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje,
                                botonCancelar: "ocultar"
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "miCasa/cerrarSessionSelectivamenteDesdeMiCasa",
                                tipoOperacion: "todasMenosActual",
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!pantallaDeCargaRenderizada) { return }
                            pantallaDeCargaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const sessionActual = document.querySelectorAll("[sessionIDX]")
                                sessionActual.forEach((sessionRenderizada) => {
                                    const sessionIDXActual = sessionRenderizada.getAttribute("sessionActual")
                                    const sessionIDXBloque = sessionRenderizada.getAttribute("sessionIDX")
                                    if (sessionIDXActual !== sessionIDXBloque) {
                                        sessionRenderizada.remove()
                                    }
                                })
                            }
                        }
                    },
                    cambiarClave: {
                        portada: {
                            arranque: () => {
                                const main = document.querySelector("main")
                                main.setAttribute("zonaCSS", "/micasa")
                                const botonCambiarClave = document.querySelector("[componente=botonCambiarClave]")
                                botonCambiarClave.addEventListener("click", casaVitini.ui.vistas.miCasa.cuenta.cambiarClave.portada.cambiarClaveTransactor)
                            },
                            cambiarClaveTransactor: async () => {
                                const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")

                                const mensaje = "Actualizando contraseña del usuario..."
                                const datosPantallaSuperpuesta = {
                                    instanciaUID: instanciaUIDPantallaDeCarga,
                                    mensaje: mensaje
                                }
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                                const claveActual = document.querySelector("[campo=claveActual]").value
                                const claveNueva = document.querySelector("[campo=claveNueva]").value
                                const claveConfirmada = document.querySelector("[campo=claveConfirmada]").value
                                const transaccion = {
                                    zona: "miCasa/actualizarClaveUsuarioDesdeMicasa",
                                    claveActual: claveActual,
                                    claveNueva: claveNueva,
                                    claveConfirmada: claveConfirmada
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                if (!pantallaDeCargaRenderizada) { return }
                                pantallaDeCargaRenderizada.remove()

                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {

                                    instanciaRenderizada.querySelector("[componente=formulario]").remove()
                                    const marcoCuenta = instanciaRenderizada.querySelector("[componente=marcoCuenta]")

                                    const info = document.createElement("div")
                                    info.classList.add("miCuenta_cambiarClave_testo")
                                    info.classList.add("negrita")
                                    info.textContent = "Se ha cambiado la clave correctamente, ya puede usarla. También se recomienda que revise las sesiones abiertas. Diríjase a Mi Casa > Sesiones"
                                    marcoCuenta.appendChild(info)

                                }
                            }
                        }
                    },
                    eliminarCuenta: {
                        portada: {
                            arranque: () => {
                                const main = document.querySelector("main")
                                main.setAttribute("zonaCSS", "/micasa")
                                const botonCambiarClave = document.querySelector("[componente=botonEliminarCuenta]")
                                botonCambiarClave.addEventListener("click", casaVitini.ui.vistas.miCasa.cuenta.eliminarCuenta.portada.transactor)
                            },
                            transactor: async () => {
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                const mensaje = "Eliminando tu VitiniID..."
                                const datosPantallaSuperpuesta = {
                                    instanciaUID: instanciaUID,
                                    mensaje: mensaje,
                                    botonCancelar: "ocultar"
                                }
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                const clave = document.querySelector("[campo=clave]").value
                                const transaccion = {
                                    zona: "miCasa/eliminarCuentaDesdeMiCasa",
                                    clave: clave
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                if (!pantallaDeCargaRenderizada) { return }
                                pantallaDeCargaRenderizada.remove()
                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {


                                    await casaVitini.shell.controladoresUI.controladorEstadoIDX()

                                    const main = document.querySelector("main")
                                    main.innerHTML = null

                                    const informacion = "Se ha elegido tu cuenta correctamente. Sentimos que te vayas vuelve cuando quieras."
                                    const info = document.createElement("div")
                                    info.classList.add(
                                        "margin10",
                                        "textoCentrado",
                                        "negritas"
                                    )
                                    info.textContent = informacion
                                    main.appendChild(info)

                                }
                            }
                        }
                    },
                    modificarIDX: {
                        arranque: async () => {
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "/micasa")
                            const botonActualizarIDX = document.querySelector("[componente=botonCambiarIDX]")
                            botonActualizarIDX.addEventListener("click", casaVitini.ui.vistas.miCasa.cuenta.modificarIDX.guardarCambios)
                        },
                        guardarCambios: async () => {
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Actualizando tu VitiniID..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje,
                                botonCancelar: "ocultar"
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const nuevoIDX = document.querySelector("[campo=nuevoIDX]")
                            const datosParaActualizar = {
                                zona: "miCasa/actualizarIDX",
                                nuevoIDX: nuevoIDX.value
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                            const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!pantallaDeCargaRenderizada) { return }
                            pantallaDeCargaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                nuevoIDX.value = null
                                casaVitini.shell.controladoresUI.controladorEstadoIDX()
                            }
                        },
                    },
                    reservas: {
                        arranque: async function () {
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "/micasa/reservas")
                            const granuladoURL = casaVitini.utilidades.granuladorURL()
                            const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                            const parametros = granuladoURL.parametros
                            const directorios = granuladoURL.directorios

                            if (parametros.reserva) {
                                const reservaUID = parametros.reserva
                                return this.detallesReserva(reservaUID)

                            } else {
                                this.marcoUI()
                                const parametrosFormatoURL = granuladoURL.parametros
                                const parametrosFormatoIDV = {}
                                Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                                    const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                                    let nombreColumnaIDV
                                    if ((valorParametroURL)?.toLowerCase() === "reserva") {
                                        nombreColumnaIDV = "reservaUID"
                                    } else if ((valorParametroURL)?.toLowerCase() === "estado_pago") {
                                        nombreColumnaIDV = "estadoPagoIDV"
                                    } else if ((valorParametroURL)?.toLowerCase() === "estado_reserva") {
                                        nombreColumnaIDV = "estadoReservaIDV"
                                    } else if (valorParametroURL) {
                                        nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                                    }
                                    parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                                })
                                return casaVitini.ui.vistas.miCasa.cuenta.reservas.listaReservas.mostrarReservasResueltas(parametrosFormatoIDV)
                            }



                        },
                        marcoUI: () => {
                            const main = document.querySelector("main")

                            const marcoElasticoRelatico = document.createElement("div")
                            marcoElasticoRelatico.classList.add(
                                "marcoElasticoRelativo"
                            )

                            const espacioMisReservas = document.createElement("div")
                            espacioMisReservas.classList.add("marocCuenta")
                            espacioMisReservas.setAttribute("componente", "espacioMisReservas")
                            marcoElasticoRelatico.appendChild(espacioMisReservas)
                            const contenedorResultados = document.createElement("div")
                            contenedorResultados.classList.add(
                                "flexVertical"
                            )
                            contenedorResultados.setAttribute("contenedor", "misReservas")
                            marcoElasticoRelatico.appendChild(contenedorResultados)
                            main.appendChild(marcoElasticoRelatico)
                        },
                        listaReservas: {
                            mostrarReservasResueltas: async function (transaccion) {
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                const selectorEspacio = document.querySelector("[componente=espacioMisReservas]")
                                selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)

                                const main = document.querySelector("main")

                                const origen = transaccion.origen
                                delete transaccion.origen
                                delete transaccion.tipoConstruccionGrid
                                const granuladoURL = casaVitini.utilidades.granuladorURL()

                                const paginaTipo = transaccion.paginaTipo
                                let nombreColumnaURL
                                const nombreColumna = transaccion.nombreColumna
                                transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                                if ((nombreColumna)?.toLowerCase() === "estadoreservaidv") {
                                    nombreColumnaURL = "estado_reserva"
                                } else
                                    if ((nombreColumna)?.toLowerCase() === "estadopagoidv") {
                                        nombreColumnaURL = "estado_pago"
                                    } else
                                        if ((nombreColumna)?.toLowerCase() === "reservauid") {
                                            nombreColumnaURL = "reserva"
                                        } else if (nombreColumna) {
                                            nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                                        }

                                const selectorAlmacen = document.querySelector("[areaGrid=grisReservasDelCliente]")?.getAttribute("almacen") || "{}"
                                const almacen = JSON.parse(selectorAlmacen)
                                const clienteUID = transaccion.clienteUID || almacen?.clienteUID


                                const respuestaServidor = await casaVitini.shell.servidor({
                                    zona: "miCasa/misReservas/listarMisReservas",
                                    pagina: transaccion.pagina,
                                    nombreColumna: nombreColumna,
                                    sentidoColumna: transaccion.sentidoColumna,
                                })


                                const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                                if (!instanciaRenderizada) {
                                    return
                                }


                                if (respuestaServidor?.error) {
                                    const espacioClientes = document.querySelector("[componente=espacioMisReservas]")
                                    document.querySelector("[gridUID=gridMisReservas]")?.remove()
                                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                                    const estadoBusquedaUI = document.createElement("div")
                                    estadoBusquedaUI.classList.add("infoCuenta")
                                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                                    estadoBusquedaUI.textContent = respuestaServidor.error
                                    espacioClientes.appendChild(estadoBusquedaUI)
                                    return

                                }
                                if (respuestaServidor.totalReservas === 0) {
                                    const espacioClientes = document.querySelector("[componente=espacioMisReservas]")
                                    document.querySelector("[gridUID=gridMisReservas]")?.remove()
                                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                                    const estadoBusquedaUI = document.createElement("div")
                                    estadoBusquedaUI.classList.add("infoCuenta")
                                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                                    estadoBusquedaUI.textContent = "No se han encontrado clientes"
                                    espacioClientes.appendChild(estadoBusquedaUI)
                                    return
                                } else if (respuestaServidor.totalReservas === 1) {
                                    const reservaUID = respuestaServidor.reservas[0].reservaUID
                                    return casaVitini.shell.navegacion.controladorVista({
                                        vista: "/micasa/reservas/reserva:" + reservaUID,

                                    })
                                }
                                document.querySelector("[componente=estadoBusqueda]")?.remove()
                                const misReservas = respuestaServidor.reservas
                                const paginasTotales = respuestaServidor.paginasTotales
                                const pagina = respuestaServidor.pagina
                                const sentidoColumna = respuestaServidor.sentidoColumna

                                const columnasGrid = [
                                    {
                                        columnaUI: "Reserva",
                                        columnaIDV: "reservaUID",
                                    },
                                    {
                                        columnaUI: "Fecha de entrada",
                                        columnaIDV: "fechaEntrada",
                                    },
                                    {
                                        columnaUI: "Fecha de salida",
                                        columnaIDV: "fechaSalida",
                                    },
                                    {
                                        columnaUI: "Estado de la reserva",
                                        columnaIDV: "estadoReservaIDV",
                                    },
                                    {
                                        columnaUI: "Estado del pago",
                                        columnaIDV: "estadoPagoIDV",
                                    },
                                    {
                                        columnaUI: "Fecha de la reserva",
                                        columnaIDV: "fechaCreacion",
                                    },
                                ]
                                const parametrosFinales = {
                                }

                                if (nombreColumna) {
                                    parametrosFinales.nombre_columna = nombreColumnaURL
                                    parametrosFinales.sentido_columna = sentidoColumna
                                }
                                if (pagina > 1 && paginasTotales > 1) {
                                    parametrosFinales.pagina = pagina
                                }
                                const estructuraParametrosFinales = []
                                for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                                    const estructura = `${parametroFinal}:${valorFinal}`
                                    estructuraParametrosFinales.push(estructura)
                                }
                                let parametrosURLFInal = ""
                                if (estructuraParametrosFinales.length > 0) {
                                    parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                                }


                                const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal
                                casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                                    metodoSalida: "ui.vistas.miCasa.cuenta.reservas.listaReservas.mostrarReservasResueltas",
                                    configuracionGrid: {
                                        filas: misReservas,
                                        almacen: {
                                            clienteUID: clienteUID,
                                        },
                                        sentidoColumna: sentidoColumna,
                                        nombreColumna: nombreColumna,
                                        pagina: pagina,
                                        destino: "[contenedor=misReservas]",
                                        columnasGrid: columnasGrid,
                                        gridUID: "miCasas_reservasDelCliente",
                                        mascaraURL: {
                                            mascara: "/micasa/reservas/reserva:",
                                            parametro: "reservaUID"
                                        },
                                    },
                                    configuracionPaginador: {
                                        paginasTotales: paginasTotales,
                                        granuladoURL: {
                                            parametros: parametrosFinales,
                                            directoriosFusion: granuladoURL.directoriosFusion
                                        },
                                    }
                                })

                                const titulo = "ADminstar reservas"
                                const estado = {
                                    zona: constructorURLFinal,
                                    EstadoInternoZona: "estado",
                                    tipoCambio: "parcial",
                                    componenteExistente: "espacioMisReservas",
                                    funcionPersonalizada: "ui.vistas.miCasa.cuenta.reservas.listaReservas.mostrarReservasResueltas",
                                    args: transaccion
                                }

                                if (origen === "url" || origen === "botonMostrarClientes") {
                                    window.history.replaceState(estado, titulo, constructorURLFinal);
                                }
                                if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                                    window.history.pushState(estado, titulo, constructorURLFinal);
                                }
                                if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                                    window.history.replaceState(estado, titulo, constructorURLFinal);
                                }
                            },
                            guardarCambios: async () => {
                                const nuevoIDX = document.querySelector("[campo=nuevoIDX]")
                                const datosParaActualizar = {
                                    zona: "miCasa/actualizarIDX",
                                    nuevoIDX: nuevoIDX.value
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    nuevoIDX.value = null


                                    casaVitini.shell.controladoresUI.controladorEstadoIDX()
                                }
                            },
                        },
                        detallesReserva: async (reservaUID) => {

                            const main = document.querySelector("main")
                            const instanciaUID = main.getAttribute("instanciaUID")
                            const granuladoURL = casaVitini.utilidades.granuladorURL()

                            const spinner = casaVitini.ui.componentes.spinnerSimple()
                            main.appendChild(spinner)
                            const respuestaServidor = await casaVitini.shell.servidor({
                                zona: "miCasa/misReservas/detallesReserva",
                                reservaUID: reservaUID
                            })
                            const ui_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!ui_renderizada) { return }
                            ui_renderizada.innerHTML = null

                            if (respuestaServidor?.error) {
                                ui_renderizada.textContent = respuestaServidor?.error
                            }
                            if (respuestaServidor?.ok) {

                                const marcoElastico = document.createElement("div")
                                marcoElastico.classList.add(
                                    "marcoElasticoRelativo"
                                )
                                main.appendChild(marcoElastico)
                                const reservaUI = await casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.despliege({
                                    reservaUID,
                                    configuracionVista: "publica"
                                })
                                marcoElastico.appendChild(reservaUI)


                                const parametros = granuladoURL.parametros
                                const zonaURL = parametros.zona

                                if (zonaURL) {
                                    const categoriaGlobalIDV = casaVitini.utilidades.cadenas.snakeToCamel(zonaURL)
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.ui.componentesUI.categoriasGlobalesUI.controladorCategorias({
                                        origen: "url",
                                        categoria: categoriaGlobalIDV
                                    })
                                }
                            }
                        },
                    },
                    configuracionZonaHoraria: {
                        arranque: async () => { }
                    }
                },
                crearCuenta: {
                    portada: {
                        arranque: () => {
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "/micasa")
                            const boton = document.querySelector("[componente=botonCrearNuevaCuenta]")
                            boton.addEventListener("click", casaVitini.ui.vistas.miCasa.crearCuenta.portada.transactor)
                        },
                        transactor: async () => {
                            const usuarioIDX = document.querySelector("[campo=usuarioIDX]").value
                            const mail = document.querySelector("[campo=mail]").value
                            const claveNueva = document.querySelector("[campo=claveNueva]").value
                            const claveConfirmada = document.querySelector("[campo=claveConfirmada]").value
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Creando tu VitiniID..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "miCasa/crearCuentaDesdeMiCasa",
                                usuarioIDX: usuarioIDX,
                                mail: mail,
                                claveNueva: claveNueva,
                                claveConfirmada: claveConfirmada
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!pantallaDeCargaRenderizada) { return }
                            if (respuestaServidor?.error) {
                                pantallaDeCargaRenderizada.remove()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const vista = {
                                    vista: "/micasa",
                                    tipoOrigen: "menuNavegador"
                                }
                                await casaVitini.shell.navegacion.controladorVista(vista)
                                const informacion = "Se ha creado la cuenta correctamente. Bienvenido a Casa Vitini. Ya puedes iniciar sesión con tu VitiniID."
                                casaVitini.ui.componentes.advertenciaInmersiva(informacion)
                            }
                        },
                    }
                },
                cerrarSession: async () => {
                    const selectorBotonCerrarSession = document.querySelector("[componente=botonCerrarSession]")
                    selectorBotonCerrarSession.textContent = "Cerrando session..."

                    const IDX = await casaVitini.shell.IDX.cerrarSession()
                    if (!IDX) {
                        selectorBotonCerrarSession.textContent = "Cerrar session"
                    } else if (IDX?.estadoIDV === "desconectado") {

                        casaVitini.shell.navegacion.controladorVista({
                            vista: "/micasa",
                            tipoOrigen: "menuNavegador"
                        })
                    }
                },
                componentes: {
                    bannerIDX: (metadatos) => {
                        const usuarioIDX = metadatos.usuarioIDX

                        const rolIDV = metadatos.rolIDV
                        const rolUITexto = rolIDV.substring(0, 1).toUpperCase() + rolIDV.substring(1);
                        const contenedorUsuarioIDX = document.createElement("div")
                        contenedorUsuarioIDX.classList.add("detallesUsuario_contenedorUsuarioIDX")
                        contenedorUsuarioIDX.setAttribute("componente", "contenedorUsuarioUX")
                        const esferaUsuario = document.createElement("div")
                        esferaUsuario.classList.add("detallesUsuario_esferaUsuario")
                        esferaUsuario.setAttribute("componente", "esferaUsuario")
                        contenedorUsuarioIDX.appendChild(esferaUsuario)
                        const contenedorDatosGlobales = document.createElement("div")
                        contenedorDatosGlobales.classList.add("detallesUsuario_contenedorDatosGlobales")
                        contenedorDatosGlobales.setAttribute("componente", "contenedorDatosGlobales")
                        const usuarioIDXUI = document.createElement("div")
                        usuarioIDXUI.classList.add("detallesUsuario_usuarioUI")
                        usuarioIDXUI.setAttribute("usuarioIDX", usuarioIDX)
                        usuarioIDXUI.textContent = usuarioIDX
                        contenedorDatosGlobales.appendChild(usuarioIDXUI)
                        const rolUI = document.createElement("div")
                        rolUI.classList.add("detallesUsuario_rolUI")
                        rolUI.setAttribute("componente", "rolUI")
                        rolUI.textContent = rolUITexto
                        contenedorDatosGlobales.appendChild(rolUI)
                        contenedorUsuarioIDX.appendChild(contenedorDatosGlobales)
                        return contenedorUsuarioIDX
                    }
                },
                recuperarCuenta: {
                    arranque: async () => {
                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "/micasa")
                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                        const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                        if (comandoInicial === "recuperar_cuenta") {
                            return casaVitini.ui.vistas.miCasa.recuperarCuenta.ui.formularioEnviarmail()
                        }
                        const comandoSecundario = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        if (comandoSecundario === "recuperar_cuenta") {
                            const transacccion = {
                                zona: "miCasa/recuperarCuenta/validarCodigo",
                                codigo: comandoInicial
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.vistas.miCasa.recuperarCuenta.ui.codigoErroneo()
                            }
                            if (respuestaServidor?.ok) {
                                return casaVitini.ui.vistas.miCasa.recuperarCuenta.ui.restablecerClave(comandoInicial)
                            }
                        }
                    },
                    ui: {
                        formularioEnviarmail: () => {

                            const titulo = document.createElement('p');
                            titulo.className = 'titulo';
                            titulo.textContent = 'Recuperar mi cuenta de Casa Vitini';
                            const marcoElasticoRelativo = document.createElement('div');
                            marcoElasticoRelativo.className = 'marcoElasticoRelativo';
                            const marcoElastico = document.createElement('div');
                            marcoElastico.className = 'marcoElastico';
                            const contenedorCrearCuenta = document.createElement('form');
                            contenedorCrearCuenta.className = 'miCasa_crearCuenta_contenedorCrearCuenta';
                            const texto = document.createElement('p');
                            texto.className = 'padding14';
                            texto.textContent = 'Si olvidaste tu contraseña o, por el contrario, creaste tu VitiniID, pero no lo verificaste con tu cuenta de correo electrónico, por favor, proporciona la dirección de correo electrónico con la que creaste tu VitniniID. Te enviaremos un mensaje a tu buzón con un enlace temporal para restablecer tu contraseña o un enlace de verificación para verificar tu cuenta.';
                            const input = document.createElement('input');
                            input.type = 'text'
                            input.autocomplete = "mail"
                            input.className = 'botonV1BlancoIzquierda_noSeleccionable';
                            input.setAttribute('campo', 'mail');
                            input.placeholder = 'Escribe tu direción de correo electroníco';
                            const contenedorBotones = document.createElement('div');
                            contenedorBotones.className = 'miCuenta_cambioClave_contenedorBotones';
                            const botonEnviar = document.createElement('div');
                            botonEnviar.className = 'botonV1BlancoIzquierda';
                            botonEnviar.setAttribute('componente', 'botonCrearNuevaCuenta');
                            botonEnviar.addEventListener("click", () => {
                                casaVitini.ui.vistas.miCasa.recuperarCuenta.transactores.enviarEnlaceRecuperacion()
                            })
                            botonEnviar.textContent = 'Enviar mensaje de recuperación a mi buzón';

                            const secction = document.querySelector("main")
                            secction.appendChild(titulo);
                            contenedorCrearCuenta.appendChild(texto);
                            contenedorCrearCuenta.appendChild(input);
                            contenedorBotones.appendChild(botonEnviar);
                            contenedorCrearCuenta.appendChild(contenedorBotones);
                            marcoElastico.appendChild(contenedorCrearCuenta);
                            marcoElasticoRelativo.appendChild(marcoElastico);
                            secction.appendChild(marcoElasticoRelativo);
                        },
                        codigoErroneo: () => {
                            const marcoElasticoRelatico = document.createElement("div")
                            marcoElasticoRelatico.classList.add("marcoElasticoRelativo")
                            const marcoElastico = document.createElement("div")
                            marcoElastico.classList.add("marcoElastico")
                            marcoElastico.style.alignItems = "stretch"
                            marcoElastico.style.gap = "4px"
                            const titulo = document.createElement("div")
                            titulo.classList.add("tituloGris")
                            titulo.textContent = "El código de recuperación es erróneo"
                            marcoElastico.appendChild(titulo)

                            const contenedorBanner = document.createElement("a")
                            contenedorBanner.classList.add("plaza_reservas_reservaConfirmada_bannerV2")
                            contenedorBanner.textContent = "El código de recuperación es erróneo. Revisa el código introducido. Recuerda que los códigos de recuperación tienen una validez de una hora desde que se generan, se usen o no. También recuerda que los códigos de recuperación son de un solo uso. Si has generado varios códigos de recuperación, recuerda que también solo es válido un código a la vez. Eso quiere decir que si generaste varios códigos, el válido solo es el último código generado, el más nuevo."
                            marcoElastico.appendChild(contenedorBanner)
                            const botonIniciarReserva = document.createElement("a")
                            botonIniciarReserva.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIniciarReserva.textContent = "Ir a generar un nuevo código"
                            botonIniciarReserva.setAttribute("href", "/micasa/recuperar_cuenta")
                            botonIniciarReserva.setAttribute("vista", "/micasa/recuperar_cuenta")
                            botonIniciarReserva.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            marcoElastico.appendChild(botonIniciarReserva)
                            const botonIrARegistrarse = document.createElement("a")
                            botonIrARegistrarse.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIrARegistrarse.textContent = "Ir al portal de MiCasa"
                            botonIrARegistrarse.setAttribute("href", "/micasa")
                            botonIrARegistrarse.setAttribute("vista", "/micasa")
                            botonIrARegistrarse.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            marcoElastico.appendChild(botonIrARegistrarse)
                            const botonInciarSession = document.createElement("a")
                            botonInciarSession.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonInciarSession.textContent = "Ir a la página principal"
                            botonInciarSession.setAttribute("href", "/")
                            botonInciarSession.setAttribute("vista", "/")
                            botonInciarSession.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                            marcoElasticoRelatico.appendChild(marcoElastico)
                            const seccion = document.querySelector("main")
                            seccion.innerHTML = null
                            seccion.appendChild(marcoElasticoRelatico)
                        },
                        mensajeEnviado: () => {
                            const marcoElasticoRelatico = document.createElement("div")
                            marcoElasticoRelatico.classList.add("marcoElasticoRelativo")
                            const marcoElastico = document.createElement("div")
                            marcoElastico.classList.add("marcoElastico")
                            marcoElastico.style.alignItems = "stretch"
                            marcoElastico.style.gap = "4px"
                            const titulo = document.createElement("div")
                            titulo.classList.add("tituloGris")
                            titulo.textContent = "Mensaje enviado"
                            marcoElastico.appendChild(titulo)

                            const contenedorBanner = document.createElement("a")
                            contenedorBanner.classList.add("plaza_miCasa_recuperarCuenta_contenedorInfo")
                            contenedorBanner.textContent = "Se ha enviado un mensaje a tu buzón con un enlace temporal de una hora de duración para que puedas restablecer tu contraseña y recuperar el acceso a tu VitiniID."
                            marcoElastico.appendChild(contenedorBanner)
                            const botonIniciarReserva = document.createElement("a")
                            botonIniciarReserva.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIniciarReserva.textContent = "Volver a generar otro código (Acabo de olvidar la nueva clave)"
                            botonIniciarReserva.setAttribute("href", "/micasa/recuperar_cuenta")
                            botonIniciarReserva.setAttribute("vista", "/micasa/recuperar_cuenta")
                            botonIniciarReserva.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                            const botonIrARegistrarse = document.createElement("a")
                            botonIrARegistrarse.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIrARegistrarse.textContent = "Ir al portal de MiCasa"
                            botonIrARegistrarse.setAttribute("href", "/micasa")
                            botonIrARegistrarse.setAttribute("vista", "/micasa")
                            botonIrARegistrarse.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                            const botonInciarSession = document.createElement("a")
                            botonInciarSession.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonInciarSession.textContent = "Ir a la página principal"
                            botonInciarSession.setAttribute("href", "/")
                            botonInciarSession.setAttribute("vista", "/")
                            botonInciarSession.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                            marcoElasticoRelatico.appendChild(marcoElastico)
                            const seccion = document.querySelector("main")
                            seccion.innerHTML = null
                            seccion.appendChild(marcoElasticoRelatico)
                        },
                        claveRestablecida: () => {
                            const marcoElasticoRelatico = document.createElement("div")
                            marcoElasticoRelatico.classList.add("marcoElasticoRelativo")
                            const marcoElastico = document.createElement("div")
                            marcoElastico.classList.add("marcoElastico")
                            marcoElastico.style.alignItems = "stretch"
                            marcoElastico.style.gap = "4px"
                            const titulo = document.createElement("div")
                            titulo.classList.add("tituloGris")
                            titulo.textContent = "Cuenta reestablecida"
                            marcoElastico.appendChild(titulo)

                            const contenedorBanner = document.createElement("a")
                            contenedorBanner.classList.add("plaza_miCasa_recuperarCuenta_contenedorInfo")
                            contenedorBanner.textContent = "Se ha restablecido tu contraseña. Ya puedes empezar a usarla."
                            marcoElastico.appendChild(contenedorBanner)
                            const botonIniciarReserva = document.createElement("a")
                            botonIniciarReserva.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIniciarReserva.textContent = "Volver a generar otro código (acabo de olvidar la nueva clave)"
                            botonIniciarReserva.setAttribute("href", "/micasa/recuperar_cuenta")
                            botonIniciarReserva.setAttribute("vista", "/micasa/recuperar_cuenta")
                            botonIniciarReserva.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                            const botonIrARegistrarse = document.createElement("a")
                            botonIrARegistrarse.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIrARegistrarse.textContent = "Ir al portal de MiCasa"
                            botonIrARegistrarse.setAttribute("href", "/micasa")
                            botonIrARegistrarse.setAttribute("vista", "/micasa")
                            botonIrARegistrarse.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                            const botonInciarSession = document.createElement("a")
                            botonInciarSession.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonInciarSession.textContent = "Ir a la página principal"
                            botonInciarSession.setAttribute("href", "/")
                            botonInciarSession.setAttribute("vista", "/")
                            botonInciarSession.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                            marcoElasticoRelatico.appendChild(marcoElastico)
                            const seccion = document.querySelector("main")
                            seccion.innerHTML = null
                            seccion.appendChild(marcoElasticoRelatico)
                        },
                        restablecerClave: (codigo) => {

                            const titulo = document.createElement('p');
                            titulo.className = 'titulo';
                            titulo.textContent = 'Restablecer contaseña';
                            const marcoElasticoRelativo = document.createElement('div');
                            marcoElasticoRelativo.className = 'marcoElasticoRelativo';
                            const marcoElastico = document.createElement('div');
                            marcoElastico.className = 'marcoElastico';
                            const contenedorCrearCuenta = document.createElement('form');
                            contenedorCrearCuenta.className = 'miCasa_crearCuenta_contenedorCrearCuenta';
                            const texto = document.createElement('p');
                            texto.className = 'texto padding6';
                            texto.textContent = 'Restablece la contraseña de tu VitiniID. Una vez la restablezcas, este enlace dejará de tener valides. Escoge una contraseña robusta y segura. Es recomendable usar un llavero de contraseñas tanto para generarlas como para gestionarlas. Este enlace te otorga una hora para restablecer tu contraseña.';
                            const clave = document.createElement('input');
                            clave.type = 'password';
                            clave.className = 'miCasa_crearCuenta_campo';
                            clave.autocomplete = "new-password"
                            clave.setAttribute('campo', 'clave');
                            clave.placeholder = 'Escribe tu nueva contraseña';
                            const claveConfirmada = document.createElement('input');
                            claveConfirmada.type = 'password';
                            claveConfirmada.className = 'miCasa_crearCuenta_campo';
                            claveConfirmada.autocomplete = "new-password"
                            claveConfirmada.setAttribute('campo', 'claveConfirmada');
                            claveConfirmada.placeholder = 'Escribe de nuevo tu contraseña';
                            const contenedorBotones = document.createElement('div');
                            contenedorBotones.className = 'miCuenta_cambioClave_contenedorBotones';
                            const botonEnviar = document.createElement('div');
                            botonEnviar.className = 'miCuenta_cambiarClave_botonV1';
                            botonEnviar.setAttribute('componente', 'botonCrearNuevaCuenta');
                            botonEnviar.addEventListener("click", () => {
                                casaVitini.ui.vistas.miCasa.recuperarCuenta.transactores.restablecerClave(codigo)
                            })
                            botonEnviar.textContent = 'Reestablecer contraseña';

                            const secction = document.querySelector("main")
                            secction.appendChild(titulo);
                            contenedorCrearCuenta.appendChild(texto);
                            contenedorCrearCuenta.appendChild(clave);
                            contenedorCrearCuenta.appendChild(claveConfirmada);
                            contenedorBotones.appendChild(botonEnviar);
                            contenedorCrearCuenta.appendChild(contenedorBotones);
                            marcoElastico.appendChild(contenedorCrearCuenta);
                            marcoElasticoRelativo.appendChild(marcoElastico);
                            secction.appendChild(marcoElasticoRelativo);
                        },
                    },
                    transactores: {
                        enviarEnlaceRecuperacion: async () => {
                            const mail = document.querySelector("[campo=mail]").value
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Enviando enlace temporal..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            const transacccion = {
                                zona: "miCasa/recuperarCuenta/enviarCorreo",
                                mail: mail.trim()
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                            if (respuestaServidor?.error && pantallaDeCargaRenderizada) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok && pantallaDeCargaRenderizada) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.vistas.miCasa.recuperarCuenta.ui.mensajeEnviado()
                            }
                        },
                        restablecerClave: async (codigo) => {
                            const clave = document.querySelector("[campo=clave]").value
                            const claveConfirmada = document.querySelector("[campo=claveConfirmada]").value
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Reestableciendo la contraseña..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            const transacccion = {
                                zona: "miCasa/recuperarCuenta/restablecerClave",
                                codigo: codigo,
                                clave: clave,
                                claveConfirmada: claveConfirmada
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                            if (respuestaServidor?.error && pantallaDeCargaRenderizada) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok && pantallaDeCargaRenderizada) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.vistas.miCasa.recuperarCuenta.ui.claveRestablecida()
                            }
                        },
                    },
                },
                verificarCuenta: {
                    arranque: async () => {
                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "/micasa")
                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                        const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                        if (comandoInicial === "verificar_cuenta") {
                            return casaVitini.ui.vistas.miCasa.verificarCuenta.ui.portadaUI()
                        }
                        const comandoSecundario = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        if (comandoSecundario === "verificar_cuenta") {
                            const transacccion = {
                                zona: "miCasa/verificarCuenta",
                                codigo: comandoInicial
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.vistas.miCasa.verificarCuenta.ui.codigoErroneo()
                            }
                            if (respuestaServidor?.ok) {
                                return casaVitini.ui.vistas.miCasa.verificarCuenta.ui.cuentaVerificada()
                            }
                        }
                    },
                    ui: {
                        portadaUI: () => {
                            const titulo = document.createElement('p');
                            titulo.className = 'titulo';
                            titulo.textContent = 'Verifica tu cuenta con tu dirección de correo electrónico';
                            const marcoElasticoRelativo = document.createElement('div');
                            marcoElasticoRelativo.className = 'marcoElasticoRelativo';
                            const marcoElastico = document.createElement('div');
                            marcoElastico.className = 'marcoElastico';
                            marcoElastico.style.alignItems = "stretch"
                            marcoElastico.style.gap = "4px"
                            const botonRecuperarCuenta = document.createElement("a")
                            botonRecuperarCuenta.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonRecuperarCuenta.textContent = "Ir a recuperar mi cuenta para mandar un enlace de verificación a mi correo"
                            botonRecuperarCuenta.setAttribute("href", "/micasa/recuperar_cuenta")
                            botonRecuperarCuenta.setAttribute("vista", "/micasa/recuperar_cuenta")
                            botonRecuperarCuenta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            const contenedorCrearCuenta = document.createElement('div');
                            contenedorCrearCuenta.className = 'miCasa_crearCuenta_contenedorCrearCuenta';
                            const texto = document.createElement('p');
                            texto.className = 'texto padding6';
                            texto.textContent = 'Cuando creas una cuenta en Casa Vitini, debes verificar tu VitiniID. Para ello, debes acceder desde el enlace que se te envió al buzón de correo electrónico. Si ya no dispones de este enlace, puedes solicitar otro enlace de verificación. Para hacerlo, ve al portal de inicio de sesión y haz clic en "Recuperar tu cuenta". Si tu cuenta no está verificada, se te enviará un correo electrónico de verificación. Cuando recibas el mensaje con los enlaces de verificación, puedes hacer clic en los enlaces o escribir aquí el código de verificación.';
                            const input = document.createElement('input');
                            input.type = 'text';
                            input.className = 'miCasa_crearCuenta_campo';
                            input.setAttribute('campo', 'codigoVerificacion');
                            input.placeholder = 'Escribo aquí tu código de verificación';
                            const contenedorBotones = document.createElement('div');
                            contenedorBotones.className = 'miCuenta_cambioClave_contenedorBotones';
                            const botonEnviar = document.createElement('div');
                            botonEnviar.className = 'miCuenta_cambiarClave_botonV1';
                            botonEnviar.setAttribute('componente', 'botonVerificarCodigo');
                            botonEnviar.addEventListener("click", () => {
                                casaVitini.ui.vistas.miCasa.verificarCuenta.transactores.verificarCodigo()
                            })
                            botonEnviar.textContent = 'Verificar código';

                            const secction = document.querySelector("main")
                            secction.appendChild(titulo);
                            marcoElastico.appendChild(botonRecuperarCuenta);
                            contenedorCrearCuenta.appendChild(texto);
                            contenedorCrearCuenta.appendChild(input);
                            contenedorBotones.appendChild(botonEnviar);
                            contenedorCrearCuenta.appendChild(contenedorBotones);
                            marcoElastico.appendChild(contenedorCrearCuenta);
                            marcoElasticoRelativo.appendChild(marcoElastico);
                            secction.appendChild(marcoElasticoRelativo);
                        },
                        codigoErroneo: () => {
                            const marcoElasticoRelatico = document.createElement("div")
                            marcoElasticoRelatico.classList.add("marcoElasticoRelativo")
                            const marcoElastico = document.createElement("div")
                            marcoElastico.classList.add("marcoElastico")
                            marcoElastico.style.alignItems = "stretch"
                            marcoElastico.style.gap = "4px"
                            const titulo = document.createElement("div")
                            titulo.classList.add("tituloGris")
                            titulo.textContent = "El código de verificación es erróneo"
                            marcoElastico.appendChild(titulo)

                            const contenedorBanner = document.createElement("a")
                            contenedorBanner.classList.add("plaza_reservas_reservaConfirmada_bannerV2")
                            contenedorBanner.textContent = "El código de verificación es erróneo. Revisa el código introducido."
                            marcoElastico.appendChild(contenedorBanner)
                            const botonIniciarReserva = document.createElement("a")
                            botonIniciarReserva.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIniciarReserva.textContent = "Ir a generar un nuevo código de verificación"
                            botonIniciarReserva.setAttribute("href", "/micasa/recuperar_cuenta")
                            botonIniciarReserva.setAttribute("vista", "/micasa/recuperar_cuenta")
                            botonIniciarReserva.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            marcoElastico.appendChild(botonIniciarReserva)
                            marcoElasticoRelatico.appendChild(marcoElastico)
                            const seccion = document.querySelector("main")
                            seccion.innerHTML = null
                            seccion.appendChild(marcoElasticoRelatico)
                        },
                        cuentaVerificada: () => {
                            const marcoElasticoRelatico = document.createElement("div")
                            marcoElasticoRelatico.classList.add("marcoElasticoRelativo")
                            const marcoElastico = document.createElement("div")
                            marcoElastico.classList.add("marcoElastico")
                            marcoElastico.style.alignItems = "stretch"
                            marcoElastico.style.gap = "4px"
                            const titulo = document.createElement("div")
                            titulo.classList.add("tituloGris")
                            titulo.textContent = "Cuenta verificada"
                            marcoElastico.appendChild(titulo)

                            const contenedorBanner = document.createElement("a")
                            contenedorBanner.classList.add("plaza_reservas_reservaConfirmada_bannerV2")
                            contenedorBanner.textContent = "Se ha verificado la cuenta correctamente, ya puedes usar tu cuenta para ver las reservas hechas."
                            marcoElastico.appendChild(contenedorBanner)

                            const botonIrARegistrarse = document.createElement("a")
                            botonIrARegistrarse.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonIrARegistrarse.textContent = "Ir al portal de MiCasa"
                            botonIrARegistrarse.setAttribute("href", "/micasa")
                            botonIrARegistrarse.setAttribute("vista", "/micasa")
                            botonIrARegistrarse.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            marcoElastico.appendChild(botonIrARegistrarse)
                            const botonInciarSession = document.createElement("a")
                            botonInciarSession.classList.add("plaza_reservas_reservaConfirmada_banner")
                            botonInciarSession.textContent = "Ir a la página principal"
                            botonInciarSession.setAttribute("href", "/")
                            botonInciarSession.setAttribute("vista", "/")
                            botonInciarSession.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            marcoElastico.appendChild(botonInciarSession)
                            marcoElasticoRelatico.appendChild(marcoElastico)
                            const seccion = document.querySelector("main")
                            seccion.innerHTML = null
                            seccion.appendChild(marcoElasticoRelatico)
                        },
                    },
                    transactores: {
                        verificarCodigo: async () => {
                            const codigo = document.querySelector("[campo=codigoVerificacion]").value
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Comprobando código de verificación..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            const transacccion = {
                                zona: "miCasa/verificarCuenta",
                                codigo: codigo.trim()
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                            if (respuestaServidor?.error && pantallaDeCargaRenderizada) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok && pantallaDeCargaRenderizada) {
                                return casaVitini.ui.vistas.miCasa.verificarCuenta.ui.cuentaVerificada()
                            }

                        }
                    }
                },
                portal: {
                    arranque: () => {
                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "/micasa")




                        document.querySelector("[boton=iniciarSession]").addEventListener("click", () => {
                            casaVitini.ui.vistas.miCasa.portal.botonIniciarSession("iniciarSession")
                        })
                        document.querySelector("[IDX=usuario]").focus();
                        const campos = document.querySelectorAll("[componente=campoID]")
                        campos.forEach((campo) => {
                            campo.addEventListener("input", casaVitini.ui.vistas.miCasa.portal.controladorCampos)
                            campo.addEventListener("input", casaVitini.ui.vistas.miCasa.portal.reseteaBloqueRespuesta)
                            campo.addEventListener("keydown", (e) => {
                                if (e.key === "Enter") {
                                    casaVitini.ui.vistas.miCasa.portal.botonIniciarSession("iniciarSession")
                                }
                            });
                        })
                        const opciones = document.querySelectorAll("[opcion]")
                        opciones.forEach((opcion) => {
                            opcion.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        })






                        const video = document.querySelector("[componente=video]")
                        if (video) {
                            video.addEventListener('loadedmetadata', () => {
                                const duration = video.duration;
                                const randomTime = Math.random() * duration;
                                video.currentTime = randomTime;
                                video.play();
                            });
                        }
                    },
                    controladorCampos: () => {
                        const campoUsuario = document.querySelector("[componente=campoID][IDX=usuario]")
                        const campoClave = document.querySelector("[componente=campoID][IDX=clave]")
                        const contenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        if (campoUsuario.value.length === 0 || campoClave.value.length === 0) {
                            contenedorBotones.removeAttribute("style")
                        } else {
                            contenedorBotones.style.pointerEvents = "all"
                            contenedorBotones.style.visibility = "visible"
                        }
                    },
                    botonIniciarSession: (boton) => {
                        const bloqueRespuesta = document.querySelector("[componente=bloqueRespuesta")
                        bloqueRespuesta.textContent = null
                        bloqueRespuesta.removeAttribute("style")
                        if (boton === "iniciarSession") {
                            const usuario = document.querySelector("[IDX=usuario]")
                            const clave = document.querySelector("[IDX=clave]")
                            if (usuario.value.length === 0) {
                                const mensaje = "Por favor escribe tu usuario"
                                bloqueRespuesta.textContent = mensaje
                                bloqueRespuesta.style.display = "block"
                                return
                            }
                            if (clave.value.length === 0) {
                                const mensaje = "Por favor escribe tu contraseña"
                                bloqueRespuesta.textContent = mensaje
                                bloqueRespuesta.style.display = "block"
                                return
                            }
                            const transaccion = {
                                usuario: usuario.value,
                                clave: clave.value
                            }
                            return casaVitini.shell.IDX.iniciarSession(transaccion)
                        }
                    },
                    reseteaBloqueRespuesta: () => {
                        const bloqueRespuesta = document.querySelector("[componente=bloqueRespuesta]")
                        bloqueRespuesta.removeAttribute("style")
                        bloqueRespuesta.textContent = "-"
                        bloqueRespuesta.style.opacity = "0"
                        document.querySelectorAll("[componente=campoID]").forEach(campo => {
                            campo.removeAttribute("style")
                        });
                    },
                }
            },
            contacto: {
                arranque: () => {
                    document.body.style.backgroundImage = 'url("/componentes/imagenes/contacto.jpg")';
                    document.querySelector("#uiLogo").style.filter = "invert(1)"
                    document.querySelector("[componente=botonMenuResponsivo]").style.filter = "invert(1)"
                },
            },
            pagos: {
                portada: {
                    arranque: async () => {
                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                        const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                        const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                        if (comandoInicial === "pagos") {
                            return casaVitini.ui.vistas.pagos.pantallaInicial()
                        }
                        const contenedorEnlaceDePago = document.querySelector("main")
                        const transaccion = {
                            zona: "plaza/enlaceDePago/obtenerPago",
                            pagoUID: comandoInicial
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            const tituloGlobal = document.createElement("div")
                            tituloGlobal.classList.add("tituloGris")
                            tituloGlobal.textContent = "Enlace de pago"
                            contenedorEnlaceDePago.appendChild(tituloGlobal)
                            const info = {
                                titulo: "Información acerca de este enlace de pago",
                                descripcion: respuestaServidor?.error
                            }
                            return casaVitini.ui.componentes.mensajeSimple(info)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesDelPago = respuestaServidor?.ok
                            const pagoUID = detallesDelPago.codigo
                            const reservaUID = detallesDelPago.reserva
                            const totales = detallesDelPago.totales
                            const detallesPagoParcial = detallesDelPago.pagoParcial




                            const tituloGlobal = document.createElement("div")
                            tituloGlobal.classList.add("tituloGris")
                            tituloGlobal.textContent = "Realizar un pago"
                            contenedorEnlaceDePago.appendChild(tituloGlobal)
                            const marcoElasticoRelativo = document.createElement("div")
                            marcoElasticoRelativo.classList.add("marcoElasticoRelativo")
                            const marcoElastico = document.createElement("div")
                            marcoElastico.classList.add("marcoElastico")
                            const marcoPago = document.createElement("div")
                            marcoPago.classList.add("plaza_enlacesDePago_marcoPago")
                            marcoPago.setAttribute("espacio", "marcoPago")
                            marcoPago.setAttribute("componente", "espacioPago")
                            const info = document.createElement("p")
                            info.classList.add("pagoPorEnlace_info")
                            info.textContent = "Este enlace es un enlace para realizar un pago en Casa Vitini. El pago puede ser un pago completo de una reserva o un pago parcial si la reserva se paga a partes entre los pernoctantes. Por favor, revisa que los datos sean correctos y procede al pago. En esta página tienes dos secciones. La sección Detalles del pago, donde puedes ver el total bruto junto con el desglose de la cantidad que corresponde al neto como a la suma de impuestos aplicados. También tienes los detalles del total de la reserva a modo informativo para que tenga la visión global."
                            marcoPago.appendChild(info)
                            const contenedorReservaUID = document.createElement("div")
                            contenedorReservaUID.classList.add("enlaceDePago_contendorReservaUID")
                            const tituloReserva = document.createElement("div")
                            tituloReserva.classList.add("enlaceDePago_tituloReserva")
                            tituloReserva.classList.add("negrita")
                            tituloReserva.textContent = "Identificador de la reserva"
                            contenedorReservaUID.appendChild(tituloReserva)
                            const identificadorReserva = document.createElement("div")
                            identificadorReserva.classList.add("enlaceDePago_identificadorReserva")
                            identificadorReserva.textContent = reservaUID
                            contenedorReservaUID.appendChild(identificadorReserva)
                            marcoPago.appendChild(contenedorReservaUID)
                            const resolutorNombresTotales = {
                                promedioNetoPorNoche: "Promedio neto por noche",
                                totalReservaNetoSinOfertas: "Total neto de la reserva sin ofertas",
                                totalReservaNeto: "Total reserva neto",
                                totalDescuentos: "Total descuentos aplicados",
                                totalImpuestos: "Total de la suma de los impuestos aplicados",
                                totalConImpuestos: "Total bruto definitivo a pagar",
                            }
                            const resolutorNombresTotalesParciales = {
                                netoParcial: "Total neto",
                                impuestosParciales: "Impuestos",
                                cantidadParcial: "Total bruto a pagar",
                            }
                            const contenedorPagoGlobal = document.createElement("div")
                            contenedorPagoGlobal.classList.add("plaza_enlacesDePago_obtenerPago_contenedorPagoGlobal")
                            contenedorPagoGlobal.setAttribute("pasarelaZonaDePago", "enlaceDePago")
                            const contenedorPago = document.createElement("div")
                            contenedorPago.classList.add("plaza_enlacesDePago_obtenerPago_contenedor")
                            const tituloPago = document.createElement("div")
                            tituloPago.classList.add("plaza_enlacesDePago_obtenerPago_informacionPago")
                            tituloPago.classList.add("negrita")
                            tituloPago.textContent = "Detalles del pago"
                            contenedorPago.appendChild(tituloPago)
                            const informacionPago = document.createElement("div")
                            informacionPago.classList.add("plaza_enlacesDePago_obtenerPago_informacionPago")
                            informacionPago.textContent = `Aquí tienes los detalles del pago. En total, el pago tiene una suma total de ${detallesPagoParcial.cantidadParcial}$. De este total, ${detallesPagoParcial.impuestosParciales}$ son impuestos y ${detallesPagoParcial.netoParcial}$ es el neto de este pago.`
                            contenedorPago.appendChild(informacionPago)
                            for (const [totalIDV, valorTotal] of Object.entries(detallesPagoParcial)) {
                                const totalUI = resolutorNombresTotalesParciales[totalIDV]
                                const contenedorTotal = document.createElement("div")
                                contenedorTotal.classList.add("enlaceDePAgo_contenedorTotal")
                                const tituloTotal = document.createElement("div")
                                tituloTotal.classList.add("enlaceDePago_tituloTotal")
                                tituloTotal.classList.add("negrita")
                                tituloTotal.textContent = totalUI
                                contenedorTotal.appendChild(tituloTotal)
                                const valorTotalUI = document.createElement("div")
                                valorTotalUI.classList.add("enlaceDePago_valorTotal")
                                valorTotalUI.textContent = valorTotal + "$"
                                contenedorTotal.appendChild(valorTotalUI)
                                contenedorPago.appendChild(contenedorTotal)
                            }
                            contenedorPagoGlobal.appendChild(contenedorPago)
                            const contenedorTotales = document.createElement("div")
                            contenedorTotales.classList.add("plaza_enlacesDePago_obtenerPago_contenedor")
                            contenedorTotales.setAttribute("pagoUID", pagoUID)
                            const tituloPagoReserva = document.createElement("div")
                            tituloPagoReserva.classList.add("plaza_enlacesDePago_obtenerPago_informacionPago")
                            tituloPagoReserva.classList.add("negrita")
                            tituloPagoReserva.textContent = "Detalles del total de la reserva"
                            contenedorTotales.appendChild(tituloPagoReserva)
                            const informacionPagoReserva = document.createElement("div")
                            informacionPagoReserva.classList.add("plaza_enlacesDePago_obtenerPago_informacionPago")
                            informacionPagoReserva.textContent = `Este apartado muestra el total de reserva a modo de información. Este apartado está a modo de recordatorio. El detalle del pago está en Detalles del pago en el apartado contiguo a este.`
                            contenedorTotales.appendChild(informacionPagoReserva)
                            for (const [totalIDV, valorTotal] of Object.entries(totales)) {
                                const totalUI = resolutorNombresTotales[totalIDV]
                                const contenedorTotal = document.createElement("div")
                                contenedorTotal.classList.add("enlaceDePAgo_contenedorTotal")
                                const tituloTotal = document.createElement("div")
                                tituloTotal.classList.add("enlaceDePago_tituloTotal")
                                tituloTotal.classList.add("negrita")
                                tituloTotal.textContent = totalUI
                                contenedorTotal.appendChild(tituloTotal)
                                const valorTotalUI = document.createElement("div")
                                valorTotalUI.classList.add("enlaceDePago_tituloTotal")
                                valorTotalUI.textContent = valorTotal + "$"
                                contenedorTotal.appendChild(valorTotalUI)
                                if (valorTotal > 0) {
                                    contenedorTotales.appendChild(contenedorTotal)
                                }
                            }
                            contenedorPagoGlobal.appendChild(contenedorTotales)
                            marcoPago.appendChild(contenedorPagoGlobal)
                            marcoElastico.appendChild(marcoPago)
                            marcoElasticoRelativo.appendChild(marcoElastico)
                            contenedorEnlaceDePago.appendChild(marcoElasticoRelativo)
                            const destino = "section [componente=espacioPago]"
                            casaVitini.componentes.square.uiForm(destino)
                            try {
                                await casaVitini.componentes.square.crearSesionPago(instanciaUID);
                                await casaVitini.componentes.square.inyectorSquareJS(instanciaUID);
                                await casaVitini.componentes.square.inyectorMetodosPago(instanciaUID);
                                await casaVitini.componentes.square.inyectorFlujoPago(instanciaUID);
                            } catch (errorCapturado) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(errorCapturado.message)
                            }
                        }
                    }
                },
                pagoConfirmado: (detalles) => {
                    const pagoUID = detalles?.pagoUID
                    const contenedorEnlaceDePago = document.querySelector("section")
                    contenedorEnlaceDePago.innerHTML = null
                    const tituloGlobal = document.createElement("div")
                    tituloGlobal.classList.add("tituloGris")
                    tituloGlobal.textContent = "Pago realizado correctamente"
                    contenedorEnlaceDePago.appendChild(tituloGlobal)
                    const marcoElasticoRelativo = document.createElement("div")
                    marcoElasticoRelativo.classList.add("marcoElasticoRelativo")
                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElastico")
                    marcoElastico.style.gap = "6px"



                    const marcoPago = document.createElement("div")
                    marcoPago.classList.add("plaza_enlacesDePago_marcoPago")
                    marcoPago.setAttribute("espacio", "marcoPago")
                    marcoPago.setAttribute("componente", "espacioPago")
                    const info = document.createElement("p")
                    info.classList.add("pagoPorEnlace_info")
                    info.textContent = "Gracias por finalizar el proceso de pago. Si lo necesita, puede ver en la parte inmediatamente inferior a este párrafo el código del pago por si lo necesita. El pago se ha asociado a su reserva."
                    marcoPago.appendChild(info)
                    const mensajeUI = document.createElement("p")
                    mensajeUI.classList.add("pagoPorEnlace_info")
                    mensajeUI.classList.add("negrita")
                    mensajeUI.setAttribute("componente", "mensajeError")
                    mensajeUI.textContent = "Identificador del pago: " + pagoUID
                    marcoPago.appendChild(mensajeUI)
                    marcoElastico.appendChild(marcoPago)
                    marcoElasticoRelativo.appendChild(marcoElastico)
                    contenedorEnlaceDePago.appendChild(marcoElasticoRelativo)
                },
                pantallaInicial: (metadatos) => {
                    const error = metadatos?.error
                    const codigo = metadatos?.codigo ? metadatos.codigo : ""
                    const contenedorEnlaceDePago = document.querySelector("section")
                    const tituloGlobal = document.createElement("div")
                    tituloGlobal.classList.add("tituloGris")
                    tituloGlobal.textContent = "Enlaces y codigos para realizar un pago"
                    contenedorEnlaceDePago.appendChild(tituloGlobal)
                    const marcoElasticoRelativo = document.createElement("div")
                    marcoElasticoRelativo.classList.add("marcoElasticoRelativo")
                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElastico")
                    marcoElastico.style.gap = "6px"
                    marcoElastico.style.alignItems = "flex-start"


                    const marcoPago = document.createElement("div")
                    marcoPago.classList.add("plaza_enlacesDePago_marcoPago")
                    marcoPago.setAttribute("espacio", "marcoPago")
                    marcoPago.setAttribute("componente", "espacioPago")
                    const info = document.createElement("p")
                    info.classList.add("pagoPorEnlace_info")
                    info.textContent = "En esta página puede realizar un pago con un código temporal asociado a su reserva. Si Casa Vitini le ha pasado un código temporal aleatorio para realizar un pago, insértelo en el formulario de abajo para iniciar el proceso de pago. Los enlaces caducan al cabo de un tiempo. Si tiene un enlace de pago y tras revisar que lo ha escrito correctamente, el sistema no encuentra los enlaces, puede que haya caducado."
                    marcoPago.appendChild(info)
                    if (error) {
                        const mensajeUI = document.createElement("p")
                        mensajeUI.classList.add("pagoPorEnlace_info")
                        mensajeUI.classList.add("negrita")
                        mensajeUI.setAttribute("componente", "mensajeError")
                        mensajeUI.textContent = error
                        marcoPago.appendChild(mensajeUI)
                    }
                    const campo = document.createElement("input")
                    campo.classList.add("plaza_enlacesDePago_campo")
                    campo.setAttribute("campo", "codigo")
                    campo.placeholder = "Inserte su codigo temporal"
                    campo.addEventListener("input", () => {
                        document.querySelector("[componente=mensajeError]")?.remove()
                    })
                    campo.value = codigo
                    marcoPago.appendChild(campo)
                    marcoElastico.appendChild(marcoPago)
                    const botonBuscar = document.createElement("div")
                    botonBuscar.classList.add("plaza_enlacesDePago_botonV1")
                    botonBuscar.textContent = "Comprobar codigo"
                    botonBuscar.addEventListener("click", async () => {
                        const selectorCampoCodigo = document.querySelector("[campo=codigo]")
                        const codigoEnviar = selectorCampoCodigo.value
                        if (codigoEnviar.length === 0) {
                            const error = "Escribe un código para empezar. No has escrito ningún código para comprobar."
                            return casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                        const vista = "/pagos/" + codigoEnviar
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        return casaVitini.shell.navegacion.controladorVista(navegacion)
                    })
                    marcoElastico.appendChild(botonBuscar)
                    marcoElasticoRelativo.appendChild(marcoElastico)
                    contenedorEnlaceDePago.appendChild(marcoElasticoRelativo)
                }
            },
            conozcanos: {
                arranque: () => {
                    const body = document.body
                    document.querySelector("main").style.paddingBottom = "20px"
































                    const loadScript = async (url) => {
                        return new Promise((resolve, reject) => {
                            const script = document.createElement('script');
                            script.src = url;
                            script.onload = () => resolve(script);
                            script.onerror = () => reject(new Error(`Error al cargar el script ${url}`));
                            document.querySelector('main').appendChild(script);
                        });
                    };

                    const arranqueParallax = async () => {
                        try {
                            const scriptElement = await loadScript("/componentes/javascript/simpleParallax.js");
                            const grupoImagenesPalarax = document.querySelectorAll('[imagenParalaje=imagen]');
                            casaVitini.ui.vistas.conozcanos.instanciasTemporales.parallaxControlador = new simpleParallax(grupoImagenesPalarax, {
                                delay: 0,
                                orientation: 'down',
                                scale: 1.5,
                                overflow: false,
                            });
                        } catch (errorCapturado) {
                            console.error(errorCapturado);
                        }
                    };

                    arranqueParallax();



                },
                controladorIconoMouse: () => {
                    const iconoRaton = document.querySelector("[icono=mouse]")
                    if (!iconoRaton) {
                        window.removeEventListener('scroll', casaVitini.ui.vistas.conozcanos.controladorIconoMouse);
                    }
                    const alturaScroll = window.scrollY
                    if (iconoRaton && alturaScroll > 10) {
                        iconoRaton.addEventListener("transitionend", (e) => {

                        })
                        iconoRaton.style.opacity = "0"
                    } else {
                        iconoRaton.style.opacity = "1"
                    }
                },
                scrollHandler: () => {
                    let animationRunning = false;
                    if (!animationRunning) {
                        animationRunning = true;
                        requestAnimationFrame(function () {
                            casaVitini.ui.vistas.conozcanos.controladorParalaje();
                            animationRunning = false;
                        });
                    }
                    const contenedorParalaje = document.querySelector("[contenedor=paralaje]")
                    if (!contenedorParalaje) {
                        window.removeEventListener('scroll', casaVitini.ui.vistas.conozcanos.scrollHandler);
                    }
                },
                controladorParalaje: () => {
                    const contenedoresPalaraje = document.querySelectorAll("[contenedorParalaje]")
                    contenedoresPalaraje.forEach((contenedorParalaje) => {
                        const parallaxContainer2 = contenedorParalaje;
                        const parallaxImage2 = contenedorParalaje.querySelector('[imagenParalaje]');
                        const nombreImagen = parallaxImage2.getAttribute("nombre")
                        const textoAnimado = contenedorParalaje.querySelector('[elemento=textoAnimado]');
                        const containerRect2 = parallaxContainer2.getBoundingClientRect();
                        const windowInnerHeight = window.innerHeight
                        const containerBottom = containerRect2.bottom
                        const containerTop = containerRect2.top
                        requestAnimationFrame(() => {
                            if ((containerTop < 0 && containerBottom < windowInnerHeight) ||
                                (containerTop < windowInnerHeight && containerBottom > 0)) {
                                const parallaxTop2 = parallaxContainer2.offsetTop;
                                const parallaxHeight2 = parallaxContainer2.offsetHeight;
                                const conCero = (windowInnerHeight < parallaxTop2 + parallaxHeight2 ?
                                    windowInnerHeight : parallaxTop2 + parallaxHeight2) -
                                    (containerTop + parallaxHeight2);
                                if (
                                    (containerTop < 0 &&
                                        containerBottom < windowInnerHeight)
                                    ||
                                    (containerTop > 0 &&
                                        containerBottom > windowInnerHeight)
                                ) {

                                    if (textoAnimado) {
                                        textoAnimado.style.transform = 'translate3d(0 ,-' + (conCero) + 'px ,0)';
                                    }
                                }
                            }
                        })
                    })
                },
                instanciasTemporales: {
                    parallaxControlador: null,
                },
            },
            instalaciones: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "instalaciones")
                    document.body.style.backgroundColor = "#fdefd9"
                    const imagenesAmpliables = document.querySelectorAll("[componente=fotoAmpliable]")
                    const cerrarImagen = () => {
                        const grupoActual = document.
                            querySelector(`[componente=contenedorImagenAmpliada][grupoActualIDV]`)
                            .getAttribute("grupoActualIDV")
                        const numeroImagen = document
                            .querySelector(`[componente=contenedorImagenAmpliada][numeroImagen]`)
                            .getAttribute("numeroImagen")
                        const imagenElemento = document.querySelector(`main [grupoIDV="${grupoActual}"] [numeroImagen="${numeroImagen}"]`)
                        const posicionImagen = imagenElemento.getBoundingClientRect();
                        const contenedorImagen = document.querySelector("main [componente=contenedorImagenAmpliada] [contenedor=imagenVolatil]")
                        contenedorImagen.addEventListener("transitionend", (e) => {
                            contenedorImagenAmpliada.remove()
                        })

                        document.body.style.removeProperty("overflow")
                        const contenedorImagenAmpliada = document.querySelector("main [componente=contenedorImagenAmpliada]")
                        contenedorImagenAmpliada.style.pointerEvents = "none"
                        contenedorImagen.style.top = posicionImagen.y + "px"
                        contenedorImagen.style.left = posicionImagen.x + "px"
                        contenedorImagen.style.width = posicionImagen.width + "px"
                        contenedorImagen.style.height = posicionImagen.height + "px"
                        contenedorImagenAmpliada.style.opacity = "0"
                    }
                    const cambiarImagen = (sentidoDireccion) => {
                        const grupoActual = document.
                            querySelector(`[componente=contenedorImagenAmpliada][grupoActualIDV]`)
                            .getAttribute("grupoActualIDV")
                        const imagenActual = document
                            .querySelector(`[componente=contenedorImagenAmpliada][numeroImagen]`)
                            .getAttribute("numeroImagen")
                        const numerosTotales = document.querySelector(`[componente=contenedorImagenAmpliada][numeroImagen]`)
                            .getAttribute("numerosTotales")
                        let imagenDestino
                        if (sentidoDireccion === "imagenSiguiente") {
                            const imagenSiguiente = Number(imagenActual) + 1
                            imagenDestino = imagenSiguiente > numerosTotales ? 0 : imagenSiguiente
                        }
                        if (sentidoDireccion === "imagenAnterior") {
                            const imagenAnterior = Number(imagenActual) - 1
                            imagenDestino = imagenAnterior < 0 ? numerosTotales : imagenAnterior
                        }
                        document.querySelector(`[componente=contenedorImagenAmpliada][numeroImagen]`)
                            .setAttribute("numeroImagen", imagenDestino)
                        const contenedorImagen = document
                            .querySelector(`[grupoIDV="${grupoActual}"] [numeroImagen="${imagenDestino}"]`)
                        const selectorImagenCSSResponsiva = contenedorImagen.getAttribute("imagenResponsiva")
                        const contenedorImagenAmpliada = document.querySelector(`[componente=contenedorImagenAmpliada] [contenedor=imagenVolatil]`)
                        const cssImagenObsoleto = contenedorImagenAmpliada.getAttribute("imagenAmpliadaClaseCSS")
                        contenedorImagenAmpliada.classList.remove(cssImagenObsoleto)
                        contenedorImagenAmpliada.classList.add(selectorImagenCSSResponsiva)
                        contenedorImagenAmpliada.setAttribute("imagenAmpliadaClaseCSS", selectorImagenCSSResponsiva)
                    }
                    const ampliarImagen = (imagen) => {
                        document.body.style.overflow = 'hidden';
                        const imagenElemento = imagen.target.closest("[imagenResponsiva]")
                        const fondoClaseCSS = imagenElemento.getAttribute("imagenResponsiva");
                        imagenesAmpliables.forEach((imagenAmpliable) => {
                            imagenAmpliable.removeAttribute("style")
                        })
                        const grupoIDV = imagenElemento.closest("[grupoIDV]").getAttribute("grupoIDV")
                        const imagenesDelApartamento = imagenElemento.closest("[grupoIDV]").querySelectorAll("[componente]")
                        let numerosTotales = 0
                        imagenesDelApartamento.forEach((imagenDelGrupo, numero) => {
                            numerosTotales = numero
                            imagenDelGrupo.setAttribute("numeroImagen", numero)
                        })

                        const numeroImagen = imagenElemento.getAttribute("numeroImagen")
                        const posicionImagen = imagenElemento.getBoundingClientRect();
                        const contenedorImagenAmpliada = document.createElement("div")
                        contenedorImagenAmpliada.classList.add("contenedorImagenAmpliada")
                        contenedorImagenAmpliada.setAttribute("componente", "contenedorImagenAmpliada")
                        contenedorImagenAmpliada.setAttribute("grupoActualIDV", grupoIDV)
                        contenedorImagenAmpliada.setAttribute("numeroImagen", numeroImagen)
                        contenedorImagenAmpliada.setAttribute("numerosTotales", numerosTotales)
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("gridHorizotnal3C", "gap10", "padding10")
                        contenedorBotones.setAttribute("componente", "contenedorBotones")
                        const botonAtras = document.createElement("div")
                        botonAtras.classList.add("botonV1Blanco", "blur50")
                        botonAtras.textContent = "Atras"
                        botonAtras.addEventListener("click", () => {
                            cambiarImagen("imagenAnterior")
                        })
                        contenedorBotones.appendChild(botonAtras)
                        const botonCerrar = document.createElement("div")
                        botonCerrar.classList.add("botonV1Blanco", "blur50")
                        botonCerrar.textContent = "Cerrar"

                        botonCerrar.addEventListener("click", (e) => {
                            cerrarImagen()


                        })

                        contenedorBotones.appendChild(botonCerrar)
                        const botonSiguiente = document.createElement("div")
                        botonSiguiente.classList.add("botonV1Blanco", "blur50")
                        botonSiguiente.textContent = "Siguiente"
                        botonSiguiente.addEventListener("click", () => {
                            cambiarImagen("imagenSiguiente")
                        })

                        contenedorBotones.appendChild(botonSiguiente)
                        const marcoEspaciadorContenedorBotones = document.createElement("div")
                        marcoEspaciadorContenedorBotones.classList.add("marcoEspaciadoContenedorBotones")
                        marcoEspaciadorContenedorBotones.appendChild(contenedorBotones)
                        contenedorImagenAmpliada.appendChild(marcoEspaciadorContenedorBotones)
                        const contenedorImagenVolatil = document.createElement("div")
                        contenedorImagenVolatil.classList.add("contenedorImagenVolatil")
                        contenedorImagenVolatil.classList.add(fondoClaseCSS)
                        contenedorImagenVolatil.setAttribute("contenedor", "imagenVolatil")
                        contenedorImagenVolatil.setAttribute("imagenAmpliadaClaseCSS", fondoClaseCSS)
                        contenedorImagenVolatil.style.top = posicionImagen.y + "px"
                        contenedorImagenVolatil.style.left = posicionImagen.x + "px"
                        contenedorImagenVolatil.style.width = posicionImagen.width + "px"
                        contenedorImagenVolatil.style.height = posicionImagen.height + "px"
                        contenedorImagenAmpliada.appendChild(contenedorImagenVolatil)
                        document.querySelector("main").appendChild(contenedorImagenAmpliada)




                        requestAnimationFrame(() => {



                        });
                        let start = null;
                        const step = (timestamp) => {
                            if (!start) { start = timestamp } else {
                                contenedorImagenVolatil.style.top = "0px"
                                contenedorImagenVolatil.style.left = "0"
                                contenedorImagenVolatil.style.height = "100vh"
                                contenedorImagenVolatil.style.width = "100vw"
                            };
                            let progress = timestamp - start;
                            if (progress < 1) {
                                window.requestAnimationFrame(step);
                            }
                        }
                        requestAnimationFrame(step);
                    }
                    imagenesAmpliables.forEach((imagenAmpliable) => {
                        imagenAmpliable.addEventListener("click", ampliarImagen)
                    })
                }
            },
            politicas: {
                arranque: () => {
                    const opciones = document.querySelectorAll("[vista]")
                    opciones.forEach((opcion) => {
                        opcion.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    })
                },
                privacidad: {
                    arranque: async () => {
                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "privacidad")

                        const contenedorBotones = casaVitini.componentes.privacidad.ui.contenedorSecciones()
                        main.appendChild(contenedorBotones)
                        const espacio = main.querySelector("[espacio=politicas]")
                        const privacidad = casaVitini.componentes.privacidad.arranque()
                        if (privacidad) {
                            const contenedorDecision = casaVitini.componentes.privacidad.ui.contenedorDecision()
                            espacio.appendChild(contenedorDecision)
                        } else {
                            const revocarDecision = casaVitini.componentes.privacidad.ui.revocarDecision()
                            espacio.appendChild(revocarDecision)
                        }
                    },
                    zonas: {
                        arranque: async () => {
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "privacidad/zonaCompartida")
                            main.style.paddingLeft = "20px"
                            main.style.paddingRight = "20px"


                            const botones = document.querySelectorAll("[componente=boton]")
                            botones.forEach((boton) => {
                                boton.addEventListener("click", (boton) => {
                                    boton.preventDefault()
                                    const vista = boton.target.getAttribute("vista")
                                    const navegacion = {
                                        vista: vista,
                                        tipoOrigen: "menuNavegador"
                                    }
                                    casaVitini.shell.navegacion.controladorVista(navegacion)
                                })
                            })

                        }
                    }
                }

            },
        },
        componentes: {
            errorUI: () => {
                const selectorContenedorError = document.querySelector(`[identificadorVisual=errorConexion]`)
                if (selectorContenedorError) {
                    return
                }
                document.querySelectorAll("[tipoMenu=volatil]").forEach((menu) => {
                    menu.removeAttribute("style")
                })
                casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()

                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const mensaje = "Se ha producido un error en la red y no se ha podido comunicar con el servidor. Si es por una causa circunstancial de la red, reinténtalo y debería funcionar. Comprueba que tienes acceso a la red. Por ejemplo, comprueba si puedes acceder a google.com o hacer un ping a google.com o a otros sitios conocidos. Si tienes acceso a sitios conocidos, es probable que el problema esté en el servidor de Casa Vitini."
                const advertenciaInmersivaUI = document.createElement("div")
                advertenciaInmersivaUI.setAttribute("class", "advertenciaInmersivaSuperpuesta")
                advertenciaInmersivaUI.setAttribute("identificadorVisual", "errorConexion")
                advertenciaInmersivaUI.setAttribute("pantallaSuperpuesta", "pantallaCargaSuperpuesta")
                advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")
                advertenciaInmersivaUI.setAttribute("instanciaUID", instanciaUID)
                const marcoElastico = document.createElement("div")
                marcoElastico.classList.add("marcoElasticoError")
                const info = document.createElement("div")
                info.setAttribute("class", "advertenciaInfoFlujoPago")
                info.setAttribute("componente", "mensajeFlujoPasarela")
                info.textContent = mensaje
                marcoElastico.appendChild(info)
                const boton = document.createElement("div")
                boton.setAttribute("class", "botonV1")
                boton.setAttribute("componente", "botonV1")
                boton.textContent = "Volver"
                boton.addEventListener("click", (e) => {
                    const rama = document.querySelector("main").getAttribute("rama")
                    const controladorZona = {
                        zona: rama
                    }


                    casaVitini.shell.navegacion.controladorNavegacion(controladorZona)
                    document.body.style.removeProperty("overflow");
                    e.target.parentNode.parentNode.remove()
                })
                marcoElastico.appendChild(boton)
                advertenciaInmersivaUI.appendChild(marcoElastico)
                document.querySelector("main").appendChild(advertenciaInmersivaUI)
            },
            urlDesconocida: function () {
                const main = document.querySelector("main")
                main.innerHTML = null

                const info = document.createElement("div")
                info.classList.add(
                    "textoCentrado",
                    "negrita",
                    "padding12"

                )
                info.textContent = "No existe nada en esta dirección :)"
                main.appendChild(info)

                const boton = document.createElement("a")
                boton.classList.add(
                    "botonV1",
                    "comportamientoBoton",
                    "areaSinDecoracionPredeterminada",
                    "margin10"
                )
                boton.textContent = "Ir a Administración"
                boton.setAttribute("href", "/administracion")
                boton.setAttribute("vista", "/administracion")
                boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                main.appendChild(boton)
            },
            errorRenderizacionVista: function () {
                casaVitini.shell.controladoresUI.limpiarMain()

                const main = document.querySelector("main")
                main.innerHTML = null

                const info = document.createElement("div")
                info.classList.add(
                    "textoCentrado",
                    "negrita",
                    "padding12"

                )
                info.textContent = "Se ha producido un error al renderizar la vista :)"
                main.appendChild(info)

            },
            errorVista: () => {
                let selectoresVistas = document.querySelectorAll("[vista")
                for (const vista of selectoresVistas) {
                    vista.style.backgroundColor = ""
                    vista.style.color = ""
                }
                let constructorSeccion = document.createElement("section")
                constructorSeccion.style.scale = "1";
                let vistaError = document.createElement("p")
                vistaError.setAttribute("id", "errorVista")
                vistaError.textContent = "Error, no se ha podido comunicar con el servidor. Reintentalo"
                vistaError.style.position = "relative"
                constructorSeccion.appendChild(vistaError);
                document.body.appendChild(constructorSeccion)
                document.getElementById("uiNavegacion").setAttribute("vistaActual", "error")
                document.getElementById("uiNavegacion").removeAttribute("arranqueVolatil")
                let espacio = document.body;
                espacio.style.background = ""
                espacio.style.backgroundSize = "cover"
                espacio.style.backgroundColor = "grey"
                let estado = {
                    zona: "Error",
                    "EstadoInternoZona": "estado"
                }
                let titulo = "Error"

            },
            advertenciaInmersiva: (advertencia) => {
                document.body.style.overflow = 'hidden';
                const advertenciaInmersivaUI = document.createElement("dialog")
                advertenciaInmersivaUI.setAttribute("class", "errorUI")
                advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")

                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                advertenciaInmersivaUI.appendChild(contenedorAdvertenciaInmersiva)

                const contenidoAdvertenciaInmersiva = document.createElement("div")
                contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("destino", "inyector")
                contenidoAdvertenciaInmersiva.setAttribute("componente", "contenedor")
                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)

                const info = document.createElement("div")
                info.classList.add(
                    "textoCentrado"
                )
                info.textContent = advertencia
                contenidoAdvertenciaInmersiva.appendChild(info)
                const boton = document.createElement("div")
                boton.setAttribute("class", "botonV1")
                boton.textContent = "Aceptar"

                boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                contenidoAdvertenciaInmersiva.appendChild(boton)
                document.querySelector("main").appendChild(advertenciaInmersivaUI)
            },
            advertenciaInmersivaSuperPuesta: (advertencia) => {
                const advertenciaInmersivaUI = document.createElement("div")
                advertenciaInmersivaUI.setAttribute("class", "advertenciaInmersivaSuperpuesta")
                advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")


                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                advertenciaInmersivaUI.appendChild(contenedorAdvertenciaInmersiva)

                const contenidoAdvertenciaInmersiva = document.createElement("div")
                contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("destino", "inyector")
                contenidoAdvertenciaInmersiva.setAttribute("componente", "contenedor")
                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)

                const info = document.createElement("div")
                info.classList.add(
                    "textoCentrado"
                )
                info.textContent = advertencia
                contenidoAdvertenciaInmersiva.appendChild(info)
                const boton = document.createElement("div")
                boton.setAttribute("class", "botonV1")
                boton.textContent = "Aceptar"
                boton.addEventListener("click", (e) => {
                    e.target.closest("[componente=advertenciaInmersiva]")?.remove()
                })
                contenidoAdvertenciaInmersiva.appendChild(boton)
                document.body.appendChild(advertenciaInmersivaUI)
            },
            errorConexion_noIvasivo: (advertencia) => {
                document.body.style.overflow = 'hidden';
                const advertenciaInmersivaUI = document.createElement("div")
                advertenciaInmersivaUI.setAttribute("class", "advertenciaInmersivaSuperpuesta")
                advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")
                advertenciaInmersivaUI.setAttribute("errorUI", "conexion")
                const marcoElastico = document.createElement("div")
                marcoElastico.classList.add("marcoElasticoError")
                const info = document.createElement("div")
                info.setAttribute("class", "errorInfo")
                info.textContent = "No se puede establecer conexión con el servidor. Por favor, verifica que estás conectado y reinténtalo. Se ha producido un error en la red y no se ha podido comunicar con el servidor. Si es por una causa circunstancial de la red, reinténtalo y debería funcionar. Comprueba que tienes acceso a la red. Por ejemplo, comprueba si puedes acceder a google.com o hacer un ping a google.com o a otros sitios conocidos. Si tienes acceso a sitios conocidos, es probable que el problema esté en el servidor de Casa Vitini."
                marcoElastico.appendChild(info)
                const boton = document.createElement("div")
                boton.setAttribute("class", "botonV1")
                boton.textContent = "Volver"
                boton.addEventListener("click", (e) => {
                    e.target.closest("[errorUI=conexion]").remove()
                })
                marcoElastico.appendChild(boton)
                advertenciaInmersivaUI.appendChild(marcoElastico)
                document.body.appendChild(advertenciaInmersivaUI)
            },
            pantallaDeCargaSuperPuesta: (metadatos) => {
                try {

                    const instanciaUID = metadatos.instanciaUID
                    const mensaje = metadatos.mensaje ? metadatos.mensaje : "Espere..."
                    const botonCancelar = metadatos.botonCancelar ? metadatos.botoCancelar : "mostrar"
                    const identificadorVisual = metadatos.identificadorVisual
                    const iconoSpinner = metadatos.iconoSpinner ? metadatos.iconoSpinner : "si"
                    const textoBoton = metadatos.textoBoton ? metadatos.textoBoton : "Cancelar"


                    const advertenciaInmersivaUI = document.createElement("div")
                    advertenciaInmersivaUI.setAttribute("class", "advertenciaInmersivaSuperpuesta")
                    advertenciaInmersivaUI.setAttribute("identificadorVisual", identificadorVisual)
                    advertenciaInmersivaUI.setAttribute("pantallaSuperpuesta", "pantallaCargaSuperpuesta")
                    advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")
                    advertenciaInmersivaUI.setAttribute("instanciaUID", instanciaUID)
                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElasticoError")
                    if (iconoSpinner === "si") {
                        const spinnerContainer = document.createElement('div');
                        spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                        spinnerContainer.classList.add("lds-spinner");
                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement('div');
                            spinnerContainer.appendChild(div);
                        }
                        marcoElastico.appendChild(spinnerContainer)
                    }
                    const info = document.createElement("div")
                    info.setAttribute("class", "advertenciaInfoFlujoPago")
                    info.setAttribute("componente", "mensajeFlujoPasarela")
                    info.textContent = mensaje
                    marcoElastico.appendChild(info)
                    const boton = document.createElement("div")
                    boton.setAttribute("class", "botonV1")
                    boton.setAttribute("componente", "botonV1")
                    boton.textContent = textoBoton
                    boton.addEventListener("click", (e) => {
                        document.body.style.removeProperty("overflow");
                        e.target.parentNode.parentNode.remove()
                    })
                    if (botonCancelar === "mostrar") {
                        marcoElastico.appendChild(boton)
                    }
                    advertenciaInmersivaUI.appendChild(marcoElastico)
                    document.querySelector("main").appendChild(advertenciaInmersivaUI)
                } catch (errorCapturado) {
                    casaVitini.ui.componentes.advertenciaInmersiva(errorCapturado.message)
                }
            },
            totales: (desgloseFinanciero) => {
                const totalesPorApartamento = desgloseFinanciero.totalesPorApartamento
                const totalesPorNoche = desgloseFinanciero.totalesPorNoche
                const totales = desgloseFinanciero.totales
                const desgloseImpuestos = desgloseFinanciero.impuestos
                const ofertas = desgloseFinanciero.ofertas
                const destino = desgloseFinanciero.destino
                const selectorDestino = document.querySelector(destino)
                if (!selectorDestino) {
                    const error = "Totales, no encuentra el elemento de destino. Revisa el identificador del elemento."
                    return casaVitini.ui.componentes.advertenciaInmersiva(error)
                }
                const simboloDescuento = {
                    porcentaje: "%",
                    cantidadFija: "$"
                }
                const contenedorDesgloseTotales = document.createElement("div")
                contenedorDesgloseTotales.classList.add(
                    "flexVertical",
                    "gap6"
                )
                const detallePorDiaUI = document.createElement("div")
                detallePorDiaUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const detalleDiaUITitulo = document.createElement("div")
                detalleDiaUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                detalleDiaUITitulo.textContent = "Detalle por noche"
                detallePorDiaUI.appendChild(detalleDiaUITitulo)
                const contenedorDesglosePorNoche = document.createElement("div")
                contenedorDesglosePorNoche.classList.add("reserva_resumen_desglose_porNoche")
                if (totalesPorNoche.length === 0) {
                    const info = document.createElement("div")
                    info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                    info.textContent = "No hay información financiera para desglosar por noche"
                    contenedorDesglosePorNoche.appendChild(info)
                }
                for (const detallePorNoche of totalesPorNoche) {
                    const fechaNoche = detallePorNoche.fechaDiaConNoche
                    const precioNetoNoche = detallePorNoche.precioNetoNoche
                    const apartamentosDetallesPorNoche = detallePorNoche.apartamentos
                    const apartamentoUI_ = document.createElement("div")
                    apartamentoUI_.classList.add("contenedorDiaConNoche")
                    const apartamentoUITitulo = document.createElement("div")
                    apartamentoUITitulo.classList.add("reserva_resumen_apartamentoIUTitulo")
                    apartamentoUITitulo.classList.add("negrita")
                    apartamentoUITitulo.textContent = fechaNoche
                    apartamentoUI_.appendChild(apartamentoUITitulo)
                    const totalNetoNocheUI = document.createElement("div")
                    totalNetoNocheUI.classList.add("reserva_resumen_apartamentoIUTitulo")
                    totalNetoNocheUI.classList.add("negrita")
                    totalNetoNocheUI.textContent = precioNetoNoche + "$ Total neto noche"
                    apartamentoUI_.appendChild(totalNetoNocheUI)
                    for (const detalleApartmentoPorNoche of apartamentosDetallesPorNoche) {
                        const apartamentoUI = detalleApartmentoPorNoche.apartamentoUI
                        const precioNetoPorNoche = detalleApartmentoPorNoche.precioNetoNoche
                        const detalleApartamentosUITitulo = document.createElement("div")
                        detalleApartamentosUITitulo.classList.add("reserva_resumen_apartamentoUIPrecio")
                        detalleApartamentosUITitulo.classList.add("negrita")
                        detalleApartamentosUITitulo.classList.add("colorGris")
                        detalleApartamentosUITitulo.textContent = apartamentoUI
                        apartamentoUI_.appendChild(detalleApartamentosUITitulo)
                        const detalleApartamentosUIPreciNetoNoche = document.createElement("div")
                        detalleApartamentosUIPreciNetoNoche.classList.add("reserva_resumen_apartamentoUIPrecio")
                        detalleApartamentosUIPreciNetoNoche.textContent = precioNetoPorNoche + "$ / Neto por noche"
                        apartamentoUI_.appendChild(detalleApartamentosUIPreciNetoNoche)
                    }
                    contenedorDesglosePorNoche.appendChild(apartamentoUI_)
                }
                detallePorDiaUI.appendChild(contenedorDesglosePorNoche)
                contenedorDesgloseTotales.appendChild(detallePorDiaUI)
                const contenedorTotalesPorApartamento = document.createElement("div")
                contenedorTotalesPorApartamento.classList.add("reserva_resumen_desglose_porNoche")
                const alojamientoUI = document.createElement("div")
                alojamientoUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const alojamientoUITitulo = document.createElement("div")
                alojamientoUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                alojamientoUITitulo.textContent = "Precio total neto por apartamento"
                alojamientoUI.appendChild(alojamientoUITitulo)
                if (totalesPorApartamento.length === 0) {
                    const info = document.createElement("div")
                    info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                    info.textContent = "No hay información financiera para desglosar por apartamento"
                    alojamientoUI.appendChild(info)
                }
                for (const detalleDesglosePorApartamento of totalesPorApartamento) {
                    const apartamentoUI_ = detalleDesglosePorApartamento.apartamentoUI
                    const totalNetoApartamento = detalleDesglosePorApartamento.totalNetoRango
                    const precioNetoMedioPorNoche = detalleDesglosePorApartamento.precioMedioNocheRango
                    const apartamentoUI = document.createElement("div")
                    apartamentoUI.classList.add("contenedorApartamento")
                    const apartamentoUITitulo = document.createElement("div")
                    apartamentoUITitulo.classList.add("contenedorTextoOferta")
                    apartamentoUITitulo.classList.add("negrita")
                    apartamentoUITitulo.textContent = apartamentoUI_
                    apartamentoUI.appendChild(apartamentoUITitulo)
                    const apartamentoUIPrecioNetoTotal = document.createElement("div")
                    apartamentoUIPrecioNetoTotal.classList.add("textoDetallesPorApartamento")
                    apartamentoUIPrecioNetoTotal.textContent = "Total neto: " + totalNetoApartamento + "$"
                    apartamentoUI.appendChild(apartamentoUIPrecioNetoTotal)
                    const apartamentoUIPrecioPromedioPorNoche = document.createElement("div")
                    apartamentoUIPrecioPromedioPorNoche.classList.add("textoDetallesPorApartamento")
                    apartamentoUIPrecioPromedioPorNoche.textContent = "Precio medio neto por noche: " + precioNetoMedioPorNoche + "$"
                    apartamentoUI.appendChild(apartamentoUIPrecioPromedioPorNoche)
                    alojamientoUI.appendChild(apartamentoUI)
                }
                contenedorTotalesPorApartamento.appendChild(alojamientoUI)
                contenedorDesgloseTotales.appendChild(contenedorTotalesPorApartamento)
                let controlContenido = "noDesplegar"
                const ofertasUI = document.createElement("div")
                ofertasUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const ofertasUITitulo = document.createElement("div")
                ofertasUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                ofertasUITitulo.textContent = "Ofertas aplicadas"
                ofertasUI.appendChild(ofertasUITitulo)
                for (const oferta of ofertas) {
                    const porNumeroDeApartamentos = oferta.porNumeroDeApartamentos
                    const porApartamentosEspecificos = oferta.porApartamentosEspecificos
                    const porDiasDeReserva = oferta.porDiasDeReserva
                    const porRangoDeFechas = oferta.porRangoDeFechas
                    const porDiasDeAntelacion = oferta.porDiasDeAntelacion
                    if (porNumeroDeApartamentos?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detallesReserva of oferta.porNumeroDeApartamentos) {
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const cantidad = detallesReserva.cantidad
                            const tipoDescuento = detallesReserva.tipoDescuento
                            const definicion = detallesReserva.definicion
                            const nombreOferta = detallesReserva.nombreOferta
                            const descuento = detallesReserva.descuento
                            let nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionOfertaUI)
                            if (tipoDescuento === "porcentaje") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento del " + cantidad + simboloDescuento[tipoDescuento] + " rebajando el neto de la reserva en " + descuento + "$"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            if (tipoDescuento === "cantidadFija") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento del " + cantidad + simboloDescuento[tipoDescuento] + " sobre el neto de la reserva"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                    if (porApartamentosEspecificos?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detallesOferta of oferta.porApartamentosEspecificos) {
                            const nombreOferta = detallesOferta.nombreOferta
                            const cantidad = detallesOferta.cantidad
                            const tipoDescuento = detallesOferta.tipoDescuento
                            const definicion = detallesOferta.definicion
                            const descuentoOferta = detallesOferta.descuentoOferta
                            const descuentoAplicadoA = detallesOferta.descuentoAplicadoA
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionOfertaUI)
                            if (descuentoAplicadoA === "totalNetoApartamentoDedicado") {
                                const apartamentosEspecificos = detallesOferta.apartamentosEspecificos
                                const contenedorApartamentosEspecificos = document.createElement("div")
                                contenedorApartamentosEspecificos.classList.add("componentes_ui_totales_ofertas_apartamentosEspecificos_contenedor")
                                for (const detallesApartamento of apartamentosEspecificos) {
                                    const apartamentoIDV = detallesApartamento.apartamentoIDV
                                    const apartamentoUI = detallesApartamento.apartamentoUI
                                    const tipoDescuento = detallesApartamento.tipoDescuento
                                    const cantidad = detallesApartamento.cantidad
                                    const descuento = detallesApartamento.descuento
                                    const bloqueDetalleOferta = document.createElement("div")
                                    bloqueDetalleOferta.classList.add("resumen_reserva_detalle_oferta_apartamentos_especificos")
                                    const tituloApartamentoUI = document.createElement("div")
                                    tituloApartamentoUI.classList.add("negrita")
                                    tituloApartamentoUI.innerHTML = apartamentoUI
                                    bloqueDetalleOferta.appendChild(tituloApartamentoUI)
                                    const tipoDescuentoApartamentoUI = document.createElement("div")
                                    tipoDescuentoApartamentoUI.textContent = tipoDescuento

                                    const cantidadPorApartmento = document.createElement("div")
                                    cantidadPorApartmento.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                    bloqueDetalleOferta.appendChild(cantidadPorApartmento)
                                    contenedorApartamentosEspecificos.appendChild(bloqueDetalleOferta)
                                }
                                contenedorIndividualOferta.appendChild(contenedorApartamentosEspecificos)
                            }
                            if (descuentoAplicadoA === "totalNetoReserva") {
                                const descuentoOfertaUI = document.createElement("div")
                                descuentoOfertaUI.classList.add("contenedorTextoOferta")
                                descuentoOfertaUI.textContent = descuentoOferta
                                contenedorIndividualOferta.appendChild(descuentoOfertaUI)
                                if (tipoDescuento === "porcentaje") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                if (tipoDescuento === "cantidadFija") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                            }
                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                    if (porDiasDeReserva?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detatllesReserva of oferta.porDiasDeReserva) {
                            const cantidad = detatllesReserva.cantidad
                            const tipoDescuento = detatllesReserva.tipoDescuento
                            const nombreOferta = detatllesReserva.nombreOferta
                            const numero = detatllesReserva.numero
                            const simboloNumero = detatllesReserva.simboloNumero
                            const definicion = detatllesReserva.definicion
                            const descuento = detatllesReserva.descuento
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionUI = document.createElement("div")
                            definicionUI.classList.add("contenedorTextoOferta")
                            definicionUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionUI)
                            if (tipoDescuento === "porcentaje") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento] + " rebajando el neto de la reserva en " + descuento + "$"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            if (tipoDescuento === "cantidadFija") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion

                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                    if (porRangoDeFechas?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detallesOferta of oferta.porRangoDeFechas) {
                            const cantidad = detallesOferta.cantidad
                            const tipoDescuento = detallesOferta.tipoDescuento
                            const definicion = detallesOferta.definicion
                            const nombreOferta = detallesOferta.nombreOferta
                            const diasAfectados = detallesOferta.diasAfectados
                            const descuento = detallesOferta.descuento
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionOfertaUI)
                            const tipoDescuentoUI = document.createElement("div")
                            tipoDescuentoUI.classList.add("contenedorTextoOferta")
                            tipoDescuentoUI.textContent = "Descuento total de la oferta: " + descuento + "$"
                            contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            const contenedorDiasEspecificos = document.createElement("div")
                            contenedorDiasEspecificos.classList.add("componentes_ui_totales_ofertas_diasEspecificos_contenedor")
                            for (const detalleDelDia of diasAfectados) {
                                const dia = detalleDelDia.dia
                                const totaDiaNetoConOferta = detalleDelDia.totaDiaNetoConOferta
                                const descuento = detalleDelDia.descuento
                                const bloque = document.createElement("div")
                                bloque.classList.add("resumen_reserva_detalle_oferta_apartamentos_especificos")
                                const tituloUI = document.createElement("div")
                                tituloUI.classList.add("negrita")
                                tituloUI.innerHTML = dia
                                bloque.appendChild(tituloUI)
                                const totalSinOferta = document.createElement("div")
                                totalSinOferta.textContent = "Total día con oferta: " + totaDiaNetoConOferta + "$"
                                bloque.appendChild(totalSinOferta)
                                const totalConOferta = document.createElement("div")
                                totalConOferta.textContent = "Descuento: " + descuento + "$"
                                bloque.appendChild(totalConOferta)
                                contenedorDiasEspecificos.appendChild(bloque)
                            }
                            contenedorIndividualOferta.appendChild(contenedorDiasEspecificos)
                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                    if (porDiasDeAntelacion?.length) {
                        controlContenido = "desplegar"
                        const contenedorOfertaUI = document.createElement("div")
                        contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                        for (const detallesOferta of oferta.porDiasDeAntelacion) {
                            const cantidad = detallesOferta.cantidad
                            const tipoDescuento = detallesOferta.tipoDescuento
                            const definicion = detallesOferta.definicion
                            const nombreOferta = detallesOferta.nombreOferta
                            const descuento = detallesOferta.descuento
                            const contenedorIndividualOferta = document.createElement("div")
                            contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                            const nombreOfertaUI = document.createElement("div")
                            nombreOfertaUI.classList.add("contenedorTextoOferta")
                            nombreOfertaUI.classList.add("negrita")
                            nombreOfertaUI.textContent = nombreOferta
                            contenedorIndividualOferta.appendChild(nombreOfertaUI)
                            const definicionOfertaUI = document.createElement("div")
                            definicionOfertaUI.classList.add("contenedorTextoOferta")
                            definicionOfertaUI.textContent = definicion
                            contenedorIndividualOferta.appendChild(definicionOfertaUI)
                            if (tipoDescuento === "porcentaje") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento del " + cantidad + "% sobre el neto de la reserva."
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            if (tipoDescuento === "cantidadFija") {
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento de " + cantidad + "$ sobre el neto de la reserva"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                            }
                            contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                        }
                        ofertasUI.appendChild(contenedorOfertaUI)
                    }
                }
                if (controlContenido === "desplegar") {
                    contenedorDesgloseTotales.appendChild(ofertasUI)
                }


                const impuestoUI = document.createElement("div")
                impuestoUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const impuestoUITituloBloque = document.createElement("div")
                impuestoUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                impuestoUITituloBloque.textContent = "Impuestos"
                impuestoUI.appendChild(impuestoUITituloBloque)




                if (desgloseImpuestos.length === 0) {
                    const info = document.createElement("div")
                    info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                    info.textContent = "No hay información financiera sobre impuestos para mostrar"
                    impuestoUI.appendChild(info)
                }
                desgloseImpuestos.forEach((impuesto) => {
                    const impuestoTitulo = impuesto.nombreImpuesto
                    const tipoValor = impuesto.tipoValor
                    const tipoImpositivo = impuesto.tipoImpositivo
                    const calculoImpuestoPorcentaje = impuesto.calculoImpuestoPorcentaje
                    const impuestoUITitulo = document.createElement("div")
                    impuestoUITitulo.classList.add("reserva_resumen_desglose_pago_elemento")
                    const impuestoUITitulo_ = document.createElement("div")
                    impuestoUITitulo_.classList.add("reserva_resumen_apartamentoIUTitulo")
                    impuestoUITitulo_.classList.add("negrita")
                    impuestoUITitulo_.textContent = impuestoTitulo
                    impuestoUITitulo.appendChild(impuestoUITitulo_)
                    let simboloTipoImpuesto;
                    if (tipoValor === "porcentaje") {
                        simboloTipoImpuesto = "%";
                    }
                    if (tipoValor === "tasa") {
                        simboloTipoImpuesto = "$";
                    }
                    const impuestoUITipoImpositivo = document.createElement("div")
                    impuestoUITipoImpositivo.classList.add("reserva_resumen_impuestoUITipoImpositivo")
                    impuestoUITipoImpositivo.textContent = tipoImpositivo + simboloTipoImpuesto
                    impuestoUITitulo.appendChild(impuestoUITipoImpositivo)
                    const impuestoUITipoValor = document.createElement("div")
                    impuestoUITipoValor.classList.add("resumen_reserva_impuestoUITipoValor")
                    impuestoUITipoValor.textContent = tipoValor

                    if (calculoImpuestoPorcentaje) {
                        const impuestoUICalculoImpuestoPorcentaje = document.createElement("div")
                        impuestoUICalculoImpuestoPorcentaje.classList.add("resumen_reserva_impuestoUICalculoImpuestoPorcentaje")
                        impuestoUICalculoImpuestoPorcentaje.textContent = calculoImpuestoPorcentaje + "$"
                        impuestoUITitulo.appendChild(impuestoUICalculoImpuestoPorcentaje)
                    }
                    impuestoUI.appendChild(impuestoUITitulo)
                })


                if (desgloseImpuestos.length > 0) {
                    contenedorDesgloseTotales.appendChild(impuestoUI)
                }

                const totalesUI = document.createElement("div")
                totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                const totalesUITituloBloque = document.createElement("div")
                totalesUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                totalesUITituloBloque.textContent = "Totales"
                totalesUI.appendChild(totalesUITituloBloque)
                const totalPromedioNetoPorNoche = totales.promedioNetoPorNoche ?
                    totales.promedioNetoPorNoche + "$" :
                    "No hay información del total promedio neto por noche";
                const totalReservaNeto = totales.totalReservaNeto ? totales.totalReservaNeto + "$" : "No hay información del total neto de la reserva"
                const totalImpuestos = totales.totalImpuestos ? totales.totalImpuestos + "$" : "No hay información del total de los impuestos"
                const totalDescuentos = totales.totalDescuentos ? totales.totalDescuentos + "$" : "No hay información del total desconectado."
                const totalReservaNetoSinDescuentos = totales.totalReservaNetoSinOfertas ? totales.totalReservaNetoSinOfertas + "$" : "No hay información del total de la reserva sin descuentos."
                if (totales.totalReservaNeto) {
                    const totalReservaNetoDiaUI = document.createElement("div")
                    totalReservaNetoDiaUI.classList.add("detalleDelTotal")
                    totalReservaNetoDiaUI.textContent = "Precio medio neto de la reserva por noche: " + totalPromedioNetoPorNoche

                    if (totales.totalDescuentos) {
                        const totalDescuentosAplicadosUI = document.createElement("div")
                        totalDescuentosAplicadosUI.classList.add("detalleDelTotal")
                        totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas: " + totalDescuentos
                        totalesUI.appendChild(totalDescuentosAplicadosUI)
                        const totalReservaNetoSinOfertasUI = document.createElement("div")
                        totalReservaNetoSinOfertasUI.classList.add("detalleDelTotal")
                        totalReservaNetoSinOfertasUI.textContent = "Total neto sin ofertas aplicadas: " + totalReservaNetoSinDescuentos
                        totalesUI.appendChild(totalReservaNetoSinOfertasUI)
                    }
                    const totalReservaNetoUI = document.createElement("div")
                    totalReservaNetoUI.classList.add("detalleDelTotal")
                    totalReservaNetoUI.textContent = "Total reserva neto: " + totalReservaNeto
                    totalesUI.appendChild(totalReservaNetoUI)
                    const totalImpuestosUI = document.createElement("div")
                    totalImpuestosUI.classList.add("detalleDelTotal")
                    totalImpuestosUI.textContent = "Total impuestos aplicados: " + totalImpuestos
                    totalesUI.appendChild(totalImpuestosUI)
                    const totalConImpuestosUI = document.createElement("div")
                    totalConImpuestosUI.classList.add("detalleDelTotal")
                    totalConImpuestosUI.classList.add("negrita")
                    totalConImpuestosUI.textContent = "Total final: " + totales.totalConImpuestos + "$"
                    totalesUI.appendChild(totalConImpuestosUI)
                } else {
                    const info = document.createElement("div")
                    info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                    info.textContent = "No hay información de totales"
                    totalesUI.appendChild(info)
                }
                contenedorDesgloseTotales.appendChild(totalesUI)
                selectorDestino.appendChild(contenedorDesgloseTotales)
            },
            pantallaInmersivaPersonalizada: (data) => {

                const alineacion = data?.alineacion
                document.body.style.overflow = 'hidden';
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const pantallaInmersivaPersonalizadaUI = document.createElement("div")
                pantallaInmersivaPersonalizadaUI.setAttribute("class", "advertenciaInmersiva")
                pantallaInmersivaPersonalizadaUI.setAttribute("componente", "advertenciaInmersiva")
                if (alineacion === "arriba") {
                    pantallaInmersivaPersonalizadaUI.classList.add("flextJustificacion_arriba")
                } else {
                    pantallaInmersivaPersonalizadaUI.classList.add("flextJustificacion_center")
                }
                pantallaInmersivaPersonalizadaUI.setAttribute("instanciaUID", instanciaUID)

                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                pantallaInmersivaPersonalizadaUI.appendChild(contenedorAdvertenciaInmersiva)

                const contenidoAdvertenciaInmersiva = document.createElement("div")
                contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("destino", "inyector")
                contenidoAdvertenciaInmersiva.setAttribute("componente", "contenedor")
                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)


                return pantallaInmersivaPersonalizadaUI
            },
            pantallaInmersivaPersonalizadaMoldeada: () => {
                document.body.style.overflow = 'hidden';
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const pantallaInmersivaPersonalizadaUI = document.createElement("div")
                pantallaInmersivaPersonalizadaUI.setAttribute("class", "advertenciaInmersiva")
                pantallaInmersivaPersonalizadaUI.setAttribute("componente", "advertenciaInmersiva")
                pantallaInmersivaPersonalizadaUI.setAttribute("instanciaUID", instanciaUID)
                const contenedorAdvertenciaInmersiva = document.createElement("div")
                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                const contenidoAdvertenciaInmersiva = document.createElement("div")
                contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                contenidoAdvertenciaInmersiva.setAttribute("destino", "inyector")
                contenidoAdvertenciaInmersiva.setAttribute("componente", "constructor")

                const tituloUI = document.createElement("p")
                tituloUI.classList.add(
                    "tituloGris",
                    "textoCentrado"
                )
                tituloUI.setAttribute("componente", "titulo")
                contenidoAdvertenciaInmersiva.appendChild(tituloUI)


                const mensajeUI = document.createElement("div")
                mensajeUI.classList.add("mensajeUI")
                mensajeUI.setAttribute("componente", "mensajeUI")
                contenidoAdvertenciaInmersiva.appendChild(mensajeUI)

                const contenedorEspacio = document.createElement("div")
                contenedorEspacio.setAttribute("componente", "contenedor")
                contenidoAdvertenciaInmersiva.appendChild(contenedorEspacio)

                const botonAceptar = document.createElement("div")
                botonAceptar.classList.add("botonV1")
                botonAceptar.setAttribute("boton", "aceptar")
                contenidoAdvertenciaInmersiva.appendChild(botonAceptar)

                const botonCancelar = document.createElement("div")
                botonCancelar.classList.add("botonV1")
                botonCancelar.setAttribute("boton", "cancelar")
                botonCancelar.addEventListener("click", () => {
                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                })
                contenidoAdvertenciaInmersiva.appendChild(botonCancelar)

                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                pantallaInmersivaPersonalizadaUI.appendChild(contenedorAdvertenciaInmersiva)
                return pantallaInmersivaPersonalizadaUI
            },
            spinner: (data) => {
                const mensaje = data.mensaje || ""
                const textoBoton = data.textoBoton || "Ocultar"

                const contenedorSpinner = document.createElement("div")
                contenedorSpinner.classList.add("contenedorSpinner")
                contenedorSpinner.setAttribute("componente", "spinnerListaDeEnlaces")
                contenedorSpinner.setAttribute("contenedor", "spinner")
                const spinnerContainer = document.createElement('div');
                spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                spinnerContainer.classList.add("lds-spinner");
                for (let i = 0; i < 12; i++) {
                    const div = document.createElement('div');
                    spinnerContainer.appendChild(div);
                }
                const info = document.createElement("div")
                info.setAttribute("class", "advertenciaInfoFlujoPago")
                info.setAttribute("componente", "mensajeFlujoPasarela")
                info.textContent = mensaje
                const botoCancelar = document.createElement("div")
                botoCancelar.setAttribute("class", "botonV1AdvertenciaInmersiva")
                botoCancelar.setAttribute("boton", "cancelar")
                botoCancelar.textContent = textoBoton
                botoCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                contenedorSpinner.appendChild(spinnerContainer)
                contenedorSpinner.appendChild(info)
                contenedorSpinner.appendChild(botoCancelar)
                return contenedorSpinner
            },
            spinnerSimple: () => {
                const contenedorSpinner = document.createElement("div")
                contenedorSpinner.classList.add("contenedorSpinner")
                contenedorSpinner.setAttribute("componente", "spinnerSimple")
                contenedorSpinner.setAttribute("contenedor", "spinner")
                const spinnerContainer = document.createElement('div');
                spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                spinnerContainer.classList.add("lds-spinner");
                for (let i = 0; i < 12; i++) {
                    const div = document.createElement('div');
                    spinnerContainer.appendChild(div);
                }
                contenedorSpinner.appendChild(spinnerContainer)
                return contenedorSpinner
            },
            mensajeSimple: (data) => {

                const titulo = data?.titulo
                const descripcion = data?.descripcion

                const contenedor = document.createElement("div")
                contenedor.classList.add("componentes_contenedor_mensajeSimple")
                const contenedorIntermedio = document.createElement("div")
                contenedorIntermedio.classList.add("componentes_contenedor_contenedorIntermedio")
                contenedorIntermedio.setAttribute("espacio", "formularioCrearEnlaceDePago")
                const contenedorBloque = document.createElement("div")
                contenedorBloque.classList.add("componentes_contenedor_contenido")

                if (titulo) {
                    const tituloUI = document.createElement("div")
                    tituloUI.classList.add("componentes_contenedor_mensajeSimple_titulo")
                    tituloUI.classList.add("negrita")
                    tituloUI.textContent = titulo
                    contenedorBloque.appendChild(tituloUI)
                }

                if (descripcion) {
                    const descripcionUI = document.createElement("div")
                    descripcionUI.classList.add("mensajeDelError")
                    descripcionUI.textContent = descripcion
                    contenedorBloque.appendChild(descripcionUI)
                }

                contenedorIntermedio.appendChild(contenedorBloque)
                contenedor.appendChild(contenedorIntermedio)
                const main = document.querySelector("main")
                main.removeAttribute("instanciaUID")
                main.innerHTML = null
                main.appendChild(contenedor)
            },
            iconoProceso: () => {
                const iconoProcesoDiv = document.createElement('div');
                iconoProcesoDiv.className = 'iconoProceso';
                iconoProcesoDiv.setAttribute("componente", "iconoProceso")
                for (let i = 0; i < 12; i++) {
                    const divInterno = document.createElement('div');
                    iconoProcesoDiv.appendChild(divInterno);
                }
                return iconoProcesoDiv;
            },
            calendario: {
                constructorCalendarioNuevo: (metadatos) => {
                    try {
                        const almacenamientoVolatilUID = metadatos.almacenamientoCalendarioID
                        if (!almacenamientoVolatilUID) {
                            const error = "El constructor del calendario, necesita un nombre para el almacenamiento volátil"
                            throw new Error(error)
                        }
                        const tipoFecha = metadatos.tipoFecha
                        if (!tipoFecha) {
                            const error = "El constructor del calendario, necesita un tipoFecha, ya sea entrada o salida"
                            throw new Error(error)
                        }
                        const calendarioIO = metadatos.calendarioIO
                        if (!calendarioIO) {
                            const error = "El constructor del calendario, necesita un calendarioIO, ya sea entrada o salida"
                            throw new Error(error)
                        }
                        const perfilMes = metadatos.perfilMes
                        if (!perfilMes) {
                            const error = "El constructor del calendario, necesita un perfilMes, consulte los perfiles en constructorMes"
                            throw new Error(error)
                        }
                        const mensajeInfo = metadatos.mensajeInfo
                        if (!mensajeInfo) {
                            const error = "El constructor del calendario, necesita un mensajeInfo, para informar de para que es este calendario"
                            throw new Error(error)
                        }
                        const alturaDinamica = metadatos.alturaDinamica
                        if (!alturaDinamica) {
                            const error = "El constructor del calendario necesita una altura dinámica para colorar el contenedor del calendario."
                            throw new Error(error)
                        }
                        const instanciaUID = metadatos.instanciaUID
                        if (!instanciaUID) {
                            const error = "El constructor del calendario necesita una instanciaUID para el contenedor del calendario"
                            throw new Error(error)
                        }
                        const instanciaUID_contenedorFechas = metadatos.instanciaUID_contenedorFechas
                        if (!instanciaUID_contenedorFechas) {
                            const error = "El constructor del calendario necesita una instanciaUID_contenedorFechas para calendario"
                            throw new Error(error)
                        }
                        const metodoSelectorDia = metadatos.metodoSelectorDia
                        if (!metodoSelectorDia) {
                            const error = "El constructor del calendario necesita un metodoSelectorDia para el contenedor del calendario"
                            throw new Error(error)
                        }
                        const seleccionableDiaLimite = metadatos.seleccionableDiaLimite || "si"

                        const calendario = document.createElement("div")
                        calendario.setAttribute("class", "calendarioNuevo")
                        calendario.setAttribute("campo", "calendario")
                        calendario.setAttribute("contenedor", "calendario")
                        calendario.setAttribute("componente", "marcoCalendario")
                        calendario.setAttribute("almacenamientoCalendarioID", almacenamientoVolatilUID)
                        calendario.setAttribute("tipoCalendario", tipoFecha)
                        calendario.setAttribute("calendarioIO", calendarioIO)
                        calendario.setAttribute("metodoSelectorDia", metodoSelectorDia)
                        calendario.setAttribute("seleccionableDiaLimite", seleccionableDiaLimite)
                        calendario.setAttribute("elemento", "flotante")
                        calendario.setAttribute("perfilMes", perfilMes)
                        calendario.setAttribute("IO", calendarioIO)


                        const botonCerrarCalResponsivo = document.createElement("div")
                        botonCerrarCalResponsivo.classList.add(
                            "padding10",
                            "borderRadius10",
                            "selectorRojo",
                            "flextJustificacion_center",
                            "mostrarSoloEnResponsivo"
                        )
                        botonCerrarCalResponsivo.textContent = "Cerrar calendario y volver"
                        botonCerrarCalResponsivo.setAttribute("elemento", "noFlotante")

                        botonCerrarCalResponsivo.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        calendario.appendChild(botonCerrarCalResponsivo)

                        const navegacionMes = document.createElement("nav")
                        navegacionMes.setAttribute("class", "navegacionMes")
                        calendario.appendChild(navegacionMes)

                        const botonNavegacionMesAtras = document.createElement("div")
                        botonNavegacionMesAtras.setAttribute("class", "botonNavegacionMes")
                        botonNavegacionMesAtras.setAttribute("id", "botonAtras")
                        botonNavegacionMesAtras.setAttribute("sentido", "atras")
                        botonNavegacionMesAtras.textContent = "Atrás"
                        botonNavegacionMesAtras.addEventListener("click", casaVitini.ui.componentes.calendario.navegacionCalendarioNuevo)
                        navegacionMes.appendChild(botonNavegacionMesAtras)
                        const navegacionMesReferencia = document.createElement("div")
                        navegacionMesReferencia.setAttribute("id", "navegacionMesReferencia")
                        navegacionMesReferencia.setAttribute("class", "navegacionMesReferencia")
                        navegacionMesReferencia.setAttribute("componente", "mesReferencia")
                        navegacionMes.appendChild(navegacionMesReferencia)
                        const botonNavegacionMesAdelante = document.createElement("div")
                        botonNavegacionMesAdelante.setAttribute("class", "botonNavegacionMes")
                        botonNavegacionMesAdelante.setAttribute("id", "botonAdelante")
                        botonNavegacionMesAdelante.textContent = "Adelante"
                        botonNavegacionMesAdelante.setAttribute("sentido", "adelante")
                        botonNavegacionMesAdelante.addEventListener("click", casaVitini.ui.componentes.calendario.navegacionCalendarioNuevo)
                        navegacionMes.appendChild(botonNavegacionMesAdelante)



                        const cartelInfoCalendarioEstado = document.createElement("div")
                        cartelInfoCalendarioEstado.setAttribute("class", "cartelInfoCalendarioEstado")
                        cartelInfoCalendarioEstado.setAttribute("componente", "infoCalendario")
                        cartelInfoCalendarioEstado.setAttribute("campo", "calendario")
                        cartelInfoCalendarioEstado.textContent = mensajeInfo
                        calendario.appendChild(cartelInfoCalendarioEstado)


                        const marcoMes = document.createElement("ol")
                        marcoMes.setAttribute("id", "marcoMes")
                        marcoMes.setAttribute("class", "marcoMes")
                        marcoMes.setAttribute("componente", "marcoMes")
                        marcoMes.style.gridTemplateRows = "min-content min-content"
                        marcoMes.style.flex = "0"
                        calendario.appendChild(marcoMes)
                        const pilaDias = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"]
                        for (const nombreDia of pilaDias) {
                            let diaSemana = document.createElement("li")
                            diaSemana.setAttribute("class", "nombreDia")
                            diaSemana.setAttribute("tipoNombreDia", "extendido")
                            diaSemana.textContent = nombreDia
                            marcoMes.appendChild(diaSemana)
                        }
                        const pilaDiasAbreviados = ["L", "M", "X", "J", "V", "S", "D"]
                        for (const nombreDia of pilaDiasAbreviados) {
                            let diaSemana = document.createElement("li")
                            diaSemana.setAttribute("class", "nombreDia")
                            diaSemana.setAttribute("tipoNombreDia", "abreviado")
                            diaSemana.textContent = nombreDia
                            marcoMes.appendChild(diaSemana)
                        }


                        const bloqueCalendario = document.createElement("div")
                        bloqueCalendario.classList.add(
                            "bloqueCalendarioNuevo",
                            "calendarioFlotante"
                        )

                        const claseDinamica = document.createElement('style');
                        claseDinamica.innerHTML = `
                            .calendarioFlotante {
                                top: ${alturaDinamica - 40}px
                                }
                            @media (max-width: 720px) {
                                .calendarioFlotante {
                                    top: 0px;
                                }
                            }
                        `;
                        bloqueCalendario.appendChild(claseDinamica);
                        bloqueCalendario.setAttribute("instanciaUID", instanciaUID)
                        bloqueCalendario.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                        bloqueCalendario.setAttribute("componente", "bloqueCalendario")


                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                        const contenedorCarga = document.createElement("div")
                        contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
                        contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                        contenedorCarga.setAttribute("elemento", "flotante")
                        contenedorCarga.appendChild(spinner)

                        calendario.appendChild(contenedorCarga)
                        bloqueCalendario.appendChild(calendario)
                        document.querySelector("main").appendChild(bloqueCalendario)


                    } catch (errorCapturado) {
                        throw errorCapturado
                    }
                },
                configurarCalendario: async (data) => {
                    const metodoAlternativo = data.metodoAlternativo
                    const instanciaUID_contenedorFechas = data.instanciaUID_contenedorFechas
                    const contenedorOrigenIDV = data.contenedorOrigenIDV
                    const perfilMes = data.perfilMes
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const metodoSelectorDia = data?.metodoSelectorDia || "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                    const areaContenedorFechas = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)
                    const rangoIDV = data.rangoIDV
                    const seleccionableDiaLimite = data.seleccionableDiaLimite

                    const contenedorOrigen = areaContenedorFechas.querySelector(contenedorOrigenIDV)
                    const alturaDinamicaArriba = casaVitini.utilidades.observador.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(contenedorOrigen) + 20
                    const selectorCalendario = document.querySelector("[contenedor=calendario]")

                    const bloqueCalendario = document.querySelectorAll("[componente=bloqueCalendario]")
                    bloqueCalendario.forEach((calendarioObsoelto) => {
                        calendarioObsoelto.remove()
                    })

                    const fechasSeleccionadas = () => {
                        const fechaEntradaVolatil = areaContenedorFechas.querySelector("[calendario=entrada]").
                            getAttribute("memoriaVolatil")
                        const fechaEntradaAarray = fechaEntradaVolatil?.split("-") ? fechaEntradaVolatil?.split("-") : []
                        const diaSeleccionadoEntrada = Number(fechaEntradaAarray[2])
                        const mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                        const anoSeleccionadoEntrada = Number(fechaEntradaAarray[0])

                        const fechaSalidaVolatil = areaContenedorFechas.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                        const fechaSaliraArray = fechaSalidaVolatil?.split("-") ? fechaSalidaVolatil?.split("-") : []
                        const diaSeleccionadoSalida = Number(fechaSaliraArray[2])
                        const mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                        const anoSeleccionadoSalida = Number(fechaSaliraArray[0])

                        const contenedorFechas = {
                            fechaEntrada: {
                                volatil: fechaEntradaVolatil,
                                dia: diaSeleccionadoEntrada,
                                mes: mesSeleccionadoEntrada,
                                ano: anoSeleccionadoEntrada
                            },
                            fechaSalida: {
                                volatil: fechaSalidaVolatil,
                                dia: diaSeleccionadoSalida,
                                mes: mesSeleccionadoSalida,
                                ano: anoSeleccionadoSalida
                            }
                        }
                        return contenedorFechas
                    }
                    const resolverCalendario = {}
                    const configuracionCalendario = {
                        almacenamientoCalendarioID: "almacenamientoCalendario",
                        perfilMes,
                        alturaDinamica: alturaDinamicaArriba,
                        instanciaUID,
                        instanciaUID_contenedorFechas,
                        metodoAlternativo,
                        metodoSelectorDia,
                        seleccionableDiaLimite
                    }
                    if (rangoIDV === "inicioRango") {
                        const tituloCalendario = data?.tituloCalendario || "Selecciona una fecha"
                        if (selectorCalendario?.getAttribute("calendarioIO") === "entrada") {
                            return
                        }
                        if (fechasSeleccionadas().fechaEntrada?.volatil) {
                            resolverCalendario.tipo = "personalizado"


                            resolverCalendario.mes = Number(fechasSeleccionadas().fechaEntrada.mes)
                            resolverCalendario.ano = Number(fechasSeleccionadas().fechaEntrada.ano)

                            configuracionCalendario.tipoFecha = "entrada"
                            configuracionCalendario.calendarioIO = "entrada"
                            configuracionCalendario.mensajeInfo = tituloCalendario


                        } else if (fechasSeleccionadas().fechaSalida?.volatil) {
                            resolverCalendario.tipo = "personalizado"


                            resolverCalendario.mes = Number(fechasSeleccionadas().fechaSalida.mes)
                            resolverCalendario.ano = Number(fechasSeleccionadas().fechaSalida.ano)

                            configuracionCalendario.tipoFecha = "entrada"
                            configuracionCalendario.calendarioIO = "entrada"
                            configuracionCalendario.mensajeInfo = tituloCalendario


                        } else {
                            resolverCalendario.tipo = "actual"


                            configuracionCalendario.tipoFecha = "entrada"
                            configuracionCalendario.calendarioIO = "entrada"
                            configuracionCalendario.mensajeInfo = tituloCalendario

                        }
                    } else if (rangoIDV === "finalRango") {
                        const tituloCalendario = data?.tituloCalendario || "Selecciona una fecha"

                        if (selectorCalendario?.getAttribute("calendarioIO") === "salida") {
                            return
                        }
                        if (fechasSeleccionadas().fechaSalida?.volatil) {
                            resolverCalendario.tipo = "personalizado"


                            resolverCalendario.mes = Number(fechasSeleccionadas().fechaSalida.mes)
                            resolverCalendario.ano = Number(fechasSeleccionadas().fechaSalida.ano)

                            configuracionCalendario.tipoFecha = "salida"
                            configuracionCalendario.calendarioIO = "salida"
                            configuracionCalendario.mensajeInfo = tituloCalendario


                        } else if (fechasSeleccionadas().fechaEntrada?.volatil) {

                            resolverCalendario.tipo = "personalizado"


                            resolverCalendario.mes = Number(fechasSeleccionadas().fechaEntrada.mes)
                            resolverCalendario.ano = Number(fechasSeleccionadas().fechaEntrada.ano)
                            configuracionCalendario.tipoFecha = "salida"
                            configuracionCalendario.calendarioIO = "salida"
                            configuracionCalendario.mensajeInfo = tituloCalendario


                        } else {
                            resolverCalendario.tipo = "actual"

                            configuracionCalendario.tipoFecha = "salida"
                            configuracionCalendario.calendarioIO = "salida"
                            configuracionCalendario.mensajeInfo = tituloCalendario

                        }
                    } else if (rangoIDV === "unico") {
                        const tituloCalendario = data?.tituloCalendario || "Selecciona una fecha"
                        if (selectorCalendario?.getAttribute("calendarioIO") === "unico") {
                            return
                        }
                        const fechaUnica = areaContenedorFechas.querySelector("[calendario=unico]").getAttribute("memoriaVolatil") | []

                        const diaSeleccionado = Number(fechaUnica[2])
                        const mesSeleccionado = Number(fechaUnica[1])
                        const anoSeleccionado = Number(fechaUnica[0])

                        if (fechaUnica) {
                            resolverCalendario.tipo = "personalizado"


                            resolverCalendario.mes = Number(mesSeleccionado)
                            resolverCalendario.ano = Number(anoSeleccionado)

                            configuracionCalendario.tipoFecha = "unico"
                            configuracionCalendario.calendarioIO = "unico"
                            configuracionCalendario.mensajeInfo = tituloCalendario
                        } else {
                            resolverCalendario.tipo = "actual"

                            configuracionCalendario.tipoFecha = "unico"
                            configuracionCalendario.calendarioIO = "unico"
                            configuracionCalendario.mensajeInfo = tituloCalendario

                        }

                    } else {
                        const m = "configurarCalendario no reconoce el rango, puede ser inicioRango, finalRango o unico"
                        return casaVitini.ui.componentes.advertenciaInmersiva(m)
                    }
                    casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(configuracionCalendario)

                    document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                    const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolverCalendario)

                    calendarioResuelto.instanciaUID = instanciaUID
                    calendarioResuelto.instanciaUID_contenedorFechas = instanciaUID_contenedorFechas
                    await casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                },
                constructorCalendarioIncrustado: (metadatos) => {
                    try {
                        const almacenamientoVolatilUID = metadatos.almacenamientoCalendarioID
                        if (!almacenamientoVolatilUID) {
                            const error = "El constructor del calendario, necesita un nombre para el almacenamiento volatil"
                            throw new Error(error)
                        }
                        const tipoFecha = metadatos.tipoFecha
                        if (!tipoFecha) {
                            const error = "El constructor del calendario, necesita un tipoFecha, ya sea entrada o salida"
                            throw new Error(error)
                        }
                        const calendarioIO = metadatos.calendarioIO
                        if (!calendarioIO) {
                            const error = "El constructor del calendario, necesita un calendarioIO, ya sea entrada o salida"
                            throw new Error(error)
                        }
                        const perfilMes = metadatos.perfilMes
                        if (!perfilMes) {
                            const error = "El constructor del calendario, necesita un perfilMes, consulte los perfiles en constructorMes"
                            throw new Error(error)
                        }
                        const mensajeInfo = metadatos.mensajeInfo
                        if (!mensajeInfo) {
                            const error = "El constructor del calendario, necesita un mensajeInfo, para informar de para que es este calendario"
                            throw new Error(error)
                        }
                        const alturaDinamica = metadatos.alturaDinamica
                        if (!alturaDinamica) {
                            const error = "EEl constructor del calendario necesita una altura dinamica para colora el contenedor del calendario"
                            throw new Error(error)
                        }
                        const instanciaUID = metadatos.instanciaUID
                        if (!instanciaUID) {
                            const error = "El constructor del calendario necesita una instanciaUID para el contenedor del calendario"
                            throw new Error(error)
                        }
                        const metodoSelectorDia = metadatos.metodoSelectorDia
                        if (!metodoSelectorDia) {
                            const error = "El constructor del calendario necesita un metodoSelectorDia para el contenedor del calendario"
                            throw new Error(error)
                        }
                        const calendario = document.createElement("div")
                        calendario.setAttribute("class", "calendarioIncrustado")
                        calendario.setAttribute("campo", "calendario")
                        calendario.setAttribute("contenedor", "calendario")
                        calendario.setAttribute("componente", "marcoCalendario")
                        calendario.setAttribute("almacenamientoCalendarioID", almacenamientoVolatilUID)
                        calendario.setAttribute("tipoCalendario", tipoFecha)
                        calendario.setAttribute("calendarioIO", calendarioIO)
                        calendario.setAttribute("metodoSelectorDia", metodoSelectorDia)
                        calendario.setAttribute("elemento", "flotante")
                        calendario.setAttribute("perfilMes", perfilMes)
                        calendario.setAttribute("IO", calendarioIO)
                        calendario.style.display = "none"
                        const cartelInfoCalendarioEstado = document.createElement("div")
                        cartelInfoCalendarioEstado.setAttribute("class", "cartelInfoCalendarioEstado")
                        cartelInfoCalendarioEstado.setAttribute("componente", "infoCalendario")
                        cartelInfoCalendarioEstado.setAttribute("campo", "calendario")
                        cartelInfoCalendarioEstado.textContent = mensajeInfo
                        const navegacionMes = document.createElement("nav")
                        navegacionMes.setAttribute("class", "navegacionMes")
                        calendario.appendChild(navegacionMes)
                        calendario.appendChild(cartelInfoCalendarioEstado)
                        const botonNavegacionMesAtras = document.createElement("div")
                        botonNavegacionMesAtras.setAttribute("class", "botonNavegacionMes")
                        botonNavegacionMesAtras.setAttribute("id", "botonAtras")
                        botonNavegacionMesAtras.setAttribute("sentido", "atras")
                        botonNavegacionMesAtras.textContent = "Atras"
                        botonNavegacionMesAtras.addEventListener("click", casaVitini.ui.componentes.calendario.navegacionCalendarioNuevo)
                        navegacionMes.appendChild(botonNavegacionMesAtras)
                        const navegacionMesReferencia = document.createElement("div")
                        navegacionMesReferencia.setAttribute("id", "navegacionMesReferencia")
                        navegacionMesReferencia.setAttribute("class", "navegacionMesReferencia")
                        navegacionMesReferencia.setAttribute("componente", "mesReferencia")
                        navegacionMes.appendChild(navegacionMesReferencia)
                        const botonNavegacionMesAdelante = document.createElement("div")
                        botonNavegacionMesAdelante.setAttribute("class", "botonNavegacionMes")
                        botonNavegacionMesAdelante.setAttribute("id", "botonAdelante")
                        botonNavegacionMesAdelante.textContent = "Adelante"
                        botonNavegacionMesAdelante.setAttribute("sentido", "adelante")
                        botonNavegacionMesAdelante.addEventListener("click", casaVitini.ui.componentes.calendario.navegacionCalendarioNuevo)
                        navegacionMes.appendChild(botonNavegacionMesAdelante)
                        const marcoMes = document.createElement("ol")
                        marcoMes.setAttribute("id", "marcoMes")
                        marcoMes.setAttribute("class", "marcoMes")
                        marcoMes.setAttribute("componente", "marcoMes")
                        calendario.appendChild(marcoMes)
                        const pilaDias = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"]
                        for (const nombreDia of pilaDias) {
                            let diaSemana = document.createElement("li")
                            diaSemana.setAttribute("class", "nombreDia")
                            diaSemana.setAttribute("tipoNombreDia", "extendido")
                            diaSemana.textContent = nombreDia
                            marcoMes.appendChild(diaSemana)
                        }
                        const pilaDiasAbreviados = ["L", "M", "X", "J", "V", "S", "D"]
                        for (const nombreDia of pilaDiasAbreviados) {
                            let diaSemana = document.createElement("li")
                            diaSemana.setAttribute("class", "nombreDia")
                            diaSemana.setAttribute("tipoNombreDia", "abreviado")
                            diaSemana.textContent = nombreDia
                            marcoMes.appendChild(diaSemana)
                        }
                        const seccion = document.querySelector("section:not([estado=obsoleto])")
                        const bloqueCalendario = document.createElement("div")
                        bloqueCalendario.setAttribute("class", "bloqueCalendarioNuevo")

                        bloqueCalendario.setAttribute("componente", "bloqueCalendario")
                        bloqueCalendario.style.top = alturaDinamica + "px"
                        const contenedoCalendarioIntermedio = document.createElement("div")
                        contenedoCalendarioIntermedio.setAttribute("instanciaUID", instanciaUID)


                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                        const contenedorCarga = document.createElement("div")
                        contenedorCarga.classList.add("componente_calendario_contenedoCarga_calendarioIncrustado")
                        contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                        contenedorCarga.setAttribute("elemento", "flotante")
                        contenedorCarga.appendChild(spinner)
                        contenedoCalendarioIntermedio.appendChild(calendario)
                        contenedoCalendarioIntermedio.appendChild(contenedorCarga)
                        return contenedoCalendarioIntermedio

                    } catch (errorCapturado) {
                        throw errorCapturado
                    }
                },
                constructorMesNuevo: async (calendario) => {
                    try {

                        const instanciaUID = calendario.instanciaUID
                        const instanciaUID_contenedorFechas = calendario.instanciaUID_contenedorFechas

                        const selectorCalendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        const instanciaUID_procesoCambioMes = calendario.instanciaUID_procesoCambioMes

                        if (!selectorCalendarioRenderizado) {
                            return
                        }
                        const metodoSelectorDia = selectorCalendarioRenderizado.querySelector("[metodoSelectorDia]").getAttribute("metodoSelectorDia")
                        if (instanciaUID_procesoCambioMes) {
                            const selectorMarcoMesRenderizadoEnEspera = selectorCalendarioRenderizado
                                .querySelector(`[inctanciaUID_procesoCambioMes="${instanciaUID_procesoCambioMes}"]`)
                            if (!selectorMarcoMesRenderizadoEnEspera) {
                                return
                            }
                        }
                        const pasarelaX = (e) => {

                            return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                ruta: metodoSelectorDia,
                                args: e
                            })
                        }

                        const nombreMes = [
                            "Enero",
                            "Febrero",
                            "Marzo",
                            "Abrir",
                            "Mayo",
                            "Junio",
                            "Julio",
                            "Agost",
                            "Septiembre",
                            "Octubre",
                            "Noviembre",
                            "Diciembre"
                        ]
                        const nombreMesFinal = nombreMes[calendario.mes - 1]
                        const indicadorMesAno = nombreMesFinal + " " + calendario.ano
                        const navegacionMesReferencia = selectorCalendarioRenderizado.querySelector("[componente=mesReferencia]")
                        navegacionMesReferencia.textContent = indicadorMesAno
                        navegacionMesReferencia.setAttribute("ano", calendario.ano)
                        navegacionMesReferencia.setAttribute("mes", calendario.mes)
                        const infoCalendario = selectorCalendarioRenderizado.querySelector("[componente=infoCalendario]")
                        const posicionDia1 = calendario.posicionDia1
                        const numeroDiasPorMes = calendario.numeroDiasPorMes;
                        const diaActual_decimal = parseInt(calendario.dia, 10)
                        const marcoCalendario = selectorCalendarioRenderizado.querySelector("[componente=marcoCalendario]")
                        const filasFuturoGrid = casaVitini.utilidades.calendarios.calcularNumeroSemanasDelMes({
                            posicionPrimerDiaSemana: posicionDia1,
                            numeroDiasPorMes: numeroDiasPorMes
                        })
                        const tipoCalendario = marcoCalendario?.getAttribute("IO")
                        selectorCalendarioRenderizado.querySelectorAll("[dia]").forEach(diaObsoleto => {
                            diaObsoleto.remove()
                        });
                        const perfilMes = marcoCalendario?.getAttribute("perfilMes")
                        const controlDiasCompletos = {
                            zona: "componentes/diasOcupadosTotalmentePorMes",
                            mes: Number(calendario.mes),
                            ano: Number(calendario.ano)
                        }


                        const detallesDiasOcupacion = {}
                        if (instanciaUID_procesoCambioMes) {
                            const marcoMes = selectorCalendarioRenderizado.querySelector(`[componente=marcoCalendario] [componente=marcoMes][inctanciaUID_procesoCambioMes="${instanciaUID_procesoCambioMes}"]`)
                            if (!marcoMes) {
                                return
                            }
                        }
                        const marcoMes = selectorCalendarioRenderizado.querySelector(`[componente=marcoCalendario] [componente=marcoMes]`)
                        marcoMes.removeAttribute("style")

                        const valorDinamico = []

                        for (let index = 0; index < filasFuturoGrid + 1; index++) {
                            if (index === 0) {
                                valorDinamico.push("auto")
                            } else {
                                valorDinamico.push("1fr")
                            }
                        }
                        marcoMes.style.gridTemplateRows = valorDinamico.join(" ")



                        if (perfilMes === "calendario_entrada_publico_sinPasado") {
                            const mesActual_string = String(calendario.mes).padStart(2, '0')
                            const anoActual_string = String(calendario.ano).padStart(4, '0')
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                            const fechaEntradaSeleccionada = {}
                            if (fechaEntradaVolatil_Humana) {
                                const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("-")
                                fechaEntradaSeleccionada.dia = parseInt(fechaEntradaAarray[2], 10)
                                fechaEntradaSeleccionada.mes = parseInt(fechaEntradaAarray[1], 10)
                                fechaEntradaSeleccionada.ano = parseInt(fechaEntradaAarray[0], 10)
                            }
                            const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                            const fechaSalidaSeleccionada = {}
                            if (fechaSalidaVolatil_Humana) {
                                const fechaSaliraArray = fechaSalidaVolatil_Humana.split("-")
                                fechaSalidaSeleccionada.dia = parseInt(fechaSaliraArray[2], 10)
                                fechaSalidaSeleccionada.mes = parseInt(fechaSaliraArray[1], 10)
                                fechaSalidaSeleccionada.ano = parseInt(fechaSaliraArray[0], 10)
                            }
                            const limitesPublicos = calendario.limites
                            const diasAntelacion = limitesPublicos.diasAntelacion
                            const limiteFuturo = limitesPublicos.limiteFuturo
                            const diasMaximoReserva = limitesPublicos.diasMaximoReserva
                            marcoCalendario?.setAttribute("perfilMes", perfilMes)
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const fechaEntrada = `${fechaEntradaSeleccionada.ano}-${String(fechaEntradaSeleccionada.mes).padStart(2, "0")}-${String(fechaEntradaSeleccionada.dia).padStart(2, "0")}`
                            const fechaSalida = `${fechaSalidaSeleccionada.ano}-${String(fechaSalidaSeleccionada.mes).padStart(2, "0")}-${String(fechaSalidaSeleccionada.dia).padStart(2, "0")}`
                            const fechaLimitePorDiasDeDuracion = (fechaSeleccionada_ISO, diasMaximos) => {
                                const ok = {
                                    arbol: {},
                                    fecha: {}
                                }
                                if (fechaSeleccionada_ISO) {
                                    const fechaLimitePorSeleccion = new Date(fechaSeleccionada_ISO); // Asegúrate de que el formato de la fecha sea 'YYYY-MM-DD'

                                    const numeroDeDiasASumar = Number(diasMaximos);

                                    fechaLimitePorSeleccion.setDate(fechaLimitePorSeleccion.getDate() - numeroDeDiasASumar);
                                    const fechaAdelantada = fechaLimitePorSeleccion
                                    const dia = fechaLimitePorSeleccion.getDate();
                                    const mes = fechaLimitePorSeleccion.getMonth() + 1; // Los meses se indexan desde 0 (enero) a 11 (diciembre)
                                    const ano = fechaLimitePorSeleccion.getFullYear();

                                    ok.fecha.ano = ano
                                    ok.fecha.mes = mes
                                    ok.fecha.dia = dia
                                    ok.arbol[ano] = {
                                        [mes]: {
                                            [dia]: true
                                        }
                                    }
                                }
                                return ok
                            }


                            const objetoFechaLimitePorDias = fechaLimitePorDiasDeDuracion(fechaSalida, diasMaximoReserva)

                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                bloqueDia.addEventListener("click", pasarelaX)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal < diaActual_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (diasAntelacion[anoActual_decimal] &&
                                    diasAntelacion[anoActual_decimal][mesActual_decimal] &&
                                    diasAntelacion[anoActual_decimal][mesActual_decimal][diaFinal_decimal]) {
                                    bloqueDia.classList.add("calendarioDiaNoDisponiblePorAntelacion")
                                    bloqueDia.setAttribute("estadoDia", "noDisponible")
                                }
                                if (anoActual_decimal === limiteFuturo.ano && mesActual_decimal === limiteFuturo.mes) {
                                    if (diaFinal_decimal > limiteFuturo.dia) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (!Object.keys(fechaEntradaSeleccionada).length && !Object.keys(fechaSalidaSeleccionada).length) {
                                    if (calendario.tiempo === "presente") {
                                        if (diaActual_decimal <= diaFinal_decimal) {
                                            if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                            }
                                        }
                                    }
                                    if (calendario.tiempo === "futuro") {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                        }
                                    }
                                }
                                else if (Object.keys(fechaEntradaSeleccionada).length && Object.keys(fechaSalidaSeleccionada).length) {
                                    if (
                                        (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)
                                        &&
                                        (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano)
                                    ) {

                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia && diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        }
                                    } else if ((mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)) {

                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (calendario.tiempo === "futuro") {
                                            if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.setAttribute("estadoDia", "disponible")

                                            }
                                        }
                                    } else if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {

                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        }
                                    } else {

                                        if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        } else {
                                            if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            }
                                        }
                                    }
                                }
                                else if (Object.keys(fechaEntradaSeleccionada).length && !Object.keys(fechaSalidaSeleccionada).length) {
                                    if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                        if (
                                            (
                                                diaFinal_decimal < fechaEntradaSeleccionada.dia
                                                ||
                                                diaFinal_decimal > fechaEntradaSeleccionada.dia
                                            ) &&
                                            bloqueDia.getAttribute("estadoDia") !== "noDisponible"
                                        ) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.removeAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                    } else {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.removeAttribute("estadoDia", "disponible")
                                        }
                                    }
                                }
                                else if (Object.keys(fechaSalidaSeleccionada).length && !Object.keys(fechaEntradaSeleccionada).length) {
                                    if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        }
                                        if (
                                            diaFinal_decimal < fechaSalidaSeleccionada.dia
                                            &&
                                            bloqueDia.getAttribute("estadoDia") !== "noDisponible"
                                        ) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.removeAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        }
                                    } else {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.removeAttribute("estadoDia", "disponible")
                                        }
                                    }
                                }
                                if (Object.keys(fechaSalidaSeleccionada).length) {
                                    if (objetoFechaLimitePorDias.arbol[anoActual_decimal] &&
                                        objetoFechaLimitePorDias.arbol[anoActual_decimal][mesActual_decimal]) {
                                        const diaEntradaLimiteReserva = objetoFechaLimitePorDias.fecha.dia
                                        if (diaFinal_decimal < diaEntradaLimiteReserva) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                    }
                                }
                                if (calendario.tiempo === "presente" && diaActual_decimal === diaFinal_decimal) {
                                    bloqueDia.style.border = "3px solid white";
                                    bloqueDia.setAttribute("tipoDia", "hoy")
                                }
                                bloqueDia.textContent = diaFinal_decimal
                                marcoMes.appendChild(bloqueDia)
                            }
                            if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                let patronConsulta = `[dia='${fechaEntradaSeleccionada.dia}']`
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"

                            if (calendario.tiempo === "presente") {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"

                                if ((mesActual_decimal >= limiteFuturo.mes) && (anoActual_decimal >= limiteFuturo.ano)) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                } else if (anoActual_decimal >= fechaSalidaSeleccionada.ano && mesActual_decimal >= fechaSalidaSeleccionada.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                }
                            } else if (calendario.tiempo === "futuro") {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                if ((mesActual_decimal >= limiteFuturo.mes) && (anoActual_decimal >= limiteFuturo.ano)) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"

                                } else if (anoActual_decimal >= fechaSalidaSeleccionada.ano && mesActual_decimal >= fechaSalidaSeleccionada.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                } else if (Object.keys(fechaSalidaSeleccionada).length) {
                                    if (objetoFechaLimitePorDias.arbol[anoActual_decimal] &&
                                        objetoFechaLimitePorDias.arbol[anoActual_decimal][mesActual_decimal]) {
                                        selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                        selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                                        selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                        selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                    }
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                }
                            }
                        } else if (perfilMes === "calendario_salida_publico_sinPasado") {
                            const mesActual_string = String(calendario.mes).padStart(2, '0')
                            const anoActual_string = String(calendario.ano).padStart(4, '0')
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                            const fechaEntradaSeleccionada = {}
                            if (fechaEntradaVolatil_Humana) {
                                const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("-")
                                fechaEntradaSeleccionada.dia = parseInt(fechaEntradaAarray[2], 10)
                                fechaEntradaSeleccionada.mes = parseInt(fechaEntradaAarray[1], 10)
                                fechaEntradaSeleccionada.ano = parseInt(fechaEntradaAarray[0], 10)
                            }
                            const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                            const fechaSalidaSeleccionada = {}
                            if (fechaSalidaVolatil_Humana) {
                                const fechaSaliraArray = fechaSalidaVolatil_Humana.split("-")
                                fechaSalidaSeleccionada.dia = parseInt(fechaSaliraArray[2], 10)
                                fechaSalidaSeleccionada.mes = parseInt(fechaSaliraArray[1], 10)
                                fechaSalidaSeleccionada.ano = parseInt(fechaSaliraArray[0], 10)
                            }
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const fechaEntrada = `${fechaEntradaSeleccionada.ano}-${String(fechaEntradaSeleccionada.mes).padStart(2, "0")}-${String(fechaEntradaSeleccionada.dia).padStart(2, "0")}`
                            const fechaSalida = `${fechaSalidaSeleccionada.ano}-${String(fechaSalidaSeleccionada.mes).padStart(2, "0")}-${String(fechaSalidaSeleccionada.dia).padStart(2, "0")}`
                            const limitesPublicos = calendario.limites
                            const diasAntelacion = limitesPublicos.diasAntelacion
                            const limiteFuturo = limitesPublicos.limiteFuturo
                            const diasMaximoReserva = limitesPublicos.diasMaximoReserva
                            const fechaActualPublica = calendario.fechaActualPublica
                            const fechaLimitePorDiasDeDuracion = (fechaSeleccionada_ISO, diasMaximos) => {

                                const ok = {
                                    arbol: {},
                                    fecha: {}
                                }

                                if (fechaSeleccionada_ISO) {
                                    const fechaLimitePorSeleccion = new Date(fechaSeleccionada_ISO); // Asegúrate de que el formato de la fecha sea 'YYYY-MM-DD'

                                    const numeroDeDiasASumar = Number(diasMaximos);

                                    fechaLimitePorSeleccion.setDate(fechaLimitePorSeleccion.getDate() + numeroDeDiasASumar);
                                    const fechaAdelantada = fechaLimitePorSeleccion
                                    const dia = fechaLimitePorSeleccion.getDate();
                                    const mes = fechaLimitePorSeleccion.getMonth() + 1; // Los meses se indexan desde 0 (enero) a 11 (diciembre)
                                    const ano = fechaLimitePorSeleccion.getFullYear();

                                    ok.fecha.ano = ano
                                    ok.fecha.mes = mes
                                    ok.fecha.dia = dia
                                    ok.arbol[ano] = {
                                        [mes]: {
                                            [dia]: true
                                        }
                                    }
                                }

                                return ok
                            }


                            const objetoFechaLimitePorDias = fechaLimitePorDiasDeDuracion(fechaEntrada, diasMaximoReserva)
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.classList.add("dia")
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                bloqueDia.addEventListener("click", pasarelaX)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal < diaActual_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (diasAntelacion[anoActual_decimal] &&
                                    diasAntelacion[anoActual_decimal][mesActual_decimal] &&
                                    diasAntelacion[anoActual_decimal][mesActual_decimal][diaFinal_decimal]) {
                                    bloqueDia.classList.add("calendarioDiaNoDisponiblePorAntelacion")
                                    bloqueDia.setAttribute("estadoDia", "noDisponible")
                                }
                                if (objetoFechaLimitePorDias.arbol[anoActual_decimal] &&
                                    objetoFechaLimitePorDias.arbol[anoActual_decimal][mesActual_decimal]) {
                                    const diaSalidaLimiteReserva = objetoFechaLimitePorDias.fecha.dia
                                    if (diaFinal_decimal > diaSalidaLimiteReserva) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (anoActual_decimal === limiteFuturo.ano && mesActual_decimal === limiteFuturo.mes) {
                                    if (diaFinal_decimal > limiteFuturo.dia) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "noDisponible")
                                    }
                                }
                                if (!Object.keys(fechaEntradaSeleccionada).length && !Object.keys(fechaSalidaSeleccionada).length) {
                                    if (calendario.tiempo === "presente") {
                                        if (diaActual_decimal <= diaFinal_decimal) {
                                            if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                            }
                                        }
                                    }
                                    if (calendario.tiempo === "futuro") {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                        }
                                    }
                                } else if (Object.keys(fechaEntradaSeleccionada).length && Object.keys(fechaSalidaSeleccionada).length) {
                                    if (
                                        (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)
                                        &&
                                        (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano)
                                    ) {

                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia && diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("destino", "1")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                    } else if ((mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)) {

                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {

                                            if (bloqueDia.getAttribute("estadoDia") === "noDisponible") {
                                            }
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")

                                        }
                                        if (calendario.tiempo === "futuro") {
                                            if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {

                                            }
                                        }
                                    } else if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {

                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")


                                        }
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                    } else {

                                        if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                        } else {
                                            if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.setAttribute("estadoDia", "noDisponible")

                                            }
                                        }
                                    }
                                }
                                else if (Object.keys(fechaEntradaSeleccionada).length && !Object.keys(fechaSalidaSeleccionada).length) {
                                    if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia &&
                                            bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.setAttribute("estadoDia", "noDisponible")
                                        }
                                    } else {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                    }
                                }
                                else if (Object.keys(fechaSalidaSeleccionada).length && !Object.keys(fechaEntradaSeleccionada).length) {
                                    if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                    } else {
                                        if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.setAttribute("estadoDia", "disponible")

                                        }
                                    }
                                }
                                if (calendario.tiempo === "presente" && diaActual_decimal === diaFinal_decimal) {
                                    bloqueDia.style.border = "3px solid white";
                                    bloqueDia.setAttribute("tipoDia", "hoy")
                                }
                                bloqueDia.textContent = diaFinal_decimal
                                marcoMes.appendChild(bloqueDia)
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            if (Object.keys(fechaEntradaSeleccionada).length) {
                                if (anoActual_decimal > fechaEntradaSeleccionada.ano) {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                } else if (anoActual_decimal === fechaEntradaSeleccionada.ano && mesActual_decimal > fechaEntradaSeleccionada.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                                }
                            } else if (calendario.tiempo === "futuro") {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            } else if (calendario.tiempo === "presente") {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            }



                            if (objetoFechaLimitePorDias.arbol[anoActual_decimal]
                                &&
                                (Object.keys(fechaEntradaSeleccionada).length)
                                &&
                                (objetoFechaLimitePorDias.arbol[anoActual_decimal][mesActual_decimal])
                            ) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            } else if (calendario.tiempo === "presente" || calendario.tiempo === "futuro") {
                                if (anoActual_decimal < limiteFuturo.ano) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                } else if (anoActual_decimal === limiteFuturo.ano && mesActual_decimal < limiteFuturo.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                }
                            }
                        }
                        else if (perfilMes === "calendario_entrada_asistido_detallesReserva_conPasado") {
                            const mesActual_string = String(calendario.mes).padStart(2, '0');
                            const anoActual_string = String(calendario.ano).padStart(4, '0');
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const reservaUID = document.querySelector("[reservaUID]")?.getAttribute("reservaUID")
                            const fechaSalidaReservaArray = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil").split("-")
                            const diaSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[2], 10)
                            const mesSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[1], 10)
                            const anoSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[0], 10)

                            const fechaEntradaReserva = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil").split("-")
                            const diaEntradaReserva_decimal = parseInt(fechaEntradaReserva[2], 10)
                            const mesEntradaReserva_decimal = parseInt(fechaEntradaReserva[1], 10)
                            const anoEntradaReserva_decimal = parseInt(fechaEntradaReserva[0], 10)
                            const fechaEntrada = `${anoEntradaReserva_decimal}-${String(mesEntradaReserva_decimal).padStart(2, "0")}-${String(diaEntradaReserva_decimal).padStart(2, "0")}`
                            const fechaSalida = `${anoSalidaReserva_decimal}-${String(mesSalidaReserva_decimal).padStart(2, "0")}-${String(diaSalidaReserva_decimal).padStart(2, "0")}`
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const controlLimitePasado = {
                                zona: "administracion/reservas/detallesReserva/global/obtenerElasticidadDelRango",
                                reservaUID: String(reservaUID),
                                mesCalendario: mesActual_string,
                                anoCalendario: anoActual_string,
                                sentidoRango: "pasado"
                            }
                            const resolverLimitePasado = await casaVitini.shell.servidor(controlLimitePasado)
                            if (resolverLimitePasado.error) {
                                const selectorCalendarioRenderizados = document.querySelectorAll("[componente=bloqueCalendario]")
                                selectorCalendarioRenderizados.forEach((calendario) => {
                                    calendario.remove()
                                })
                                return casaVitini.ui.componentes.advertenciaInmersiva(resolverLimitePasado.error)
                            }
                            const fechaLimitePasado = {}
                            const infoCalendario = selectorCalendarioRenderizado.querySelector("[componente=infoCalendario]")

                            if (resolverLimitePasado.ok === "rangoPasadoLibre") {
                                infoCalendario.textContent = "Todo el mes disponible para seleccionar la nueva fecha de entrada de esta reserva"
                            } else if (resolverLimitePasado.limitePasado) {
                                const fechaLimitePasado_Array = resolverLimitePasado.limitePasado.split("-")
                                if (resolverLimitePasado.ok === "noHayRangoPasado") {
                                    infoCalendario.textContent = "La fecha de entrada de esta reserva no puede ser inferior a la actual porque no hay rango disponible."
                                    fechaLimitePasado.dia = parseInt(fechaLimitePasado_Array[2], 10)
                                    fechaLimitePasado.mes = parseInt(fechaLimitePasado_Array[1], 10)
                                    fechaLimitePasado.ano = parseInt(fechaLimitePasado_Array[0], 10)
                                }
                                if (resolverLimitePasado.ok === "rangoPasadoLimitado") {
                                    infoCalendario.textContent = "Una parte de este mes está disponible para seleccionar la nueva fecha de entrada para esta reserva."
                                    fechaLimitePasado.dia = parseInt(fechaLimitePasado_Array[2], 10)
                                    fechaLimitePasado.mes = parseInt(fechaLimitePasado_Array[1], 10)
                                    fechaLimitePasado.ano = parseInt(fechaLimitePasado_Array[0], 10)
                                }
                            }
                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (
                                    (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)
                                    &&
                                    (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                ) {

                                    if (diaFinal_decimal === diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                    if (diaFinal_decimal < diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal === diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaSeleccionado")
                                        bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                    if (diaFinal_decimal > diaEntradaReserva_decimal && diaFinal_decimal < diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal > diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                    }
                                } else if ((mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)) {

                                    if (diaFinal_decimal === diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaSeleccionado")
                                        bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                    if (diaFinal_decimal > diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal < diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                } else if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {

                                    if (diaFinal_decimal < diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal > diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                    }
                                    if (diaFinal_decimal === diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                } else {

                                    if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                }
                                if (resolverLimitePasado.limitePasado) {
                                    if (mesActual_decimal === fechaLimitePasado.mes && anoActual_decimal === fechaLimitePasado.ano) {
                                        if (fechaLimitePasado.dia === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                            bloqueDia.removeEventListener("click", pasarelaX)
                                        }
                                        if (fechaLimitePasado.dia > diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                            bloqueDia.removeEventListener("click", pasarelaX)
                                        }
                                    }
                                }
                                marcoMes.appendChild(bloqueDia)
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            }
                            if (mesActual_decimal === fechaLimitePasado.mes && anoActual_decimal === fechaLimitePasado.ano) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            }
                        }
                        else if (perfilMes === "calendario_salida_asistido_detallesReserva_conPasado") {
                            const mesActual_string = String(calendario.mes).padStart(2, '0');
                            const anoActual_string = String(calendario.ano).padStart(4, '0');
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const reservaUID = document.querySelector("[reservaUID]")?.getAttribute("reservaUID")
                            const fechaSalidaReservaArray = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil").split("-")
                            const diaSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[2], 10)
                            const mesSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[1], 10)
                            const anoSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[0], 10)
                            const fechaEntradaReserva = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil").split("-")
                            const diaEntradaReserva_decimal = parseInt(fechaEntradaReserva[2], 10)
                            const mesEntradaReserva_decimal = parseInt(fechaEntradaReserva[1], 10)
                            const anoEntradaReserva_decimal = parseInt(fechaEntradaReserva[0], 10)
                            const fechaEntrada = `${anoEntradaReserva_decimal}-${String(mesEntradaReserva_decimal).padStart(2, "0")}-${String(diaEntradaReserva_decimal).padStart(2, "0")}`
                            const fechaSalida = `${anoSalidaReserva_decimal}-${String(mesSalidaReserva_decimal).padStart(2, "0")}-${String(diaSalidaReserva_decimal).padStart(2, "0")}`
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const controlLimiteFuturo = {
                                zona: "administracion/reservas/detallesReserva/global/obtenerElasticidadDelRango",
                                reservaUID: String(reservaUID),
                                mesCalendario: mesActual_string,
                                anoCalendario: anoActual_string,
                                sentidoRango: "futuro"
                            }
                            const resolverLimiteFuturo = await casaVitini.shell.servidor(controlLimiteFuturo)
                            if (resolverLimiteFuturo.error) {
                                const selectorCalendarioRenderizados = document.querySelectorAll("[componente=bloqueCalendario]")
                                selectorCalendarioRenderizados.forEach((calendario) => {
                                    calendario.remove()
                                })
                                return casaVitini.ui.componentes.advertenciaInmersiva(resolverLimiteFuturo.error)
                            }
                            const fechaLimiteFuturo = {}
                            if (resolverLimiteFuturo.ok === "rangoFuturoLibre") {
                                infoCalendario.textContent = "Todo el mes disponible para seleccionar la nueva fecha de salida de esta reserva"
                            } else if (resolverLimiteFuturo.limiteFuturo) {
                                const fechaLimiteFuturo_Array = resolverLimiteFuturo.limiteFuturo.split("-")
                                if (resolverLimiteFuturo.ok === "noHayRangoFuturo") {
                                    infoCalendario.textContent = "La fecha de salida de esta reserva no puede ser superior a la actual por que no hay rango disponible"
                                    fechaLimiteFuturo.dia = parseInt(fechaLimiteFuturo_Array[2], 10)
                                    fechaLimiteFuturo.mes = parseInt(fechaLimiteFuturo_Array[1], 10)
                                    fechaLimiteFuturo.ano = parseInt(fechaLimiteFuturo_Array[0], 10)
                                }
                                if (resolverLimiteFuturo.ok === "rangoFuturoLimitado") {
                                    infoCalendario.textContent = "Una parte de este mes está disponible para seleccionar la nueva fecha de salida para esta reserva"
                                    fechaLimiteFuturo.dia = parseInt(fechaLimiteFuturo_Array[2], 10)
                                    fechaLimiteFuturo.mes = parseInt(fechaLimiteFuturo_Array[1], 10)
                                    fechaLimiteFuturo.ano = parseInt(fechaLimiteFuturo_Array[0], 10)
                                }
                            }
                            marcoCalendario?.setAttribute("perfilMes", perfilMes)
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (
                                    (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)
                                    &&
                                    (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                ) {

                                    if (diaFinal_decimal === diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")

                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                    if (diaFinal_decimal < diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (diaFinal_decimal === diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                    if (diaFinal_decimal > diaEntradaReserva_decimal && diaFinal_decimal < diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal > diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                } else if ((mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)) {

                                    if (diaFinal_decimal === diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                    if (diaFinal_decimal > diaEntradaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal < diaEntradaReserva_decimal) {

                                        if (bloqueDia.getAttribute("estadoDia") === "noDisponible") {
                                        }
                                        bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (calendario.tiempo === "futuro") {
                                        if (diaFinal_decimal < diaEntradaReserva_decimal) {

                                        }
                                    }
                                } else if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {

                                    if (diaFinal_decimal < diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal > diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaFinal_decimal === diaSalidaReserva_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                        bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "none"
                                    }
                                } else {

                                    if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                }
                                if (resolverLimiteFuturo.limiteFuturo) {
                                    if (mesActual_decimal === fechaLimiteFuturo.mes && anoActual_decimal === fechaLimiteFuturo.ano) {
                                        if (fechaLimiteFuturo.dia === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                            bloqueDia.removeEventListener("click", pasarelaX)
                                        }
                                        if (fechaLimiteFuturo.dia <= diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                            bloqueDia.removeEventListener("click", pasarelaX)
                                        }
                                    }
                                }
                                marcoMes?.appendChild(bloqueDia)
                            }

                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            if (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            }
                            if (mesActual_decimal === fechaLimiteFuturo.mes && anoActual_decimal === fechaLimiteFuturo.ano) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            }
                        }
                        else if (perfilMes === "calendario_entrada_asistido_detallesReserva_checkIn_conPasado") {
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const fechaCheckIN = document
                                .querySelector(`[instanciaUID="${instanciaUID}"]`)
                                .closest("[fechaCheckIn]")
                                ?.getAttribute("fechaCheckIn")
                            const fechaCheckOutAdelantado = document
                                .querySelector(`[instanciaUID="${instanciaUID}"]`)
                                .closest("[fechaCheckOut]")
                                ?.getAttribute("fechaCheckOut")
                            const fechaSalidaReservaArray = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil").split("-")
                            const diaSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[2], 10)
                            const mesSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[1], 10)
                            const anoSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[0], 10)
                            const fechaEntradaReserva = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil").split("-")
                            const diaEntradaReserva_decimal = parseInt(fechaEntradaReserva[2], 10)
                            const mesEntradaReserva_decimal = parseInt(fechaEntradaReserva[1], 10)
                            const anoEntradaReserva_decimal = parseInt(fechaEntradaReserva[0], 10)
                            const fechaEntrada = `${anoEntradaReserva_decimal}-${String(mesEntradaReserva_decimal).padStart(2, "0")}-${String(diaEntradaReserva_decimal).padStart(2, "0")}`
                            const fechaSalida = `${anoSalidaReserva_decimal}-${String(mesSalidaReserva_decimal).padStart(2, "0")}-${String(diaSalidaReserva_decimal).padStart(2, "0")}`
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"


                            if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            }
                            if (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            }
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = Number(numeroDia + 1);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                bloqueDia.style.pointerEvents = "none"
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                const mesEntradaRenderizado = (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)
                                const mesSalidaRenderzado = (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                const mesInternoRango = verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)
                                const mesEntradaSalidaRenderizado = (
                                    (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) &&
                                    (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                )
                                if (mesEntradaSalidaRenderizado) {
                                    if (diaEntradaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (diaEntradaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"

                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaEntradaReserva_decimal < diaFinal_decimal && diaSalidaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaSalidaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"

                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                    }
                                    if (diaSalidaReserva_decimal < diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                }
                                else if (mesEntradaRenderizado) {
                                    if (diaEntradaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (diaEntradaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")


                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)

                                    }
                                    if (diaEntradaReserva_decimal < diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                }
                                else if (mesSalidaRenderzado) {
                                    if (diaSalidaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaSalidaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                    }
                                    if (diaSalidaReserva_decimal < diaFinal_decimal) {

                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")


                                    }
                                }
                                else if (mesInternoRango) {
                                    bloqueDia.classList.add("calendarioDiaReserva")
                                    bloqueDia.style.pointerEvents = "all"
                                    bloqueDia.addEventListener("click", pasarelaX)
                                }
                                if (fechaCheckIN) {
                                    const fechaCheckIN_array = fechaCheckIN.split("-")
                                    const diaCheckIn = Number(fechaCheckIN_array[2])
                                    const mesCheckIn = Number(fechaCheckIN_array[1])
                                    const anoCheckIn = Number(fechaCheckIN_array[0])
                                    if (mesActual_decimal === mesCheckIn && anoActual_decimal === anoCheckIn) {
                                        if (diaCheckIn === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                    }
                                }
                                if (fechaCheckOutAdelantado) {
                                    const fechaCheckOutAdelantado_array = fechaCheckOutAdelantado.split("-")
                                    const diaCheckOut = Number(fechaCheckOutAdelantado_array[2])
                                    const mesCheckOut = Number(fechaCheckOutAdelantado_array[1])
                                    const anoCheckOut = Number(fechaCheckOutAdelantado_array[0])
                                    if (mesActual_decimal === mesCheckOut && anoActual_decimal === anoCheckOut) {
                                        if (diaCheckOut === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.textContent = "COa " + diaFinal_decimal
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                        if (diaCheckOut < diaFinal_decimal && diaSalidaReserva_decimal > diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        } else if (diaCheckOut < diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                        selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                        selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                    }
                                }
                                marcoMes.appendChild(bloqueDia)
                            }
                        }
                        else if (perfilMes === "calendario_salida_asistido_detallesReserva_checkOut_conPasado") {
                            const mesActual_string = String(calendario.mes).padStart(2, '0');
                            const anoActual_string = String(calendario.ano).padStart(4, '0');
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const fechaCheckOut = document
                                .querySelector(`[instanciaUID="${instanciaUID}"]`)
                                .closest("[fechaCheckOut]")
                                ?.getAttribute("fechaCheckOut")
                            const fechaCheckIN = document
                                .querySelector(`[instanciaUID="${instanciaUID}"]`)
                                .closest("[fechaCheckIn]")
                                ?.getAttribute("fechaCheckIn")
                            const fechaSalidaReservaArray = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil").split("-")
                            const diaSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[2], 10)
                            const mesSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[1], 10)
                            const anoSalidaReserva_decimal = parseInt(fechaSalidaReservaArray[0], 10)
                            const fechaEntradaReserva = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil").split("-")
                            const diaEntradaReserva_decimal = parseInt(fechaEntradaReserva[2], 10)
                            const mesEntradaReserva_decimal = parseInt(fechaEntradaReserva[1], 10)
                            const anoEntradaReserva_decimal = parseInt(fechaEntradaReserva[0], 10)
                            const fechaEntrada = `${anoEntradaReserva_decimal}-${String(mesEntradaReserva_decimal).padStart(2, "0")}-${String(diaEntradaReserva_decimal).padStart(2, "0")}`
                            const fechaSalida = `${anoSalidaReserva_decimal}-${String(mesSalidaReserva_decimal).padStart(2, "0")}-${String(diaSalidaReserva_decimal).padStart(2, "0")}`
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"


                            if (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                            }
                            if (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                            }
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = Number(numeroDia + 1);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)

                                bloqueDia.style.pointerEvents = "none"
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                const mesEntradaRenderizado = (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal)
                                const mesSalidaRenderzado = (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                const mesInternoRango = verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)
                                const mesEntradaSalidaRenderizado = (
                                    (mesActual_decimal === mesEntradaReserva_decimal && anoActual_decimal === anoEntradaReserva_decimal) &&
                                    (mesActual_decimal === mesSalidaReserva_decimal && anoActual_decimal === anoSalidaReserva_decimal)
                                )
                                if (mesEntradaSalidaRenderizado) {

                                    if (diaEntradaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (diaEntradaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")


                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                    }
                                    if (diaEntradaReserva_decimal < diaFinal_decimal && diaSalidaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaSalidaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"

                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                    }
                                    if (diaSalidaReserva_decimal < diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                }
                                else if (mesEntradaRenderizado) {


                                    if (diaEntradaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                    }
                                    if (diaEntradaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")


                                        bloqueDia.textContent = "E " + diaFinal_decimal
                                        bloqueDia.style.pointerEvents = "all"
                                    }
                                    if (diaEntradaReserva_decimal < diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                }
                                else if (mesSalidaRenderzado) {


                                    if (diaSalidaReserva_decimal > diaFinal_decimal) {
                                        bloqueDia.classList.add("calendarioDiaReserva")
                                        bloqueDia.style.pointerEvents = "all"
                                        bloqueDia.addEventListener("click", pasarelaX)
                                    }
                                    if (diaSalidaReserva_decimal === diaFinal_decimal) {
                                        bloqueDia.style.pointerEvents = "none"
                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        bloqueDia.textContent = "S " + diaFinal_decimal
                                        bloqueDia.classList.add("calendarioDiaReservaLimite")
                                    }
                                    if (diaSalidaReserva_decimal < diaFinal_decimal) {

                                        bloqueDia.setAttribute("estadoDia", "deshabilitado")


                                    }
                                }
                                else if (mesInternoRango) {


                                    bloqueDia.classList.add("calendarioDiaReserva")
                                    bloqueDia.style.pointerEvents = "all"
                                    bloqueDia.addEventListener("click", pasarelaX)
                                }
                                if (fechaCheckIN) {
                                    const fechaCheckIN_Array = fechaCheckIN.split("-")
                                    const diaCheckIn = Number(fechaCheckIN_Array[2])
                                    const mesCheckIn = Number(fechaCheckIN_Array[1])
                                    const anoCheckIn = Number(fechaCheckIN_Array[0])
                                    if (mesActual_decimal === mesCheckIn && anoActual_decimal === anoCheckIn) {
                                        if (diaCheckIn === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            bloqueDia.textContent = "CI " + diaFinal_decimal
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                        if (diaCheckIn > diaFinal_decimal && diaEntradaReserva_decimal < diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        } else if (diaCheckIn > diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaReserva")
                                            bloqueDia.classList.remove("calendarioDiaDisponible")

                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                        selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                        selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                                    }
                                }
                                if (fechaCheckOut) {
                                    const fechaCheckOut_array = fechaCheckOut.split("-")
                                    const diaCheckOut = Number(fechaCheckOut_array[2])
                                    const mesCheckOut = Number(fechaCheckOut_array[1])
                                    const anoCheckOut = Number(fechaCheckOut_array[0])
                                    if (mesActual_decimal === mesCheckOut && anoActual_decimal === anoCheckOut) {
                                        if (diaCheckOut === diaFinal_decimal) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.style.pointerEvents = "none"
                                            bloqueDia.setAttribute("estadoDia", "deshabilitado")
                                        }
                                    }
                                }

                                marcoMes.appendChild(bloqueDia)
                            }
                        }
                        else if (perfilMes === "calendario_entrada_perfilSimple") {
                            const contenedorFechas = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)
                            if (!contenedorFechas) {
                                const error = "El perfil de calendario_entrada_perfilSimple no encuentra el contenedor de fechas de destino"
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(error)

                            }
                            const seleccionableDiaLimite = marcoCalendario?.getAttribute("seleccionableDiaLimite")


                            const mesActual_string = String(calendario.mes).padStart(2, '0')
                            const anoActual_string = String(calendario.ano).padStart(4, '0')
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const fechaEntradaSelecionda = contenedorFechas.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                            const fechaEntradaSeleccionada = {}
                            if (fechaEntradaSelecionda) {
                                fechaEntradaSeleccionada.dia = parseInt(fechaEntradaSelecionda.split("-")[2], 10)
                                fechaEntradaSeleccionada.mes = parseInt(fechaEntradaSelecionda.split("-")[1], 10)
                                fechaEntradaSeleccionada.ano = parseInt(fechaEntradaSelecionda.split("-")[0], 10)
                            }
                            const fechaSalidaSelecionda = contenedorFechas.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")
                            const fechaSalidaSeleccionada = {}
                            if (fechaSalidaSelecionda) {
                                fechaSalidaSeleccionada.dia = parseInt(fechaSalidaSelecionda.split("-")[2], 10)
                                fechaSalidaSeleccionada.mes = parseInt(fechaSalidaSelecionda.split("-")[1], 10)
                                fechaSalidaSeleccionada.ano = parseInt(fechaSalidaSelecionda.split("-")[0], 10)
                            }
                            marcoCalendario?.setAttribute("perfilMes", perfilMes)
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const fechaEntrada = `${fechaEntradaSeleccionada.ano}-${String(fechaEntradaSeleccionada.mes).padStart(2, "0")}-${String(fechaEntradaSeleccionada.dia).padStart(2, "0")}`
                            const fechaSalida = `${fechaSalidaSeleccionada.ano}-${String(fechaSalidaSeleccionada.mes).padStart(2, "0")}-${String(fechaSalidaSeleccionada.dia).padStart(2, "0")}`
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (Object.keys(fechaEntradaSeleccionada).length && Object.keys(fechaSalidaSeleccionada).length) {
                                    if (
                                        (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)
                                        &&
                                        (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano)
                                    ) {

                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaReserva")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            }
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia && diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        }
                                    } else if ((mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)) {

                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {

                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        }
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaReserva")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            }
                                        }
                                    } else {

                                        if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        } else {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    }
                                }
                                else if (Object.keys(fechaEntradaSeleccionada).length && !Object.keys(fechaSalidaSeleccionada).length) {
                                    if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                        } else {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                }
                                else if (Object.keys(fechaSalidaSeleccionada).length && !Object.keys(fechaEntradaSeleccionada).length) {
                                    if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            }
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        }
                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                } else if (!Object.keys(fechaSalidaSeleccionada).length && !Object.keys(fechaEntradaSeleccionada).length) {
                                    if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                }
                                marcoMes?.appendChild(bloqueDia)
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            if (Object.keys(fechaSalidaSeleccionada).length) {
                                if (anoActual_decimal < fechaSalidaSeleccionada.ano) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                } else if (anoActual_decimal === fechaSalidaSeleccionada.ano && mesActual_decimal < fechaSalidaSeleccionada.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "none"
                                }
                            } else {
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            }
                        }
                        else if (perfilMes === "calendario_salida_perfilSimple") {

                            const contenedorFechas = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)
                            if (!contenedorFechas) {
                                const error = "El perfil de calendario_salida_perfilSimple no encuentra el contenedor de fechas de destino"
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(error)

                            }

                            const seleccionableDiaLimite = marcoCalendario?.getAttribute("seleccionableDiaLimite")

                            const mesActual_string = String(calendario.mes).padStart(2, '0')
                            const anoActual_string = String(calendario.ano).padStart(4, '0')
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const fechaEntradaSelecionda = contenedorFechas.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                            const fechaEntradaSeleccionada = {}
                            if (fechaEntradaSelecionda) {
                                fechaEntradaSeleccionada.dia = parseInt(fechaEntradaSelecionda.split("-")[2], 10)
                                fechaEntradaSeleccionada.mes = parseInt(fechaEntradaSelecionda.split("-")[1], 10)
                                fechaEntradaSeleccionada.ano = parseInt(fechaEntradaSelecionda.split("-")[0], 10)
                            }
                            const fechaSalidaSelecionda = contenedorFechas.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")
                            const fechaSalidaSeleccionada = {}
                            if (fechaSalidaSelecionda) {
                                fechaSalidaSeleccionada.dia = parseInt(fechaSalidaSelecionda.split("-")[2], 10)
                                fechaSalidaSeleccionada.mes = parseInt(fechaSalidaSelecionda.split("-")[1], 10)
                                fechaSalidaSeleccionada.ano = parseInt(fechaSalidaSelecionda.split("-")[0], 10)
                            }
                            marcoCalendario.setAttribute("perfilMes", perfilMes)
                            const verificaRangoInternamente = (
                                mesActual,
                                anoActual,
                                fechaInicio,
                                fechaSalida
                            ) => {
                                const inicio = new Date(fechaInicio);
                                const fin = new Date(fechaSalida);
                                const inicioMesAno = new Date(inicio.getFullYear(), inicio.getMonth());
                                const finMesAno = new Date(fin.getFullYear(), fin.getMonth());
                                const fechaMesAno = new Date(anoActual, mesActual - 1);
                                return fechaMesAno >= inicioMesAno && fechaMesAno <= finMesAno;
                            };
                            const fechaEntrada = `${fechaEntradaSeleccionada.ano}-${String(fechaEntradaSeleccionada.mes).padStart(2, "0")}-${String(fechaEntradaSeleccionada.dia).padStart(2, "0")}`
                            const fechaSalida = `${fechaSalidaSeleccionada.ano}-${String(fechaSalidaSeleccionada.mes).padStart(2, "0")}-${String(fechaSalidaSeleccionada.dia).padStart(2, "0")}`
                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {

                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }
                                if (Object.keys(fechaEntradaSeleccionada).length && Object.keys(fechaSalidaSeleccionada).length) {
                                    if (
                                        (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)
                                        &&
                                        (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano)
                                    ) {

                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        }
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaReserva")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            }
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia && diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else if ((mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano)) {

                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            }
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {

                                            if (bloqueDia.getAttribute("estadoDia") === "noDisponible") {
                                            }
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        }
                                        if (calendario.tiempo === "futuro") {
                                            if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {

                                            }
                                        }
                                    } else if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {

                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                    } else {

                                        if (verificaRangoInternamente(mesActual_decimal, anoActual_decimal, fechaEntrada, fechaSalida)) {
                                            bloqueDia.classList.add("calendarioDiaReserva")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        } else {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    }
                                }
                                else if (Object.keys(fechaEntradaSeleccionada).length && !Object.keys(fechaSalidaSeleccionada).length) {
                                    if (mesActual_decimal === fechaEntradaSeleccionada.mes && anoActual_decimal === fechaEntradaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaEntradaSeleccionada.dia) {
                                            if (seleccionableDiaLimite === "si") {
                                                bloqueDia.classList.add("calendarioDiaDisponible")
                                                bloqueDia.addEventListener("click", pasarelaX)
                                                bloqueDia.setAttribute("estadoDia", "disponible")
                                            } else {
                                                bloqueDia.classList.add("calendarioDiaReservaLimite")
                                            }
                                        }
                                        if (diaFinal_decimal > fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal < fechaEntradaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaNoDisponible")
                                        }
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                }
                                else if (Object.keys(fechaSalidaSeleccionada).length && !Object.keys(fechaEntradaSeleccionada).length) {
                                    if (mesActual_decimal === fechaSalidaSeleccionada.mes && anoActual_decimal === fechaSalidaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                        if (diaFinal_decimal > fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                        if (diaFinal_decimal < fechaSalidaSeleccionada.dia) {
                                            bloqueDia.classList.add("calendarioDiaDisponible")
                                            bloqueDia.addEventListener("click", pasarelaX)
                                            bloqueDia.setAttribute("estadoDia", "disponible")
                                        }
                                    } else {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                } else if (!Object.keys(fechaSalidaSeleccionada).length && !Object.keys(fechaEntradaSeleccionada).length) {
                                    if (bloqueDia.getAttribute("estadoDia") !== "noDisponible") {
                                        bloqueDia.classList.add("calendarioDiaDisponible")
                                        bloqueDia.addEventListener("click", pasarelaX)
                                        bloqueDia.setAttribute("estadoDia", "disponible")
                                    }
                                }
                                marcoMes.appendChild(bloqueDia)
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                            if (Object.keys(fechaEntradaSeleccionada).length) {
                                if (anoActual_decimal > fechaEntradaSeleccionada.ano) {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                } else if (anoActual_decimal === fechaEntradaSeleccionada.ano && mesActual_decimal > fechaEntradaSeleccionada.mes) {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                                } else {
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 0
                                    selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "none"
                                }
                            } else {
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            }
                        }
                        else if (perfilMes === "calendario_unico_perfilSimple") {
                            const contenedorFechas = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)
                            if (!contenedorFechas) {
                                const error = "El perfil de calendario_unico_perfilSimple no encuentra el contenedor de fechas de destino"
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(error)
                            }
                            const mesActual_decimal = parseInt(calendario.mes, 10)
                            const anoActual_decimal = parseInt(calendario.ano, 10)
                            const selectorFechaUnica = contenedorFechas.querySelector("[calendario=unico]")?.getAttribute("memoriaVolatil")
                            const fechaUnicaSeleccionada = {}
                            if (selectorFechaUnica) {
                                fechaUnicaSeleccionada.dia = parseInt(selectorFechaUnica.split("-")[2], 10)
                                fechaUnicaSeleccionada.mes = parseInt(selectorFechaUnica.split("-")[1], 10)
                                fechaUnicaSeleccionada.ano = parseInt(selectorFechaUnica.split("-")[0], 10)
                            }

                            marcoCalendario?.setAttribute("perfilMes", perfilMes)

                            for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                                const diaFinal_decimal = parseInt(numeroDia + 1, 10);
                                const bloqueDia = document.createElement("li")
                                bloqueDia.setAttribute("class", "dia")
                                bloqueDia.textContent = diaFinal_decimal
                                bloqueDia.classList.add("calendarioDiaDisponible")
                                bloqueDia.addEventListener("click", pasarelaX)


                                if (diaFinal_decimal === 1) {
                                    bloqueDia.style.gridColumnStart = posicionDia1
                                }
                                bloqueDia.setAttribute("dia", diaFinal_decimal)
                                if (calendario.tiempo === "presente") {
                                    if (diaFinal_decimal === diaActual_decimal) {
                                        bloqueDia.style.border = "3px solid ghostwhite"
                                    }
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaParcial") {
                                    bloqueDia.classList.add("calendarioDiaParcial")
                                }
                                if (detallesDiasOcupacion[diaFinal_decimal]?.estadoDia === "diaCompleto") {
                                    bloqueDia.classList.add("calendarioDiaCompleto")
                                }

                                if (Object.keys(fechaUnicaSeleccionada).length) {
                                    if (mesActual_decimal === fechaUnicaSeleccionada.mes && anoActual_decimal === fechaUnicaSeleccionada.ano) {
                                        if (diaFinal_decimal === fechaUnicaSeleccionada.dia) {
                                            bloqueDia.classList.remove("calendarioDiaDisponible")
                                            bloqueDia.classList.add("calendarioDiaSeleccionado")
                                            bloqueDia.setAttribute("estadoDia", "seleccionado")
                                        }
                                    }
                                }
                                marcoMes?.appendChild(bloqueDia)
                            }
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                            selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"

                        }
                        if (instanciaUID_procesoCambioMes) {
                            const selectorMarcoMesRenderizadoEnEspera = selectorCalendarioRenderizado
                                .querySelector(`[inctanciaUID_procesoCambioMes="${instanciaUID_procesoCambioMes}"]`)
                            if (!selectorMarcoMesRenderizadoEnEspera) {
                                return
                            }
                        }


                        if (selectorCalendarioRenderizado) {
                            selectorCalendarioRenderizado.querySelector("[contenedor=construyendoCalendario]")?.remove()
                            selectorCalendarioRenderizado.querySelector("[contenedor=calendario]").removeAttribute("style")
                        }
                    } catch (errorCapturado) {
                        throw errorCapturado
                    }
                },
                resolverCalendarioNuevo: async (data) => {

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "componentes/calendario",
                        ...data
                    })
                    if (respuestaServidor?.error) {
                        const selectorContenedorCalendario = document.querySelectorAll("[componente=bloqueCalendario]")
                        selectorContenedorCalendario.forEach((bloqueCalendario) => {
                            bloqueCalendario.remove()
                        })
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.calendario) {
                        return respuestaServidor;
                    }
                },
                navegacionCalendarioNuevo: async (calendario) => {
                    const boton = calendario.target.getAttribute("sentido")
                    const selectorBotones = calendario.target.closest("[contenedor=calendario]").querySelectorAll("[sentido]")
                    selectorBotones.forEach((botonRenderizado) => {
                        botonRenderizado.style.pointerEvents = "none"
                        botonRenderizado.style.opacity = "0"

                    })
                    const instanciaUID = calendario.target.closest("[instanciaUID]").getAttribute("instanciaUID")
                    const instanciaUID_contenedorFechas = calendario.target.closest("[instanciaUID]").getAttribute("instanciaUID_contenedorFechas")
                    const mesReferencia = document.querySelector("[componente=mesReferencia]")
                    let mesActual = Number(mesReferencia.getAttribute("mes"))
                    let anoActual = Number(mesReferencia.getAttribute("ano"))
                    mesReferencia.innerHTML = null
                    const instanciaUID_procesoCambioMes = casaVitini.utilidades.codigoFechaInstancia()
                    if (boton === "adelante") {
                        if (mesActual + 1 < 13) {
                            mesActual = mesActual + 1
                        } else {
                            mesActual = 1
                            anoActual = anoActual + 1
                        }
                    }
                    if (boton === "atras") {
                        if (mesActual - 1 > 0) {
                            mesActual = mesActual - 1
                        } else {
                            mesActual = 12
                            anoActual = anoActual - 1
                        }
                    }
                    const calendarioconstruir = {
                        tipo: "personalizado",

                        ano: anoActual,
                        mes: mesActual
                    }

                    const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                    const contenedorCalendario = calendarioRenderizado.querySelector(`[contenedor=calendario]`)
                    const selectorMarcoMesRenderizado = calendarioRenderizado.querySelector(`[componente=marcoMes]`)
                    selectorMarcoMesRenderizado.removeAttribute("style")
                    selectorMarcoMesRenderizado.style.gridTemplateRows = "min-content min-content"
                    selectorMarcoMesRenderizado.style.flex = "0"
                    const selectorDiasRenderizados = calendarioRenderizado.querySelectorAll("[dia]")
                    selectorDiasRenderizados.forEach((diaRenderizado) => {
                        diaRenderizado.remove()
                    })
                    const contenedorconstruyendoCalendarioRenderizado = calendarioRenderizado.querySelectorAll("[contenedor=construyendoCalendario]")
                    contenedorconstruyendoCalendarioRenderizado.forEach((contenedorRenderizado) => {
                        contenedorRenderizado.remove()
                    })
                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                    const contenedorCarga = document.createElement("div")
                    contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
                    contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                    contenedorCarga.setAttribute("elemento", "flotante")
                    contenedorCarga.appendChild(spinner)
                    contenedorCalendario.appendChild(contenedorCarga)

                    const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendarioconstruir)
                    calendarioResuelto.instanciaUID = instanciaUID
                    calendarioResuelto.instanciaUID_contenedorFechas = instanciaUID_contenedorFechas
                    calendarioResuelto.instanciaUID_procesoCambioMes = instanciaUID_procesoCambioMes

                    selectorMarcoMesRenderizado.setAttribute("inctanciaUID_procesoCambioMes", instanciaUID_procesoCambioMes)

                    casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                },
                seleccionarDiaProcesadoNuevo: (metadatosDia) => {
                    let dia;
                    let estadoDia;
                    let diaSeleccionadoComoElemento;
                    if (metadatosDia.tipo === "desdeClick") {
                        dia = metadatosDia.diaSeleccionado
                        estadoDia = metadatosDia.estadoDia
                        diaSeleccionadoComoElemento = document.querySelector("li[dia='" + dia + "']")
                    }
                    if (typeof metadatosDia === "number") {
                        dia = metadatosDia;
                        diaSeleccionadoComoElemento = document.querySelector("li[dia='" + dia + "']")
                    }
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    let botonAtras = document.querySelector("#botonAtras")
                    let botonAdelante = document.getElementById("botonAdelante")
                    let fechaEntrada = document.getElementById("fechaEntrada")
                    let fechaSalida = document.getElementById("fechaSalida")
                    let almacenamientoLocalID = calendario.getAttribute("almacenamientoCalendarioID")
                    let perfilMes = calendario.getAttribute("perfilMes")

                    let tiempo = document.querySelector("[componente=mesReferencia]").getAttribute("tiempo")
                    let reserva = localStorage.getItem(almacenamientoLocalID) ? JSON.parse(localStorage.getItem(almacenamientoLocalID)) : {};
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        if (diaSeleccionadoComoElemento.getAttribute("tipoDia") === "hoy") {
                            diaSeleccionadoComoElemento.style.background = "red"
                            diaSeleccionadoComoElemento.style.color = ""
                        } else {
                            diaSeleccionadoComoElemento.style.background = ""
                            diaSeleccionadoComoElemento.style.color = ""
                        }
                        if (calendarioIO === "entrada") {
                            fechaEntrada.textContent = 'Seleccionar dia de entrada'
                            delete reserva.entrada
                            document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                        }
                        if (calendarioIO === "salida") {
                            fechaSalida.textContent = 'Seleccionar dia de salida2'
                            delete reserva.salida
                            document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                        }
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")
                        document.getElementById("botonSiguientePaso")?.remove()
                        localStorage.setItem(almacenamientoLocalID, JSON.stringify(reserva))
                        return
                    }
                    let diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    for (const diaDisponible of diasDisponibles) {
                        if (diaDisponible.getAttribute("estado") !== "deshabilitado") {
                            diaDisponible.style.background = ""
                            diaDisponible.style.color = ""
                            diaDisponible.removeAttribute("estadoDia")
                            diaDisponible.style.pointerEvents = "all"
                        }
                        if (diaDisponible.getAttribute("tipoDia") === "hoy") {


                            diaDisponible.removeAttribute("estadoDia")
                            diaDisponible.style.pointerEvents = "all"
                        }
                    }
                    diaSeleccionadoComoElemento.style.background = "black"
                    diaSeleccionadoComoElemento.style.color = "white"
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                    let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                    let diaSeleccionado = dia
                    let botonSiguientePaso = document.createElement("p")
                    botonSiguientePaso.setAttribute("id", "botonSiguientePaso")
                    botonSiguientePaso.setAttribute("class", "reservaInformacion")
                    botonSiguientePaso.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    let constructorInformacion;
                    let diaIO;
                    let reserva_
                    if (calendarioIO === "entrada") {
                        const fechaEntrada_Humano = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                        fechaEntrada.textContent = fechaEntrada_Humano
                        constructorInformacion = "Entrada el " + diaSeleccionado + " del " + mesSeleccionado + " del " + anoSeleccionado
                        botonSiguientePaso.setAttribute("vista", "/reservas/salida")
                        botonSiguientePaso.textContent = "Ir a seleccionar el día de salida44"
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaEntrada_Humano)
                    }
                    if (calendarioIO === "salida") {
                        const fechaSalida_humano = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                        fechaSalida.textContent = fechaSalida_humano
                        constructorInformacion = "Salida el " + diaSeleccionado + " del " + mesSeleccionado + " del " + anoSeleccionado
                        botonSiguientePaso.setAttribute("vista", "/reservas/alojamiento")
                        botonSiguientePaso.textContent = "Ir a seleccionar el alojamiento"
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSalida_humano)
                    }
                },
                seleccionarDiaNuevo: (dia) => {
                    let diaSeleccionado
                    if (typeof dia === "number") {
                        metadatosDia = dia
                        casaVitini.componentes.seleccionarDiaProcesadoNuevo(metadatosDia)
                    }
                    if (dia?.target?.getAttribute("dia")) {
                        diaSeleccionado = dia.target.getAttribute("dia")
                        let estadoDia = dia.target.getAttribute("estadoDia")
                        let metadatosDia = {
                            "diaSeleccionado": diaSeleccionado,
                            "estadoDia": estadoDia,
                            "tipo": "desdeClick"
                        }
                        casaVitini.componentes.seleccionarDiaProcesadoNuevo(metadatosDia)
                    }
                },
                calendarioCompartido: {
                    seleccionarDia: (dia) => {

                        const diaSeleccionadoComoElemento = dia.target;
                        const contenedorCalendario = diaSeleccionadoComoElemento.closest("[componente=bloqueCalendario]")
                        const instanciaUID_contenedorFechas = contenedorCalendario.getAttribute("instanciaUID_contenedorFechas")
                        const calendario = contenedorCalendario.querySelector("[componente=marcoCalendario]")

                        const contendorDestino = document.querySelector(`[instanciaUID_contenedorFechas="${instanciaUID_contenedorFechas}"]`)

                        const calendarioIO = calendario.getAttribute("calendarioIO")
                        const marcoMes = dia.target.closest("[componente=marcoMes]")
                        const diaSeleccionado = dia.target.getAttribute("dia").padStart(2, "0")
                        const anoSeleccionado = contenedorCalendario.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(2, "0")
                        const mesSeleccionado = contenedorCalendario.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                        const fechaSeleccionada_humana = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                        const fechaSeleccionada_ISO = `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`

                        const diasDelCalendario = marcoMes.querySelectorAll("[dia]")
                        const selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                        selectorDias.forEach((dia) => {

                            dia.classList.remove("calendarioDiaReserva")
                            dia.classList.remove("calendarioDiaSeleccionado")
                        })
                        if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                            diaSeleccionadoComoElemento.setAttribute("estadoDia", "disponible")
                            if (calendarioIO === "entrada") {
                                contendorDestino.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                                contendorDestino.querySelector("[fechaUI=fechaInicio]").textContent = "(Seleccionar)"
                            }
                            if (calendarioIO === "salida") {
                                contendorDestino.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                                contendorDestino.querySelector("[fechaUI=fechaFin]").textContent = "(Seleccionar)"
                            }
                            diasDelCalendario.forEach(dia => {
                                if (dia.getAttribute("estadoDia") === "disponible" ||
                                    dia.getAttribute("estadoDia") === "seleccionado") {
                                    dia.classList.remove("calendarioDiaSeleccionado")
                                    dia.classList.remove("calendarioDiaReserva")
                                    dia.classList.add("calendarioDiaDisponible")
                                    dia.setAttribute("estadoDia", "disponible")
                                }
                            });
                            return
                        }
                        diasDelCalendario.forEach(dia => {
                            if (dia.getAttribute("estadoDia") === "seleccionado") {
                                dia.setAttribute("estadoDia", "disponible")
                            }
                            if (dia.getAttribute("estadoDia") === "disponible") {
                                dia.classList.remove("calendarioDiaSeleccionado")
                                dia.classList.remove("calendarioDiaReserva")
                                dia.classList.add("calendarioDiaDisponible")
                            }
                        });
                        diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                        diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                        const fechasSeleccionadas = () => {
                            const fechaEntradaVolatil = contendorDestino.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                            const fechaEntradaAarray = fechaEntradaVolatil?.split("-") ? fechaEntradaVolatil?.split("-") : []
                            const diaSeleccionadoEntrada = Number(fechaEntradaAarray[2])
                            const mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                            const anoSeleccionadoEntrada = Number(fechaEntradaAarray[0])

                            const fechaSalidaVolatil = contendorDestino.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")

                            const fechaSaliraArray = fechaSalidaVolatil?.split("-") ? fechaSalidaVolatil?.split("-") : []
                            const diaSeleccionadoSalida = Number(fechaSaliraArray[2])
                            const mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                            const anoSeleccionadoSalida = Number(fechaSaliraArray[0])

                            const fechaUnicoVolatil = contendorDestino.querySelector("[calendario=unico]")?.getAttribute("memoriaVolatil")
                            const fechaUnicoAarray = fechaUnicoVolatil?.split("-") ? fechaUnicoVolatil?.split("-") : []
                            const diaSeleccionadoUnico = Number(fechaUnicoAarray[2])
                            const mesSeleccionadoUnico = Number(fechaUnicoAarray[1])
                            const anoSeleccionadoUnico = Number(fechaUnicoAarray[0])

                            const contenedorFechas = {
                                fechaEntrada: {
                                    volatil: fechaEntradaVolatil,
                                    dia: diaSeleccionadoEntrada,
                                    mes: mesSeleccionadoEntrada,
                                    ano: anoSeleccionadoEntrada
                                },
                                fechaSalida: {
                                    volatil: fechaSalidaVolatil,
                                    dia: diaSeleccionadoSalida,
                                    mes: mesSeleccionadoSalida,
                                    ano: anoSeleccionadoSalida
                                },
                                fechaUnico: {
                                    volatil: fechaUnicoVolatil,
                                    dia: diaSeleccionadoUnico,
                                    mes: mesSeleccionadoUnico,
                                    ano: anoSeleccionadoUnico
                                }

                            }
                            return contenedorFechas
                        }

                        if (calendarioIO === "entrada") {
                            contendorDestino.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionada_ISO)
                            contendorDestino.querySelector("[fechaUI=fechaInicio]").textContent = fechaSeleccionada_humana
                            if (fechasSeleccionadas().fechaSalida?.volatil) {
                                diasDelCalendario.forEach((dia) => {
                                    if (dia.getAttribute("estadoDia") === "disponible") {
                                        if (fechasSeleccionadas().fechaSalida.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaSalida.ano) {
                                            if ((Number(dia.getAttribute("dia")) > diaSeleccionado &&
                                                Number(dia.getAttribute("dia")) <= fechasSeleccionadas().fechaSalida.dia)) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        } else {
                                            if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        }
                                    }
                                })
                            } else if (fechasSeleccionadas().fechaSalida?.volatil) {
                                if (fechasSeleccionadas().fechaSalida.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaSalida.ano) {
                                    selectorDias.forEach((dia) => {
                                        if ((Number(dia.getAttribute("dia")) > diaSeleccionado)
                                            &&
                                            (Number(dia.getAttribute("dia")) < fechasSeleccionadas().fechaSalida.dia)) {

                                            dia.classList.add("calendarioDiaReserva")
                                            dia.classList.remove("calendarioDiaDisponible")
                                        }
                                    })
                                } else {
                                    selectorDias.forEach((dia) => {
                                        if (Number(dia.getAttribute("dia")) >= diaSeleccionado) {
                                            dia.classList.add("calendarioDiaReserva")
                                            dia.classList.remove("calendarioDiaDisponible")
                                        }
                                    })
                                }
                            }
                        } else if (calendarioIO === "salida") {

                            contendorDestino.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionada_ISO)
                            contendorDestino.querySelector("[fechaUI=fechaFin]").textContent = fechaSeleccionada_humana

                            if (fechasSeleccionadas().fechaEntrada?.volatil) {
                                diasDelCalendario.forEach((dia) => {
                                    if (dia.getAttribute("estadoDia") === "disponible") {
                                        if (fechasSeleccionadas().fechaEntrada.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaEntrada.ano) {
                                            if (Number(dia.getAttribute("dia")) < Number(diaSeleccionado) &&
                                                Number(dia.getAttribute("dia")) >= fechasSeleccionadas().fechaEntrada.dia) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        } else {
                                            if (Number(dia.getAttribute("dia")) < Number(diaSeleccionado)) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        }
                                    }
                                })
                            } else if (fechasSeleccionadas().fechaEntrada?.volatil) {
                                if (fechasSeleccionadas().fechaEntrada.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaEntrada.ano) {
                                    selectorDias.forEach((dia) => {
                                        if ((Number(dia.getAttribute("dia")) > fechasSeleccionadas().fechaEntrada.dia)
                                            &&
                                            (Number(dia.getAttribute("dia")) < Number(diaSeleccionado))) {

                                            dia.classList.add("calendarioDiaReserva")
                                            dia.classList.remove("calendarioDiaDisponible")
                                        }
                                    })
                                } else {
                                    selectorDias.forEach((dia) => {
                                        if (Number(dia.getAttribute("dia")) <= Number(diaSeleccionado)) {
                                            dia.classList.add("calendarioDiaReserva")
                                            dia.classList.remove("calendarioDiaDisponible")
                                        }
                                    })
                                }
                            }
                        } else if (calendarioIO === "unico") {

                            contendorDestino.querySelector("[calendario=unico]").setAttribute("memoriaVolatil", fechaSeleccionada_ISO)
                            contendorDestino.querySelector("[fechaUI=unico]").textContent = fechaSeleccionada_humana

                            if (fechasSeleccionadas().fechaUnico?.volatil) {
                                diasDelCalendario.forEach((dia) => {
                                    if (dia.getAttribute("estadoDia") === "disponible") {
                                        if (fechasSeleccionadas().fechaUnico.mes === Number(mesSeleccionado) && Number(anoSeleccionado) === fechasSeleccionadas().fechaUnico.ano) {
                                            if (Number(dia.getAttribute("dia")) < Number(diaSeleccionado) &&
                                                Number(dia.getAttribute("dia")) >= fechasSeleccionadas().fechaUnico.dia) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        } else {
                                            if (Number(dia.getAttribute("dia")) < Number(diaSeleccionado)) {
                                                dia.classList.remove("calendarioDiaDisponible")
                                                dia.classList.add("calendarioDiaReserva")
                                            }
                                        }
                                    }
                                })
                            }
                        }
                    },
                },
                diasOcupadosTotalmentePorMes: async (metadatos) => {
                    const mes = metadatos.mes
                    const ano = metadatos.ano
                    const instanciaUID_mes = metadatos.instanciaUID_mes
                    const controlDiasCompletos = {
                        zona: "componentes/diasOcupadosTotalmentePorMes",
                        mes: Number(mes),
                        ano: Number(ano)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(controlDiasCompletos)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor.ok) {
                        const dias = respuestaServidor.ok.dias
                        const selectorMarcoMesRenderizadoEnEspera = document
                            .querySelector(`[inctanciaUID_procesoCambioMes="${instanciaUID_mes}"]`)
                        if (!selectorMarcoMesRenderizadoEnEspera) {
                            return
                        }
                        for (const detallesDia of Object.entries(dias)) {
                            const dia = detallesDia[0]
                            const estadoDia = detallesDia[1].estadoDia
                            const selectorDia = selectorMarcoMesRenderizadoEnEspera.querySelector(`[dia="${dia}"]`)
                            if (estadoDia === "diaCompleto") {
                                selectorDia.classList.add("calendarioDiaCompleto")
                            }
                            if (estadoDia === "diaParcial") {
                                selectorDia.classList.add("calendarioDiaParcial")
                            }
                        }
                    }
                },
            },
            contenedorFinanciero: {
                constructor: function (data) {

                    try {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const destino = data.destino
                        const modoUI = data.modoUI
                        const contenedorFinanciero = data.contenedorFinanciero

                        const global = contenedorFinanciero.desgloseFinanciero.global
                        const entidades = contenedorFinanciero.desgloseFinanciero.entidades
                        const contenedorOfertas = contenedorFinanciero.desgloseFinanciero.contenedorOfertas
                        const impuestos = contenedorFinanciero.desgloseFinanciero.impuestos
                        const totales = global.totales

                        this.control({
                            destino,
                            modoUI
                        })
                        this.componentesUI.contenedor({
                            destino,
                            modoUI,
                            instanciaUID
                        })
                        this.componentesUI.entidades.hub({
                            destino,
                            entidades,
                            instanciaUID,
                            modoUI
                        })
                        this.componentesUI.ofertas.hub({
                            destino,
                            contenedorOfertas,
                            instanciaUID
                        })
                        this.componentesUI.impuestos({
                            destino,
                            impuestos,
                            instanciaUID
                        })
                        this.componentesUI.totalesGlobales({
                            destino,
                            totales,
                            instanciaUID
                        })
                    } catch (error) {
                        throw error
                    }
                },
                control: (data) => {
                    try {
                        const destino = data.destino
                        const modoUI = data.modoUI
                        if (!document.querySelector(destino)) {
                            throw new Error("El constructor del contenedor financiero no encuentra el elemento del destino")
                        }
                        if (modoUI !== "plaza" && modoUI !== "administracion" && modoUI !== "simulador") {
                            throw new Error("El constructor del contenedor financiero necesita modoUI en plaza, administracion o simulador")
                        }

                    } catch (error) {
                        throw error
                    }

                },
                componentesUI: {
                    contenedor: function (data) {
                        const destino = data.destino
                        const modoUI = data.modoUI

                        const instanciaUID = data.instanciaUID
                        const selector = document.querySelector(destino).querySelector("[contenedor=financiero]")
                        if (!selector) {
                            const contenedor = document.createElement("div")
                            contenedor.classList.add("componentes_ui_desloseTotales_contenedor")
                            contenedor.setAttribute("contenedor", "financiero")
                            contenedor.setAttribute("modoUI", modoUI)
                            contenedor.setAttribute("instanciaUID", instanciaUID)
                            document.querySelector(destino).appendChild(contenedor)
                        } else {
                            selector.setAttribute("instanciaUID", instanciaUID)
                        }


                    },
                    navegacion: {
                        ui: function (data) {
                            const destino = data.destino

                            const contenedor_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[componente=navegador]")
                            if (contenedor_selector) {
                                return
                            }
                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("componente", "navegador")
                            contenedor.classList.add(
                                "padding6",
                                "flexVertical",
                                "gap6"
                            )

                            const ui = document.createElement("div")
                            ui.classList.add(
                                "navegador",
                                "backgroundWhite5"
                            )
                            contenedor.appendChild(ui)

                            const botonTodo = document.createElement("div")
                            botonTodo.setAttribute("comando", "todo")
                            botonTodo.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonTodo.textContent = "Ver todo"
                            botonTodo.addEventListener("click", this.controlador)


                            const botonPorNoche = document.createElement("div")
                            botonPorNoche.setAttribute("comando", "porNoche")
                            botonPorNoche.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonPorNoche.textContent = "Desglose por noche"
                            botonPorNoche.addEventListener("click", this.controlador)

                            ui.appendChild(botonPorNoche)

                            const botonPorApartamento = document.createElement("div")
                            botonPorApartamento.setAttribute("comando", "porApartamento")
                            botonPorApartamento.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonPorApartamento.textContent = "Desglose por apartamento"
                            botonPorApartamento.addEventListener("click", this.controlador)

                            ui.appendChild(botonPorApartamento)

                            const botonServicios = document.createElement("div")
                            botonServicios.setAttribute("comando", "porServicio")
                            botonServicios.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonServicios.textContent = "Servicios"
                            botonServicios.addEventListener("click", this.controlador)

                            ui.appendChild(botonServicios)


                            const botonOfertas = document.createElement("div")
                            botonOfertas.setAttribute("comando", "ofertas")
                            botonOfertas.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonOfertas.textContent = "Ofertas aplicadas"
                            botonOfertas.addEventListener("click", this.controlador)

                            ui.appendChild(botonOfertas)

                            const botonImpuestos = document.createElement("div")
                            botonImpuestos.setAttribute("comando", "impuestos")
                            botonImpuestos.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonImpuestos.textContent = "Impuestos"
                            botonImpuestos.addEventListener("click", this.controlador)
                            ui.appendChild(botonImpuestos)


                            const botonTotales = document.createElement("div")
                            botonTotales.setAttribute("comando", "totales")
                            botonTotales.classList.add(
                                "botonV2",
                                "comportamientoBoton",
                            )
                            botonTotales.textContent = "Totales"
                            botonTotales.addEventListener("click", this.controlador)

                            ui.appendChild(botonTotales)

                            document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedor)


                        },
                        controlador: (data) => {
                            const boton = data.target
                            const comando = boton.getAttribute("comando")
                            const estadoActual = boton.getAttribute("estado")
                            const contenedorFinancieroArea = boton.closest("[contenedor=financiero]")
                            const selectorContenedores = contenedorFinancieroArea.querySelectorAll("[componente=plegable]")
                            const navegadorArea = contenedorFinancieroArea.querySelector("[componente=navegador]")
                            const selectorBotones = navegadorArea.querySelectorAll("[comando]")

                            const estadoInicial = () => {
                                selectorContenedores.forEach((contenedorPlegable) => {
                                    contenedorPlegable.removeAttribute("style")
                                })
                                selectorBotones.forEach((boton) => {
                                    boton.classList.remove("selecionAzul")
                                    boton.removeAttribute("estado")
                                })
                            }

                            if (comando === "todo") {
                                estadoInicial()
                                return
                            }
                            if (estadoActual === "activo") {
                                boton.classList.remove("selecionAzul")
                                boton.removeAttribute("estado")

                            } else {
                                boton.classList.add("selecionAzul")
                                boton.setAttribute("estado", "activo")
                            }

                            const botonesActivos = []
                            contenedorFinancieroArea.querySelector("[componente=navegador]").querySelectorAll("[estado=activo]").forEach((botonActivo) => {
                                botonesActivos.push(botonActivo.getAttribute("comando"))
                            })
                            if (botonesActivos.length === 0) {
                                return estadoInicial()
                            }


                            selectorContenedores.forEach((contenedorPlegable) => {
                                const contenedorIDV = contenedorPlegable.getAttribute("contenedor")

                                if (botonesActivos.includes(contenedorIDV)) {

                                    contenedorPlegable.removeAttribute("style")
                                } else {
                                    contenedorPlegable.style.display = "none"

                                }
                            })

                        }
                    },
                    entidades: {
                        hub: function (data) {
                            const destino = data.destino
                            const entidades = data.entidades
                            const instanciaUID = data.instanciaUID
                            const modoUI = data.modoUI

                            for (const [entidadIDV, entidad] of Object.entries(entidades)) {
                                if (entidadIDV === "reserva") {
                                    const desglosePorNoche = entidad.desglosePorNoche
                                    const desglosePorApartamento = entidad.desglosePorApartamento
                                    const contenedorSobreControles = entidad.contenedorSobreControles
                                    const totales = entidad.global.totales
                                    this.reserva.contenedor({
                                        destino
                                    })
                                    this.reserva.porNoche({
                                        destino,
                                        instanciaUID,
                                        desglosePorNoche,
                                        contenedorSobreControles
                                    })
                                    this.reserva.porApartamento({
                                        destino,
                                        desglosePorApartamento
                                    })
                                    this.reserva.totales({
                                        destino,
                                        totales
                                    })
                                }
                                if (entidadIDV === "servicios") {
                                    console.log("ttttt", modoUI)
                                    const desglosePorServicios = entidad.desglosePorServicios
                                    const totales = entidad.global.totales


                                    // if ((modoUI === "administracion" || modoUI === "plaza" || modoUI === "simulador") && desglosePorServicios.length > 0) {

                                    this.servicios.contenedor({
                                        destino,
                                        desglosePorServicios,
                                        modoUI
                                    })
                                    this.servicios.porServicio({
                                        destino,
                                        desglosePorServicios
                                    })
                                    this.servicios.totales({
                                        destino,
                                        totales
                                    })
                                    // }

                                }
                                if (entidadIDV === "complementosAlojamiento") {
                                    const desglosePorComplementoDeAlojamiento = entidad.desglosePorComplementoDeAlojamiento
                                    const totales = entidad.global.totales

                                    //if ((modoUI === "administracion" || modoUI === "plaza" || modoUI === "simulador") && desglosePorComplementoDeAlojamiento.length > 0) {
                                    this.complementosDelAlojamientos.contenedor({
                                        destino,
                                        desglosePorComplementoDeAlojamiento,
                                        modoUI
                                    })
                                    this.complementosDelAlojamientos.porComplemento({
                                        destino,
                                        desglosePorComplementoDeAlojamiento
                                    })
                                    this.complementosDelAlojamientos.totales({
                                        destino,
                                        totales
                                    })

                                    // }


                                }
                            }
                        },
                        reserva: {
                            contenedor: (data) => {
                                const destino = data.destino
                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=reserva]")
                                if (!selector) {
                                    const contenedorPlegable = document.createElement('details');
                                    contenedorPlegable.classList.add("contenedorEntidad")
                                    contenedorPlegable.setAttribute("entidad", "reserva")


                                    const tituloContenedorPlegable = document.createElement('summary');
                                    tituloContenedorPlegable.classList.add(
                                        "padding12",
                                    )
                                    tituloContenedorPlegable.textContent = 'Alojamiento';
                                    contenedorPlegable.appendChild(tituloContenedorPlegable)

                                    const contenedor = document.createElement("div")
                                    contenedor.setAttribute("contenedor", "data")
                                    contenedorPlegable.appendChild(contenedor)





                                    document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedorPlegable)
                                }
                            },
                            porNoche: (data) => {
                                const destino = data.destino
                                const desglosePorNoche = data.desglosePorNoche
                                const contenedorSobreControles = data.contenedorSobreControles
                                const instanciaUID = data.instanciaUID
                                const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                const contenedorEntidadReserva = contenedorFinanciero.querySelector("[entidad=reserva] [contenedor=data]")
                                const conntenedorPorNoche_selector = contenedorEntidadReserva.querySelector("[contenedor=porNoche]")
                                const modoUI = contenedorFinanciero.getAttribute("modoUI")

                                if (!conntenedorPorNoche_selector) {
                                    const contenedorPorNoche = document.createElement("div")
                                    contenedorPorNoche.classList.add("reserva_resumen_desglose_pago_bloque")
                                    contenedorPorNoche.setAttribute("contenedor", "porNoche")
                                    contenedorPorNoche.setAttribute("componente", "plegable")

                                    contenedorEntidadReserva.appendChild(contenedorPorNoche)

                                    const detalleDiaUITitulo = document.createElement("div")
                                    detalleDiaUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                                    detalleDiaUITitulo.textContent = "Desglose por noche"
                                    contenedorPorNoche.appendChild(detalleDiaUITitulo)

                                    if (modoUI === "administracion") {
                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6",
                                        )

                                        const botonSobreControlDePrecios = document.createElement("div")
                                        botonSobreControlDePrecios.classList.add(
                                            "botonV1",
                                            "comportamientoBoton"
                                        )
                                        botonSobreControlDePrecios.textContent = "Alterar precios neto de la reserva"
                                        botonSobreControlDePrecios.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.sobreControlPrecios.arranque)

                                        contenedorPorNoche.appendChild(contenedorBotones)
                                    }

                                    if (modoUI === "simulador") {
                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6",
                                        )

                                        const botonSobreControlDePrecios = document.createElement("div")
                                        botonSobreControlDePrecios.classList.add(
                                            "botonV1",
                                            "comportamientoBoton"
                                        )
                                        botonSobreControlDePrecios.textContent = "Alterar precios neto de la simulación"
                                        botonSobreControlDePrecios.addEventListener("click", casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.sobreControlPrecios.arranque)

                                        contenedorPorNoche.appendChild(contenedorBotones)
                                    }

                                    const contenedorDesglosePorNoche = document.createElement("div")
                                    contenedorDesglosePorNoche.classList.add("reserva_resumen_desglose_porNoche")
                                    contenedorDesglosePorNoche.setAttribute("contenedor", "deslosePorNoche")
                                    contenedorPorNoche.appendChild(contenedorDesglosePorNoche)
                                }
                                const contenedorDesglosePorNoche_renderizado = contenedorEntidadReserva.querySelector("[contenedor=deslosePorNoche]")

                                const fechasDelDesgloseArray = Object.keys(desglosePorNoche)
                                const selectorNochesRenderizados = contenedorDesglosePorNoche_renderizado.querySelectorAll(`[noche]`)
                                selectorNochesRenderizados.forEach((nocheRenderizada) => {
                                    const fechaNocheRenderizada = nocheRenderizada.getAttribute("noche")
                                    if (!fechasDelDesgloseArray.includes(fechaNocheRenderizada)) {
                                        nocheRenderizada?.remove()
                                    }
                                })
                                let posicion = 0
                                for (const [fechaNoche, desglose] of Object.entries(desglosePorNoche)) {
                                    const precioNetoNoche = desglose.precioNetoNoche
                                    const apartamentosPorNoche = desglose.apartamentosPorNoche
                                    const nochesRenderizdas = contenedorDesglosePorNoche_renderizado.querySelectorAll("[noche]")

                                    const contenedorNoche_selector = contenedorDesglosePorNoche_renderizado.querySelector(`[noche="${fechaNoche}"]`)
                                    if (!contenedorNoche_selector) {
                                        const contenedorNoche = document.createElement("div")
                                        contenedorNoche.setAttribute("noche", fechaNoche)
                                        contenedorNoche.classList.add(
                                            "contenedorDiaConNoche",
                                        )
                                        const titulo = document.createElement("div")
                                        titulo.classList.add(
                                            "reserva_resumen_apartamentoIUTitulo",
                                            "textoCentrado"
                                        )
                                        titulo.classList.add("negrita")
                                        titulo.textContent = fechaNoche
                                        contenedorNoche.appendChild(titulo)



                                        if (posicion < nochesRenderizdas.length) {
                                            const elementosArray = Array.from(nochesRenderizdas);
                                            contenedorDesglosePorNoche_renderizado.insertBefore(contenedorNoche, elementosArray[posicion]);
                                        } else {
                                            contenedorDesglosePorNoche_renderizado.appendChild(contenedorNoche);
                                        }

                                        const totalesNoche = document.createElement("div")
                                        totalesNoche.classList.add("padding6")
                                        totalesNoche.setAttribute("contenedor", "totalesNoche")

                                        const totalNetoNocheUI = document.createElement("div")
                                        totalNetoNocheUI.setAttribute("componente", "totalNetoNoche")
                                        totalNetoNocheUI.classList.add("negrita")

                                        totalesNoche.appendChild(totalNetoNocheUI)
                                        contenedorNoche.appendChild(totalesNoche)


                                    }
                                    posicion++

                                    const contenedorNoche_renderizado = contenedorDesglosePorNoche_renderizado.querySelector(`[noche="${fechaNoche}"]`)
                                    const totalNetoNocheUI = contenedorNoche_renderizado.querySelector(`[componente=totalNetoNoche]`)
                                    totalNetoNocheUI.textContent = precioNetoNoche + "$ Total neto noche"

                                    const apartamentosIDVArray = Object.keys(apartamentosPorNoche)
                                    const selectorApartamentosRenderizados = contenedorNoche_renderizado.querySelectorAll(`[apartamentoIDV]`)
                                    selectorApartamentosRenderizados.forEach((apartamentoRenderizado) => {
                                        const apartamentoIDVRenderizado = apartamentoRenderizado.getAttribute("apartamentoIDV")
                                        if (!apartamentosIDVArray.includes(apartamentoIDVRenderizado)) {
                                            apartamentoRenderizado?.remove()
                                        }
                                    })


                                    for (const [apartamentoIDV, desglosePorApartamento] of Object.entries(apartamentosPorNoche)) {
                                        const apartamentoUI = desglosePorApartamento.apartamentoUI
                                        const precioNetoApartamento = desglosePorApartamento.precioNetoApartamento

                                        const contenedorApartamento_selector = contenedorNoche_renderizado.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                                        if (!contenedorApartamento_selector) {

                                            const contenedorApartamento = document.createElement("div")
                                            contenedorApartamento.classList.add(
                                                "contenedorApartamento",
                                            )
                                            contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                            contenedorNoche_renderizado.appendChild(contenedorApartamento)
                                            if (modoUI === "administracion") {
                                                contenedorApartamento.classList.add("comportamientoBotonApartamento")
                                                contenedorApartamento.addEventListener("click", () => {
                                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.sobreControlPrecios.componentesUI.nocheUI({
                                                        fechaNoche,
                                                        apartamentoIDV,
                                                        instanciaUID_contenedorFinanciero: instanciaUID
                                                    })
                                                })
                                            }
                                            if (modoUI === "simulador") {
                                                contenedorApartamento.classList.add("comportamientoBotonApartamento")
                                                contenedorApartamento.addEventListener("click", () => {
                                                    casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.sobreControlPrecios.nocheUI({
                                                        fechaNoche,
                                                        apartamentoIDV,
                                                        instanciaUID_contenedorFinanciero: instanciaUID
                                                    })
                                                })
                                            }

                                            const contenedorApartamentoYTotal = document.createElement("div")
                                            contenedorApartamentoYTotal.classList.add("padding6")
                                            contenedorApartamentoYTotal.setAttribute("contenedor", "tituloApartamentoYTotales")

                                            const tituloApartamento = document.createElement("div")
                                            tituloApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                            tituloApartamento.classList.add(
                                                "reserva_resumen_apartamentoUIPrecio",
                                            )
                                            tituloApartamento.classList.add("negrita")
                                            tituloApartamento.classList.add("colorGris")
                                            tituloApartamento.textContent = apartamentoUI

                                            contenedorApartamentoYTotal.appendChild(tituloApartamento)
                                            const precioNetoApartamentoUI = document.createElement("div")
                                            precioNetoApartamentoUI.setAttribute("contenedor", "precioNetoApartamento")
                                            precioNetoApartamentoUI.classList.add(
                                                "reserva_resumen_apartamentoUIPrecio",
                                            )


                                            contenedorApartamentoYTotal.appendChild(precioNetoApartamentoUI)
                                            contenedorApartamento.appendChild(contenedorApartamentoYTotal)
                                        }
                                        const contenedorApartamento_renderizado = contenedorNoche_renderizado.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)

                                        const contenedorTotalApartamentoYTotales_renderizado = contenedorApartamento_renderizado.querySelector("[contenedor=tituloApartamentoYTotales]")

                                        if (modoUI === "administracion") {
                                            if (contenedorSobreControles
                                                &&
                                                contenedorSobreControles.hasOwnProperty(fechaNoche)
                                                &&
                                                contenedorSobreControles[fechaNoche].hasOwnProperty(apartamentoIDV)) {
                                                const sobreControlUI_selector = contenedorTotalApartamentoYTotales_renderizado.querySelector("[contenedor=sobreControl]")
                                                if (!sobreControlUI_selector) {
                                                    const contenedorSobreControlUI = document.createElement("div")
                                                    contenedorSobreControlUI.setAttribute("contenedor", "sobreControl")
                                                    contenedorSobreControlUI.classList.add(
                                                        "negrita"
                                                    )
                                                    contenedorSobreControlUI.textContent = "Sobre control aplicado."
                                                    contenedorTotalApartamentoYTotales_renderizado.appendChild(contenedorSobreControlUI)
                                                }
                                            } else {
                                                contenedorTotalApartamentoYTotales_renderizado.querySelector("[contenedor=sobreControl]")?.remove()
                                            }
                                        }
                                        if (modoUI === "simulador") {
                                            if (contenedorSobreControles
                                                &&
                                                contenedorSobreControles.hasOwnProperty(fechaNoche)
                                                &&
                                                contenedorSobreControles[fechaNoche].hasOwnProperty(apartamentoIDV)) {
                                                const sobreControlUI_selector = contenedorTotalApartamentoYTotales_renderizado.querySelector("[contenedor=sobreControl]")
                                                if (!sobreControlUI_selector) {
                                                    const contenedorSobreControlUI = document.createElement("div")
                                                    contenedorSobreControlUI.setAttribute("contenedor", "sobreControl")
                                                    contenedorSobreControlUI.classList.add(
                                                        "negrita"
                                                    )
                                                    contenedorSobreControlUI.textContent = "Sobre control aplicado."
                                                    contenedorTotalApartamentoYTotales_renderizado.appendChild(contenedorSobreControlUI)
                                                }
                                            } else {
                                                contenedorTotalApartamentoYTotales_renderizado.querySelector("[contenedor=sobreControl]")?.remove()
                                            }
                                        }
                                        const precioNetoApartamentoSelector = contenedorApartamento_renderizado.querySelector("[contenedor=precioNetoApartamento]")
                                        precioNetoApartamentoSelector.textContent = precioNetoApartamento + "$ Neto del apartamento"

                                    }
                                }
                            },
                            porApartamento: (data) => {
                                const destino = data.destino
                                const desglosePorApartamento = data.desglosePorApartamento

                                const porApartamento_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=reserva] [contenedor=data]").querySelector("[contenedor=porApartamento]")
                                if (!porApartamento_selector) {
                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add("contenedorPorApartamento",
                                        "padding6",
                                        "flexVertical",
                                        "gap6"
                                    )
                                    contenedor.setAttribute("contenedor", "porApartamento")
                                    contenedor.setAttribute("componente", "plegable")


                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                        "padding6"
                                    )
                                    tituloContendor.textContent = "Desglose por apartamento"
                                    contenedor.appendChild(tituloContendor)
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=reserva] [contenedor=data]").appendChild(contenedor)

                                }
                                const porApartamento_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=reserva] [contenedor=data]").querySelector("[contenedor=porApartamento]")



                                for (const [apartamentoIDV, detalles] of Object.entries(desglosePorApartamento)) {
                                    const apartamentoUI = detalles.apartamentoUI
                                    const totalNeto = detalles.totalNeto
                                    const precioMedioNetoNoche = detalles.precioMedioNetoNoche

                                    const contenedorApartamento_selector = porApartamento_renderizado.querySelector(`[apartamentoIDV=${apartamentoIDV}]`)
                                    if (!contenedorApartamento_selector) {
                                        const contenedorApartamento = document.createElement("div")
                                        contenedorApartamento.classList.add("contenedorApartamento")
                                        contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                        porApartamento_renderizado.appendChild(contenedorApartamento)

                                        const contenedorTituloYtotal = document.createElement("div")
                                        contenedorTituloYtotal.setAttribute("contenedor", "tituloYTotal")
                                        contenedorTituloYtotal.classList.add(
                                            "padding6"
                                        )

                                        const apartamentoUITitulo = document.createElement("div")
                                        apartamentoUITitulo.classList.add("contenedorTextoOferta")
                                        apartamentoUITitulo.classList.add("negrita")
                                        apartamentoUITitulo.textContent = apartamentoUI
                                        contenedorTituloYtotal.appendChild(apartamentoUITitulo)
                                        const apartamentoUIPrecioNetoTotal = document.createElement("div")
                                        apartamentoUIPrecioNetoTotal.classList.add("textoDetallesPorApartamento")
                                        apartamentoUIPrecioNetoTotal.setAttribute("dato", "totalNeto")
                                        contenedorTituloYtotal.appendChild(apartamentoUIPrecioNetoTotal)

                                        const apartamentoUIPrecioPromedioPorNoche = document.createElement("div")
                                        apartamentoUIPrecioPromedioPorNoche.classList.add("textoDetallesPorApartamento")
                                        apartamentoUIPrecioPromedioPorNoche.setAttribute("dato", "precioMedioNetoNoche")
                                        contenedorTituloYtotal.appendChild(apartamentoUIPrecioPromedioPorNoche)
                                        contenedorApartamento.appendChild(contenedorTituloYtotal)
                                    }
                                    const contenedorApartamento_renderizado = porApartamento_renderizado.querySelector(`[apartamentoIDV=${apartamentoIDV}]`)

                                    const precioNetoApartamentoUI = contenedorApartamento_renderizado.querySelector("[dato=totalNeto]")
                                    precioNetoApartamentoUI.textContent = totalNeto + "$ Total neto"

                                    const precioMedioNetoNocheApartamentoUI = contenedorApartamento_renderizado.querySelector("[dato=precioMedioNetoNoche]")
                                    precioMedioNetoNocheApartamentoUI.textContent = precioMedioNetoNoche + "$ Precio medio neto por noche"

                                }

                            },
                            totales: (data) => {
                                const destino = data.destino
                                const totales = data.totales
                                const instanciaUID = data.instanciaUID

                                const totalNeto = totales?.totalNeto
                                const totalFinal = totales?.totalFinal
                                const totalDescuento = totales?.totalDescuento
                                const impuestosAplicados = totales?.impuestosAplicados
                                const promedioNocheNeto = totales?.promedioNocheNeto
                                const promedioNocheNetoConDescuentos = totales?.promedioNocheNetoConDescuentos
                                const totalNetoConDescuentos = totales?.totalNetoConDescuentos
                                const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                const modoUI = contenedorFinanciero.getAttribute("modoUI")

                                const contenedorTotales_selector = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=reserva] [contenedor=data]").querySelector("[contenedor=totales]")
                                if (!contenedorTotales_selector) {

                                    const totalesUI = document.createElement("div")
                                    totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                                    totalesUI.setAttribute("contenedor", "totales")
                                    totalesUI.setAttribute("componente", "plegable")
                                    document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=reserva] [contenedor=data]").appendChild(totalesUI)

                                    const totalesUITituloBloque = document.createElement("div")
                                    totalesUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                                    totalesUITituloBloque.textContent = "Totales del alojamiento de la reserva (Solo alojamiento)"
                                    totalesUI.appendChild(totalesUITituloBloque)

                                }

                                const contenedorTotales_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=reserva] [contenedor=data]").querySelector("[contenedor=totales]")

                                const contenedorTotalesNeto_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")
                                if (!contenedorTotalesNeto_selector) {
                                    const contenedorTotalesNeto = document.createElement("div")
                                    contenedorTotalesNeto.setAttribute("contenedor", "totalesNeto")
                                    contenedorTotalesNeto.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorTotalNetoUI = document.createElement("div")
                                    contenedorTotalNetoUI.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalReservaNetoUI = document.createElement("div")

                                    totalReservaNetoUI.textContent = "Total reserva neto"
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI)

                                    const totalReservaNetoUI_ = document.createElement("div")
                                    totalReservaNetoUI_.setAttribute("dato", "totalNeto")
                                    totalReservaNetoUI_.classList.add(
                                        "negrita"
                                    )
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI_)
                                    contenedorTotalesNeto.appendChild(contenedorTotalNetoUI)

                                    const contenedorPromedioNoche = document.createElement("div")
                                    contenedorPromedioNoche.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalReservaNetoDiaUI = document.createElement("div")

                                    totalReservaNetoDiaUI.textContent = "Precio medio neto de la reserva por noche"
                                    contenedorPromedioNoche.appendChild(totalReservaNetoDiaUI)

                                    const totalReservaNetoDiaUI_ = document.createElement("div")
                                    totalReservaNetoDiaUI_.classList.add("negrita")
                                    totalReservaNetoDiaUI_.setAttribute("dato", "totalNetoNocheMedio")

                                    contenedorPromedioNoche.appendChild(totalReservaNetoDiaUI_)
                                    contenedorTotalesNeto.appendChild(contenedorPromedioNoche)
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesNeto)

                                }
                                const contenedorTotalesNeto_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")

                                const totalNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNeto]")
                                totalNetoUI.textContent = totalNeto

                                const promedioNocheNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNetoNocheMedio]")
                                promedioNocheNetoUI.textContent = promedioNocheNeto

                                const totalesDescuentos_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalesDescuentos_selector && totalDescuento) {
                                    const contenedorTotalesDescuentos = document.createElement("div")
                                    contenedorTotalesDescuentos.setAttribute("contenedor", "totalDescuentos")
                                    contenedorTotalesDescuentos.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesDescuentos)

                                    const contenedorTotalDescuentosAplicados = document.createElement("div")
                                    contenedorTotalDescuentosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalDescuentosAplicadosUI = document.createElement("div")

                                    totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas"
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI)

                                    const totalDescuentosAplicadosUI_ = document.createElement("div")
                                    totalDescuentosAplicadosUI_.classList.add("negrita")
                                    totalDescuentosAplicadosUI_.setAttribute("dato", "totalConDescuentoAplicado")
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalDescuentosAplicados)

                                    const contenedorTotalNetoConDescuentos = document.createElement("div")
                                    contenedorTotalNetoConDescuentos.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalNetoConDescuentosUI = document.createElement("div")

                                    totalNetoConDescuentosUI.textContent = "Total neto con descuentos aplicados"
                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI)

                                    const totalNetoConDescuentosUI_ = document.createElement("div")
                                    totalNetoConDescuentosUI_.classList.add("negrita")
                                    totalNetoConDescuentosUI_.setAttribute("dato", "totalNetoConDescuentos")

                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalNetoConDescuentos)


                                    const contenedorPromedio = document.createElement("div")
                                    contenedorPromedio.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const precioMedioConDescuentos = document.createElement("div")

                                    precioMedioConDescuentos.textContent = "Precio medio neto de la reserva por noche con descuentos aplicados"
                                    contenedorPromedio.appendChild(precioMedioConDescuentos)

                                    const precioMedioConDescuentos_ = document.createElement("div")
                                    precioMedioConDescuentos_.classList.add("negrita")
                                    precioMedioConDescuentos_.setAttribute("dato", "precioMedioConDescuentos")

                                    contenedorPromedio.appendChild(precioMedioConDescuentos_)
                                    contenedorTotalesDescuentos.appendChild(contenedorPromedio)
                                }
                                const totalesDescuentos_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalDescuento) {
                                    totalesDescuentos_renderizado?.remove()
                                } else {
                                    const totalConDescuentosAplicadosUI = totalesDescuentos_renderizado.querySelector("[dato=totalConDescuentoAplicado]")

                                    totalConDescuentosAplicadosUI.textContent = totalDescuento

                                    const totalConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                                    totalConDescuentosUI.textContent = totalNetoConDescuentos

                                    const promedioNocheNetoConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=precioMedioConDescuentos]")
                                    promedioNocheNetoConDescuentosUI.textContent = promedioNocheNetoConDescuentos
                                }

                                const contenedorTotalesFinal_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")
                                if (!contenedorTotalesFinal_selector) {

                                    const contenedorTotalesFinal = document.createElement("div")
                                    contenedorTotalesFinal.setAttribute("contenedor", "totalesFinal")
                                    contenedorTotalesFinal.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesFinal)
                                    const contenedorTotalImpuestosAplicados = document.createElement("div")
                                    contenedorTotalImpuestosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalImpuestosUI = document.createElement("div")

                                    totalImpuestosUI.textContent = "Total impuestos aplicados"
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI)

                                    const totalImpuestosUI_ = document.createElement("div")
                                    totalImpuestosUI_.classList.add("negrita")
                                    totalImpuestosUI_.setAttribute("dato", "impuestosAplicados")
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI_)

                                    contenedorTotalesFinal.appendChild(contenedorTotalImpuestosAplicados)

                                    const contenedorTotalFinal = document.createElement("div")
                                    contenedorTotalFinal.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalConImpuestosUI = document.createElement("div")
                                    totalConImpuestosUI.textContent = "Total final"
                                    contenedorTotalFinal.appendChild(totalConImpuestosUI)

                                    const totalConImpuestosUI_ = document.createElement("div")
                                    totalConImpuestosUI_.classList.add("negrita")
                                    totalConImpuestosUI_.setAttribute("dato", "totalFinal")

                                    contenedorTotalFinal.appendChild(totalConImpuestosUI_)
                                    contenedorTotalesFinal.appendChild(contenedorTotalFinal)
                                }
                                const contenedorTotalesFinal_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")


                                const impuestosAplicadosUI = contenedorTotalesFinal_renderizado.querySelector("[dato=impuestosAplicados]")
                                impuestosAplicadosUI.textContent = impuestosAplicados

                                const totalFinalUI = contenedorTotalesFinal_renderizado.querySelector("[dato=totalFinal]")
                                totalFinalUI.textContent = totalFinal

                            },
                        },
                        complementosDelAlojamientos: {
                            contenedor: (data) => {
                                const destino = data.destino
                                const desglosePorComplementoDeAlojamiento = data.desglosePorComplementoDeAlojamiento
                                const modoUI = data.modoUI

                                if (desglosePorComplementoDeAlojamiento.length === 0 && modoUI === "plaza") {
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos]")?.remove()
                                    return
                                }

                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos]")
                                if (!selector) {

                                    const contenedorPlegable = document.createElement('details');
                                    contenedorPlegable.classList.add("contenedorEntidad")
                                    contenedorPlegable.setAttribute("entidad", "complementosDelAlojamientos")


                                    const tituloContenedorPlegable = document.createElement('summary');
                                    tituloContenedorPlegable.classList.add(
                                        "padding12",
                                    )
                                    tituloContenedorPlegable.textContent = 'Complementos del alojamiento';
                                    contenedorPlegable.appendChild(tituloContenedorPlegable)

                                    const contenedor = document.createElement("div")
                                    contenedor.setAttribute("contenedor", "data")
                                    contenedorPlegable.appendChild(contenedor)
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedorPlegable)
                                }
                            },
                            porComplemento: (data) => {
                                const destino = data.destino
                                const desglosePorComplementoDeAlojamiento = data.desglosePorComplementoDeAlojamiento

                                const porComplemento_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos] [contenedor=data]").querySelector("[contenedor=porComplemento]")
                                if (!porComplemento_selector) {
                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add(
                                        "padding6",
                                        "flexVertical",
                                        "gap6"
                                    )
                                    contenedor.setAttribute("contenedor", "porComplemento")
                                    contenedor.setAttribute("componente", "plegable")

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                        "padding6"
                                    )
                                    tituloContendor.textContent = "Desglose por complementos de alojamiento"
                                    contenedor.appendChild(tituloContendor)
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos] [contenedor=data]").appendChild(contenedor)

                                }
                                const porComplemento_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=complementosDelAlojamientos] [contenedor=data]").querySelector("[contenedor=porComplemento]")

                                const complementosUID_Renderizados = []
                                const complementosUI_Renderizados = porComplemento_renderizado.querySelectorAll("[complementoUID]")

                                complementosUI_Renderizados.forEach(complemento => {
                                    complementosUID_Renderizados.push(complemento.complementoUID)
                                });

                                complementosUI_Renderizados.forEach((complementoUI) => {
                                    const complementoUID = complementoUI.getAttribute("complementoUID")
                                    if (!complementosUID_Renderizados.includes(complementoUID)) {
                                        complementoUI?.remove()
                                        // Si no hay complementos, borra el apartamentos
                                    }
                                })

                                const numeroComplementosPorRenderizar = desglosePorComplementoDeAlojamiento.length
                                console.log("numeroComplementosPorRenderizar", numeroComplementosPorRenderizar)
                                if (numeroComplementosPorRenderizar === 0) {
                                    const info_selector = porComplemento_renderizado.querySelector("[componente=titulo]")
                                    if (!info_selector) {
                                        const info = document.createElement("p")
                                        info.setAttribute("componente", "titulo")
                                        info.textContent = "No hay complementos de alojamiento seleccionados"
                                        info.classList.add("textoCentrado")
                                        porComplemento_renderizado.appendChild(info)
                                    }
                                } else {
                                    porComplemento_renderizado.querySelector("[componente=titulo]")?.remove()
                                }

                                let posicion = 0
                                for (const complemento of desglosePorComplementoDeAlojamiento) {

                                    const complementoUID_enReserva = complemento.complementoUID
                                    const complementoUI = complemento.complementoUI
                                    const precio = complemento.precio
                                    const definicion = complemento.definicion
                                    const apartamentoUI = complemento.apartamentoUI
                                    const apartamentoIDV = complemento.apartamentoIDV

                                    const tipoPrecio = complemento.tipoPrecio

                                    const noches = complemento.noches
                                    const total = complemento.total

                                    const contenedorApartamento_selector = porComplemento_renderizado.querySelector(`[contenedorApartamento=${apartamentoIDV}]`)
                                    if (!contenedorApartamento_selector) {
                                        const contenedorApartamentosComplementos = document.createElement("div")
                                        contenedorApartamentosComplementos.setAttribute("contenedorApartamento", apartamentoIDV)
                                        contenedorApartamentosComplementos.classList.add(
                                            "flexVertical",
                                            "backgroundGrey1",
                                            "padding6",
                                            "gap6",
                                            "borderRadius18"
                                        )

                                        const titulo = document.createElement("p")
                                        titulo.classList.add("negrita", "padding14")
                                        titulo.textContent = apartamentoUI
                                        contenedorApartamentosComplementos.appendChild(titulo)

                                        porComplemento_renderizado.appendChild(contenedorApartamentosComplementos);
                                    }
                                    const contenedorApartamento_renderizado = porComplemento_renderizado.querySelector(`[contenedorApartamento=${apartamentoIDV}]`)
                                    const complementosRenderizados = contenedorApartamento_renderizado.querySelectorAll("[complementoUID]")

                                    const contenedorComplemento_selector = porComplemento_renderizado.querySelector(`[complementoUID="${complementoUID_enReserva}"]`)
                                    if (!contenedorComplemento_selector) {
                                        const contenedorServicio = document.createElement("div")
                                        contenedorServicio.setAttribute("complementoUID", complementoUID_enReserva)

                                        if (posicion < complementosRenderizados.length) {
                                            const elementosArray = Array.from(complementosRenderizados);
                                            contenedorApartamento_renderizado.insertBefore(contenedorServicio, elementosArray[posicion]);
                                        } else {
                                            contenedorApartamento_renderizado.appendChild(contenedorServicio);
                                        }


                                        const complementoUI_ = document.createElement("div")
                                        complementoUI_.setAttribute("complementoUID_enReserva", complementoUID_enReserva)
                                        complementoUI_.classList.add(
                                            "flexVertical",
                                            "padding14",
                                            "borderGrey1",
                                            "borderRadius14"
                                        )
                                        contenedorServicio.appendChild(complementoUI_)

                                        const contenedorData = document.createElement("div")
                                        contenedorData.classList.add(
                                            "flexVertical",
                                            "gap6",
                                            // "padding10"
                                        )
                                        complementoUI_.appendChild(contenedorData)

                                        const contenedorNombrePublico = document.createElement("div")
                                        contenedorNombrePublico.classList.add(
                                            "flexVertical",
                                        )
                                        contenedorData.appendChild(contenedorNombrePublico)

                                        const tituluNombrePublico = document.createElement("p")
                                        tituluNombrePublico.textContent = `Nombre del complemento de alojamiento`
                                        // contenedorNombrePublico.appendChild(tituluNombrePublico)

                                        const titulo = document.createElement("p")
                                        titulo.classList.add(
                                            "negrita")
                                        titulo.textContent = complementoUI
                                        contenedorNombrePublico.appendChild(titulo)


                                        const precioContructor = (data) => {
                                            const precio = data.precio
                                            const tipoPrecio = data.tipoPrecio
                                            const noches = data.noches
                                            const total = data.total

                                            const nochesUI = noches === "1" ? "noche" : "noches"
                                            if (tipoPrecio === "porNoche") {
                                                return `Total: ${total}$ (${noches} ${nochesUI}, precio por noche ${precio}$)`

                                            } else if (tipoPrecio === "fijoPorReserva") {
                                                return `Total: ${precio}$`
                                            }
                                        }

                                        const precioUI = document.createElement("p")
                                        precioUI.classList.add(
                                            "negrita"
                                        )
                                        precioUI.textContent = precioContructor({
                                            precio, tipoPrecio, noches, total
                                        })
                                        contenedorData.appendChild(precioUI)

                                        const definicionUI = document.createElement("p")
                                        definicionUI.classList.add(
                                        )
                                        definicionUI.textContent = definicion
                                        contenedorData.appendChild(definicionUI)

                                    }
                                    posicion++
                                }

                                const contenedoresVacios = porComplemento_renderizado.querySelectorAll(`[contenedorApartamento]`)
                                contenedoresVacios.forEach((cv) => {
                                    const complementosDelAlojamiento = cv.querySelectorAll("[complementouid_enreserva]")
                                    if (complementosDelAlojamiento.length === 0) {
                                        cv?.remove()
                                    }
                                })
                            },
                            totales: (data) => {
                                const destino = data.destino
                                const totales = data.totales
                                const instanciaUID = data.instanciaUID

                                const totalNeto = totales?.totalNeto
                                const totalFinal = totales?.totalFinal
                                const totalDescuento = totales?.totalDescuento
                                const impuestosAplicados = totales?.impuestosAplicados
                                const totalNetoConDescuentos = totales?.totalNetoConDescuentos || totalNeto

                                const contenedorTotales_selector = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=complementosDelAlojamientos] [contenedor=data]").querySelector("[contenedor=totales]")
                                if (!contenedorTotales_selector) {

                                    const totalesUI = document.createElement("div")
                                    totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                                    totalesUI.setAttribute("contenedor", "totales")
                                    totalesUI.setAttribute("componente", "plegable")
                                    document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=complementosDelAlojamientos] [contenedor=data]").appendChild(totalesUI)

                                    const totalesUITituloBloque = document.createElement("div")
                                    totalesUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                                    totalesUITituloBloque.textContent = "Totales de los complementos de alojamiento en la reserva (Solo complementos de alojamiento)"
                                    totalesUI.appendChild(totalesUITituloBloque)

                                }

                                const contenedorTotales_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=complementosDelAlojamientos] [contenedor=data]").querySelector("[contenedor=totales]")

                                const contenedorTotalesNeto_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")
                                if (!contenedorTotalesNeto_selector) {
                                    const contenedorTotalesNeto = document.createElement("div")
                                    contenedorTotalesNeto.setAttribute("contenedor", "totalesNeto")
                                    contenedorTotalesNeto.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorTotalNetoUI = document.createElement("div")
                                    contenedorTotalNetoUI.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalReservaNetoUI = document.createElement("div")

                                    totalReservaNetoUI.textContent = "Total servicios neto"
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI)

                                    const totalReservaNetoUI_ = document.createElement("div")
                                    totalReservaNetoUI_.setAttribute("dato", "totalNeto")
                                    totalReservaNetoUI_.classList.add(
                                        "negrita"
                                    )
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI_)
                                    contenedorTotalesNeto.appendChild(contenedorTotalNetoUI)

                                    contenedorTotales_renderizado.appendChild(contenedorTotalesNeto)

                                }
                                const contenedorTotalesNeto_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")

                                const totalNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNeto]")
                                totalNetoUI.textContent = totalNeto


                                const totalesDescuentos_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalesDescuentos_selector && totalDescuento) {
                                    const contenedorTotalesDescuentos = document.createElement("div")
                                    contenedorTotalesDescuentos.setAttribute("contenedor", "totalDescuentos")
                                    contenedorTotalesDescuentos.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesDescuentos)

                                    const contenedorTotalDescuentosAplicados = document.createElement("div")
                                    contenedorTotalDescuentosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalDescuentosAplicadosUI = document.createElement("div")

                                    totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas exclusivamente a los servicios"
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI)

                                    const totalDescuentosAplicadosUI_ = document.createElement("div")
                                    totalDescuentosAplicadosUI_.classList.add("negrita")
                                    totalDescuentosAplicadosUI_.setAttribute("dato", "totalConDescuentoAplicado")
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalDescuentosAplicados)

                                    const contenedorTotalNetoConDescuentos = document.createElement("div")
                                    contenedorTotalNetoConDescuentos.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalNetoConDescuentosUI = document.createElement("div")

                                    totalNetoConDescuentosUI.textContent = "Total neto con descuentos aplicados"
                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI)

                                    const totalNetoConDescuentosUI_ = document.createElement("div")
                                    totalNetoConDescuentosUI_.classList.add("negrita")
                                    totalNetoConDescuentosUI_.setAttribute("dato", "totalNetoConDescuentos")

                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalNetoConDescuentos)

                                }
                                const totalesDescuentos_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalDescuento) {
                                    totalesDescuentos_renderizado?.remove()
                                } else {
                                    const totalConDescuentosAplicadosUI = totalesDescuentos_renderizado.querySelector("[dato=totalConDescuentoAplicado]")
                                    totalConDescuentosAplicadosUI.textContent = totalDescuento

                                    const totalConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                                    totalConDescuentosUI.textContent = totalNetoConDescuentos
                                }

                                const contenedorTotalesFinal_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")
                                if (!contenedorTotalesFinal_selector) {

                                    const contenedorTotalesFinal = document.createElement("div")
                                    contenedorTotalesFinal.setAttribute("contenedor", "totalesFinal")
                                    contenedorTotalesFinal.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesFinal)
                                    const contenedorTotalImpuestosAplicados = document.createElement("div")
                                    contenedorTotalImpuestosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalImpuestosUI = document.createElement("div")

                                    totalImpuestosUI.textContent = "Total impuestos aplicados exclusivamente a los servicios"
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI)

                                    const totalImpuestosUI_ = document.createElement("div")
                                    totalImpuestosUI_.classList.add("negrita")
                                    totalImpuestosUI_.setAttribute("dato", "impuestosAplicados")
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI_)

                                    contenedorTotalesFinal.appendChild(contenedorTotalImpuestosAplicados)

                                    const contenedorTotalFinal = document.createElement("div")
                                    contenedorTotalFinal.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalConImpuestosUI = document.createElement("div")
                                    totalConImpuestosUI.textContent = "Total final de los complementos de alojamiento"
                                    contenedorTotalFinal.appendChild(totalConImpuestosUI)

                                    const totalConImpuestosUI_ = document.createElement("div")
                                    totalConImpuestosUI_.classList.add("negrita")
                                    totalConImpuestosUI_.setAttribute("dato", "totalFinal")

                                    contenedorTotalFinal.appendChild(totalConImpuestosUI_)
                                    contenedorTotalesFinal.appendChild(contenedorTotalFinal)
                                }
                                const contenedorTotalesFinal_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")


                                const impuestosAplicadosUI = contenedorTotalesFinal_renderizado.querySelector("[dato=impuestosAplicados]")
                                impuestosAplicadosUI.textContent = impuestosAplicados

                                const totalFinalUI = contenedorTotalesFinal_renderizado.querySelector("[dato=totalFinal]")
                                totalFinalUI.textContent = totalFinal

                            },

                        },
                        servicios: {
                            contenedor: (data) => {
                                const destino = data.destino
                                const desglosePorServicios = data.desglosePorServicios
                                const modoUI = data.modoUI

                                if (desglosePorServicios.length === 0 && modoUI === "plaza") {
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio]")?.remove()
                                    return
                                }

                                const selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio]")
                                if (!selector) {
                                    const contenedorPlegable = document.createElement('details');
                                    contenedorPlegable.classList.add("contenedorEntidad")
                                    contenedorPlegable.setAttribute("entidad", "servicio")

                                    const tituloContenedorPlegable = document.createElement('summary');
                                    tituloContenedorPlegable.classList.add(
                                        "padding12",
                                    )
                                    tituloContenedorPlegable.textContent = 'Servicios';
                                    contenedorPlegable.appendChild(tituloContenedorPlegable)

                                    const contenedor = document.createElement("div")
                                    contenedor.setAttribute("contenedor", "data")
                                    contenedorPlegable.appendChild(contenedor)

                                    document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedorPlegable)
                                }
                            },
                            porServicio: (data) => {
                                const destino = data.destino
                                const desglosePorServicios = data.desglosePorServicios


                                const porServicio_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio] [contenedor=data]").querySelector("[contenedor=porServicio]")
                                if (!porServicio_selector) {
                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add(
                                        "padding6",
                                        "flexVertical",
                                        "gap6"
                                    )
                                    contenedor.setAttribute("contenedor", "porServicio")
                                    contenedor.setAttribute("componente", "plegable")

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                        "padding6"
                                    )
                                    tituloContendor.textContent = "Desglose por servicio"
                                    contenedor.appendChild(tituloContendor)
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio] [contenedor=data]").appendChild(contenedor)

                                }
                                const porServicio_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[entidad=servicio] [contenedor=data]").querySelector("[contenedor=porServicio]")

                                const serviciosUID_Renderizados = []
                                const serviciosUI_Renderizados = porServicio_renderizado.querySelectorAll("[servicioUID]")

                                serviciosUI_Renderizados.forEach(servicio => {
                                    serviciosUID_Renderizados.push(servicio.servicioUID)
                                });

                                serviciosUI_Renderizados.forEach((servicioUI) => {
                                    const servicioUID = servicioUI.getAttribute("servicioUID")
                                    if (!serviciosUID_Renderizados.includes(servicioUID)) {
                                        servicioUI?.remove()
                                    }
                                })

                                const numeroServiciosPorRenderizad = desglosePorServicios.length
                                if (numeroServiciosPorRenderizad === 0) {
                                    const info_selector = porServicio_renderizado.querySelector("[componente=titulo]")
                                    if (!info_selector) {
                                        const info = document.createElement("p")
                                        info.setAttribute("componente", "titulo")
                                        info.textContent = "No hay servicios seleccionados"
                                        info.classList.add("textoCentrado")
                                        porServicio_renderizado.appendChild(info)
                                    }
                                }

                                let posicion = 0

                                for (const contenedorServicio of desglosePorServicios) {

                                    const servicio = contenedorServicio.servicio
                                    const opcionesSolicitadasDelservicios = contenedorServicio.opcionesSolicitadasDelservicios

                                    const servicioUID_enReserva = servicio.servicioUID
                                    const serviciosRenderizados = porServicio_renderizado.querySelectorAll("[servicioUID]")

                                    const contenedorServicio_selector = porServicio_renderizado.querySelector(`[servicioUID="${servicioUID_enReserva}"]`)
                                    if (!contenedorServicio_selector) {
                                        const contenedorServicio = document.createElement("div")
                                        contenedorServicio.setAttribute("servicioUID", servicioUID_enReserva)

                                        const nombreInterno = servicio.nombre
                                        const contenedor = servicio.contenedor

                                        const definicion = contenedor.definicion
                                        const fechaFinal = contenedor.fechaFinal
                                        const duracionIDV = contenedor.duracionIDV
                                        const fechaInicio = contenedor.fechaInicio
                                        const tituloPublico = contenedor.tituloPublico
                                        const disponibilidadIDV = contenedor.disponibilidadIDV
                                        const gruposDeOpciones = contenedor.gruposDeOpciones



                                        const diccionario = {
                                            disponibilidad: {
                                                constante: "Disponible",
                                                variable: "Disponibilidad variable"
                                            }
                                        }
                                        if (posicion < serviciosRenderizados.length) {
                                            const elementosArray = Array.from(serviciosRenderizados);
                                            porServicio_renderizado.insertBefore(contenedorServicio, elementosArray[posicion]);
                                        } else {
                                            porServicio_renderizado.appendChild(contenedorServicio);
                                        }


                                        const servicioUI = document.createElement("div")
                                        servicioUI.setAttribute("servicioUID_enReserva", servicioUID_enReserva)
                                        servicioUI.classList.add(
                                            "flexVertical",
                                            "backgroundGrey1",
                                            "borderRadius18",
                                            "gap6", "padding6"
                                        )
                                        const contenedorData = document.createElement("div")
                                        contenedorData.classList.add(
                                            "flexVertical",
                                            "gap6",
                                            "padding14"
                                        )
                                        servicioUI.appendChild(contenedorData)

                                        if (nombreInterno) {
                                            const contenedorNombreInterno = document.createElement("div")
                                            contenedorNombreInterno.classList.add(
                                                "flexVertical",
                                            )
                                            contenedorData.appendChild(contenedorNombreInterno)

                                            const tituluNombreInternoUI = document.createElement("p")
                                            tituluNombreInternoUI.textContent = `Nombre adminitrativo`
                                            contenedorNombreInterno.appendChild(tituluNombreInternoUI)

                                            const nombreInternoUI = document.createElement("p")
                                            nombreInternoUI.classList.add(
                                                "negrita")
                                            nombreInternoUI.textContent = `${nombreInterno}`
                                            contenedorNombreInterno.appendChild(nombreInternoUI)
                                        }


                                        const contenedorNombrePublico = document.createElement("div")
                                        contenedorNombrePublico.classList.add(
                                            "flexVertical",
                                        )
                                        contenedorData.appendChild(contenedorNombrePublico)

                                        const tituluNombrePublico = document.createElement("p")
                                        tituluNombrePublico.textContent = `Nombre público`
                                        contenedorNombrePublico.appendChild(tituluNombrePublico)

                                        const titulo = document.createElement("p")
                                        titulo.classList.add(
                                            "negrita")
                                        titulo.textContent = tituloPublico
                                        contenedorNombrePublico.appendChild(titulo)


                                        const disponibilidadUI = document.createElement("p")
                                        disponibilidadUI.classList.add(
                                        )
                                        disponibilidadUI.textContent = diccionario.disponibilidad[disponibilidadIDV]
                                        contenedorData.appendChild(disponibilidadUI)


                                        if (disponibilidadIDV === "variable") {

                                            const info = document.createElement("p")
                                            info.classList.add(
                                            )
                                            info.textContent = `Este servicio tiene una disponibilidad limitada. Es por eso que si selecciona este servicio, nos pondremos en contacto con el titular de la reserva en las próximas horas para confirmarle la disponibilidad del servicio para su reserva.`
                                            contenedorData.appendChild(info)
                                        }

                                        // const precioUI = document.createElement("p")
                                        // precioUI.classList.add(
                                        //     "negrita"
                                        // )
                                        // precioUI.textContent = precio + "$"
                                        // contenedorData.appendChild(precioUI)

                                        if (duracionIDV === "rango") {
                                            const contenedorDuracion = document.createElement("div")
                                            contenedorDuracion.classList.add(
                                                "flexVertical",

                                            )
                                            contenedorData.appendChild(contenedorDuracion)

                                            const info = document.createElement("p")
                                            info.classList.add("negrita")
                                            info.textContent = `Servicio disponible solo desde ${fechaInicio} hata ${fechaFinal}. Ambas fechas incluidas.`
                                            contenedorDuracion.appendChild(info)

                                        }
                                        const definicionUI = document.createElement("p")
                                        definicionUI.classList.add(
                                        )
                                        definicionUI.textContent = definicion
                                        contenedorData.appendChild(definicionUI)


                                        Object.entries(gruposDeOpciones).forEach(([grupoIDV, gDP]) => {
                                            const nombreGrupo = gDP.nombreGrupo
                                            const opcionesGrupo = gDP.opcionesGrupo

                                            const contenedorGrupo = document.createElement("div")
                                            contenedorGrupo.setAttribute("grupoIDV", grupoIDV)
                                            contenedorGrupo.classList.add(
                                                "flexVertical", "gap6", "borderGrey1", "borderRadius14", "padding6"
                                            )

                                            const tituloGrupo = document.createElement("p")
                                            tituloGrupo.classList.add("negrita", "padding10")
                                            tituloGrupo.textContent = nombreGrupo
                                            contenedorGrupo.appendChild(tituloGrupo)


                                            const contenedorOpcionesGrupo = document.createElement("div")
                                            contenedorOpcionesGrupo.classList.add(
                                                "flexVertical", "gap6"
                                            )
                                            contenedorGrupo.appendChild(contenedorOpcionesGrupo)

                                            opcionesGrupo.forEach((op) => {
                                                const opcionIDV = op.opcionIDV
                                                const nombreOpcion = op.nombreOpcion
                                                const precioOpcion = op.precioOpcion ? op.precioOpcion + "$" : "0.00$ (Sin coste añadido)"

                                                const selectorOpcionesGrupo = opcionesSolicitadasDelservicios.opcionesSeleccionadas[grupoIDV] || []
                                                if (selectorOpcionesGrupo.includes(opcionIDV)) {
                                                    const contenedorOpcion = document.createElement("div")
                                                    contenedorOpcion.classList.add(
                                                        "flexVertical", "gap6", "backgroundGrey1", "borderRadius10", "padding14"
                                                    )
                                                    contenedorOpcionesGrupo.appendChild(contenedorOpcion)

                                                    const grupoRenderizado_selector = contenedorData.querySelector(`[grupoIDV="${grupoIDV}"]`)
                                                    if (!grupoRenderizado_selector) {
                                                        servicioUI.appendChild(contenedorGrupo)
                                                    }

                                                    const opcionUI = document.createElement("p")
                                                    opcionUI.setAttribute("opcionIDV", opcionIDV)

                                                    opcionUI.textContent = nombreOpcion
                                                    contenedorOpcion.appendChild(opcionUI)


                                                    const precioUI = document.createElement("p")
                                                    precioUI.setAttribute("opcionIDV", opcionIDV)
                                                    precioUI.classList.add(
                                                        "textoNegrita"
                                                    )
                                                    precioUI.textContent = precioOpcion
                                                    contenedorOpcion.appendChild(precioUI)
                                                }
                                            })

                                        })

                                        contenedorServicio.appendChild(servicioUI)
                                    }
                                    posicion++










                                }

                            },
                            totales: (data) => {
                                const destino = data.destino
                                const totales = data.totales
                                const instanciaUID = data.instanciaUID

                                const totalNeto = totales?.totalNeto
                                const totalFinal = totales?.totalFinal
                                const totalDescuento = totales?.totalDescuento
                                const impuestosAplicados = totales?.impuestosAplicados
                                const totalNetoConDescuentos = totales?.totalNetoConDescuentos || totalNeto

                                const contenedorTotales_selector = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=servicio] [contenedor=data]").querySelector("[contenedor=totales]")
                                if (!contenedorTotales_selector) {

                                    const totalesUI = document.createElement("div")
                                    totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                                    totalesUI.setAttribute("contenedor", "totales")
                                    totalesUI.setAttribute("componente", "plegable")
                                    document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=servicio] [contenedor=data]").appendChild(totalesUI)

                                    const totalesUITituloBloque = document.createElement("div")
                                    totalesUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                                    totalesUITituloBloque.textContent = "Totales de los servicios en la reserva (Solo servicios)"
                                    totalesUI.appendChild(totalesUITituloBloque)

                                }

                                const contenedorTotales_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero] [entidad=servicio] [contenedor=data]").querySelector("[contenedor=totales]")

                                const contenedorTotalesNeto_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")
                                if (!contenedorTotalesNeto_selector) {
                                    const contenedorTotalesNeto = document.createElement("div")
                                    contenedorTotalesNeto.setAttribute("contenedor", "totalesNeto")
                                    contenedorTotalesNeto.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorTotalNetoUI = document.createElement("div")
                                    contenedorTotalNetoUI.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalReservaNetoUI = document.createElement("div")

                                    totalReservaNetoUI.textContent = "Total servicios neto"
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI)

                                    const totalReservaNetoUI_ = document.createElement("div")
                                    totalReservaNetoUI_.setAttribute("dato", "totalNeto")
                                    totalReservaNetoUI_.classList.add(
                                        "negrita"
                                    )
                                    contenedorTotalNetoUI.appendChild(totalReservaNetoUI_)
                                    contenedorTotalesNeto.appendChild(contenedorTotalNetoUI)

                                    contenedorTotales_renderizado.appendChild(contenedorTotalesNeto)

                                }
                                const contenedorTotalesNeto_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")

                                const totalNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNeto]")
                                totalNetoUI.textContent = totalNeto


                                const totalesDescuentos_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalesDescuentos_selector && totalDescuento) {
                                    const contenedorTotalesDescuentos = document.createElement("div")
                                    contenedorTotalesDescuentos.setAttribute("contenedor", "totalDescuentos")
                                    contenedorTotalesDescuentos.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesDescuentos)

                                    const contenedorTotalDescuentosAplicados = document.createElement("div")
                                    contenedorTotalDescuentosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalDescuentosAplicadosUI = document.createElement("div")

                                    totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas exclusivamente a los servicios"
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI)

                                    const totalDescuentosAplicadosUI_ = document.createElement("div")
                                    totalDescuentosAplicadosUI_.classList.add("negrita")
                                    totalDescuentosAplicadosUI_.setAttribute("dato", "totalConDescuentoAplicado")
                                    contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalDescuentosAplicados)

                                    const contenedorTotalNetoConDescuentos = document.createElement("div")
                                    contenedorTotalNetoConDescuentos.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalNetoConDescuentosUI = document.createElement("div")

                                    totalNetoConDescuentosUI.textContent = "Total neto con descuentos aplicados"
                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI)

                                    const totalNetoConDescuentosUI_ = document.createElement("div")
                                    totalNetoConDescuentosUI_.classList.add("negrita")
                                    totalNetoConDescuentosUI_.setAttribute("dato", "totalNetoConDescuentos")

                                    contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI_)
                                    contenedorTotalesDescuentos.appendChild(contenedorTotalNetoConDescuentos)

                                }
                                const totalesDescuentos_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                                if (!totalDescuento) {
                                    totalesDescuentos_renderizado?.remove()
                                } else {
                                    const totalConDescuentosAplicadosUI = totalesDescuentos_renderizado.querySelector("[dato=totalConDescuentoAplicado]")
                                    totalConDescuentosAplicadosUI.textContent = totalDescuento

                                    const totalConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                                    totalConDescuentosUI.textContent = totalNetoConDescuentos
                                }

                                const contenedorTotalesFinal_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")
                                if (!contenedorTotalesFinal_selector) {

                                    const contenedorTotalesFinal = document.createElement("div")
                                    contenedorTotalesFinal.setAttribute("contenedor", "totalesFinal")
                                    contenedorTotalesFinal.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    contenedorTotales_renderizado.appendChild(contenedorTotalesFinal)
                                    const contenedorTotalImpuestosAplicados = document.createElement("div")
                                    contenedorTotalImpuestosAplicados.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalImpuestosUI = document.createElement("div")

                                    totalImpuestosUI.textContent = "Total impuestos aplicados exclusivamente a los servicios"
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI)

                                    const totalImpuestosUI_ = document.createElement("div")
                                    totalImpuestosUI_.classList.add("negrita")
                                    totalImpuestosUI_.setAttribute("dato", "impuestosAplicados")
                                    contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI_)

                                    contenedorTotalesFinal.appendChild(contenedorTotalImpuestosAplicados)

                                    const contenedorTotalFinal = document.createElement("div")
                                    contenedorTotalFinal.classList.add(
                                        "flexVertical",
                                        "padding6"
                                    )

                                    const totalConImpuestosUI = document.createElement("div")
                                    totalConImpuestosUI.textContent = "Total final de los servicios"
                                    contenedorTotalFinal.appendChild(totalConImpuestosUI)

                                    const totalConImpuestosUI_ = document.createElement("div")
                                    totalConImpuestosUI_.classList.add("negrita")
                                    totalConImpuestosUI_.setAttribute("dato", "totalFinal")

                                    contenedorTotalFinal.appendChild(totalConImpuestosUI_)
                                    contenedorTotalesFinal.appendChild(contenedorTotalFinal)
                                }
                                const contenedorTotalesFinal_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")


                                const impuestosAplicadosUI = contenedorTotalesFinal_renderizado.querySelector("[dato=impuestosAplicados]")
                                impuestosAplicadosUI.textContent = impuestosAplicados

                                const totalFinalUI = contenedorTotalesFinal_renderizado.querySelector("[dato=totalFinal]")
                                totalFinalUI.textContent = totalFinal

                            },

                        }

                    },
                    ofertas: {
                        hub: function (data) {
                            const destino = data.destino
                            const instanciaUID = data.instanciaUID
                            const contenedorOfertas = data.contenedorOfertas
                            const ofertas = contenedorOfertas.ofertas
                            const porTotal = contenedorOfertas.entidades.reserva.desgloses.porTotal
                            const entidades = contenedorOfertas.entidades


                            this.ofertaUI({
                                destino,
                                ofertas,
                                porTotal,
                                entidades,
                                instanciaUID

                            })
                        },
                        ofertaUI: function (data) {

                            const destino = data.destino
                            const ofertas = data.ofertas
                            const ofertasPorCondicion = ofertas.porCondicion
                            const ofertasPorAdministrador = ofertas.porAdministrador
                            const porTotal = data.porTotal
                            const entidades = data.entidades

                            const ofertasPorCondicionArray = Object.keys(ofertasPorCondicion)
                            const ofertasPorAdministradorArray = Object.keys(ofertasPorAdministrador)
                            const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                            const modoUI = contenedorFinanciero.getAttribute("modoUI")
                            const instanciaUID = data.instanciaUID

                            if (ofertasPorCondicionArray.length === 0
                                &&
                                ofertasPorAdministradorArray.length === 0
                                && modoUI === "plaza") {
                                document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=ofertas]")?.remove()
                                return
                            }

                            const contenedorOfertas_selector = contenedorFinanciero.querySelector("[contenedor=ofertas]")
                            if (!contenedorOfertas_selector) {
                                const contenedorPlegable = document.createElement("details")
                                contenedorPlegable.classList.add("contenedorOfertas")
                                contenedorPlegable.setAttribute("contenedor", "ofertas")
                                contenedorPlegable.setAttribute("componente", "plegable")
                                contenedorPlegable.classList.add(
                                    "flexVertical",
                                    "gap6",

                                )
                                contenedorFinanciero.appendChild(contenedorPlegable)

                                const tituloContendor = document.createElement("summary")
                                tituloContendor.classList.add(
                                    "padding12",
                                )
                                tituloContendor.textContent = "Ofertas aplicadas"
                                contenedorPlegable.appendChild(tituloContendor)

                                const contenedor = document.createElement("div")
                                contenedor.setAttribute("contenedor", "data")
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "padding6"
                                )
                                contenedorPlegable.appendChild(contenedor)

                                if (modoUI === "administracion") {
                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6"
                                    )

                                    const botonInsertarDescuento = document.createElement("div")
                                    botonInsertarDescuento.classList.add(
                                        "botonV3",
                                        "comportamientoBoton"
                                    )
                                    botonInsertarDescuento.textContent = "Insertar descuento"
                                    botonInsertarDescuento.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.insertarDescuentos.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    contenedorBotones.appendChild(botonInsertarDescuento)
                                    contenedor.appendChild(contenedorBotones)

                                    const botonDescuentosCompatibles = document.createElement("div")
                                    botonDescuentosCompatibles.classList.add(
                                        "botonV3",
                                        "comportamientoBoton"
                                    )
                                    botonDescuentosCompatibles.textContent = "Descuentos compatibles"
                                    botonDescuentosCompatibles.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.insertarOfertasCompatibles.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    contenedorBotones.appendChild(botonDescuentosCompatibles)
                                    contenedor.appendChild(contenedorBotones)
                                }
                                if (modoUI === "simulador") {
                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6",
                                    )

                                    const botonInsertarDescuento = document.createElement("div")
                                    botonInsertarDescuento.classList.add(
                                        "botonV3",
                                        "comportamientoBoton"
                                    )
                                    botonInsertarDescuento.textContent = "Insertar descuento"
                                    botonInsertarDescuento.addEventListener("click", () => {
                                        casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.insertarDescuentos.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    contenedorBotones.appendChild(botonInsertarDescuento)
                                    contenedor.appendChild(contenedorBotones)

                                    const botonDescuentosCompatibles = document.createElement("div")
                                    botonDescuentosCompatibles.classList.add(
                                        "botonV3",
                                        "comportamientoBoton"
                                    )
                                    botonDescuentosCompatibles.textContent = "Descuentos compatibles"
                                    botonDescuentosCompatibles.addEventListener("click", () => {
                                        casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.insertarOfertasCompatibles.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    contenedorBotones.appendChild(botonDescuentosCompatibles)
                                    contenedor.appendChild(contenedorBotones)
                                }






                            }
                            const contenedorListaOfertas_selector = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                .querySelector("[contenedor=ofertas]")
                                .querySelector("[contenedor=data]")
                                .querySelector("[contenedor=listaOfertas]")

                            if (!contenedorListaOfertas_selector) {

                                const contenedorOfertasRenderizado = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")


                                const contenedorListaOfertas = document.createElement("div")
                                contenedorListaOfertas.setAttribute("contenedor", "listaOfertas")
                                contenedorListaOfertas.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorOfertasRenderizado.appendChild(contenedorListaOfertas)

                            }

                            const contenedorListaOfertas_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                .querySelector("[contenedor=ofertas]")
                                .querySelector("[contenedor=data]")
                                .querySelector("[contenedor=listaOfertas]")


                            this.componentesUI.utilidades.limpiarOfertasObsoletas({
                                contenedores: ofertasPorCondicion,
                                origen: "porCondicion",
                                destino
                            })

                            this.componentesUI.utilidades.limpiarOfertasObsoletas({
                                contenedores: ofertasPorAdministrador,
                                origen: "porAdministrador",
                                destino
                            })

                            if (ofertasPorAdministradorArray.length === 0) {
                                contenedorListaOfertas_renderizado?.querySelector(`[contenedor=porAdministrador]`)?.remove()
                            }

                            if (ofertasPorCondicionArray.length === 0) {
                                contenedorListaOfertas_renderizado?.querySelector(`[contenedor=porCondicion]`)?.remove()
                            }
                            if (ofertasPorAdministradorArray.length === 0
                                &&
                                ofertasPorCondicionArray.length === 0
                            ) {
                                document.querySelector(destino).querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    ?.querySelector("[contenedor=listaOfertas]")?.remove()
                            }
                            ofertasPorCondicion.forEach((contenedorOferta, posicion) => {

                                const selectorContenedorPorCondicion = contenedorListaOfertas_renderizado.querySelector(`[contenedor=porCondicion]`)
                                if (!selectorContenedorPorCondicion) {
                                    const contenedorPorCondicion = document.createElement("div")
                                    contenedorPorCondicion.setAttribute("contenedor", "porCondicion")
                                    contenedorPorCondicion.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6",
                                        "borderGrey1",
                                        "borderRadius12"
                                    )

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                    )
                                    tituloContendor.textContent = "Ofertas aplicadas por condición"
                                    contenedorPorCondicion.appendChild(tituloContendor)
                                    contenedorListaOfertas_renderizado.appendChild(contenedorPorCondicion)
                                }

                                this.componentesUI.globalUI({
                                    destino,
                                    destinoOrigenOferta: "porCondicion",
                                    contenedorOferta,
                                    posicion
                                })

                                this.componentesUI.condicionesUI({
                                    destino,
                                    contenedorOferta,
                                    destinoOrigenOferta: "porCondicion"
                                })

                                this.componentesUI.descuentosUI({
                                    destino,
                                    destinoOrigenOferta: "porCondicion",
                                    contenedorOferta
                                })
                            })

                            ofertasPorAdministrador.forEach((contenedorOferta, posicion) => {

                                const selectorContenedorPorAdministrador = contenedorListaOfertas_renderizado?.querySelector(`[contenedor=porAdministrador]`)
                                if (!selectorContenedorPorAdministrador) {
                                    const contenedorPorAdministrador = document.createElement("div")
                                    contenedorPorAdministrador.setAttribute("contenedor", "porAdministrador")
                                    contenedorPorAdministrador.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6",
                                        "borderGrey1",
                                        "borderRadius12"
                                    )

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "textoCentrado",
                                    )
                                    tituloContendor.textContent = "Ofertas aplicadas por administrador"
                                    contenedorPorAdministrador.appendChild(tituloContendor)
                                    contenedorListaOfertas_renderizado.appendChild(contenedorPorAdministrador)
                                }

                                this.componentesUI.globalUI({
                                    destino,
                                    destinoOrigenOferta: "porAdministrador",
                                    contenedorOferta,
                                    posicion
                                })

                                this.componentesUI.condicionesUI({
                                    destino,
                                    contenedorOferta,
                                    destinoOrigenOferta: "porAdministrador"
                                })

                                this.componentesUI.descuentosUI({
                                    destino,
                                    destinoOrigenOferta: "porAdministrador",
                                    contenedorOferta
                                })
                            })

                            this.porTotal({
                                destino,
                                porTotal
                            })

                            this.entidades.hub({
                                destino,
                                entidades
                            })
                        },

                        componentesUI: {
                            globalUI: function (data) {

                                const destino = data.destino
                                const destinoOrigenOferta = data.destinoOrigenOferta
                                const posicion = data?.posicion + 1

                                const contenedorOferta = data.contenedorOferta
                                const oferta = contenedorOferta.oferta

                                const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")

                                const modoUI = contenedorFinanciero.getAttribute("modoUI")
                                const autorizacion = contenedorOferta?.autorizacion
                                const ofertaUID = oferta.ofertaUID


                                const entidadIDV = oferta.entidadIDV
                                const fechaFinal = oferta.fechaFinal
                                const fechaInicio = oferta.fechaInicio
                                const nombreOferta = oferta.nombreOferta


                                const autorizacionUI = (autorizacion) => {
                                    if (autorizacion === "aceptada") {
                                        return "Aceptada"
                                    } else if (autorizacion === "rechazada") {
                                        return "Rechazada"
                                    }
                                }

                                const entidadUI_ = (entidadIDV) => {
                                    if (entidadIDV === "reserva") {
                                        return "Reserva"
                                    }
                                }

                                const contenedorOfertaUI_selector = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"][posicion="${posicion}"]`)


                                if (!contenedorOfertaUI_selector) {



                                    const contenedorOfertaUI = document.createElement("div")
                                    contenedorOfertaUI.classList.add("contenedorOfertaUI")
                                    contenedorOfertaUI.setAttribute("ofertaUID", ofertaUID)
                                    contenedorOfertaUI.setAttribute("posicion", posicion)
                                    contenedorOfertaUI.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6",
                                        "borderGrey1",
                                        "borderRadius10"
                                    )
                                    document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=ofertas] [contenedor=data]")
                                        .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                        .appendChild(contenedorOfertaUI)

                                    const contenedorGlobalOferta = document.createElement("div")
                                    contenedorGlobalOferta.classList.add(
                                        "flexVertical",
                                        "gap6"
                                    )
                                    contenedorOfertaUI.appendChild(contenedorGlobalOferta)


                                    const nombreOfertaUI = document.createElement("div")
                                    nombreOfertaUI.setAttribute("dato", "nombre")

                                    nombreOfertaUI.classList.add(
                                        "negrita",
                                        "padding6"
                                    )

                                    contenedorGlobalOferta.appendChild(nombreOfertaUI)


                                    const contenedorUID = document.createElement("div")
                                    contenedorUID.classList.add(
                                        "padding6"
                                    )

                                    const tituloUID = document.createElement("div")
                                    tituloUID.textContent = "UID"
                                    contenedorUID.appendChild(tituloUID)

                                    const ofertaUID_UI = document.createElement("div")
                                    ofertaUID_UI.classList.add("negrita")
                                    ofertaUID_UI.setAttribute("dato", "ofertaUID")

                                    contenedorUID.appendChild(ofertaUID_UI)
                                    contenedorGlobalOferta.appendChild(contenedorUID)


                                    const contenedorEntidad = document.createElement("div")
                                    contenedorEntidad.classList.add(
                                        "padding6"
                                    )

                                    const tituloEntidad = document.createElement("div")
                                    tituloEntidad.textContent = "Entidad"
                                    contenedorEntidad.appendChild(tituloEntidad)

                                    const entidadUI = document.createElement("div")
                                    entidadUI.classList.add("negrita")
                                    entidadUI.setAttribute("dato", "entidad")

                                    contenedorEntidad.appendChild(entidadUI)
                                    contenedorGlobalOferta.appendChild(contenedorEntidad)

                                    if (destinoOrigenOferta === "porCondicion") {
                                        const contenedorAutorizacion = document.createElement("div")
                                        contenedorAutorizacion.classList.add(
                                            "padding6"
                                        )
                                        contenedorAutorizacion.setAttribute("contenedor", "autorizacion")

                                        const textoAutorizacion = document.createElement("div")
                                        textoAutorizacion.textContent = "Estado de la autorizacíón"
                                        contenedorAutorizacion.appendChild(textoAutorizacion)


                                        const estadoAutorizacionUI = document.createElement("div")
                                        estadoAutorizacionUI.classList.add("negrita")
                                        estadoAutorizacionUI.setAttribute("dato", "autorizacion")

                                        contenedorAutorizacion.appendChild(estadoAutorizacionUI)
                                        contenedorGlobalOferta.appendChild(contenedorAutorizacion)
                                    }

                                    if (modoUI === "administracion") {
                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6"
                                        )
                                        contenedorGlobalOferta.appendChild(contenedorBotones)


                                        if (destinoOrigenOferta === "porCondicion") {

                                            const botonRechazar = document.createElement("div")
                                            botonRechazar.setAttribute("boton", "autorizacionOferta")
                                            botonRechazar.setAttribute("estadoActual", autorizacion)
                                            botonRechazar.classList.add(
                                                "botonV3",
                                                "comportamientoBoton"
                                            )
                                            if (autorizacion === "aceptada") {
                                                botonRechazar.textContent = "Rechazar oferta"
                                            } else if (autorizacion === "rechazada") {
                                                botonRechazar.textContent = "Aceptar oferta"
                                            }
                                            botonRechazar.addEventListener("click", (e) => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.actualizarEstadoAutorizacion({
                                                    e,
                                                    ofertaUID
                                                })
                                            })
                                            contenedorBotones.appendChild(botonRechazar)
                                            contenedorGlobalOferta.appendChild(contenedorBotones)
                                        }

                                        const botonEliminar = document.createElement("div")
                                        botonEliminar.classList.add(
                                            "botonV3",
                                            "comportamientoBoton"
                                        )
                                        botonEliminar.textContent = "Eliminar oferta de la reserva " + posicion
                                        botonEliminar.addEventListener("click", () => {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.eliminarOfertaEnReserva.ui({
                                                origen: destinoOrigenOferta,
                                                ofertaUID,
                                                posicion,
                                                nombreOferta
                                            })
                                        })
                                        contenedorBotones.appendChild(botonEliminar)
                                    }
                                    if (modoUI === "simulador") {

                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6"
                                        )
                                        contenedorGlobalOferta.appendChild(contenedorBotones)


                                        if (destinoOrigenOferta === "porCondicion") {

                                            const botonRechazar = document.createElement("div")
                                            botonRechazar.setAttribute("boton", "autorizacionOferta")
                                            botonRechazar.setAttribute("estadoActual", autorizacion)
                                            botonRechazar.classList.add(
                                                "botonV3",
                                                "comportamientoBoton"
                                            )
                                            if (autorizacion === "aceptada") {
                                                botonRechazar.textContent = "Rechazar oferta"
                                            } else if (autorizacion === "rechazada") {
                                                botonRechazar.textContent = "Aceptar oferta"
                                            }
                                            botonRechazar.addEventListener("click", (e) => {
                                                casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.actualizarEstadoAutorizacion({
                                                    e,
                                                    ofertaUID
                                                })
                                            })
                                            contenedorBotones.appendChild(botonRechazar)
                                            contenedorGlobalOferta.appendChild(contenedorBotones)
                                        }

                                        const botonEliminar = document.createElement("div")
                                        botonEliminar.classList.add(
                                            "botonV3",
                                            "comportamientoBoton"
                                        )
                                        botonEliminar.textContent = "Eliminar oferta de la reserva " + posicion
                                        botonEliminar.addEventListener("click", () => {
                                            casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.eliminarOfertaEnSimulacion.ui({
                                                origen: destinoOrigenOferta,
                                                ofertaUID,
                                                posicion,
                                                nombreOferta
                                            })
                                        })
                                        contenedorBotones.appendChild(botonEliminar)
                                    }

                                    const contenedorFechas = document.createElement("div")
                                    contenedorFechas.classList.add(
                                        "flexHorizontal",
                                        "flexJustificacion_spacearound",
                                        "borderGrey1",
                                        "padding6",
                                        "borderRadius10"
                                    )

                                    const fechaInicioUI = document.createElement("div")
                                    fechaInicioUI.setAttribute("dato", "fechaInicio")
                                    fechaInicioUI.textContent = fechaInicio
                                    contenedorFechas.appendChild(fechaInicioUI)

                                    const fechaFinalUI = document.createElement("div")
                                    fechaFinalUI.setAttribute("dato", "fechaFinal")
                                    fechaFinalUI.textContent = fechaFinal
                                    contenedorFechas.appendChild(fechaFinalUI)
                                    contenedorGlobalOferta.appendChild(contenedorFechas)
                                    const contenedorDestino = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=ofertas] [contenedor=data]").querySelector(`[contenedor=${destinoOrigenOferta}]`)


                                    this.utilidades.posicionador({
                                        contenedorDestino,
                                        consultaContenedorInternos: "[ofertaUID][posicion]",
                                        nuevoContenedor: contenedorOfertaUI,
                                        posicionDestino: Number(posicion) + 1
                                    })
                                }


                                const contenedorOfertaUI_renderizador = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"][posicion="${posicion}"]`)


                                const nombreOfertaUI = contenedorOfertaUI_renderizador.querySelector("[dato=nombre]")
                                nombreOfertaUI.textContent = nombreOferta


                                const entidadUI = contenedorOfertaUI_renderizador.querySelector("[dato=entidad]")
                                entidadUI.textContent = entidadUI_(entidadIDV)


                                const ofertaUIDUI = contenedorOfertaUI_renderizador.querySelector("[dato=ofertaUID]")
                                ofertaUIDUI.textContent = ofertaUID

                                if (destinoOrigenOferta === "porCondicion") {

                                    const autorizacionUI_ = contenedorOfertaUI_renderizador.querySelector("[dato=autorizacion]")
                                    autorizacionUI_.textContent = autorizacionUI(autorizacion)
                                }

                                const fechaInicioUI = contenedorOfertaUI_renderizador.querySelector("[dato=fechaInicio]")
                                fechaInicioUI.textContent = fechaInicio

                                const fechaFinalUI = contenedorOfertaUI_renderizador.querySelector("[dato=fechaFinal]")
                                fechaFinalUI.textContent = fechaFinal


                            },
                            condicionesUI: function (data) {
                                const contenedorOferta = data.contenedorOferta
                                const oferta = contenedorOferta.oferta
                                const condicionesArray = oferta.condicionesArray
                                const destino = data.destino
                                const ofertaUID = oferta.ofertaUID
                                const destinoOrigenOferta = data.destinoOrigenOferta

                                const contenedorCondiciones_selector = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                    .querySelector("[contenedor=condiciones]")

                                if (!contenedorCondiciones_selector) {
                                    const contenedorCondiciones = document.createElement("div")
                                    contenedorCondiciones.setAttribute("contenedor", "condiciones")
                                    contenedorCondiciones.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "backgroundGrey1",
                                        "padding6",
                                        "borderRadius8"
                                    )

                                    const tituloContendor = document.createElement("div")
                                    tituloContendor.classList.add(
                                        "negrita",
                                        "padding6",

                                    )
                                    tituloContendor.textContent = "Condiciones de la oferta"
                                    contenedorCondiciones.appendChild(tituloContendor)
                                    document.querySelector(destino)
                                        .querySelector("[contenedor=financiero]")
                                        .querySelector("[contenedor=ofertas]")
                                        .querySelector("[contenedor=data]")
                                        .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                        .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                        .appendChild(contenedorCondiciones)

                                }
                                const contenedorCondiciones_renderizado = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                    .querySelector("[contenedor=condiciones]")

                                contenedorCondiciones_renderizado.querySelectorAll("[tipoCondicion]").forEach((contenedorTipoCondicion) => {
                                    contenedorTipoCondicion.remove()
                                })

                                condicionesArray.forEach((condicion) => {
                                    const tipoCondicion = condicion.tipoCondicion



                                    const contenedorCondicion = document.createElement("div")
                                    contenedorCondicion.classList.add("contenedorCondicion")
                                    contenedorCondicion.setAttribute("tipoCondicion", tipoCondicion)
                                    contenedorCondicion.classList.add(
                                        "flexVertical",
                                        "padding6",
                                    )
                                    document.querySelector(destino)
                                        .querySelector("[contenedor=financiero]")
                                        .querySelector("[contenedor=ofertas]")
                                        .querySelector("[contenedor=data]")
                                        .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                        .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                        .querySelector("[contenedor=condiciones]")
                                        .appendChild(contenedorCondicion)

                                    const definicionCondicion = this.definicionCondiciones({
                                        tipoCondicion,
                                        condicion
                                    })
                                    contenedorCondicion.appendChild(definicionCondicion)
                                    contenedorCondiciones_renderizado.appendChild(contenedorCondicion)

                                })
                            },
                            definicionCondiciones: (data) => {
                                const condicion = data.condicion
                                const tipoCondicion = data.tipoCondicion

                                const contenedorCondicion = document.createElement("div")

                                if (tipoCondicion === "conFechaEntradaEntreRango") {
                                    const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO
                                    const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por fecha de entrada"
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)


                                    const descripcionCondicion = document.createElement("div")
                                    descripcionCondicion.textContent = "Esta condición determina que la oferta se aplica cuando la fecha de entrada de la reserva está entre el rango de vigencia de la oferta."
                                    contenedorCondicion.appendChild(descripcionCondicion)

                                    const rangoVigencia = document.createElement("div")
                                    rangoVigencia.textContent = `${fechaInicioRango_ISO} >>> ${fechaFinalRango_ISO}`
                                    contenedorCondicion.appendChild(rangoVigencia)

                                } else if (tipoCondicion === "conFechaSalidaEntreRango") {
                                    const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO
                                    const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por fecha de salida"
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    descripcionCondicion.textContent = "Esta condición determina que la oferta se aplica cuando la fecha de salida de la reserva está entre el rango de especificado en la oferta."
                                    contenedorCondicion.appendChild(descripcionCondicion)

                                    const rangoVigencia = document.createElement("div")
                                    rangoVigencia.textContent = `${fechaInicioRango_ISO} >>> ${fechaFinalRango_ISO}`
                                    contenedorCondicion.appendChild(rangoVigencia)

                                } else if (tipoCondicion === "conFechaCreacionEntreRango") {
                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por fecha de creación entre el rango."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    descripcionCondicion.textContent = "Esta condición determina que la oferta se aplica cuando la fecha de creación de la reserva está entre el rango de vigencia de la oferta."
                                    contenedorCondicion.appendChild(descripcionCondicion)


                                } else if (tipoCondicion === "porNumeroDeApartamentos") {
                                    const tipoConteo = condicion.tipoConteo
                                    const numeroDeApartamentos = condicion.numeroDeApartamentos

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por número de apartamentos."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)


                                    if (tipoConteo === "aPartirDe") {
                                        const descripcionCondicion = document.createElement("div")
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeApartamentos} o más apartamentos`
                                        contenedorCondicion.appendChild(descripcionCondicion)

                                    } else if (tipoConteo === "numeroExacto") {
                                        const descripcionCondicion = document.createElement("div")
                                        if (numeroDeApartamentos === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeApartamentos} apartamento exactamente. Ni más ni menos.`
                                            contenedorCondicion.appendChild(descripcionCondicion)
                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeApartamentos} apartamentos exactamente. Ni más ni menos.`
                                            contenedorCondicion.appendChild(descripcionCondicion)
                                        }
                                    } else if (tipoConteo === "hastaUnNumeroExacto") {
                                        const descripcionCondicion = document.createElement("div")
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasta ${numeroDeApartamentos} o menos apartamentos`
                                        contenedorCondicion.appendChild(descripcionCondicion)

                                    }


                                } else if (tipoCondicion === "porApartamentosEspecificos") {
                                    const apartamentos = condicion.apartamentos
                                    const tipoDeEspecificidad = condicion.tipoDeEspecificidad

                                    const apartametnosFormateados = casaVitini.utilidades.cadenas.constructorComasEY({
                                        array: apartamentos,
                                        articulo: "el"
                                    })
                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por apartamentos específicos."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")

                                    if (tipoDeEspecificidad === "exactamente") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva contiene los apartamentos en específico: ${apartametnosFormateados}`

                                    } else if (tipoDeEspecificidad === "alguno") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva contiene algunos de los apartamentos en específico: ${apartametnosFormateados}`

                                    } else if (tipoDeEspecificidad === "exactamenteEntreOtros") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva contiene exactamente los apartamentos en específico, entre otros: ${apartametnosFormateados}`

                                    } else if (tipoDeEspecificidad === "noDebeContenedorExactamente") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva NO contiene exactamente los apartamentos en específico: ${apartametnosFormateados}`

                                    } else if (tipoDeEspecificidad === "noDebeContenedorAlguno") {
                                        descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva NO contiene alguno de los apartamentos en específico: ${apartametnosFormateados}`

                                    }



                                    contenedorCondicion.appendChild(descripcionCondicion)

                                } else if (tipoCondicion === "porDiasDeAntelacion") {
                                    const numeroDeDias = condicion.numeroDeDias
                                    const tipoConteo = condicion.tipoConteo

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por días de antelación."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    if (tipoConteo === "aPartirDe") {
                                        if (numeroDeDias === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeDias} día de antelación o más.`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeDias} días de antelación o más.`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    } else if (tipoConteo === "numeroExacto") {
                                        if (numeroDeDias === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeDias} día de antelación exactamente`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${numeroDeDias} días de antelación exactamente`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    } else if (tipoConteo === "hastaUnNumeroExacto") {
                                        if (numeroDeDias === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasta ${numeroDeDias} día de antelación o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasra ${numeroDeDias} días de antelación o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    }

                                } else if (tipoCondicion === "porDiasDeReserva") {
                                    const diasDeReserva = condicion.diasDeReserva
                                    const tipoConteo = condicion.tipoConteo

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por días de duración."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    if (tipoConteo === "aPartirDe") {
                                        if (diasDeReserva === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${diasDeReserva} día de duración o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${diasDeReserva} días de duración o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    } else if (tipoConteo === "numeroExacto") {
                                        if (diasDeReserva === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${diasDeReserva} día de duración exactamente`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene ${diasDeReserva} días de duración exactamente`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    } else if (tipoConteo === "hastaUnNumeroExacto") {
                                        if (diasDeReserva === "1") {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasta ${diasDeReserva} día de duración o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        } else {
                                            descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando la reserva tiene hasta ${diasDeReserva} días de duración o más`
                                            contenedorCondicion.appendChild(descripcionCondicion)

                                        }
                                    }
                                } else if (tipoCondicion === "porRangoDeFechas") {
                                    const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO
                                    const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO

                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por rango de fechas."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)

                                    const descripcionCondicion = document.createElement("div")
                                    descripcionCondicion.textContent = `Esta condición determina que la oferta se aplica cuando el rango de la reserva se cruza con el rango determinado en esta condición. Del ${fechaInicioRango_ISO} al ${fechaFinalRango_ISO}`
                                    contenedorCondicion.appendChild(descripcionCondicion)

                                } else if (tipoCondicion === "porCodigoDescuento") {
                                    const codigoDescuento = condicion.codigoDescuento
                                    const tituloCondicion = document.createElement("div")
                                    tituloCondicion.textContent = "Por código de descuento."
                                    tituloCondicion.classList.add(
                                        "negrita",
                                    )
                                    contenedorCondicion.appendChild(tituloCondicion)


                                    const codigoUI = document.createElement("div")
                                    codigoUI.textContent = atob(codigoDescuento)


                                    contenedorCondicion.appendChild(codigoUI)



                                } else {
                                    const error = "El renderizado de condiciones de oferta ha recibido un identificador no reconocido: " + tipoCondicion
                                    return casaVitini.ui.componentes.advertenciaInmersiva(error)
                                }

                                return contenedorCondicion
                            },
                            descuentosUI: function (data) {
                                const destino = data.destino
                                const contenedorOferta = data.contenedorOferta
                                const ofertaUID = contenedorOferta.oferta.ofertaUID

                                const destinoOrigenOferta = data.destinoOrigenOferta

                                const descuentosJSON = contenedorOferta.oferta.descuentosJSON
                                const tipoDescuento = descuentosJSON?.tipoDescuento
                                const subTipoDescuento = descuentosJSON?.subTipoDescuento

                                const contenedorDescuentos_selector = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                    .querySelector("[contenedor=descuentos]")


                                if (!contenedorDescuentos_selector) {
                                    const contenedorDescuentos = document.createElement("div")
                                    contenedorDescuentos.setAttribute("contenedor", "descuentos")
                                    contenedorDescuentos.classList.add(
                                        "flexVertical",
                                        "backgroundGrey1",
                                        "padding6",
                                        "borderRadius8"
                                    )
                                    document.querySelector(destino)
                                        .querySelector("[contenedor=financiero]")
                                        .querySelector("[contenedor=ofertas]")
                                        .querySelector("[contenedor=data]")
                                        .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                        .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                        .appendChild(contenedorDescuentos)
                                }

                                const contenedorDescuentos_renderizado = document.querySelector(destino)

                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector(`[contenedor=${destinoOrigenOferta}]`)
                                    .querySelector(`[ofertaUID="${ofertaUID}"]`)
                                    .querySelector("[contenedor=descuentos]")

                                contenedorDescuentos_renderizado.innerHTML = null
                                const tituloContendor = document.createElement("div")
                                tituloContendor.classList.add(
                                    "negrita",
                                    "padding6",
                                )
                                tituloContendor.textContent = "Descuentos de la oferta"
                                contenedorDescuentos_renderizado.appendChild(tituloContendor)

                                const desfinicionDescuento = this.definicionDescuentos({
                                    tipoDescuento,
                                    subTipoDescuento,
                                    descuentosJSON
                                })
                                contenedorDescuentos_renderizado.appendChild(desfinicionDescuento)
                            },
                            definicionDescuentos: (data) => {
                                const tipoDescuento = data.tipoDescuento
                                const subTipoDescuento = data.subTipoDescuento
                                const descuentosJSON = data.descuentosJSON

                                const contenedorDescuento = document.createElement("div")

                                const descripcionDescuento = document.createElement("p")
                                descripcionDescuento.classList.add(
                                    "padding6"
                                )
                                contenedorDescuento.appendChild(descripcionDescuento)


                                if (tipoDescuento === "porRango" && subTipoDescuento === "porDiasDelRango") {

                                    const fechaInicioRango_ISO = descuentosJSON.fechaInicioRango_ISO
                                    const fechaFinalRango_ISO = descuentosJSON.fechaFinalRango_ISO
                                    const descuentoPorDias = descuentosJSON.descuentoPorDias

                                    descripcionDescuento.textContent = `Esta oferta aplica un descuento a los días de la reserva. A continuación se detallan los días donde la oferta aplica descuentos y qué tipo de descuentos aplica en cada día.`
                                    contenedorDescuento.appendChild(descripcionDescuento)

                                    for (const descuentoPorDia of descuentoPorDias) {
                                        const tipoDescuentoPorDia = descuentoPorDia.tipoDescuento
                                        const descuentoTotal = descuentoPorDia.descuentoTotal
                                        const fechaNoche = descuentoPorDia.fecha


                                        const contenedorDia = document.createElement("div")
                                        contenedorDia.classList.add(
                                            "flexVertical"
                                        )
                                        const tituloContenedorDia = document.createElement("div")
                                        tituloContenedorDia.classList.add(
                                            "negrita",
                                            "padding6"
                                        )
                                        tituloContenedorDia.textContent = fechaNoche
                                        contenedorDia.appendChild(tituloContenedorDia)

                                        if (tipoDescuentoPorDia === "netoPorDia") {
                                            const tipoAplicacion = descuentoPorDia.tipoAplicacion
                                            const descripcionDescuentoTotalNeto = document.createElement("div")

                                            descripcionDescuentoTotalNeto.classList.add(
                                                "padding6"
                                            )
                                            if (tipoAplicacion === "porcentaje") {
                                                descripcionDescuentoTotalNeto.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% a los netos de los días de la reserva que están dentro del rango establecido entre en el ${fechaInicioRango_ISO} y el ${fechaFinalRango_ISO}.`
                                            } else if (tipoAplicacion === "cantidadFija") {
                                                descripcionDescuentoTotalNeto.textContent = `Esta oferta aplica un descuento del ${descuentoTotal} a los netos de los días de la reserva que están dentro del rango establecido entre en el ${fechaInicioRango_ISO} y el ${fechaFinalRango_ISO}.`
                                            }
                                            contenedorDia.appendChild(descripcionDescuentoTotalNeto)

                                        } else if (tipoDescuentoPorDia === "netoPorApartamentoDelDia") {

                                            const contenedorApartamentosDelDia = document.createElement("div")
                                            contenedorApartamentosDelDia.classList.add(
                                                "flexVertical",
                                                "gap6"
                                            )

                                            const apartamentos = descuentoPorDia.apartamentos
                                            for (const apartamento of apartamentos) {
                                                const apartamentoUI = apartamento.apartamentoUI
                                                const apartamentoIDV = apartamento.apartamentoIDV
                                                const descuentoTotal = apartamento.descuentoTotal
                                                const tipoAplicacion = apartamento.tipoAplicacion

                                                const contenedorApartamento = document.createElement("div")
                                                contenedorApartamento.classList.add(
                                                    "padding10",
                                                    "borderGrey1",
                                                    "borderRadius6"

                                                )
                                                contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)

                                                const tituloApartamento = document.createElement("div")
                                                tituloApartamento.classList.add("negrita")
                                                tituloApartamento.textContent = apartamentoUI
                                                contenedorApartamento.appendChild(tituloApartamento)


                                                const descuentoApartamento = document.createElement("div")
                                                if (tipoAplicacion === "porcentaje") {
                                                    descuentoApartamento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% al ${apartamentoUI}`
                                                } else if (tipoAplicacion === "cantidadFija") {
                                                    descuentoApartamento.textContent = `Esta oferta aplica un descuento de ${descuentoTotal} al ${apartamentoUI}`
                                                }
                                                contenedorApartamento.appendChild(descuentoApartamento)
                                                contenedorApartamentosDelDia.appendChild(contenedorApartamento)

                                            }
                                            contenedorDia.appendChild(contenedorApartamentosDelDia)


                                        }

                                        contenedorDescuento.appendChild(contenedorDia)

                                    }
                                } else if (tipoDescuento === "porRango" && subTipoDescuento === "totalNetoPorRango") {

                                    const fechaInicioRango_ISO = descuentosJSON.fechaInicioRango_ISO
                                    const fechaFinalRango_ISO = descuentosJSON.fechaFinalRango_ISO
                                    const descuentoTotal = descuentosJSON.descuentoTotal
                                    const tipoAplicacion = descuentosJSON.tipoAplicacion

                                    if (tipoAplicacion === "porcentaje") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% a los días de la reserva que están dentro del rango establecido entre en el ${fechaInicioRango_ISO} y el ${fechaFinalRango_ISO}.`
                                    } else if (tipoAplicacion === "cantidadFija") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}$ a los días de la reserva que están dentro del rango establecido entre en el ${fechaInicioRango_ISO} y el ${fechaFinalRango_ISO}.`
                                    }
                                    contenedorDescuento.appendChild(descripcionDescuento)

                                } else if (tipoDescuento === "totalNeto") {
                                    const descuentoTotal = descuentosJSON.descuentoTotal
                                    const tipoAplicacion = descuentosJSON.tipoAplicacion


                                    if (tipoAplicacion === "porcentaje") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% al total neto de la reserva.`
                                    } else if (tipoAplicacion === "cantidadFija") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal} al total neto de la reserva.`
                                    }
                                    contenedorDescuento.appendChild(descripcionDescuento)


                                } else if (tipoDescuento === "individualPorApartamento") {


                                    descripcionDescuento.textContent = `Esta oferta aplica un descuento al total de los apartamentos especificados. A continuación se detallan los apartamentos en los que esta oferta aplica descuentos. Si la reserva no tiene todos los apartamentos especificados en esta oferta, entonces solo aplicará el Descuento en los apartamentos que coincidan con la oferta en la reserva.`
                                    contenedorDescuento.appendChild(descripcionDescuento)

                                    const contenedorApartamentos = document.createElement("div")
                                    contenedorApartamentos.classList.add(
                                        "gap6",
                                        "flexVertical"
                                    )

                                    const apartamentos = descuentosJSON.apartamentos
                                    for (const apartamento of apartamentos) {
                                        const apartamentoIDV = apartamento.apartamentoIDV
                                        const apartamentoUI = apartamento.apartamentoUI
                                        const descuentoTotal = apartamento.descuentoTotal
                                        const tipoAplicacion = apartamento.tipoAplicacion

                                        const contenedorApartamento = document.createElement("div")
                                        contenedorApartamento.classList.add(
                                            "padding10",
                                            "borderGrey1",
                                            "borderRadius8"
                                        )
                                        contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)


                                        const apartamentoTitulo = document.createElement("div")
                                        apartamentoTitulo.classList.add("negrita")
                                        apartamentoTitulo.innerHTML = apartamentoUI
                                        contenedorApartamento.appendChild(apartamentoTitulo)

                                        const tipoAplicacionUI = document.createElement("div")
                                        tipoAplicacionUI.classList.add("tipoAplicacionUI")
                                        if (tipoAplicacion === "cantidadFija") {
                                            tipoAplicacionUI.textContent = `Descuento de ${descuentoTotal}$ sobre el neto del apartamento`
                                        } else if (tipoAplicacion === "porcentaje") {
                                            tipoAplicacionUI.textContent = `Descuento del ${descuentoTotal}% sobre el neto del apartamento`
                                        }
                                        contenedorApartamento.appendChild(tipoAplicacionUI)

                                        contenedorApartamentos.appendChild(contenedorApartamento)
                                    }

                                    contenedorDescuento.appendChild(contenedorApartamentos)


                                } else if (tipoDescuento === "mismoDescuentoParaCadaApartamento") {
                                    const descuentoTotal = descuentosJSON.descuentoTotal
                                    const tipoAplicacion = descuentosJSON.tipoAplicacion


                                    if (tipoAplicacion === "porcentaje") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal}% al total neto de cada apartamento de la reserva.`
                                    } else if (tipoAplicacion === "cantidadFija") {
                                        descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoTotal} al total neto de cada apartamento individualmente de la reserva.`
                                    }
                                    contenedorDescuento.appendChild(descripcionDescuento)


                                } else {
                                    const mensaje = "No se reconoce el tipo de descuento recibido."
                                    return casaVitini.ui.componentes.advertenciaInmersiva(mensaje)
                                }
                                return contenedorDescuento

                            },
                            utilidades: {
                                limpiarOfertasObsoletas: (data) => {
                                    const contenedores = data.contenedores
                                    const origen = data.origen
                                    const destino = data.destino
                                    const paresActuales = []
                                    contenedores.forEach((contenedorOferta, posicion) => {
                                        paresActuales.push({
                                            oferta: String(contenedorOferta.oferta.ofertaUID),
                                            posicion: String(posicion)
                                        })
                                    })
                                    const selectorContenedorOfertas = document.querySelector(destino).querySelectorAll(`[contenedor="${origen}"] [ofertaUID][posicion]`);
                                    const elementosFiltrados = Array.from(selectorContenedorOfertas).filter(elemento => {
                                        const ofertaUID = elemento.getAttribute('ofertaUID');
                                        const posicion = elemento.getAttribute('posicion');
                                        return !paresActuales.some(par => par.ofertaUID === ofertaUID && par.posicion === posicion);
                                    })
                                    elementosFiltrados.forEach((ofertaObsoleta) => { ofertaObsoleta.remove() })
                                },
                                posicionador: (data) => {

                                    const contenedorDestino = data.contenedorDestino
                                    const consultaContenedorInternos = data.consultaContenedorInternos
                                    const selectorContenedorInternos = contenedorDestino.querySelectorAll(consultaContenedorInternos);

                                    const posicionDestino = data.posicionDestino
                                    const nuevoContenedor = data.nuevoContenedor

                                    if (posicionDestino < selectorContenedorInternos.length) {
                                        contenedorDestino.insertBefore(nuevoContenedor, selectorContenedorInternos[posicionDestino]);
                                    } else {
                                        contenedorDestino.appendChild(nuevoContenedor);
                                    }
                                }
                            },
                        },
                        porTotal: (data) => {

                            const destino = data.destino
                            const porTotal = data.porTotal

                            if (porTotal.length === 0) {
                                document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    ?.querySelector("[contenedor=listadescuentosAplicadosAlTotalNetoOfertas]")
                                    ?.remove()
                                return
                            }


                            const contenedorPorTotalOfertas_selector = document.querySelector(destino).querySelector("[contenedor=financiero]")
                                .querySelector("[contenedor=ofertas]")
                                .querySelector("[contenedor=data]")
                                .querySelector("[contenedor=listadescuentosAplicadosAlTotalNetoOfertas]")

                            if (!contenedorPorTotalOfertas_selector) {
                                const contenedorOfertas = document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")

                                const contenedorDescuentosPorTotal = document.createElement("div")
                                contenedorDescuentosPorTotal.setAttribute("contenedor", "listadescuentosAplicadosAlTotalNetoOfertas")
                                contenedorDescuentosPorTotal.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorOfertas.appendChild(contenedorDescuentosPorTotal)
                            }


                            const contenedorPorTotal_selector = document.querySelector(destino)
                                .querySelector("[contenedor=financiero]")
                                .querySelector("[contenedor=ofertas]")
                                .querySelector("[contenedor=data]")
                                .querySelector("[contenedor=listadescuentosAplicadosAlTotalNetoOfertas]")
                                .querySelector("[contenedor=porTotal]")
                            if (!contenedorPorTotal_selector) {
                                const contenedor = document.createElement("div")
                                contenedor.classList.add("contenedorPorTotal")
                                contenedor.setAttribute("contenedor", "porTotal")
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )

                                document.querySelector(destino)
                                    .querySelector("[contenedor=financiero]")
                                    .querySelector("[contenedor=ofertas]")
                                    .querySelector("[contenedor=data]")
                                    .querySelector("[contenedor=listadescuentosAplicadosAlTotalNetoOfertas]")
                                    .appendChild(contenedor)

                                const tituloContendor = document.createElement("div")
                                tituloContendor.classList.add(
                                    "negrita",
                                    "textoCentrado",
                                )
                                tituloContendor.textContent = "Descuentos aplicados a total neto de la reserva"
                                contenedor.appendChild(tituloContendor)

                                const contenedorPorTotal = document.createElement("div")
                                contenedorPorTotal.setAttribute("contenedor", "descuentos")
                                contenedorPorTotal.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedor.appendChild(contenedorPorTotal)
                            }
                            const contenedorPorTotal_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=ofertas] [contenedor=data]").querySelector("[contenedor=porTotal]")
                            const contenedorDeDescuentos = contenedorPorTotal_renderizado.querySelector("[contenedor=descuentos]")
                            contenedorDeDescuentos.innerHTML = null

                            porTotal.forEach((detallesDelTotal) => {

                                const ofertaUID = detallesDelTotal.ofertaUID
                                const nombreOferta = detallesDelTotal.nombreOferta
                                const porcentaje = detallesDelTotal.porcentaje
                                const tipoAplicacion = detallesDelTotal.tipoAplicacion
                                const descuentoAplicado = detallesDelTotal.descuentoAplicado
                                const totalConDescuento = detallesDelTotal.totalConDescuento

                                const contenedorDescuentoTotal = document.createElement("div")
                                contenedorDescuentoTotal.classList.add("contenedorDelDescuentoDelTotal")
                                contenedorDescuentoTotal.classList.add(
                                    "borderRadius10",
                                    "padding10",
                                    "borderGrey1",
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorDescuentoTotal.setAttribute("ofertaUID", ofertaUID)

                                const tituloOferta = document.createElement("div")
                                tituloOferta.classList.add(
                                    "negrita",
                                )
                                tituloOferta.textContent = nombreOferta
                                contenedorDescuentoTotal.appendChild(tituloOferta)

                                if (tipoAplicacion === "porcentaje") {
                                    const porcentajeUI = document.createElement("div")
                                    porcentajeUI.textContent = `${porcentaje}%`
                                    contenedorDescuentoTotal.appendChild(porcentajeUI)


                                }
                                const descuentoAplicadoUI = document.createElement("div")
                                descuentoAplicadoUI.textContent = `Descuento aplicado: ${descuentoAplicado}`
                                contenedorDescuentoTotal.appendChild(descuentoAplicadoUI)

                                const totalConDescuentoUI = document.createElement("div")
                                totalConDescuentoUI.textContent = `Este descuento aplicado deja el total en ${totalConDescuento}`
                                contenedorDescuentoTotal.appendChild(totalConDescuentoUI)

                                contenedorDeDescuentos.appendChild(contenedorDescuentoTotal)


                            })
                        },
                        entidades: {
                            hub: function (data) {
                                const destino = data.destino
                                const entidades = data.entidades
                                Object.entries(entidades).forEach(([entidadIDV, detalleEntidad]) => {
                                    if (entidadIDV === "reserva") {
                                        this.reserva({
                                            destino,
                                            detalleEntidad
                                        })
                                    }
                                })
                            },
                            reserva: (data) => {
                                const destino = data.destino
                                const detalleEntidad = data.detalleEntidad.desgloses
                                const porDia = detalleEntidad.porDia
                                const porApartamento = detalleEntidad.porApartamento

                                const apartamentosIDVArray = Object.keys(porApartamento)

                                const selectorApartamentos = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelectorAll(`[apartamentoIDV]`)
                                selectorApartamentos.forEach((apartamentoRenderizado) => {
                                    const apartamentoObosoleto = apartamentoRenderizado.getAttribute("apartamentoIDV")
                                    if (!apartamentosIDVArray.includes(apartamentoObosoleto)) {
                                        apartamentoRenderizado.querySelector("[contenedor=descuentosDelApartamento]")?.remove()
                                    }
                                })

                                if (Object.entries(porApartamento).length === 0) {
                                    const contenedorApartamento_obosoletos = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porApartamento]").querySelectorAll("[apartamentoIDV]")
                                    contenedorApartamento_obosoletos.forEach((contenedorObsoleto) =>
                                        contenedorObsoleto.querySelector("[contenedor=descuentosDelApartamento]")?.remove()
                                    )
                                }

                                Object.entries(porApartamento).forEach(([apartamentoIDV, descuentosDelApartamento]) => {
                                    const contenedorApartamento = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porApartamento]").querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)

                                    const descuentosAplicados = descuentosDelApartamento.descuentosAplicados
                                    const totalNetoConDescuentos = descuentosDelApartamento.totalNetoConDescuentos
                                    const totalNetoSinDescuentos = descuentosDelApartamento.totalNetoSinDescuentos
                                    const totalDescuentosAplicados = descuentosDelApartamento.totalDescuentosAplicados

                                    const contenedorDescuentosPorApartamento_selector = contenedorApartamento.querySelector("[contenedor=descuentosDelApartamento]")
                                    if (!contenedorDescuentosPorApartamento_selector) {
                                        const contenedorDescuentosPorApartamento = document.createElement("div")
                                        contenedorDescuentosPorApartamento.setAttribute("contenedor", "descuentosDelApartamento")
                                        contenedorDescuentosPorApartamento.classList.add(
                                            "padding6",
                                            "flexVertical",
                                            "gap6"
                                        )

                                        const totalesDescuentos = document.createElement("div")

                                        const totalDescuentosAplicadosUI = document.createElement("div")
                                        totalDescuentosAplicadosUI.setAttribute("dato", "totalConDescuentosAplicados")
                                        totalesDescuentos.appendChild(totalDescuentosAplicadosUI)

                                        const totalNetoConDescuentosUI = document.createElement("div")
                                        totalNetoConDescuentosUI.setAttribute("dato", "totalNetoConDescuentos")
                                        totalesDescuentos.appendChild(totalNetoConDescuentosUI)
                                        contenedorDescuentosPorApartamento.appendChild(totalesDescuentos)
                                        contenedorApartamento.appendChild(contenedorDescuentosPorApartamento)

                                        const contenedorDescuentosDelApartamento = document.createElement("div")
                                        contenedorDescuentosDelApartamento.setAttribute("contenedor", "descuentos")
                                        contenedorDescuentosDelApartamento.classList.add(
                                            "padding6",
                                            "flexVertical",
                                            "gap6",
                                            "borderRadius8",
                                            "borderGrey1"
                                        )

                                        const tituloContenedorDescuentos = document.createElement("div")
                                        tituloContenedorDescuentos.classList.add("negrita")
                                        tituloContenedorDescuentos.textContent = "Descuentos aplicados al total del apartamento"
                                        contenedorDescuentosDelApartamento.appendChild(tituloContenedorDescuentos)
                                        contenedorDescuentosPorApartamento.appendChild(contenedorDescuentosDelApartamento)
                                    }
                                    const contenedorDescuentosPorApartamento_renderizado = contenedorApartamento.querySelector("[contenedor=descuentosDelApartamento]")

                                    const totalConDescuentosAplicados = contenedorDescuentosPorApartamento_renderizado.querySelector("[dato=totalConDescuentosAplicados]")
                                    totalConDescuentosAplicados.textContent = `${totalDescuentosAplicados}$ Suma total de descuentos aplicados al apartamento`

                                    const totalNetoConDescuentosUI = contenedorDescuentosPorApartamento_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                                    totalNetoConDescuentosUI.textContent = `${totalNetoConDescuentos}$ Neto del apartamento con descuentos aplicados`

                                    const contenedorDesgloseDescuentos = contenedorDescuentosPorApartamento_renderizado.querySelector("[contenedor=descuentos]")
                                    contenedorDesgloseDescuentos.innerHTML = null

                                    descuentosAplicados.forEach((detallesDelDescuento) => {
                                        const ofertaUID = detallesDelDescuento.ofertaUID
                                        const nombreOferta = detallesDelDescuento.nombreOferta
                                        const apartamentoIDV = detallesDelDescuento.apartamentoIDV
                                        const tipoAplicacion = detallesDelDescuento.tipoAplicacion
                                        const porcentaje = detallesDelDescuento.porcentaje
                                        const descuentoAplicado = detallesDelDescuento.descuentoAplicado
                                        const totalConDescuento = detallesDelDescuento.totalConDescuento

                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("porApartamento")
                                        contenedor.setAttribute("ofertaUID", ofertaUID)
                                        contenedor.classList.add(
                                            "padding6",
                                            "flexVertical",
                                            "borderRadius6",
                                            "backgroundGrey1"
                                        )

                                        const nombreOfertaUI = document.createElement("div")
                                        nombreOfertaUI.classList.add("negrita")
                                        nombreOfertaUI.textContent = nombreOferta
                                        contenedor.appendChild(nombreOfertaUI)

                                        const descripcionDescuento = document.createElement("div")
                                        if (tipoAplicacion === "porcentaje") {
                                            descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${porcentaje}% y generando un descuento del ${descuentoAplicado}.`
                                        } else if (tipoAplicacion === "cantidadFija") {
                                            descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoAplicado} sobre el total neto del apartamento.`
                                        }
                                        contenedor.appendChild(descripcionDescuento)
                                        contenedorDesgloseDescuentos.appendChild(contenedor)
                                    })
                                })

                                const fechasNocheObsoletas = Object.keys(porDia)
                                const selectorNochesRenderizadas = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelectorAll(`[noche]`)
                                selectorNochesRenderizadas.forEach((nocheRenderizada) => {
                                    const fechaNocheRenderizada = nocheRenderizada.getAttribute("noche")
                                    if (!fechasNocheObsoletas.includes(fechaNocheRenderizada)) {
                                        nocheRenderizada.querySelector("[contenedor=descuentosGlobales]")?.remove()
                                        nocheRenderizada.querySelector("[contenedor=descuentosNoche]")?.remove()
                                        const selectorContenedorDescuentosEnApartamenos = nocheRenderizada.querySelectorAll("[contenedor=descuentosAlNetoApartamento]")
                                        selectorContenedorDescuentosEnApartamenos.forEach((s) => s?.remove())
                                    }
                                })

                                Object.entries(porDia).forEach(([fechaNoche, detallesDelDia]) => {

                                    const totalConDescuentos = detallesDelDia.totalConDescuentos
                                    const totalDescuentosAplicados = detallesDelDia.totalDescuentosAplicados
                                    const totalSinDescuentos = detallesDelDia.totalSinDescuentos
                                    const porApartamento = detallesDelDia.porApartamento ?? []
                                    const porTotalNetoDia = detallesDelDia.porTotalNetoDia ?? []

                                    const contendorNoche = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelector(`[noche="${fechaNoche}"]`)
                                    const contendorTotalesNoche = contendorNoche.querySelector("[contenedor=totalesNoche]")

                                    const descuentosGlobales_selector = contendorNoche.querySelector("[contenedor=descuentosGlobales]")
                                    if (!descuentosGlobales_selector) {
                                        const descuentosGlobales = document.createElement("div")
                                        descuentosGlobales.setAttribute("contenedor", "descuentosGlobales")
                                        descuentosGlobales.classList.add("flexVertical",)

                                        const contenedorGlobal = document.createElement("div")
                                        contenedorGlobal.classList.add("padding6")

                                        const totalDescuentosAplicados = document.createElement("p")
                                        totalDescuentosAplicados.setAttribute("dato", "totalDescuentosAplicados")
                                        contenedorGlobal.appendChild(totalDescuentosAplicados)

                                        const totalConDescuentosUI = document.createElement("p")
                                        totalConDescuentosUI.setAttribute("dato", "totalConDescuentos")
                                        contenedorGlobal.appendChild(totalConDescuentosUI)
                                        descuentosGlobales.appendChild(contenedorGlobal)

                                        contendorNoche.insertBefore(descuentosGlobales, contendorTotalesNoche.nextSibling);
                                    }
                                    const descuentosGlobales_renderizado = contendorNoche.querySelector("[contenedor=descuentosGlobales]")

                                    const totalDescuentosAplicadosUI = descuentosGlobales_renderizado.querySelector("[dato=totalDescuentosAplicados]")
                                    totalDescuentosAplicadosUI.textContent = totalDescuentosAplicados + "$ Suma total de los descuentos aplicados al total neto de la noache"

                                    const totalConDescuentosUI = descuentosGlobales_renderizado.querySelector("[dato=totalConDescuentos]")
                                    totalConDescuentosUI.textContent = totalConDescuentos + "$ Total neto noche con descuentos aplicados"

                                    if (porTotalNetoDia.length > 0) {
                                        const descuentosDelTotalNetoNoche_selector = contendorNoche.querySelector("[contenedor=descuentosNoche]")
                                        if (!descuentosDelTotalNetoNoche_selector) {
                                            const contenedorDescuentosDelTotalNetoNoche = document.createElement("div")
                                            contenedorDescuentosDelTotalNetoNoche.setAttribute("contenedor", "descuentosNoche")
                                            contenedorDescuentosDelTotalNetoNoche.classList.add("contenedorTotalesNocheDescuentos")

                                            contendorNoche.insertBefore(contenedorDescuentosDelTotalNetoNoche, descuentosGlobales_renderizado.nextSibling);

                                            const titulo = document.createElement("div")
                                            titulo.classList.add(
                                                "negrita",
                                                "padding6"
                                            )
                                            titulo.textContent = "Descuentos aplicados al total neto de la noche."
                                            contenedorDescuentosDelTotalNetoNoche.appendChild(titulo)

                                        }
                                        const descuentosDelTotalNetoNoche_renderizado = contendorNoche.querySelector("[contenedor=descuentosNoche]")
                                        const selectorDescuentosObsoletos = descuentosDelTotalNetoNoche_renderizado.querySelectorAll("[contenedor=descuento]")
                                        selectorDescuentosObsoletos.forEach((descuentoObosoleto) => {
                                            descuentoObosoleto?.remove()
                                        })

                                    } else {

                                        contendorNoche.querySelector("[contenedor=descuentosNoche]")?.remove()
                                    }

                                    porTotalNetoDia.forEach((detallesDelNetoPorDia) => {

                                        const fecha = detallesDelNetoPorDia.fecha
                                        const ofertaUID = detallesDelNetoPorDia.ofertaUID
                                        const porcentaje = detallesDelNetoPorDia.porcentaje
                                        const nombreOferta = detallesDelNetoPorDia.nombreOferta
                                        const tipoAplicacion = detallesDelNetoPorDia.tipoAplicacion
                                        const descuentoAplicado = detallesDelNetoPorDia.descuentoAplicado
                                        const totalConDescuento = detallesDelNetoPorDia.totalConDescuento

                                        const contenedorDescuentos_renderizado = contendorNoche.querySelector("[contenedor=descuentosNoche]")

                                        const contenedorDescuentosAlTotalNetoNoche = document.createElement("div")
                                        contenedorDescuentosAlTotalNetoNoche.setAttribute("contenedor", "descuento")
                                        contenedorDescuentosAlTotalNetoNoche.classList.add("contenedorDescuentosAlTotalNetoNoche")
                                        contenedorDescuentosAlTotalNetoNoche.setAttribute("ofertaUID", ofertaUID)

                                        const nombreOfertaUI = document.createElement("div")
                                        nombreOfertaUI.classList.add("negrita")
                                        nombreOfertaUI.textContent = nombreOferta
                                        contenedorDescuentosAlTotalNetoNoche.appendChild(nombreOfertaUI)


                                        const descripcionDescuento = document.createElement("div")
                                        if (tipoAplicacion === "porcentaje") {
                                            descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${porcentaje}% al total neto de la noche generando un descuento del ${descuentoAplicado}.`
                                        } else if (tipoAplicacion === "cantidadFija") {
                                            descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoAplicado} al total neto de la noche.`
                                        }
                                        contenedorDescuentosAlTotalNetoNoche.appendChild(descripcionDescuento)
                                        contenedorDescuentos_renderizado.appendChild(contenedorDescuentosAlTotalNetoNoche)

                                    })

                                    const apartamentosIDVArray = Object.keys(porApartamento)
                                    const selectorApartamentosRenderizados = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelector(`[noche="${fechaNoche}"]`).querySelectorAll(`[apartamentoIDV]`)
                                    selectorApartamentosRenderizados.forEach((apartamentoRenderizado) => {
                                        const apartamentoIDVRenderizado = apartamentoRenderizado.getAttribute("apartamentoIDV")
                                        if (!apartamentosIDVArray.includes(apartamentoIDVRenderizado)) {
                                            apartamentoRenderizado.querySelector("[contenedor=descuentosAlNetoApartamento]")?.remove()
                                        }
                                    })

                                    Object.entries(porApartamento).forEach(([apartamentoIDV, desgloseDelApartamento]) => {

                                        const selectorApartamentoDelaNoche = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=porNoche]").querySelector(`[noche="${fechaNoche}"]`).querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)

                                        const totalConDescuentos = desgloseDelApartamento.totalConDescuentos
                                        const totalSinDescuentos = desgloseDelApartamento.totalSinDescuentos
                                        const descuentosAplicados = desgloseDelApartamento.descuentosAplicados
                                        const totalDescuentosAplicados = desgloseDelApartamento.totalDescuentosAplicados

                                        const contenedorDescuentosGlobal_selector = selectorApartamentoDelaNoche.querySelector("[contenedor=descuentosAlNetoApartamento]")
                                        if (!contenedorDescuentosGlobal_selector) {
                                            const contenedorDescuentosGlobal = document.createElement("div")
                                            contenedorDescuentosGlobal.setAttribute("contenedor", "descuentosAlNetoApartamento")
                                            selectorApartamentoDelaNoche.appendChild(contenedorDescuentosGlobal)

                                            const contendorGlobal = document.createElement("div")
                                            contendorGlobal.classList.add("padding6")
                                            contendorGlobal.setAttribute("contenedor", "descuentosGlobal")

                                            const totalDescuentosAplicadosUI = document.createElement("p")
                                            totalDescuentosAplicadosUI.setAttribute("dato", "totalDescuentosAplicados")
                                            contendorGlobal.appendChild(totalDescuentosAplicadosUI)

                                            const totalConDescuentosUI = document.createElement("p")
                                            totalConDescuentosUI.setAttribute("dato", "totalConDescuentos")
                                            contendorGlobal.appendChild(totalConDescuentosUI)
                                            contenedorDescuentosGlobal.appendChild(contendorGlobal)

                                            const contenedorDescuentos = document.createElement("div")
                                            contenedorDescuentos.setAttribute("contenedor", "descuentosPorApartamento")
                                            contenedorDescuentos.classList.add("contenedorDescuentosPorApartamento")
                                            contenedorDescuentosGlobal.appendChild(contenedorDescuentos)

                                            const titulo = document.createElement("div")
                                            titulo.classList.add("padding6", "negrita")
                                            titulo.textContent = "Descuentos aplicados al total neto del alojamiento"
                                            contenedorDescuentos.appendChild(titulo)
                                        }

                                        const contenedorDescuentosGlobal_renderizado = selectorApartamentoDelaNoche.querySelector("[contenedor=descuentosAlNetoApartamento]")

                                        const totalDescuentosAplicadosUI = contenedorDescuentosGlobal_renderizado.querySelector("[dato=totalDescuentosAplicados]")
                                        totalDescuentosAplicadosUI.textContent = totalDescuentosAplicados + "$ Descuentos aplicados al neto del apartamento"

                                        const totalConDescuentos_ = contenedorDescuentosGlobal_renderizado.querySelector("[dato=totalConDescuentos]")
                                        totalConDescuentos_.textContent = totalConDescuentos + "$ Neto del apartamento con descuentos aplicados"

                                        const selectorDescuentosObsoletos = contenedorDescuentosGlobal_renderizado.querySelector("[contenedor=descuentosPorApartamento]").querySelectorAll("[contenedor=descuento]")
                                        selectorDescuentosObsoletos.forEach((descuentoObsoleto) => {
                                            descuentoObsoleto?.remove()
                                        })

                                        descuentosAplicados.forEach((detallesDelDescuento) => {
                                            const fecha = detallesDelDescuento.fecha
                                            const ofertaUID = detallesDelDescuento.ofertaUID
                                            const porcentaje = detallesDelDescuento.porcentaje
                                            const nombreOferta = detallesDelDescuento.nombreOferta
                                            const apartamentoIDV = detallesDelDescuento.apartamentoIDV
                                            const tipoAplicacion = detallesDelDescuento.tipoAplicacion
                                            const descuentoAplicado = detallesDelDescuento.descuentoAplicado
                                            const totalConDescuento = detallesDelDescuento.totalConDescuento

                                            const contenedor = document.createElement("div")
                                            contenedor.classList.add("contenedorDescuentoPorApartamento")
                                            contenedor.setAttribute("contenedor", "descuento")
                                            contenedor.setAttribute("ofertaUID", ofertaUID)

                                            const nombreOfertaUI = document.createElement("div")
                                            nombreOfertaUI.classList.add("negrita")
                                            nombreOfertaUI.textContent = nombreOferta
                                            contenedor.appendChild(nombreOfertaUI)

                                            const descripcionDescuento = document.createElement("div")
                                            if (tipoAplicacion === "porcentaje") {
                                                descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${porcentaje}% al total neto del apartamento, generando un descuento del ${descuentoAplicado}.`
                                            } else if (tipoAplicacion === "cantidadFija") {
                                                descripcionDescuento.textContent = `Esta oferta aplica un descuento del ${descuentoAplicado}, al total neto del apartamento`
                                            }
                                            contenedor.appendChild(descripcionDescuento)
                                            contenedorDescuentosGlobal_renderizado.querySelector("[contenedor=descuentosPorApartamento]").appendChild(contenedor)
                                        })
                                    })
                                })
                            }
                        }
                    },
                    sobreControlPrecios: () => { },
                    impuestos: (data) => {
                        const destino = data.destino
                        const impuestos = data.impuestos
                        const instanciaUID = data.instanciaUID
                        const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                        const modoUI = contenedorFinanciero.getAttribute("modoUI")

                        if (modoUI === "plaza" && impuestos.length === 0) {
                            return

                        }

                        const contenedorImpuestos_selector = contenedorFinanciero.querySelector("[contenedor=impuestos]")

                        if (!contenedorImpuestos_selector) {
                            const contenedorPlegable = document.createElement('details');
                            contenedorPlegable.classList.add(
                                "contenedorImpuestos",
                                "flexVertical",
                                "gap6",
                            )
                            contenedorPlegable.setAttribute("contenedor", "impuestos")


                            const tituloContenedorPlegable = document.createElement('summary');
                            tituloContenedorPlegable.setAttribute("elemento", "impuestos")
                            tituloContenedorPlegable.classList.add(
                                "padding12",
                            )
                            tituloContenedorPlegable.textContent = 'Impuestos aplicados';
                            contenedorPlegable.appendChild(tituloContenedorPlegable)

                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("contenedor", "data")
                            contenedor.classList.add(
                                "contenedorImpuestos",
                                "flexVertical",
                                "gap6",
                                "padding6"
                            )
                            contenedorPlegable.appendChild(contenedor)

                            contenedorFinanciero.appendChild(contenedorPlegable)

                            if (modoUI === "administracion") {

                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertarImpuesto = document.createElement("div")
                                botonInsertarImpuesto.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarImpuesto.textContent = "Insertar impuesto"
                                botonInsertarImpuesto.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.insertarImpuesto.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarImpuesto)
                                contenedor.appendChild(contenedorBotones)


                                const botonInsertarImpuestoAdHoc = document.createElement("div")
                                botonInsertarImpuestoAdHoc.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarImpuestoAdHoc.textContent = "Crear e insertar impuesto ad hoc"
                                botonInsertarImpuestoAdHoc.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.crearImpuestoAdHoc.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarImpuestoAdHoc)
                                contenedor.appendChild(contenedorBotones)
                            }

                            if (modoUI === "simulador") {

                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertarImpuesto = document.createElement("div")
                                botonInsertarImpuesto.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarImpuesto.textContent = "Insertar impuesto"
                                botonInsertarImpuesto.addEventListener("click", () => {
                                    casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.insertarImpuesto.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarImpuesto)
                                contenedor.appendChild(contenedorBotones)


                                const botonInsertarImpuestoAdHoc = document.createElement("div")
                                botonInsertarImpuestoAdHoc.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarImpuestoAdHoc.textContent = "Crear e insertar impuesto ad hoc"
                                botonInsertarImpuestoAdHoc.addEventListener("click", () => {
                                    casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.crearImpuestoAdHoc.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarImpuestoAdHoc)
                                contenedor.appendChild(contenedorBotones)
                            }
                        }
                        const contenedorImpuestos_renderizado = contenedorFinanciero.querySelector("[contenedor=impuestos] [contenedor=data]")
                        if (impuestos.length === 0) {
                            const impuestosRenderizadosObsoletos = contenedorImpuestos_renderizado.querySelectorAll("[contenedor=impuesto]")
                            impuestosRenderizadosObsoletos.forEach(impuestoRenderizado => { impuestoRenderizado.remove() })

                            const info = document.createElement("div")
                            info.setAttribute("elemento", "info")
                            info.classList.add(
                                "negrita",
                                "padding6",
                                "textoCentrado"
                            )
                            info.textContent = "No hay impuestos en este contenedor financiero."
                            const info_rederizado = contenedorImpuestos_renderizado.querySelector("[elemento=info]")
                            if (!info_rederizado) {
                                contenedorImpuestos_renderizado.appendChild(info)
                            }
                        } else {
                            contenedorImpuestos_renderizado.querySelector("[elemento=info]")?.remove()
                        }
                        const tasaUI = (tasaIDV) => {
                            if (tasaIDV === "porcentaje") {
                                return "Porcentaje"
                            } else if (tasaIDV === "tasa") {
                                return "Tasa"
                            }
                        }
                        const impuestosIDV = impuestos.map((impuesto) => {

                            return String(impuesto.impuestoUID)
                        })
                        const selectorImpuestosRenderizadosObsoletos = contenedorImpuestos_renderizado.querySelectorAll("[contenedor=impuesto]")
                        selectorImpuestosRenderizadosObsoletos.forEach((impuestoRenderizado) => {
                            const impuestoUID_renderizado = impuestoRenderizado.getAttribute("impuestoUID")
                            if (!impuestosIDV.includes(impuestoUID_renderizado)) {
                                impuestoRenderizado?.remove()
                            }
                        })

                        for (const impuesto of impuestos) {
                            const impuestoUID = impuesto.impuestoUID
                            const impuestoRenderizado = contenedorImpuestos_renderizado.querySelector(`[impuestoUID="${impuestoUID}"]`)
                            if (impuestoRenderizado) {
                                continue
                            }

                            const impuestoTitulo = impuesto.nombre
                            const entidadIDV = impuesto.entidadIDV
                            const tipoValor = impuesto.tipoValorIDV
                            const tipoImpositivo = impuesto.tipoImpositivo
                            const porcentaje = impuesto.porcentaje

                            const entidadDiccionadio = {
                                reserva: "Reserva",
                                servicio: "Servicios",
                                global: "Global"
                            }

                            const impuestoUI = document.createElement("div")
                            impuestoUI.classList.add(
                                "flexVertical",
                                "padding6",
                                "backgroundWhite5",
                                "borderRadius8",
                                "gap6"
                            )
                            impuestoUI.setAttribute("contenedor", "impuesto")
                            impuestoUI.setAttribute("impuestoUID", impuestoUID)
                            const nombreImpuestoUI = document.createElement("div")
                            nombreImpuestoUI.classList.add(
                                "padding6"
                            )
                            nombreImpuestoUI.classList.add("negrita")
                            nombreImpuestoUI.textContent = impuestoTitulo
                            impuestoUI.appendChild(nombreImpuestoUI)

                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add(
                                "flexVertical",
                                "padding6"
                            )
                            impuestoUI.appendChild(contenedorEntidad)

                            const tituloEntidad = document.createElement("p")
                            tituloEntidad.textContent = "Entidad de aplicacíon"
                            contenedorEntidad.appendChild(tituloEntidad)

                            const entidadUI = document.createElement("p")
                            entidadUI.classList.add(
                                "negrita"
                            )
                            entidadUI.textContent = entidadDiccionadio[entidadIDV]
                            contenedorEntidad.appendChild(entidadUI)


                            let simboloTipoImpuesto;
                            if (tipoValor === "porcentaje") {
                                simboloTipoImpuesto = "%";
                            }
                            if (tipoValor === "tasa") {
                                simboloTipoImpuesto = "$";
                            }

                            const contendorValor = document.createElement("div")
                            contendorValor.classList.add(
                                "padding6",
                                "flexVertical"
                            )


                            const valorUI = document.createElement("div")
                            valorUI.classList.add("resumen_reserva_impuestoUITipoValor")
                            valorUI.textContent = tasaUI(tipoValor)
                            contendorValor.appendChild(valorUI)


                            if (tipoValor === "porcentaje") {
                                const porcentajeCalculado = document.createElement("div")
                                porcentajeCalculado.classList.add("resumen_reserva_impuestoUICalculoImpuestoPorcentaje")
                                porcentajeCalculado.textContent = porcentaje + "%"
                                contendorValor.appendChild(porcentajeCalculado)
                            }

                            const tipoImpositivoUI = document.createElement("div")
                            tipoImpositivoUI.classList.add("reserva_resumen_impuestoUITipoImpositivo")
                            tipoImpositivoUI.textContent = tipoImpositivo + "$"
                            contendorValor.appendChild(tipoImpositivoUI)
                            impuestoUI.appendChild(contendorValor)



                            if (modoUI === "administracion") {
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonEliminarImpuesto = document.createElement("div")
                                botonEliminarImpuesto.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonEliminarImpuesto.textContent = "Eliminar impuesto de la reserva"
                                botonEliminarImpuesto.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.eliminarImpuesto.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID,
                                        nombreImpuesto: impuestoTitulo,
                                        impuestoUID
                                    })
                                })
                                contenedorBotones.appendChild(botonEliminarImpuesto)
                                impuestoUI.appendChild(contenedorBotones)
                            }

                            if (modoUI === "simulador") {
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonEliminarImpuesto = document.createElement("div")
                                botonEliminarImpuesto.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonEliminarImpuesto.textContent = "Eliminar impuesto de la reserva"
                                botonEliminarImpuesto.addEventListener("click", () => {
                                    casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.eliminarImpuesto.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID,
                                        nombreImpuesto: impuestoTitulo,
                                        impuestoUID
                                    })
                                })
                                contenedorBotones.appendChild(botonEliminarImpuesto)
                                impuestoUI.appendChild(contenedorBotones)
                            }

                            contenedorImpuestos_renderizado.appendChild(impuestoUI)
                        }


                    },
                    totalesGlobales: (data) => {
                        const destino = data.destino
                        const totales = data.totales
                        const instanciaUID = data.instanciaUID

                        const totalNeto = totales?.totalNeto
                        const totalFinal = totales?.totalFinal
                        const totalDescuentos = totales?.totalDescuentos
                        const impuestosAplicados = totales?.impuestosAplicados


                        const totalNetoConDescuentos = totales?.totalNetoConDescuentos
                        const contenedorFinanciero = document.querySelector(destino).querySelector("[contenedor=financiero]")
                        const modoUI = contenedorFinanciero.getAttribute("modoUI")

                        const contenedorTotales_selector = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=totalesGlobales]")
                        if (!contenedorTotales_selector) {

                            const contenedorPlegable = document.createElement("details")
                            contenedorPlegable.classList.add(
                                "flexVertical",
                                "gap6"
                            )
                            contenedorPlegable.setAttribute("contenedor", "totalesGlobales")
                            contenedorPlegable.setAttribute("componente", "plegable")
                            document.querySelector(destino).querySelector("[contenedor=financiero]").appendChild(contenedorPlegable)

                            const totalesUITituloBloque = document.createElement("summary")
                            totalesUITituloBloque.classList.add(
                                "padding12",
                            )
                            totalesUITituloBloque.textContent = "Totales globales"
                            contenedorPlegable.appendChild(totalesUITituloBloque)

                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("contenedor", "data")
                            contenedor.classList.add(
                                "contenedorImpuestos",
                                "flexVertical",
                                "gap6",
                                "padding6"
                            )
                            contenedorPlegable.appendChild(contenedor)


                            if (modoUI === "administracion") {
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertarDescuento = document.createElement("div")
                                botonInsertarDescuento.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarDescuento.textContent = "Reconstruir desglose financerio"
                                botonInsertarDescuento.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.componentesUI.reconstruirDesgloseFinanciero.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID,
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarDescuento)

                                contenedor.appendChild(contenedorBotones)
                            }
                            if (modoUI === "simulador") {
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertarDescuento = document.createElement("div")
                                botonInsertarDescuento.classList.add(
                                    "botonV3",
                                    "comportamientoBoton"
                                )
                                botonInsertarDescuento.textContent = "Reconstruir desglose financerio"
                                botonInsertarDescuento.addEventListener("click", () => {
                                    casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.reconstruirDesgloseFinanciero.ui({
                                        instanciaUID_contenedorFinanciero: instanciaUID,
                                    })
                                })
                                contenedorBotones.appendChild(botonInsertarDescuento)

                                contenedor.appendChild(contenedorBotones)
                            }
                        }

                        const contenedorTotales_renderizado = document.querySelector(destino).querySelector("[contenedor=financiero]").querySelector("[contenedor=totalesGlobales] [contenedor=data]")

                        const contenedorTotalesNeto_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")
                        if (!contenedorTotalesNeto_selector) {
                            const contenedorTotalesNeto = document.createElement("div")
                            contenedorTotalesNeto.setAttribute("contenedor", "totalesNeto")
                            contenedorTotalesNeto.classList.add(
                                "backgroundGrey1",
                                "borderRadius8",
                                "flexVertical",
                                "padding6",
                                "gap6"
                            )

                            const contenedorTotalNetoUI = document.createElement("div")
                            contenedorTotalNetoUI.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalReservaNetoUI = document.createElement("div")

                            totalReservaNetoUI.textContent = "Total neto"
                            contenedorTotalNetoUI.appendChild(totalReservaNetoUI)

                            const totalReservaNetoUI_ = document.createElement("div")
                            totalReservaNetoUI_.setAttribute("dato", "totalNeto")
                            totalReservaNetoUI_.classList.add(
                                "negrita"
                            )
                            contenedorTotalNetoUI.appendChild(totalReservaNetoUI_)
                            contenedorTotalesNeto.appendChild(contenedorTotalNetoUI)

                            const contenedorPromedioNoche = document.createElement("div")
                            contenedorPromedioNoche.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalReservaNetoDiaUI = document.createElement("div")

                            totalReservaNetoDiaUI.textContent = "Precio medio neto de la reserva por noche"


                            const totalReservaNetoDiaUI_ = document.createElement("div")
                            totalReservaNetoDiaUI_.classList.add("negrita")
                            totalReservaNetoDiaUI_.setAttribute("dato", "totalNetoNocheMedio")

                            contenedorPromedioNoche.appendChild(totalReservaNetoDiaUI_)

                            contenedorTotales_renderizado.appendChild(contenedorTotalesNeto)

                        }
                        const contenedorTotalesNeto_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesNeto]")

                        const totalNetoUI = contenedorTotalesNeto_renderizado.querySelector("[dato=totalNeto]")
                        totalNetoUI.textContent = totalNeto




                        const totalesDescuentos_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                        if (!totalesDescuentos_selector && totalDescuentos) {
                            const contenedorTotalesDescuentos = document.createElement("div")
                            contenedorTotalesDescuentos.setAttribute("contenedor", "totalDescuentos")
                            contenedorTotalesDescuentos.classList.add(
                                "backgroundGrey1",
                                "borderRadius8",
                                "flexVertical",
                                "padding6",
                                "gap6"
                            )
                            contenedorTotales_renderizado.appendChild(contenedorTotalesDescuentos)

                            const contenedorTotalDescuentosAplicados = document.createElement("div")
                            contenedorTotalDescuentosAplicados.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalDescuentosAplicadosUI = document.createElement("div")

                            totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas"
                            contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI)

                            const totalDescuentosAplicadosUI_ = document.createElement("div")
                            totalDescuentosAplicadosUI_.classList.add("negrita")
                            totalDescuentosAplicadosUI_.setAttribute("dato", "totalConDescuentoAplicado")
                            contenedorTotalDescuentosAplicados.appendChild(totalDescuentosAplicadosUI_)
                            contenedorTotalesDescuentos.appendChild(contenedorTotalDescuentosAplicados)

                            const contenedorTotalNetoConDescuentos = document.createElement("div")
                            contenedorTotalNetoConDescuentos.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalNetoConDescuentosUI = document.createElement("div")

                            totalNetoConDescuentosUI.textContent = "Total neto con descuentos aplicados"
                            contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI)

                            const totalNetoConDescuentosUI_ = document.createElement("div")
                            totalNetoConDescuentosUI_.classList.add("negrita")
                            totalNetoConDescuentosUI_.setAttribute("dato", "totalNetoConDescuentos")

                            contenedorTotalNetoConDescuentos.appendChild(totalNetoConDescuentosUI_)
                            contenedorTotalesDescuentos.appendChild(contenedorTotalNetoConDescuentos)


                            const contenedorPromedio = document.createElement("div")
                            contenedorPromedio.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const precioMedioConDescuentos = document.createElement("div")

                            precioMedioConDescuentos.textContent = "Precio medio neto de la reserva por noche con descuentos aplicados"


                            const precioMedioConDescuentos_ = document.createElement("div")
                            precioMedioConDescuentos_.classList.add("negrita")
                            precioMedioConDescuentos_.setAttribute("dato", "precioMedioConDescuentos")



                        }
                        const totalesDescuentos_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalDescuentos]")
                        if (!totalDescuentos) {
                            totalesDescuentos_renderizado?.remove()
                        } else {
                            const totalConDescuentosAplicadosUI = totalesDescuentos_renderizado.querySelector("[dato=totalConDescuentoAplicado]")

                            totalConDescuentosAplicadosUI.textContent = totalDescuentos

                            const totalConDescuentosUI = totalesDescuentos_renderizado.querySelector("[dato=totalNetoConDescuentos]")
                            totalConDescuentosUI.textContent = totalNetoConDescuentos



                        }

                        const contenedorTotalesFinal_selector = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")
                        if (!contenedorTotalesFinal_selector) {

                            const contenedorTotalesFinal = document.createElement("div")
                            contenedorTotalesFinal.setAttribute("contenedor", "totalesFinal")
                            contenedorTotalesFinal.classList.add(
                                "backgroundGrey1",
                                "borderRadius8",
                                "flexVertical",
                                "padding6",
                                "gap6"
                            )
                            contenedorTotales_renderizado.appendChild(contenedorTotalesFinal)
                            const contenedorTotalImpuestosAplicados = document.createElement("div")
                            contenedorTotalImpuestosAplicados.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalImpuestosUI = document.createElement("div")

                            totalImpuestosUI.textContent = "Total impuestos aplicados"
                            contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI)

                            const totalImpuestosUI_ = document.createElement("div")
                            totalImpuestosUI_.classList.add("negrita")
                            totalImpuestosUI_.setAttribute("dato", "impuestosAplicados")
                            contenedorTotalImpuestosAplicados.appendChild(totalImpuestosUI_)

                            contenedorTotalesFinal.appendChild(contenedorTotalImpuestosAplicados)

                            const contenedorTotalFinal = document.createElement("div")
                            contenedorTotalFinal.classList.add(
                                "flexVertical",
                                "padding6"
                            )

                            const totalConImpuestosUI = document.createElement("div")
                            totalConImpuestosUI.textContent = "Total final"
                            contenedorTotalFinal.appendChild(totalConImpuestosUI)

                            const totalConImpuestosUI_ = document.createElement("div")
                            totalConImpuestosUI_.classList.add("negrita")
                            totalConImpuestosUI_.setAttribute("dato", "totalFinal")

                            contenedorTotalFinal.appendChild(totalConImpuestosUI_)
                            contenedorTotalesFinal.appendChild(contenedorTotalFinal)
                        }
                        const contenedorTotalesFinal_renderizado = contenedorTotales_renderizado.querySelector("[contenedor=totalesFinal]")


                        const impuestosAplicadosUI = contenedorTotalesFinal_renderizado.querySelector("[dato=impuestosAplicados]")
                        impuestosAplicadosUI.textContent = impuestosAplicados

                        const totalFinalUI = contenedorTotalesFinal_renderizado.querySelector("[dato=totalFinal]")
                        totalFinalUI.textContent = totalFinal

                    },
                },
                constructorContenedor: (contenedorFinanciero) => {
                    const desgloseFinanciero = contenedorFinanciero.desgloseFinanciero
                    const instantaneaNoches = contenedorFinanciero.instantaneaNoches
                    const instanneaOfertas = contenedorFinanciero.instantaneaOfertas
                    const preciosAlterados = contenedorFinanciero.preciosAlterados

                    const global = desgloseFinanciero.global
                    const entidades = desgloseFinanciero.entidades
                    const impuestos = desgloseFinanciero.impuestos
                    const ofertasAplicadas = desgloseFinanciero.ofertasAplicadas


                    const totalesPorApartamento = desgloseFinanciero.totalesPorApartamento
                    const totalesPorNoche = desgloseFinanciero.totalesPorNoche
                    const totales = desgloseFinanciero.totales
                    const desgloseImpuestos = desgloseFinanciero.impuestos
                    const ofertas = desgloseFinanciero.ofertas
                    const destino = desgloseFinanciero.destino
                    const selectorDestino = document.querySelector(destino).querySelector("[contenedor=financiero]")
                    if (!selectorDestino) {
                        const error = "totales no encuentra el elemento de destino, revisa el identificador del elemento"
                        return casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }
                    const simboloDescuento = {
                        porcentaje: "%",
                        cantidadFija: "$"
                    }
                    const contenedorDesgloseTotales = document.createElement("div")
                    contenedorDesgloseTotales.classList.add("componentes_ui_desloseTotales_contenedor")
                    const detallePorDiaUI = document.createElement("div")
                    detallePorDiaUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const detalleDiaUITitulo = document.createElement("div")
                    detalleDiaUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                    detalleDiaUITitulo.textContent = "Detalle por noche"
                    detallePorDiaUI.appendChild(detalleDiaUITitulo)
                    const contenedorDesglosePorNoche = document.createElement("div")
                    contenedorDesglosePorNoche.classList.add("reserva_resumen_desglose_porNoche")
                    if (totalesPorNoche.length === 0) {
                        const info = document.createElement("div")
                        info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                        info.textContent = "No hay información financiera para desglosar por noche"
                        contenedorDesglosePorNoche.appendChild(info)
                    }
                    for (const detallePorNoche of totalesPorNoche) {
                        const fechaNoche = detallePorNoche.fechaDiaConNoche
                        const precioNetoNoche = detallePorNoche.precioNetoNoche
                        const apartamentosDetallesPorNoche = detallePorNoche.apartamentos
                        const apartamentoUI_ = document.createElement("div")
                        apartamentoUI_.classList.add("contenedorDiaConNoche")
                        const apartamentoUITitulo = document.createElement("div")
                        apartamentoUITitulo.classList.add("reserva_resumen_apartamentoIUTitulo")
                        apartamentoUITitulo.classList.add("negrita")
                        apartamentoUITitulo.textContent = fechaNoche
                        apartamentoUI_.appendChild(apartamentoUITitulo)
                        const totalNetoNocheUI = document.createElement("div")
                        totalNetoNocheUI.classList.add("reserva_resumen_apartamentoIUTitulo")
                        totalNetoNocheUI.classList.add("negrita")
                        totalNetoNocheUI.textContent = precioNetoNoche + "$ Total neto noche"
                        apartamentoUI_.appendChild(totalNetoNocheUI)
                        for (const detalleApartmentoPorNoche of apartamentosDetallesPorNoche) {
                            const apartamentoUI = detalleApartmentoPorNoche.apartamentoUI
                            const precioNetoPorNoche = detalleApartmentoPorNoche.precioNetoNoche
                            const detalleApartamentosUITitulo = document.createElement("div")
                            detalleApartamentosUITitulo.classList.add("reserva_resumen_apartamentoUIPrecio")
                            detalleApartamentosUITitulo.classList.add("negrita")
                            detalleApartamentosUITitulo.classList.add("colorGris")
                            detalleApartamentosUITitulo.textContent = apartamentoUI
                            apartamentoUI_.appendChild(detalleApartamentosUITitulo)
                            const detalleApartamentosUIPreciNetoNoche = document.createElement("div")
                            detalleApartamentosUIPreciNetoNoche.classList.add("reserva_resumen_apartamentoUIPrecio")
                            detalleApartamentosUIPreciNetoNoche.textContent = precioNetoPorNoche + "$ / Neto por noche"
                            apartamentoUI_.appendChild(detalleApartamentosUIPreciNetoNoche)
                        }
                        contenedorDesglosePorNoche.appendChild(apartamentoUI_)
                    }
                    detallePorDiaUI.appendChild(contenedorDesglosePorNoche)
                    contenedorDesgloseTotales.appendChild(detallePorDiaUI)
                    const contenedorTotalesPorApartamento = document.createElement("div")
                    contenedorTotalesPorApartamento.classList.add("reserva_resumen_desglose_porNoche")
                    const alojamientoUI = document.createElement("div")
                    alojamientoUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const alojamientoUITitulo = document.createElement("div")
                    alojamientoUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                    alojamientoUITitulo.textContent = "Precio total neto por apartamento"
                    alojamientoUI.appendChild(alojamientoUITitulo)
                    if (totalesPorApartamento.length === 0) {
                        const info = document.createElement("div")
                        info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                        info.textContent = "No hay información financiera para desglosar por apartamento"
                        alojamientoUI.appendChild(info)
                    }
                    for (const detalleDesglosePorApartamento of totalesPorApartamento) {
                        const apartamentoUI_ = detalleDesglosePorApartamento.apartamentoUI
                        const totalNetoApartamento = detalleDesglosePorApartamento.totalNetoRango
                        const precioNetoMedioPorNoche = detalleDesglosePorApartamento.precioMedioNocheRango
                        const apartamentoUI = document.createElement("div")
                        apartamentoUI.classList.add("contenedorApartamento")
                        const apartamentoUITitulo = document.createElement("div")
                        apartamentoUITitulo.classList.add("contenedorTextoOferta")
                        apartamentoUITitulo.classList.add("negrita")
                        apartamentoUITitulo.textContent = apartamentoUI_
                        apartamentoUI.appendChild(apartamentoUITitulo)
                        const apartamentoUIPrecioNetoTotal = document.createElement("div")
                        apartamentoUIPrecioNetoTotal.classList.add("textoDetallesPorApartamento")
                        apartamentoUIPrecioNetoTotal.textContent = "Total neto: " + totalNetoApartamento + "$"
                        apartamentoUI.appendChild(apartamentoUIPrecioNetoTotal)
                        const apartamentoUIPrecioPromedioPorNoche = document.createElement("div")
                        apartamentoUIPrecioPromedioPorNoche.classList.add("textoDetallesPorApartamento")
                        apartamentoUIPrecioPromedioPorNoche.textContent = "Precio medio neto por noche: " + precioNetoMedioPorNoche + "$"
                        apartamentoUI.appendChild(apartamentoUIPrecioPromedioPorNoche)
                        alojamientoUI.appendChild(apartamentoUI)
                    }
                    contenedorTotalesPorApartamento.appendChild(alojamientoUI)
                    contenedorDesgloseTotales.appendChild(contenedorTotalesPorApartamento)
                    let controlContenido = "noDesplegar"
                    const ofertasUI = document.createElement("div")
                    ofertasUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const ofertasUITitulo = document.createElement("div")
                    ofertasUITitulo.classList.add("reserva_resumen_desglose_pago_titulo")
                    ofertasUITitulo.textContent = "Ofertas aplicadas"
                    ofertasUI.appendChild(ofertasUITitulo)
                    for (const oferta of ofertas) {
                        const porNumeroDeApartamentos = oferta.porNumeroDeApartamentos
                        const porApartamentosEspecificos = oferta.porApartamentosEspecificos
                        const porDiasDeReserva = oferta.porDiasDeReserva
                        const porRangoDeFechas = oferta.porRangoDeFechas
                        const porDiasDeAntelacion = oferta.porDiasDeAntelacion
                        if (porNumeroDeApartamentos?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detallesReserva of oferta.porNumeroDeApartamentos) {
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const cantidad = detallesReserva.cantidad
                                const tipoDescuento = detallesReserva.tipoDescuento
                                const definicion = detallesReserva.definicion
                                const nombreOferta = detallesReserva.nombreOferta
                                const descuento = detallesReserva.descuento
                                let nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionOfertaUI)
                                if (tipoDescuento === "porcentaje") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento del " + cantidad + simboloDescuento[tipoDescuento] + " rebajando el neto de la reserva en " + descuento + "$"
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                if (tipoDescuento === "cantidadFija") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento del " + cantidad + simboloDescuento[tipoDescuento] + " sobre el neto de la reserva"
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                        if (porApartamentosEspecificos?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detallesOferta of oferta.porApartamentosEspecificos) {
                                const nombreOferta = detallesOferta.nombreOferta
                                const cantidad = detallesOferta.cantidad
                                const tipoDescuento = detallesOferta.tipoDescuento
                                const definicion = detallesOferta.definicion
                                const descuentoOferta = detallesOferta.descuentoOferta
                                const descuentoAplicadoA = detallesOferta.descuentoAplicadoA
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionOfertaUI)
                                if (descuentoAplicadoA === "totalNetoApartamentoDedicado") {
                                    const apartamentosEspecificos = detallesOferta.apartamentosEspecificos
                                    const contenedorApartamentosEspecificos = document.createElement("div")
                                    contenedorApartamentosEspecificos.classList.add("componentes_ui_totales_ofertas_apartamentosEspecificos_contenedor")
                                    for (const detallesApartamento of apartamentosEspecificos) {
                                        const apartamentoIDV = detallesApartamento.apartamentoIDV
                                        const apartamentoUI = detallesApartamento.apartamentoUI
                                        const tipoDescuento = detallesApartamento.tipoDescuento
                                        const cantidad = detallesApartamento.cantidad
                                        const descuento = detallesApartamento.descuento
                                        const bloqueDetalleOferta = document.createElement("div")
                                        bloqueDetalleOferta.classList.add("resumen_reserva_detalle_oferta_apartamentos_especificos")
                                        const tituloApartamentoUI = document.createElement("div")
                                        tituloApartamentoUI.classList.add("negrita")
                                        tituloApartamentoUI.innerHTML = apartamentoUI
                                        bloqueDetalleOferta.appendChild(tituloApartamentoUI)
                                        const tipoDescuentoApartamentoUI = document.createElement("div")
                                        tipoDescuentoApartamentoUI.textContent = tipoDescuento

                                        const cantidadPorApartmento = document.createElement("div")
                                        cantidadPorApartmento.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                        bloqueDetalleOferta.appendChild(cantidadPorApartmento)
                                        contenedorApartamentosEspecificos.appendChild(bloqueDetalleOferta)
                                    }
                                    contenedorIndividualOferta.appendChild(contenedorApartamentosEspecificos)
                                }
                                if (descuentoAplicadoA === "totalNetoReserva") {
                                    const descuentoOfertaUI = document.createElement("div")
                                    descuentoOfertaUI.classList.add("contenedorTextoOferta")
                                    descuentoOfertaUI.textContent = descuentoOferta
                                    contenedorIndividualOferta.appendChild(descuentoOfertaUI)
                                    if (tipoDescuento === "porcentaje") {
                                        const tipoDescuentoUI = document.createElement("div")
                                        tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                        tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                        contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                    }
                                    if (tipoDescuento === "cantidadFija") {
                                        const tipoDescuentoUI = document.createElement("div")
                                        tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                        tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                        contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                    }
                                }
                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                        if (porDiasDeReserva?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detatllesReserva of oferta.porDiasDeReserva) {
                                const cantidad = detatllesReserva.cantidad
                                const tipoDescuento = detatllesReserva.tipoDescuento
                                const nombreOferta = detatllesReserva.nombreOferta
                                const numero = detatllesReserva.numero
                                const simboloNumero = detatllesReserva.simboloNumero
                                const definicion = detatllesReserva.definicion
                                const descuento = detatllesReserva.descuento
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionUI = document.createElement("div")
                                definicionUI.classList.add("contenedorTextoOferta")
                                definicionUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionUI)
                                if (tipoDescuento === "porcentaje") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento] + " rebajando el neto de la reserva en " + descuento + "$"
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                if (tipoDescuento === "cantidadFija") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento: " + cantidad + simboloDescuento[tipoDescuento]
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion

                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                        if (porRangoDeFechas?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detallesOferta of oferta.porRangoDeFechas) {
                                const cantidad = detallesOferta.cantidad
                                const tipoDescuento = detallesOferta.tipoDescuento
                                const definicion = detallesOferta.definicion
                                const nombreOferta = detallesOferta.nombreOferta
                                const diasAfectados = detallesOferta.diasAfectados
                                const descuento = detallesOferta.descuento
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionOfertaUI)
                                const tipoDescuentoUI = document.createElement("div")
                                tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                tipoDescuentoUI.textContent = "Descuento total de la oferta: " + descuento + "$"
                                contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                const contenedorDiasEspecificos = document.createElement("div")
                                contenedorDiasEspecificos.classList.add("componentes_ui_totales_ofertas_diasEspecificos_contenedor")
                                for (const detalleDelDia of diasAfectados) {
                                    const dia = detalleDelDia.dia
                                    const totaDiaNetoConOferta = detalleDelDia.totaDiaNetoConOferta
                                    const descuento = detalleDelDia.descuento
                                    const bloque = document.createElement("div")
                                    bloque.classList.add("resumen_reserva_detalle_oferta_apartamentos_especificos")
                                    const tituloUI = document.createElement("div")
                                    tituloUI.classList.add("negrita")
                                    tituloUI.innerHTML = dia
                                    bloque.appendChild(tituloUI)
                                    const totalSinOferta = document.createElement("div")
                                    totalSinOferta.textContent = "Total día con oferta: " + totaDiaNetoConOferta + "$"
                                    bloque.appendChild(totalSinOferta)
                                    const totalConOferta = document.createElement("div")
                                    totalConOferta.textContent = "Descuento: " + descuento + "$"
                                    bloque.appendChild(totalConOferta)
                                    contenedorDiasEspecificos.appendChild(bloque)
                                }
                                contenedorIndividualOferta.appendChild(contenedorDiasEspecificos)
                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                        if (porDiasDeAntelacion?.length) {
                            controlContenido = "desplegar"
                            const contenedorOfertaUI = document.createElement("div")
                            contenedorOfertaUI.classList.add("compomentes_ui_totales_ofertas_contenedorConjuntoOferta")
                            for (const detallesOferta of oferta.porDiasDeAntelacion) {
                                const cantidad = detallesOferta.cantidad
                                const tipoDescuento = detallesOferta.tipoDescuento
                                const definicion = detallesOferta.definicion
                                const nombreOferta = detallesOferta.nombreOferta
                                const descuento = detallesOferta.descuento
                                const contenedorIndividualOferta = document.createElement("div")
                                contenedorIndividualOferta.classList.add("compomentes_ui_totales_ofertas_contenedorOferta")
                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("contenedorTextoOferta")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorIndividualOferta.appendChild(nombreOfertaUI)
                                const definicionOfertaUI = document.createElement("div")
                                definicionOfertaUI.classList.add("contenedorTextoOferta")
                                definicionOfertaUI.textContent = definicion
                                contenedorIndividualOferta.appendChild(definicionOfertaUI)
                                if (tipoDescuento === "porcentaje") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento del " + cantidad + "% sobre el neto de la reserva."
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                if (tipoDescuento === "cantidadFija") {
                                    const tipoDescuentoUI = document.createElement("div")
                                    tipoDescuentoUI.classList.add("contenedorTextoOferta")
                                    tipoDescuentoUI.textContent = "Descuento de " + cantidad + "$ sobre el neto de la reserva"
                                    contenedorIndividualOferta.appendChild(tipoDescuentoUI)
                                }
                                contenedorOfertaUI.appendChild(contenedorIndividualOferta)
                            }
                            ofertasUI.appendChild(contenedorOfertaUI)
                        }
                    }
                    if (controlContenido === "desplegar") {
                        contenedorDesgloseTotales.appendChild(ofertasUI)
                    }


                    const impuestoUI = document.createElement("div")
                    impuestoUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const impuestoUITituloBloque = document.createElement("div")
                    impuestoUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                    impuestoUITituloBloque.textContent = "Impuestos"
                    impuestoUI.appendChild(impuestoUITituloBloque)




                    if (desgloseImpuestos.length === 0) {
                        const info = document.createElement("div")
                        info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                        info.textContent = "No hay información financiera sobre impuestos para mostrar"
                        impuestoUI.appendChild(info)
                    }
                    desgloseImpuestos.forEach((impuesto) => {
                        const impuestoTitulo = impuesto.nombreImpuesto
                        const tipoValor = impuesto.tipoValor
                        const tipoImpositivo = impuesto.tipoImpositivo
                        const calculoImpuestoPorcentaje = impuesto.calculoImpuestoPorcentaje
                        const impuestoUITitulo = document.createElement("div")
                        impuestoUITitulo.classList.add("reserva_resumen_desglose_pago_elemento")
                        const impuestoUITitulo_ = document.createElement("div")
                        impuestoUITitulo_.classList.add("reserva_resumen_apartamentoIUTitulo")
                        impuestoUITitulo_.classList.add("negrita")
                        impuestoUITitulo_.textContent = impuestoTitulo
                        impuestoUITitulo.appendChild(impuestoUITitulo_)
                        let simboloTipoImpuesto;
                        if (tipoValor === "porcentaje") {
                            simboloTipoImpuesto = "%";
                        }
                        if (tipoValor === "tasa") {
                            simboloTipoImpuesto = "$";
                        }
                        const impuestoUITipoImpositivo = document.createElement("div")
                        impuestoUITipoImpositivo.classList.add("reserva_resumen_impuestoUITipoImpositivo")
                        impuestoUITipoImpositivo.textContent = tipoImpositivo + simboloTipoImpuesto
                        impuestoUITitulo.appendChild(impuestoUITipoImpositivo)
                        const impuestoUITipoValor = document.createElement("div")
                        impuestoUITipoValor.classList.add("resumen_reserva_impuestoUITipoValor")
                        impuestoUITipoValor.textContent = tipoValor

                        if (calculoImpuestoPorcentaje) {
                            const impuestoUICalculoImpuestoPorcentaje = document.createElement("div")
                            impuestoUICalculoImpuestoPorcentaje.classList.add("resumen_reserva_impuestoUICalculoImpuestoPorcentaje")
                            impuestoUICalculoImpuestoPorcentaje.textContent = calculoImpuestoPorcentaje + "$"
                            impuestoUITitulo.appendChild(impuestoUICalculoImpuestoPorcentaje)
                        }
                        impuestoUI.appendChild(impuestoUITitulo)
                    })


                    if (desgloseImpuestos.length > 0) {
                        contenedorDesgloseTotales.appendChild(impuestoUI)
                    }

                    const totalesUI = document.createElement("div")
                    totalesUI.classList.add("reserva_resumen_desglose_pago_bloque")
                    const totalesUITituloBloque = document.createElement("div")
                    totalesUITituloBloque.classList.add("reserva_resumen_desglose_pago_titulo")
                    totalesUITituloBloque.textContent = "Totales"
                    totalesUI.appendChild(totalesUITituloBloque)
                    const totalPromedioNetoPorNoche = totales.promedioNetoPorNoche ?
                        totales.promedioNetoPorNoche + "$" :
                        "No hay informacion del total promedio neto por noche";
                    const totalReservaNeto = totales.totalReservaNeto ? totales.totalReservaNeto + "$" : "No hay información del total neto de la reserva"
                    const totalImpuestos = totales.totalImpuestos ? totales.totalImpuestos + "$" : "No hay información del total de los impuestos"
                    const totalDescuentos = totales.totalDescuentos ? totales.totalDescuentos + "$" : "No hay infomración del total desconectado"
                    const totalReservaNetoSinDescuentos = totales.totalReservaNetoSinOfertas ? totales.totalReservaNetoSinOfertas + "$" : "No hay informacion del total de la reserva sin descuentos"
                    if (totales.totalReservaNeto) {
                        const totalReservaNetoDiaUI = document.createElement("div")
                        totalReservaNetoDiaUI.classList.add("detalleDelTotal")
                        totalReservaNetoDiaUI.textContent = "Precio medio neto de la reserva por noche: " + totalPromedioNetoPorNoche
                        totalesUI.appendChild(totalReservaNetoDiaUI)
                        if (totales.totalDescuentos) {
                            const totalDescuentosAplicadosUI = document.createElement("div")
                            totalDescuentosAplicadosUI.classList.add("detalleDelTotal")
                            totalDescuentosAplicadosUI.textContent = "Descuento total por todas las ofertas aplicadas: " + totalDescuentos
                            totalesUI.appendChild(totalDescuentosAplicadosUI)
                            const totalReservaNetoSinOfertasUI = document.createElement("div")
                            totalReservaNetoSinOfertasUI.classList.add("detalleDelTotal")
                            totalReservaNetoSinOfertasUI.textContent = "Total neto sin ofertas aplicadas: " + totalReservaNetoSinDescuentos
                            totalesUI.appendChild(totalReservaNetoSinOfertasUI)
                        }
                        const totalReservaNetoUI = document.createElement("div")
                        totalReservaNetoUI.classList.add("detalleDelTotal")
                        totalReservaNetoUI.textContent = "Total reserva neto: " + totalReservaNeto
                        totalesUI.appendChild(totalReservaNetoUI)
                        const totalImpuestosUI = document.createElement("div")
                        totalImpuestosUI.classList.add("detalleDelTotal")
                        totalImpuestosUI.textContent = "Total impuestos aplicados: " + totalImpuestos
                        totalesUI.appendChild(totalImpuestosUI)
                        const totalConImpuestosUI = document.createElement("div")
                        totalConImpuestosUI.classList.add("detalleDelTotal")
                        totalConImpuestosUI.classList.add("negrita")
                        totalConImpuestosUI.textContent = "Total final: " + totales.totalConImpuestos + "$"
                        totalesUI.appendChild(totalConImpuestosUI)
                    } else {
                        const info = document.createElement("div")
                        info.classList.add("componentes_ui_totales_mensajeInfoSinInformacion")
                        info.textContent = "No hay información de totales"
                        totalesUI.appendChild(info)
                    }
                    contenedorDesgloseTotales.appendChild(totalesUI)
                    selectorDestino.appendChild(contenedorDesgloseTotales)



                },
            },
            componentesComplejos: {
                selectorApartamentosEspecificosUI: {
                    despliegue: function (data) {
                        const textoContenedorVacio = data.textoContenedorVacio || 'Añade apartamentos'
                        const tipoDespliegue = data.tipoDespliegue
                        const metodoPersonalizado = data?.metodoPersonalizado
                        if (tipoDespliegue !== "total" && tipoDespliegue !== "parcial") {
                            const m = "en selectorApartamentosEspecificosUI el tipoDespliegue solo puede ser parcial o total"
                            return casaVitini.ui.componentes.advertenciaInmersiva(m)
                        }

                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                        const contenedor = document.createElement('div')
                        contenedor.setAttribute("instanciaUID", instanciaUID)
                        contenedor.classList.add(
                            'flexVertical',
                            "gap6"
                        )

                        const contenedorSelectorApartamentos = document.createElement('div');
                        contenedorSelectorApartamentos.classList.add('crearOfertaConentenedor');
                        const boton = document.createElement('p');
                        boton.classList.add('crearOFertaBotonAnadirApartamento');
                        boton.setAttribute('componente', 'botonAnadirApartamentoOferta');
                        boton.textContent = 'Añadir apartamento';
                        boton.addEventListener("click", (e) => {
                            const data = {
                                e: e,
                                instanciaUID: instanciaUID,
                                tipoDespliegue: tipoDespliegue,
                                metodoPersonalizado
                            }
                            this.apartamentosDisponibles(data)
                        })
                        contenedorSelectorApartamentos.appendChild(boton);

                        const contenedorApartamentos = document.createElement('div');
                        contenedorApartamentos.classList.add('crearOfertaZonaAnadirApartamento');
                        contenedorApartamentos.setAttribute('componente', 'zonaAnadirApartamento');

                        const info = document.createElement('p');
                        info.classList.add('crearApartamentoInfoSinApartamento');
                        info.setAttribute('componente', 'infoSinApartamento');
                        info.textContent = textoContenedorVacio

                        contenedorApartamentos.appendChild(info);
                        contenedorSelectorApartamentos.appendChild(contenedorApartamentos);
                        contenedor.appendChild(contenedorSelectorApartamentos);
                        return contenedor
                    },
                    apartamentosDisponibles: async function (data) {
                        const metodoPersonalizado = data.metodoPersonalizado
                        const main = document.querySelector("main")
                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                        const instanciaUID_ui = ui.getAttribute("instanciaUID")
                        const contenedor = ui.querySelector("[componente=contenedor]")
                        main.appendChild(ui)

                        const e = data.e
                        const instanciaUID = data.instanciaUID
                        const tipoDespliegue = data.tipoDespliegue

                        const spinner = casaVitini.ui.componentes.spinner({
                            mensaje: "Obteniendo apartamentos..."
                        })
                        contenedor.appendChild(spinner)

                        const transaccion = {
                            zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_ui}"]`)
                        if (!instanciaRenderizada) { return }
                        spinner.remove()


                        if (respuestaServidor?.error) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            contenedor.innerHTML = null
                            const apartamentosDisponibles = respuestaServidor?.ok
                            apartamentosDisponibles.forEach((apartamentoDisponible) => {
                                const apartamentoIDV = apartamentoDisponible.apartamentoIDV
                                const apartamentoUI = apartamentoDisponible.apartamentoUI
                                const estadoConfiguracionIDV = apartamentoDisponible.estadoConfiguracionIDV

                                let estadoUI
                                if (estadoConfiguracionIDV === "disponible") {
                                    estadoUI = "Disponible"
                                }
                                if (estadoConfiguracionIDV === "nodisponible") {
                                    estadoUI = "No disponible"
                                }
                                const apartamentoDetallesUI = document.createElement("div")
                                apartamentoDetallesUI.classList.add("crearOfertaApartamentoUI")
                                apartamentoDetallesUI.setAttribute("apartamentoIDV", apartamentoIDV)
                                apartamentoDetallesUI.setAttribute("apartamentoUI", apartamentoUI)
                                apartamentoDetallesUI.setAttribute("apartamentoComoOpcion", apartamentoIDV)
                                apartamentoDetallesUI.addEventListener("click", () => {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const configuracion = {
                                        instanciaUID,
                                        apartamentoIDV,
                                        apartamentoUI,
                                        tipoDespliegue,
                                        metodoPersonalizado
                                    }



                                    this.insertarApartamento(configuracion)



                                })

                                const apartamentoTitulo = document.createElement("p")
                                apartamentoTitulo.classList.add("crearOfertaApartamentoTItulo")
                                apartamentoTitulo.textContent = apartamentoUI
                                apartamentoDetallesUI.appendChild(apartamentoTitulo)

                                const apartamentoEstadoUI = document.createElement("p")
                                apartamentoEstadoUI.classList.add("crearOfertaApartamentoEstado")
                                apartamentoEstadoUI.setAttribute("estadouI", estadoUI)
                                apartamentoEstadoUI.textContent = estadoUI
                                apartamentoDetallesUI.appendChild(apartamentoEstadoUI)

                                const selectorApartamentoYaRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"] [apartamentoSeleccionado=${apartamentoIDV}]`)
                                if (!selectorApartamentoYaRenderizado) {
                                    contenedor.appendChild(apartamentoDetallesUI)
                                }
                            })
                            const selectorApartamentoYaRenderizado = document.querySelectorAll(`[instanciaUID="${instanciaUID_ui}"] [apartamentoComoOpcion]`)
                            if (selectorApartamentoYaRenderizado?.length === 0) {
                                const info = document.createElement("p")
                                info.classList.add("crearApartamentoInfoSinApartamento")
                                info.setAttribute("componente", "infoSinApartamento")
                                info.textContent = "Todos los apartamentos estan insertados en este contenedor de apartamentos"
                                contenedor.appendChild(info)
                            }

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("botonV1")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.textContent = "Cerrar y volver"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            contenedor.appendChild(botonCancelar)
                        }
                    },
                    insertarApartamento: async function (data) {
                        const apartamentoIDV = data.apartamentoIDV
                        const apartamentoUI = data.apartamentoUI
                        const instanciaUID = data.instanciaUID
                        const tipoDespliegue = data.tipoDespliegue
                        const metodoPersonalizado = data.metodoPersonalizado


                        if (metodoPersonalizado === "comportamientoDePrecios") {
                            document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=infoSinApartamento]`).style.display = "none"

                            const apartamentoSeleccionadoUI = casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarOpcionesApartamento({
                                apartamentoIDV,
                                apartamentoUI,
                                instanciaUID,
                                tipoDespliegue
                            })
                            const zonaApartamentos = document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=zonaAnadirApartamento]`)
                            zonaApartamentos.appendChild(apartamentoSeleccionadoUI)
                        } else if (metodoPersonalizado === "simulador") {

                            const estado = await casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.alojamiento.insertarAlojamiento({
                                apartamentoIDV
                            })

                            if (estado !== false) {
                                document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=infoSinApartamento]`).style.display = "none"
                                const apartamentoSeleccionadoUI = casaVitini.administracion.simuladorDePrecios.componentes.apartamentoUI({
                                    apartamentoIDV,
                                    apartamentoUI,
                                    instanciaUID,
                                    tipoDespliegue
                                })
                                const zonaApartamentos = document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=zonaAnadirApartamento]`)
                                zonaApartamentos.appendChild(apartamentoSeleccionadoUI)
                            }
                            casaVitini.administracion.simuladorDePrecios.componentes.actualizaSimulacion()

                        } else {
                            document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=infoSinApartamento]`).style.display = "none"

                            const apartamentoSeleccionadoUI = this.apartamentoUI({
                                apartamentoIDV,
                                apartamentoUI,
                                instanciaUID,
                                tipoDespliegue
                            })
                            const zonaApartamentos = document.querySelector(`[instanciaUID="${instanciaUID}"] [componente=zonaAnadirApartamento]`)
                            zonaApartamentos.appendChild(apartamentoSeleccionadoUI)
                        }

                    },
                    apartamentoUI: (data) => {
                        const apartamentoIDV = data.apartamentoIDV
                        const apartamentoUI = data.apartamentoUI
                        const tipoDespliegue = data.tipoDespliegue
                        const seleccionadoInicial = data.seleccionadoInicial
                        const descuentoTotal = data.descuentoTotal || "0.00"


                        const apartamentoSeleccionadoUI = document.createElement("div")
                        apartamentoSeleccionadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                        apartamentoSeleccionadoUI.setAttribute("apartamentoSeleccionado", apartamentoIDV)
                        const tituloApartamento = document.createElement("div")
                        tituloApartamento.classList.add("crearOfertaApartamentoSeleccionadoUITitulo")
                        tituloApartamento.textContent = apartamentoUI
                        apartamentoSeleccionadoUI.appendChild(tituloApartamento)
                        const botonEliminarApartamento = document.createElement("div")
                        botonEliminarApartamento.classList.add("crearOfertaBoton")
                        botonEliminarApartamento.textContent = "Eliminar apartamento"
                        botonEliminarApartamento.addEventListener("click", (e) => {
                            const apartamentoRenderizado = e.target.closest("[apartamentoSeleccionado]")
                            apartamentoRenderizado.remove()
                            const instanciaUID = data.instanciaUID
                            const area = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            const conteoApartamentos = area.querySelectorAll(`[apartamentoSeleccionado]`)
                            if (conteoApartamentos.length === 0) {
                                area.querySelector("[componente=infoSinApartamento]").removeAttribute("style")
                            }
                        })
                        apartamentoSeleccionadoUI.appendChild(botonEliminarApartamento)

                        if (tipoDespliegue === "total") {
                            const cantidadUI = document.createElement("input")
                            cantidadUI.classList.add("crearOferDescuentoDedicadoCantidad")
                            cantidadUI.setAttribute("campoApartamentoSeleccionado", "descuentoTotal")
                            cantidadUI.placeholder = "Inserta la cantidad"
                            cantidadUI.value = descuentoTotal
                            apartamentoSeleccionadoUI.appendChild(cantidadUI)

                            const tipoDescuento = document.createElement("select")
                            tipoDescuento.classList.add("crearOfertaDescuentoDedicadoListaTipoDescuento")
                            tipoDescuento.setAttribute("campoApartamentoSeleccionado", "tipoDescuento")
                            const opcionPredeterminada = document.createElement("option")

                            opcionPredeterminada.disabled = true;
                            opcionPredeterminada.selected = true;
                            opcionPredeterminada.text = "Selecciona el tipo de descuento"
                            tipoDescuento.appendChild(opcionPredeterminada)
                            const tipoDescuentoOpciones = [
                                {
                                    nombreUI: "Selecciona el tipo de descuento",
                                },
                                {
                                    nombreUI: "Porcentaje",
                                    valorIDV: "porcentaje",
                                },
                                {
                                    nombreUI: "Cantidad fija",
                                    valorIDV: "cantidadFija",
                                }
                            ]
                            tipoDescuentoOpciones.forEach((tipoDescuentoOpcion) => {
                                const valorIDV = tipoDescuentoOpcion?.valorIDV || null
                                const nombreUI = tipoDescuentoOpcion.nombreUI

                                const opcion = document.createElement("option");
                                if (seleccionadoInicial === valorIDV) {
                                    opcion.selected = true;
                                } else {

                                }
                                opcion.value = valorIDV;
                                opcion.text = nombreUI;
                                opcion.setAttribute("tipoDescuentoIDV", valorIDV)
                                tipoDescuento.appendChild(opcion);
                            })
                            apartamentoSeleccionadoUI.appendChild(tipoDescuento)

                        }
                        return apartamentoSeleccionadoUI
                    },
                },
                contenedorFechasUI: (data) => {
                    const metodoSelectorDia = data?.metodoSelectorDia
                    const nombreContenedor = data?.nombreContenedor
                    const nombreFechaEntrada = data?.nombreFechaEntrada || "Fecha inicio"
                    const nombreFechaSalida = data?.nombreFechaSalida || "Fecha Final"
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()
                    const seleccionableDiaLimite = data?.seleccionableDiaLimite
                    const modo = data?.modo


                    if (modo !== "administracion" && modo !== "vision") {
                        const m = "contneedorFechaUI necesita un moodo."
                        return casaVitini.ui.componentes.advertenciaInmersiva(m)
                    }
                    const sobreControlConfiguracion = data.sobreControlConfiguracion || {}

                    const configuracionCalendarioInicio = data?.configuracionCalendarioInicio || {
                        rangoIDV: "inicioRango",
                        contenedorOrigenIDV: "[calendario=entrada]",
                        perfilMes: "calendario_entrada_perfilSimple",
                        metodoSelectorDia,
                        seleccionableDiaLimite,
                        ...sobreControlConfiguracion.configuracionInicio
                    }
                    configuracionCalendarioInicio.instanciaUID_contenedorFechas = instanciaUID_contenedorFechas

                    const configuracionCalendarioFinal = data?.configuracionCalendarioFinal || {
                        rangoIDV: "finalRango",
                        contenedorOrigenIDV: "[calendario=salida]",
                        perfilMes: "calendario_salida_perfilSimple",
                        metodoSelectorDia,
                        seleccionableDiaLimite,
                        ...sobreControlConfiguracion.configuracionFin

                    }
                    configuracionCalendarioFinal.instanciaUID_contenedorFechas = instanciaUID_contenedorFechas



                    if (nombreContenedor) {
                        const selector = document.querySelector(nombreContenedor)
                        if (selector) {
                            const error = "Cuidado, el contenedor de fecha ui tiene un nombre de contenedor ya existente en el dom."
                            return casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                    }

                    const divContenedor = document.createElement('div');
                    divContenedor.classList.add('contenedorFechasSobreBloque');
                    divContenedor.setAttribute("CSS", "selectorFechas")
                    divContenedor.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                    divContenedor.setAttribute('nombreContenedor', nombreContenedor);

                    const divContenedorHorizontal = document.createElement('div');
                    divContenedorHorizontal.classList.add('contenedorFechasCompartido');
                    const divContenedorFechaInicio = document.createElement('div');
                    divContenedorFechaInicio.classList.add('contenedorFecha');
                    divContenedorFechaInicio.setAttribute('calendario', 'entrada');
                    divContenedorFechaInicio.setAttribute('nombreContenedor', nombreContenedor);
                    divContenedorFechaInicio.setAttribute('componente', 'inicioOferta');
                    divContenedorFechaInicio.setAttribute('paralizadorEvento', 'ocultadorCalendarios');

                    if (modo === "administracion") {
                        divContenedorFechaInicio.addEventListener("click", (e) => {
                            casaVitini.ui.componentes.calendario.configurarCalendario(configuracionCalendarioInicio)
                        })
                    }

                    const pFechaInicio = document.createElement('p');
                    pFechaInicio.classList.add('negrita');
                    pFechaInicio.textContent = nombreFechaEntrada

                    const pFechaInicioSeleccionada = document.createElement('p');
                    pFechaInicioSeleccionada.classList.add('fechaInicio');
                    pFechaInicioSeleccionada.setAttribute('fechaUI', 'fechaInicio');
                    pFechaInicioSeleccionada.textContent = '(Seleccionar)';

                    divContenedorFechaInicio.appendChild(pFechaInicio);
                    divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);

                    const divContenedorFechaFin = document.createElement('div');
                    divContenedorFechaFin.classList.add('contenedorFecha');
                    divContenedorFechaFin.setAttribute('calendario', 'salida');
                    divContenedorFechaFin.setAttribute('paralizadorEvento', 'ocultadorCalendarios');
                    divContenedorFechaFin.setAttribute('componente', 'finOferta');
                    if (modo === "administracion") {
                        divContenedorFechaFin.addEventListener("click", () => {
                            casaVitini.ui.componentes.calendario.configurarCalendario(configuracionCalendarioFinal)
                        })

                    }


                    const pFechaFin = document.createElement('p');
                    pFechaFin.classList.add('negrita');
                    pFechaFin.textContent = nombreFechaSalida

                    const pFechaFinSeleccionada = document.createElement('p');
                    pFechaFinSeleccionada.classList.add('fechaFin');
                    pFechaFinSeleccionada.setAttribute('fechaUI', 'fechaFin');
                    pFechaFinSeleccionada.textContent = '(Seleccionar)';

                    divContenedorFechaFin.appendChild(pFechaFin);
                    divContenedorFechaFin.appendChild(pFechaFinSeleccionada);

                    divContenedorHorizontal.appendChild(divContenedorFechaInicio);
                    divContenedorHorizontal.appendChild(divContenedorFechaFin);

                    divContenedor.appendChild(divContenedorHorizontal);
                    return divContenedor
                },
                grid: {
                    despliegue: function (data) {
                        const configuracionGrid = data.configuracionGrid
                        const configuracionPaginador = data.configuracionPaginador
                        const metodoSalida = data.metodoSalida

                        configuracionPaginador.gridUID = configuracionGrid.gridUID
                        configuracionPaginador.pagina = configuracionGrid.pagina
                        configuracionPaginador.metodoSalida = metodoSalida

                        const filas = configuracionGrid.filas
                        const sentidoColumna = configuracionGrid.sentidoColumna ? configuracionGrid.sentidoColumna : ""
                        const nombreColumna = configuracionGrid.nombreColumna ? configuracionGrid.nombreColumna : ""
                        const pagina = configuracionGrid.pagina
                        const mascaraURL = configuracionGrid.mascaraURL
                        const columnasGrid = configuracionGrid.columnasGrid
                        const numeroColumnas = columnasGrid.length
                        const gridUID = configuracionGrid.gridUID
                        const destino = configuracionGrid.destino
                        const parametros = configuracionGrid.parametros ? configuracionGrid.parametros : {}
                        const almacen = configuracionGrid.almacen

                        if (!filas) {
                            const error = "No estoy recibiendo contenido para las filas, recuerda que constructorGridClientes, necesita el objeto ya procesador para el servidor, no lo envía"
                            return casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }


                        const contenedor_selector = document.querySelector(`[areaGrid="${gridUID}"]`)
                        if (!contenedor_selector) {
                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("areaGrid", gridUID)
                            contenedor.setAttribute("almacen", JSON.stringify(almacen))
                            contenedor.classList.add(
                                "flexVertical",
                            )

                            document.querySelector(`${destino}`)?.appendChild(contenedor)

                            const contenedorSelectorFiltros = document.createElement("div")
                            contenedorSelectorFiltros.setAttribute("contenedor", "filtrosOrden")
                            contenedor.appendChild(contenedorSelectorFiltros)

                            const contenedorResultados = document.createElement("div")
                            contenedorResultados.setAttribute("contenedor", "resultados")
                            contenedor.appendChild(contenedorResultados)

                            const contenedorPaginador = document.createElement("div")
                            contenedorPaginador.setAttribute("contenedor", "paginador")
                            contenedorPaginador.style.paddingTop = "6px"
                            contenedor.appendChild(contenedorPaginador)
                        }
                        const contenedor_renderizado = document.querySelector(`[areaGrid="${gridUID}"]`)

                        const contenedorResultados = contenedor_renderizado.querySelector(`[contenedor=resultados]`)

                        const valorColumnasCss = []
                        for (const i in columnasGrid) {
                            valorColumnasCss.push("auto")
                        }

                        const gridConstruido_selector = document.querySelector(`[areaGrid="${gridUID}"] [gridUID=${gridUID}]`)
                        if (!gridConstruido_selector) {
                            const constructorGrid = document.createElement("div")
                            constructorGrid.style.gridTemplateColumns = valorColumnasCss.join(" ")
                            constructorGrid.classList.add(
                                "administracionGridReservas"
                            )
                            constructorGrid.setAttribute("gridUID", gridUID)

                            contenedorResultados.appendChild(constructorGrid)
                        }
                        const gridConstruido_renderizado = document.querySelector(`[areaGrid="${gridUID}"] [gridUID=${gridUID}]`)
                        gridConstruido_renderizado.setAttribute("nombreColumnaSeleccionada", nombreColumna)
                        gridConstruido_renderizado.setAttribute("sentidoColumna", sentidoColumna)
                        gridConstruido_renderizado.setAttribute("numeroPagina", pagina)
                        gridConstruido_renderizado.setAttribute("parametros", JSON.stringify(parametros))

                        const selectorTitulosColumnas = document.querySelectorAll("[componenteGrid=celdaTituloColumna]")
                        selectorTitulosColumnas.forEach((celdaTituloColumna) => {
                            celdaTituloColumna.style.removeProperty("background")
                            celdaTituloColumna.querySelector("[sentidoIconos]")?.remove()
                        })
                        let icononombreColumna
                        let descripcionnombreColumna
                        if (sentidoColumna) {
                            if (sentidoColumna === "ascendente") {
                                icononombreColumna = "/componentes/iconos/ascendente.svg"
                                descripcionnombreColumna = "Ordenar acendentemente esta columna"
                            }
                            if (sentidoColumna === "descendente") {
                                icononombreColumna = "/componentes/iconos/descendente.svg"
                                descripcionnombreColumna = "Ordenar descendentemente esta columna"
                            }
                        }
                        const selectorColumnasRenderizadas = document.querySelectorAll(`[gridUID=${gridUID}] [nombreColumna]`)
                        selectorColumnasRenderizadas.forEach((columna) => {
                            columna.setAttribute("sentidoColumna", "")
                        })

                        columnasGrid.forEach((detallesColumna) => {

                            const columnaUI = detallesColumna.columnaUI
                            const columnaIDV = detallesColumna.columnaIDV

                            const columna_selector = gridConstruido_renderizado.querySelector(`[nombreColumna="${columnaIDV}"]`)
                            if (!columna_selector) {
                                const columnaElemento = document.createElement("div")
                                columnaElemento.textContent = columnaUI
                                columnaElemento.classList.add("administracionReservasColumnaTitulo")
                                columnaElemento.setAttribute("nombreColumna", columnaIDV)
                                columnaElemento.setAttribute("componenteGrid", "celdaTituloColumna")
                                columnaElemento.addEventListener("click", (e) => {
                                    const columna = e.target.closest("[nombreColumna]")
                                    this.ordenarPorColumna({
                                        gridUID,
                                        metodoSalida,
                                        columna
                                    })
                                })
                                gridConstruido_renderizado.appendChild(columnaElemento)
                            }
                            const columna_renderizada = gridConstruido_renderizado.querySelector(`[nombreColumna="${columnaIDV}"]`)

                            if (nombreColumna === columnaIDV) {
                                if (nombreColumna) {
                                    columna_renderizada.style.background = "grey"
                                    columna_renderizada.setAttribute("nombreColumna", columnaIDV)
                                    columna_renderizada.setAttribute("sentidoColumna", sentidoColumna)

                                    const iconoColumna = document.createElement("img");
                                    iconoColumna.src = icononombreColumna;
                                    iconoColumna.alt = descripcionnombreColumna;
                                    iconoColumna.classList.add("icononombreColumna");
                                    iconoColumna.setAttribute("sentidoIconos", sentidoColumna)
                                    columna_renderizada.appendChild(iconoColumna)
                                }
                            }
                        })

                        const selectorFilasGrid = gridConstruido_renderizado.querySelectorAll("[componenteGrid=fila]")
                        selectorFilasGrid.forEach((filaGrid) => {
                            filaGrid.remove()
                        })
                        const columnasAceptadas = columnasGrid.map((columna) => {
                            return columna.columnaIDV
                        })

                        filas.forEach((detallesFila) => {
                            const fila = document.createElement("a")
                            fila.setAttribute("class", "administracionReservasFila")
                            fila.setAttribute("componenteGrid", "fila")
                            fila.setAttribute("href", mascaraURL?.mascara + detallesFila[mascaraURL?.parametro])
                            fila.addEventListener("click", this.resolverFila)
                            for (const detallesObjeto of Object.entries(detallesFila)) {
                                const celdaIDV = detallesObjeto[0]
                                const celdaUI = detallesObjeto[1]
                                if (columnasAceptadas.includes(celdaIDV)) {
                                    const celda = document.createElement("div")
                                    celda.setAttribute("class", "administracionCeldaEstiloCompartido")
                                    celda.setAttribute("celdaIDV", celdaIDV)
                                    celda.textContent = celdaUI
                                    fila.appendChild(celda)
                                }
                            }
                            gridConstruido_renderizado.appendChild(fila)









                        })








                        this.tarjetas.selectorFiltro.despliegue({
                            gridUID,
                            columnas: columnasGrid,
                            columnaSeleccionada: nombreColumna,
                            sentidoSeleccionado: sentidoColumna,
                            metodoSalida
                        })

                        this.paginador(configuracionPaginador)

                        this.tarjetas.constructorTarjetas({
                            columnasGrid,
                            filas,
                            mascaraURL,
                            gridUID
                        })
                    },
                    cambiarPagina: (data) => {

                        const gridUID = data.gridUID
                        const metodoSalida = data.metodoSalida
                        const gridEnlazado = document.querySelector(`[gridUID=${gridUID}]`)

                        if (!gridEnlazado) {
                            const m = "cambiarPagina no encuentra el grid sobre el que actual"
                            return casaVitini.ui.componentes.advertenciaInmersiva(m)
                        }
                        const main = document.querySelector("main")
                        const instanciaUID = main.getAttribute("instanciaUID")
                        const tipoBoton = data.componenteID
                        const nombreColumna = gridEnlazado.getAttribute("nombreColumnaSeleccionada")
                        const sentidoColumna = gridEnlazado.getAttribute("sentidoColumna")
                        const paginaActual = Number(gridEnlazado.getAttribute("numeroPagina"))
                        const paginaTipo = data.paginaTipo


                        const transacccion = {
                            gridUID,
                            paginaTipo
                        }
                        if (nombreColumna) {
                            transacccion.nombreColumna = nombreColumna
                        }
                        if (sentidoColumna) {
                            transacccion.sentidoColumna = sentidoColumna
                        }
                        if (tipoBoton === "numeroPagina") {
                            const numeroPagina = data.numeroPagina
                            transacccion.pagina = Number(numeroPagina)
                            transacccion.origen = "botonNumeroPagina"
                        }
                        if (tipoBoton === "botonAdelantePaginacion") {
                            const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                            let mueveNavegadorHaciaAdelante = "Desactivado";
                            if (Number(posicionRelativa) === 10) {
                                mueveNavegadorHaciaAdelante = "Activado"
                            }
                            transacccion.pagina = paginaActual + 1
                            transacccion.origen = "botonNumeroPagina"
                            transacccion.moverHaciaAdelanteNavegacion = mueveNavegadorHaciaAdelante
                            transacccion.sentidoNavegacion = "Adelante"
                        }
                        if (tipoBoton === "botonAtrasPaginacion") {
                            const posicionRelativa = document.querySelector("[paginaTipo=actual]").getAttribute("posicionRelativa")
                            let mueveNavegadorHaciaAtras = "Desactivado";
                            if (Number(posicionRelativa) === 1) {
                                mueveNavegadorHaciaAtras = "Activado"
                            }
                            transacccion.pagina = paginaActual - 1
                            transacccion.origen = "botonNumeroPagina"
                            transacccion.mueveNavegadorHaciaAtras = mueveNavegadorHaciaAtras
                            transacccion.sentidoNavegacion = "Atras"
                        }

                        return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                            ruta: metodoSalida,
                            args: transacccion
                        })

                    },
                    paginador: function (metadatos) {

                        const paginaActual = metadatos.pagina
                        const moverHaciaAdelanteNavegacion = metadatos.moverHaciaAdelanteNavegacion
                        const mueveNavegadorHaciaAtras = metadatos.mueveNavegadorHaciaAtras
                        const sentidoNavegacion = metadatos.sentidoNavegacion
                        const posicionRelativa = metadatos.posicionRelativa
                        const paginasTotales = metadatos.paginasTotales
                        const cambiarPagina = metadatos.cambiarPagina
                        const metodoSalida = metadatos.metodoSalida
                        const gridUID = metadatos.gridUID

                        const granuladoURL = metadatos.granuladoURL
                        let inicioPaginacion = paginaActual
                        const constructorURL = (granuladoURL, pagina) => {
                            if (!granuladoURL) {
                                const error = "El constructor URL dentro del paginador necesita el gridUID"
                                return casaVitini.ui.componentes.advertenciaInmersiva(error)
                            }
                            if (!pagina) {
                                const error = "El constructor URL dentro del paginador necesita el pagina"
                                return casaVitini.ui.componentes.advertenciaInmersiva(error)
                            }
                            const directoriosFusion = granuladoURL.directoriosFusion
                            const parametros = granuladoURL.parametros
                            parametros.pagina = pagina
                            const parametrosArray = []
                            for (const [parametro, valor] of Object.entries(parametros)) {
                                const estructura = `${parametro}:${valor}`
                                parametrosArray.push(estructura)
                            }
                            const parametrosFusion = directoriosFusion + "/" + parametrosArray.join("/")
                            return parametrosFusion
                        }
                        const navegacionPaginacion = document.createElement("div")
                        navegacionPaginacion.classList.add("administracionNavegacionPaginacion")
                        navegacionPaginacion.setAttribute("componenteID", "navegacionPaginacion")
                        navegacionPaginacion.setAttribute("gridUID_enlazado", gridUID)
                        if (moverHaciaAdelanteNavegacion === "Desactivado" && sentidoNavegacion === "Adelante") {
                            inicioPaginacion = Number(document.querySelector("[posicionRelativa='1']").getAttribute("navegacionPagina"))
                        }
                        if (mueveNavegadorHaciaAtras === "Desactivado" && sentidoNavegacion === "Atras") {
                            if (posicionRelativa === 1) {
                                inicioPaginacion = paginaActual - (9)
                            }
                            if (posicionRelativa > 1) {
                                inicioPaginacion = Number(document.querySelector("[posicionRelativa='1']").getAttribute("navegacionPagina"))
                            }
                        }
                        if (cambiarPagina === "porNumeroDePagina") {
                            inicioPaginacion = Number(document.querySelector("[posicionRelativa='1']").getAttribute("navegacionPagina"))
                        }
                        if (paginaActual > 1) {
                            const navegacionPaginacionbotonAtras = document.createElement("a")
                            navegacionPaginacionbotonAtras.classList.add("navegacionPaginacion")
                            navegacionPaginacionbotonAtras.classList.add("navegacionPaginacionbotonAtras")
                            navegacionPaginacionbotonAtras.setAttribute("href", constructorURL(granuladoURL, (paginaActual - 1)))
                            navegacionPaginacionbotonAtras.addEventListener("click", (e) => {
                                e.preventDefault()
                                return this.cambiarPagina({
                                    gridUID: gridUID,
                                    componenteID: "botonAtrasPaginacion",
                                    paginaTipo: "otra",
                                    metodoSalida
                                });
                            })
                            navegacionPaginacionbotonAtras.textContent = "Atras"
                            navegacionPaginacion.appendChild(navegacionPaginacionbotonAtras)
                        } else {
                            document.querySelector("[componenteID=botonAtrasPaginacion]")?.remove()
                        }
                        let numRedondeado
                        if ((Math.floor(inicioPaginacion / 10) * 10) === inicioPaginacion) {
                            numRedondeado = inicioPaginacion - 9
                        } else {
                            numRedondeado = (Math.floor(inicioPaginacion / 10) * 10) + 1;
                        }
                        for (let ciclo = 0; ciclo < 10; ciclo++) {
                            const numeroPagina = numRedondeado + ciclo
                            const numeroPaginaElemento = document.createElement("a")
                            numeroPaginaElemento.classList.add("numeroPaginaElemento")
                            numeroPaginaElemento.setAttribute("href", constructorURL(granuladoURL, numeroPagina))
                            numeroPaginaElemento.setAttribute("posicionRelativa", ciclo + 1)
                            const estructura = {
                                gridUID: gridUID,
                                componenteID: "numeroPagina",
                                numeroPagina: numeroPagina,
                                metodoSalida
                            }

                            if (numeroPagina === paginaActual) {

                                numeroPaginaElemento.style.background = "blue"
                                numeroPaginaElemento.style.color = "white"
                                estructura.paginaTipo = "actual"
                            } else {

                                numeroPaginaElemento.style.removeProperty("color")
                                numeroPaginaElemento.style.removeProperty("background")
                                estructura.paginaTipo = "otra"
                            }
                            numeroPaginaElemento.addEventListener("click", (e) => {
                                e.preventDefault()
                                return this.cambiarPagina(estructura);
                            })
                            numeroPaginaElemento.textContent = numeroPagina
                            if (numeroPagina <= paginasTotales) {
                                navegacionPaginacion.appendChild(numeroPaginaElemento)
                            } else {
                                break
                            }
                        }
                        const listaPaginacionResponsiva = document.createElement("select")
                        listaPaginacionResponsiva.classList.add(
                            "componentes_ui_paginador_listaResponsiva",
                            "selector",
                            "textoCentrado"
                        )
                        listaPaginacionResponsiva.addEventListener("change", (e) => {
                            e.preventDefault()
                            const elemento = e.target
                            const selectedOption = elemento.options[elemento.selectedIndex];

                            return this.cambiarPagina({
                                gridUID: gridUID,
                                componenteID: "numeroPagina",
                                numeroPagina: e.target.value,
                                paginaTipo: selectedOption.getAttribute("paginaTipo"),
                                metodoSalida
                            });

                        })
                        for (let ciclo = 1; ciclo < (paginasTotales + 1); ciclo++) {
                            const numeroPagina = ciclo
                            const numeroPaginaElemento = document.createElement("option")

                            numeroPaginaElemento.setAttribute("numeroPagina", numeroPagina)
                            numeroPaginaElemento.value = numeroPagina

                            if (numeroPagina === paginaActual) {
                                numeroPaginaElemento.setAttribute("paginaTipo", "actual")
                                numeroPaginaElemento.style.background = "blue"
                                numeroPaginaElemento.style.color = "white"
                                numeroPaginaElemento.selected = true
                                numeroPaginaElemento.disabled = true
                            } else {
                                numeroPaginaElemento.setAttribute("paginaTipo", "otra")
                                numeroPaginaElemento.style.removeProperty("color")
                                numeroPaginaElemento.style.removeProperty("background")
                            }
                            numeroPaginaElemento.textContent = "Página: " + numeroPagina
                            listaPaginacionResponsiva.appendChild(numeroPaginaElemento)
                        }
                        navegacionPaginacion.appendChild(listaPaginacionResponsiva)
                        if (paginasTotales > 1 && paginaActual < paginasTotales) {
                            const navegacionPaginacionbotonAdelante = document.createElement("a")
                            navegacionPaginacionbotonAdelante.classList.add("navegacionPaginacion")
                            navegacionPaginacionbotonAdelante.classList.add("navegacionPaginacionbotonAdelante")
                            navegacionPaginacionbotonAdelante.setAttribute("href", constructorURL(granuladoURL, (paginaActual + 1)))
                            navegacionPaginacionbotonAdelante.addEventListener("click", (e) => {
                                e.preventDefault()

                                return this.cambiarPagina({
                                    gridUID: gridUID,
                                    componenteID: "botonAdelantePaginacion",
                                    paginaTipo: "otra",
                                    metodoSalida
                                })
                            })
                            navegacionPaginacionbotonAdelante.textContent = "Adelante"
                            navegacionPaginacion.appendChild(navegacionPaginacionbotonAdelante)
                        } else {
                            document.querySelector("[componenteID=botonAdelantePaginacion]")?.remove()
                        }
                        document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                        if (Number(paginasTotales) > 1) {
                            document.querySelector(`[areaGrid="${gridUID}"] [contenedor=paginador]`).appendChild(navegacionPaginacion)
                        }
                    },
                    ordenarPorColumna: async (data, e) => {
                        const metodoSalida = data.metodoSalida
                        const gridUID = data.gridUID
                        const columna = data.columna
                        const areaGrid = document.querySelector(`[areaGrid="${gridUID}"]`)
                        const grid = areaGrid.querySelector(`[gridUID="${gridUID}"]`)

                        const nombreColumna = columna.getAttribute("nombreColumna")
                        const selectorColumnasentido = columna.getAttribute("sentidoColumna")
                        const numeroPagina = grid.getAttribute("numeroPagina")
                        const transaccion = {
                            pagina: Number(numeroPagina),
                            origen: "tituloColumna"
                        }

                        if (selectorColumnasentido === "ascendente") {
                            transaccion.sentidoColumna = "descendente"
                            transaccion.nombreColumna = nombreColumna
                        }
                        if (!selectorColumnasentido) {
                            transaccion.sentidoColumna = "ascendente"
                            transaccion.nombreColumna = nombreColumna
                        }

                        return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                            ruta: metodoSalida,
                            args: transaccion
                        })
                    },
                    resolverFila: (transaccion) => {
                        transaccion.preventDefault()
                        transaccion.stopPropagation()
                        const servicioUID = transaccion.target.parentNode.getAttribute("href")
                        const navegacion = {
                            vista: servicioUID,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    },
                    tarjetas: {
                        selectorFiltro: {
                            despliegue: function (data) {
                                const gridUID = data.gridUID
                                const columnas = data.columnas
                                const metodoSalida = data.metodoSalida

                                const columnaSeleccioanda = data?.columnaSeleccionada || null
                                const sentidoSeleccionado = data?.sentidoSeleccionado || null

                                const selectorFiltroOrden = document.querySelector(`[areaGrid="${gridUID}"]`).querySelector("[contenedor=filtrosOrden]")

                                const contenedo_selector = selectorFiltroOrden.querySelector("[contenedor=filtrosDesplegables]")
                                if (!contenedo_selector) {

                                    const contenedorFiltrosOrden = document.createElement("div")
                                    contenedorFiltrosOrden.setAttribute("contenedor", "filtrosDesplegables")
                                    contenedorFiltrosOrden.classList.add(
                                        "flexHorizontal",
                                        "gap6"
                                    )


                                    const botonReseteo = document.createElement("div")
                                    botonReseteo.classList.add(
                                        "selector",
                                        "textoCentrado",
                                        "comportamientoBoton",
                                        "noSelecionable",
                                        "ratonDefault"
                                    )
                                    botonReseteo.textContent = "Resetear filtros"
                                    botonReseteo.addEventListener("click", (e) => {
                                        const contenedor = e.target.closest("[contenedor=filtrosOrden]")
                                        const selectorColumna = contenedor.querySelector("[selector=ordenPorColumna]")
                                        const selectorSentido = contenedor.querySelector("[selector=sentido]")
                                        selectorColumna.selectedIndex = 0
                                        selectorSentido.selectedIndex = 0
                                        this.pasarela({
                                            gridUID,
                                            metodoSalida
                                        })
                                    })
                                    contenedorFiltrosOrden.appendChild(botonReseteo)

                                    const selectorColumna = document.createElement("select")
                                    selectorColumna.setAttribute("selector", "ordenPorColumna")
                                    selectorColumna.addEventListener("change", () => {
                                        this.pasarela({
                                            gridUID,
                                            metodoSalida
                                        })
                                    })
                                    selectorColumna.classList.add(
                                        "selector",
                                        "textoCentrado"
                                    )
                                    contenedorFiltrosOrden.appendChild(selectorColumna)
                                    const opcionPreterminada = document.createElement("option");
                                    opcionPreterminada.disabled = "true"
                                    opcionPreterminada.value = ""
                                    opcionPreterminada.text = "Ordenar por columna";
                                    if (!columnaSeleccioanda) {
                                        opcionPreterminada.selected = "true"
                                    }

                                    selectorColumna.add(opcionPreterminada)

                                    columnas.forEach((columna) => {
                                        const columnaUI = columna.columnaUI
                                        const columnaIDV = columna.columnaIDV
                                        const opcion = document.createElement("option");
                                        opcion.value = columnaIDV;
                                        opcion.text = columnaUI;
                                        if (columnaSeleccioanda === columnaIDV) {
                                            opcion.selected = "true"
                                        }
                                        selectorColumna.add(opcion);
                                    })

                                    const selectorSentido = document.createElement("select")
                                    selectorSentido.setAttribute("selector", "sentido")
                                    selectorSentido.addEventListener("change", () => {
                                        this.pasarela({
                                            gridUID,
                                            metodoSalida
                                        })
                                    })

                                    selectorSentido.classList.add(
                                        "selector",
                                        "textoCentrado"
                                    )
                                    contenedorFiltrosOrden.appendChild(selectorSentido)
                                    const opcionSentido = document.createElement("option");
                                    opcionSentido.disabled = "true"
                                    opcionSentido.text = "Sentido";
                                    opcionSentido.value = ""
                                    if (!sentidoSeleccionado) {
                                        opcionSentido.selected = "true"
                                    }
                                    selectorSentido.add(opcionSentido)

                                    const sentidos = [
                                        {
                                            sentidoUI: "Ascendente",
                                            sentidoIDV: "ascendente"
                                        },
                                        {
                                            sentidoUI: "Descendente",
                                            sentidoIDV: "descendente"
                                        }
                                    ]

                                    sentidos.forEach((sentido) => {
                                        const sentidoUI = sentido.sentidoUI
                                        const sentidoIDV = sentido.sentidoIDV
                                        const opcion = document.createElement("option");
                                        opcion.value = sentidoIDV;
                                        opcion.text = sentidoUI;
                                        if (sentidoSeleccionado === sentidoIDV) {
                                            opcion.selected = "true"
                                        }
                                        selectorSentido.add(opcion);
                                    })

                                    selectorFiltroOrden.appendChild(contenedorFiltrosOrden)

                                }
                                const contenedor_renderizado = selectorFiltroOrden.querySelector("[contenedor=filtrosDesplegables]")

                                const selectorOrdenPorColumna = contenedor_renderizado.querySelector("[selector=ordenPorColumna]")
                                const selectorSentido = contenedor_renderizado.querySelector("[selector=sentido]")

                                if (columnaSeleccioanda) {
                                    selectorOrdenPorColumna.value = columnaSeleccioanda
                                } else {
                                    selectorOrdenPorColumna.selectedIndex = 0
                                }
                                if (sentidoSeleccionado) {
                                    selectorSentido.value = sentidoSeleccionado
                                } else {
                                    selectorSentido.selectedIndex = 0
                                }


                            },
                            pasarela: (data) => {
                                const gridUID = data.gridUID
                                const metodoSalida = data.metodoSalida
                                const areaGrid = document.querySelector(`[areaGrid="${gridUID}"]`)
                                const contenedor = areaGrid.querySelector("[contenedor=filtrosOrden]")
                                const selectorColumna = contenedor.querySelector("[selector=ordenPorColumna]").value
                                const selectorSentido = contenedor.querySelector("[selector=sentido]").value
                                const numeroPagina = areaGrid.querySelector(`[gridUID="${gridUID}"]`).getAttribute("numeroPagina")
                                const transaccion = {
                                    pagina: Number(numeroPagina),
                                    origen: "tituloColumna",
                                    granuladoURL: casaVitini.utilidades.granuladorURL()
                                }
                                if (selectorSentido) {
                                    transaccion.sentidoColumna = selectorSentido
                                }
                                if (selectorColumna) {
                                    transaccion.nombreColumna = selectorColumna
                                }

                                return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                    ruta: metodoSalida,
                                    args: transaccion
                                })
                            }
                        },
                        constructorTarjetas: (data) => {
                            const columnasGrid = data.columnasGrid
                            const filas = data.filas
                            const gridUID = data.gridUID
                            const mascaraURL = data.mascaraURL
                            const columnasAceptadas = columnasGrid.map((columna) => {
                                return columna.columnaIDV
                            })

                            const contenedorTarjetas = document.querySelector("[contenedor=tarjetas]")
                            contenedorTarjetas?.remove()

                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("contenedor", "tarjetas")
                            contenedor.classList.add(
                                "gap6"
                            )
                            document.querySelector(`[areaGrid="${gridUID}"]`)
                                .querySelector(`[contenedor=resultados]`)
                                .appendChild(contenedor)


                            filas.forEach(fila => {
                                const tarjeta = document.createElement("a")
                                tarjeta.setAttribute("componente", "tarjeta")
                                tarjeta.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "tarjeta",
                                    "borderRadius10",
                                    "backgroundGrey1",
                                    "padding10",
                                    "areaSinDecoracionPredeterminada",
                                    "ratonDefault",
                                    "comportamientoBoton"
                                )
                                tarjeta.href = mascaraURL?.mascara + fila[mascaraURL?.parametro]
                                tarjeta.setAttribute("vista", mascaraURL?.mascara + fila[mascaraURL?.parametro])
                                tarjeta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                contenedor.appendChild(tarjeta)

                                Object.entries(fila).forEach(([dataIDV, data]) => {
                                    if (columnasAceptadas.includes(dataIDV)) {

                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add(
                                            "flexVertical"
                                        )
                                        tarjeta.appendChild(contenedor)

                                        const titulo = document.createElement("div")
                                        titulo.innerHTML = dataIDV
                                        contenedor.appendChild(titulo)

                                        const dataUI = document.createElement("div")
                                        dataUI.classList.add(
                                            "negrita",
                                            "textoElipsis"
                                        )
                                        dataUI.textContent = data
                                        contenedor.appendChild(dataUI)
                                    }
                                })
                            })
                        },
                    }

                },
                detallesReservaUI: {
                    reservaUI: {
                        despliege: async function (data) {
                            const reservaUID = data.reservaUID
                            const configuracionVista = data.configuracionVista

                            const reserva = await this.global.obtenerReserva({
                                reservaUID,
                                configuracionVista
                            })
                            const reservaUI = this.ui.despliege({
                                reserva,
                                configuracionVista

                            })

                            const titularUI = reservaUI.querySelector("[contenedor=panelGlobal] [contenedor=titular]")
                            const estadoReservaUI = reservaUI.querySelector("[contenedor=panelGlobal] [contenedor=estadoReserva]")


                            if (configuracionVista === "publica") {
                                reservaUI.setAttribute("configuracionVista", configuracionVista)
                                reservaUI.querySelector("[contenedor=pendiente]")?.remove()
                                titularUI.style.pointerEvents = "none"
                                estadoReservaUI.style.pointerEvents = "none"

                                const contenedorFechas = reservaUI.querySelector("[nombreContenedor=rangoReserva]")
                                contenedorFechas.style.pointerEvents = "none"



                            } else {
                                titularUI.addEventListener("click", () => {
                                    this.titular.desplegarUI(reservaUID)
                                })
                                estadoReservaUI.addEventListener("click", () => {
                                    this.estado.panelExpandidoUI(reservaUID)
                                })
                            }
                            return reservaUI
                        },
                        ui: {
                            despliege: function (data) {
                                const configuracionVista = data.configuracionVista
                                const reserva = data.reserva.ok
                                const global = reserva.global

                                const fechaEntrada = global.fechaEntrada
                                const fechaSalida = global.fechaSalida
                                const porcentajeTranscurrido = global.porcentajeTranscurrido

                                const reservaUID = global.reservaUID
                                const estadoReservaIDV = global.estadoReservaIDV

                                const contenedor = this.componentesUI.contenedor(reservaUID)

                                const estadoPendienteUI = this.componentesUI.estadoPendienteUI.despliege({
                                    estadoReservaIDV,
                                    reservaUID
                                })
                                contenedor.appendChild(estadoPendienteUI)

                                const panelGlobal = this.componentesUI.bloqueGlobal.despliege(reserva)
                                contenedor.appendChild(panelGlobal)

                                const barraProgress = this.componentesUI.barraProgreso({
                                    reservaUID,
                                    porcentajeTranscurrido
                                })
                                contenedor.appendChild(barraProgress)


                                const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                                    nombreContenedor: "rangoReserva",
                                    modo: "administracion",
                                    nombreFechaEntrada: "Fecha entrada",
                                    nombreSalidaEntrada: "Fecha salida",
                                    configuracionCalendarioInicio: {
                                        rangoIDV: "inicioRango",
                                        contenedorOrigenIDV: "[calendario=entrada]",
                                        perfilMes: "calendario_entrada_asistido_detallesReserva_conPasado",
                                        mensajeInfo: "Selecciona la fecha de entrada que quieras actualizar en esta reserva",
                                        metodoSelectorDia: "ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.seleccionarDia",
                                    },

                                    configuracionCalendarioFinal: {
                                        rangoIDV: "finalRango",
                                        contenedorOrigenIDV: "[calendario=salida]",
                                        perfilMes: "calendario_salida_asistido_detallesReserva_conPasado",
                                        metodoSelectorDia: "ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.seleccionarDia",
                                        mensajeInfo: "Selecciona la fecha de salida que quieras actualizar en esta reserva.",

                                    }
                                })
                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.seleccionarDia
                                contenedor.appendChild(contenedorFechasUI);

                                const calendarioEntrada = contenedorFechasUI.querySelector("[calendario=entrada]")
                                const calendarioSalida = contenedorFechasUI.querySelector("[calendario=salida]")

                                calendarioEntrada.setAttribute("memoriaVolatil", fechaEntrada)
                                calendarioSalida.setAttribute("memoriaVolatil", fechaSalida)

                                calendarioEntrada.querySelector("[fechaUI=fechaInicio]").textContent = fechaEntrada
                                calendarioSalida.querySelector("[fechaUI=fechaFin]").textContent = fechaSalida



                                const contenedorBotones = this.componentesUI.categoriasGlobalesUI.despliege({
                                    rectangularidad: "horizontal",
                                    reservaUID: reservaUID,
                                    configuracionVista
                                })
                                contenedor.appendChild(contenedorBotones);
                                const contenedorDinamico = this.componentesUI.contenedorDinamico()
                                contenedor.appendChild(contenedorDinamico);
                                return contenedor

                            },
                            despliege_antiguo: async function (data) {

                                const detallesReserva = data.detallesReserva
                                const granuladoURL = casaVitini.utilidades.granuladorURL()

                                const posicionReservaUID = granuladoURL.directorios.findIndex(directorio => directorio === "reservas") + 1;

                                const categoriaGlobalInicial = granuladoURL.rawArray[3]

                                const global = detallesReserva.global
                                const detallesTitular = detallesReserva?.titular
                                const contenedorFinanciero = detallesReserva.contenedorFinanciero
                                const reservaUID = global.reservaUID

                                const porcentajeTranscurrido = global.porcentajeTranscurrido

                                const detallesDeLaReserva = respuestaServidor.reserva
                                const estadoReservaIDV = global.estadoReservaIDV
                                const estadoPagoIDV = global.estadoPagoIDV
                                const fechaCreacion = global.fechaCreacion
                                const origenIDV = global.origenIDV
                                const fechaEntrada = global.fechaEntrada
                                const fechaSalida = global.fechaSalida
                                const totalReserva = contenedorFinanciero?.desgloseFinanciero?.global?.totales?.totalFinal ?? "Sin información"

                                const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaEntrada)
                                const fechaFinal_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaSalida)

                                const titulo = document.querySelector(".tituloGris")

                                titulo?.remove()
                                let estadoReservaUI
                                if (estadoReservaIDV === "cancelada") {
                                    estadoReservaUI = "Cancelada"
                                }
                                if (estadoReservaIDV === "confirmada") {
                                    estadoReservaUI = "Confirmada"
                                }
                                if (estadoReservaIDV === "pendiente") {
                                    estadoReservaUI = "Pendiente"
                                }
                                let estadoPagoUI
                                if (estadoPagoIDV === "pagado") {
                                    estadoPagoUI = "Pagado"
                                }
                                if (estadoPagoIDV === "noPagado") {
                                    estadoPagoUI = "No pagado"
                                }
                                if (estadoPagoIDV === "pagadoParcialmente") {
                                    estadoPagoUI = "Pagado parcialmente"
                                }
                                if (estadoPagoIDV === "pagadoSuperadamente") {
                                    estadoPagoUI = "Pagado superadamente"
                                }
                                let nombreCompletoTitular = "(Níngun titular asignado)"

                                if (detallesTitular.nombreTitular) {
                                    nombreCompletoTitular = detallesTitular.nombreTitular
                                }
                                let origenUI
                                if (origenIDV === "cliente") {
                                    origenUI = "Cliente"
                                }
                                if (origenIDV === "administracion") {
                                    origenUI = "Adminitración"
                                }
                                const marcoElastico = document.createElement("div")
                                marcoElastico.classList.add("marcoElasticoRelativo")
                                marcoElastico.setAttribute("componente", "marcoElastico")

                                const divPrincipal = document.createElement("div");
                                divPrincipal.setAttribute("reservaUID", reservaUID)

                                divPrincipal.setAttribute("componente", "detalleReserva");
                                divPrincipal.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )

                                marcoElastico.appendChild(divPrincipal);

                                const contenedorPendiente = document.createElement("div")
                                if (estadoReservaIDV !== "pendiente") {
                                    contenedorPendiente.style.display = "none"
                                }
                                contenedorPendiente.setAttribute("contenedor", "pendiente")
                                contenedorPendiente.classList.add(
                                    "gap6",
                                    "borderRadius8",
                                    "contenedorPendiente"
                                )
                                divPrincipal.appendChild(contenedorPendiente);

                                const botonAceptar = document.createElement("div")
                                botonAceptar.classList.add(
                                    "botonV1",
                                    "comportamientoBoton"
                                )
                                botonAceptar.textContent = "Aceptar reserva"
                                botonAceptar.addEventListener("click", () => {
                                    this.estado.aceptarReserva({
                                        reservaUID
                                    })
                                })
                                contenedorPendiente.appendChild(botonAceptar);

                                const botonRechazar = document.createElement("div")
                                botonRechazar.classList.add(
                                    "botonV1",
                                    "comportamientoBoton"
                                )
                                botonRechazar.textContent = "Rechazar reserva"
                                botonRechazar.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.estado.rechazarReserva({
                                        reservaUID
                                    })
                                })
                                contenedorPendiente.appendChild(botonRechazar);



                                const divBloqueGeneral = document.createElement("div");
                                divBloqueGeneral.setAttribute("class", "reservaDetallesBloqueGeneral");
                                const divInformacionGeneral = document.createElement("div");
                                divInformacionGeneral.setAttribute("class", "administracionReservasDetalesMarcoEnvolventeInformacionGeneral");
                                const contenedorReseervaUID = document.createElement("div");
                                contenedorReseervaUID.setAttribute("class", "administracion_reservas_detallesReserva_contenedorReservaUID");
                                const pTitulo1 = document.createElement("p");
                                pTitulo1.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo1.textContent = "Reserva";
                                const pDato1 = document.createElement("p");
                                pDato1.classList.add(
                                    "contenedroTextoEspansivo"
                                ); adm
                                pDato1.setAttribute("dataReserva", "reservaID");
                                pDato1.setAttribute("componente", "reservaUID_" + reservaUID)
                                pDato1.textContent = reservaUID;
                                contenedorReseervaUID.appendChild(pTitulo1);
                                contenedorReseervaUID.appendChild(pDato1);
                                const contenedorRestoGlobal = document.createElement("div")
                                contenedorRestoGlobal.classList.add("administracion_reservas_detallesReserva_contenedorRestoGlobal")
                                const bloqueTitular = document.createElement("div");
                                bloqueTitular.setAttribute("class", "administracion_reservas_detallesReserva_panel_bloqueTitular");
                                bloqueTitular.setAttribute("contenedor", "titularUID")
                                bloqueTitular.addEventListener("click", this.titular.desplegarUI)
                                if (detallesTitular?.tipoTitularIDV === "titularCliente") {
                                    bloqueTitular.setAttribute("titularUID", detallesTitular.clienteUID)
                                }
                                if (detallesTitular) {
                                    bloqueTitular.setAttribute("tipoTitular", detallesTitular.tipoTitularIDV)
                                }
                                const tituloTitular = document.createElement("p");
                                tituloTitular.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                tituloTitular.textContent = "Titular de la reserva";
                                const nombreTitular = document.createElement("p");
                                nombreTitular.setAttribute("class", "marginCeroparaP");
                                nombreTitular.classList.add("contenedroTextoEspansivo");
                                nombreTitular.setAttribute("dataReserva", "nombreTitular");
                                nombreTitular.textContent = nombreCompletoTitular;
                                bloqueTitular.appendChild(tituloTitular);
                                bloqueTitular.appendChild(nombreTitular);
                                const divBloqueDual2 = document.createElement("div");
                                divBloqueDual2.setAttribute("class", "administracionReservaBloqueDual");
                                const pTitulo2 = document.createElement("p");
                                pTitulo2.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo2.textContent = "Fecha de creación UTC";
                                const pDato2 = document.createElement("p");
                                pDato2.setAttribute("class", "marginCeroparaP");
                                pDato2.setAttribute("dataReserva", "nada");
                                pDato2.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato2.textContent = fechaCreacion;
                                divBloqueDual2.appendChild(pTitulo2);
                                divBloqueDual2.appendChild(pDato2);
                                const divBloqueDual3 = document.createElement("div");
                                divBloqueDual3.setAttribute("class", "administracionReservaBloqueDual");
                                const pTitulo3 = document.createElement("p");
                                pTitulo3.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo3.textContent = "Origen de la reserva";
                                const pDato3 = document.createElement("p");
                                pDato3.setAttribute("class", "marginCeroparaP");
                                pDato3.setAttribute("dataReserva", "origen");
                                pDato3.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato3.textContent = origenUI;
                                divBloqueDual3.appendChild(pTitulo3);
                                divBloqueDual3.appendChild(pDato3);
                                const divBloqueDual4 = document.createElement("div");
                                divBloqueDual4.setAttribute("class", "administracion_reservas_detallesReserva_panel_bloqueTitular");
                                divBloqueDual4.setAttribute("contenedor", "estadoReservaIDV")
                                const pTitulo4 = document.createElement("p");
                                pTitulo4.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo4.textContent = "Estado de la reserva";
                                const pDato4 = document.createElement("p");
                                pDato4.setAttribute("class", "marginCeroparaP");
                                pDato4.setAttribute("dataReserva", "estado");
                                pDato4.setAttribute("estadoReservaIDV", estadoReservaIDV);
                                pDato4.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato4.textContent = estadoReservaUI;
                                divBloqueDual4.addEventListener("click", (e) => {
                                    this.estado.panelExpandidoUI({
                                        reservaUID,
                                        estadoActual: e.target.closest("[contenedor=estadoReservaIDV]")
                                            .querySelector("[estadoReservaIDV]")
                                            .getAttribute("estadoReservaIDV")
                                    })
                                })
                                divBloqueDual4.appendChild(pTitulo4);

                                divBloqueDual4.appendChild(pDato4);
                                const divBloqueDual5 = document.createElement("div");
                                divBloqueDual5.setAttribute("class", "administracionReservaBloqueDual");
                                const pTitulo5 = document.createElement("p");
                                pTitulo5.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo5.textContent = "Estado del pago";
                                const pDato5 = document.createElement("p");
                                pDato5.setAttribute("class", "marginCeroparaP");
                                pDato5.setAttribute("dataReserva", "estadoPago");
                                pDato5.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato5.textContent = estadoPagoUI;
                                divBloqueDual5.appendChild(pTitulo5);
                                divBloqueDual5.appendChild(pDato5);
                                const divBloqueDual6 = document.createElement("div");
                                divBloqueDual6.setAttribute("class", "administracionReservaBloqueDual");
                                const pTitulo6 = document.createElement("p");
                                pTitulo6.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                pTitulo6.textContent = "Total";
                                const pDato6 = document.createElement("p");
                                pDato6.setAttribute("class", "marginCeroparaP");
                                pDato6.setAttribute("dataReserva", "totalReservaConImpuestos");
                                pDato6.classList.add("adminsitracion_reservas_detallesReserva_contenedorDatoGlobal");
                                pDato6.textContent = totalReserva;
                                divBloqueDual6.appendChild(pTitulo6);
                                divBloqueDual6.appendChild(pDato6);
                                divInformacionGeneral.appendChild(contenedorReseervaUID);
                                contenedorRestoGlobal.appendChild(bloqueTitular);
                                contenedorRestoGlobal.appendChild(divBloqueDual2);
                                contenedorRestoGlobal.appendChild(divBloqueDual3);
                                contenedorRestoGlobal.appendChild(divBloqueDual4);
                                contenedorRestoGlobal.appendChild(divBloqueDual5);
                                contenedorRestoGlobal.appendChild(divBloqueDual6);

                                divInformacionGeneral.appendChild(contenedorRestoGlobal);
                                divBloqueGeneral.appendChild(divInformacionGeneral);
                                divPrincipal.appendChild(divBloqueGeneral);



                                const nombreClaseDinamica = `barraProgresso-anchoDinamico-${reservaUID}`;
                                if (!document.querySelector(`.${nombreClaseDinamica}`)) {

                                    const style = document.createElement('style');
                                    style.innerHTML = `
                                        .${nombreClaseDinamica} {
                                            width: ${porcentajeTranscurrido}%;
                                    `;
                                    document.querySelector("main").appendChild(style);
                                }


                                const contenedorProgreso = document.createElement("div")
                                contenedorProgreso.classList.add(
                                    "backgroundGrey1",
                                    "borderRadius8",
                                )
                                contenedorProgreso.style.height = "20px"
                                contenedorProgreso.style.overflow = "hidden"
                                divPrincipal.appendChild(contenedorProgreso);
                                const barraProgresso = document.createElement("div")
                                barraProgresso.setAttribute("componente", "progreso")
                                barraProgresso.classList.add(
                                    "barraProgresso",
                                    nombreClaseDinamica
                                )





                                contenedorProgreso.appendChild(barraProgresso);
                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.seleccionarDia
                                const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({

                                    nombreContenedor: "rangoReserva",
                                    modo: "administracion",
                                    nombreFechaEntrada: "Fecha entrada",
                                    nombreSalidaEntrada: "Fecha salida",
                                    configuracionCalendarioInicio: {
                                        rangoIDV: "inicioRango",
                                        contenedorOrigenIDV: "[calendario=entrada]",
                                        perfilMes: "calendario_entrada_asistido_detallesReserva_conPasado",
                                        mensajeInfo: "Selecciona la fecha de entrada que quieras actualizar en esta reserva",
                                        metodoSelectorDia: "administracion.reservas.detallesReserva.reservaUI.fechas.seleccionarDia",
                                    },

                                    configuracionCalendarioFinal: {
                                        rangoIDV: "finalRango",
                                        contenedorOrigenIDV: "[calendario=salida]",
                                        perfilMes: "calendario_salida_asistido_detallesReserva_conPasado",
                                        metodoSelectorDia: "administracion.reservas.detallesReserva.reservaUI.fechas.seleccionarDia",
                                        mensajeInfo: "Selecciona la fecha de salida que quieras actualizar en esta reserva.",

                                    }
                                })
                                divPrincipal.appendChild(contenedorFechasUI);

                                const selectorEntrada = contenedorFechasUI.querySelector("[calendario=entrada]")
                                const selectorSalida = contenedorFechasUI.querySelector("[calendario=salida]")

                                selectorEntrada.setAttribute("memoriaVolatil", fechaEntrada)
                                selectorSalida.setAttribute("memoriaVolatil", fechaSalida)

                                const fechaEntradaUI = selectorEntrada.querySelector("[fechaUI=fechaInicio]")
                                const fechaSalidaUI = selectorSalida.querySelector("[fechaUI=fechaFin]")

                                fechaEntradaUI.textContent = fechaInicio_humana
                                fechaSalidaUI.textContent = fechaFinal_humana




                                const divPropuestaCambioFecha = document.createElement("div");
                                divPropuestaCambioFecha.setAttribute("class", "resertaDetallesPropuestaCambioFechaReserva");
                                divPropuestaCambioFecha.setAttribute("componente", "espacioPropuestaCambioFechaReserva");

                                divPrincipal.appendChild(divPropuestaCambioFecha);
                                const contenedorCategoriasGlobales = document.createElement("div")
                                contenedorCategoriasGlobales.classList.add("administracion_reservas_detallesReserva_contenedorCategoriasGlobales")
                                const contenedorMenuExpandido = document.createElement("div")
                                contenedorMenuExpandido.classList.add("administracion_reservas_detallesReserva_contenedorMenuExpandido")

                                const contenedorBotones = this.categorias.categoriasGlobalesBotonesUI({
                                    rectangularidad: "horizontal",
                                    reservaUID: reservaUID
                                })
                                contenedorMenuExpandido.appendChild(contenedorBotones);

                                const marcoMenuResponsivo = document.createElement("div");
                                marcoMenuResponsivo.setAttribute("class", "administracion_reserva_detallesReserva_marcoMenuResponsivo");
                                marcoMenuResponsivo.textContent = "Menú reserva"
                                marcoMenuResponsivo.addEventListener("click", () => {
                                    document.body.style.overflow = "hidden";
                                    this.categorias.desplegarMenuResponsivo(reservaUID)
                                })
                                contenedorCategoriasGlobales.appendChild(marcoMenuResponsivo);
                                contenedorCategoriasGlobales.appendChild(contenedorMenuExpandido);
                                divPrincipal.appendChild(contenedorCategoriasGlobales);
                                const contenedorDinamico = document.createElement("div")
                                contenedorDinamico.classList.add("administracion_reservas_detallesReserva_contenedorDinamico")
                                contenedorDinamico.setAttribute("componente", "contenedorDinamico")
                                divPrincipal.appendChild(contenedorDinamico)
                                const reservaDetallesBloqueAlojamineto = document.createElement("div");
                                reservaDetallesBloqueAlojamineto.setAttribute("class", "reservaDetallesBloqueAlojamineto");
                                reservaDetallesBloqueAlojamineto.setAttribute("componente", "marcoAlojamiento");


                                const divEspacioTotales = document.createElement("div");
                                divEspacioTotales.setAttribute("class", "resertaDtallesEspacioTotales");
                                divEspacioTotales.setAttribute("componente", "espacioTotalesReserva");




                                const seccion = document.querySelector("main:not([estado=obsoleto])")
                                seccion.appendChild(marcoElastico)
                                if (categoriaGlobalInicial) {

                                    const categoriaCammelCase = categoriaGlobalInicial.replace(/_([a-z])/g, (match, group) => group.toUpperCase());
                                    const metadatos = {
                                        categoria: categoriaCammelCase,
                                        origen: "url",
                                        reservaUID: reservaUID
                                    }
                                    await this.categorias.controladorCategorias(metadatos)
                                } else {

                                    const directoriosFusionLimpios = []
                                    granuladoURL.directorios.forEach((directorio, indice) => {
                                        if (indice <= posicionReservaUID) {
                                            directoriosFusionLimpios.push(directorio)
                                        }
                                    })

                                    const categoriaAGuardarURL = (categoriaGlobalInicial) => {
                                        if (categoriaGlobalInicial) {
                                            return "/" + categoriaGlobalInicial
                                        } else {
                                            return ""
                                        }
                                    }

                                    const directoriosFusion = "/administracion/reservas/reserva:" + reservaUID + categoriaAGuardarURL(categoriaGlobalInicial)

                                    const componentesExistenteUID = "reservaUID_" + reservaUID
                                    const titulo = "Casa Vitini"
                                    const estado = {
                                        zona: directoriosFusion,
                                        EstadoInternoZona: "estado",
                                        tipoCambio: "parcial",
                                        componenteExistente: componentesExistenteUID,
                                        funcionPersonalizada: "administracion.reservas.detallesReserva.reservaUI.categorias.limpiarMenusCategorias"
                                    }
                                    window.history.replaceState(estado, titulo, directoriosFusion);
                                }


                            },
                            componentesUI: {
                                contenedor: (reservaUID) => {
                                    const contenedor = document.createElement("div");
                                    contenedor.setAttribute("ui", "reservaUI")
                                    contenedor.setAttribute("reservaUID", reservaUID)
                                    contenedor.setAttribute("componente", "detalleReserva");
                                    contenedor.classList.add(
                                        "flexVertical",
                                        "gap6"
                                    )
                                    return contenedor
                                },
                                estadoPendienteUI: {
                                    despliege: function (data) {
                                        const estadoReservaIDV = data.estadoReservaIDV
                                        const reservaUID = data.reservaUID


                                        const contenedor = document.createElement("div")
                                        if (estadoReservaIDV !== "pendiente") {
                                            contenedor.style.display = "none"
                                        }
                                        contenedor.setAttribute("contenedor", "pendiente")
                                        contenedor.classList.add(
                                            "gap6",
                                            "borderRadius8",
                                            "contenedorPendiente"
                                        )

                                        const botonAceptar = document.createElement("div")
                                        botonAceptar.classList.add(
                                            "botonV1",
                                            "comportamientoBoton"
                                        )
                                        botonAceptar.textContent = "Aceptar reserva"
                                        botonAceptar.addEventListener("click", () => {
                                            this.com.aceptarReserva({
                                                reservaUID
                                            })
                                        })

                                        contenedor.appendChild(botonAceptar);

                                        const botonRechazar = document.createElement("div")
                                        botonRechazar.classList.add(
                                            "botonV1",
                                            "comportamientoBoton"
                                        )
                                        botonRechazar.textContent = "Rechazar reserva"
                                        botonRechazar.addEventListener("click", () => {
                                            this.com.rechazarReserva({
                                                reservaUID
                                            })
                                        })
                                        contenedor.appendChild(botonRechazar);
                                        return contenedor

                                    },
                                    com: {
                                        aceptarReserva: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmas que aceptas la reserva ${reservaUID}`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "AAl confirmar una reserva pendiente, cambiarás el estado de pendiente.Ha confirmado.La reserva dejará de ser visible desde la sección de reservas confirmadas.Si necesitas volver a poner la reserva en estado pendiente, pulsa en el estado de la reserva para poder cambiarla."

                                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                            botonAceptar.textContent = "Comfirmar y aceptar reserva"
                                            botonAceptar.addEventListener("click", () => {
                                                this.confirmarNuevoEstado({
                                                    reservaUID,
                                                    instanciaUID_aceptarReserva,
                                                    nuevoEstado: "confirmada"
                                                })
                                            })
                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"
                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        rechazarReserva: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()

                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmas que rechazas la reserva ${reservaUID}`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "Rechazar una reserva implica cancelar la reserva."

                                            const botonRechazar = constructor.querySelector("[boton=aceptar]")
                                            botonRechazar.textContent = "Rechazar reserva"
                                            botonRechazar.addEventListener("click", (e) => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.confirmaCancelacion({
                                                    tipoBloqueoIDV: "sinBloqueo"
                                                })
                                            })

                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cerrar y volver"
                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        ponerReservaEnPendiente: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmas que aceptas la reserva ${reservaUID}`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "Al confirmar una reserva pendiente, cambiarás el estado de pendiente.Ha confirmado.La reserva dejará de ser visible desde la sección de reservas confirmadas.Si necesitas volver a poner la reserva en estado pendiente, pulsa en el estado de la reserva para poder cambiarla"

                                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                            botonAceptar.textContent = "Comfirmar y aceptar reserva"
                                            botonAceptar.addEventListener("click", () => {
                                                this.confirmarNuevoEstado({
                                                    reservaUID,
                                                    instanciaUID_aceptarReserva,
                                                    nuevoEstado: "pendiente"
                                                })
                                            })
                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"
                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        confirmarNuevoEstado: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const nuevoEstado = data.nuevoEstado
                                            const instanciaUID_aceptarReserva = data.instanciaUID_aceptarReserva

                                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_aceptarReserva}"]`)
                                            const contenedor = ui.querySelector("[componente=constructor]")
                                            contenedor.innerHTML = null

                                            const spinner = casaVitini.ui.componentes.spinner({
                                                mensaje: "Aceptando reserva un momento por favor..."
                                            })
                                            contenedor.appendChild(spinner)

                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/global/actualizarEstadoReserva",
                                                reservaUID: String(reservaUID),
                                                nuevoEstado
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            if (!uiRenderizada) { return }
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();

                                            if (respuestaServidor?.error) {
                                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                const estadoUI = uiRenderizada.querySelector("[dataReserva=estado]")
                                                const contenedorPendienteUI = uiRenderizada.querySelector("[contenedor=pendiente]")
                                                const estadoActual = respuestaServidor.estadoActual


                                                if (estadoActual === "pendiente") {
                                                    estadoUI.textContent = "Pendiente"
                                                    estadoUI.setAttribute("estadoReservaIDV", "pendiente")
                                                    contenedorPendienteUI.style.display = "grid"

                                                }
                                                if (estadoActual === "confirmada") {
                                                    estadoUI.textContent = "Confirmada"
                                                    estadoUI.setAttribute("estadoReservaIDV", "confirmada")
                                                    contenedorPendienteUI.style.display = "none"
                                                }

                                            }

                                        },
                                        panelExpandidoUI: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const estadoActual = data.estadoActual

                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Estado de la reserva ${reservaUID}`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")

                                            if (estadoActual === "confirmada") {
                                                mensaje.textContent = "El estado actual de la reserva es confirmado.Si se necesita, puedes cambiar el estado de esta reserva a pendiente.Esto permitirá insertar la reserva en reservas pendientes de revisión"

                                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                                botonAceptar.textContent = "Pasar el estado de esta reserva a pendiente de revisión"
                                                botonAceptar.addEventListener("click", () => {
                                                    this.confirmarNuevoEstado({
                                                        reservaUID,
                                                        instanciaUID_aceptarReserva,
                                                        nuevoEstado: "pendiente"
                                                    })
                                                })
                                            } else
                                                if (estadoActual === "pendiente") {
                                                    mensaje.textContent = "El estado de esta reserva es pendiente, en este estado es recomendable revisar la reserva para tomar la decisión de aceptarla o rechazarla.Es recomendable revisar las reservas pendientes y aceptar o rechazarlas para mantener la lista de reservas pendientes sin saturar."
                                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                                    botonAceptar.textContent = "Aceptar reserva"
                                                    botonAceptar.addEventListener("click", () => {
                                                        this.confirmarNuevoEstado({
                                                            reservaUID,
                                                            instanciaUID_aceptarReserva,
                                                            nuevoEstado: "confirmada"
                                                        })
                                                    })
                                                } else if (estadoActual === "cancelada") {
                                                    titulo.textContent = `La reserva ${reservaUID} esta cancelada`
                                                    mensaje.textContent = "Esta reserva está cancelada.Las reservas canceladas no pueden revertir su estado.Puede eliminar definitivamente la reserva de la base de datos para que no esté almacenada desde el apartado de cancelar reserva dentro de la reserva."

                                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                                    botonAceptar.remove()
                                                }

                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"
                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        }

                                    }
                                },
                                bloqueGlobal: {
                                    despliege: function (data) {

                                        const global = data.global
                                        const detallesTitular = data?.titular
                                        const contenedorFinanciero = data.contenedorFinanciero
                                        const reservaUID = global.reservaUID
                                        const estadoReservaIDV = global.estadoReservaIDV
                                        const estadoPagoIDV = global.estadoPagoIDV
                                        const fechaCreacion = global.fechaCreacion
                                        const origenIDV = global.origenIDV

                                        const nombreCompletoTitular = detallesTitular.nombreTitular
                                        const tipoTitularIDV = detallesTitular.tipoTitularIDV
                                        const totalReserva = contenedorFinanciero?.desgloseFinanciero?.global?.totales?.totalFinal ?? "Sin información"

                                        const contenedor = document.createElement("div");
                                        contenedor.setAttribute("class", "administracionReservasDetalesMarcoEnvolventeInformacionGeneral");
                                        contenedor.setAttribute("contenedor", "panelGlobal")


                                        const contenedor_reservaUI = document.createElement("div");
                                        contenedor_reservaUI.setAttribute("class", "administracion_reservas_detallesReserva_contenedorReservaUID");
                                        contenedor.appendChild(contenedor_reservaUI);

                                        const contenedor_restoGlobal = document.createElement("div")
                                        contenedor_restoGlobal.classList.add("administracion_reservas_detallesReserva_contenedorRestoGlobal")
                                        contenedor.appendChild(contenedor_restoGlobal);

                                        const reservaUI = this.com.reservaUI(reservaUID)
                                        contenedor_reservaUI.appendChild(reservaUI)

                                        const tipoTitular = () => {
                                            if (tipoTitularIDV === "titularCliente") {
                                                return detallesTitular.clienteUID
                                            }
                                        }

                                        const configuracionGlobal = [{
                                            titulo: "Titular de la reserva",
                                            valor: nombreCompletoTitular || "Reserva sin titular",
                                            selecionable: "si",
                                            atributos: {
                                                contenedor: {
                                                    titularUID: tipoTitular(),
                                                    contenedor: "titular"
                                                },
                                                data: {
                                                    dataReserva: "nombreTitular"
                                                }
                                            }
                                        }, {
                                            titulo: "Fecha de creación UTC",
                                            valor: fechaCreacion,
                                        }, {
                                            titulo: "Origen de la reserva",
                                            valor: casaVitini.componentes.diccionarios.reserva.origenIDV(origenIDV),
                                            atributos: {
                                                data: {
                                                    dataReserva: "origen"
                                                }
                                            }
                                        }, {
                                            titulo: "Estado de la reserva",
                                            valor: casaVitini.componentes.diccionarios.reserva.estadoReservaIDV(estadoReservaIDV),
                                            selecionable: "si",
                                            atributos: {
                                                contenedor: {
                                                    contenedor: "estadoReserva"
                                                },
                                                data: {
                                                    dataReserva: "estado",
                                                    estadoReservaIDV: estadoReservaIDV
                                                }
                                            }
                                        }, {
                                            titulo: "Estado del pago",
                                            valor: casaVitini.componentes.diccionarios.reserva.estadoPagoIDV(estadoPagoIDV),
                                            atributos: {
                                                data: {
                                                    dataReserva: "estadoPago",
                                                    estadoReservaIDV: estadoReservaIDV
                                                }
                                            }
                                        }, {
                                            titulo: "Total",
                                            valor: totalReserva,
                                            atributos: {
                                                data: {
                                                    dataReserva: "totalReservaConImpuestos",
                                                    estadoReservaIDV: estadoReservaIDV
                                                }
                                            }
                                        }]

                                        configuracionGlobal.forEach((c) => {
                                            const menuGlobalUI = this.com.infoGlobalUI(c)
                                            contenedor_restoGlobal.appendChild(menuGlobalUI)
                                        })


                                        return contenedor
                                    },
                                    com: {
                                        reservaUI: (reservaUID) => {
                                            const contenedor = document.createElement("div");
                                            contenedor.style.overflow = "hidden"
                                            contenedor.classList.add(
                                                "flexVertical",
                                                "padding4",
                                                "flextJustificacion_center",
                                                "borderRadius12"
                                            );

                                            const titulo = document.createElement("p");
                                            titulo.setAttribute("class", "adminsitracionReservasTituloNombre marginCeroparaP");
                                            titulo.textContent = "Reserva";
                                            contenedor.appendChild(titulo);

                                            const data = document.createElement("p");
                                            data.classList.add("contenedroTextoEspansivo");
                                            data.setAttribute("dataReserva", "reservaID");
                                            data.setAttribute("componente", "reservaUID_" + reservaUID)
                                            data.textContent = reservaUID;
                                            contenedor.appendChild(data);

                                            return contenedor

                                        },
                                        infoGlobalUI: (d) => {
                                            const titulo = d.titulo
                                            const valor = d.valor
                                            const atributos = d.atributos || {}
                                            const atributosContenedor = atributos.contenedor || {}
                                            const atributosData = atributos.data || {}
                                            const selecionable = d.selecionable

                                            const contenedor = document.createElement("div");
                                            contenedor.style.overflow = "hidden"
                                            contenedor.classList.add(
                                                "flexVertical",
                                                "padding8",
                                                "noSelecionable",
                                                "flextJustificacion_center",
                                                "borderRadius12"
                                            );
                                            Object.entries(atributosContenedor).forEach(([nombreAtributo, valorAtributo]) => {
                                                contenedor.setAttribute(nombreAtributo, valorAtributo)
                                            });
                                            if (selecionable === "si") {
                                                contenedor.classList.add("comportamientoBoton");
                                            }

                                            const tituloUI = document.createElement("p");
                                            tituloUI.classList.add(
                                                "negrita",
                                                "textoCentrado"
                                            );
                                            tituloUI.textContent = titulo;
                                            contenedor.appendChild(tituloUI);

                                            const data = document.createElement("p");
                                            data.classList.add("contenedroTextoEspansivo");
                                            Object.entries(atributosData).forEach(([nombreAtributo, valorAtributo]) => {
                                                data.setAttribute(nombreAtributo, valorAtributo)
                                            });

                                            data.textContent = valor;
                                            contenedor.appendChild(data);
                                            return contenedor

                                        }

                                    }
                                },
                                barraProgreso: (data) => {

                                    const reservaUID = data.reservaUID
                                    const porcentajeTranscurrido = data.porcentajeTranscurrido
                                    const claseUID = `barraProgresso-anchoDinamico-${reservaUID}`

                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add(
                                        "backgroundGrey1",
                                        "borderRadius8",
                                    )
                                    contenedor.style.height = "20px"
                                    contenedor.style.overflow = "hidden"

                                    const style = document.createElement('style');
                                    style.innerHTML = `
                                        .${claseUID} {
                                            width: ${porcentajeTranscurrido}%;
                                    `;
                                    contenedor.appendChild(style);

                                    const barraProgresso = document.createElement("div")
                                    barraProgresso.setAttribute("componente", "progreso")
                                    barraProgresso.classList.add(
                                        "barraProgresso",
                                        claseUID
                                    )

                                    contenedor.appendChild(barraProgresso);
                                    return contenedor

                                },
                                categoriasGlobalesUI: {
                                    despliege: function (metadatos) {
                                        const reservaUID = metadatos.reservaUID
                                        const configuracionVista = metadatos.configuracionVista

                                        let url
                                        if (configuracionVista === "publica") {
                                            url = "/micasa/reservas/reserva:" + reservaUID + "/zona:"
                                        } else {
                                            url = "/administracion/reservas/reserva:" + reservaUID + "/zona:"
                                        }

                                        const contenedor = document.createElement("div");
                                        contenedor.classList.add(
                                            "flexVertical"
                                        );
                                        contenedor.setAttribute("componente", "panelDetallesReserva")

                                        const contenedorBotonesExpandidos = document.createElement("div")
                                        contenedorBotonesExpandidos.classList.add("administracion_reservas_detallesReserva_contenedorMenuExpandido")
                                        contenedorBotonesExpandidos.setAttribute("contenedor", "botonesExpandidos")
                                        if (configuracionVista === "publica") {


                                        } else {

                                        }
                                        contenedor.appendChild(contenedorBotonesExpandidos)

                                        const marcoMenuResponsivo = document.createElement("div");
                                        marcoMenuResponsivo.setAttribute("class", "administracion_reserva_detallesReserva_marcoMenuResponsivo");
                                        marcoMenuResponsivo.textContent = "Menú reserva"
                                        marcoMenuResponsivo.addEventListener("click", () => {
                                            document.body.style.overflow = "hidden";
                                            this.desplegarMenuResponsivo({
                                                reservaUID,
                                                configuracionVista
                                            })

                                        })
                                        contenedor.appendChild(marcoMenuResponsivo);




                                        const botonNuevaReserva = document.createElement("a");
                                        botonNuevaReserva.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonNuevaReserva.setAttribute("categoriaReserva", "alojamiento");
                                        botonNuevaReserva.setAttribute("href", url + "alojamiento");
                                        botonNuevaReserva.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "alojamiento",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)

                                        })
                                        botonNuevaReserva.textContent = "Alojamiento";
                                        contenedorBotonesExpandidos.appendChild(botonNuevaReserva);


                                        const botonCompAlo = document.createElement("a");
                                        botonCompAlo.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonCompAlo.setAttribute("categoriaReserva", "complementosDeAlojamiento");
                                        botonCompAlo.setAttribute("href", url + "complemenos_de_alojamiento");
                                        botonCompAlo.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "complementosDeAlojamiento",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)

                                        })
                                        botonCompAlo.textContent = "Complementos de alojamiento";
                                        contenedorBotonesExpandidos.appendChild(botonCompAlo);




                                        const botonCalcularPrecio = document.createElement("a");
                                        botonCalcularPrecio.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonCalcularPrecio.setAttribute("componente", "botonCalcularPrecioReserva");
                                        botonCalcularPrecio.setAttribute("categoriaReserva", "enlacesDePago");
                                        botonCalcularPrecio.setAttribute("href", url + "enlaces_de_pago");
                                        botonCalcularPrecio.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "enlacesDePago",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        botonCalcularPrecio.textContent = "Enlaces de pago";

                                        if (configuracionVista === "publica") {
                                        } else {
                                            contenedorBotonesExpandidos.appendChild(botonCalcularPrecio);
                                        }

                                        const botonDetallesDelPago = document.createElement("a");
                                        botonDetallesDelPago.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonDetallesDelPago.setAttribute("categoriaReserva", "transacciones");
                                        botonDetallesDelPago.setAttribute("href", url + "transacciones");
                                        botonDetallesDelPago.textContent = "Transacciones";
                                        botonDetallesDelPago.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "transacciones",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })

                                        if (configuracionVista === "publica") {
                                        } else {
                                            contenedorBotonesExpandidos.appendChild(botonDetallesDelPago);
                                        }

                                        const botonEnlacePago = document.createElement("a");
                                        botonEnlacePago.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonEnlacePago.setAttribute("categoriaReserva", "desgloseTotal");
                                        botonEnlacePago.setAttribute("href", url + "desglose_total");
                                        botonEnlacePago.textContent = "Desglose del total";
                                        botonEnlacePago.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "desgloseTotal",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        contenedorBotonesExpandidos.appendChild(botonEnlacePago);

                                        const botonServicios = document.createElement("a");
                                        botonServicios.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonServicios.setAttribute("categoriaReserva", "servicios");
                                        botonServicios.setAttribute("href", url + "servicios");
                                        botonServicios.textContent = "Servicios";
                                        botonServicios.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "servicios",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        contenedorBotonesExpandidos.appendChild(botonServicios);

                                        const botonCancelarReserva = document.createElement("a");
                                        botonCancelarReserva.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonCancelarReserva.setAttribute("categoriaReserva", "cancelarReserva");
                                        botonCancelarReserva.setAttribute("href", url + "cancelar_reserva");
                                        botonCancelarReserva.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "cancelarReserva",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        botonCancelarReserva.textContent = "Cancelar reserva";

                                        if (configuracionVista === "publica") {
                                        } else {
                                            contenedorBotonesExpandidos.appendChild(botonCancelarReserva);
                                        }

                                        const botonMiscelanea = document.createElement("a");
                                        botonMiscelanea.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                        botonMiscelanea.setAttribute("categoriaReserva", "miscelanea");
                                        botonMiscelanea.setAttribute("href", url + "miscelanea");
                                        botonMiscelanea.addEventListener("click", (e) => {
                                            e.preventDefault()
                                            const metadatos = {
                                                categoria: "miscelanea",
                                                origen: "botonCategoria",
                                                reservaUID: reservaUID
                                            }
                                            this.controladorCategorias(metadatos)
                                        })
                                        const lineaMiscelanea = document.createElement("div")
                                        lineaMiscelanea.setAttribute("componente", "iconoLineaMiscelanea")
                                        lineaMiscelanea.classList.add("administracion_reservas_detallesReseerva_iconoMiscelanea")
                                        botonMiscelanea.appendChild(lineaMiscelanea);
                                        contenedorBotonesExpandidos.appendChild(botonMiscelanea);

                                        return contenedor;
                                    },
                                    desplegarMenuResponsivo: function (data) {
                                        const reservaUID = data.reservaUID
                                        const configuracionVista = data.configuracionVista

                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        ui.setAttribute("controlador", "controlResponsivoVisibilidad")
                                        document.querySelector("main").appendChild(ui)

                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.style.paddingTop = "0px"

                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar";
                                        botonCancelar.addEventListener("click", () => {

                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        contenedor.appendChild(botonCancelar)

                                        const metadatosMenuResponsivo = {
                                            reservaUID: reservaUID,
                                            configuracionVista
                                        }

                                        const panelGlobal = this.despliege(metadatosMenuResponsivo)
                                        const contenedorBotonesEspandidos = panelGlobal.querySelector("[contenedor=botonesExpandidos]")
                                        contenedorBotonesEspandidos.style.display = 'grid'
                                        contenedorBotonesEspandidos.style.gap = '6px'

                                        if (configuracionVista === "publica") {

                                        } else {

                                        }



                                        contenedorBotonesEspandidos.querySelectorAll("[categoriaReserva]").forEach((boton) => {
                                            boton.classList.add("botonV1BlancoIzquierda")

                                        })
                                        contenedor.appendChild(contenedorBotonesEspandidos)

                                        const selectorBotonMiscelaniea = contenedorBotonesEspandidos.querySelector("[categoriareserva=miscelanea]")
                                        selectorBotonMiscelaniea.innerHTML = null
                                        selectorBotonMiscelaniea.textContent = "Miscelanea"


                                        const controlResponsivoVisibilidad = () => {
                                            const selectorElementoObservado = document.querySelector("[controlador=controlResponsivoVisibilidad]")
                                            if (!selectorElementoObservado) {
                                                window.removeEventListener("resize", controlResponsivoVisibilidad);
                                                return
                                            }
                                            const windowWidth = window.innerWidth;
                                            const threshold = "922"
                                            if (windowWidth > threshold) {
                                                selectorElementoObservado?.remove()
                                            }
                                        }
                                        window.addEventListener("resize", controlResponsivoVisibilidad);

                                    },
                                    ocultaCategorias: function () {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                                        this.limpiarMenusCategorias()
                                        document.querySelector("[componente=contenedorDinamico]").innerHTML = null
                                    },
                                    limpiarMenusCategorias: () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                                        document.querySelector("[componente=iconoLineaMiscelanea]").removeAttribute("style")
                                        const botonesCategoria = document.querySelectorAll("[categoriaReserva]")
                                        botonesCategoria.forEach((boton) => {
                                            boton.removeAttribute("style")
                                            boton.setAttribute("estadoCategoria", "otra")
                                        })
                                        document.querySelector("[componente=contenedorDinamico]").innerHTML = null
                                        const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                        contenedorDinamico.removeAttribute("style")
                                    },

                                    controladorCategorias: async function (metadatos) {
                                        const origen = metadatos.origen
                                        const categoriaIDV = metadatos.categoria
                                        const reservaUI = document.querySelector("[reservaUID]")
                                        const reservaUID = reservaUI.getAttribute("reservaUID")
                                        const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                        const selectorBotonCategoriaRenderizado = document.querySelector(`[categoriaReserva="${categoriaIDV}"]`)
                                        const estadoCategoria = selectorBotonCategoriaRenderizado?.getAttribute("estadoCategoria")
                                        const categoriaActual = document.querySelector("[estadoCategoria=actual]")?.getAttribute("categoriaReserva")
                                        this.limpiarMenusCategorias()
                                        selectorBotonCategoriaRenderizado.setAttribute("estadoCategoria", "actual")

                                        const funcionPersonalizada = `ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.ui.componentesUI.categoriasGlobalesUI.controladorCategorias`

                                        let url
                                        if (configuracionVista === "publica") {
                                            url = "/micasa/reservas/reserva:" + reservaUID + "/zona:"
                                        } else {
                                            url = "/administracion/reservas/reserva:" + reservaUID + "/zona:"
                                        }

                                        const constructorDireccionFuncion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales[categoriaIDV]?.arranque
                                        if (typeof constructorDireccionFuncion === "function") {
                                            const botonCategoriaGlobal = document.querySelector(`[categoriaReserva=${categoriaIDV}]`)
                                            botonCategoriaGlobal.style.background = "blue"
                                            botonCategoriaGlobal.style.color = "white"

                                            await casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales[categoriaIDV]?.arranque();

                                            const categoriaURL = casaVitini.utilidades.cadenas.camelToSnake(categoriaIDV)
                                            const directoriosFusion = url + categoriaURL
                                            const componentesExistenteUID = "reservaUID_" + reservaUID
                                            const titulo = "Casa Vitini"
                                            const estado = {
                                                zona: directoriosFusion,
                                                EstadoInternoZona: "estado",
                                                tipoCambio: "parcial",
                                                componenteExistente: componentesExistenteUID,
                                                funcionPersonalizada: funcionPersonalizada,
                                                args: {
                                                    origen: "url",
                                                    categoria: categoriaIDV
                                                }
                                            }

                                            if (!categoriaActual || categoriaIDV === categoriaActual) {
                                                window.history.replaceState(estado, titulo, directoriosFusion)
                                            } else if (categoriaIDV !== categoriaActual) {
                                                if (origen === "url") {
                                                    window.history.replaceState(estado, titulo, directoriosFusion);
                                                }
                                                if (origen === "botonCategoria" && (estadoCategoria === "otra" || !estadoCategoria)) {
                                                    window.history.pushState(estado, titulo, directoriosFusion);
                                                }
                                                if (origen === "botonCategoria" && estadoCategoria === "actual") {
                                                    window.history.replaceState(estado, titulo, directoriosFusion);
                                                }
                                            }
                                        } else {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const mensaje = "El controlador de categorías no encuentra la función"
                                            casaVitini.ui.componentes.advertenciaInmersiva(mensaje)
                                        }
                                    },
                                },
                                contenedorDinamico: () => {
                                    const contenedor = document.createElement("div");
                                    contenedor.setAttribute("componente", "contenedorDinamico");
                                    contenedor.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "borderRadius16",
                                        "backgroundWhite3"
                                    )
                                    return contenedor
                                },

                            }
                        },
                        global: {
                            obtenerReserva: async (data) => {
                                const reservaUID = data.reservaUID
                                const configuracionVista = data.configuracionVista
                                const transaccion = {
                                    reservaUID: reservaUID
                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"

                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "titular",
                                        "desgloseFinanciero"
                                    ]
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.mensajeSimple({
                                        titulo: respuestaServidor?.error,
                                    })
                                }
                                if (respuestaServidor?.ok) {
                                    return respuestaServidor
                                }
                            }
                        },
                        fechas: {
                            seleccionarDia: (dia_) => {
                                const diaSeleccionado = dia_.target.getAttribute("dia").padStart(2, "0")
                                const diaSeleccionadoComoElemento = dia_.target;
                                const calendario = diaSeleccionadoComoElemento.closest("[componente=marcoCalendario]")
                                const calendarioIO = calendario.getAttribute("calendarioIO")
                                if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                                    diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                                    if (calendarioIO === "entrada") {

                                        document.querySelector("[componente=bloquePropuestaNuevaFechaEntrada]")?.remove()
                                        diaSeleccionadoComoElemento.style.background = ""
                                        diaSeleccionadoComoElemento.style.color = ""
                                    }
                                    if (calendarioIO === "salida") {
                                        document.querySelector("[componente=bloquePropuestaNuevaFechaSalida]")?.remove()
                                        diaSeleccionadoComoElemento.style.background = ""
                                        diaSeleccionadoComoElemento.style.color = ""
                                    }
                                    diaSeleccionadoComoElemento.removeAttribute("estadoDia")
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.controladorZonaPropuestasCambioFechas()

                                }
                                document.querySelectorAll("[estado=disponible]").forEach(diaDisponible => {

                                    diaDisponible.removeAttribute("estadoDia")
                                    diaDisponible.style.background = ""
                                    diaDisponible.style.color = ""
                                });
                                diaSeleccionadoComoElemento.style.background = "red"
                                diaSeleccionadoComoElemento.style.color = "white"
                                diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                                const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                                const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                                const selectorPropuestaCambioFecha = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]")
                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                if (calendarioIO === "entrada") {

                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const contenedorPropuesta = document.createElement("div")
                                    contenedorPropuesta.classList.add(
                                        "contenedorPropuesta",
                                        "flexVertical",
                                        "gap6"
                                    )
                                    const tituloPropuesta = document.createElement("p")
                                    tituloPropuesta.classList.add(
                                        "tituloGris",
                                        "padding14"
                                    )
                                    tituloPropuesta.textContent = "Propuesta de cambio de la fecha de entrada de la reserva " + reservaUID
                                    tituloPropuesta.style.color = "black"
                                    contenedorPropuesta.appendChild(tituloPropuesta)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cerrar propuesta y volver atrás"
                                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    contenedorPropuesta.appendChild(botonCancelar)
                                    const infoPropuesta = document.createElement("div")
                                    infoPropuesta.classList.add("padding14")
                                    infoPropuesta.textContent = `Has propuesto cambiar la fecha de entrada de esta reserva a ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}. Si quieres confirmar la propuesta y cambiar la reserva, pulsa en el botón de confirmar de abajo. Si deseas cancelar, pulsa en el botón cancelar de arriba. Cuando puedes el botón confirmar, se realizará una última verificación para comprobar que los días siguen disponibles.`
                                    contenedorPropuesta.appendChild(infoPropuesta)

                                    const informacionImplicacion = document.createElement("div")
                                    informacionImplicacion.classList.add("padding14")
                                    informacionImplicacion.textContent = `Aviso importante: Cuando se quitan días a una reserva, si luego se vuelven a añadir esos días, los precios se insertan al precio actual del mercado establecido en el hub de precios base y de comportamientos. Siempre puede alterar los precios de la reserva mediante el sistema de sobre control. Si hay pernoctantes con fechas de checkin que queden fuera del nuevo rango de fechas de la reserva, se eliminarán las fechas de check-in y checkout de los pernoctantes.`
                                    contenedorPropuesta.appendChild(informacionImplicacion)

                                    const botonAceptarPropuesta = document.createElement("div")
                                    botonAceptarPropuesta.classList.add("botonV1BlancoIzquierda")
                                    botonAceptarPropuesta.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonAceptarPropuesta.textContent = "Confirmar propuesta y aplicar nueva fecha de entrada a la reserva"
                                    botonAceptarPropuesta.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const nuevaFecha = {
                                            fechaSolicitada_ISO: `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`,
                                            reservaUID: reservaUID,
                                            sentidoRango: "pasado"
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.confirmarCambioFecha(nuevaFecha)
                                    })
                                    contenedorPropuesta.appendChild(botonAceptarPropuesta)
                                    const propuestaUI = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    propuestaUI.querySelector("[contenedor=contenidoAdvertenciaInmersiva]").appendChild(contenedorPropuesta)
                                    document.querySelector("main").appendChild(propuestaUI)
                                }
                                if (calendarioIO === "salida") {

                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const contenedorPropuesta = document.createElement("div")
                                    contenedorPropuesta.classList.add(
                                        "contenedorPropuesta",
                                        "flexVertical",
                                        "gap6"
                                    )
                                    const tituloPropuesta = document.createElement("p")
                                    tituloPropuesta.classList.add(
                                        "tituloGris",
                                        "padding14"
                                    )

                                    tituloPropuesta.textContent = "Propuesta de cambio de la fecha de salida de la reserva " + reservaUID
                                    tituloPropuesta.style.color = "black"
                                    contenedorPropuesta.appendChild(tituloPropuesta)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cerrar propuesta y volver atrás"
                                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    contenedorPropuesta.appendChild(botonCancelar)
                                    const infoPropuesta = document.createElement("div")
                                    infoPropuesta.classList.add("padding14")
                                    infoPropuesta.textContent = `Has propuesto cambiar la fecha de salida de la reserva a ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}. Si quieres confirmar la propuesta y cambiar la reserva, pulsa en el botón de confirmar de abajo. Si deseas cancelar, pulsa en el botón cancelar de arriba. Cuando puedes el botón confirmar, se realizará una última verificación para comprobar que los días siguen disponibles.`
                                    contenedorPropuesta.appendChild(infoPropuesta)

                                    const informacionImplicacion = document.createElement("div")
                                    informacionImplicacion.classList.add("padding14")
                                    informacionImplicacion.textContent = `Aviso importante: Cuando se quitan días a una reserva, si luego se vuelven a añadir esos días, los precios se insertan al precio actual del mercado establecido en el hub de precios base y de comportamientos. Siempre puede alterar los precios de la reserva mediante el sistema de sobre control. Si hay pernoctantes con fechas de checkin que queden fuera del nuevo rango de fechas de la reserva, se eliminarán las fechas de check-in y checkout de los pernoctantes.`
                                    contenedorPropuesta.appendChild(informacionImplicacion)


                                    const botonAceptarPropuesta = document.createElement("div")
                                    botonAceptarPropuesta.classList.add("botonV1BlancoIzquierda")
                                    botonAceptarPropuesta.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonAceptarPropuesta.textContent = "Confirmar propuesta y aplicar nueva fecha de salida a la reserva"
                                    botonAceptarPropuesta.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const nuevaFecha = {
                                            fechaSolicitada_ISO: `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`,
                                            reservaUID: reservaUID,
                                            sentidoRango: "futuro"
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.confirmarCambioFecha(nuevaFecha)
                                    })
                                    contenedorPropuesta.appendChild(botonAceptarPropuesta)
                                    const propuestaUI = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    propuestaUI.querySelector("[contenedor=contenidoAdvertenciaInmersiva]").appendChild(contenedorPropuesta)
                                    document.querySelector("main").appendChild(propuestaUI)
                                }
                            },
                            confirmarCambioFecha: async (propuesta) => {
                                const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                const sentidoRango = propuesta.sentidoRango
                                const reservaUID = propuesta.reservaUID
                                const fechaSolicitada_ISO = propuesta.fechaSolicitada_ISO
                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/confirmarModificarFechaReserva",
                                    reservaUID: String(reservaUID),
                                    sentidoRango: sentidoRango,
                                    fechaSolicitada_ISO: fechaSolicitada_ISO
                                }

                                const mensajes = {
                                    pasado: [
                                        "Confirmando la nueva fecha de entrada, por favor espere...",
                                        "No se puede establecer la fecha de entrada porque los apartamentos de esta reserva están en otro evento que ocurre al mismo tiempo.A continuación tienes una lista de los eventos que entran en conflicto.",
                                    ],
                                    futuro: [
                                        "Confirmando la nueva fecha de salida, por favor espere...",
                                        "No se puede establecer la fecha de salida porque los apartamentos de esta reserva están en otro evento que ocurre al mismo tiempo.A continuación tienes una lista de los eventos que entran en conflicto."
                                    ]
                                }
                                const datosPantallaSuperpuesta = {
                                    instanciaUID: instanciaUID_pantallaDeCarga,
                                    mensaje: mensajes[sentidoRango][0]
                                }
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const pantallaDeCargaRenderizada = document.querySelector(`[componente=advertenciaInmersiva][instanciaUID="${instanciaUID_pantallaDeCarga}"]`)

                                if (!pantallaDeCargaRenderizada) {
                                    return
                                }
                                if (respuestaServidor?.error) {
                                    const detallesError = respuestaServidor?.error

                                    const eventos = detallesError.eventos
                                    if (eventos) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const contenedorError = document.createElement("div")
                                        contenedorError.classList.add("contenedorErrorPropuesta")
                                        const tituloPropuesta = document.createElement("p")
                                        tituloPropuesta.classList.add("tituloGris")
                                        tituloPropuesta.textContent = "No se puede cambiar la fecha debido a otros eventos ya existentes."
                                        tituloPropuesta.style.color = "black"
                                        contenedorError.appendChild(tituloPropuesta)
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                        contenedorError.appendChild(botonCancelar)
                                        const infoPropuesta = document.createElement("div")
                                        infoPropuesta.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                        infoPropuesta.textContent = mensajes[sentidoRango][1]
                                        contenedorError.appendChild(infoPropuesta)
                                        for (const detallesDelEvento of eventos) {
                                            const fechaEntrada = detallesDelEvento.fechaEntrada
                                            const fechaSalida = detallesDelEvento.fechaSalida
                                            const fechaEntrada_array = fechaEntrada.split("-")
                                            const fechaSalida_array = fechaSalida.split("-")
                                            const fechaEntrada_Humana = `${fechaEntrada_array[2]}/${fechaEntrada_array[1]}/${fechaEntrada_array[0]}`
                                            const fechaSalida_Humana = `${fechaSalida_array[2]}/${fechaSalida_array[1]}/${fechaSalida_array[0]}`
                                            const eventoUID = detallesDelEvento.uid
                                            const tipoElemento = detallesDelEvento.tipoElemento
                                            const descripcion = detallesDelEvento.descripcion
                                            const contenedorEvento = document.createElement("div")
                                            contenedorEvento.classList.add("contenedorEvento")
                                            const tipoEvento = document.createElement("div")
                                            tipoEvento.classList.add("negrita")
                                            tipoEvento.textContent = tipoElemento.toUpperCase()
                                            contenedorEvento.appendChild(tipoEvento)
                                            const nombreDato = document.createElement("div")
                                            nombreDato.textContent = "Rango del evento"
                                            contenedorEvento.appendChild(nombreDato)
                                            const fechaEvento = document.createElement("div")

                                            fechaEvento.textContent = `${fechaEntrada_Humana} >>> ${fechaSalida_Humana}`
                                            contenedorEvento.appendChild(fechaEvento)
                                            if (tipoElemento === "reserva") {
                                                const botonIrAlEvento = document.createElement("a")
                                                botonIrAlEvento.classList.add("botonIrAlEvento")
                                                botonIrAlEvento.textContent = "Ir a los detalles de la reserva"
                                                botonIrAlEvento.setAttribute("href", "/administracion/reservas/" + eventoUID)
                                                botonIrAlEvento.setAttribute("vista", "/administracion/reservas/" + eventoUID)
                                                botonIrAlEvento.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contenedorEvento.appendChild(botonIrAlEvento)
                                            }
                                            if (tipoElemento === "bloqueo") {
                                                const apartamentoIDV = detallesDelEvento.apartamentoIDV
                                                const botonIrAlEvento = document.createElement("a")
                                                botonIrAlEvento.classList.add("botonIrAlEvento")
                                                botonIrAlEvento.textContent = "Ir a los detalles del bloqueo"
                                                botonIrAlEvento.setAttribute("href", "/administracion/bloqueos/" + apartamentoIDV + "/" + eventoUID)
                                                botonIrAlEvento.setAttribute("vista", "/administracion/bloqueos/" + apartamentoIDV + "/" + eventoUID)
                                                botonIrAlEvento.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contenedorEvento.appendChild(botonIrAlEvento)
                                            }
                                            if (tipoElemento === "eventoCalendarioSincronizado" && descripcion) {
                                                const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                                                const match = descripcion.match(regex);
                                                const urlEvento = match?.[1] ?? "No se encontró la URL en el texto proporcionado.";
                                                const botonIrAlEvento = document.createElement("a")
                                                botonIrAlEvento.classList.add("botonIrAlEvento")
                                                botonIrAlEvento.textContent = "Ir a los detalles del calendario sincronizado"
                                                botonIrAlEvento.setAttribute("href", urlEvento)
                                                botonIrAlEvento.setAttribute("vista", urlEvento)
                                                contenedorEvento.appendChild(botonIrAlEvento)
                                            }
                                            if (tipoElemento === "eventoCalendarioSincronizado" && !descripcion) {
                                                const botonIrAlEvento = document.createElement("a")
                                                botonIrAlEvento.classList.add("infoEventoSinDetalles")
                                                botonIrAlEvento.textContent = "Este evento es de un calendario externo sincronizado y no ofrece detalles del mismo"
                                                contenedorEvento.appendChild(botonIrAlEvento)
                                            }
                                            contenedorError.appendChild(contenedorEvento)
                                        }
                                        const mensajeError = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        mensajeError.querySelector("[contenedor=contenidoAdvertenciaInmersiva]").appendChild(contenedorError)
                                        document.querySelector("main").appendChild(mensajeError)
                                        pantallaDeCargaRenderizada.remove()

                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    } else {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                    }


                                }
                                if (respuestaServidor?.ok) {

                                    pantallaDeCargaRenderizada?.remove()
                                    const sentidoRangoRespueata = respuestaServidor.sentidoRango
                                    const fecha_ISO = respuestaServidor.fecha_ISO
                                    const fechaArray_ISO = fecha_ISO.split("-")
                                    const fecha_Humano = `${fechaArray_ISO[2]}/${fechaArray_ISO[1]}/${fechaArray_ISO[0]}`




                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()
                                    if (sentidoRangoRespueata === "pasado" && pantallaDeCargaRenderizada) {
                                        const selectorFechaEntrada = document.querySelector("[calendario=entrada]")
                                        const selectorFechaEntradaUI = document.querySelector("[fechaUI=fechaInicio]")
                                        selectorFechaEntrada.setAttribute("memoriaVolatil", fecha_ISO)
                                        selectorFechaEntradaUI.textContent = fecha_Humano
                                    }
                                    if (sentidoRangoRespueata === "futuro" && pantallaDeCargaRenderizada) {
                                        const selectorFechaSalida = document.querySelector("[calendario=salida]")
                                        const selectorFechaSalidaUI = document.querySelector("[fechaUI=fechaFin]")
                                        selectorFechaSalida.setAttribute("memoriaVolatil", fecha_ISO)
                                        selectorFechaSalidaUI.textContent = fecha_Humano
                                    }


                                    const selectorMarcoAlojamiento = document.querySelector(`[reservaUID="${reservaUID}"] [componente=marcoAlojamiento]`)
                                    if (selectorMarcoAlojamiento) {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.arranque()

                                    }
                                }
                            },
                            controladorZonaPropuestasCambioFechas: () => {
                                const selectorZonaPropuestas = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]").childElementCount
                                if (selectorZonaPropuestas > 0) {
                                    document.querySelector("[componente=espacioPropuestaCambioFechaReserva]").style.display = "grid"
                                } else {
                                    document.querySelector("[componente=espacioPropuestaCambioFechaReserva]").style.display = "none"
                                }
                            },
                            cancelarPropuestaCambioFecha: (propuesta) => {
                                propuesta.target.parentNode.remove()
                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.fechas.controladorZonaPropuestasCambioFechas()
                            },

                        },
                        titular: {
                            desplegarUI: async function (reservaUID) {
                                document.body.style.overflow = "hidden";
                                const main = document.querySelector("main")

                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const instanciaUID = ui.getAttribute("instanciaUID")

                                main.appendChild(ui)
                                const contenedor = ui.querySelector("[componente=contenedor]")

                                const mensajeSpinner = "Esperando al servidor...."
                                const spinner = casaVitini.ui.componentes.spinner(mensajeSpinner)
                                contenedor.appendChild(spinner)

                                const respuestaServidor = await casaVitini.shell.servidor({
                                    zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                    reservaUID: reservaUID,
                                    capas: [
                                        "titular"
                                    ]
                                })
                                const ui_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                if (!ui_renderizada) { return }
                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    contenedor.innerHTML = null
                                    const detallesTitular = respuestaServidor.ok.titular
                                    const tipoTitularIDV = detallesTitular?.tipoTitularIDV
                                    const clienteUID = detallesTitular?.clienteUID
                                    const nombreTitular = detallesTitular?.nombreTitular
                                    const pasaporteTitular = detallesTitular?.pasaporteTitular
                                    const tipoTitular = detallesTitular?.tipoTitular
                                    const mailTitular = detallesTitular?.mailTitular
                                    const telefonoTitular = detallesTitular?.telefonoTitular

                                    const tituloUI = (titulo) => {
                                        return this.componentes.titulo(titulo)
                                    }
                                    const infoUI = (info) => {
                                        return this.componentes.infoUI(info)
                                    }
                                    const detallesDelTitularUI = (data) => {
                                        return this.componentes.detallesDelTitularUI(data)
                                    }
                                    const botonIrALaFichaDelClinete = (clienteUID) => {
                                        return this.componentes.botonIrALaFichaDelClinete(clienteUID)
                                    }
                                    const botonCambiarTitular = (instanciaUID) => {
                                        return this.componentes.botonCambiarTitular(instanciaUID)
                                    }
                                    const botonDesasociar = (data) => {
                                        return this.componentes.botonDesasociar(data)
                                    }
                                    const botonCerrarFormularioExpandidoCambiarTitular = (instanciaUID) => {
                                        return this.componentes.botonCerrarFormularioExpandidoCambiarTitular(instanciaUID)
                                    }
                                    const buscadorUI = (reservaUID) => {
                                        return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.componentes.buscadorRapido.UI({
                                            reservaUID: reservaUID,
                                            metodoFinal: "ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.componentes.transacciones.asociarTitularConLaReserva"
                                        })
                                    }
                                    const formularioNuevoTitular = (reservaUID) => {
                                        return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.componentes.nuevoClienteOTitular.UI({
                                            metodoFinal: "ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.componentes.transacciones.transactorCrearClienteComoTitular",
                                            tituloUI: "Crear nuevo cliente e insertarlo en la reserva como titular",
                                            tituloBoton: "Crear cliente y insertarlo como titular de la reserva",
                                            reservaUID: reservaUID
                                        })
                                    }
                                    if (!tipoTitularIDV) {
                                        const titulo = "Añadir titular a la reserva 11"
                                        const info = "Esta reserva ahora mismo no tiene ningún titular asignado.Para añadir un titular a la reserva, puedes buscar con el campo de búsqueda inferior un cliente existente para asociarlo como titular.También puedes crear un cliente nuevo rellenando el formulario para crear un cliente y añadirlo como titular a esta reserva."

                                        contenedor.appendChild(tituloUI(titulo))
                                        contenedor.appendChild(infoUI(info))
                                        contenedor.appendChild(buscadorUI(reservaUID))
                                        contenedor.appendChild(formularioNuevoTitular(reservaUID))

                                    } else if (tipoTitularIDV === "titularCliente") {
                                        const titulo = "Detalles del titular"
                                        const info = "Vista rápida de los detalles del titular de la reserva.Puedes cambiar el titular de la reserva si lo necesitas o desasociar el titular.También puedes cambiar el titular, esto te permite rellenar los datos mientras ves los datos del actual titular por si fuera necesario."

                                        contenedor.appendChild(tituloUI(titulo))
                                        contenedor.appendChild(infoUI(info))
                                        contenedor.appendChild(detallesDelTitularUI({
                                            clienteUID: clienteUID,
                                            nombreTitular: nombreTitular,
                                            pasaporteTitular: pasaporteTitular,
                                            tipoTitular: "titularCliente",
                                            mailTitular: mailTitular,
                                            telefonoTitular: telefonoTitular,
                                        }))

                                        contenedor.appendChild(botonIrALaFichaDelClinete(clienteUID))
                                        contenedor.appendChild(botonCambiarTitular(instanciaUID))

                                        const botonCerrarFormularioExpandidoCambiarTitular_ = botonCerrarFormularioExpandidoCambiarTitular(instanciaUID)
                                        botonCerrarFormularioExpandidoCambiarTitular_.style.display = "none"

                                        contenedor.appendChild(botonCerrarFormularioExpandidoCambiarTitular_)
                                        contenedor.appendChild(botonDesasociar({
                                            instanciaUID: instanciaUID,
                                            reservaUID: reservaUID
                                        }))

                                        const buscadorUI_ = buscadorUI(reservaUID)
                                        buscadorUI_.style.display = "none"
                                        contenedor.appendChild(buscadorUI_)

                                        const formularioNuevoTitular_ = formularioNuevoTitular(reservaUID)
                                        formularioNuevoTitular_.style.display = "none"
                                        contenedor.appendChild(formularioNuevoTitular_)

                                    } else if (tipoTitularIDV === "titularPool") {
                                        const titulo = "Datos del titular no verificado (POOL)"
                                        const info = `Los datos proporcionados provienen directamente del cliente, por que esta reservas ha sido hecha por el, lo que implica que su exactitud depende de la información suministrada por el propio cliente. Dado que la fuente de estos datos es el propio cliente, es crucial proceder a una verificación exhaustiva cruzando dicha información con la base de datos de clientes. 
                                        Este proceso es fundamental para garantizar la coherencia y precisión de los datos antes de su utilización o procesamiento posterior.
                                        Para ello, puedes utilizar el buscador ubicado más abajo. Si al realizar la búsqueda no encuentras coincidencias, puedes optar por completar el formulario disponible más abajo para crear un nuevo titular de la reserva. 
                                        
                                        Este nuevo titular podrá ser insertado directamente en la reserva, asegurando que la información sea correcta y esté actualizada en el sistema.
                                        En caso de que los datos sean similares a los de otro cliente existente, no te preocupes por crear una ficha duplicada o parecida, ya que más adelante podrás utilizar la herramienta de fusión para combinar los registros y evitar duplicidades.
                                        `

                                        contenedor.appendChild(tituloUI(titulo))
                                        contenedor.appendChild(infoUI(info))
                                        contenedor.appendChild(detallesDelTitularUI({

                                            nombreTitular: nombreTitular,
                                            pasaporteTitular: pasaporteTitular,
                                            tipoTitular: "titularCliente",
                                            mailTitular: mailTitular,
                                            telefonoTitular: telefonoTitular,
                                        }))
                                        contenedor.appendChild(buscadorUI(reservaUID))
                                        contenedor.appendChild(formularioNuevoTitular(reservaUID))
                                    }
                                    contenedor.appendChild(this.componentes.botonCerrar())
                                }
                            },

                            componentes: {
                                transacciones: {
                                    asociarTitularConLaReserva: async function (data) {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const clienteUID = data.clienteUID
                                        const instanciaUID = data.instanciaUID
                                        const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        const opcionesPantallaDeCarga = {
                                            instanciaUID: instanciaUIDPantallaDeCarga,
                                            mensaje: "Asociando cliente a la titularidad de esta reserva"
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                        const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/gestionTitular/asociarTitular",
                                            clienteUID: String(clienteUID),
                                            reservaUID: reservaUID
                                        })
                                        pantallaDeCargaRenderizada?.remove()

                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {

                                            const nuevoClienteUID = respuestaServidor.clienteUID
                                            const nombreCompleto = respuestaServidor.nombreCompleto

                                            const selectorNombreTitularRenderizado = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            const selectorNombreTitular = document.querySelector(`[dataReserva=nombreTitular]`)
                                            if (selectorNombreTitularRenderizado && selectorNombreTitular) {
                                                selectorNombreTitular.textContent = nombreCompleto
                                                const selectorBloqueTitular = document.querySelector(`[contenedor=titular]`)
                                                selectorBloqueTitular.setAttribute("tipoTitular", "titularCliente")
                                                selectorBloqueTitular.setAttribute("titularUID", nuevoClienteUID)
                                            }
                                            const instanciaUID_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                            if (instanciaUID_renderizada) {
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.desplegarUI(reservaUID)
                                            }


                                        }
                                    },
                                    transactorCrearClienteComoTitular: async (data) => {

                                        const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        const opcionesPantallaDeCarga = {
                                            instanciaUID: instanciaUIDPantallaDeCarga,
                                            mensaje: "Asociando cliente a la titularidad de esta reserva"
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                        const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                        const reservaUID = data.reservaUID
                                        const instanciaUID = data.instanciaUID
                                        const datos = data.datos


                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/gestionTitular/crearTitular",
                                            reservaUID: String(reservaUID),
                                            ...datos
                                        })
                                        pantallaDeCargaRenderizada?.remove()

                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {

                                            pantallaDeCargaRenderizada?.remove()
                                            const nuevoClienteUID = respuestaServidor.clienteUID
                                            const nombreCompleto = respuestaServidor.nombreCompleto

                                            const selectorNombreTitularRenderizado = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            const selectorNombreTitular = selectorNombreTitularRenderizado.querySelector(`[dataReserva=nombreTitular]`)
                                            if (selectorNombreTitular) {
                                                selectorNombreTitular.textContent = nombreCompleto
                                                const selectorBloqueTitular = document.querySelector(`[contenedor=titular]`)
                                                selectorBloqueTitular.setAttribute("tipoTitular", "titularCliente")
                                                selectorBloqueTitular.setAttribute("titularUID", nuevoClienteUID)
                                            }
                                            const instanciaUID_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                            if (instanciaUID_renderizada) {
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.desplegarUI(reservaUID)
                                            }

                                        }
                                    },
                                    desasociarClienteComoTitular: async function (metadatos) {
                                        const instanciaUID = metadatos.instanciaUID
                                        const reservaUID = metadatos.reservaUID
                                        const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        const opcionesPantallaDeCarga = {
                                            instanciaUID: instanciaUIDPantallaDeCarga,
                                            mensaje: "Desasociando cliente como titular de la reserva"
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                        const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                        const metadatosPantallaDeCarga = {
                                            zona: "administracion/reservas/detallesReserva/gestionTitular/desasociarClienteComoTitular",
                                            reservaUID: String(reservaUID)
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(metadatosPantallaDeCarga)
                                        if (respuestaServidor?.error) {
                                            pantallaDeCargaRenderizada?.remove()
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            pantallaDeCargaRenderizada?.remove()
                                            const selectorNombreTitularRenderizado = document.querySelector(`[reservaUID="${reservaUID}"]`).querySelector(`[dataReserva=nombreTitular]`)
                                            if (selectorNombreTitularRenderizado) {
                                                selectorNombreTitularRenderizado.textContent = "(Níngun titular asignado)"
                                                const selectorBloqueTitular = document.querySelector(`[contenedor=titular]`)
                                                selectorBloqueTitular.removeAttribute("tipoTitular")
                                                selectorBloqueTitular.removeAttribute("titularUID")
                                            }
                                            const selectorDestinoRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                            if (selectorDestinoRenderizado) {
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                            }
                                        }
                                    },
                                },
                                detallesDelTitularUI: (detallesDelTitular) => {
                                    const clienteUID = detallesDelTitular.clienteUID
                                    const nombreTitular = detallesDelTitular.nombreTitular
                                    const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                    const tipoTitular = detallesDelTitular.tipoTitular
                                    const mailTitular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                    const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin Teléfono)"
                                    const detallesRapidosDelTitular = document.createElement("div")
                                    detallesRapidosDelTitular.classList.add(
                                        "flexVertical",
                                        "backgroundWhite3",
                                        "borderRadius14",
                                        "padding14",
                                        "gap6"
                                    )

                                    let contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    let nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Nombre completo del titular"
                                    contenedorDato.appendChild(nombreDato)
                                    let valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = nombreTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Pasaporte"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = pasaporteTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Teléfono"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = telefonoTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "e - Mail"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = mailTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)
                                    return detallesRapidosDelTitular
                                },
                                detallesDelTitularPoolUI: (detallesDelTitular) => {
                                    const nombreTitular = detallesDelTitular.nombreTitular
                                    const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                    const tipoTitular = "Titular pool"
                                    const mailtular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                    const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin Teléfono)"
                                    const detallesRapidosDelTitular = document.createElement("div")
                                    detallesRapidosDelTitular.classList.add("tarjetaGris")

                                    let contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    let nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Nombre completo del titular"
                                    contenedorDato.appendChild(nombreDato)
                                    let valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = nombreTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Pasaporte"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = pasaporteTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "Teléfono"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = telefonoTitular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)

                                    contenedorDato = document.createElement("div")
                                    contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                    nombreDato = document.createElement("div")
                                    nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                    nombreDato.textContent = "e - Mail"
                                    contenedorDato.appendChild(nombreDato)
                                    valorDato = document.createElement("div")
                                    valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                    valorDato.classList.add("negrita")
                                    valorDato.textContent = mailtular
                                    contenedorDato.appendChild(valorDato)
                                    detallesRapidosDelTitular.appendChild(contenedorDato)
                                    return detallesRapidosDelTitular
                                },
                                botonCerrar: () => {
                                    const boton = document.createElement("div")
                                    boton.classList.add("botonV1")
                                    boton.innerHTML = "Cerrar gestión del titular de la reserva"
                                    boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    return boton
                                },
                                botonDesasociar: function (metadatos) {
                                    const boton = document.createElement("div")
                                    boton.classList.add("botonV1BlancoIzquierda")
                                    boton.innerHTML = "Desasociar cliente como titular"
                                    boton.setAttribute("boton", "desasociarTitular")
                                    boton.addEventListener("click", () => {
                                        this.transacciones.desasociarClienteComoTitular(metadatos)
                                    })
                                    return boton
                                },
                                botonCambiarTitular: function (instanciaUID) {
                                    const boton = document.createElement("div")
                                    boton.classList.add("botonV1BlancoIzquierda")
                                    boton.innerHTML = "Cambiar titular"
                                    boton.setAttribute("boton", "cambiarTitular")
                                    boton.addEventListener("click", () => {
                                        this.cambiarTitular(instanciaUID)
                                    })
                                    return boton
                                },
                                botonIrALaFichaDelClinete: (clienteUID) => {
                                    const boton = document.createElement("a")
                                    boton.classList.add("botonV1BlancoIzquierda")
                                    boton.innerHTML = "Ir a la ficha del cliente"
                                    boton.setAttribute("href", "/administracion/clientes/cliente:" + clienteUID)
                                    boton.setAttribute("vista", "/administracion/clientes/cliente:" + clienteUID)
                                    boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    return boton
                                },
                                titulo: (titulo) => {
                                    const tituloUI = document.createElement("p")
                                    tituloUI.classList.add(
                                        "tituloGris",
                                        "padding18",
                                    )
                                    tituloUI.textContent = titulo
                                    return tituloUI
                                },
                                infoUI: (info) => {
                                    const infoUI = document.createElement("p")
                                    infoUI.classList.add(
                                        "padding18"
                                    )
                                    infoUI.textContent = info
                                    return infoUI
                                },
                                botonCerrarFormularioExpandidoCambiarTitular: function (instanciaUID) {
                                    const boton = document.createElement("div")
                                    boton.classList.add("botonV1BlancoIzquierda")
                                    boton.innerHTML = "Cerrar formulario expandido para cambiar de titular"
                                    boton.setAttribute("boton", "cerrarCambiarTitular")
                                    boton.addEventListener("click", () => {
                                        this.cancelarCambiarTitular(instanciaUID)
                                    })
                                    return boton
                                },
                                cambiarTitular: (instanciaUID) => {
                                    const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                                    const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                                    selectorBotonCambiarTitular.style.display = "none"
                                    selectorBotonDesasociar.style.display = "none"
                                    const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                                    selectorNuevoClienteUI.removeAttribute("style")
                                    const selectorBuscadorRapidoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [contenedor=buscador]`)
                                    selectorBuscadorRapidoClienteUI.removeAttribute("style")
                                    const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                                    selectorbotonCerrarCambiarTitular.removeAttribute("style")
                                },
                                cancelarCambiarTitular: (instanciaUID) => {
                                    const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                                    const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                                    selectorBotonCambiarTitular.removeAttribute("style")
                                    selectorBotonDesasociar.removeAttribute("style")
                                    const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                                    selectorNuevoClienteUI.style.display = "none"
                                    const selectorBuscadorRapidoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [contenedor=buscador]`)
                                    selectorBuscadorRapidoClienteUI.style.display = "none"
                                    const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                                    selectorbotonCerrarCambiarTitular.style.display = "none"
                                },
                            }
                        },
                        estado: {
                            aceptarReserva: async function (data) {
                                const reservaUID = data.reservaUID
                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Confirmas que aceptas la reserva ${reservaUID}`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = "AAl confirmar una reserva pendiente, cambiarás el estado de pendiente.Ha confirmado.La reserva dejará de ser visible desde la sección de reservas confirmadas.Si necesitas volver a poner la reserva en estado pendiente, pulsa en el estado de la reserva para poder cambiarla."

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.textContent = "Comfirmar y aceptar reserva"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarNuevoEstado({
                                        reservaUID,
                                        instanciaUID_aceptarReserva,
                                        nuevoEstado: "confirmada"
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            rechazarReserva: async function (data) {
                                const reservaUID = data.reservaUID
                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()

                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Confirmas que rechazas la reserva ${reservaUID}`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = "Rechazar una reserva implica cancelar la reserva."

                                const botonRechazar = constructor.querySelector("[boton=aceptar]")
                                botonRechazar.textContent = "Rechazar reserva"
                                botonRechazar.addEventListener("click", (e) => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.confirmaCancelacion({
                                        tipoBloqueoIDV: "sinBloqueo"
                                    })
                                })

                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cerrar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            ponerReservaEnPendiente: async function (data) {
                                const reservaUID = data.reservaUID
                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Confirmas que aceptas la reserva ${reservaUID}`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = "Al confirmar una reserva pendiente, cambiarás el estado de pendiente.Ha confirmado.La reserva dejará de ser visible desde la sección de reservas confirmadas.Si necesitas volver a poner la reserva en estado pendiente, pulsa en el estado de la reserva para poder cambiarla"

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.textContent = "Comfirmar y aceptar reserva"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarNuevoEstado({
                                        reservaUID,
                                        instanciaUID_aceptarReserva,
                                        nuevoEstado: "pendiente"
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            confirmarNuevoEstado: async function (data) {
                                const reservaUID = data.reservaUID
                                const nuevoEstado = data.nuevoEstado
                                const instanciaUID_aceptarReserva = data.instanciaUID_aceptarReserva

                                const ui = document.querySelector(`[instanciaUID="${instanciaUID_aceptarReserva}"]`)
                                const contenedor = ui.querySelector("[componente=constructor]")
                                contenedor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Aceptando reserva un momento por favor..."
                                })
                                contenedor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/actualizarEstadoReserva",
                                    reservaUID: String(reservaUID),
                                    nuevoEstado
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                if (!uiRenderizada) { return }
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();

                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    const estadoUI = uiRenderizada.querySelector("[dataReserva=estado]")
                                    const contenedorPendienteUI = uiRenderizada.querySelector("[contenedor=pendiente]")
                                    const estadoActual = respuestaServidor.estadoActual


                                    if (estadoActual === "pendiente") {
                                        estadoUI.textContent = "Pendiente"
                                        estadoUI.setAttribute("estadoReservaIDV", "pendiente")
                                        contenedorPendienteUI.style.display = "grid"

                                    }
                                    if (estadoActual === "confirmada") {
                                        estadoUI.textContent = "Confirmada"
                                        estadoUI.setAttribute("estadoReservaIDV", "confirmada")
                                        contenedorPendienteUI.style.display = "none"
                                    }

                                }

                            },
                            panelExpandidoUI: async function (reservaUID) {
                                const estadoActual = document.querySelector("[contenedor=panelGlobal] [contenedor=estadoReserva] [estadoReservaIDV]").getAttribute("estadoReservaIDV")

                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_aceptarReserva = pantallaInmersiva.getAttribute("instanciaUID")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Estado de la reserva ${reservaUID}`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")

                                if (estadoActual === "confirmada") {
                                    mensaje.textContent = "El estado actual de la reserva es confirmado.Si se necesita, puedes cambiar el estado de esta reserva a pendiente.Esto permitirá insertar la reserva en reservas pendientes de revisión"

                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                    botonAceptar.textContent = "Pasar el estado de esta reserva a pendiente de revisión"
                                    botonAceptar.addEventListener("click", () => {
                                        this.confirmarNuevoEstado({
                                            reservaUID,
                                            instanciaUID_aceptarReserva,
                                            nuevoEstado: "pendiente"
                                        })
                                    })
                                } else
                                    if (estadoActual === "pendiente") {
                                        mensaje.textContent = "El estado de esta reserva es pendiente, en este estado es recomendable revisar la reserva para tomar la decisión de aceptarla o rechazarla.Es recomendable revisar las reservas pendientes y aceptar o rechazarlas para mantener la lista de reservas pendientes sin saturar."
                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Aceptar reserva"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarNuevoEstado({
                                                reservaUID,
                                                instanciaUID_aceptarReserva,
                                                nuevoEstado: "confirmada"
                                            })
                                        })
                                    } else if (estadoActual === "cancelada") {
                                        titulo.textContent = `La reserva ${reservaUID} esta cancelada`
                                        mensaje.textContent = "Esta reserva está cancelada.Las reservas canceladas no pueden revertir su estado.Puede eliminar definitivamente la reserva de la base de datos para que no esté almacenada desde el apartado de cancelar reserva dentro de la reserva."

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.remove()
                                    }

                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)

                            }
                        },
                        actualizarReservaRenderizada: async () => {
                            const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                            const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                            const selectorEstadoPago = document.querySelector("[dataReserva=estadoPago]")
                            const selectorTotalConImpuestos = document.querySelector("[dataReserva=totalReservaConImpuestos]")
                            selectorEstadoPago.textContent = "Obteniendo..."
                            selectorTotalConImpuestos.textContent = "Recalculando..."

                            const instanciaUID_paraSelectores = casaVitini.utilidades.codigoFechaInstancia()
                            selectorTotalConImpuestos.setAttribute("instanciaUID", instanciaUID_paraSelectores)





                            const transaccion = {
                                zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                reservaUID: String(reservaUID),
                                capas: [
                                    "titular",
                                    "desgloseFinanciero"
                                ]
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const selectorUIRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_paraSelectores}"]`)
                            if (!selectorUIRenderizada) {
                                return
                            }
                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                const porcentajeTranscurrido = respuestaServidor.ok.global.porcentajeTranscurrido
                                const estadoPago = respuestaServidor.ok.global.estadoPagoIDV
                                const estadoPagoUI = {
                                    pagado: "Pagado",
                                    noPagado: "No pagado",
                                    pagadoSuperadamente: "Pagado superadamente",
                                    pagadoParcialmente: "Pagado parcialmente"
                                }
                                const totalConImpuestos = respuestaServidor.ok.contenedorFinanciero.desgloseFinanciero?.global?.totales?.totalFinal ?
                                    respuestaServidor.ok.contenedorFinanciero.desgloseFinanciero?.global?.totales?.totalFinal + "$" :
                                    "Sin información"
                                selectorEstadoPago.textContent = estadoPagoUI[estadoPago]
                                selectorTotalConImpuestos.textContent = totalConImpuestos
                                const section = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                const selectorListaDePagosRenderizada = section.querySelector("[contenedorID=transacciones]")
                                const selectorDesgloseFinancieroUIRenderizado = section.querySelector("[componente=contenedorDesgloseTotal]")
                                const selectorProgreso = section.querySelector("[componente=progreso]")
                                selectorProgreso.style.width = porcentajeTranscurrido + "%"

                                if (selectorListaDePagosRenderizada) {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.actualizarDatosGlobalesPago({
                                        reservaUID
                                    })
                                }
                                if (selectorDesgloseFinancieroUIRenderizado) {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                        reservaUID
                                    })
                                }

                            }
                        },
                        rechazarReserva: {
                            UI: (metadatos) => {
                                const reservaUID = metadatos.reservaUID
                                const origen = metadatos.origen
                                const e = metadatos.e
                                const uiRenderizada = e.target.closest("[componente=advertenciaInmersiva]")

                                const contenedor = uiRenderizada.querySelector("[componente=constructor]")

                                contenedor.innerHTML = null

                                const instanciaUID_listaReservasPendientes = metadatos.instanciaUID_listaReservasPendientes
                                uiRenderizada.style.transition = "background 500ms"
                                uiRenderizada.style.background = "rgba(0, 0, 0, 0.3)"

                                const instanciaUID_opcionesReserva = uiRenderizada.getAttribute("instanciaUID")
                                const contenedorCancelacion = document.createElement("div")
                                contenedorCancelacion.classList.add("administracion_reservas_detallesReservas_cancelarReserva_contenedorCancelacion")
                                const tituloCancelarReserva = document.createElement("p")
                                tituloCancelarReserva.classList.add("tituloGris")
                                tituloCancelarReserva.textContent = "Rechazar y eliminar la reserva " + reservaUID
                                tituloCancelarReserva.style.color = "red"
                                contenedorCancelacion.appendChild(tituloCancelarReserva)
                                const botonCancelarProcesoCancelacion = document.createElement("div")
                                botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                                botonCancelarProcesoCancelacion.textContent = "Cerrar y volver atras"
                                botonCancelarProcesoCancelacion.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                contenedorCancelacion.appendChild(botonCancelarProcesoCancelacion)
                                const bloqueBloqueoApartamentos = document.createElement("div")
                                bloqueBloqueoApartamentos.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                const tituloBloquoApartamentos = document.createElement("div")
                                tituloBloquoApartamentos.classList.add(
                                    "padding10"
                                )

                                tituloBloquoApartamentos.textContent = "Rechazar la reserva elimina la reserva del sistema y libera los apartamentos, haciéndolos de nuevo disponibles para reservas.Para rechazar la reserva y eliminarla irreversiblemente junto con toda su información relacionada, debe escribir su contraseña de usuario y su cuenta debe tener autorización administrativa."
                                bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                                const campo = document.createElement("input")
                                campo.classList.add("administracion_reserva_detallesReserva_cancelarReserva_eliminarReserva_campo")
                                campo.setAttribute("campo", "clave")
                                campo.type = "password"
                                campo.placeholder = "Escriba la contraseña de su VitiniID"
                                bloqueBloqueoApartamentos.appendChild(campo)
                                contenedorCancelacion.appendChild(bloqueBloqueoApartamentos)
                                const bloqueBotones = document.createElement("div")
                                bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("administracion_reserva_detallesReserva_cancelarReserva_eliminarReserva_botonV1")
                                botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                botonCancelar.textContent = "Eliminar la reserva irreversiblemente."
                                botonCancelar.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.eliminarReservaIrreversiblemente.confirmar({
                                        reservaUID,
                                        instanciaUID: instanciaUID_opcionesReserva,
                                        origen
                                    })
                                })
                                bloqueBloqueoApartamentos.appendChild(botonCancelar)
                                contenedorCancelacion.appendChild(bloqueBotones)
                                contenedor.appendChild(contenedorCancelacion)
                            },
                        },
                    },
                    categoriasGlobales: {
                        alojamiento: {
                            arranque: async function () {
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                                const reservaUI = document.querySelector("[reservaUID]")
                                const reservaUID = reservaUI.getAttribute("reservaUID")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")

                                const marcoAlojamiento = document.createElement("div");
                                marcoAlojamiento.setAttribute("class", "reservaDetallesBloqueAlojamineto");
                                marcoAlojamiento.setAttribute("componente", "marcoAlojamiento");
                                marcoAlojamiento.setAttribute("instanciaUID", instanciaUID)
                                const mensajeSpinner = "Esperando a Casa Vitini..."
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple(mensajeSpinner)
                                marcoAlojamiento.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(marcoAlojamiento)
                                const transaccion = {
                                    reservaUID
                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"
                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "alojamiento",
                                        "pernoctantes",
                                    ]
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[componente=marcoAlojamiento][instanciaUID="${instanciaUID}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null

                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }
                                if (respuestaServidor?.ok) {
                                    const detallesReserva = respuestaServidor.ok
                                    const alojamiento = detallesReserva.alojamiento
                                    const pernoctantes = detallesReserva.pernoctantes

                                    const divPernoctantesSinAlojamiento = document.createElement("div");
                                    divPernoctantesSinAlojamiento.setAttribute("class", "resertaDetallesPernoctantesSinAlojameinto elementoOcultoInicialmente");
                                    divPernoctantesSinAlojamiento.setAttribute("componente", "espacioPernoctantesSinAlojamiento");

                                    const tituloPernoctantesSinHabitacion = document.createElement("div")
                                    tituloPernoctantesSinHabitacion.classList.add("administracion_reservas_detallesReservas_tituloPernoctantesSinHabitacion")
                                    tituloPernoctantesSinHabitacion.textContent = "Pernoctantes asociados a esta reserva sin habitación asignada"

                                    divPernoctantesSinAlojamiento.appendChild(tituloPernoctantesSinHabitacion)
                                    const contenedorPernoctantesSinHabitacion = document.createElement("div")
                                    contenedorPernoctantesSinHabitacion.classList.add("administracion_reservas_detallesReserva_contenedorPernoctantesSinHabitacion")
                                    contenedorPernoctantesSinHabitacion.setAttribute("componente", "contenedorPernoctantesSinHabitacion");
                                    divPernoctantesSinAlojamiento.appendChild(contenedorPernoctantesSinHabitacion)
                                    instanciaDestino.appendChild(divPernoctantesSinAlojamiento)

                                    const contenedorAlojamientoUI = document.createElement("div")
                                    contenedorAlojamientoUI.classList.add("administracionReservaDetallesBloqueContendioAlojamiento")
                                    contenedorAlojamientoUI.setAttribute("componente", "contenedorIntermedioAlojamiento")

                                    if (configuracionVista === "publica") {

                                    } else {
                                        instanciaDestino.appendChild(contenedorAlojamientoUI)
                                    }

                                    const botonAnadirApartamento = document.createElement("p");
                                    botonAnadirApartamento.setAttribute("class", "administracion_reservas_DetallesReserva_botonCategoria");
                                    botonAnadirApartamento.setAttribute("componenteBoton", "anadirApartamento");
                                    botonAnadirApartamento.setAttribute("componente", "menuDesplegable");
                                    botonAnadirApartamento.addEventListener("click", this.apartamentos.abrirMenuReservas)
                                    botonAnadirApartamento.textContent = "Añadir apartamento";
                                    contenedorAlojamientoUI.appendChild(botonAnadirApartamento)


                                    const espacioAlojamiento = document.createElement("div")
                                    espacioAlojamiento.classList.add("reservasDetallesBloqueAlojamiennto")
                                    espacioAlojamiento.setAttribute("componente", "espacioAlojamiento")
                                    instanciaDestino.appendChild(espacioAlojamiento)
                                    for (const [apartamentoIDV, configuracionApartamento] of Object.entries(alojamiento)) {
                                        const apartamentoUID = configuracionApartamento.apartamentoUID
                                        const apartamentoUI = configuracionApartamento.apartamentoUI
                                        const configuracionesHabitacion = configuracionApartamento.habitaciones

                                        const apartamentoComponenteUI = this.apartamentos.apatamentoUI({
                                            apartamentoIDV: apartamentoIDV,
                                            apartamentoUID: apartamentoUID,
                                            apartamentoUI: apartamentoUI
                                        })
                                        const apartamentoTituloComponenteUI = this.apartamentos.apartamentoTituloUI({
                                            apartamentoIDV: apartamentoIDV,
                                            apartamentoUID: apartamentoUID,
                                            apartamentoUI: apartamentoUI
                                        })
                                        apartamentoComponenteUI.appendChild(apartamentoTituloComponenteUI)
                                        delete configuracionApartamento.uid
                                        for (const [habitacionIDV, configuracionHabitacion] of Object.entries(configuracionesHabitacion)) {

                                            const habitacionUID = configuracionHabitacion.habitacionUID
                                            const habitacionUI = configuracionHabitacion.habitacionUI
                                            const camas = configuracionHabitacion.camas


                                            const habitacionComponenteUI = this.habitaciones.habitacionUI({
                                                habitacionIDV: habitacionIDV,
                                                habitacionUID: habitacionUID,
                                                apartamentoIDV: apartamentoIDV,
                                                habitacionUI: habitacionUI,
                                            })
                                            const habitacionTituloComponenteUI = this.habitaciones.habitacionTituloUI({
                                                habitacionIDV: habitacionIDV,
                                                habitacionUID: habitacionUID,
                                                apartamentoIDV: apartamentoIDV,
                                                habitacionUI: habitacionUI,
                                            })
                                            habitacionComponenteUI.appendChild(habitacionTituloComponenteUI)

                                            const camaComponenteUI = this.camas.contenedorCamasUI({
                                                habitacionIDV: habitacionIDV,
                                                habitacionUI: habitacionUI,
                                                apartamentoUI: apartamentoUI,
                                                apartamentoIDV: apartamentoIDV,
                                                habitacionUID: habitacionUID,
                                                camas: camas,
                                                reservaUID: reservaUID
                                            })
                                            habitacionComponenteUI.appendChild(camaComponenteUI)

                                            apartamentoComponenteUI.appendChild(habitacionComponenteUI)
                                        }
                                        espacioAlojamiento.appendChild(apartamentoComponenteUI)
                                    }

                                    for (const detallesPernoctante of pernoctantes) {
                                        const tipoPernoctante = detallesPernoctante.tipoPernoctante
                                        const nombreCompleto = detallesPernoctante.nombreCompleto
                                        const pasaporte = detallesPernoctante.pasaporte
                                        const clienteUID = detallesPernoctante?.clienteUID
                                        const habitacionUID = detallesPernoctante?.habitacionUID
                                        const pernoctanteUID = detallesPernoctante.pernoctanteUID
                                        const fechaCheckIn = detallesPernoctante.fechaCheckIn
                                        const fechaCheckOutAdelantado = detallesPernoctante.fechaCheckOutAdelantado
                                        const metadatos = {
                                            tipoPernoctante,
                                            clienteUID,
                                            pernoctanteUID,
                                            fechaCheckIn,
                                            fechaCheckOutAdelantado,
                                            nombreCompleto,
                                            pasaporte
                                        }
                                        if (habitacionUID) {
                                            metadatos.estadoAlojamiento = "alojado"
                                        } else {
                                            metadatos.estadoAlojamiento = "noAlojado"
                                        }
                                        const bloquePernoctantes = this.pernoctantes.pernoctanteUI(metadatos)

                                        const nombrePernoctante = this.pernoctantes.pernoctanteNombreUI(metadatos)
                                        bloquePernoctantes.appendChild(nombrePernoctante)
                                        const identificacionPernoctante = this.pernoctantes.pernoctantePasaporteUI(metadatos)
                                        bloquePernoctantes.appendChild(identificacionPernoctante)

                                        if (habitacionUID) {
                                            const selectorHabitacionUID = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                            selectorHabitacionUID.appendChild(bloquePernoctantes)
                                        } else {
                                            contenedorPernoctantesSinHabitacion.appendChild(bloquePernoctantes)
                                            divPernoctantesSinAlojamiento.classList.remove("elementoOcultoInicialmente")
                                        }
                                    }
                                    contenedorDinamico.appendChild(instanciaDestino)
                                    this.componentesUI.controlEspacioAlojamiento()
                                }
                            },
                            componentesUI: {
                                controlEspacioAlojamiento: () => {
                                    const selectorMarcoAlojameinto = document.querySelector("[componente=marcoAlojamiento]")
                                    const selectorApartamentos = document.querySelectorAll("[componente=marcoAlojamiento] [apartamentoIDV]")
                                    if (selectorApartamentos.length > 0) {
                                        document.querySelector("[componente=infoSinAlojamiento]")?.remove()
                                    } else {
                                        const infoNoAlojamiento = document.createElement("div")
                                        infoNoAlojamiento.classList.add("reservas_detalles_infoDesgloseNo")
                                        infoNoAlojamiento.setAttribute("componente", "infoSinAlojamiento")
                                        infoNoAlojamiento.textContent = "Esta reserva no contiene ningún apartamento."
                                        selectorMarcoAlojameinto.appendChild(infoNoAlojamiento)
                                    }
                                },
                                bannerReservaMenus: () => {
                                    const main = document.querySelector("main")
                                    const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")

                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",



                                    )
                                    const titulo = document.createElement("p")
                                    titulo.textContent = "Reserva"
                                    banner.appendChild(titulo)

                                    const reservaUID_UI = document.createElement("p")
                                    reservaUID_UI.classList.add(
                                        "negrita"
                                    )
                                    reservaUID_UI.textContent = reservaUID
                                    banner.appendChild(reservaUID_UI)
                                    return banner
                                },
                                bannerAlojamiento: (data) => {
                                    const apartamentoUI = data.apartamentoUI
                                    const apartamentoIDV = data.apartamentoIDV

                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",



                                    )
                                    const titulo = document.createElement("p")
                                    titulo.textContent = "Alojamiento"
                                    banner.appendChild(titulo)

                                    const alojamientoUI = document.createElement("p")
                                    alojamientoUI.classList.add(
                                        "negrita"
                                    )
                                    if (apartamentoIDV) {
                                        alojamientoUI.textContent = `${apartamentoUI} (${apartamentoIDV})`
                                    } else {
                                        alojamientoUI.textContent = `${apartamentoUI}`
                                        alojamientoUI.style.color = "red"
                                    }
                                    banner.appendChild(alojamientoUI)
                                    return banner

                                },
                                bannerHabitacion: (data) => {
                                    const habitacionUI = data.habitacionUI
                                    const habitacionIDV = data.habitacionIDV

                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",



                                    )
                                    const titulo = document.createElement("p")
                                    titulo.textContent = "Habitación del alojamiento"
                                    banner.appendChild(titulo)

                                    const habitacionUI_UI = document.createElement("p")
                                    habitacionUI_UI.classList.add(
                                        "negrita"
                                    )
                                    if (habitacionIDV) {
                                        habitacionUI_UI.textContent = `${habitacionUI} (${habitacionIDV})`
                                    } else {
                                        habitacionUI_UI.textContent = `${habitacionUI}`
                                        habitacionUI_UI.style.color = "red"
                                    }
                                    banner.appendChild(habitacionUI_UI)
                                    return banner

                                }
                            },
                            habitaciones: {
                                habitacionUI: (metadatos) => {
                                    const habitacionUI = document.createElement("div")
                                    habitacionUI.classList.add("administracionReservasDetallesBloqueHabitacion")
                                    habitacionUI.setAttribute("habitacionIDV", metadatos.habitacionIDV)
                                    habitacionUI.setAttribute("habitacionUID", metadatos.habitacionUID)

                                    return habitacionUI
                                },
                                habitacionTituloUI: function (metadatos) {
                                    const habitacionUI = metadatos.habitacionUI
                                    const habitacionIDV = metadatos.habitacionIDV
                                    const habitacionTituloUI = document.createElement("div")
                                    habitacionTituloUI.setAttribute("componente", "menuDesplegable")
                                    habitacionTituloUI.setAttribute("habitacionUI", habitacionUI)

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")


                                    if (configuracionVista === "publica") {
                                        habitacionTituloUI.classList.add("tituloHabitacion_noSel")

                                    } else {
                                        habitacionTituloUI.classList.add("tituloHabitacion")

                                        habitacionTituloUI.addEventListener("click", (e) => {
                                            const habitacionUID = e.target.closest("[habitacionUID]").getAttribute("habitacionUID")
                                            const apartamentoUI = e.target.closest("[apartamentoUI]").getAttribute("apartamentoUI")
                                            const apartamentoIDV = e.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV")


                                            this.opcionesHabitacion({
                                                habitacionUID,
                                                habitacionUI,
                                                apartamentoUI,
                                                habitacionIDV,
                                                apartamentoIDV

                                            })
                                        })
                                    }



                                    habitacionTituloUI.textContent = metadatos.habitacionUI
                                    return habitacionTituloUI
                                },
                                selectorCambioHabitacionUI: (pernoctanteUID) => {
                                    const selectorCambioHabitacionUI = document.createElement("div")
                                    selectorCambioHabitacionUI.classList.add("reservaDetallesCambioPernoctante")
                                    selectorCambioHabitacionUI.classList.add("parpadea")
                                    selectorCambioHabitacionUI.setAttribute("componente", "botonMoverCliente")
                                    selectorCambioHabitacionUI.textContent = "Cambiar aquí al pernoctante seleccionado"
                                    selectorCambioHabitacionUI.addEventListener("click", (e) => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.cambiarPernoctanteHabitacion(pernoctanteUID, e)
                                    })
                                    return selectorCambioHabitacionUI
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales
                                },
                                propuestaEliminarHabitacionUI: (datosEliminacion) => {
                                    const opcionPernoctantes = datosEliminacion.opcionesPernoctantes
                                    const habitacionUID = datosEliminacion.habitacionUID
                                    const habitacionUI = document
                                        .querySelector(`[habitacionUID="${habitacionUID}"]`)
                                        .querySelector("[habitacionUI]")
                                        .getAttribute("habitacionUI")
                                    let mensajeUI
                                    if (opcionPernoctantes === "conservar") {
                                        mensajeUI = `¿Confirmas eliminar la ${habitacionUI} del apartamento pero conservar los pernoctantes de esta habitación en la reserva, en la zona de pernoctantes en la reserva sin alojamiento?`
                                    }
                                    if (opcionPernoctantes === "eliminar") {
                                        mensajeUI = `¿Confirmas eliminar la ${habitacionUI} del apartamento junto con los pernoctantes que contiene de la reserva?`
                                    }
                                    let botonMenajeUI
                                    if (opcionPernoctantes === "eliminar") {
                                        botonMenajeUI = `Eliminar la ${habitacionUI} del apartamento y los pernoctantes que contiene de la reserva`
                                    }
                                    if (opcionPernoctantes === "conservar") {
                                        botonMenajeUI = `Eliminar la ${habitacionUI} del apartamento pero conservar a sus pernoctantes en la reserva`
                                    }

                                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                    const titulo = constructor.querySelector("[componente=titulo]")
                                    titulo.textContent = "Confirmar la eliminación"
                                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                    mensaje.textContent = mensajeUI

                                    const contenedorEspacio = constructor.querySelector("[componente=contenedor]")


                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                    botonAceptar.textContent = botonMenajeUI
                                    botonAceptar.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const datosEliminacion = {
                                            habitacionUID: habitacionUID,
                                            opcionPernoctantes: opcionPernoctantes,
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.eliminarHabitacion(datosEliminacion)
                                    })

                                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                    botonCancelar.textContent = "Cancelar la eliminación"

                                    document.querySelector("main").appendChild(pantallaInmersiva)


                                },
                                opcionesHabitacion: async (data) => {
                                    const main = document.querySelector("main")
                                    const habitacionUID = data.habitacionUID
                                    const habitacionUI = data.habitacionUI
                                    const apartamentoUI = data.apartamentoUI
                                    const apartamentoIDV = data.apartamentoIDV
                                    const habitacionIDV = data.habitacionIDV


                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    main.appendChild(ui)
                                    const contenedor = ui.querySelector("[componente=contenedor]")

                                    const titulo = document.createElement("div")
                                    titulo.classList.add(
                                        "tituloGris",
                                        "padding14"
                                    )
                                    titulo.textContent = `Opciones de la ${habitacionUI} en ${apartamentoUI}`
                                    contenedor.appendChild(titulo)


                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",
                                        "borderRadius12",
                                        "backgroundGrey1",
                                        "padding14",
                                        "gap6"
                                    )
                                    contenedor.appendChild(banner)


                                    const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                        alojamiento.
                                        componentesUI.
                                        bannerReservaMenus()
                                    banner.appendChild(bannerReserva)

                                    const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                        alojamiento.
                                        componentesUI.
                                        bannerAlojamiento({
                                            apartamentoUI: apartamentoUI,
                                            apartamentoIDV: apartamentoIDV

                                        })
                                    banner.appendChild(bannerAlojamiento)

                                    const bannerHabitacion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                        alojamiento.
                                        componentesUI.
                                        bannerHabitacion({
                                            habitacionUI: habitacionUI,
                                            habitacionIDV: habitacionIDV

                                        })
                                    banner.appendChild(bannerHabitacion)

                                    const opcionAddPernoctante = document.createElement("p")
                                    opcionAddPernoctante.classList.add("botonV1BlancoIzquierda")
                                    opcionAddPernoctante.textContent = `Añadir pernoctante en la ${habitacionUI}`
                                    opcionAddPernoctante.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.formularioNuevoPernoctanteEnHabitacionUI({
                                            habitacionUID,
                                            habitacionUI,
                                            apartamentoUI,
                                            habitacionIDV,
                                            apartamentoIDV
                                        })
                                    })
                                    contenedor.appendChild(opcionAddPernoctante)


                                    const infoElimiacion = document.createElement("p")
                                    infoElimiacion.classList.add(
                                        "padding6"
                                    )
                                    infoElimiacion.textContent = "Opciones de eliminación de la habitación"
                                    contenedor.append(infoElimiacion)

                                    const opcionEliminarHabSinPernoc = document.createElement("p")
                                    opcionEliminarHabSinPernoc.classList.add("botonV1BlancoIzquierda")
                                    opcionEliminarHabSinPernoc.textContent = `Eliminar la ${habitacionUI} pero mantener los pernoctantes que contiene asignados a esta reserva`
                                    opcionEliminarHabSinPernoc.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.propuestaEliminarHabitacionUI({
                                            opcionesPernoctantes: "conservar",
                                            habitacionUID: habitacionUID
                                        })
                                    })
                                    contenedor.appendChild(opcionEliminarHabSinPernoc)


                                    const eliminarHabYPernoc = document.createElement("p")
                                    eliminarHabYPernoc.classList.add("botonV1BlancoIzquierda")
                                    eliminarHabYPernoc.textContent = `Eliminar la ${habitacionUI} y tambien los pernoctantes que contiene de la reserva`
                                    eliminarHabYPernoc.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.propuestaEliminarHabitacionUI({
                                            opcionesPernoctantes: "eliminar",
                                            habitacionUID: habitacionUID
                                        })
                                    })
                                    contenedor.appendChild(eliminarHabYPernoc)

                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.setAttribute("boton", "cancelar")
                                    botonCancelar.textContent = "Cerrar y volver a la reserva"
                                    botonCancelar.addEventListener("click", () => {
                                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    contenedor.appendChild(botonCancelar)
                                },
                                eliminarHabitacion: async (datosElimiacion) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const habitacionUID = datosElimiacion.habitacionUID
                                    const opcionPernoctantes = datosElimiacion.opcionPernoctantes
                                    const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const opcionesPantallaDeCarga = {
                                        instanciaUID: instanciaUIDPantallaDeCarga,
                                        mensaje: "Eliminando habitación..."
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                    const pantallaDeCargaRenderizada = document
                                        .querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/alojamiento/eliminarHabitacionReserva",
                                        reservaUID: String(reservaUID),
                                        habitacionUID: String(habitacionUID),
                                        pernoctantes: opcionPernoctantes
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    pantallaDeCargaRenderizada?.remove()
                                    if (respuestaServidor?.error) {
                                        if (!pantallaDeCargaRenderizada) {

                                        }
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        if (opcionPernoctantes === "eliminar") {
                                            document.querySelector(`[habitacionUID="${habitacionUID}"]`)?.remove()
                                        }
                                        if (opcionPernoctantes === "conservar") {
                                            const selectorPernoctantesHabitacion = document
                                                .querySelectorAll(`[habitacionUID="${habitacionUID}"] [tipoCliente]`)
                                            selectorPernoctantesHabitacion.forEach((pernoctanteSeleccionado) => {
                                                const nombreCompleto = pernoctanteSeleccionado.querySelector("[componente=nombreCompleto]").textContent
                                                const pasaporte = pernoctanteSeleccionado.querySelector("[componente=pasaporte]").textContent
                                                const tipoCliente = pernoctanteSeleccionado.getAttribute("tipoCliente")
                                                const pernoctanteUID = pernoctanteSeleccionado.getAttribute("pernoctanteUID")
                                                const clienteUID = pernoctanteSeleccionado.getAttribute("clienteUID")
                                                const fechaCheckIn = pernoctanteSeleccionado.getAttribute("fechaCheckIn")
                                                const fechaCheckOut = pernoctanteSeleccionado.getAttribute("fechaCheckOut")
                                                const datosPernoctante = {
                                                    tipoPernoctante: tipoCliente,
                                                    clienteUID: clienteUID,
                                                    pernoctanteUID: pernoctanteUID,
                                                    estadoAlojamiento: "noAlojado",
                                                    fechaCheckIn: fechaCheckIn,
                                                    fechaCheckOutAdelantado: fechaCheckOut
                                                }
                                                const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(datosPernoctante)
                                                const datosNombre = {
                                                    nombreCompleto: nombreCompleto,
                                                }
                                                const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(datosNombre)
                                                bloquePernoctantes.appendChild(nombrePernoctante)
                                                const datosPasaporte = {
                                                    pasaporte: pasaporte,
                                                }
                                                const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(datosPasaporte)
                                                bloquePernoctantes.appendChild(identificacionPernoctante)
                                                if (document.querySelector("[reservaUID]").getAttribute("reservaUID") === reservaUID) {
                                                    const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                                    zonaDestino.appendChild(bloquePernoctantes)
                                                }
                                            })
                                            document.querySelector(`[habitacionUID="${habitacionUID}"]`)?.remove()
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                    }
                                },

                            },
                            apartamentos: {
                                apatamentoUI: (metadatos) => {
                                    const apartamento = document.createElement("div")
                                    apartamento.classList.add("administracionReservasDetallesBloqueApartamento")
                                    apartamento.setAttribute("apartamentoIDV", metadatos.apartamentoIDV)
                                    apartamento.setAttribute("apartamentoUID", metadatos.apartamentoUID)
                                    apartamento.setAttribute("apartamentoUI", metadatos.apartamentoUI)
                                    return apartamento
                                },
                                apartamentoTituloUI: function (metadatos) {

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const apartamentoTitulo = document.createElement("div")
                                    apartamentoTitulo.setAttribute("componente", "menuDesplegable")
                                    apartamentoTitulo.textContent = metadatos.apartamentoUI

                                    if (configuracionVista === "publica") {
                                        apartamentoTitulo.classList.add("tituloApartamento_noSel")
                                    } else {
                                        apartamentoTitulo.classList.add("tituloApartamento")
                                        apartamentoTitulo.addEventListener("click", this.opcionesApartamento)
                                    }

                                    return apartamentoTitulo
                                },
                                propuestaEliminarApartamentoUI: (datosElimiacion) => {

                                    const apartamentoUID = datosElimiacion.apartamentoUID
                                    const apartamentoUI = datosElimiacion.apartamentoUI
                                    const tipoBloqueo = datosElimiacion.tipoBloqueo
                                    let mensajeUI
                                    if (tipoBloqueo === "sinBloqueo") {
                                        mensajeUI = `¿Confirmas eliminar el ${apartamentoUI} y liberarlo para que esté disponible para reservar públicamente? Los pernoctantes de este apartamento no se eliminarán de la reserva`
                                    }
                                    if (tipoBloqueo === "permanente") {
                                        mensajeUI = `¿Confirmas eliminar el ${apartamentoUI} y bloquearlo indefinidamente? (Hay desbloquearlo manualmente) Los pernoctantes de este apartamento no se eliminarán de la reserva`
                                    }
                                    if (tipoBloqueo === "rangoTemporal") {
                                        mensajeUI = `¿Confirmas eliminar el ${apartamentoUI} y bloquearlo durante el mismo rango de fechas que esta reserva? Los pernoctantes de este apartamento no se eliminarán de la reserva`
                                    }
                                    let botonMenajeUI
                                    if (tipoBloqueo === "permanente") {
                                        botonMenajeUI = `Eliminar el ${apartamentoUI} de la reserva y bloquearlo indefinidamente`
                                    }
                                    if (tipoBloqueo === "sinBloqueo") {
                                        botonMenajeUI = `Eliminar la ${apartamentoUI} de la reserva y liberarlo para que se pueda reservas`
                                    }
                                    if (tipoBloqueo === "rangoTemporal") {
                                        botonMenajeUI = `Eliminar la ${apartamentoUI} de la reserva y bloquearlo durante el mismo rango que la reserva`
                                    }



                                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                    const titulo = constructor.querySelector("[componente=titulo]")
                                    titulo.textContent = "Confirmar la eliminación"
                                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                    mensaje.textContent = mensajeUI

                                    const contenedorEspacio = constructor.querySelector("[componente=contenedor]")

                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                    botonAceptar.textContent = botonMenajeUI
                                    botonAceptar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.eliminarApartamento({
                                            apartamentoUID: apartamentoUID,
                                            tipoBloqueo: tipoBloqueo,
                                        })
                                    })
                                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                    botonCancelar.textContent = "Cancelar la eliminación"

                                    document.querySelector("main").appendChild(pantallaInmersiva)

                                },
                                abrirMenuReservas: async () => {
                                    const main = document.querySelector("main")

                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    const instanciaUID = ui.getAttribute("instanciaUID")
                                    const contenedor = ui.querySelector("[componente=contenedor]")
                                    main.appendChild(ui)

                                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                                    contenedor.appendChild(spinner)

                                    const botonCerrar = document.createElement("div")
                                    botonCerrar.classList.add(
                                        "botonV1",
                                        "comportamientoBoton"
                                    )
                                    botonCerrar.textContent = "Cerrar y volver"
                                    botonCerrar.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    contenedor.appendChild(botonCerrar)


                                    const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                                    const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/alojamiento/apartamentosDisponiblesParaAnadirAReserva",
                                        fechaEntrada: fechaEntrada,
                                        fechaSalida: fechaSalida
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    contenedor.innerHTML = null

                                    const botonCerrar1 = document.createElement("div")
                                    botonCerrar1.classList.add(
                                        "botonV1",
                                        "comportamientoBoton"
                                    )
                                    botonCerrar1.textContent = "Cerrar y volver"
                                    botonCerrar1.addEventListener("click", () => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    contenedor.appendChild(botonCerrar1)

                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const apartamentosDisponibles = respuestaServidor?.ok.apartamentosDisponibles
                                        const apartamentosNoDisponibles = respuestaServidor?.ok.apartamentosNoDisponibles
                                        if (apartamentosDisponibles.length > 0) {
                                            const bloqueApartamentos = document.createElement("div")
                                            bloqueApartamentos.classList.add(
                                                "flexVertical",
                                                "gap10"

                                            )
                                            const tituloApartamentoComponenteUIs = document.createElement("div")
                                            tituloApartamentoComponenteUIs.classList.add(
                                                "padding14",
                                                "negrita"

                                            )
                                            tituloApartamentoComponenteUIs.textContent = "Apartamentos disponibles"
                                            bloqueApartamentos.appendChild(tituloApartamentoComponenteUIs)
                                            for (const detallesApartamento of apartamentosDisponibles) {
                                                const apartamentoUI = document.createElement("div")
                                                apartamentoUI.classList.add("botonV1BlancoIzquierda")
                                                apartamentoUI.textContent = detallesApartamento.apartamentoUI
                                                apartamentoUI.addEventListener("click", (e) => {
                                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.anadirApartamento({

                                                        instanciaUID_contenedorUI: instanciaUID,
                                                        apartamentoIDV: detallesApartamento.apartamentoIDV
                                                    })
                                                })
                                                bloqueApartamentos.appendChild(apartamentoUI)
                                            }
                                            contenedor.appendChild(bloqueApartamentos)
                                        }
                                        if (apartamentosNoDisponibles.length > 0) {
                                            const bloqueApartamentos = document.createElement("div")
                                            bloqueApartamentos.classList.add(
                                                "flexVertical",
                                                "gap10"

                                            )
                                            const tituloApartamentoComponenteUIs = document.createElement("div")
                                            tituloApartamentoComponenteUIs.classList.add(
                                                "padding14",
                                                "negrita"
                                            )
                                            tituloApartamentoComponenteUIs.textContent = "Apartamentos no disponibles"
                                            bloqueApartamentos.appendChild(tituloApartamentoComponenteUIs)
                                            for (const detallesApartamento of apartamentosNoDisponibles) {
                                                const apartamentoUI = document.createElement("div")
                                                apartamentoUI.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                apartamentoUI.textContent = detallesApartamento.apartamentoUI
                                                bloqueApartamentos.appendChild(apartamentoUI)
                                            }
                                            contenedor.appendChild(bloqueApartamentos)
                                        }
                                    }

                                },
                                opcionesApartamento: async (apartamento) => {

                                    const main = document.querySelector("main")
                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const instanciaUID = ui.getAttribute("instanciaUID")

                                    main.appendChild(ui)
                                    const contenedor = ui.querySelector("[componente=contenedor]")
                                    const spinner = casaVitini.ui.componentes.spinner({
                                        mensaje: "Obteniendo las opciones del apartamento..."
                                    })
                                    contenedor.appendChild(spinner)

                                    const contenedorApartmeanto = apartamento.target.closest("[apartamentoIDV]")
                                    const apartamentoIDV = contenedorApartmeanto.getAttribute("apartamentoIDV")
                                    const apartamentoUID = contenedorApartmeanto.getAttribute("apartamentoUID")
                                    const apartamentoUI = apartamento.target.textContent

                                    const respuestaServidor = await casaVitini.shell.servidor({
                                        zona: "administracion/reservas/detallesReserva/alojamiento/estadoHabitacionesApartamento",
                                        reservaUID: reservaUID,
                                        apartamentoUID: apartamentoUID
                                    })
                                    contenedor.innerHTML = null

                                    const titulo = document.createElement("div")
                                    titulo.classList.add(
                                        "tituloGris",
                                        "padding14"
                                    )
                                    titulo.textContent = `Opciones del ${apartamentoUI}`
                                    contenedor.appendChild(titulo)

                                    const banner = document.createElement("div")
                                    banner.classList.add(
                                        "flexVertical",
                                        "borderRadius12",
                                        "backgroundGrey1",
                                        "padding14",
                                        "gap6"
                                    )
                                    contenedor.appendChild(banner)


                                    const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.componentesUI.bannerReservaMenus()
                                    banner.appendChild(bannerReserva)

                                    const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                        alojamiento.
                                        componentesUI.
                                        bannerAlojamiento({
                                            apartamentoUI: apartamentoUI,
                                            apartamentoIDV: apartamentoIDV
                                        })
                                    banner.appendChild(bannerAlojamiento)


                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                    }


                                    const opcionesEliminacion = function (selector) {



                                        if (selector === "sinBloqueo") {
                                            const opcion = document.createElement("p")
                                            opcion.classList.add("botonV1BlancoIzquierda")
                                            opcion.setAttribute("componente", "menuVolatil")
                                            opcion.textContent = `Eliminar ${apartamentoUI} y liberarlo para que este disponible para reservar`
                                            opcion.addEventListener("click", () => {
                                                casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.propuestaEliminarApartamentoUI({
                                                    apartamentoUID: apartamentoUID,
                                                    apartamentoUI: apartamentoUI,
                                                    tipoBloqueo: "sinBloqueo"
                                                })
                                            })
                                            return opcion
                                        }
                                        if (selector === "bloqueoPermanente") {
                                            const opcion = document.createElement("p")
                                            opcion.classList.add("botonV1BlancoIzquierda")
                                            opcion.textContent = `Eliminar ${apartamentoUI} bloquearlo permanentemente. (Deberá desbloquearlo manualmente el bloqueo permanente)`
                                            opcion.setAttribute("componente", "menuVolatil")
                                            opcion.addEventListener("click", () => {
                                                casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()
                                                const datosPropuestaElimiacion = {
                                                    apartamentoUID: apartamentoUID,
                                                    apartamentoUI: apartamentoUI,
                                                    tipoBloqueo: "permanente"
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.propuestaEliminarApartamentoUI(datosPropuestaElimiacion)
                                            })
                                            return opcion


                                        }
                                        if (selector === "bloqueoTemporal") {
                                            const opcion = document.createElement("p")
                                            opcion.classList.add("botonV1BlancoIzquierda")
                                            opcion.setAttribute("componente", "menuVolatil")
                                            opcion.textContent = `Eliminar ${apartamentoUI} y mantenerlo bloqueado en el rango de fechas de esta reserva`
                                            opcion.addEventListener("click", () => {
                                                casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()
                                                const datosPropuestaElimiacion = {
                                                    apartamentoUID: apartamentoUID,
                                                    apartamentoUI: apartamentoUI,
                                                    tipoBloqueo: "rangoTemporal"
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.propuestaEliminarApartamentoUI(datosPropuestaElimiacion)
                                            })
                                            return opcion


                                        }
                                    }
                                    if (respuestaServidor?.info) {
                                        const opcionApartamento = document.createElement("p")
                                        opcionApartamento.classList.add("opcionDeInformacion")
                                        opcionApartamento.setAttribute("componente", "menuVolatil")
                                        opcionApartamento.textContent = respuestaServidor?.info
                                        contenedor.appendChild(opcionApartamento)

                                        const opcionSinBloqueo = opcionesEliminacion("sinBloqueo")
                                        contenedor.appendChild(opcionSinBloqueo)

                                    }
                                    if (respuestaServidor?.ok) {

                                        const habitacionesApartamento = respuestaServidor?.ok
                                        if (habitacionesApartamento.length === 0) {
                                            const opcionApartamento = document.createElement("p")
                                            opcionApartamento.classList.add(
                                                "padding14",
                                                "negrita"
                                            )
                                            opcionApartamento.textContent = `Este apartamento tiene ya todas las habitaciones implementadas en la reserva, según su configuración de alojamiento.`
                                            contenedor.appendChild(opcionApartamento)
                                        } else if (habitacionesApartamento.length > 0) {

                                            const infoHabitaciones = document.createElement("p")
                                            infoHabitaciones.classList.add(
                                                "padding14"
                                            )
                                            infoHabitaciones.textContent = `Lista de habitaciones disponbiles`
                                            contenedor.appendChild(infoHabitaciones)


                                            habitacionesApartamento.forEach((habitacion) => {
                                                const opcionApartamento = document.createElement("p")
                                                opcionApartamento.classList.add("botonV1BlancoIzquierda")
                                                opcionApartamento.setAttribute("componente", "menuVolatil")
                                                opcionApartamento.textContent = `Anadir ${habitacion.habitacionUI}`
                                                opcionApartamento.addEventListener("click", async () => {

                                                    const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()

                                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                        instanciaUID: instanciaUID_pantallaDeCarga,
                                                        mensaje: "Obteniendo habitaciónes..."
                                                    })

                                                    const transaccion = {
                                                        zona: "administracion/reservas/detallesReserva/alojamiento/anadirHabitacionAlApartamentoEnReserva",
                                                        reservaUID: String(reservaUID),
                                                        apartamentoUID: String(apartamentoUID),
                                                        habitacionIDV: habitacion.habitacionIDV
                                                    }
                                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCarga}"]`)
                                                    if (!pantallaDeCargaRenderizada) {
                                                        return
                                                    }
                                                    pantallaDeCargaRenderizada?.remove()

                                                    if (respuestaServidor?.error) {
                                                        return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                                    }
                                                    if (respuestaServidor?.ok) {
                                                        const uiContenedor = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                                        if (!uiContenedor) {
                                                            return
                                                        }
                                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                                        const bloqueHabitacionUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.habitacionUI({
                                                            habitacionIDV: habitacion.habitacionIDV,
                                                            habitacionUID: respuestaServidor?.nuevoUID,
                                                            apartamentoIDV: apartamentoIDV
                                                        })

                                                        const nombreHabitacionUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.habitacionTituloUI({
                                                            habitacionIDV: habitacion.habitacionIDV,
                                                            habitacionUID: respuestaServidor?.nuevoUID,
                                                            apartamentoIDV: apartamentoIDV,
                                                            habitacionUI: habitacion.habitacionUI,

                                                        })
                                                        bloqueHabitacionUI.appendChild(nombreHabitacionUI)

                                                        const camaComponenteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.camas.contenedorCamasUI({
                                                            habitacionIDV: habitacion.habitacionIDV,
                                                            apartamentoIDV: apartamentoIDV,
                                                            habitacionUID: respuestaServidor?.nuevoUID,
                                                            camas: {
                                                                compartida: {
                                                                    camaUI: "Sin cama asignada"
                                                                },
                                                                fisicas: []
                                                            },
                                                            reservaUID: reservaUID
                                                        })
                                                        bloqueHabitacionUI.appendChild(camaComponenteUI)
                                                        document.querySelector(`[apartamentoUID="${apartamentoUID}"]`).appendChild(bloqueHabitacionUI)
                                                    }
                                                })
                                                contenedor.appendChild(opcionApartamento)
                                            })
                                        }



                                        const infoEliminacion = document.createElement("p")
                                        infoEliminacion.classList.add(
                                            "padding14"
                                        )
                                        infoEliminacion.textContent = `Opciones de eliminación del ${apartamentoUI}`
                                        contenedor.appendChild(infoEliminacion)

                                        const opcionSinBloqueo = opcionesEliminacion("sinBloqueo")
                                        contenedor.appendChild(opcionSinBloqueo)


                                        const infoEliminacionConBloqueo = document.createElement("p")
                                        infoEliminacionConBloqueo.classList.add(
                                            "padding14"
                                        )
                                        infoEliminacionConBloqueo.textContent = `Eliminar el ${apartamentoUI} aplicando un bloqueo`
                                        contenedor.appendChild(infoEliminacionConBloqueo)

                                        const opcionbloqueoTemporal = opcionesEliminacion("bloqueoTemporal")
                                        contenedor.appendChild(opcionbloqueoTemporal)
                                        const opcionbloqueoPermanente = opcionesEliminacion("bloqueoPermanente")
                                        contenedor.appendChild(opcionbloqueoPermanente)
                                    }


                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.setAttribute("boton", "cancelar")
                                    botonCancelar.textContent = "Cerrar y volver a la reserva"
                                    botonCancelar.addEventListener("click", () => {
                                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    contenedor.appendChild(botonCancelar)
                                },
                                anadirApartamento: async (data) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const apartamentoIDV = data.apartamentoIDV
                                    const instanciaUI_conteneodrUI = data.instanciaUID_contenedorUI
                                    const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()

                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                        instanciaUID: instanciaUID_pantallaDeCarga,
                                        mensaje: "Añadiendo alojamiento a la reserva..."
                                    })


                                    const respuestaServidor = await casaVitini.shell.servidor({
                                        zona: "administracion/reservas/detallesReserva/alojamiento/anadirApartamentoReserva",
                                        reservaUID: String(reservaUID),
                                        apartamentoIDV: apartamentoIDV
                                    })
                                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCarga}"]`)
                                    if (!pantallaDeCargaRenderizada) {
                                        return
                                    }
                                    pantallaDeCargaRenderizada?.remove()

                                    if (respuestaServidor?.error) {
                                        return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {

                                        const uiContenedor = document.querySelector(`[instanciaUID="${instanciaUI_conteneodrUI}"]`)
                                        if (!uiContenedor) {
                                            return
                                        }

                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        const apartamentoComponenteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.apatamentoUI({
                                            apartamentoIDV: apartamentoIDV,
                                            apartamentoUID: respuestaServidor?.nuevoUID,
                                            apartamentoUI: respuestaServidor?.apartamentoUI
                                        })

                                        const tituloApartamentoComponenteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.apartamentos.apartamentoTituloUI({
                                            apartamentoUI: respuestaServidor?.apartamentoUI
                                        })
                                        apartamentoComponenteUI.appendChild(tituloApartamentoComponenteUI)













                                        document.querySelector("[componente=espacioAlojamiento]").appendChild(apartamentoComponenteUI)
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.componentesUI.controlEspacioAlojamiento()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()
                                    }
                                },
                                eliminarApartamento: async (metadatos) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const tipoBloqueo = metadatos.tipoBloqueo
                                    const apartamentoUID = metadatos.apartamentoUID
                                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                    const opcionesPantallaDeCarga = {
                                        instanciaUID: instanciaUID,
                                        mensaje: "Eliminando habitación..."
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)

                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/alojamiento/eliminarApartamentoReserva",
                                        reservaUID: reservaUID,
                                        apartamentoUID: apartamentoUID,
                                        tipoBloqueo: tipoBloqueo
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const pantallaDeCargaRenderizada = document
                                        .querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUID}"]`)
                                    pantallaDeCargaRenderizada?.remove()
                                    if (!pantallaDeCargaRenderizada) {
                                        return
                                    }
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const selectorPernoctantesHabitacion = document.querySelectorAll(`[apartamentoUID="${apartamentoUID}"] [pernoctanteUID]`)
                                        selectorPernoctantesHabitacion.forEach((pernoctanteSeleccionado) => {
                                            const nombreCompleto = pernoctanteSeleccionado.querySelector("[componente=nombreCompleto]").textContent
                                            const pasaporte = pernoctanteSeleccionado.querySelector("[componente=pasaporte]").textContent
                                            const tipoCliente = pernoctanteSeleccionado.getAttribute("tipoCliente")
                                            const pernoctanteUID = pernoctanteSeleccionado.getAttribute("pernoctanteUID")
                                            const clienteUID = pernoctanteSeleccionado.getAttribute("clienteUID")
                                            const fechaCheckIn = pernoctanteSeleccionado.getAttribute("fechaCheckIn")
                                            const fechaCheckOut = pernoctanteSeleccionado.getAttribute("fechaCheckOut")

                                            const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI({
                                                tipoPernoctante: tipoCliente,
                                                clienteUID: clienteUID,
                                                pernoctanteUID: pernoctanteUID,
                                                estadoAlojamiento: "noAlojado",
                                                fechaCheckIn: fechaCheckIn,
                                                fechaCheckOutAdelantado: fechaCheckOut
                                            })

                                            const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI({
                                                nombreCompleto: nombreCompleto,
                                            })
                                            bloquePernoctantes.appendChild(nombrePernoctante)

                                            const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI({
                                                pasaporte: pasaporte,
                                            })
                                            bloquePernoctantes.appendChild(identificacionPernoctante)
                                            const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                            zonaDestino.appendChild(bloquePernoctantes)
                                            zonaDestino.classList.remove("elementoOcultoInicialmente")
                                        })
                                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                        document.querySelector(`[apartamentoUID="${apartamentoUID}"]`).remove()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.componentesUI.controlEspacioAlojamiento()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                    }
                                    if (respuestaServidor?.estadoDesgloseFinanciero === "actualizar") {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()
                                    }
                                },
                            },
                            camas: {
                                contenedorCamasUI: function (data) {

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const camas = data.camas
                                    const habitacionIDV = data.habitacionIDV
                                    const apartamentoIDV = data.apartamentoIDV
                                    const apartamentoUI = data.apartamentoUI
                                    const habitacionUID = data.habitacionUID
                                    const habitacionUI = data.habitacionUI
                                    const reservaUID = data.reservaUID

                                    const camaCompartida = camas.compartida
                                    const contenedorCamasFisicas = camas.fisicas

                                    const contenedorCamasUI = document.createElement("div")
                                    contenedorCamasUI.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "padding2",

                                    )
                                    contenedorCamasUI.setAttribute("contenedor", "camas")

                                    const camaCompartidaUI = document.createElement("div")
                                    camaCompartidaUI.classList.add(
                                        "padding10",
                                        "borderRadius6",
                                        "backgroundGrey1"

                                    )
                                    camaCompartidaUI.setAttribute("contenedor", "camaCompartida")
                                    camaCompartidaUI.setAttribute("componente", "menuDesplegable")
                                    camaCompartidaUI.textContent = camaCompartida.camaUI

                                    if (configuracionVista === "publica") {
                                    } else {
                                        camaCompartidaUI.classList.add("comportamientoBoton")
                                        camaCompartidaUI.addEventListener("click", (e) => {
                                            this.anadirCama(e, {
                                                apartamentoIDV,
                                                apartamentoUI,
                                                habitacionIDV,
                                                habitacionUID,
                                                habitacionUI
                                            })
                                        })
                                    }


                                    contenedorCamasUI.appendChild(camaCompartidaUI)

                                    if (contenedorCamasFisicas.length > 0) {
                                        const contenedorCamasFisicasUI = this.contenedorCamasFisicas()
                                        contenedorCamasUI.appendChild(contenedorCamasFisicasUI)

                                        contenedorCamasFisicas.forEach((camaFisica) => {
                                            const componenteUID = camaFisica.componenteUID
                                            const camaIDV = camaFisica.camaIDV
                                            const camaUI = camaFisica.camaUI

                                            const camaFisicaUI = this.camaFisicaUI({
                                                componenteUID,
                                                camaIDV,
                                                reservaUID,
                                                habitacionUID,
                                                habitacionUI,
                                                camaUI,
                                            })
                                            contenedorCamasFisicasUI.appendChild(camaFisicaUI)
                                        })
                                    }

                                    return contenedorCamasUI
                                },
                                camaFisicaUI: function (data) {


                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const componenteUID = data.componenteUID
                                    const camaIDV = data.camaIDV
                                    const reservaUID = data.reservaUID
                                    const camaUI = data.camaUI
                                    const habitacionUI = data.habitacionUI
                                    const habitacionUID = data.habitacionUID



                                    const camaFisicaUI = document.createElement("div")
                                    camaFisicaUI.classList.add(
                                        "padding10",
                                        "borderRadius6",
                                        "backgroundGrey1"
                                    )
                                    camaFisicaUI.setAttribute("componente", "menuDesplegable")
                                    camaFisicaUI.setAttribute("camaIDV", camaIDV)
                                    camaFisicaUI.setAttribute("componenteUID", componenteUID)
                                    camaFisicaUI.textContent = camaUI

                                    if (configuracionVista === "publica") {
                                    } else {
                                        camaFisicaUI.classList.add("comportamientoBoton")
                                        camaFisicaUI.addEventListener("click", () => {
                                            this.eliminarCamaFisica.ui({
                                                camaUI,
                                                componenteUID,
                                                habitacionUI,
                                                reservaUID,
                                                camaIDV,
                                                habitacionUID
                                            })
                                        })
                                    }
                                    return camaFisicaUI
                                },
                                contenedorCamasFisicas: () => {
                                    const contenedorCamasFisicasUI = document.createElement("div")
                                    contenedorCamasFisicasUI.setAttribute("contenedor", "camasFisicas")
                                    contenedorCamasFisicasUI.classList.add(
                                        "flexVertical",
                                        "gap6",
                                    )
                                    const titulo = document.createElement("div")
                                    titulo.classList.add(
                                        "padding10"
                                    )
                                    titulo.textContent = "Camas extra"
                                    contenedorCamasFisicasUI.appendChild(titulo)
                                    return contenedorCamasFisicasUI
                                },
                                eliminarCamaFisica: {
                                    ui: function (data) {

                                        const camaUI = data.camaUI
                                        const componenteUID = data.componenteUID
                                        const habitacionUI = data.habitacionUI
                                        const reservaUID = data.reservaUID
                                        const camaIDV = data.camaIDV
                                        const habitacionUID = data.habitacionUID

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        const instanciaUID_pantallaInmersia = pantallaInmersiva.getAttribute("instanciaUID")
                                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Eliminar ${camaUI}`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = `Confirmar eliminar la cama física ${camaUI} de la habitación ${habitacionUI} de la reserva ${reservaUID}, ¿Estás de acuerdo?`

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Eliminar cama física"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmar({
                                                componenteUID,
                                                habitacionUI,
                                                reservaUID,
                                                camaIDV,
                                                habitacionUID,
                                                instanciaUID_pantallaInmersia
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"

                                        document.querySelector("main").appendChild(pantallaInmersiva)

                                    },
                                    confirmar: async (data) => {

                                        const componenteUID = data.componenteUID
                                        const habitacionUI = data.habitacionUI
                                        const reservaUID = data.reservaUID
                                        const camaIDV = data.camaIDV
                                        const habitacionUID = data.habitacionUID

                                        const instanciaUID_pantallaInmersia = data.instanciaUID_pantallaInmersia
                                        const instanciaUID_pantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        const mensaje = "Eliminado cama..."
                                        const datosPantallaSuperpuesta = {
                                            instanciaUID: instanciaUID_pantallaCarga,
                                            mensaje: mensaje
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/alojamiento/eliminarCamaFisicaDeHabitacion",
                                            componenteUID: String(componenteUID),
                                            habitacionUI: String(habitacionUI),
                                            reservaUID: String(reservaUID)
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                        document.querySelector(`[instanciaUID="${instanciaUID_pantallaCarga}"]`)?.remove()

                                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaInmersia}"]`)
                                        if (!instanciaRenderizada) { return }
                                        instanciaRenderizada.remove()

                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            const contenedorSelectorCamas = document
                                                .querySelector(`[reservaUID="${reservaUID}"]`)
                                                .querySelector(`[habitacionUID="${habitacionUID}"]`)
                                                .querySelector(`[contenedor=camasFisicas]`)

                                            const selectorCamaObsoleta = contenedorSelectorCamas
                                                .querySelector(`[componenteUID="${componenteUID}"]`)


                                            selectorCamaObsoleta?.remove()

                                            const selectorCamasFisicasRestantes = contenedorSelectorCamas
                                                .querySelectorAll(`[componenteUID]`)

                                            if (selectorCamasFisicasRestantes.length === 0) {
                                                contenedorSelectorCamas?.remove()
                                            }
                                        }
                                    }
                                },
                                anadirCama: async (elementoCama, data) => {
                                    const apartamentoUI = data.apartamentoUI
                                    const apartamentoIDV = data.apartamentoIDV
                                    const habitacionIDV = data.habitacionIDV
                                    const habitacionUID = data.habitacionUID
                                    const habitacionUI = data.habitacionUI

                                    const main = document.querySelector("main")
                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const instanciaUID = ui.getAttribute("instanciaUID")

                                    main.appendChild(ui)
                                    const contenedor = ui.querySelector("[componente=contenedor]")
                                    const spinner = casaVitini.ui.componentes.spinner({
                                        mensaje: "Obteniendo camas del apartamento..."
                                    })
                                    contenedor.appendChild(spinner)


                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/alojamiento/listarTipoCamasHabitacion",
                                        apartamentoIDV: apartamentoIDV,
                                        habitacionIDV: habitacionIDV
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                    contenedor.innerHTML = null
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }

                                    if (respuestaServidor.ok) {
                                        const titulo = document.createElement("div")
                                        titulo.classList.add(
                                            "titulo"
                                        )
                                        titulo.textContent = `Camas disponibles para ${habitacionUI} en ${apartamentoUI}`
                                        contenedor.appendChild(titulo)


                                        const banner = document.createElement("div")
                                        banner.classList.add(
                                            "flexVertical",
                                            "borderRadius12",
                                            "backgroundGrey1",
                                            "padding14",
                                            "gap6"
                                        )
                                        contenedor.appendChild(banner)


                                        const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerReservaMenus()
                                        banner.appendChild(bannerReserva)

                                        const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerAlojamiento({
                                                apartamentoUI: apartamentoUI,
                                                apartamentoIDV: apartamentoIDV

                                            })
                                        banner.appendChild(bannerAlojamiento)

                                        const bannerHabitacion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerHabitacion({
                                                habitacionUI: habitacionUI,
                                                habitacionIDV: habitacionIDV

                                            })
                                        banner.appendChild(bannerHabitacion)

                                        const contenedorCamasCompartidas = document.createElement("div")
                                        contenedorCamasCompartidas.classList.add(
                                            "flexVertical",
                                            "gap6",

                                        )
                                        contenedor.appendChild(contenedorCamasCompartidas)

                                        const tituloCamasCompartidas = document.createElement("div")
                                        tituloCamasCompartidas.classList.add(
                                            "padding6"
                                        )
                                        tituloCamasCompartidas.textContent = "Camas compartidas"
                                        contenedorCamasCompartidas.appendChild(tituloCamasCompartidas)

                                        respuestaServidor.listaCamasDisponiblesPorHabitacion.forEach(cama => {
                                            const camaIDV = cama.camaIDV
                                            const camaUI = cama.camaUI
                                            const tipoCama = document.createElement("p")
                                            tipoCama.classList.add("botonV1BlancoIzquierda")
                                            tipoCama.setAttribute("componente", "opcionesCama")
                                            tipoCama.setAttribute("camaIDV", camaIDV)
                                            tipoCama.textContent = camaUI

                                            tipoCama.addEventListener("click", async () => {
                                                const instanciaUID_alojamientoRenderizado = document.querySelector("[componente=marcoAlojamiento]").getAttribute("instanciaUID")
                                                const transaccion = {
                                                    zona: "administracion/reservas/detallesReserva/alojamiento/gestionarCamasDeHabitacion",
                                                    reservaUID,
                                                    habitacionUID: String(habitacionUID),
                                                    nuevaCamaIDV: camaIDV,
                                                    tipoIDV: "compartida"
                                                }
                                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                                if (respuestaServidor?.error) {
                                                    casaVitini.shell.controladoresUI.limpiarTodoElementoFlotante()
                                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                                }
                                                if (respuestaServidor?.ok) {

                                                    const nuevoUID = respuestaServidor?.nuevoUID
                                                    const selectorTituloCama = document.querySelector(`[habitacionUID="${habitacionUID}"] [contenedor=camas] [contenedor=camaCompartida]`)
                                                    selectorTituloCama.textContent = camaUI
                                                    selectorTituloCama.setAttribute("camaIDV", camaIDV)
                                                    if (nuevoUID) {
                                                        selectorTituloCama.setAttribute("camaUID", nuevoUID)
                                                    }
                                                }
                                            })
                                            contenedorCamasCompartidas.appendChild(tipoCama)
                                        })

                                        if (respuestaServidor.listaCamasFisicas.length > 0) {
                                            const contenedorCamasFisicas = document.createElement("div")
                                            contenedorCamasFisicas.classList.add(
                                                "flexVertical",
                                                "gap6",

                                            )
                                            contenedor.appendChild(contenedorCamasFisicas)

                                            const tituloCamasFisicas = document.createElement("div")
                                            tituloCamasFisicas.classList.add(
                                                "padding6"
                                            )
                                            tituloCamasFisicas.textContent = "Camas físicas"
                                            contenedorCamasFisicas.appendChild(tituloCamasFisicas)
                                            respuestaServidor.listaCamasFisicas.forEach(cama => {
                                                const camaIDV = cama.camaIDV
                                                const camaUI = cama.camaUI
                                                const tipoCama = document.createElement("p")
                                                tipoCama.classList.add("botonV1BlancoIzquierda")
                                                tipoCama.setAttribute("componente", "opcionesCama")
                                                tipoCama.setAttribute("camaIDV", camaIDV)
                                                tipoCama.textContent = camaUI
                                                tipoCama.addEventListener("click", async () => {
                                                    const transaccion = {
                                                        zona: "administracion/reservas/detallesReserva/alojamiento/gestionarCamasDeHabitacion",
                                                        reservaUID,
                                                        habitacionUID: String(habitacionUID),
                                                        nuevaCamaIDV: String(camaIDV),
                                                        tipoIDV: "fisica"
                                                    }
                                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()


                                                    if (respuestaServidor?.error) {
                                                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                                    }
                                                    if (respuestaServidor?.ok) {
                                                        const camaIDV = respuestaServidor.camaIDV
                                                        const componenteUID = respuestaServidor.componenteUID
                                                        const camaUI = respuestaServidor.camaUI


                                                        const selectorContenedorCamas = document.querySelector(`[habitacionUID="${habitacionUID}"] [contenedor=camas]`)
                                                        if (!selectorContenedorCamas) {
                                                            return
                                                        }

                                                        const selectorContenedorCamasFisicasRenderizados = selectorContenedorCamas.querySelector("[contenedor=camasFisicas]")
                                                        if (!selectorContenedorCamasFisicasRenderizados) {
                                                            const contenedorCamasFisicasUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.camas.contenedorCamasFisicas()
                                                            selectorContenedorCamas.appendChild(contenedorCamasFisicasUI)
                                                        }

                                                        const contenedorCamasFisicas_renderizado = selectorContenedorCamas.querySelector("[contenedor=camasFisicas]")
                                                        const camaFisicaUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.camas.camaFisicaUI({
                                                            componenteUID: componenteUID,
                                                            camaIDV: camaIDV,
                                                            reservaUID: reservaUID,
                                                            camaUI: camaUI,
                                                            habitacionUI: habitacionUI,
                                                            habitacionUID: habitacionUID
                                                        })
                                                        contenedorCamasFisicas_renderizado.appendChild(camaFisicaUI)
                                                    }
                                                })
                                                contenedorCamasFisicas.appendChild(tipoCama)
                                            })
                                        }


                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        contenedor.appendChild(botonCancelar)
                                    }

                                },
                            },
                            pernoctantes: {
                                pernoctanteUI: function (metadatos) {

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const estadoAlojamiento = metadatos.estadoAlojamiento
                                    const tipoPernoctante = metadatos.tipoPernoctante
                                    const fechaCheckIn = metadatos.fechaCheckIn
                                    const fechaCheckOutAdelantado = metadatos.fechaCheckOutAdelantado
                                    const clienteUID = metadatos.clienteUID
                                    const pernoctanteUID = metadatos.pernoctanteUID
                                    const pernoctanteUI = document.createElement("div")
                                    pernoctanteUI.classList.add(
                                        "flexVertical",
                                        "borderRadius8",
                                        "gap6",
                                        "padding10",
                                    )
                                    if (estadoAlojamiento === "alojado") {

                                    }

                                    pernoctanteUI.setAttribute("tipoCliente", tipoPernoctante)
                                    pernoctanteUI.setAttribute("estadoAlojamiento", estadoAlojamiento)
                                    pernoctanteUI.setAttribute("componente", "contenedorPernocanteHabitacion")
                                    if (estadoAlojamiento === "noAlojado") {
                                        pernoctanteUI.style.borderRadius = "8px"
                                        pernoctanteUI.classList.add("tarjetaGris")
                                    }

                                    if (configuracionVista === "publica") {

                                    } else {

                                        pernoctanteUI.classList.add("comportamientoBoton")
                                        pernoctanteUI.addEventListener("click", () => {
                                            this.detallesPernoctante.ui({
                                                pernoctanteUID
                                            })
                                        })
                                    }



                                    pernoctanteUI.setAttribute("clienteUID", clienteUID)
                                    pernoctanteUI.setAttribute("contenedor", "pernoctante")
                                    pernoctanteUI.setAttribute("componente", "menuDesplegable")
                                    pernoctanteUI.setAttribute("pernoctanteUID", pernoctanteUID)
                                    if (tipoPernoctante === "clientePool") {
                                        const tipoPernoctanteUI = document.createElement("div")
                                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloPendienteComprobacion")
                                        tipoPernoctanteUI.classList.add("parpadea")
                                        tipoPernoctanteUI.setAttribute("componente", "pendienteComprobacion")
                                        tipoPernoctanteUI.textContent = "Pendiente de comprobación documental"
                                        pernoctanteUI.appendChild(tipoPernoctanteUI)
                                    }
                                    if (tipoPernoctante === "cliente") {
                                        if (!fechaCheckIn) {
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")

                                            tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                                            tipoPernoctanteUI.textContent = "Pendiente de checkin"
                                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                                        } else {
                                            pernoctanteUI.setAttribute("fechaCheckIn", fechaCheckIn)
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")

                                            tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                                            tipoPernoctanteUI.textContent = "> " + fechaCheckIn
                                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                                        }
                                        if (fechaCheckOutAdelantado) {
                                            pernoctanteUI.setAttribute("fechaCheckOut", fechaCheckOutAdelantado)
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                                            tipoPernoctanteUI.classList.add("letraRoja")
                                            tipoPernoctanteUI.setAttribute("componente", "checkOutInfo")
                                            tipoPernoctanteUI.textContent = "< " + fechaCheckOutAdelantado
                                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                                        } else {
                                            const tipoPernoctanteUI = document.createElement("div")
                                            tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                                            tipoPernoctanteUI.classList.add("letraRoja")
                                            tipoPernoctanteUI.style.display = "none"
                                            tipoPernoctanteUI.setAttribute("componente", "checkOutInfo")

                                            pernoctanteUI.appendChild(tipoPernoctanteUI)
                                        }
                                    }
                                    return pernoctanteUI
                                },
                                pernoctanteNombreUI: (metadatos) => {
                                    const pernoctanteNombreUI = document.createElement("div")
                                    pernoctanteNombreUI.classList.add("administracionReservasDetallesNombrePernoctante")
                                    pernoctanteNombreUI.setAttribute("componente", "nombreCompleto")
                                    pernoctanteNombreUI.textContent = metadatos.nombreCompleto
                                    return pernoctanteNombreUI
                                },
                                pernoctantePasaporteUI: (metadatos) => {
                                    const pernoctantePasaporteUI = document.createElement("div")
                                    pernoctantePasaporteUI.classList.add("administracionReservasDetallesIdentificacionPernoctante")
                                    pernoctantePasaporteUI.setAttribute("componente", "pasaporte")
                                    pernoctantePasaporteUI.textContent = metadatos.pasaporte
                                    return pernoctantePasaporteUI
                                },
                                propuestaEliminarPernoctanteUI: (datosEliminacion) => {
                                    const tipoEliminacion = datosEliminacion.tipoEliminacion
                                    const pernoctanteUID = datosEliminacion.pernoctanteUID

                                    const nombreCompleto = document
                                        .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        .querySelector("[componente=nombreCompleto]")
                                        .textContent
                                    const pasaporte = document
                                        .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        .querySelector("[componente=pasaporte]")
                                        .textContent

                                    let mensajeUI
                                    if (tipoEliminacion === "habitacion") {
                                        mensajeUI = "Confirmas la eliminación de este pernoctante de la habitación pero no de la reserva.Este pernoctante pasará a la sección de pernoctantes asociados a la reserva pero sin alojamiento asignado"
                                    }
                                    if (tipoEliminacion === "reserva") {
                                        mensajeUI = "¿Confirmas la eliminación de este pernoctante de la reserva? Si confirmas la eliminación el pernoctante será eliminado de esta reserva."
                                    }
                                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                    const titulo = constructor.querySelector("[componente=titulo]")
                                    titulo.textContent = "Confirmar la elimiación del pernoctante"
                                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                    mensaje.textContent = mensajeUI

                                    const contenedorEspacio = constructor.querySelector("[componente=contenedor]")
                                    contenedorEspacio.classList.add(
                                        "padding14",
                                        "borderRadius14",
                                        "backgroundGrey1"
                                    )
                                    const nombreCompletoPropuesta = document.createElement("p")
                                    nombreCompletoPropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolnombreCompletoPropuesta")
                                    nombreCompletoPropuesta.setAttribute("componente", "nombrePropuesto")
                                    nombreCompletoPropuesta.textContent = nombreCompleto
                                    contenedorEspacio.appendChild(nombreCompletoPropuesta)
                                    const pasaportePropuesta = document.createElement("p")
                                    pasaportePropuesta.classList.add("administracionReservaDetallesPropuedaCambioClientePoolpasaportePropuesta")
                                    pasaportePropuesta.textContent = pasaporte
                                    contenedorEspacio.appendChild(pasaportePropuesta)

                                    let botonMenajeUI
                                    if (tipoEliminacion === "habitacion") {
                                        botonMenajeUI = "Eliminar de la habitación"
                                    }
                                    if (tipoEliminacion === "reserva") {
                                        botonMenajeUI = "Eliminar de la reserva"
                                    }

                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                    botonAceptar.textContent = botonMenajeUI
                                    botonAceptar.addEventListener("click", () => {
                                        const metadatosTipoEliminacion = {
                                            pernoctanteUID: pernoctanteUID,
                                            tipoEliminacion: tipoEliminacion
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.eliminarPernoctante(metadatosTipoEliminacion)
                                    })
                                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                    botonCancelar.textContent = "Cancelar la eliminación"

                                    document.querySelector("main").appendChild(pantallaInmersiva)
                                },
                                checkin: {
                                    UI: async (pernoctanteUID) => {

                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada({
                                            alineacion: "arriba"
                                        })
                                        const instanciaUID = ui.getAttribute("instanciaUID")
                                        ui.setAttribute("contenedor", "checkin")
                                        main.appendChild(ui)
                                        const contenedor = ui.querySelector("[componente=contenedor]")

                                        const pernoctanteElemento = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        const nombreCompleto = pernoctanteElemento.querySelector("[componente=nombreCompleto]").textContent
                                        const pasaporte = pernoctanteElemento.querySelector("[componente=pasaporte]").textContent

                                        const tituloCancelarReserva = document.createElement("p")
                                        tituloCancelarReserva.classList.add(
                                            "tituloGris",
                                            "padding14"
                                        )
                                        tituloCancelarReserva.textContent = "Realizar checkin"
                                        contenedor.appendChild(tituloCancelarReserva)
                                        const datosTitular = {
                                            nombreCompleto: nombreCompleto,
                                            pasaporte: pasaporte
                                        }
                                        const pernoctanteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.detallesDelTitularUI(datosTitular)
                                        contenedor.appendChild(pernoctanteUI)
                                        const instanciaUID_Calendario = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosCalendario = {
                                            tipoFecha: "entrada",
                                            almacenamientoCalendarioID: "administracionCalendario",
                                            perfilMes: "calendario_entrada_asistido_detallesReserva_checkIn_conPasado",
                                            calendarioIO: "entrada",
                                            mensajeInfo: "Selecciona el día de checkin",
                                            alturaDinamica: "10",
                                            instanciaUID: instanciaUID_Calendario,
                                            metodoSelectorDia: "ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.seleccionarDia"
                                        }
                                        const calendarioIncrustado = casaVitini.ui.componentes.calendario.constructorCalendarioIncrustado(metadatosCalendario)
                                        contenedor.appendChild(calendarioIncrustado)
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1BlancoIzquierda")
                                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                        botonCancelar.textContent = "Seleccionar una fecha del checkin"
                                        botonCancelar.addEventListener("click", (e) => {
                                            const datosCheckIn = {
                                                fechaCheckIn: e.target.getAttribute("fechaCheckIn"),
                                                pernoctanteUID: pernoctanteUID,
                                                instanciaUID: instanciaUID
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.confirmar(datosCheckIn)
                                        }
                                        )
                                        contenedor.appendChild(botonCancelar)
                                        const infoEliminarReserva = document.createElement("div")
                                        infoEliminarReserva.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                        infoEliminarReserva.style.marginTop = "50px"
                                        infoEliminarReserva.textContent = "También puedes eliminar irreversiblemente una reserva.La eliminación irreversible de una reserva borra la información de la reserva, así como los pagos asociados a la reserva y toda la información relacionada con la reserva.A diferencia de la cancelación, los datos dejarán de estar disponibles."
                                        const selectorCheckIn = document
                                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            .getAttribute("fechaCheckIn")

                                        if (selectorCheckIn) {
                                            contenedor.setAttribute("fechaCheckIn", selectorCheckIn)
                                            const botonEliminarCheckIn = document.createElement("div")
                                            botonEliminarCheckIn.classList.add("botonV1BlancoIzquierda")
                                            botonEliminarCheckIn.setAttribute("componente", "botonConfirmarCancelarReserva")
                                            botonEliminarCheckIn.textContent = "Eliminar checkin"
                                            botonEliminarCheckIn.addEventListener("click", () => {
                                                const eliminarCheckIN = {
                                                    pernoctanteUID,
                                                    instanciaUID
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.eliminar(eliminarCheckIN)
                                            })
                                            contenedor.appendChild(botonEliminarCheckIn)
                                        }
                                        const selectorCheckOutAdelantado = document
                                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            .getAttribute("fechaCheckOut")
                                        if (selectorCheckOutAdelantado) {
                                            contenedor.setAttribute("fechaCheckOut", selectorCheckOutAdelantado)
                                        }
                                        const botonCancelarCheckin = document.createElement("div")
                                        botonCancelarCheckin.classList.add("botonV1")
                                        botonCancelarCheckin.setAttribute("componente", "botonConfirmarCancelarReserva")
                                        botonCancelarCheckin.textContent = "Cancelar checkin y volver a la reserva"
                                        botonCancelarCheckin.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        })
                                        contenedor.appendChild(botonCancelarCheckin)

                                        const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                                        const fechaEntradaArray = fechaEntrada.split("-")
                                        const mesEntrada = fechaEntradaArray[1]
                                        const anoEntrada = fechaEntradaArray[0]

                                        const resolucionCalendario = {
                                            tipo: "personalizado",

                                            ano: Number(anoEntrada),
                                            mes: Number(mesEntrada)
                                        }
                                        if (selectorCheckIn) {
                                            const fechaCheckInArray = selectorCheckIn.split("-")
                                            const mesCheckIn = Number(fechaCheckInArray[1])
                                            const anoCheckIn = Number(fechaCheckInArray[0])
                                            resolucionCalendario.mes = mesCheckIn
                                            resolucionCalendario.ano = anoCheckIn
                                        }


                                        const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolucionCalendario)



                                        calendarioResuelto.instanciaUID = instanciaUID_Calendario
                                        calendarioResuelto.pernoctanteUID = pernoctanteUID
                                        await casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                                    },
                                    detallesDelTitularUI: (detallesDelTitular) => {
                                        const nombreCompleto = detallesDelTitular.nombreCompleto
                                        const pasaporte = detallesDelTitular.pasaporte
                                        const detallesRapidosDelTitular = document.createElement("div")
                                        detallesRapidosDelTitular.classList.add("tarjetaGris")

                                        let contenedorDato = document.createElement("div")
                                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                        let nombreDato = document.createElement("div")
                                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                        nombreDato.textContent = "Nombre del pernoctante"
                                        contenedorDato.appendChild(nombreDato)
                                        let valorDato = document.createElement("div")
                                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                        valorDato.classList.add("negrita")
                                        valorDato.setAttribute("componente", "nombreCompleto")
                                        valorDato.textContent = nombreCompleto
                                        contenedorDato.appendChild(valorDato)
                                        detallesRapidosDelTitular.appendChild(contenedorDato)

                                        contenedorDato = document.createElement("div")
                                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                        nombreDato = document.createElement("div")
                                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                        nombreDato.textContent = "Pasaporte del pernoctante"
                                        contenedorDato.appendChild(nombreDato)
                                        valorDato = document.createElement("div")
                                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                        valorDato.classList.add("negrita")
                                        valorDato.setAttribute("componente", "pasaporte")
                                        valorDato.textContent = pasaporte
                                        contenedorDato.appendChild(valorDato)
                                        detallesRapidosDelTitular.appendChild(contenedorDato)
                                        return detallesRapidosDelTitular
                                    },
                                    seleccionarDia: (dia) => {
                                        const diaSeleccionado = dia.target.getAttribute("dia").padStart(2, "0")
                                        const diaSeleccionadoComoElemento = dia.target;
                                        const instanciaUID_contenedorCheckIn = dia.target.closest("[contenedor=checkin][instanciaUID]")?.getAttribute("instanciaUID")
                                        const calendario = diaSeleccionadoComoElemento.closest("[componente=marcoCalendario]")
                                        const calendarioIO = calendario.getAttribute("calendarioIO")
                                        if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                                            diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                                            if (calendarioIO === "entrada") {
                                                const selectorBotonConfirmar = document
                                                    .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckIn}"]`)
                                                    .querySelector("[componente=botonConfirmarCancelarReserva]")
                                                selectorBotonConfirmar.textContent = "Seleccionar una fecha del checkin"
                                                selectorBotonConfirmar.removeAttribute("style")
                                                diaSeleccionadoComoElemento.style.background = ""
                                                diaSeleccionadoComoElemento.style.color = ""
                                                selectorBotonConfirmar.removeAttribute("fechaCheckIn")
                                            } else if (calendarioIO === "salida") {
                                                document.querySelector("[componente=bloquePropuestaNuevaFechaSalida]")?.remove()
                                                diaSeleccionadoComoElemento.style.background = ""
                                                diaSeleccionadoComoElemento.style.color = ""
                                            }
                                            diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                                            return
                                        }
                                        calendario.querySelectorAll("[estadoDia=seleccionado]").forEach(diasDelCalendario => {

                                            diasDelCalendario.removeAttribute("estadoDia")
                                            diasDelCalendario.style.background = ""
                                            diasDelCalendario.style.color = ""
                                        });
                                        diaSeleccionadoComoElemento.style.background = "green"
                                        diaSeleccionadoComoElemento.style.color = "white"
                                        diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                                        const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                                        const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                                        if (calendarioIO === "entrada") {

                                            const selectorBotonConfirmar = document
                                                .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckIn}"]`)
                                                .querySelector("[componente=botonConfirmarCancelarReserva]")
                                            selectorBotonConfirmar.textContent = `Confirmar checkin para el ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                                            selectorBotonConfirmar.style.pointerEvents = "all"
                                            selectorBotonConfirmar.setAttribute("fechaCheckIn", `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`)
                                            selectorBotonConfirmar.style.fontWeight = "bold"
                                        }
                                    },
                                    confirmar: async (checkIn) => {
                                        const pernoctanteUID = checkIn.pernoctanteUID
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const fechaCheckIn = checkIn.fechaCheckIn
                                        const instanciaUID = checkIn.instanciaUID
                                        const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosPantallaCarga = {
                                            mensaje: "Esperando al servidor...",
                                            instanciaUID: instanciaUID_localProceso,
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                        const estadoReserva = {
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/confirmarFechaCheckIn",
                                            pernoctanteUID: String(pernoctanteUID),
                                            fechaCheckIn: fechaCheckIn,
                                            reservaUID: String(reservaUID)
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(estadoReserva)

                                        const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                        selectorPantallaDeCarga.forEach((pantalla) => {
                                            pantalla.remove()
                                        })
                                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!selectorInstanciaRaiz) {

                                        }
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctante.setAttribute("fechaCheckIn", fechaCheckIn)
                                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkInInfo]`)
                                            selectorCheckInInfo.textContent = "> " + fechaCheckIn
                                        }
                                    },
                                    eliminar: async (data) => {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const pernoctanteUID = data.pernoctanteUID
                                        const instanciaUID = data.instanciaUID
                                        const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosPantallaCarga = {
                                            mensaje: "Esperando al servidor...",
                                            instanciaUID: instanciaUID_localProceso,
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                        const estadoReserva = {
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/eliminarCheckIN",
                                            pernoctanteUID: String(pernoctanteUID),
                                            reservaUID: String(reservaUID)
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(estadoReserva)
                                        const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                        selectorPantallaDeCarga.forEach((pantalla) => {
                                            pantalla.remove()
                                        })
                                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!selectorInstanciaRaiz) {

                                        }
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctante.removeAttribute("fechaCheckIn")
                                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkInInfo]`)
                                            selectorCheckInInfo.textContent = "Pendiente de checkin"
                                            selectorPernoctante.removeAttribute("fechaCheckOut")
                                            const selectorCheckOutInfo = selectorPernoctante.querySelector(`[componente=checkOutInfo]`)
                                            selectorCheckOutInfo.style.display = "none"
                                            selectorCheckOutInfo.textContent = null
                                        }
                                    }
                                },
                                checkout: {
                                    UI: async (pernoctanteUID) => {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada({
                                            alineacion: "arriba"
                                        })
                                        const instanciaUID = ui.getAttribute("instanciaUID")
                                        ui.setAttribute("contenedor", "checkout")
                                        main.appendChild(ui)
                                        const contenedor = ui.querySelector("[componente=contenedor]")

                                        const pernoctanteElemento = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        const nombreCompleto = pernoctanteElemento.querySelector("[componente=nombreCompleto]").textContent
                                        const pasaporte = pernoctanteElemento.querySelector("[componente=pasaporte]").textContent

                                        const tituloCancelarReserva = document.createElement("p")
                                        tituloCancelarReserva.classList.add(
                                            "tituloGris",
                                            "padding14"
                                        )
                                        tituloCancelarReserva.textContent = "Checkout adelantado"
                                        contenedor.appendChild(tituloCancelarReserva)
                                        const datosTitular = {
                                            nombreCompleto: nombreCompleto,
                                            pasaporte: pasaporte
                                        }
                                        const pernoctanteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.detallesDelTitularUI(datosTitular)
                                        contenedor.appendChild(pernoctanteUI)
                                        const instanciaUID_Calendario = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosCalendario = {
                                            tipoFecha: "salida",
                                            almacenamientoCalendarioID: "administracionCalendario",
                                            perfilMes: "calendario_salida_asistido_detallesReserva_checkOut_conPasado",
                                            calendarioIO: "salida",
                                            mensajeInfo: "Selecciona el día de checkout adelantado",
                                            alturaDinamica: "10",
                                            instanciaUID: instanciaUID_Calendario,
                                            metodoSelectorDia: "ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.seleccionarDia"
                                        }
                                        const calendarioIncrustado = casaVitini.ui.componentes.calendario.constructorCalendarioIncrustado(metadatosCalendario)
                                        contenedor.appendChild(calendarioIncrustado)
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1BlancoIzquierda")
                                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                        botonCancelar.textContent = "Seleccionar una fecha del checkout adelantado"
                                        botonCancelar.addEventListener("click", (e) => {
                                            const datosCheckIn = {
                                                fechaCheckOut: e.target.getAttribute("fechaCheckOut"),
                                                pernoctanteUID: pernoctanteUID,
                                                instanciaUID: instanciaUID
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.confirmar(datosCheckIn)
                                        }
                                        )
                                        contenedor.appendChild(botonCancelar)
                                        const infoEliminarReserva = document.createElement("div")
                                        infoEliminarReserva.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                                        infoEliminarReserva.style.marginTop = "50px"
                                        infoEliminarReserva.textContent = "También puedes eliminar irreversiblemente una reserva.La eliminación irreversible de una reserva borra la información de la reserva, así como los pagos asociados a la reserva y toda la información relacionada con la reserva.A diferencia de la cancelación, los datos dejarán de estar disponibles."
                                        const selectorCheckOut = document
                                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            .getAttribute("fechaCheckOut")
                                        if (selectorCheckOut) {
                                            contenedor.setAttribute("fechaCheckOut", selectorCheckOut)
                                            const botonEliminar = document.createElement("div")
                                            botonEliminar.classList.add("botonV1BlancoIzquierda")
                                            botonEliminar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                            botonEliminar.textContent = "Eliminar checkout adelantado"
                                            botonEliminar.addEventListener("click", () => {
                                                const eliminarCheckOut = {
                                                    pernoctanteUID: pernoctanteUID,
                                                    instanciaUID: instanciaUID
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.eliminar(eliminarCheckOut)
                                            })
                                            contenedor.appendChild(botonEliminar)
                                        }
                                        const selectorCheckIn = document
                                            .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            .getAttribute("fechaCheckIn")
                                        if (selectorCheckIn) {
                                            contenedor.setAttribute("fechaCheckIn", selectorCheckIn)
                                        }
                                        const botonCancelarCheckin = document.createElement("div")
                                        botonCancelarCheckin.classList.add("botonV1")
                                        botonCancelarCheckin.setAttribute("componente", "botonConfirmarCancelarReserva")
                                        botonCancelarCheckin.textContent = "Cancelar checkout adelantado y volver a la reserva"
                                        botonCancelarCheckin.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        })
                                        contenedor.appendChild(botonCancelarCheckin)

                                        const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                                        const fechaSalidaArray = fechaSalida.split("-")
                                        const mesSalida = fechaSalidaArray[1]
                                        const anoSalida = fechaSalidaArray[0]
                                        const resolucionCalendario = {
                                            tipo: "personalizado",

                                            mes: Number(mesSalida),
                                            ano: Number(anoSalida),
                                        }

                                        if (selectorCheckOut) {
                                            const fechaCheckOutArray = selectorCheckOut.split("-")
                                            const mesCheckOut = Number(fechaCheckOutArray[1])
                                            const anoCheckOut = Number(fechaCheckOutArray[0])
                                            resolucionCalendario.mes = mesCheckOut
                                            resolucionCalendario.ano = anoCheckOut
                                        }

                                        const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolucionCalendario)
                                        calendarioResuelto.instanciaUID = instanciaUID_Calendario
                                        calendarioResuelto.pernoctanteUID = pernoctanteUID
                                        await casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                                    },
                                    detallesDelTitularUI: (detallesDelTitular) => {
                                        const nombreCompleto = detallesDelTitular.nombreCompleto
                                        const pasaporte = detallesDelTitular.pasaporte
                                        const detallesRapidosDelTitular = document.createElement("div")
                                        detallesRapidosDelTitular.classList.add("tarjetaGris")

                                        let contenedorDato = document.createElement("div")
                                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                        let nombreDato = document.createElement("div")
                                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                        nombreDato.textContent = "Nombre del pernoctante"
                                        contenedorDato.appendChild(nombreDato)
                                        let valorDato = document.createElement("div")
                                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                        valorDato.classList.add("negrita")
                                        valorDato.setAttribute("componente", "nombreCompleto")
                                        valorDato.textContent = nombreCompleto
                                        contenedorDato.appendChild(valorDato)
                                        detallesRapidosDelTitular.appendChild(contenedorDato)

                                        contenedorDato = document.createElement("div")
                                        contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                        nombreDato = document.createElement("div")
                                        nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                        nombreDato.textContent = "Pasaporte del pernoctante"
                                        contenedorDato.appendChild(nombreDato)
                                        valorDato = document.createElement("div")
                                        valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                        valorDato.classList.add("negrita")
                                        valorDato.setAttribute("componente", "pasaporte")
                                        valorDato.textContent = pasaporte
                                        contenedorDato.appendChild(valorDato)
                                        detallesRapidosDelTitular.appendChild(contenedorDato)
                                        return detallesRapidosDelTitular
                                    },
                                    seleccionarDia: (dia) => {
                                        const diaSeleccionado = dia.target.getAttribute("dia").padStart(2, "0")
                                        const diaSeleccionadoComoElemento = dia.target;
                                        const instanciaUID_contenedorCheckOut = dia.target.closest("[contenedor=checkout][instanciaUID]")?.getAttribute("instanciaUID")
                                        const calendario = diaSeleccionadoComoElemento.closest("[componente=marcoCalendario]")
                                        const calendarioIO = calendario.getAttribute("calendarioIO")
                                        if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                                            diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                                            if (calendarioIO === "salida") {
                                                const selectorBotonConfirmar = document
                                                    .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckOut}"]`)
                                                    .querySelector("[componente=botonConfirmarCancelarReserva]")
                                                selectorBotonConfirmar.textContent = "Seleccionar una fecha del checkout adelantado"
                                                selectorBotonConfirmar.removeAttribute("style")
                                                diaSeleccionadoComoElemento.style.background = ""
                                                diaSeleccionadoComoElemento.style.color = ""
                                                selectorBotonConfirmar.removeAttribute("fechaCheckOut")
                                            }
                                            diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                                            return
                                        }
                                        calendario.querySelectorAll("[estadoDia=seleccionado]").forEach(diasDelCalendario => {

                                            diasDelCalendario.removeAttribute("estadoDia")
                                            diasDelCalendario.style.background = ""
                                            diasDelCalendario.style.color = ""
                                        });
                                        diaSeleccionadoComoElemento.style.background = "green"
                                        diaSeleccionadoComoElemento.style.color = "white"
                                        diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                                        const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                                        const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                                        const selectorPropuestaCambioFecha = document.querySelector("[componente=espacioPropuestaCambioFechaReserva]")
                                        if (calendarioIO === "salida") {
                                            const selectorBotonConfirmar = document
                                                .querySelector(`[instanciaUID="${instanciaUID_contenedorCheckOut}"]`)
                                                .querySelector("[componente=botonConfirmarCancelarReserva]")
                                            selectorBotonConfirmar.textContent = `Confirmar checkout adelantador para el ${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                                            selectorBotonConfirmar.style.pointerEvents = "all"
                                            selectorBotonConfirmar.setAttribute("fechaCheckOut", `${anoSeleccionado}-${mesSeleccionado}-${diaSeleccionado}`)
                                            selectorBotonConfirmar.style.fontWeight = "bold"
                                        }
                                    },
                                    confirmar: async (checkOut) => {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const pernoctanteUID = checkOut.pernoctanteUID
                                        const fechaCheckOut = checkOut.fechaCheckOut
                                        const instanciaUID = checkOut.instanciaUID
                                        const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosPantallaCarga = {
                                            mensaje: "Esperando al servidor...",
                                            instanciaUID: instanciaUID_localProceso,
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                        const estadoReserva = {
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/confirmarFechaCheckOutAdelantado",
                                            reservaUID: String(reservaUID),
                                            pernoctanteUID: String(pernoctanteUID),
                                            fechaCheckOut: fechaCheckOut
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(estadoReserva)
                                        const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                        selectorPantallaDeCarga.forEach((pantalla) => {
                                            pantalla.remove()
                                        })
                                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!selectorInstanciaRaiz) {

                                        }
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctante.setAttribute("fechaCheckOut", fechaCheckOut)
                                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkOutInfo]`)
                                            selectorCheckInInfo.textContent = "< " + fechaCheckOut
                                            selectorCheckInInfo.removeAttribute("style")
                                        }
                                    },
                                    eliminar: async (checkOut) => {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const pernoctanteUID = checkOut.pernoctanteUID
                                        const instanciaUID = checkOut.instanciaUID
                                        const instanciaUID_localProceso = casaVitini.utilidades.codigoFechaInstancia()
                                        const metadatosPantallaCarga = {
                                            mensaje: "Esperando al servidor...",
                                            instanciaUID: instanciaUID_localProceso,
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                        const estadoReserva = {
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/eliminarCheckOutAdelantado",
                                            pernoctanteUID: String(pernoctanteUID),
                                            reservaUID: String(reservaUID)
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(estadoReserva)
                                        const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_localProceso}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                        selectorPantallaDeCarga.forEach((pantalla) => {
                                            pantalla.remove()
                                        })
                                        const selectorInstanciaRaiz = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!selectorInstanciaRaiz) {

                                        }
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctante.removeAttribute("fechacheckout")
                                            const selectorCheckInInfo = selectorPernoctante.querySelector(`[componente=checkOutInfo]`)
                                            selectorCheckInInfo.style.display = "none"
                                            selectorCheckInInfo.textContent = null
                                        }
                                    }
                                },
                                detallesPernoctante: {
                                    ui: async function (data) {
                                        const pernoctanteUID = data.pernoctanteUID
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        main.appendChild(ui)
                                        const instanciaUID = ui.getAttribute("instanciaUID")
                                        const contenedor = ui.querySelector("[componente=contenedor]")

                                        const mensajeSpinner = "Esperando al servidor...."
                                        const spinner = casaVitini.ui.componentes.spinner(mensajeSpinner)
                                        contenedor.appendChild(spinner)

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/pernoctantes/detallesDelPernoctantePorPernoctaneUID",
                                            reservaUID,
                                            pernoctanteUID: String(pernoctanteUID)
                                        })

                                        const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        contenedor.innerHTML = null
                                        contenedor.style.justifyContent = "flex - start";

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {

                                            const data = respuestaServidor.ok

                                            const datosCliente = data.cliente
                                            const datosPernoctante = data.pernoctante

                                            const pernoctanteUID = datosPernoctante.componenteUID
                                            const habitacionUID = datosPernoctante.habitacionUID

                                            const nombreCompleto = datosCliente.nombreCompleto
                                            const pasaporte = datosCliente.pasaporte
                                            const tipoPernoctante = datosCliente.tipoPernoctante
                                            const fechaCheckIn = datosPernoctante.fechaCheckIn
                                            const fechaCheckOutAdelantado = datosPernoctante.fechaCheckOutAdelantado


                                            if (tipoPernoctante === "cliente") {
                                                const clienteUID = datosCliente.clienteUID
                                                const mail = datosCliente.mail
                                                const telefono = datosCliente.telefono

                                                this.componentes.respuestaUnificadaUI({
                                                    clienteUID,
                                                    nombreCompleto,
                                                    pernoctanteUID,
                                                    telefono,
                                                    pasaporte,
                                                    mail,
                                                    instanciaUID,
                                                    fechaCheckIn,
                                                    fechaCheckOutAdelantado,
                                                    reservaUID,
                                                    habitacionUID
                                                })
                                            }
                                            if (tipoPernoctante === "clientePool") {
                                                const metadatosTitualPool = {
                                                    nombreTitular: detallesTitular.nombreTitular,
                                                    pasaporteTitular: detallesTitular.pasaporteTitular,
                                                    mailTitular: detallesTitular.mailTitular,
                                                    telefonoTitular: detallesTitular.telefonoTitular,
                                                    instanciaUID: instanciaUID
                                                }
                                                this.componentes.titularPool.UI(metadatosTitualPool)
                                            }

                                        }
                                    },
                                    componentes: {
                                        desasociarClienteComoTitular: async (metadatos) => {
                                            const instanciaUID = metadatos.instanciaUID
                                            const reservaUID = metadatos.reservaUID
                                            const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                            const opcionesPantallaDeCarga = {
                                                instanciaUID: instanciaUIDPantallaDeCarga,
                                                mensaje: "Desasociando cliente como titular de la reserva"
                                            }
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(opcionesPantallaDeCarga)
                                            const pantallaDeCargaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                            const metadatosPantallaDeCarga = {
                                                zona: "administracion/reservas/gestionTitular/desasociarClienteComoTitular",
                                                reservaUID: reservaUID
                                            }
                                            const respuestaServidor = await casaVitini.shell.servidor(metadatosPantallaDeCarga)
                                            if (respuestaServidor?.error) {
                                                pantallaDeCargaRenderizada?.remove()
                                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                pantallaDeCargaRenderizada?.remove()
                                                const selectorNombreTitularRenderizado = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                                const selectorNombreTitular = document.querySelector(`[dataReserva=nombreTitular]`)
                                                if (selectorNombreTitularRenderizado && selectorNombreTitular) {
                                                    selectorNombreTitular.textContent = "(Ningún titular asignado)"
                                                    const selectorBloqueTitular = document.querySelector(`[contenedor=titular]`)
                                                    selectorBloqueTitular.removeAttribute("tipoTitular")
                                                    selectorBloqueTitular.removeAttribute("titularUID")
                                                }
                                                const selectorDestinoRenderizado = document.querySelector(`[instanciaUID="${instanciaUID}"] [espacio=gestionTitular]`)
                                                if (selectorDestinoRenderizado) {


                                                }
                                            }
                                        },
                                        detallesDelTitularUI: (detallesDelTitular) => {

                                            const clienteUID = detallesDelTitular.clienteUID
                                            const nombreTitular = detallesDelTitular.nombreTitular
                                            const pasaporteTitular = detallesDelTitular.pasaporte
                                            const tipoTitular = detallesDelTitular.tipoTitular
                                            const mailTitular = detallesDelTitular.mail ? detallesDelTitular.mail : "(Sin mail)"
                                            const telefonoTitular = detallesDelTitular.telefono ? detallesDelTitular.telefono : "(Sin telefono)"
                                            const detallesRapidosDelTitular = document.createElement("div")
                                            detallesRapidosDelTitular.classList.add("tarjetaGris")

                                            let contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            let nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Nombre completo del titular"
                                            contenedorDato.appendChild(nombreDato)
                                            let valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = nombreTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Pasaporte"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = pasaporteTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Teléfono"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = telefonoTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "e - Mail"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = mailTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)
                                            return detallesRapidosDelTitular
                                        },
                                        detallesDelTitularPoolUI: (detallesDelTitular) => {
                                            const nombreTitular = detallesDelTitular.nombreTitular
                                            const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                            const tipoTitular = "Titular pool"
                                            const mailTitular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                            const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin telefono)"
                                            const detallesRapidosDelTitular = document.createElement("div")
                                            detallesRapidosDelTitular.classList.add("tarjetaGris")

                                            let contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            let nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Nombre completo del titular"
                                            contenedorDato.appendChild(nombreDato)
                                            let valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = nombreTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Pasaporte"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = pasaporteTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Teléfono"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = telefonoTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "e - Mail"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = mailTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)
                                            return detallesRapidosDelTitular
                                        },
                                        botonCerrarFormularioNuevoCliente: () => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Cerrar gestión del pernoctante"
                                            boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                            boton
                                        },
                                        botonCerrar: () => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1")
                                            boton.innerHTML = "Cerrar gestión del pernoctante"
                                            boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                            return boton
                                        },
                                        botonIrALaFichaDelClinete: (clienteUID) => {
                                            const boton = document.createElement("a")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Ir a la ficha del cliente"
                                            boton.setAttribute("href", "/administracion/clientes/cliente:" + clienteUID)
                                            boton.setAttribute("vista", "/administracion/clientes/cliente:" + clienteUID)
                                            boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                            return boton
                                        },
                                        botonCambiarDeHabitacion: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.textContent = "Cambiar de habitación"
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.addEventListener("click", () => {
                                                document.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.ocultarSelectoresCambioHabitacion)
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.mostrasSelectorCambioPernoctanteHabitacion(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonAsignarAHabitacion: (pernoctanteUID) => {

                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.textContent = "Asignar a una habitación"
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.addEventListener("click", () => {
                                                document.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.ocultarSelectoresCambioHabitacion)
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.mostrasSelectorCambioPernoctanteHabitacion(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonEliminarPernoctanteDeLaReserva: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.textContent = "Eliminar pernoctante de la reserva"
                                            boton.addEventListener("click", () => {
                                                const datosEliminacion = {
                                                    tipoEliminacion: "reserva",
                                                    pernoctanteUID: pernoctanteUID
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.propuestaEliminarPernoctanteUI(datosEliminacion)
                                            })
                                            return boton
                                        },
                                        botonModificarCheckIn: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add(
                                                "botonV1BlancoIzquierda",
                                                "negrita"
                                            )
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.setAttribute("tipoEliminacion", "habitacion")
                                            boton.textContent = "Modificar checkin"
                                            boton.addEventListener("click", () => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.UI(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonCheckOutAdelantado: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add(
                                                "botonV1BlancoIzquierda",
                                                "negrita"
                                            )
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.setAttribute("tipoEliminacion", "habitacion")
                                            boton.textContent = "Checkout Adelantado"
                                            boton.addEventListener("click", () => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkout.UI(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonCheckIn: (pernoctanteUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add(
                                                "botonV1BlancoIzquierda",
                                                "negrita"
                                            )
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.textContent = ">>> Realizar checkin"
                                            boton.addEventListener("click", () => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.checkin.UI(pernoctanteUID)
                                            })
                                            return boton
                                        },
                                        botonEliminarPernoctaneDeLaHabitacion: (pernoctanteUID) => {

                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.setAttribute("componente", "botonOpcionClientePool")
                                            boton.textContent = "Eliminar pernoctante solo de la habitación y mantenerlo en la reserva"
                                            boton.addEventListener("click", () => {
                                                const datosEliminacion = {
                                                    tipoEliminacion: "habitacion",
                                                    pernoctanteUID: pernoctanteUID
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.propuestaEliminarPernoctanteUI(datosEliminacion)
                                            })
                                            return boton
                                        },
                                        titulo: (titulo) => {
                                            const tituloUI = document.createElement("p")
                                            tituloUI.classList.add(
                                                "tituloGris",
                                                "padding14"
                                            )
                                            tituloUI.textContent = titulo
                                            return tituloUI
                                        },
                                        infoUI: (info) => {
                                            const infoUI = document.createElement("p")
                                            infoUI.classList.add("padding14")
                                            infoUI.textContent = info
                                            return infoUI
                                        },
                                        botonCerrarCambiarTitular: (instanciaUID) => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Cerrar formulario para cambiar de titular"
                                            boton.setAttribute("boton", "cerrarCambiarTitular")
                                            boton.addEventListener("click", () => {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.titular.componentes.cancelarCambiarTitular(instanciaUID)
                                            })
                                            return boton
                                        },
                                        cambiarTitular: (instanciaUID) => {
                                            const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                                            const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                                            selectorBotonCambiarTitular.style.display = "none"
                                            selectorBotonDesasociar.style.display = "none"
                                            const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                                            selectorNuevoClienteUI.removeAttribute("style")
                                            const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                                            selectorbotonCerrarCambiarTitular.removeAttribute("style")
                                        },
                                        respuestaUnificadaUI: function (data) {
                                            const clienteUID = data.clienteUID
                                            const nombreCompleto = data.nombreCompleto
                                            const pasaporte = data.pasaporte
                                            const mail = data.mail
                                            const pernoctanteUID = data.pernoctanteUID
                                            const telefono = data.telefono
                                            const instanciaUID = data.instanciaUID
                                            const fechaCheckIn = data.fechaCheckIn
                                            const fechaCheckOutAdelantado = data.fechaCheckOutAdelantado
                                            const habitacionUID = data.habitacionUID

                                            const ui = document.querySelector(`[instanciaUID="${instanciaUID}"]`).querySelector("[componente=contenedor]")
                                            if (ui) {

                                                const selectorPernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                                const apartamentoUI = selectorPernoctante.closest("[apartamentoUI]")?.getAttribute("apartamentoUI") || "Pernoctante sin alojamiento asignado"
                                                const apartamentoIDV = selectorPernoctante.closest("[apartamentoIDV]")?.getAttribute("apartamentoIDV") || ""
                                                const habitacionUI = selectorPernoctante.closest("[habitacionIDV]")?.querySelector("[habitacionUI]")?.getAttribute("habitacionUI") || "Pernoctante sin habbitación asignada"
                                                const habitacionIDV = selectorPernoctante.closest("[habitacionIDV]")?.getAttribute("habitacionIDV") || ""


                                                const titulo = "Detalles del pernoctante"
                                                const tituloUI = this.titulo(titulo)
                                                ui.appendChild(tituloUI)
                                                const info = "Vista rápida de los detalles del pernoctante"
                                                const infoUI = this.infoUI(info)



                                                const banner = document.createElement("div")
                                                banner.classList.add(
                                                    "flexVertical",
                                                    "borderRadius12",
                                                    "backgroundGrey1",
                                                    "padding14",
                                                    "gap6"
                                                )
                                                ui.appendChild(banner)


                                                const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.componentesUI.
                                                    bannerReservaMenus()
                                                banner.appendChild(bannerReserva)

                                                const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                                    alojamiento.
                                                    componentesUI.
                                                    bannerAlojamiento({
                                                        apartamentoUI: apartamentoUI,
                                                        apartamentoIDV: apartamentoIDV

                                                    })
                                                banner.appendChild(bannerAlojamiento)

                                                const bannerHabitacion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                                    alojamiento.
                                                    componentesUI.
                                                    bannerHabitacion({
                                                        habitacionUI: habitacionUI,
                                                        habitacionIDV: habitacionIDV

                                                    })
                                                banner.appendChild(bannerHabitacion)

                                                const detallesDelTitularUI = this.detallesDelTitularUI({
                                                    clienteUID: clienteUID,
                                                    nombreTitular: nombreCompleto,
                                                    pasaporte: pasaporte,
                                                    tipoTitular: "titularCliente",
                                                    mail: mail,
                                                    telefono: telefono,
                                                })
                                                ui.appendChild(detallesDelTitularUI)


                                                const infoCheck = document.createElement("p")
                                                infoCheck.classList.add(
                                                    "padding14"
                                                )
                                                infoCheck.textContent = "Operaciones de CheckIn CheckOut"
                                                ui.appendChild(infoCheck)

                                                if (!fechaCheckIn) {
                                                    const botonCheckIn = this.botonCheckIn(pernoctanteUID)
                                                    ui.appendChild(botonCheckIn)
                                                } else {
                                                    const botonModificarCheckIn = this.botonModificarCheckIn(pernoctanteUID)
                                                    ui.appendChild(botonModificarCheckIn)
                                                    const botonCheckOutAdelantado = this.botonCheckOutAdelantado(pernoctanteUID)
                                                    ui.appendChild(botonCheckOutAdelantado)
                                                }

                                                const infoGlobalCambioHab = document.createElement("p")
                                                infoGlobalCambioHab.classList.add(
                                                    "padding14"
                                                )
                                                infoGlobalCambioHab.textContent = "Informacion y cambio de habitación"
                                                ui.appendChild(infoGlobalCambioHab)

                                                const botonIrALaFichaDelClinete = this.botonIrALaFichaDelClinete(clienteUID)
                                                ui.appendChild(botonIrALaFichaDelClinete)


                                                if (habitacionUID) {
                                                    const botonCambiarDeHabitacion = this.botonCambiarDeHabitacion(pernoctanteUID)
                                                    ui.appendChild(botonCambiarDeHabitacion)

                                                } else {
                                                    const botonAsignarAHabitacion = this.botonAsignarAHabitacion(pernoctanteUID)
                                                    ui.appendChild(botonAsignarAHabitacion)

                                                }

                                                const infoElim = document.createElement("p")
                                                infoElim.classList.add(
                                                    "padding14"
                                                )
                                                infoElim.textContent = "Operaciones de eliminación del pernoctante"
                                                ui.appendChild(infoElim)

                                                const botonEliminarPernoctanteDeLaReserva = this.botonEliminarPernoctanteDeLaReserva(pernoctanteUID)
                                                ui.appendChild(botonEliminarPernoctanteDeLaReserva)

                                                if (habitacionUID) {
                                                    const botonEliminarPernoctaneDeLaHabitacion = this.botonEliminarPernoctaneDeLaHabitacion(pernoctanteUID)
                                                    ui.appendChild(botonEliminarPernoctaneDeLaHabitacion)
                                                }

                                                const botonCerrar = this.botonCerrar()
                                                ui.appendChild(botonCerrar)
                                            }
                                        },
                                        cancelarCambiarTitular: (instanciaUID) => {
                                            const selectorBotonCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cambiarTitular]`)
                                            const selectorBotonDesasociar = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=desasociarTitular]`)
                                            selectorBotonCambiarTitular.removeAttribute("style")
                                            selectorBotonDesasociar.removeAttribute("style")
                                            const selectorNuevoClienteUI = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`)
                                            selectorNuevoClienteUI.style.display = "none"
                                            const selectorbotonCerrarCambiarTitular = document.querySelector(`[instanciaUID="${instanciaUID}"] [boton=cerrarCambiarTitular]`)
                                            selectorbotonCerrarCambiarTitular.style.display = "none"
                                        },
                                    },
                                },
                                cambiarDeHabitacion: {
                                    mostrasSelectorCambioPernoctanteHabitacion: (pernoctanteUID) => {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        const habitacionActual = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)?.closest("[habitacionUID]")?.getAttribute("habitacionUID")



                                        const selectorHabitaciones = document.querySelectorAll("[habitacionIDV]")
                                        const selectorBotonAsignarAHabitacionRenderizado = document.querySelectorAll("[componente=botonMoverCliente]")

                                        selectorBotonAsignarAHabitacionRenderizado.forEach(botonRenderizado => {
                                            botonRenderizado.remove()
                                        });


                                        selectorHabitaciones.forEach((habitacion) => {
                                            const habitacionUID = habitacion.getAttribute("habitacionUID")
                                            if (habitacionUID !== habitacionActual) {
                                                const bloqueSelectorCambio = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.habitaciones.selectorCambioHabitacionUI(pernoctanteUID)
                                                habitacion.appendChild(bloqueSelectorCambio)
                                            }
                                        })
                                    },
                                    ocultarSelectoresCambioHabitacion: (e) => {
                                        const componente = e.target?.getAttribute("componente")
                                        if (componente === "botonOpcionClientePool") {
                                            return
                                        }
                                        const selectorBotonMoverCliente = document.querySelectorAll("[componente=botonMoverCliente]")
                                        selectorBotonMoverCliente.forEach(selectorBotonMoverCliente => {
                                            selectorBotonMoverCliente.remove()
                                        })
                                        document.removeEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.cambiarDeHabitacion.ocultarSelectoresCambioHabitacion)
                                    },
                                    cambiarPernoctanteHabitacion: async (pernoctanteUID, e) => {
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const habitacionUID = e.target.closest("[habitacionUID]").getAttribute("habitacionUID")
                                        const pernoctante = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                        const clienteUID = pernoctante.getAttribute("clienteUID")
                                        const tipoCliente = pernoctante.getAttribute("tipoCliente")
                                        const nombrePernoctante = pernoctante.querySelector("[componente=nombreCompleto]").textContent
                                        const pasaportePernoctante = pernoctante.querySelector(`[componente=pasaporte]`).textContent
                                        const fechaCheckIn = pernoctante.getAttribute("fechaCheckIn")
                                        const fechaCheckOutAdelantado = pernoctante.getAttribute("fechaCheckOut")
                                        document.querySelectorAll("[componente=botonMoverCliente]").forEach(botonMover => {
                                            botonMover.remove()
                                        })
                                        document.querySelectorAll("[componente=opcionesCliente]").forEach(opcionesCliente => {
                                            opcionesCliente.remove()
                                        })
                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/alojamiento/cambiarPernoctanteDeHabitacion",
                                            reservaUID: String(reservaUID),
                                            habitacionDestinoUID: String(habitacionUID),
                                            pernoctanteUID: String(pernoctanteUID)
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        if (respuestaServidor?.error) {
                                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                                .remove()
                                            const datoPernoctante = {
                                                tipoPernoctante: tipoCliente,
                                                clienteUID: clienteUID,
                                                pernoctanteUID: pernoctanteUID,
                                                estadoAlojamiento: "alojado",
                                                fechaCheckIn: fechaCheckIn,
                                                fechaCheckOutAdelantado: fechaCheckOutAdelantado,
                                            }
                                            const bloqueClienteMover = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(datoPernoctante)
                                            const datosNombre = {
                                                nombreCompleto: nombrePernoctante
                                            }
                                            const pernoctanteNombreUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(datosNombre)
                                            bloqueClienteMover.appendChild(pernoctanteNombreUI)
                                            const datosPasaporte = {
                                                pasaporte: pasaportePernoctante
                                            }
                                            const pernoctantePasaporteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(datosPasaporte)
                                            bloqueClienteMover.appendChild(pernoctantePasaporteUI)
                                            const selectorHabitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                            selectorHabitacionDestino?.appendChild(bloqueClienteMover)
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                        }
                                    },
                                },
                                eliminarPernoctante: async (metadatos) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const pernoctanteUID = metadatos.pernoctanteUID
                                    const pernoctante = document
                                        .querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                    const tipoPernoctante = pernoctante.getAttribute("tipoCliente")
                                    const tipoEliminacion = metadatos.tipoEliminacion
                                    const clienteUID = pernoctante.getAttribute("clienteUID")
                                    const nombreCompleto = pernoctante.querySelector("[componente=nombreCompleto]").textContent
                                    const pasaporte = pernoctante.querySelector("[componente=pasaporte]").innerHTML
                                    const fechaCheckIn = pernoctante.getAttribute("fechaCheckIn")
                                    const fechaCheckOut = pernoctante.getAttribute("fechaCheckOut")
                                    const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/pernoctantes/eliminarPernoctanteReserva",
                                        reservaUID: String(reservaUID),
                                        pernoctanteUID: String(pernoctanteUID),
                                        tipoEliminacion: tipoEliminacion
                                    }

                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const metadatosPantallaCarga = {
                                        mensaje: "Esperando al servidor...",
                                        instanciaUID: instanciaUIDPantallaDeCarga,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUIDPantallaDeCarga}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        if (tipoEliminacion === "habitacion") {
                                            const metadatosPernoctante = {
                                                tipoPernoctante: "cliente",
                                                clienteUID: clienteUID,
                                                pernoctanteUID: pernoctanteUID,
                                                tipoPernoctante: tipoPernoctante,
                                                estadoAlojamiento: "noAlojado",
                                                fechaCheckIn: fechaCheckIn,
                                                fechaCheckOutAdelantado: fechaCheckOut
                                            }
                                            const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(metadatosPernoctante)
                                            const metadatosNombre = {
                                                nombreCompleto: nombreCompleto,
                                                clienteUID: clienteUID,
                                            }
                                            const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(metadatosNombre)
                                            bloquePernoctantes.appendChild(nombrePernoctante)
                                            const metadatosPasaporte = {
                                                pasaporte: pasaporte,
                                                clienteUID: clienteUID
                                            }
                                            const selectorPernoctanteRenderizado = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctanteRenderizado.remove()
                                            const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(metadatosPasaporte)
                                            bloquePernoctantes.appendChild(identificacionPernoctante)
                                            const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                            zonaDestino.appendChild(bloquePernoctantes)
                                            zonaDestino.classList.remove("elementoOcultoInicialmente")
                                        }
                                        if (tipoEliminacion === "reserva") {
                                            const selectorPernoctanteRenderizado = document.querySelector(`[pernoctanteUID="${pernoctanteUID}"]`)
                                            selectorPernoctanteRenderizado.remove()
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                    }
                                },
                                controlEspacioPernoctantesSinAlojamiento: () => {
                                    const selectorMarcoPernoctantesSinAlojamiento = document.querySelector("[componente=espacioPernoctantesSinAlojamiento]")
                                    const selectorPernoctantes = selectorMarcoPernoctantesSinAlojamiento.querySelectorAll("[contenedor=pernoctante]")
                                    if (selectorPernoctantes.length > 0) {
                                        selectorMarcoPernoctantesSinAlojamiento.classList.remove("elementoOcultoInicialmente")
                                    } else {
                                        selectorMarcoPernoctantesSinAlojamiento.classList.add("elementoOcultoInicialmente")
                                    }
                                },
                                gestionPernoctante: {
                                    formularioNuevoPernoctanteEnHabitacionUI: async function (data) {
                                        const habitacionIDV = data.habitacionIDV
                                        const apartamentoIDV = data.apartamentoIDV
                                        const habitacionUID = data.habitacionUID
                                        const habitacionUI = data.habitacionUI
                                        const apartamentoUI = data.apartamentoUI
                                        const main = document.querySelector("main")
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")


                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        ui.setAttribute("operacion", "crearCliente")
                                        ui.setAttribute("habitacionUID", habitacionUID)

                                        const instanciaUID_ui = ui.getAttribute("instanciaUID")

                                        main.appendChild(ui)
                                        const contenedor = ui.querySelector("[componente=contenedor]")


                                        const titulo = `Añadir pernoctante en la ${habitacionUI} del ${apartamentoUI}`
                                        const tituloUI = this.componentes.titulo(titulo)
                                        contenedor.appendChild(tituloUI)


                                        const banner = document.createElement("div")
                                        banner.classList.add(
                                            "flexVertical",
                                            "borderRadius12",
                                            "backgroundGrey1",
                                            "padding14",
                                            "gap6"
                                        )
                                        contenedor.appendChild(banner)


                                        const bannerReserva = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerReservaMenus()
                                        banner.appendChild(bannerReserva)

                                        const bannerAlojamiento = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerAlojamiento({
                                                apartamentoUI: apartamentoUI,
                                                apartamentoIDV: apartamentoIDV

                                            })
                                        banner.appendChild(bannerAlojamiento)

                                        const bannerHabitacion = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.
                                            alojamiento.
                                            componentesUI.
                                            bannerHabitacion({
                                                habitacionUI: habitacionUI,
                                                habitacionIDV: habitacionIDV

                                            })
                                        banner.appendChild(bannerHabitacion)

                                        const info = "Añade un pernoctante en la habitación, en el buscador rápido puedes buscar si ya existe el cliente a añadir como pernoctante o puedes crear uno directamente aquí y añadirlo a la habitación"
                                        const infoUI = this.componentes.infoUI(info)
                                        contenedor.appendChild(infoUI)

                                        const buscadorUI = this.componentes.buscadorRapido.UI({
                                            reservaUID: reservaUID,
                                            habitacionUID: habitacionUID,
                                            metodoFinal: "ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.componentes.buscadorRapido.anadirPernoctanteTransaccionDesdeBuscadorRapido"
                                        })

                                        contenedor.appendChild(buscadorUI)
                                        const nuevoClienteUI = this.componentes.nuevoClienteOTitular.UI({
                                            metodoFinal: "ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.gestionPernoctante.componentes.guardarNuevoClienteYAnadirloComoPernoctnante",
                                            habitacionUID: habitacionUID,
                                            reservaUID: reservaUID,
                                            tituloBoton: "Crear nuevo cliente e insertarlo en la habitación",
                                            tituloUI: "Crear nuevo cliente e insertarlo como pernoctante de la habiación"
                                        })

                                        contenedor.appendChild(nuevoClienteUI)
                                        const botonCerrar = this.componentes.botonCerrar()
                                        contenedor.appendChild(botonCerrar)

                                    },
                                    componentes: {
                                        buscadorRapido: {
                                            UI: function (data) {
                                                const metodoFinal = data.metodoFinal
                                                const reservaUID = data.reservaUID
                                                const habitacionUID = data?.habitacionUID
                                                const contenedor = document.createElement("div")
                                                contenedor.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "borderRadius20",
                                                    "borderGrey1",
                                                    "gap6"
                                                )
                                                contenedor.setAttribute("contenedor", "buscador")
                                                const info = document.createElement("div")
                                                info.classList.add("adminsitracion_reservas_detallesReservas_gestionTitular_infoBuscador")

                                                const campoBuscador = document.createElement("input")
                                                campoBuscador.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                campoBuscador.placeholder = "Buscar un cliente existente 3"
                                                campoBuscador.setAttribute("campo", "buscador")
                                                campoBuscador.addEventListener("input", (e) => {
                                                    this.listaResultadosUI({
                                                        e,
                                                        metodoFinal,
                                                        reservaUID,
                                                        habitacionUID
                                                    })
                                                })
                                                contenedor.appendChild(campoBuscador)
                                                return contenedor
                                            },
                                            listaResultadosUI: async function (data) {
                                                const evento = data.e
                                                const elemento = evento.target
                                                const terminoBusqueda = elemento.value
                                                const metodoFinal = data.metodoFinal
                                                const reservaUID = data.reservaUID
                                                const habitacionUID = data?.habitacionUID

                                                const instanciaUIDBuscador = casaVitini.utilidades.codigoFechaInstancia()
                                                const buscadorUI = elemento.closest(`[contenedor=buscador]`)
                                                const instanciaUID = elemento.closest(`[componente=advertenciaInmersiva]`).getAttribute("instanciaUID")


                                                const selectorListaResultadosBuscadorRapidoRenderiaza = buscadorUI.querySelectorAll("[componente=buscadorRapidoCliente]")
                                                selectorListaResultadosBuscadorRapidoRenderiaza.forEach((listaRenderizada) => {
                                                    listaRenderizada.remove()
                                                })
                                                const campoVacio = elemento.value.length
                                                if (campoVacio === 0) {
                                                    clearTimeout(casaVitini.componentes.temporizador);
                                                    elemento.closest(`[contenedor=buscador]`).querySelector(`[instanciaUIDBuscador]`)?.remove()
                                                    return

                                                }
                                                const listaResultados = document.createElement("div")
                                                listaResultados.setAttribute("componente", "buscadorRapidoCliente")
                                                listaResultados.setAttribute("instanciaUIDBuscador", instanciaUIDBuscador)
                                                listaResultados.style.alignItems = "stretch"
                                                listaResultados.classList.add(
                                                    "flexVertical",
                                                    "gap6",
                                                    "borderRadius14"
                                                )

                                                listaResultados.textContent = null
                                                const conntenedorInfo = document.createElement("div")
                                                conntenedorInfo.setAttribute("componente", "info")
                                                conntenedorInfo.classList.add(
                                                    "efectoAparicion",
                                                    "padding14"
                                                )
                                                listaResultados.appendChild(conntenedorInfo)

                                                const info = document.createElement("div")
                                                info.classList.add(

                                                )
                                                info.textContent = "Buscando..."
                                                conntenedorInfo.appendChild(info)

                                                buscadorUI.appendChild(listaResultados)

                                                clearTimeout(casaVitini.componentes.temporizador);
                                                casaVitini.componentes.temporizador = setTimeout(() => {
                                                    this.transactor({
                                                        terminoBusqueda: terminoBusqueda,
                                                        instanciaUIDBuscador: instanciaUIDBuscador,
                                                        instanciaUID,
                                                        metodoFinal,
                                                        reservaUID,
                                                        habitacionUID

                                                    })
                                                }, 1500);
                                            },
                                            transactor: async function (data) {
                                                const terminoBusqueda = data.terminoBusqueda
                                                const instanciaUIDBuscador = data.instanciaUIDBuscador
                                                const metodoFinal = data.metodoFinal
                                                const reservaUID = data.reservaUID
                                                const instanciaUID = data.instanciaUID
                                                const habitacionUID = data.habitacionUID

                                                const transaccion = {
                                                    zona: "administracion/clientes/buscar",
                                                    tipoBusqueda: "rapido",
                                                    buscar: terminoBusqueda
                                                }
                                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                                const listaBuscadorRenderizada = document.querySelector(`[instanciaUIDBuscador="${instanciaUIDBuscador}"]`)
                                                if (!listaBuscadorRenderizada) {
                                                    return
                                                }
                                                if (respuestaServidor?.error) {
                                                    return listaBuscadorRenderizada.querySelector("[componente=info]").innerHTML = respuestaServidor?.error
                                                }

                                                const resultadosClientes = respuestaServidor?.clientes
                                                if (resultadosClientes.length === 0) {
                                                    return listaBuscadorRenderizada.querySelector("[componente=info]").innerHTML = "Nada encontrado"
                                                }
                                                listaBuscadorRenderizada.innerHTML = null
                                                resultadosClientes.forEach((clienteEncontrado) => {
                                                    const clienteUID = clienteEncontrado.clienteUID
                                                    const nombre = clienteEncontrado.nombre
                                                    const primerApellido = clienteEncontrado.primerApellido
                                                    const segundoApellido = clienteEncontrado.segundoApellido
                                                    const pasaporte = clienteEncontrado.pasaporte
                                                    const bloqueCliente = document.createElement("div")
                                                    bloqueCliente.classList.add(
                                                        "flexVertical",
                                                        "comportamientoBoton",
                                                        "padding6",
                                                        "borderRadius14"
                                                    )
                                                    bloqueCliente.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                                    bloqueCliente.addEventListener("click", (e) => {


                                                        return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                                            ruta: metodoFinal,
                                                            args: {
                                                                clienteUID,
                                                                reservaUID,
                                                                instanciaUID,
                                                                habitacionUID
                                                            }
                                                        })



















                                                    })



                                                    const filaNombre = document.createElement("p")
                                                    filaNombre.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaNombre")
                                                    filaNombre.textContent = `${nombre} ${primerApellido} ${segundoApellido}`
                                                    filaNombre.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                                    bloqueCliente.appendChild(filaNombre)
                                                    const filaPasaporte = document.createElement("p")
                                                    filaPasaporte.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaPasaporte")
                                                    filaPasaporte.textContent = pasaporte
                                                    filaPasaporte.setAttribute("componente", "elementoResultadosBuscadorRapido")
                                                    bloqueCliente.appendChild(filaPasaporte)
                                                    listaBuscadorRenderizada.appendChild(bloqueCliente)
                                                })
                                            },






















































                                            anadirPernoctanteTransaccionDesdeBuscadorRapido: async (data) => {
                                                const reservaUID = data.reservaUID
                                                const clienteUID = data.clienteUID
                                                const habitacionUID = data.habitacionUID
                                                const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                                const instanciaUID = data.instanciaUID


                                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                    mensaje: "Añadiento al cliente como pernoctante de la habitacion...",
                                                    instanciaUID: instanciaUIDPantallaDeCarga,
                                                })

                                                const respuestaServidor = await casaVitini.shell.servidor({
                                                    zona: "administracion/reservas/detallesReserva/alojamiento/anadirPernoctanteHabitacion",
                                                    reservaUID,
                                                    clienteUID: String(clienteUID),
                                                    habitacionUID
                                                })

                                                const selectorPantallaDeCarga = document.querySelector(`[instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                                selectorPantallaDeCarga?.remove()

                                                const selectorBloqueAnadirPernoctante = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                                if (!selectorBloqueAnadirPernoctante) { return }
                                                if (respuestaServidor?.error) {
                                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                                }
                                                if (respuestaServidor?.ok) {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                                    const pernoctante = respuestaServidor.pernoctante
                                                    const cliente = respuestaServidor.cliente

                                                    const clienteUID = cliente.clienteUID
                                                    const pernoctanteUID = pernoctante.componenteUID
                                                    const nombre = cliente.nombre
                                                    const primerApellido = cliente.primerApellido
                                                    const segundoApellido = cliente.segundoApellido
                                                    const pasaporte = cliente.pasaporte

                                                    const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI({
                                                        tipoPernoctante: "cliente",
                                                        clienteUID: clienteUID,
                                                        pernoctanteUID: pernoctanteUID,
                                                        estadoAlojamiento: "alojado"
                                                    })

                                                    const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI({
                                                        nombreCompleto: `${nombre} ${primerApellido} ${segundoApellido}`,
                                                        clienteUID: clienteUID,
                                                    })
                                                    bloquePernoctantes.appendChild(nombrePernoctante)

                                                    const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI({
                                                        pasaporte: pasaporte,
                                                        clienteUID: clienteUID
                                                    })
                                                    bloquePernoctantes.appendChild(identificacionPernoctante)



                                                    const habitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                                    habitacionDestino.appendChild(bloquePernoctantes)
                                                }
                                            },
                                        },
                                        nuevoClienteOTitular: {
                                            UI: function (data) {

                                                const metodoFinal = data.metodoFinal
                                                const tituloUI = data.tituloUI
                                                const tituloBoton = data.tituloBoton
                                                const reservaUID = data.reservaUID
                                                const habitacionUID = data?.habitacionUID

                                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                                const nuevoClienteUI = document.createElement("div")

                                                nuevoClienteUI.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6",
                                                    "borderRadius20",
                                                    "borderGrey1"
                                                )
                                                nuevoClienteUI.setAttribute("instanciaUID", instanciaUID)
                                                nuevoClienteUI.setAttribute("formulario", "nuevoCliente")

                                                const info = document.createElement("p")
                                                info.classList.add(
                                                    "negrita",
                                                    "textoCentrado",
                                                    "padding14"

                                                )
                                                info.textContent = tituloUI
                                                nuevoClienteUI.appendChild(info)

                                                const nombreUI = document.createElement("div")
                                                nombreUI.classList.add(
                                                    "flexVertical",
                                                    "padding14"
                                                )
                                                nombreUI.textContent = "Nombre (Obligatorio)"
                                                nuevoClienteUI.appendChild(nombreUI)

                                                const campoNombre = document.createElement("input")
                                                campoNombre.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                campoNombre.setAttribute("campo", "nombre")
                                                campoNombre.setAttribute("formulario", "AnadirPernoctante")
                                                campoNombre.placeholder = "Nombre (obligatiorio)"
                                                nuevoClienteUI.appendChild(campoNombre)


                                                const primerApellidoUI = document.createElement("div")
                                                primerApellidoUI.classList.add(
                                                    "flexVertical",
                                                    "padding14"
                                                )
                                                primerApellidoUI.textContent = "Primer apellido"
                                                nuevoClienteUI.appendChild(primerApellidoUI)

                                                const primerApellido = document.createElement("input")
                                                primerApellido.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                primerApellido.setAttribute("campo", "primerApellido")
                                                primerApellido.setAttribute("formulario", "AnadirPernoctante")
                                                primerApellido.placeholder = "Primer apellido"
                                                nuevoClienteUI.appendChild(primerApellido)

                                                const segundoApellidoUI = document.createElement("div")
                                                segundoApellidoUI.classList.add(
                                                    "flexVertical",
                                                    "padding14"
                                                )
                                                segundoApellidoUI.textContent = "Segundo apellido"
                                                nuevoClienteUI.appendChild(segundoApellidoUI)

                                                const segundoApellido = document.createElement("input")
                                                segundoApellido.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                segundoApellido.setAttribute("campo", "segundoApellido")
                                                segundoApellido.setAttribute("formulario", "AnadirPernoctante")
                                                segundoApellido.placeholder = "Segundo apellido"
                                                nuevoClienteUI.appendChild(segundoApellido)


                                                const pasaporteUI = document.createElement("div")
                                                pasaporteUI.classList.add(
                                                    "flexVertical",
                                                    "padding14"
                                                )
                                                pasaporteUI.textContent = "Pasaporte (Obligatorio)"
                                                nuevoClienteUI.appendChild(pasaporteUI)

                                                const pasaporte = document.createElement("input")
                                                pasaporte.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                pasaporte.setAttribute("campo", "pasaporte")
                                                pasaporte.setAttribute("formulario", "AnadirPernoctante")
                                                pasaporte.placeholder = "Pasaporte (obligatorio)"
                                                nuevoClienteUI.appendChild(pasaporte)


                                                const telefonoUI = document.createElement("div")
                                                telefonoUI.classList.add(
                                                    "flexVertical",
                                                    "padding14"
                                                )
                                                telefonoUI.textContent = "Telefono"
                                                nuevoClienteUI.appendChild(telefonoUI)

                                                const telefono = document.createElement("input")
                                                telefono.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                telefono.setAttribute("campo", "telefono")
                                                telefono.setAttribute("formulario", "AnadirPernoctante")
                                                telefono.placeholder = "Teléfono"
                                                nuevoClienteUI.appendChild(telefono)



                                                const correoUI = document.createElement("div")
                                                correoUI.classList.add(
                                                    "flexVertical",
                                                    "padding14"
                                                )
                                                correoUI.textContent = "Mail"
                                                nuevoClienteUI.appendChild(correoUI)

                                                const correoElecotronico = document.createElement("input")
                                                correoElecotronico.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                                correoElecotronico.setAttribute("campo", "correoElectronico")
                                                correoElecotronico.setAttribute("formulario", "AnadirPernoctante")
                                                correoElecotronico.placeholder = "Correo electrónico"
                                                nuevoClienteUI.appendChild(correoElecotronico)

                                                const botonGuardarNuevoCliente = document.createElement("div")
                                                botonGuardarNuevoCliente.setAttribute("boton", "crearCliente")
                                                botonGuardarNuevoCliente.classList.add("botonV1BlancoIzquierda")
                                                botonGuardarNuevoCliente.textContent = tituloBoton

                                                botonGuardarNuevoCliente.addEventListener("click", (e) => {
                                                    const campos = e.target.closest("[formulario=nuevoCliente]").querySelectorAll("[campo]")
                                                    const datos = {}
                                                    campos.forEach((e) => {
                                                        const nombreCampo = e.getAttribute("campo")
                                                        const valorCampo = e.value
                                                        datos[nombreCampo] = valorCampo
                                                    })
                                                    return casaVitini.utilidades.ejecutarFuncionPorNombreDinamicoConContexto({
                                                        ruta: metodoFinal,
                                                        args: {
                                                            reservaUID,
                                                            instanciaUID,
                                                            habitacionUID,
                                                            datos
                                                        }
                                                    })
                                                })
                                                nuevoClienteUI.appendChild(botonGuardarNuevoCliente)
                                                return nuevoClienteUI
                                            },
                                        },
                                        guardarNuevoClienteYSustituirloPorElClientePoolActual: async (instanciaUID) => {
                                            const pernoctanteUID_DesdeInstancia = document.querySelector(`[instanciaUID="${instanciaUID}"]`).getAttribute("pernoctanteUID")
                                            const instanciaUID_pantallaPropuestaConfirmada = casaVitini.utilidades.codigoFechaInstancia()
                                            const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                            const campos = document.querySelector(`[instanciaUID="${instanciaUID}"] [formulario=nuevoCliente]`).querySelectorAll("[campo]")
                                            const metadatosPantallaCarga = {
                                                mensaje: "Esperando al servidor...",
                                                instanciaUID: instanciaUID_pantallaPropuestaConfirmada,
                                            }
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                            const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaPropuestaConfirmada}"]`)
                                            const transaccion = {
                                                zona: "administracion/reservas/guardarNuevoClienteYSustituirloPorElClientePoolActual",
                                                reserva: Number(reservaUID),
                                                pernoctanteUID: Number(pernoctanteUID_DesdeInstancia)
                                            }
                                            campos.forEach((campo) => {
                                                const nombreCampo = campo.getAttribute("campo")
                                                const valorCampo = campo.value
                                                transaccion[nombreCampo] = valorCampo
                                            })
                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            if (!selectorPantallaDeCarga) {

                                            }
                                            selectorPantallaDeCarga.forEach((pantalla) => {
                                                pantalla.remove()
                                            })
                                            if (respuestaServidor?.error) {
                                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                const nuevoClienteUID = respuestaServidor.nuevoClienteUID
                                                const nombreCompleto = respuestaServidor.nombreCompleto
                                                const pasaporte = respuestaServidor.pasaporte
                                                const habitacionUID = respuestaServidor.habitacionUID
                                                const selectorInstanciaRaiz = document.querySelectorAll(`[instanciaUID="${instanciaUID}"]`)
                                                selectorInstanciaRaiz.forEach((pantalla) => {
                                                    pantalla.remove()
                                                })
                                                const selectorContenedorPernoctanteAntiguo = document.querySelector(`[contenedor=pernoctante][pernoctanteUID="${pernoctanteUID_DesdeInstancia}"]`)
                                                selectorContenedorPernoctanteAntiguo.remove()
                                                if (habitacionUID) {
                                                    const selectorHabitacion = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                                    let metadatos = {
                                                        tipoPernoctante: "cliente",
                                                        clienteUID: nuevoClienteUID,
                                                        pernoctanteUID: pernoctanteUID_DesdeInstancia,
                                                        estadoAlojamiento: "alojado",
                                                    }
                                                    const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(metadatos)
                                                    metadatos = {
                                                        nombreCompleto: nombreCompleto,
                                                    }
                                                    const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(metadatos)
                                                    bloquePernoctantes.appendChild(nombrePernoctante)
                                                    metadatos = {
                                                        pasaporte: pasaporte,
                                                    }
                                                    const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(metadatos)
                                                    bloquePernoctantes.appendChild(identificacionPernoctante)
                                                    selectorHabitacion.appendChild(bloquePernoctantes)
                                                } else {
                                                    const metadatosBloquePernoctantes = {
                                                        tipoPernoctante: "cliente",
                                                        clienteUID: nuevoClienteUID,
                                                        pernoctanteUID: pernoctanteUID_DesdeInstancia,
                                                        estadoAlojamiento: "noAlojado"
                                                    }
                                                    const bloquePernoctantes = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI(metadatosBloquePernoctantes)
                                                    const metadatosNombreUi = {
                                                        nombreCompleto: nombreCompleto,
                                                    }
                                                    const nombrePernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI(metadatosNombreUi)
                                                    bloquePernoctantes.appendChild(nombrePernoctante)
                                                    const metadatosPasaporte = {
                                                        pasaporte: pasaporte,
                                                    }
                                                    const identificacionPernoctante = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI(metadatosPasaporte)
                                                    bloquePernoctantes.appendChild(identificacionPernoctante)
                                                    const zonaDestino = document.querySelector(`[componente=contenedorPernoctantesSinHabitacion]`)
                                                    zonaDestino.appendChild(bloquePernoctantes)
                                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.controlEspacioPernoctantesSinAlojamiento()
                                                }
                                            }
                                        },
                                        guardarNuevoClienteYAnadirloComoPernoctnante: async (data) => {

                                            const instanciaUID_contenedorNuevoPernoctanteUI = data.instanciaUID
                                            const habitacionUID = data.habitacionUID
                                            const reservaUID = data.reservaUID
                                            const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                            const datos = data.datos

                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                mensaje: "Creando cliente y asignándolo a la habitación...",
                                                instanciaUID: instanciaUIDPantallaDeCarga,
                                            })

                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/pernoctantes/crearClienteDesdeReservaYAnadirloAreserva",
                                                reservaUID: reservaUID,
                                                habitacionUID: habitacionUID,
                                                ...datos
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                            const selectorPantallaDeCarga = document.querySelector(`[instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                                            if (!selectorPantallaDeCarga) {
                                                return
                                            }
                                            selectorPantallaDeCarga.remove()
                                            if (respuestaServidor?.error) {
                                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor.error)
                                            }
                                            if (respuestaServidor?.ok) {

                                                const selectorAnadirPernoctanteRedenrizada = document.querySelector(`[instanciaUID="${instanciaUID_contenedorNuevoPernoctanteUI}"]`)
                                                if (selectorAnadirPernoctanteRedenrizada) {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                }

                                                const datosNuevoCliente = respuestaServidor.nuevoCliente
                                                const nombre = datosNuevoCliente.nombre
                                                const primerApellido = datosNuevoCliente.primerApellido ? datosNuevoCliente.primerApellido : ""
                                                const segundoApellido = datosNuevoCliente.segundoApellido ? datosNuevoCliente.segundoApellido : ""
                                                const pasaporte = datosNuevoCliente.pasaporte
                                                const telefono = datosNuevoCliente.telefono
                                                const correoElectronico = datosNuevoCliente.correoElectronico

                                                const pernoctanteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteUI({
                                                    tipoPernoctante: "cliente",
                                                    clienteUID: respuestaServidor?.nuevoUIDCliente,
                                                    pernoctanteUID: respuestaServidor?.nuevoUIDPernoctante,
                                                    estadoAlojamiento: "alojado"
                                                })

                                                const pernoctanteNombreUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctanteNombreUI({
                                                    clienteUID: respuestaServidor?.nuevoUIDCliente,
                                                    nombreCompleto: `${nombre} ${primerApellido} ${segundoApellido}`
                                                })

                                                const pernoctantePasaporteUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.alojamiento.pernoctantes.pernoctantePasaporteUI({
                                                    clienteUID: respuestaServidor?.nuevoUIDCliente,
                                                    pasaporte: transaccion.pasaporte
                                                })
                                                pernoctanteUI.appendChild(pernoctanteNombreUI)
                                                pernoctanteUI.appendChild(pernoctantePasaporteUI)
                                                const selectorHabitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                                selectorHabitacionDestino.appendChild(pernoctanteUI)
                                            }
                                        },
                                        bannerPernoctanteUI: (detallesDelTitular) => {
                                            const clienteUID = detallesDelTitular.clienteUID
                                            const nombreTitular = detallesDelTitular.nombreTitular
                                            const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                            const tipoTitular = detallesDelTitular.tipoTitular

                                            const mailTitular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                            const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin telefono)"
                                            const detallesRapidosDelTitular = document.createElement("div")
                                            detallesRapidosDelTitular.classList.add("tarjetaGris")

                                            let contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            let nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Nombre completo del titular"
                                            contenedorDato.appendChild(nombreDato)
                                            let valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = nombreTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Pasaporte"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = pasaporteTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Teléfono"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = telefonoTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "e - Mail"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = mailTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)
                                            return detallesRapidosDelTitular
                                        },
                                        detallesDelTitularPoolUI: (detallesDelTitular) => {
                                            const nombreTitular = detallesDelTitular.nombreTitular
                                            const pasaporteTitular = detallesDelTitular.pasaporteTitular
                                            const tipoTitular = "Titular pool"
                                            const mailTitular = detallesDelTitular.mailTitular ? detallesDelTitular.mailTitular : "(Sin mail)"
                                            const telefonoTitular = detallesDelTitular.telefonoTitular ? detallesDelTitular.telefonoTitular : "(Sin telefono)"
                                            const detallesRapidosDelTitular = document.createElement("div")
                                            detallesRapidosDelTitular.classList.add("tarjetaGris")

                                            let contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            let nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Nombre completo del titular"
                                            contenedorDato.appendChild(nombreDato)
                                            let valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = nombreTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Pasaporte"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = pasaporteTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "Teléfono"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = telefonoTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)

                                            contenedorDato = document.createElement("div")
                                            contenedorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_contenedor")
                                            nombreDato = document.createElement("div")
                                            nombreDato.classList.add("administracion_reservas_detallesReserva_infoTitular_nombreDato")
                                            nombreDato.textContent = "e - Mail"
                                            contenedorDato.appendChild(nombreDato)
                                            valorDato = document.createElement("div")
                                            valorDato.classList.add("administracion_reservas_detallesReserva_infoTitular_dato")
                                            valorDato.classList.add("negrita")
                                            valorDato.textContent = mailTitular
                                            contenedorDato.appendChild(valorDato)
                                            detallesRapidosDelTitular.appendChild(contenedorDato)
                                            return detallesRapidosDelTitular
                                        },
                                        botonCerrarFormularioNuevoCliente: () => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Cerrar gestión del titular de la reserva"
                                            boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                            boton
                                        },
                                        botonCerrar: () => {
                                            const boton = document.createElement("div")
                                            boton.classList.add("botonV1")
                                            boton.innerHTML = "Cerrar y volver a la reserva"
                                            boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                            return boton
                                        },











                                        botonIrALaFichaDelClinete: (clienteUID) => {
                                            const boton = document.createElement("a")
                                            boton.classList.add("botonV1BlancoIzquierda")
                                            boton.innerHTML = "Ir a la ficha del cliente"
                                            boton.setAttribute("href", "/administracion/clientes/cliente:" + clienteUID)
                                            boton.setAttribute("vista", "/administracion/clientes/cliente:" + clienteUID)
                                            boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                            return boton
                                        },
                                        titulo: (titulo) => {
                                            const tituloUI = document.createElement("p")
                                            tituloUI.classList.add(
                                                "tituloGris",
                                                "padding14"
                                            )
                                            tituloUI.textContent = titulo
                                            return tituloUI
                                        },
                                        infoUI: (info) => {
                                            const infoUI = document.createElement("p")
                                            infoUI.classList.add("padding14")
                                            infoUI.textContent = info
                                            return infoUI
                                        },











                                    }
                                },
                            },
                        },
                        complementosDeAlojamiento: {
                            arranque: async function () {

                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const instanciaUID_contenedorComplementos = casaVitini.utilidades.codigoFechaInstancia()
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()

                                const contenedor = document.createElement("div")
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "padding6"
                                )
                                contenedor.setAttribute("instanciaUID", instanciaUID_contenedorComplementos)
                                contenedor.setAttribute("componente", "complementosDeAlojamiento")
                                contenedor.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(contenedor)
                                const reservaUI = document.querySelector("[reservaUID]")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                const reservaUID = reservaUI.getAttribute("reservaUID")

                                const transaccion = {
                                    reservaUID
                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"
                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "complementosDeAlojamiento",
                                        "alojamiento"
                                    ]
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[componente=complementosDeAlojamiento][instanciaUID="${instanciaUID_contenedorComplementos}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null
                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }
                                if (respuestaServidor?.ok) {

                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReserva_enlacesDePago_bloqueBotones")

                                    const boton = document.createElement("div")
                                    boton.classList.add("detallesReserva_transacciones_botonV1")
                                    boton.textContent = "Insertar complemento de alojamiento"
                                    boton.addEventListener("click", () => {
                                        this.componentesUI.insertarServicio.ui({
                                            instanciaUID_contenedorComplementos: instanciaUID_contenedorComplementos
                                        })
                                    })
                                    // bloqueBotones.appendChild(boton)

                                    const alojamiento = respuestaServidor.ok.alojamiento
                                    const complementosDeAlojamiento = respuestaServidor.ok.complementosDeAlojamiento

                                    if (configuracionVista === "publica") {
                                    } else {
                                        // instanciaDestino.appendChild(bloqueBotones)
                                    }

                                    const contenedorLista = document.createElement("div")
                                    contenedorLista.classList.add(
                                        "gridHorizontal2C",
                                        "gap6",
                                    )
                                    contenedorLista.setAttribute("componente", "contenedorLista")
                                    instanciaDestino.appendChild(contenedorLista)

                                    const apartamentoUI = (data) => {
                                        const apartamentoUI = data.apartamentoUI
                                        const apartamentoUID = data.apartamentoUID
                                        const apartamentoIDV = data.apartamentoIDV

                                        const ui = document.createElement("div")
                                        ui.setAttribute("apartamentoUID", apartamentoUID)
                                        ui.setAttribute("apartamentoIDV", apartamentoIDV)
                                        ui.classList.add(
                                            "flexVertical",
                                            "gap6",
                                            "padding6",
                                            "borderRadius12",
                                            "backgroundGrey1"
                                        )

                                        const n = document.createElement("p")
                                        n.classList.add(
                                            "negrita",
                                            "padding14"
                                        )
                                        n.textContent = apartamentoUI
                                        ui.appendChild(n)

                                        const contBo = document.createElement("div")
                                        contBo.classList.add("flexHorizontal")
                                        ui.appendChild(contBo)

                                        const b = document.createElement("div")
                                        b.classList.add("botonV3")
                                        b.textContent = "Añadir complemento de alojamiento"
                                        b.addEventListener("click", () => {
                                            this.componentesUI.insertarComplementoEnAlojamiento.ui({
                                                instanciaUID_contenedorComplementos,
                                                apartamentoIDV,
                                            })
                                        })
                                        contBo.appendChild(b)

                                        const c = document.createElement("div")
                                        c.setAttribute("contenedor", "complementos")
                                        c.classList.add(
                                            "flexVertical",
                                            "gap6",
                                        )
                                        c.appendChild(this.componentesUI.infoSinComplemento())
                                        ui.appendChild(c)
                                        return ui
                                    }

                                    Object.entries(alojamiento).forEach(([apartamentoIDV, contenedor]) => {
                                        contenedorLista.appendChild(apartamentoUI({
                                            apartamentoIDV,
                                            apartamentoUI: contenedor.apartamentoUI,
                                            apartamentoUID: contenedor.apartamentoUID
                                        }))
                                    })

                                    complementosDeAlojamiento.forEach((com) => {
                                        const contenedor = instanciaDestino.querySelector(`[apartamentoIDV="${com.apartamentoIDV}"] [contenedor=complementos]`)
                                        contenedor.querySelector("[componente=sinInfo]")?.remove()
                                        contenedor.appendChild(this.componentesUI.complementoUI(com))
                                    })

                                    return

                                    instanciaDestino.style.justifyContent = "flex-start";
                                    const serviciosEnReserva = respuestaServidor.ok.servicios
                                    if (serviciosEnReserva.length === 0) {
                                        contenedorLista.style.display = "none"

                                        const infoSinEnlaces = this.componentesUI.infoSinServiciosUI()
                                        instanciaDestino.appendChild(infoSinEnlaces)
                                    }
                                    if (serviciosEnReserva.length > 0) {
                                        const contenedorListaServicios = instanciaDestino.querySelector(`[componente=contenedorLista]`)
                                        for (const servicioEnReserva of serviciosEnReserva) {
                                            const servicioUI = this.componentesUI.servicioUI({
                                                servicioUID_enReserva: servicioEnReserva.servicioUID,
                                                instanciaUID_contenedorServicios,
                                                nombreInterno: servicioEnReserva.nombre,
                                                contenedor: servicioEnReserva.contenedor
                                            })
                                            contenedorListaServicios.appendChild(servicioUI)
                                        }
                                    }
                                }
                            },
                            componentesUI: {
                                insertarComplementoEnAlojamiento: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_insertarComplementoUI = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorComplementos = data.instanciaUID_contenedorComplementos
                                        const apartamentoIDV = data.apartamentoIDV
                                        main.appendChild(ui)
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo complementos del alojamiento...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/complementosDeAlojamiento/obtenerComplementosPorAlojamiento",
                                            apartamentoIDV
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_contenedorComplementos}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()


                                            const complementosPorApartamentoIDV = respuestaServidor.complementosPorApartamentoIDV

                                            const contenedor = document.createElement("div")
                                            contenedor.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap10",
                                            )
                                            constructor.appendChild(contenedor)
                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activada"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivada"
                                                }

                                            }
                                            if (complementosPorApartamentoIDV.length > 0) {
                                                constructor.appendChild(this.botonCancelar())

                                            } else {
                                                const info = document.querySelector("p")
                                                info.classList.add("textoCentrado", "padding14")
                                                info.textContent = "Este alojamiento no tiene ningun complemento configurado."
                                                constructor.appendChild(info)
                                            }
                                            complementosPorApartamentoIDV.forEach((c) => {
                                                const complementoUI = c.complementoUI
                                                const complementoUID = c.complementoUID
                                                const estadoIDV = c.estadoIDV
                                                const tipoPrecio = c.tipoPrecio
                                                const precio = c.precio
                                                const definicion = c.definicion


                                                const contenedor = document.createElement("div")
                                                contenedor.setAttribute("complementoUID", complementoUID)
                                                contenedor.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = complementoUI
                                                contenedorGlobal.appendChild(nombreOfertaUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado del complemento"
                                                contenedorGlobal.appendChild(estadoTitulo)


                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedor.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )
                                                botonInsertar.textContent = "Insertar complemento en el alojamiento"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.confirmarInsertar({
                                                        reservaUID,
                                                        complementoUID,
                                                        instanciaUID_insertarComplementoUI,
                                                        instanciaUID_contenedorComplementos
                                                    })

                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir al complemento"
                                                botonVerOferta.setAttribute("href", "/administracion/complementos_de_alojamiento/complemento:" + complementoUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/complementos_de_alojamiento/complemento:" + complementoUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)

                                                contenedor.appendChild(contendorBotones)
                                                constructor.appendChild(contenedor)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }

                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const complementoUID = String(data.complementoUID)
                                        const instanciaUID_insertarComplementoUI = data.instanciaUID_insertarComplementoUI
                                        const instanciaUID_contenedorComplementos = data.instanciaUID_contenedorComplementos

                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarComplementoUI}"]`)
                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Insertando complemento en el alojamiento..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/complementosDeAlojamiento/insertarComplementoAlojamientoEnReserva",
                                            reservaUID,
                                            complementoUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_contenedorComplementos}"]`)
                                        if (!uiRenderizada) { return }
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            const complementoDeAlojamiento = respuestaServidor.complementoDeAlojamiento
                                            const apartamentoIDV_destino = complementoDeAlojamiento.apartamentoIDV

                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()

                                            const selectorContenedor = uiRenderizada.querySelector(`[apartamentoIDV="${apartamentoIDV_destino}"] [contenedor=complementos]`)
                                            if (!selectorContenedor) {
                                                return
                                            }

                                            const complementoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.complementosDeAlojamiento.componentesUI.complementoUI({
                                                complementoUID: complementoDeAlojamiento.complementoUID,
                                                complementoUI: complementoDeAlojamiento.complementoUI,
                                                definicion: complementoDeAlojamiento.definicion,
                                                precio: complementoDeAlojamiento.precio,
                                                tipoPrecio: complementoDeAlojamiento.tipoPrecio,
                                                apartamentoIDV: complementoDeAlojamiento.apartamentoIDV
                                            })
                                            const selectorInfo = selectorContenedor.querySelector("[componente=sinInfo]")
                                            selectorInfo?.remove()



                                            selectorContenedor.appendChild(complementoUI)

                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },
                                },
                                servicioUI: function (data) {


                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")


                                    const servicioUID_enReserva = data.servicioUID_enReserva
                                    const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                    const nombreInterno = data.nombreInterno
                                    const contenedor = data.contenedor

                                    const precio = contenedor.precio
                                    const definicion = contenedor.definicion
                                    const fechaFinal = contenedor.fechaFinal
                                    const duracionIDV = contenedor.duracionIDV
                                    const fechaInicio = contenedor.fechaInicio
                                    const tituloPublico = contenedor.tituloPublico
                                    const servicioUID = contenedor.servicioUID
                                    const disponibilidadIDV = contenedor.disponibilidadIDV

                                    const diccionario = {
                                        disponibilidad: {
                                            constante: "Disponible",
                                            variable: "Disponibilidad variable"
                                        }
                                    }

                                    const servicioUI = document.createElement("div")
                                    servicioUI.setAttribute("servicioUID_enReserva", servicioUID_enReserva)
                                    servicioUI.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "backgroundGrey1",
                                        "borderRadius14",
                                        "flexAlineacionI"
                                    )
                                    const contenedorData = document.createElement("div")
                                    contenedorData.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "padding10"
                                    )
                                    servicioUI.appendChild(contenedorData)

                                    const contenedorNombreInterno = document.createElement("div")
                                    contenedorNombreInterno.classList.add(
                                        "flexVertical",
                                    )
                                    if (configuracionVista === "publica") {
                                    } else {
                                        contenedorData.appendChild(contenedorNombreInterno)
                                    }

                                    const tituluNombreInternoUI = document.createElement("p")
                                    tituluNombreInternoUI.textContent = `Nombre adminitrativo`
                                    contenedorNombreInterno.appendChild(tituluNombreInternoUI)

                                    const nombreInternoUI = document.createElement("p")
                                    nombreInternoUI.classList.add(
                                        "negrita")
                                    nombreInternoUI.textContent = `${nombreInterno}`
                                    contenedorNombreInterno.appendChild(nombreInternoUI)

                                    const contenedorNombrePublico = document.createElement("div")
                                    contenedorNombrePublico.classList.add(
                                        "flexVertical",
                                    )
                                    contenedorData.appendChild(contenedorNombrePublico)

                                    const tituluNombrePublico = document.createElement("p")
                                    tituluNombrePublico.textContent = `Nombre público`
                                    contenedorNombrePublico.appendChild(tituluNombrePublico)

                                    const titulo = document.createElement("p")
                                    titulo.classList.add(
                                        "negrita")
                                    titulo.textContent = tituloPublico
                                    contenedorNombrePublico.appendChild(titulo)


                                    const disponibilidadUI = document.createElement("p")
                                    disponibilidadUI.classList.add(
                                    )
                                    disponibilidadUI.textContent = diccionario.disponibilidad[disponibilidadIDV]
                                    contenedorData.appendChild(disponibilidadUI)


                                    if (disponibilidadIDV === "variable") {

                                        const info = document.createElement("p")
                                        info.classList.add(
                                        )
                                        info.textContent = `Este servicio tiene una disponibilidad limitada. Es por eso que si selecciona este servicio, nos pondremos en contacto con el titular de la reserva en las próximas horas para confirmarle la disponibilidad del servicio para su reserva.`
                                        contenedorData.appendChild(info)
                                    }

                                    const precioUI = document.createElement("p")
                                    precioUI.classList.add(
                                        "negrita"
                                    )
                                    precioUI.textContent = precio + "$"
                                    contenedorData.appendChild(precioUI)

                                    if (duracionIDV === "rango") {
                                        const contenedorDuracion = document.createElement("div")
                                        contenedorDuracion.classList.add(
                                            "flexVertical",

                                        )
                                        contenedorData.appendChild(contenedorDuracion)

                                        const info = document.createElement("p")
                                        info.classList.add("negrita")
                                        info.textContent = `Servicio disponible solo desde ${fechaInicio} hata ${fechaFinal}. Ambas fechas incluidas.`
                                        contenedorDuracion.appendChild(info)

                                    }
                                    const definicionUI = document.createElement("p")
                                    definicionUI.classList.add(
                                    )
                                    definicionUI.textContent = definicion
                                    contenedorData.appendChild(definicionUI)

                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6"
                                    )
                                    const botonIr = document.createElement("a")
                                    botonIr.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonIr.textContent = "Ir al servicio"
                                    botonIr.setAttribute("href", "/administracion/servicios/servicio:" + servicioUID)
                                    botonIr.setAttribute("target", "_blank")
                                    contenedorBotones.appendChild(botonIr)

                                    const botonEliminar = document.createElement("div")
                                    botonEliminar.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonEliminar.textContent = "Eliminar servicio de la reserva 111"
                                    botonEliminar.addEventListener("click", () => {
                                        this.
                                            eliminarServicio
                                            .ui({
                                                instanciaUID_contenedorServicios,
                                                servicioUID_enReserva,
                                                nombreInterno
                                            })
                                    })
                                    contenedorBotones.appendChild(botonEliminar)

                                    if (configuracionVista === "publica") {
                                    } else {
                                        servicioUI.appendChild(contenedorBotones)
                                    }



                                    return servicioUI
                                },
                                eliminarComplementoDeAlojamiento: {
                                    ui: async function (data) {
                                        const complementoUI = data.complementoUI
                                        const apartamentoIDV = data.apartamentoIDV
                                        const instanciaUID_contenedorComplementosDeAlojamiento = data.instanciaUID_contenedorComplementosDeAlojamiento
                                        const complementoUID_enReserva = data.complementoUID_enReserva

                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        const instanciaUID_eliminarServicio = ui.getAttribute("instanciaUID")
                                        const constructor = ui.querySelector("[componente=constructor]")

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Confirmar eliminar el complemento de alojamiento ${complementoUI} de la reserva`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = "Var a eliminar el complemento de alojamiento de la reserva, ¿Estas de acuerdo?"

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Comfirmar la eliminacion"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarEliminar({
                                                complementoUID_enReserva,
                                                instanciaUID_eliminarServicio,
                                                instanciaUID_contenedorComplementosDeAlojamiento,
                                                apartamentoIDV
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"
                                        document.querySelector("main").appendChild(ui)

                                    },
                                    confirmarEliminar: async function (data) {
                                        const complementoUID_enReserva = String(data.complementoUID_enReserva)
                                        const apartamentoIDV = data.apartamentoIDV
                                        const instanciaUID_eliminarServicio = data.instanciaUID_eliminarServicio
                                        const instanciaUID_contenedorComplementosDeAlojamiento = data.instanciaUID_contenedorComplementosDeAlojamiento

                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarServicio}"]`)
                                        const contenedor = ui.querySelector("[componente=constructor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Eliminado servicio en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/complementosDeAlojamiento/eliminarComplementoDeAlojamientoEnReserva",
                                            complementoUID_enReserva
                                        }


                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()

                                            const selectorContenedor = document.querySelector(`[instanciaUID="${instanciaUID_contenedorComplementosDeAlojamiento}"] [apartamentoIDV="${apartamentoIDV}"] [contenedor=complementos]`)
                                            if (!selectorContenedor) {
                                                return
                                            }

                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            selectorContenedor.querySelector(`[complentoUID_enReserva="${complementoUID_enReserva}"]`)?.remove()

                                            const selectorContenedoresDeServiciosRenderizados = selectorContenedor.querySelectorAll("[complentoUID_enReserva]")
                                            if (selectorContenedoresDeServiciosRenderizados.length === 0) {
                                                const infoSinEnlaces = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.complementosDeAlojamiento.componentesUI.infoSinComplemento()
                                                selectorContenedor.appendChild(infoSinEnlaces)
                                            }
                                        }

                                    },

                                },
                                infoSinComplemento: () => {
                                    const info = document.createElement("p")
                                    info.classList.add("flexVertical", "textoCentrado", "padding14")
                                    info.setAttribute("componente", "sinInfo")
                                    info.textContent = "No hay ningún complemento en este alojamiento."
                                    return info
                                },
                                complementoUI: (data) => {
                                    const complementoUID = data.complementoUID
                                    const complementoUI = data.complementoUI
                                    const definicion = data.definicion
                                    const precio = data.precio
                                    const tipoPrecio = data.tipoPrecio
                                    const apartamentoIDV = data.apartamentoIDV


                                    const renderizaPrecio = (data) => {
                                        const precio = data.precio
                                        const tipoPrecio = data.tipoPrecio
                                        if (tipoPrecio === "fijoPorReserva") {
                                            return `${precio}$ Total`
                                        } else if (tipoPrecio === "porNoche") {
                                            return `${precio}$ / Por noche`
                                        }
                                    }


                                    const ui = document.createElement("div")
                                    ui.setAttribute("complentoUID_enReserva", complementoUID)
                                    ui.setAttribute("apartamentoIDV", apartamentoIDV)
                                    ui.style.alignItems = "start"
                                    ui.classList.add(
                                        "gridHorizontal2C-1fr-min",
                                        "gap6",
                                        "padding6",
                                        "borderRadius12",
                                        "backgroundGrey1"
                                    )

                                    const dataCont = document.createElement("div")
                                    dataCont.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "padding6",
                                    )
                                    ui.appendChild(dataCont)


                                    const n = document.createElement("p")
                                    n.classList.add(
                                        "negrita",
                                    )
                                    n.textContent = complementoUI
                                    dataCont.appendChild(n)


                                    const p = document.createElement("p")
                                    p.classList.add(
                                        //   "padding14"
                                    )
                                    p.textContent = renderizaPrecio({
                                        tipoPrecio,
                                        precio
                                    })
                                    dataCont.appendChild(p)


                                    const d = document.createElement("p")
                                    d.classList.add(
                                        //  "padding14"
                                    )
                                    d.textContent = definicion
                                    dataCont.appendChild(d)

                                    const b = document.createElement("div")
                                    b.style.borderRadius = "10px"
                                    b.classList.add("botonV1")
                                    b.addEventListener("click", (e) => {
                                        const instanciaUID_contenedorComplementosDeAlojamiento = e.target.closest("[componente=contenedorDinamico]").querySelector("[componente=complementosDeAlojamiento]").getAttribute("instanciaUID")
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.complementosDeAlojamiento.componentesUI.eliminarComplementoDeAlojamiento.ui({
                                            complementoUI,
                                            instanciaUID_contenedorComplementosDeAlojamiento,
                                            complementoUID_enReserva: complementoUID,
                                            apartamentoIDV
                                        })
                                    })
                                    b.textContent = "Eliminar"
                                    ui.appendChild(b)



                                    return ui
                                }
                            },

                        },
                        enlacesDePago: {
                            arranque: async (e) => {
                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                const contenedorEnlacesDePago = document.createElement("div")
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()
                                contenedorEnlacesDePago.classList.add(
                                    "padding6",
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorEnlacesDePago.setAttribute("instanciaUID", instanciaUID)
                                contenedorEnlacesDePago.setAttribute("componente", "categoriaEnlacesDePago")
                                contenedorEnlacesDePago.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(contenedorEnlacesDePago)

                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                    reservaUID: String(reservaUID),
                                    capas: [
                                        "enlacesDePago"
                                    ]
                                }


                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[componente=categoriaEnlacesDePago][instanciaUID="${instanciaUID}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null
                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }
                                if (respuestaServidor?.ok) {
                                    const contenedorInformacionGlobal = document.createElement("div")
                                    contenedorInformacionGlobal.classList.add("administracion_reservas_detallesReserva_contenedorEnlacesDePago")

                                    const infoGlobal = document.createElement("div")
                                    infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                                    infoGlobal.textContent = `Aquí tienes los enlaces de pago generados para realizar pagos para esta reserva a través de la pasarela.`

                                    contenedorEnlacesDePago.appendChild(contenedorInformacionGlobal)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReserva_enlacesDePago_bloqueBotones")

                                    const botonCrearPagoManual = document.createElement("div")
                                    botonCrearPagoManual.classList.add("detallesReserva_transacciones_botonV1")
                                    botonCrearPagoManual.textContent = "Crear un enlace de pago"
                                    botonCrearPagoManual.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.crearEnlace.UI(instanciaUID)
                                    })
                                    bloqueBotones.appendChild(botonCrearPagoManual)
                                    contenedorInformacionGlobal.appendChild(bloqueBotones)

                                    const contenedorListaEnlacesDePagos = document.createElement("div")
                                    contenedorListaEnlacesDePagos.classList.add("administracion_reservas_detallesReserva_contenedorListaEnlacesDePago")
                                    contenedorListaEnlacesDePagos.setAttribute("componente", "contenedorListaEnlacesDePago")
                                    contenedorEnlacesDePago.appendChild(contenedorListaEnlacesDePagos)


                                    instanciaDestino.style.justifyContent = "flex-start";
                                    const enlacesDePagoGenerados = respuestaServidor?.ok.enlacesDePago
                                    if (enlacesDePagoGenerados.length === 0) {
                                        const infoSinEnlaces = document.createElement("div")
                                        infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                                        infoSinEnlaces.setAttribute("componente", "contenedorInfoSinEnlaces")
                                        infoSinEnlaces.textContent = "No hay ningún enlace de pago generado"
                                        contenedorDinamico.appendChild(infoSinEnlaces)
                                    }
                                    if (enlacesDePagoGenerados.length > 0) {
                                        const contenedorEnlacesDePago = instanciaDestino.querySelector(`[componente=contenedorListaEnlacesDePago]`)

                                        for (const detallesDelEnlace of enlacesDePagoGenerados) {

                                            const metadatos = {
                                                enlaceUID: detallesDelEnlace.enlaceUID,
                                                nombreEnlace: detallesDelEnlace.nombreEnlace,
                                                enlace: detallesDelEnlace.enlace,
                                                cantidad: detallesDelEnlace.cantidad,
                                                estadoPago: detallesDelEnlace.estadoPagoIDV,
                                                instanciaUID: instanciaUID
                                            }
                                            const enlaceUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.enlaceUI(metadatos)
                                            contenedorEnlacesDePago.appendChild(enlaceUI)
                                        }
                                    }

                                }
                            },
                            eliminarEnlace: {
                                UI: async (datosElimiacion) => {
                                    document.body.style.overflow = "hidden";
                                    const enlaceUID = datosElimiacion.enlaceUID
                                    const instanciaUID = datosElimiacion.instanciaUID
                                    const advertenciaInmersivaIU = document.createElement("div")
                                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                                    const tituloCancelarReserva = document.createElement("p")
                                    tituloCancelarReserva.classList.add("tituloGris", "padding6")
                                    tituloCancelarReserva.textContent = "Eliminar enlace de pago"
                                    contenidoAdvertenciaInmersiva.appendChild(tituloCancelarReserva)
                                    const bloqueBloqueoApartamentos = document.createElement("div")
                                    bloqueBloqueoApartamentos.classList.add("flexVertical", "gap6")
                                    const tituloBloquoApartamentos = document.createElement("div")
                                    tituloBloquoApartamentos.classList.add("padding6", "textoCentrado")
                                    tituloBloquoApartamentos.textContent = "¿Quieres confirmar la eliminación de este enlace de pago? Sus implicaciones serán inmediatas y el enlace de acceso temporal pasará a ser obsoleto."
                                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                                    contenidoAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add(
                                        "flexVertical",
                                        "gap6"
                                    )
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonCancelar.textContent = "Confirmar y eliminar enlace"
                                    botonCancelar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.eliminarEnlace.confirmar({
                                            enlaceUID,
                                            instanciaUID
                                        })
                                    })
                                    bloqueBotones.appendChild(botonCancelar)
                                    const botonVolverAlEnlace = document.createElement("div")
                                    botonVolverAlEnlace.classList.add("detallesReservaCancelarBoton")
                                    botonVolverAlEnlace.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonVolverAlEnlace.textContent = "Volver a los detalles del enlace"
                                    botonVolverAlEnlace.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.desplegarUI)

                                    const botonCancelarProcesoCancelacion = document.createElement("div")
                                    botonCancelarProcesoCancelacion.classList.add("botonV1")
                                    botonCancelarProcesoCancelacion.textContent = "Cancelar la eliminación del enlace"
                                    botonCancelarProcesoCancelacion.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                                    contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)
                                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                                    document.querySelector("main").appendChild(advertenciaInmersivaIU)
                                },
                                confirmar: async (datosElimiacion) => {
                                    const instanciaUID_pantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const mensaje = "Elimiando enlace de pago..."
                                    const datosPantallaSuperpuesta = {
                                        instanciaUID: instanciaUID_pantallaCarga,
                                        mensaje: mensaje
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                    const enlaceUID = datosElimiacion.enlaceUID
                                    const instanciaUID = datosElimiacion.instanciaUID
                                    const transaccion = {
                                        zona: "administracion/enlacesDePago/eliminarEnlace",
                                        enlaceUID: String(enlaceUID)
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaCarga}"]`)
                                    if (!instanciaRenderizada) { return }
                                    instanciaRenderizada.remove()
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const contenedorEspacioEnlacesDePago = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        document.querySelector(`[enlacePagoUID="${enlaceUID}"]`)?.remove()
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const contenedorEnlacesDePago = contenedorEspacioEnlacesDePago.querySelector("[componente=contenedorListaEnlacesDePago]")
                                        const selectorEnlaces = contenedorEspacioEnlacesDePago.querySelectorAll("[enlacePagoUID]")
                                        if (selectorEnlaces.length === 0) {
                                            if (contenedorEspacioEnlacesDePago) {
                                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                                const infoSinEnlaces = document.createElement("div")
                                                infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                                                infoSinEnlaces.setAttribute("componente", "contenedorInfoSinEnlaces")
                                                infoSinEnlaces.textContent = "No hay ningún enlace de pago generado"
                                                contenedorDinamico.appendChild(infoSinEnlaces)
                                            }
                                        }
                                    }
                                }
                            },
                            crearEnlace: {
                                UI: async (instanciaUID) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const advertenciaInmersivaIU = document.createElement("div")
                                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                                    contenidoAdvertenciaInmersiva.setAttribute("espacio", "formularioCrearEnlaceDePago")
                                    const titulo = document.createElement("p")
                                    titulo.classList.add("tituloGris", "padding14")
                                    titulo.textContent = "Generar enlace de pago"
                                    contenidoAdvertenciaInmersiva.appendChild(titulo)
                                    const bloque = document.createElement("div")
                                    bloque.classList.add(
                                        "flexVertical",
                                        "gap6"
                                    )
                                    let info = document.createElement("div")
                                    info.classList.add("padding14")
                                    info.textContent = `
                            Genera un enlace de pago para poder enviarlo a un cliente y que realice el pago de la reserva. No es obligatorio escribir un nombre, pero sí recomendable, por si necesita acordarse de por qué genera este enlace. Si no define ningún nombre, este se llamará "Enlace de pago de la reserva ${reservaUID}". Este es el nombre automático que tendrá este enlace si no define un nombre en específico. Recuerde que todos los enlaces generados y su gestión centralizada la puede encontrar en el panel de administración, en el botón de Enlaces de pago desde el menú administración o en su reserva correspondiente dentro del apartado enlaces de pago.`
                                    bloque.appendChild(info)
                                    let campo = document.createElement("input")
                                    campo.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campo.setAttribute("campo", "nombreEnlace")
                                    campo.placeholder = "Escribe un nombre para el nuevo enlace si quiere"
                                    bloque.appendChild(campo)
                                    info = document.createElement("div")
                                    info.classList.add("padding14")
                                    info.textContent = `Determina la cantidad de pago del enlace, recuerda que los precios de cobro deben de escribirse con dos decimales separados por punto. Por ejemplo, para crear un enlace de pago de 35 dólares escribe 35.00`
                                    bloque.appendChild(info)
                                    campo = document.createElement("input")
                                    campo.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campo.classList.add("negrita")
                                    campo.setAttribute("campo", "cantidad")
                                    campo.placeholder = "Cantidad(Obligatorio)"
                                    bloque.appendChild(campo)
                                    info = document.createElement("div")
                                    info.classList.add("padding14")
                                    info.textContent = `Determina el tiempo de vigencia del enlace. Por defecto, el sistema aplica 72h si no especificas una vigencia concreta. Pasada la vigencia, el enlace ya no puede realizar el cobro y desaparece.`
                                    bloque.appendChild(info)
                                    campo = document.createElement("input")
                                    campo.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campo.setAttribute("campo", "horasCaducidad")
                                    campo.placeholder = "Caducidad en horas, por defecto, 72h."
                                    bloque.appendChild(campo)
                                    const campoDescripcion = document.createElement("textarea")
                                    campoDescripcion.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campoDescripcion.setAttribute("campo", "descripcion")
                                    campoDescripcion.placeholder = "No es obligatorio, pero escriba una descripción si quieres para definir aún más a este enlace si lo necesitas."

                                    contenidoAdvertenciaInmersiva.appendChild(bloque)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add(
                                        "flexVertical",
                                        "gap10"
                                    )
                                    const botonConfirmar = document.createElement("div")
                                    botonConfirmar.classList.add("botonV1BlancoIzquierda")
                                    botonConfirmar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonConfirmar.textContent = "Confirmar y crear enlace"
                                    botonConfirmar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.crearEnlace.confirmar(instanciaUID)
                                    })
                                    bloqueBotones.appendChild(botonConfirmar)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cancelar la creación del enlace"
                                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    bloqueBotones.appendChild(botonCancelar)
                                    contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)
                                    const contenedorGlobal = document.createElement("div")
                                    contenedorGlobal.classList.add("detallesReserva_enlaceDePago_contenedorGlobal")
                                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                                    document.querySelector("main").appendChild(advertenciaInmersivaIU)
                                },
                                confirmar: async (instanciaUID) => {
                                    const instanciaUID_pantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const mensaje = "Creando enlace..."
                                    const datosPantallaSuperpuesta = {
                                        instanciaUID: instanciaUID_pantallaCarga,
                                        mensaje: mensaje
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const nombreEnlace = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=nombreEnlace]")
                                    const cantidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=cantidad]")
                                    const horasCaducidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=horasCaducidad]")
                                    const transaccion = {
                                        zona: "administracion/enlacesDePago/crearNuevoEnlace",
                                        reservaUID: reservaUID,
                                        nombreEnlace: nombreEnlace.value,
                                        cantidad: cantidad.value,
                                        horasCaducidad: horasCaducidad.value,
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pantallaCarga}"]`)

                                    if (!instanciaRenderizada) { return }
                                    instanciaRenderizada.remove()
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        const seleccionarInstancia = document.querySelector(`[componente=categoriaEnlacesDePago][instanciaUID="${instanciaUID}"] [componente=contenedorListaEnlacesDePago]`)
                                        if (seleccionarInstancia) {
                                            const metadatos = {
                                                enlaceUID: respuestaServidor.enlaceUID,
                                                nombreEnlace: respuestaServidor.nombreEnlace,
                                                enlace: respuestaServidor.enlace,
                                                cantidad: respuestaServidor.cantidad,
                                                estadoPago: "noPagado",
                                                instanciaUID: instanciaUID
                                            }
                                            const enlaceUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.enlaceUI(metadatos)
                                            const primerElemento = seleccionarInstancia.firstChild;
                                            seleccionarInstancia.insertBefore(enlaceUI, primerElemento);
                                            document.querySelector("[componente=contenedorInfoSinEnlaces]")?.remove()
                                        }
                                    }
                                }
                            },
                            acutalizarEnlace: async () => {
                                const botonActualizar = document.querySelector("[componente=botonActualizarEnlace]")
                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                const nombreEnlace = document.querySelector("[campo=nombreEnlace]")
                                const descripcion = document.querySelector("[campo=descripcion]")
                                botonActualizar.textContent = "Actualizando, espera..."
                                botonActualizar.style.pointerEvents = "none"
                                const transaccion = {
                                    zona: "administracion/enlacesDePago/modificarEnlace",
                                    enlaceUID: Number(reservaUID),
                                    nombreEnlace: nombreEnlace.value,
                                    descripcion: descripcion.value
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                if (respuestaServidor?.error) {
                                    const advertenciasInmersivasRenderizadas = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                    advertenciasInmersivasRenderizadas.forEach((advertencia) =>
                                        advertencia.remove()
                                    )
                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    botonActualizar.textContent = "Actualizar enlace de pago"
                                    botonActualizar.removeAttribute("style")
                                }
                            },
                            enlaceUI: (metadatos) => {
                                const enlaceUID = metadatos.enlaceUID
                                const nombreEnlace = metadatos.nombreEnlace
                                const enlace = metadatos.enlace
                                const cantidad = metadatos.cantidad
                                const estadoPago = metadatos.estadoPago
                                const instanciaUID = metadatos.instanciaUID
                                const bloqueDatosGenerales = document.createElement("div")
                                bloqueDatosGenerales.classList.add("detallesReserva_enlacesDePago_bloqueDatosGenerales")
                                bloqueDatosGenerales.setAttribute("enlacePagoUID", enlaceUID)
                                const contenedorDatosEnlace = document.createElement("div")
                                contenedorDatosEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_contenedorDatosEnlace")

                                let bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                let bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.textContent = "Enlace UID"
                                bloqueInfoDato.appendChild(bloqueInfo)
                                let bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.textContent = enlaceUID
                                bloqueInfoDato.appendChild(bloqueDato)
                                contenedorDatosEnlace.appendChild(bloqueInfoDato)

                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.textContent = "Cantidad"
                                bloqueInfoDato.appendChild(bloqueInfo)
                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.textContent = cantidad + "$"
                                bloqueInfoDato.appendChild(bloqueDato)
                                contenedorDatosEnlace.appendChild(bloqueInfoDato)

                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.textContent = "Nombre del enlace"
                                bloqueInfoDato.appendChild(bloqueInfo)
                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.textContent = nombreEnlace
                                bloqueInfoDato.appendChild(bloqueDato)
                                contenedorDatosEnlace.appendChild(bloqueInfoDato)

                                bloqueInfoDato = document.createElement("div")
                                bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueInfo = document.createElement("div")
                                bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                bloqueInfo.classList.add("negrita")
                                bloqueInfo.textContent = "Estado del pago"
                                bloqueInfoDato.appendChild(bloqueInfo)
                                bloqueDato = document.createElement("div")
                                bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                bloqueDato.textContent = estadoPago
                                bloqueInfoDato.appendChild(bloqueDato)
                                contenedorDatosEnlace.appendChild(bloqueInfoDato)
                                bloqueDatosGenerales.appendChild(contenedorDatosEnlace)
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("administracion_reservas_detallesReservas_enlacesDePago_contenedorBotones")
                                const botonIrAlEnlace = document.createElement("a")
                                botonIrAlEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                botonIrAlEnlace.textContent = "Ir al enlace"
                                botonIrAlEnlace.setAttribute("href", "/pagos/" + enlace)
                                botonIrAlEnlace.setAttribute("target", "_blank")
                                contenedorBotones.appendChild(botonIrAlEnlace)
                                const botonCopiarEnlace = document.createElement("div")
                                botonCopiarEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                botonCopiarEnlace.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonCopiarPulsacion")
                                botonCopiarEnlace.textContent = "Copiar URL al portapapeles"
                                botonCopiarEnlace.addEventListener("click", () => {
                                    const enlaceURL = window.location.hostname + "/pagos/" + enlace
                                    navigator.clipboard.writeText(enlaceURL)
                                        .then(() => {
                                        })
                                        .catch((err) => {
                                        });
                                })
                                contenedorBotones.appendChild(botonCopiarEnlace)
                                const botonEliminar = document.createElement("div")
                                botonEliminar.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                botonEliminar.textContent = "Eliminar enlaces"

                                botonEliminar.addEventListener("click", () => {
                                    const datosElimiacion = {
                                        enlaceUID: enlaceUID,
                                        instanciaUID: instanciaUID,
                                    }
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.enlacesDePago.eliminarEnlace.UI(datosElimiacion)
                                })
                                contenedorBotones.appendChild(botonEliminar)
                                bloqueDatosGenerales.appendChild(contenedorBotones)
                                return bloqueDatosGenerales
                            }
                        },
                        transacciones: {
                            arranque: async () => {

                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const advertenciasInmersivasRenderizadas = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                advertenciasInmersivasRenderizadas.forEach((advertencia) =>
                                    advertencia.remove()
                                )
                                const instanciaUID_contenedorDinamicoTransacciones = casaVitini.utilidades.codigoFechaInstancia()
                                const contenedorListaDePagos = document.createElement("div")
                                contenedorListaDePagos.setAttribute("class", "administracion_reservas_detallesReservas_transacciones_contenedorListaDePagos")
                                contenedorListaDePagos.setAttribute("instanciaUID", instanciaUID_contenedorDinamicoTransacciones)
                                contenedorListaDePagos.setAttribute("contenedorID", "transacciones")

                                const spinnerSimple = casaVitini.ui.componentes.spinnerSimple()
                                contenedorListaDePagos.appendChild(spinnerSimple)

                                contenedorDinamico.appendChild(contenedorListaDePagos)
                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                    reservaUID: reservaUID,
                                    capas: [
                                        "detallesPagos",
                                    ]
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[contenedorID=transacciones][instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null
                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)

                                }
                                if (respuestaServidor?.ok) {
                                    instanciaDestino.style.justifyContent = "flex - start";
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.listaDePagos({
                                        detallesPagos: respuestaServidor,
                                        instanciaUID_contenedorDinamicoTransacciones
                                    })

                                }
                            },
                            UI: {
                                listaDePagos: async (data) => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const listaDePagos = data.detallesPagos.ok.detallesPagos
                                    const totalReserva = listaDePagos.totalReserva
                                    const totalPagado = listaDePagos.totalPagado
                                    const faltantePorPagar = listaDePagos.faltantePorPagar
                                    const instanciaUID_contenedorDinamicoTransacciones = data.instanciaUID_contenedorDinamicoTransacciones
                                    const totalReembolsado = listaDePagos.totalReembolsado
                                    const porcentajeReembolsado = listaDePagos.porcentajeReembolsado
                                    const porcentajePagado = listaDePagos.porcentajePagado
                                    const pagos = listaDePagos.pagos //array
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("administracion_reservas_detallesReserva_contenedorListaDePagos")
                                    const titulo = document.createElement("p")
                                    titulo.classList.add("detallesReserva_reembolso_tituloGlobal")
                                    titulo.textContent = "Transacciones"
                                    contenedorAdvertenciaInmersiva.appendChild(titulo)
                                    const infoGlobal = document.createElement("div")
                                    infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                                    infoGlobal.textContent = `Estos son los de pagos de esta reserva. Los pagos pueden realizarse por la pasarela o, si realiza un pago en efectivo, deberá añadir un pago manual desde el botón correspondiente. Para ver los detalles de un pago y sus reembolsos si los hubiera pulsado en un pago. Para realizar un reembolso, entra en los detalles de un pago y desde ahí podrás realizar el reembolso.`
                                    contenedorAdvertenciaInmersiva.appendChild(infoGlobal)
                                    const bloqueTransacciones = document.createElement("div")
                                    bloqueTransacciones.classList.add("detallesReserva_transacciones_bloqueGlobal")
                                    bloqueTransacciones.setAttribute("contenedor", "transaccionesUI")
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReserva_transacciones_bloqueBotones")
                                    const botonEnlacesDePago = document.createElement("div")
                                    botonEnlacesDePago.classList.add("detallesReserva_transacciones_botonV1")
                                    botonEnlacesDePago.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.enlacesDePago)
                                    botonEnlacesDePago.textContent = "Crear un enlace de pago"

                                    const botonCrearPagoManual = document.createElement("div")
                                    botonCrearPagoManual.classList.add("botonV1BlancoIzquierda")
                                    botonCrearPagoManual.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.UI()
                                    })
                                    botonCrearPagoManual.textContent = "Crear pago"
                                    bloqueBotones.appendChild(botonCrearPagoManual)
                                    const botonCerrar = document.createElement("div")
                                    botonCerrar.classList.add("detallesReserva_transacciones_botonV1")
                                    botonCerrar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    botonCerrar.textContent = "Cerrar"

                                    bloqueTransacciones.appendChild(bloqueBotones)
                                    const bloqueDatosGenerales = document.createElement("div")
                                    bloqueDatosGenerales.classList.add("detallesReserva_transacciones_bloqueDatosGenerales")

                                    let bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    let bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Total de la reserva"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    let bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.setAttribute("componentePago", "totalReserva")
                                    bloqueDato.textContent = totalReserva + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDatosGenerales.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.setAttribute("componentePago", "porcentajePagado")
                                    bloqueInfo.textContent = `Total pagado (${porcentajePagado})`
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.setAttribute("componentePago", "totalPagado")
                                    bloqueDato.textContent = totalPagado + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDatosGenerales.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.setAttribute("componentePago", "porcentajeReembolsado")
                                    bloqueInfo.textContent = `Total reembolsado (${porcentajeReembolsado})`
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.setAttribute("componentePago", "totalReembolsado")
                                    bloqueDato.textContent = totalReembolsado + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDatosGenerales.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Faltante por pagar"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.setAttribute("componentePago", "faltantePorPagar")
                                    bloqueDato.textContent = faltantePorPagar + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDatosGenerales.appendChild(bloqueInfoDato)
                                    bloqueTransacciones.appendChild(bloqueDatosGenerales)
                                    if (pagos.length === 0) {
                                        const infoNoPagoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.infoNoPagos()
                                        bloqueTransacciones.appendChild(infoNoPagoUI)

                                    }
                                    if (pagos.length > 0) {
                                        const bloqueListaDePagos = document.createElement("div")
                                        bloqueListaDePagos.classList.add("reservaDetalles_transacciones_bloqueListaDePagos")
                                        bloqueListaDePagos.setAttribute("contenedor", "listaDePagos")
                                        for (const detallesDelPago of pagos) {
                                            const pagoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.pagoUI(detallesDelPago)
                                            bloqueListaDePagos.appendChild(pagoUI)
                                        }
                                        bloqueTransacciones.appendChild(bloqueListaDePagos)
                                    }
                                    const enlacePagoUIRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                    enlacePagoUIRenderizada.innerHTML = null
                                    contenedorAdvertenciaInmersiva.appendChild(bloqueTransacciones)
                                    enlacePagoUIRenderizada.appendChild(contenedorAdvertenciaInmersiva)
                                },
































































































































                                pagoUI: (metadatos) => {

                                    const pagoUID = metadatos.pagoUID
                                    const plataformaDePagoIDV = metadatos.plataformaDePagoIDV
                                    const pagoUIDPasarela = metadatos.pagoUIDPasarela
                                    const tarjetaDigitos = metadatos.tarjetaDigitos
                                    const fechaPago = metadatos.fechaPago
                                    const fechaPagoTZ_ISO = metadatos.fechaPagoTZ_ISO
                                    const tarjeta = metadatos.tarjeta
                                    const cantidad = metadatos.cantidad
                                    const sumaDeLoReembolsado = metadatos.sumaDeLoReembolsado
                                    const reembolsado = metadatos.reembolsado
                                    const chequeUID = metadatos.chequeUID
                                    const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones

                                    const fechaPagoUTC_objeto = fechaPago.split("T")
                                    const fechaUTC_array = fechaPagoUTC_objeto[0].split("-")
                                    const horaUTC_array = fechaPagoUTC_objeto[1].split("-")[0]
                                    const fechaPagoUTC_humana = `${fechaUTC_array[2]}/${fechaUTC_array[1]}/${fechaUTC_array[0]} ${horaUTC_array}`

                                    const fechaPagoTZ_objeto = fechaPagoTZ_ISO.split("T")
                                    const fechaTZ_array = fechaPagoTZ_objeto[0].split("-")
                                    const horaTZ_array = fechaPagoTZ_objeto[1].split("-")[0]
                                    const fechaPagoTZ_humana = `${fechaTZ_array[2]}/${fechaTZ_array[1]}/${fechaTZ_array[0]} ${horaTZ_array}`

                                    const plataformaDePagoUI = {
                                        efectivo: "Efectivo",
                                        transferenciaBancaria: "Transferencia bancaria",
                                        tarjeta: "Tarteja TPV",
                                        pasarela: "Pasarela de pago",
                                        cheque: "Cheque"
                                    }

                                    const bloqueDetallesDelPago = document.createElement("div")
                                    bloqueDetallesDelPago.classList.add("flexVertical", "gap10", "borderRadius10", "backgroundGrey1", "padding10", "comportamientoBoton")
                                    bloqueDetallesDelPago.setAttribute("pagoUID", pagoUID)
                                    bloqueDetallesDelPago.addEventListener("click", () => {
                                        const metadatos = {
                                            pagoUID: pagoUID,
                                            instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.detallesDelPago.UI(metadatos)
                                    })

                                    let bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    let bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Identificador del pago (pagoUID)"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    let bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = pagoUID
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Plataforma de pago"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = plataformaDePagoUI[plataformaDePagoIDV]
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.textContent = "Identificador del pago dentro de la pasarela"
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = pagoUIDPasarela
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    if (plataformaDePagoIDV === "pasarela") {
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                    }

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Tarjeta de crédito"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = `**** **** **** ${tarjetaDigitos} (${tarjeta})`
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    if (plataformaDePagoIDV === "pasarela") {
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                    }

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Fecha del pago en UTC"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = fechaPagoUTC_humana
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Fecha del pago en hora local"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = fechaPagoTZ_humana
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    bloqueInfoDato = document.createElement("div")
                                    bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Cantidad cobrada en dolares"
                                    bloqueInfoDato.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = cantidad + "$"
                                    bloqueInfoDato.appendChild(bloqueDato)
                                    bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                    const bloqueSumaDeLoReembolsado = document.createElement("div")
                                    bloqueSumaDeLoReembolsado.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Resumen de reembolsos"
                                    bloqueSumaDeLoReembolsado.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = `${sumaDeLoReembolsado}$, reembolsado ${reembolsado}`
                                    bloqueSumaDeLoReembolsado.appendChild(bloqueDato)
                                    if (sumaDeLoReembolsado) {
                                        bloqueDetallesDelPago.appendChild(bloqueSumaDeLoReembolsado)
                                    }

                                    const bloqueChequeUID = document.createElement("div")
                                    bloqueChequeUID.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                    bloqueInfo = document.createElement("div")
                                    bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                    bloqueInfo.classList.add("negrita")
                                    bloqueInfo.textContent = "Identificador del cheque"
                                    bloqueChequeUID.appendChild(bloqueInfo)
                                    bloqueDato = document.createElement("div")
                                    bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                    bloqueDato.textContent = chequeUID
                                    bloqueChequeUID.appendChild(bloqueDato)
                                    if (chequeUID) {
                                        bloqueDetallesDelPago.appendChild(bloqueChequeUID)
                                    }
                                    return bloqueDetallesDelPago
                                },
                                infoNoPagos: () => {
                                    const infoNoPagos = document.createElement("div")
                                    infoNoPagos.classList.add("reservaDetalles_transacciones_textoV1")
                                    infoNoPagos.setAttribute("contenedor", "infoNoPagos")
                                    infoNoPagos.textContent = "Esta reserva no tiene ningún pago.Los pagos que se realicen por la pasarela de pagos se mostrarán automáticamente aquí.Sin embargo, si ha cobrado esta reserva, por ejemplo, en efectivo o con un TPV, debería de añadir un pago manual.No es obligatorio añadir un pago manual, pero si quiere tener un seguimiento centralizado de todos los pagos en esta reserva, tiene esa opción."
                                    return infoNoPagos
                                }
                            },

                            detallesDelPago: {
                                UI: async (metadatos) => {
                                    const pagoUID = metadatos.pagoUID
                                    const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones

                                    document.body.style.overflow = "hidden";
                                    const instanciaUIDDetalleDelPago = casaVitini.utilidades.codigoFechaInstancia()
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const mensajeSpinner = "Esperando al servidor..."
                                    const spinnerPorRenderizar = casaVitini.ui.componentes.spinner(mensajeSpinner)
                                    const advertenciaInmersivaIU = document.createElement("div")
                                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("instanciaUID", instanciaUIDDetalleDelPago)
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                                    contenidoAdvertenciaInmersiva.setAttribute("espacio", "detallesDelPago")
                                    contenidoAdvertenciaInmersiva.appendChild(spinnerPorRenderizar)
                                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                                    document.querySelector("main").appendChild(advertenciaInmersivaIU)
                                    const ocultaPanales = () => {
                                        const selectorContenedores = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)
                                        const contenedorNuevoReembolso = selectorContenedores.querySelector("[contenedor=nuevoReembolso]")
                                        const contenedorEliminarPago = selectorContenedores.querySelector("[contenedor=eliminarPago]")
                                        contenedorNuevoReembolso.innerHTML = null
                                        contenedorNuevoReembolso.removeAttribute("style")
                                        contenedorEliminarPago.innerHTML = null
                                        contenedorEliminarPago.removeAttribute("style")
                                    }
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/obtenerDetallesDelPago",
                                        pagoUID: String(pagoUID)
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const detallesDelPago = respuestaServidor.detallesDelPago
                                        const plataformaDePagoIDV = detallesDelPago.plataformaDePagoIDV
                                        const pagoUID = detallesDelPago.pagoUID
                                        const pagoUIDPasarela = detallesDelPago.pagoUIDPasarela
                                        const tarjetaDigitos = detallesDelPago.tarjetaDigitos
                                        const fechaPagoUTC_ISO = detallesDelPago.fechaPagoUTC_ISO
                                        const fechaPagoTZ_ISO = detallesDelPago.fechaPagoTZ_ISO

                                        const fechaPagoUTC_objeto = fechaPagoUTC_ISO.split("T")
                                        const fechaUTC_array = fechaPagoUTC_objeto[0].split("-")
                                        const horaUTC_array = fechaPagoUTC_objeto[1].split("-")[0]
                                        const fechaPagoUTC_humana = `${fechaUTC_array[2]}/${fechaUTC_array[1]}/${fechaUTC_array[0]} ${horaUTC_array}`

                                        const fechaPagoTZ_objeto = fechaPagoTZ_ISO.split("T")
                                        const fechaTZ_array = fechaPagoTZ_objeto[0].split("-")
                                        const horaTZ_array = fechaPagoTZ_objeto[1].split("-")[0]
                                        const fechaPagoTZ_humana = `${fechaTZ_array[2]}/${fechaTZ_array[1]}/${fechaTZ_array[0]} ${horaTZ_array}`


                                        const tarjeta = detallesDelPago.tarjeta
                                        const cantidad = detallesDelPago.cantidad
                                        const sumaDeLoReembolsado = detallesDelPago.sumaDeLoReembolsado
                                        const reembolsado = detallesDelPago.reembolsado
                                        const deglosePorReembolso = respuestaServidor.deglosePorReembolso
                                        const plataformaDePagoUI = {
                                            efectivo: "Efectivo",
                                            transferenciaBancaria: "Transferencia bancaria",
                                            tarjeta: "Tarteja TPV",
                                            pasarela: "Pasarela de pago",
                                            cheque: "Cheque"
                                        }


                                        const selectorInstanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)?.querySelector("[espacio=detallesDelPago]")
                                        if (!selectorInstanciaRenderizada) {
                                            return
                                        }
                                        selectorInstanciaRenderizada.innerHTML = null
                                        const bloque = document.createElement("div")
                                        bloque.classList.add("flexVertical", "gap6")
                                        const info = document.createElement("div")
                                        info.classList.add("padding14")
                                        info.textContent = `Detalles del pago ${pagoUID} de la reserva ${reservaUID} junto con sus reembolsos. Desde aquí puedes ver los detalles de este pago y gestionar los reembolsos. Puedes crear reembolsos. Tanto los pagos hechos por la pasarela como los reembolsos enviados a la pasarela no se pueden eliminar. Solo se pueden eliminar los pagos manuales.`
                                        bloque.appendChild(info)
                                        selectorInstanciaRenderizada.appendChild(bloque)
                                        const bloqueDetallesDelPago = document.createElement("div")
                                        bloqueDetallesDelPago.classList.add("flexVertical", "gap6", "padding14", "borderRadius20", "backgroundGrey1")
                                        bloqueDetallesDelPago.setAttribute("pagoUID", pagoUID)

                                        let bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        let bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Identificador del pago (pagoUID)"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        let bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = pagoUID
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Plataforma de pago"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = plataformaDePagoUI[plataformaDePagoIDV]
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.textContent = "Identificador del pago dentro de la pasarela"
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = pagoUIDPasarela
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        if (plataformaDePagoIDV === "pasarela") {
                                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                        }

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Tarjeta de crédito"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = `**** **** **** ${tarjetaDigitos} (${tarjeta})`
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        if (plataformaDePagoIDV === "pasarela") {
                                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                        }

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Fecha del pago UTC"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = fechaPagoUTC_humana
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Fecha del pago hora local"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.textContent = fechaPagoTZ_humana
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Cantidad cobrada en dolares"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.setAttribute("cantidadPago", cantidad)
                                        bloqueDato.textContent = cantidad + "$"
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        bloqueDetallesDelPago.appendChild(bloqueInfoDato)

                                        bloqueInfoDato = document.createElement("div")
                                        bloqueInfoDato.classList.add("reservaDetalles_transacciones_bloqueInfoDato")
                                        bloqueInfo = document.createElement("div")
                                        bloqueInfo.classList.add("reservaDetalles_transacciones_bloqueInfo")
                                        bloqueInfo.classList.add("negrita")
                                        bloqueInfo.textContent = "Resumen de reembolsos"
                                        bloqueInfoDato.appendChild(bloqueInfo)
                                        bloqueDato = document.createElement("div")
                                        bloqueDato.classList.add("reservaDetalles_transacciones_bloqueDato")
                                        bloqueDato.setAttribute("sumaDeLoReembolsado", sumaDeLoReembolsado)
                                        bloqueDato.textContent = `${sumaDeLoReembolsado}$, reembolsado ${reembolsado}`
                                        bloqueInfoDato.appendChild(bloqueDato)
                                        if (sumaDeLoReembolsado) {
                                            bloqueDetallesDelPago.appendChild(bloqueInfoDato)
                                        }
                                        selectorInstanciaRenderizada.appendChild(bloqueDetallesDelPago)
                                        const contenedorBotones = document.createElement("div")
                                        contenedorBotones.classList.add("flexVertical", "gap10")
                                        const botonCrearReembolso = document.createElement("div")
                                        botonCrearReembolso.classList.add("botonV1BlancoIzquierda")
                                        botonCrearReembolso.textContent = "Crear un reembolso"
                                        botonCrearReembolso.addEventListener("click", () => {
                                            ocultaPanales()
                                            const selectorContenedorReembolso = document.querySelector("[contenedor=nuevoReembolso]")
                                            selectorContenedorReembolso.textContent = null
                                            const metadatos = {
                                                pagoUID: pagoUID,
                                                instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones,
                                                instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.reembolsos.reembolsoUI(metadatos)
                                        })
                                        contenedorBotones.appendChild(botonCrearReembolso)

                                        const botonEliminarPago = document.createElement("div")
                                        botonEliminarPago.classList.add("botonV1BlancoIzquierda")
                                        botonEliminarPago.textContent = "Eliminar pago"
                                        if (plataformaDePagoIDV !== "pasarela") {
                                            contenedorBotones.appendChild(botonEliminarPago)
                                        }
                                        botonEliminarPago.addEventListener("click", () => {
                                            ocultaPanales()
                                            const selectorContenedorEliminarPago = document.querySelector("[contenedor=eliminarPago]")
                                            selectorContenedorEliminarPago.innerHTML = null
                                            const metadatos = {
                                                instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                            }
                                            const eliminarPagoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.eliminarPagoManual.UI(metadatos)
                                            selectorContenedorEliminarPago.appendChild(eliminarPagoUI)
                                            selectorContenedorEliminarPago.style.display = "flex"
                                        })
                                        const botonCerrar = document.createElement("div")
                                        botonCerrar.classList.add("botonV1")
                                        botonCerrar.textContent = "Cerrar detalles del pago"
                                        botonCerrar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                        contenedorBotones.appendChild(botonCerrar)

                                        selectorInstanciaRenderizada.appendChild(contenedorBotones)
                                        const contenedorEliminarPago = document.createElement("div")
                                        contenedorEliminarPago.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedorEliminarPago.setAttribute("contenedor", "eliminarPago")
                                        selectorInstanciaRenderizada.appendChild(contenedorEliminarPago)
                                        const contenedorCrearReembolso = document.createElement("div")
                                        contenedorCrearReembolso.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedorCrearReembolso.setAttribute("contenedor", "nuevoReembolso")
                                        selectorInstanciaRenderizada.appendChild(contenedorCrearReembolso)
                                        const contenedorReembolsos = document.createElement("div")
                                        contenedorReembolsos.classList.add("flexVertical", "gap6", "padding6", "borderRadius20", "borderGrey1")
                                        if (deglosePorReembolso.length === 0) {
                                            const info = document.createElement("div")
                                            info.classList.add("padding10", "textoCentrado")
                                            info.textContent = "Este pago no tiene ningún reembolso"
                                            contenedorReembolsos.appendChild(info)

                                        }
                                        const botonOpcionesReembolsoUI = (metadatos) => {
                                            const botonEliminarReembolso = document.createElement("div")
                                            botonEliminarReembolso.classList.add("botonV1BlancoIzquierda_sinRadius", "borderRadius12")
                                            botonEliminarReembolso.textContent = "Opciones del reembolso"
                                            botonEliminarReembolso.addEventListener("click", () => {
                                                opcionesReembolsoUI(metadatos)
                                            })
                                            return botonEliminarReembolso
                                        }
                                        const restaurarTodasLasOpcionesDeTodosLosReembolsos = (pagoUID, instanciaUIDDetalleDelPago) => {
                                            const reembolsosOpcionesDesplegadas = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)?.querySelectorAll("[contenedor=opcionesDelReembolso][estado=opcionesDesplegadas]")
                                            reembolsosOpcionesDesplegadas.forEach(contenedorOpcionesReembolso => {
                                                contenedorOpcionesReembolso.innerHTML = null
                                                const reembolsoUID = contenedorOpcionesReembolso.closest("[reembolsoUID]").getAttribute("reembolsoUID")
                                                const metadatosOpcionesReembolso = {
                                                    instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago,
                                                    reembolsoUID: reembolsoUID,
                                                    pagoIUD: pagoUID
                                                }
                                                contenedorOpcionesReembolso.appendChild(botonOpcionesReembolsoUI(metadatosOpcionesReembolso))
                                            });
                                        }
                                        const opcionesReembolsoUI = (metadatos) => {
                                            const reembolsoUID = metadatos.reembolsoUID
                                            const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                            const pagoUID = metadatos.pagoUID
                                            const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones
                                            restaurarTodasLasOpcionesDeTodosLosReembolsos(pagoUID, instanciaUIDDetalleDelPago)
                                            const selectorReembolso = document.querySelector(`[reembolsoUID="${reembolsoUID}"]`).querySelector("[contenedor=opcionesDelReembolso]")
                                            selectorReembolso.setAttribute("estado", "opcionesDesplegadas")
                                            selectorReembolso.innerHTML = null
                                            const contenedor = document.createElement("div")
                                            contenedor.classList.add("administracion_reservas_detallesReserva_transacciones_opcionesReembolso")
                                            const campoPalabra = document.createElement("input")
                                            campoPalabra.classList.add("botonV1BlancoIzquierda_noSeleccionable_sinRadius")
                                            campoPalabra.style.borderRadius = "12px"
                                            campoPalabra.setAttribute("campo", "palabra")
                                            campoPalabra.placeholder = "Escribe la palabra eliminar"
                                            selectorReembolso.appendChild(campoPalabra)
                                            const botonEliminarReembolso = document.createElement("div")
                                            botonEliminarReembolso.classList.add("botonV1BlancoIzquierda_sinRadius", "borderRadius12")
                                            botonEliminarReembolso.textContent = "Confirmar la eliminación irreversible del reembolso"
                                            botonEliminarReembolso.addEventListener("click", () => {
                                                const metadatosEliminarReembolso = {
                                                    instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago,
                                                    reembolsoUID: reembolsoUID,
                                                    instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones
                                                }
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.reembolsos.eliminarReembolso(metadatosEliminarReembolso)
                                            })
                                            selectorReembolso.appendChild(botonEliminarReembolso)
                                            const botonCerrarOpcionesDeReembolso = document.createElement("div")
                                            botonCerrarOpcionesDeReembolso.classList.add("botonV1BlancoIzquierda_sinRadius", "borderRadius12")
                                            botonCerrarOpcionesDeReembolso.textContent = "Cerrar opciones del reembolso"
                                            botonCerrarOpcionesDeReembolso.addEventListener("click", () => {
                                                restaurarTodasLasOpcionesDeTodosLosReembolsos(pagoUID, instanciaUIDDetalleDelPago)
                                            })
                                            selectorReembolso.appendChild(botonCerrarOpcionesDeReembolso)
                                        }
                                        deglosePorReembolso.forEach((detallesDelReembolso) => {
                                            const reembolsoUID = detallesDelReembolso.reembolsoUID
                                            const plataformaDePagoIDV = detallesDelReembolso.plataformaDePagoIDV

                                            const cantidad = detallesDelReembolso.cantidad
                                            const reembolsoUIDPasarela = detallesDelReembolso.reembolsoUIDPasarela

                                            const fechaCreacionUTC_ISO = detallesDelReembolso.fechaCreacionUTC_ISO
                                            const fechaCreacionTZ_ISO = detallesDelReembolso.fechaCreacionTZ_ISO

                                            const fechaActualizacionUTC_ISO = detallesDelReembolso.fechaActualizacionUTC_ISO
                                            const fechaActualizacionTZ_ISO = detallesDelReembolso.fechaActualizacionTZ_ISO

                                            const fechaCreacionUTC_objeto = fechaCreacionUTC_ISO.split("T")
                                            const fechaCreacionUTC_array = fechaCreacionUTC_objeto[0].split("-")
                                            const horaCreacionUTC_array = fechaCreacionUTC_objeto[1].split("-")[0]
                                            const fechaCreacionUTC_humana = `${fechaCreacionUTC_array[2]}/${fechaCreacionUTC_array[1]}/${fechaCreacionUTC_array[0]} ${horaCreacionUTC_array}`

                                            const fechaCreacionTZ_objeto = fechaCreacionTZ_ISO.split("T")
                                            const fechaCreacionTZ_array = fechaCreacionTZ_objeto[0].split("-")
                                            const horaCreacionTZ_array = fechaCreacionTZ_objeto[1].split("-")[0]
                                            const fechaCreacionTZ_humana = `${fechaCreacionTZ_array[2]}/${fechaCreacionTZ_array[1]}/${fechaCreacionTZ_array[0]} ${horaCreacionTZ_array}`


                                            const fechaActualizacionUTC_objeto = fechaActualizacionUTC_ISO?.split("T") || []
                                            const fechaActualizacionUTC_array = fechaActualizacionUTC_objeto[0]?.split("-") || []
                                            const horaActualizacionUTC_array = fechaActualizacionUTC_objeto[1]?.split("-")[0] || []
                                            const fechaActualizacionUTC_humana = `${fechaActualizacionUTC_array[2]}/${fechaActualizacionUTC_array[1]}/${fechaActualizacionUTC_array[0]} ${horaActualizacionUTC_array}`

                                            const fechaActualizacionTZ_objeto = fechaActualizacionTZ_ISO?.split("T") || []
                                            const fechaActualizacionTZ_array = fechaActualizacionTZ_objeto[0]?.split("-") || []
                                            const horaActualizacionTZ_array = fechaActualizacionTZ_objeto[1]?.split("-")[0] || []
                                            const fechaActualizacionTZ_humana = `${fechaActualizacionTZ_array[2]}/${fechaActualizacionTZ_array[1]}/${fechaActualizacionTZ_array[0]} ${horaActualizacionTZ_array}`

                                            const plataformaDePagoUI = {
                                                efectivo: "Efectivo",
                                                transferenciaBancaria: "Transferencia bancaria",
                                                tarjeta: "Tarteja TPV",
                                                pasarela: "Pasarela de pago",
                                                cheque: "Cheque"
                                            }


                                            const contenedorRembolsoEnDetalle = document.createElement("div")
                                            contenedorRembolsoEnDetalle.classList.add("flexVertical", "gap6", "padding6", "borderRadius16", "backgroundGrey1")
                                            contenedorRembolsoEnDetalle.setAttribute("reembolsoUID", reembolsoUID)

                                            const contenedorData = document.createElement("div")
                                            contenedorData.classList.add(
                                                "flexVertical", "gap10", "padding14"
                                            )
                                            contenedorRembolsoEnDetalle.appendChild(contenedorData)

                                            const tituloReembolso = document.createElement("div")
                                            tituloReembolso.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_tituloReembolso")
                                            tituloReembolso.classList.add("negrita")
                                            tituloReembolso.textContent = "Reembolso " + reembolsoUID
                                            contenedorData.appendChild(tituloReembolso)

                                            let bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            let bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Plataforma de reembolso"
                                            bloque.appendChild(bloqueTitulo)
                                            let bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato");
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = plataformaDePagoUI[plataformaDePagoIDV]
                                            bloque.appendChild(bloqueDato)
                                            contenedorData.appendChild(bloque)

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Cantidad del reembolso"
                                            bloque.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato");
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = cantidad + "$"
                                            bloque.appendChild(bloqueDato)
                                            contenedorData.appendChild(bloque)

                                            const bloqueReembolsoUIDPasarela = document.createElement("div")
                                            bloqueReembolsoUIDPasarela.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Reembolso UID en pasarela"
                                            bloqueReembolsoUIDPasarela.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = reembolsoUIDPasarela
                                            bloqueReembolsoUIDPasarela.appendChild(bloqueDato)
                                            if (plataformaDePagoIDV === "pasarela") {
                                                contenedorData.appendChild(bloqueReembolsoUIDPasarela)
                                            }

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Fecha de creación UTC"
                                            bloque.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = fechaCreacionUTC_humana
                                            bloque.appendChild(bloqueDato)
                                            contenedorData.appendChild(bloque)

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Fecha de creación hora local"
                                            bloque.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = fechaCreacionTZ_humana
                                            bloque.appendChild(bloqueDato)
                                            contenedorData.appendChild(bloque)

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Fecha de actualización UTC"
                                            bloque.appendChild(bloqueTitulo)
                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = fechaActualizacionUTC_humana
                                            bloque.appendChild(bloqueDato)
                                            if (plataformaDePagoIDV === "pasarela") {
                                                contenedorData.appendChild(bloque)
                                            }

                                            bloque = document.createElement("div")
                                            bloque.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloque")
                                            bloqueTitulo = document.createElement("div")
                                            bloqueTitulo.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueTitulo")
                                            bloqueTitulo.textContent = "Fecha de actualización UTC"
                                            bloque.appendChild(bloqueTitulo)

                                            bloqueDato = document.createElement("div")
                                            bloqueDato.classList.add("administracion_reservas_detallesReservas_transacciones_reembolsos_contenedorReembolsoEnDetalle_bloqueDato")
                                            bloqueDato.classList.add("negrita")
                                            bloqueDato.textContent = fechaActualizacionTZ_humana
                                            bloque.appendChild(bloqueDato)
                                            if (plataformaDePagoIDV === "pasarela") {
                                                contenedorData.appendChild(bloque)
                                            }

                                            const contenedorBotones = document.createElement("div")
                                            contenedorBotones.classList.add("flexVertical", "gap6")
                                            contenedorBotones.setAttribute("contenedor", "opcionesDelReembolso")
                                            const metadatosOpcionesReembolso = {
                                                instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones,
                                                instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago,
                                                reembolsoUID: reembolsoUID,
                                                pagoIUD: pagoUID
                                            }
                                            contenedorBotones.appendChild(botonOpcionesReembolsoUI(metadatosOpcionesReembolso))
                                            if (plataformaDePagoIDV !== "pasarela") {
                                                contenedorRembolsoEnDetalle.appendChild(contenedorBotones)
                                            }
                                            contenedorReembolsos.appendChild(contenedorRembolsoEnDetalle)
                                        })
                                        selectorInstanciaRenderizada.appendChild(contenedorReembolsos)
                                    }
                                },
                                confirmar: async () => {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const nombreEnlace = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=nombreEnlace]")
                                    const cantidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=cantidad]")
                                    const horasCaducidad = document.querySelector("[espacio=formularioCrearEnlaceDePago] [campo=horasCaducidad]")
                                    const transaccion = {
                                        zona: "administracion/enlacesDePago/crearNuevoEnlace",
                                        reservaUID: reservaUID,
                                        nombreEnlace: nombreEnlace.value,
                                        cantidad: cantidad.value,
                                        horasCaducidad: horasCaducidad.value,
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.enlacesDePago()
                                    }
                                }
                            },
                            reembolsos: {
                                reembolsoUI: async (metadatos) => {
                                    const pagoUID = metadatos.pagoUID

                                    const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones
                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const selectorContenedorCrearReembolso = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedor=nuevoReembolso]`)
                                    selectorContenedorCrearReembolso.style.display = "flex"
                                    const mostrarContenedorPorTipo = (tipoReembolso) => {
                                        const selectorTipoContenedores = selectorContenedorCrearReembolso.querySelectorAll("[contenedorTipoReembolso]")
                                        selectorTipoContenedores.forEach((contenedor) => {
                                            contenedor.style.display = "none"
                                        })
                                        selectorContenedorCrearReembolso.querySelector(`[contenedorTipoReembolso="${tipoReembolso}"]`).removeAttribute("style")
                                    }
                                    const reseteaBotonesTipoReembolso = () => {
                                        const selectorBotonesTipoReembolso = selectorContenedorCrearReembolso.querySelectorAll("[botonTipoReembolso]")
                                        selectorBotonesTipoReembolso.forEach((botonTipoReembolso) => {
                                            botonTipoReembolso.removeAttribute("style")
                                            botonTipoReembolso.removeAttribute("tipoReembolsoSeleccionado")
                                        })
                                    }
                                    const maximoReembolsable = async () => {
                                        const totalPagado = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [cantidadPago]`).getAttribute("cantidadPago")
                                        const totalReembolsado = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [sumaDeLoReembolsado]`)?.getAttribute("sumaDeLoReembolsado")
                                        const selectorUI = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [componente=totalReembolsable]`)
                                        selectorUI.textContent = "Esperando resultado del calculo..."
                                        if (!totalReembolsado) {
                                            selectorUI.textContent = `Total reembolsable ${totalPagado}$`
                                            selectorUI.setAttribute("totalReembolsable", totalPagado)

                                        }
                                        try {
                                            const transaccion = {
                                                zona: "administracion/componentes/calculadora",
                                                numero1: totalPagado,
                                                numero2: totalReembolsado || "0.00",
                                                operador: "-"
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            if (respuestaServidor?.error) {
                                                casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                const resultado = Number(respuestaServidor?.ok).toFixed(2)
                                                selectorUI.textContent = `Total reembolsable ${resultado}$`
                                                selectorUI.setAttribute("totalReembolsable", resultado)
                                            }

                                        } catch (errorCapturado) {
                                            const error = errorCapturado.message
                                            casaVitini.ui.componentes.advertenciaInmersiva(error)
                                        }
                                    }
                                    const reglaDeTresPorcentaje = async (porcentaje) => {
                                        let totalReembolsable
                                        const selectorTotalReembolsableConReeembolsos = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [totalReembolsable]`)
                                        if (selectorTotalReembolsableConReeembolsos) {
                                            totalReembolsable = selectorTotalReembolsableConReeembolsos.getAttribute("totalReembolsable")
                                        } else {
                                            const selectorTotalReembolsableSinReembolsos = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [cantidadPago]`).getAttribute("cantidadPago")
                                            totalReembolsable = selectorTotalReembolsableSinReembolsos
                                        }
                                        const selectorUI = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [informacionPorcentaje=informacionPorcentaje]`)
                                        selectorUI.innerHTML = "Calculando..."
                                        try {
                                            const transaccion = {
                                                zona: "administracion/componentes/calculadora",
                                                numero1: totalReembolsable,
                                                numero2: porcentaje,
                                                operador: "%"
                                            }
                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            if (respuestaServidor?.error) {
                                                casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                const resultado = Number(respuestaServidor?.ok).toFixed(2)
                                                selectorUI.textContent = `El reembolso sería de ${resultado}$ (El ${porcentaje}% de ${totalReembolsable}$ es ${resultado}$)`
                                                selectorUI.setAttribute("totalReembolso", resultado)
                                            }
                                        } catch (errorCapturado) {
                                            const error = errorCapturado.message
                                            casaVitini.ui.componentes.advertenciaInmersiva(error)
                                        }

                                    };
                                    const contenedorEmitirReembolso = document.createElement("div")
                                    contenedorEmitirReembolso.classList.add("flexVertical", "padding6", "gap6", "borderGrey1", "borderRadius20")
                                    contenedorEmitirReembolso.setAttribute("contenedor", "emitirReembolso")
                                    const titulo = document.createElement("p")
                                    titulo.classList.add("tituloGris", "padding14")
                                    titulo.textContent = "Realizar un reembolso"
                                    contenedorEmitirReembolso.appendChild(titulo)
                                    const bloqueReembolso = document.createElement("div")
                                    bloqueReembolso.classList.add("flexVertical", "gap6")
                                    let bloqueInterno = document.createElement("div")
                                    bloqueInterno.classList.add("flexVertical", "gap6", "padding14")
                                    const info = document.createElement("div")
                                    info.textContent = `Para realizar el reembolso, por favor, escribe reembolso en minúsculas en el campo de texto y, pulse realizar reembolso. Se exige escribir reembolso como medida para evitar un falso clic en el botón de confirmación al querer hacer clic en el botón de cerrar opciones de emisión de reembolso.`
                                    bloqueInterno.appendChild(info)
                                    bloqueReembolso.appendChild(bloqueInterno)
                                    const infoTotalReembolsable = document.createElement("div")

                                    infoTotalReembolsable.classList.add("negrita")
                                    infoTotalReembolsable.setAttribute("componente", "totalReembolsable")

                                    bloqueInterno.appendChild(infoTotalReembolsable)
                                    bloqueReembolso.appendChild(bloqueInterno)
                                    const contenedorTipoReembolsos = document.createElement("div")
                                    contenedorTipoReembolsos.classList.add("gridHorizontal2C", "borderRadius18", "backgroundGrey1", "padding6", "gap6")
                                    const reembolsoPorCantidad = document.createElement("div")
                                    reembolsoPorCantidad.classList.add("flexVertical", "borderRadius12", "backgroundGrey1", "padding10", "textoCentrado")
                                    reembolsoPorCantidad.textContent = "Por cantidad"
                                    reembolsoPorCantidad.setAttribute("botonTipoReembolso", "porCantidad")
                                    reembolsoPorCantidad.setAttribute("tipoReembolso", "porCantidad")
                                    reembolsoPorCantidad.addEventListener("click", (e) => {
                                        reseteaBotonesTipoReembolso()
                                        e.target.setAttribute("tipoReembolsoSeleccionado", "porCantidad")
                                        e.target.style.background = "blue"
                                        e.target.style.color = "white"
                                        const tipoReembolso = e.target.getAttribute("tipoReembolso")
                                        mostrarContenedorPorTipo(tipoReembolso)
                                    })
                                    contenedorTipoReembolsos.appendChild(reembolsoPorCantidad)
                                    const reembolsoPorPorcentaje = document.createElement("div")
                                    reembolsoPorPorcentaje.classList.add("flexVertical", "borderRadius12", "backgroundGrey1", "padding10", "textoCentrado")
                                    reembolsoPorPorcentaje.textContent = "Por porcentaje"
                                    reembolsoPorPorcentaje.setAttribute("botonTipoReembolso", "porPorcentaje")
                                    reembolsoPorPorcentaje.setAttribute("tipoReembolso", "porPorcentaje")
                                    reembolsoPorPorcentaje.addEventListener("click", (e) => {
                                        reseteaBotonesTipoReembolso()
                                        e.target.setAttribute("tipoReembolsoSeleccionado", "porPorcentaje")
                                        e.target.style.background = "blue"
                                        e.target.style.color = "white"
                                        const tipoReembolso = e.target.getAttribute("tipoReembolso")
                                        mostrarContenedorPorTipo(tipoReembolso)
                                    })
                                    contenedorTipoReembolsos.appendChild(reembolsoPorPorcentaje)
                                    bloqueReembolso.appendChild(contenedorTipoReembolsos)
                                    const contenedorDinamicoTipo = document.createElement("div")
                                    contenedorDinamicoTipo.classList.add("flexVertical", "gap6")
                                    const contenedorPorCantidad = document.createElement("div")
                                    contenedorPorCantidad.classList.add("flexVertical", "gap6")
                                    contenedorPorCantidad.style.display = "none"
                                    contenedorPorCantidad.setAttribute("contenedorTipoReembolso", "porCantidad")
                                    const infoPorCantidad = document.createElement("div")
                                    infoPorCantidad.classList.add("padding14")
                                    infoPorCantidad.textContent = `Determina la cantidad total del reembolso. Si quieres emitir, por ejemplo, un reembolso de 100, entonces debes de escribir también los dos decimales separados por punto, por ejemplo, 100.00. Luego establece la moneda.`
                                    contenedorPorCantidad.appendChild(infoPorCantidad)
                                    const campoCantidadReembolso = document.createElement("input")
                                    campoCantidadReembolso.classList.add("detallesReserva_reembolso_campo")
                                    campoCantidadReembolso.setAttribute("campo", "porCantidad")
                                    campoCantidadReembolso.placeholder = "0.00"
                                    contenedorPorCantidad.appendChild(campoCantidadReembolso)
                                    const campoMonedaReembolso = document.createElement("input")
                                    campoMonedaReembolso.classList.add("detallesReserva_reembolso_campo")
                                    campoMonedaReembolso.setAttribute("campo", "moneda")
                                    campoMonedaReembolso.placeholder = "EUR"

                                    contenedorDinamicoTipo.appendChild(contenedorPorCantidad)
                                    const contenedorPorPorcentaje = document.createElement("div")
                                    contenedorPorPorcentaje.classList.add("flexVertical", "gap6")
                                    contenedorPorPorcentaje.style.display = "none"
                                    contenedorPorPorcentaje.setAttribute("contenedorTipoReembolso", "porPorcentaje")
                                    const contenedorInfo = document.createElement("div")
                                    contenedorInfo.classList.add("flexVertical", "gap6", "padding14")
                                    contenedorPorPorcentaje.appendChild(contenedorInfo)
                                    const infoPorPorcentaje = document.createElement("div")
                                    infoPorPorcentaje.textContent = `Determina el porcentaje del reembolso.`
                                    contenedorInfo.appendChild(infoPorPorcentaje)
                                    const resultadoPorcentaje = document.createElement("div")
                                    resultadoPorcentaje.classList.add("negrita")
                                    resultadoPorcentaje.setAttribute("informacionPorcentaje", "informacionPorcentaje")
                                    resultadoPorcentaje.textContent = `Escribe un porcentaje para ver su cálculo`
                                    contenedorInfo.appendChild(resultadoPorcentaje)
                                    const campoPorcentajeReembolso = document.createElement("input")
                                    campoPorcentajeReembolso.classList.add("detallesReserva_reembolso_campo")
                                    campoPorcentajeReembolso.placeholder = "0%"
                                    campoPorcentajeReembolso.addEventListener("input", (e) => {
                                        const entrada = e.target.value
                                        const selectorInformacionResultadoPorcentaje = document.querySelector("[informacionPorcentaje=informacionPorcentaje]")
                                        const controlFormato = /^\d+%$/.test(entrada);
                                        if (entrada.length === 0) {
                                            selectorInformacionResultadoPorcentaje.textContent = "Escribe un porcentaje para ver su cálculo"
                                            e.target.removeAttribute("totalReembolso")
                                        } else {
                                            if (!controlFormato) {
                                                selectorInformacionResultadoPorcentaje.textContent = "No te olvides del signo de porcentaje %, solo números enteros sin decimales."
                                                e.target.removeAttribute("totalReembolso")
                                            } else {
                                                const numeroLimpio = entrada.replace("%", "")
                                                reglaDeTresPorcentaje(numeroLimpio)
                                            }
                                        }
                                    })
                                    contenedorPorPorcentaje.appendChild(campoPorcentajeReembolso)
                                    contenedorDinamicoTipo.appendChild(contenedorPorPorcentaje)
                                    const campoMoneda = document.createElement("input")
                                    campoMoneda.classList.add("detallesReserva_reembolso_campo")
                                    campoMoneda.setAttribute("campo", "moneda")
                                    campoMoneda.placeholder = "Moneda, por ejemplo EUR o USD"

                                    contenedorDinamicoTipo.appendChild(contenedorPorPorcentaje)
                                    const selectorTipoReembolso = document.createElement("select")
                                    selectorTipoReembolso.addEventListener("change", (e) => {
                                        const tipoReembolso = e.target.value

                                        const contenedorEmitirReembolso = e.target.closest("[contenedor=emitirReembolso]")
                                        const contenedorPalabra = contenedorEmitirReembolso.querySelector("[contenedor=palabraReembolso]")
                                        if (tipoReembolso === "pasarela") {
                                            contenedorPalabra.classList.remove("ocultoInicial")
                                        } else {
                                            contenedorPalabra.classList.add("ocultoInicial")
                                        }
                                    })

                                    selectorTipoReembolso.setAttribute("campo", "plataformaDePagoEntrada")
                                    const opcionPreterminada = document.createElement("option");
                                    opcionPreterminada.value = "";
                                    opcionPreterminada.selected = "true"
                                    opcionPreterminada.disabled = "true"
                                    opcionPreterminada.text = "Selecciona como realizar este reeembolso";
                                    selectorTipoReembolso.add(opcionPreterminada);
                                    let opcion = document.createElement("option");
                                    opcion.value = "efectivo";
                                    opcion.text = "Efectivo";
                                    selectorTipoReembolso.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "tarjeta";
                                    opcion.text = "Tarjeta TPV";
                                    selectorTipoReembolso.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "cheque";
                                    opcion.text = "Cheque";
                                    selectorTipoReembolso.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "pasarela";
                                    opcion.text = "Pasarela";
                                    selectorTipoReembolso.add(opcion);

                                    contenedorDinamicoTipo.appendChild(selectorTipoReembolso)
                                    bloqueReembolso.appendChild(contenedorDinamicoTipo)
                                    bloqueInterno = document.createElement("div")
                                    bloqueInterno.classList.add("flexVertical", "gap6", "ocultoInicial")
                                    bloqueInterno.setAttribute("contenedor", "palabraReembolso")
                                    const infoCampoConfirmacion = document.createElement("div")
                                    infoCampoConfirmacion.classList.add("padding14")
                                    infoCampoConfirmacion.textContent = `Los reembolsos emitidos por la pasarela de pago son irreversibles, no se pueden deshacer, si bien se puede eliminar la copia de este de la base de datos de Casa Vitini no se puede deshacer de la pasarela. Por esta circunstancia, para emitir un reembolso por la pasarela de pago tienes que escribir la palabra "reembolso" en el campo de texto de abajo. Esto es así para evitar falsos clics.`
                                    bloqueInterno.appendChild(infoCampoConfirmacion)
                                    const campoConfirmacion = document.createElement("input")
                                    campoConfirmacion.classList.add("detallesReserva_reembolso_campoConfirmacion")
                                    campoConfirmacion.setAttribute("campo", "palabra")
                                    campoConfirmacion.placeholder = "Escribe la palabra reembolso"
                                    bloqueInterno.appendChild(campoConfirmacion)
                                    bloqueReembolso.appendChild(bloqueInterno)
                                    contenedorEmitirReembolso.appendChild(bloqueReembolso)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("flexVertical", "gap6")
                                    const botonConfirmar = document.createElement("div")
                                    botonConfirmar.classList.add("botonV1BlancoIzquierda")
                                    botonConfirmar.setAttribute("componente", "botonActualizarEnlace")
                                    botonConfirmar.textContent = "Realizar reembolso"
                                    botonConfirmar.addEventListener("click", () => {

                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.reembolsos.confirmarReembolso({
                                            pagoUID: pagoUID,
                                            instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones,
                                            instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                        })
                                    })
                                    bloqueBotones.appendChild(botonConfirmar)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cerrar opciones de emitir reembolso"
                                    botonCancelar.addEventListener("click", () => {
                                        selectorContenedorCrearReembolso.innerHTML = null
                                        selectorContenedorCrearReembolso.removeAttribute("style")
                                    })
                                    bloqueBotones.appendChild(botonCancelar)
                                    contenedorEmitirReembolso.appendChild(bloqueBotones)
                                    selectorContenedorCrearReembolso.appendChild(contenedorEmitirReembolso)
                                    maximoReembolsable();
                                },
                                eliminarReembolso: async (metadatos) => {
                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const reembolsoUID = metadatos.reembolsoUID
                                    const instanciaUID = metadatos.instanciaUID
                                    const metadatosPantallaCarga = {
                                        mensaje: "Eliminando reembolso...",
                                        instanciaUID: instanciaUIDDetalleDelPago,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const pagoUID = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector("[pagoUID]").getAttribute("pagoUID")
                                    const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector(`[reembolsoUID="${reembolsoUID}"] [campo=palabra]`).value
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/eliminarReembolsoManual",
                                        reembolsoUID: String(reembolsoUID),
                                        palabra: palabra
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUIDDetalleDelPago}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const selectorDetallesDelPagoRenderizado = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)
                                        if (selectorDetallesDelPagoRenderizado) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.arranque()
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const metadatos = {
                                                pagoUID: pagoUID,
                                                instanciaUID: instanciaUID
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.detallesDelPago.UI(metadatos)
                                        }
                                    }
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                },
                                confirmarReembolso: async (metadatos) => {
                                    const pagoUID = String(metadatos.pagoUID)
                                    const instanciaUID_contenedorDinamicoTransacciones = metadatos.instanciaUID_contenedorDinamicoTransacciones
                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const tipoReembolso = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [tipoReembolsoSeleccionado]`)?.getAttribute("tipoReembolsoSeleccionado")

                                    const metadatosPantallaCarga = {
                                        mensaje: "Esperando al servidor...",
                                        instanciaUID: instanciaUID_pantallaDeCarga,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/realizarReembolso",
                                        reservaUID: reservaUID,
                                        pagoUID: pagoUID
                                    }
                                    if (tipoReembolso === "porPorcentaje") {
                                        const cantidad = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedortiporeembolso=porPorcentaje] [totalReembolso]`)?.getAttribute("totalReembolso")
                                        transaccion.cantidad = cantidad
                                    }
                                    if (tipoReembolso === "porCantidad") {
                                        const cantidad = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedortiporeembolso=porCantidad] [campo=porCantidad]`)?.value
                                        transaccion.cantidad = cantidad
                                    }
                                    transaccion.tipoReembolso = tipoReembolso
                                    const plataformaDePagoEntrada = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [contenedor=nuevoReembolso] [campo=plataformaDePagoEntrada]`).value
                                    transaccion.plataformaDePagoEntrada = plataformaDePagoEntrada
                                    if (tipoReembolso === "pasarela") {
                                        const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"] [campo=palabra]`)?.value
                                        transaccion.palabra = palabra
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaDeCarga}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.arranque()
                                        const mensaje = respuestaServidor?.ok
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.detallesDelPago.UI({
                                            pagoUID: pagoUID,
                                            instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones
                                        })

                                    }
                                }
                            },
                            crearPagoManual: {
                                UI: () => {
                                    const mostrarContenedorTipoPago = (opcion) => {
                                        const selectorInfo = document.querySelector("[componente=advertenciaInmersiva] [componente=infoDesplegable]")
                                        selectorInfo?.remove()
                                        const selectorTodosLosContenedorTipoPago = document.querySelectorAll(`[componente=advertenciaInmersiva] [contenedorTipoPago]`)
                                        selectorTodosLosContenedorTipoPago.forEach((contenedorTipoPago) => {
                                            contenedorTipoPago.removeAttribute("style")
                                            contenedorTipoPago.removeAttribute("estado")
                                        })
                                        const tipoPago = opcion.target.value
                                        const selectorContenedorTipoPago = document.querySelector(`[componente=advertenciaInmersiva] [contenedorTipoPago=${tipoPago}]`)
                                        if (selectorContenedorTipoPago) {
                                            selectorContenedorTipoPago.style.display = "flex"
                                            selectorContenedorTipoPago.setAttribute("estado", "activa")
                                        }
                                    }
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const advertenciaInmersivaIU = document.createElement("div")
                                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                                    const contenidoAdvertenciaInmersiva = document.createElement("div")
                                    contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                                    contenidoAdvertenciaInmersiva.setAttribute("espacio", "formularioCrearPagoManual")
                                    const titulo = document.createElement("p")
                                    titulo.classList.add("tituloGris", "padding14")
                                    titulo.textContent = "Crear un pago manual"
                                    contenidoAdvertenciaInmersiva.appendChild(titulo)
                                    const bloque = document.createElement("div")
                                    bloque.classList.add("flexVertical", "gap10")
                                    let info = document.createElement("div")
                                    info.classList.add("padding14")
                                    info.textContent = `Crea un pago manual cuando necesites crear un pago por fuera de la pasarela. Escoge el tipo de pago, si es efectivo o si es por TPV por ejemplo. Luego rellena los datos y el pago se añadirá a la lista de pagos de la reserva. Los pagos manuales requieren una acción manual.`
                                    bloque.appendChild(info)
                                    const selectorTipoDePago = document.createElement("select")
                                    selectorTipoDePago.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    selectorTipoDePago.setAttribute("campo", "selectorRol")
                                    selectorTipoDePago.addEventListener("change", mostrarContenedorTipoPago)
                                    const opcionPreterminada = document.createElement("option");
                                    opcionPreterminada.value = "";
                                    opcionPreterminada.selected = "true"
                                    opcionPreterminada.disabled = "true"
                                    opcionPreterminada.text = "Selecciona la plataforma pago";
                                    selectorTipoDePago.add(opcionPreterminada);
                                    let opcion = document.createElement("option");
                                    opcion.value = "efectivo";
                                    opcion.text = "Efectivo";
                                    selectorTipoDePago.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "transferenciaBancaria";
                                    opcion.text = "Transferencia bancaria";
                                    selectorTipoDePago.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "tarjeta";
                                    opcion.text = "Tarjeta TPV";
                                    selectorTipoDePago.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "cheque";
                                    opcion.text = "Cheque";
                                    selectorTipoDePago.add(opcion);
                                    opcion = document.createElement("option");
                                    opcion.value = "pasarela";
                                    opcion.text = "Pasarela(Asociar pago)";
                                    selectorTipoDePago.add(opcion);

                                    bloque.appendChild(selectorTipoDePago)
                                    const contenedorTipoPago = document.createElement("div")
                                    contenedorTipoPago.classList.add("flexVertical", "gap6")
                                    const infoDesplegable = document.createElement("p")
                                    infoDesplegable.classList.add("padding14")
                                    infoDesplegable.setAttribute("componente", "infoDesplegable")
                                    infoDesplegable.textContent = "Selecciona el tipo de plataforma de pago en el desplegable"
                                    contenedorTipoPago.appendChild(infoDesplegable)
                                    const contenedorEfectivo = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.efectivo()
                                    contenedorTipoPago.appendChild(contenedorEfectivo)
                                    const contenedorCheque = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.cheque()
                                    contenedorTipoPago.appendChild(contenedorCheque)
                                    const contenedorTransferenciaBancaria = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.transferenciaBancaria()
                                    contenedorTipoPago.appendChild(contenedorTransferenciaBancaria)
                                    const contenedorTarjeta = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.tarjeta()
                                    contenedorTipoPago.appendChild(contenedorTarjeta)
                                    const contenedorPasarela = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.contenedoresTipoPago.pasarela()
                                    contenedorTipoPago.appendChild(contenedorPasarela)
                                    bloque.appendChild(contenedorTipoPago)
                                    contenidoAdvertenciaInmersiva.appendChild(bloque)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("flexVertical", "gap10")
                                    const botonConfirmar = document.createElement("div")
                                    botonConfirmar.classList.add("botonV1BlancoIzquierda")
                                    botonConfirmar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonConfirmar.textContent = "Crear pago y guardarlo en la reserva"
                                    botonConfirmar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.crearPagoManual.confirmar()
                                    })
                                    bloqueBotones.appendChild(botonConfirmar)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.textContent = "Cancelar y volver"
                                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                                    bloqueBotones.appendChild(botonCancelar)
                                    contenidoAdvertenciaInmersiva.appendChild(bloqueBotones)
                                    const contenedorGlobal = document.createElement("div")
                                    contenedorGlobal.classList.add("detallesReserva_enlaceDePago_contenedorGlobal")
                                    contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                                    document.querySelector("main").appendChild(advertenciaInmersivaIU)
                                },
                                confirmar: async () => {
                                    const instanciaUID_contenedorDinamicoTransacciones = document.querySelector("[contenedorID=transacciones]").getAttribute("instanciaUID")
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const contenedorActivo = document.querySelector("[estado=activa][contenedorTipoPago]")
                                    const plataformaDePago = document.querySelector("[campo=selectorRol]").value
                                    const instanciaUID_pantallaEspera = casaVitini.utilidades.codigoFechaInstancia()
                                    const metadatosPantallaCarga = {
                                        mensaje: "Esperando al servidor...",
                                        instanciaUID: instanciaUID_pantallaEspera,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/crearPagoManual",
                                        plataformaDePago: plataformaDePago,
                                        reservaUID: reservaUID
                                    }
                                    if (contenedorActivo) {
                                        contenedorActivo.querySelectorAll("[campo]").forEach((campo) => {
                                            const nombreCampo = campo.getAttribute("campo")
                                            const valorCampo = campo.value
                                            transaccion[nombreCampo] = valorCampo
                                        })
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaEspera}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const seleccionarInstancia = document.querySelector(`[instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                        if (seleccionarInstancia) {
                                            const datosPagosGlobal = {
                                                reservaUID: reservaUID,
                                                instanciaUID_contenedorDinamicoTransacciones: instanciaUID_contenedorDinamicoTransacciones
                                            }
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.actualizarDatosGlobalesPago(datosPagosGlobal)
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const selectorInfoNoPago = seleccionarInstancia.querySelector(`[contenedor=infoNoPagos]`)
                                            if (selectorInfoNoPago) {
                                                selectorInfoNoPago.remove()
                                            }
                                            const selectorContenedorListaDePagos = seleccionarInstancia.querySelector(`[contenedor=listaDePagos]`)
                                            const selectorTransaccionesUI = seleccionarInstancia.querySelector("[contenedor=transaccionesUI]")
                                            if (!selectorContenedorListaDePagos) {
                                                const bloqueListaDePagos = document.createElement("div")
                                                bloqueListaDePagos.classList.add("reservaDetalles_transacciones_bloqueListaDePagos")
                                                bloqueListaDePagos.setAttribute("contenedor", "listaDePagos")
                                                selectorTransaccionesUI.appendChild(bloqueListaDePagos)
                                            }
                                            const detallesDelPago = respuestaServidor.detallesDelPago
                                            const enlaceUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.pagoUI(detallesDelPago)
                                            const listaDePagosRenderizada = seleccionarInstancia.querySelector(`[contenedor=listaDePagos]`)
                                            if (listaDePagosRenderizada.childElementCount === 0) {
                                                listaDePagosRenderizada.appendChild(enlaceUI);
                                            } else if (listaDePagosRenderizada.childElementCount > 0) {
                                                const primerElemento = listaDePagosRenderizada.firstChild;
                                                listaDePagosRenderizada.insertBefore(enlaceUI, primerElemento);
                                            }
                                        }
                                    }
                                },
                                contenedoresTipoPago: {
                                    efectivo: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "efectivo")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Determina la cantidad del pago, recuerda que debe tener dos decimales siempre, por ejemplo, 10.00.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "cantidad")
                                        campo.placeholder = "Cantidad del pago, ejemplo 12.95"
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    },
                                    transferenciaBancaria: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "transferenciaBancaria")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Determina la cantidad de la transferencia bancaria. Recuerda que la cantidad debe tener dos decimales siempre, por ejemplo, 10.00.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "transferenciaUID")
                                        campo.placeholder = "Código identificador de la transferencia bancaria."
                                        contenedor.appendChild(campo)
                                        campo = document.createElement("input")
                                        campo.setAttribute("campo", "cantidad")
                                        campo.placeholder = "Cantidad especificada en la transferencia bancaria, ejemplo: 12.95."
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    },
                                    cheque: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "cheque")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Determina la cantidad del pago en modalidad cheque bancario. Recuerda que la cantidad especificada debe tener dos decimales siempre, por ejemplo, 10.00.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "chequeUID")
                                        campo.placeholder = "Código identificador del cheque."
                                        contenedor.appendChild(campo)
                                        campo = document.createElement("input")
                                        campo.setAttribute("campo", "cantidad")
                                        campo.placeholder = "Cantidad especificada en el cheque, ejemplo: 12.95."
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    },
                                    tarjeta: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "tarjeta")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Determina la cantidad del pago en tarjeta, inserte los datos del pago realizado con el TPV.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "tarjetaUltimos")
                                        campo.placeholder = "Cuatro últimos dígitos de la tarjeta."
                                        contenedor.appendChild(campo)
                                        campo = document.createElement("input")
                                        campo.setAttribute("campo", "cantidad")
                                        campo.placeholder = "Cantidad especificada en el pago por TPV, ejemplo: 12.95."
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    },
                                    pasarela: () => {
                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add("flexVertical", "gap6", "ocultoInicial")
                                        contenedor.setAttribute("contenedorTipoPago", "pasarela")
                                        info = document.createElement("div")
                                        info.classList.add("padding6")
                                        info.textContent = `Si algún pago no se ha sincronizado o si quieres sincronizar un pago, inserta el código identificador del pago de la pasarela.`
                                        contenedor.appendChild(info)
                                        let campo = document.createElement("input")
                                        campo.setAttribute("campo", "pagoUIDPasarela")
                                        campo.placeholder = "Código identificador de pago, por ejemplo: h8qikEKdMiyPEtm5pKgjwv1fMSeZY"
                                        contenedor.appendChild(campo)
                                        return contenedor
                                    }
                                }
                            },
                            eliminarPagoManual: {
                                UI: (metadatos) => {

                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add("flexVertical", "gap6", "padding6", "borderRadius20", "borderGrey1")
                                    const infoGlobal = document.createElement("div")
                                    infoGlobal.classList.add("padding14")
                                    infoGlobal.textContent = `Para eliminar este pago, escriba la palabra eliminar en el campo de texto y pulse el botón eliminar. Recuerda que esto es una operación irreversible porque estás eliminado el pago de la base de datos. Los reembolsos de este pago también se eliminarán.`
                                    contenedor.appendChild(infoGlobal)
                                    const campoEliminar = document.createElement("input")
                                    campoEliminar.classList.add("detallesReserva_reembolso_campo")
                                    campoEliminar.setAttribute("campo", "palabra")
                                    campoEliminar.placeholder = "Escriba la palabra eliminar"
                                    contenedor.appendChild(campoEliminar)
                                    const botonConfirmar = document.createElement("div")
                                    botonConfirmar.classList.add("botonV1BlancoIzquierda")
                                    botonConfirmar.setAttribute("componente", "botonActualizarEnlace")
                                    botonConfirmar.textContent = "Eliminar irreversiblemente el pago"
                                    botonConfirmar.addEventListener("click", () => {
                                        const metadatos = {
                                            instanciaUIDDetalleDelPago: instanciaUIDDetalleDelPago
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.eliminarPagoManual.confirmar(metadatos)
                                    })
                                    contenedor.appendChild(botonConfirmar)
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.setAttribute("componente", "botonActualizarEnlace")
                                    botonCancelar.textContent = "Cerrar opciones de eliminación del pago"
                                    botonCancelar.addEventListener("click", (e) => {
                                        const selectorContenedorEliminar = e.target.closest("[contenedor=eliminarPago]")
                                        selectorContenedorEliminar.innerHTML = null
                                        selectorContenedorEliminar.removeAttribute("style")
                                    })
                                    contenedor.appendChild(botonCancelar)
                                    return contenedor
                                },
                                confirmar: async (metadatos) => {
                                    const instanciaUIDDetalleDelPago = metadatos.instanciaUIDDetalleDelPago
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const instanciaUID_pantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const metadatosPantallaCarga = {
                                        mensaje: "Esperando al servidor...",
                                        instanciaUID: instanciaUID_pantallaDeCarga,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const pagoUID = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector("[pagoUID]").getAttribute("pagoUID")
                                    const palabra = document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`).querySelector("[contenedor=eliminarPago] [campo=palabra]").value
                                    const instanciaUID_contenedorDinamicoTransacciones = document.querySelector(`[reservaUID="${reservaUID}"] [contenedorID=transacciones]`).getAttribute("instanciaUID")
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/transacciones/eliminarPagoManual",
                                        pagoUID: String(pagoUID),
                                        palabra: palabra,
                                        reservaUID: String(reservaUID)
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelectorAll(`[instanciaUID="${instanciaUID_pantallaDeCarga}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`)
                                    selectorPantallaDeCarga.forEach((pantalla) => {
                                        pantalla.remove()
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const datosActualizar = {
                                            reservaUID: reservaUID,
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.actualizarDatosGlobalesPago(datosActualizar)
                                        document.body.removeAttribute("style")
                                        document.querySelector(`[instanciaUID="${instanciaUIDDetalleDelPago}"]`)?.remove()


                                        const contenedorTransacciones = document.querySelector(`[contenedorID=transacciones][instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                        const listaDePagos = contenedorTransacciones.querySelector(`[contenedor=listaDePagos]`)
                                        listaDePagos.querySelector(`[pagoUID="${pagoUID}"]`)?.remove()
                                        const pagosRestantes = listaDePagos.querySelectorAll(`[pagoUID]`)
                                        if (pagosRestantes.length === 0) {
                                            listaDePagos?.remove()
                                            const infoNoPagoUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.transacciones.UI.infoNoPagos()
                                            contenedorTransacciones.querySelector("[contenedor=transaccionesUI]").appendChild(infoNoPagoUI)
                                        }
                                    }
                                }
                            },
                            actualizarDatosGlobalesPago: async (metadatos) => {
                                const reservaUID = metadatos.reservaUID
                                const instanciaUID_contenedorDinamicoTransacciones = document.querySelector("[contenedorID=transacciones]").getAttribute("instanciaUID")
                                const selectorTotalReservaEnPanelGlobal = document.querySelector(`[dataReserva=totalReservaConImpuestos]`)
                                const selectorTotalReserva = document.querySelector(`[componentePago=totalReserva]`)
                                const selectorTotalPagado = document.querySelector(`[componentePago=totalPagado]`)
                                const selectorFaltantePorPagar = document.querySelector(`[componentePago=faltantePorPagar]`)
                                const selectorEstadoPago = document.querySelector(`[dataReserva=estadoPago]`)
                                const selectorPorecentajeReembolsado = document.querySelector(`[componentePago=porcentajeReembolsado]`)
                                const selectorPorecentajePagado = document.querySelector(`[componentePago=porcentajePagado]`)
                                const selectorTotalReembolsado = document.querySelector(`[componentePago=totalReembolsado]`)
                                const reservaAcutalRenderizada = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                if (reservaAcutalRenderizada === reservaUID) {
                                    selectorTotalReservaEnPanelGlobal.innerHTML = "Recalculando..."
                                }
                                selectorTotalReserva.innerHTML = "Recalculando..."
                                selectorTotalPagado.innerHTML = "Recalculando..."
                                selectorFaltantePorPagar.innerHTML = "Recalculando..."
                                selectorEstadoPago.innerHTML = "Recalculando..."
                                selectorPorecentajeReembolsado.innerHTML = "Total reembolsado"
                                selectorPorecentajePagado.innerHTML = "Total pagado"
                                selectorTotalReembolsado.innerHTML = "Recalculando..."
                                const obtenerPagoaActualizados = {
                                    zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                    reservaUID: reservaUID,
                                    capas: [
                                        "detallesPagos",
                                    ]
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(obtenerPagoaActualizados)
                                const seleccionarInstancia = document.querySelector(`[instanciaUID="${instanciaUID_contenedorDinamicoTransacciones}"]`)
                                if (respuestaServidor?.error) {
                                    if (seleccionarInstancia) {
                                        casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                }
                                if (respuestaServidor?.ok) {
                                    const data = respuestaServidor.ok
                                    const estadoPago = respuestaServidor.ok.global.estadoPagoIDV
                                    const detallesPagos = data.detallesPagos
                                    const totalReserva = detallesPagos.totalReserva
                                    const totalPagado = detallesPagos.totalPagado
                                    const faltantePorPagar = detallesPagos.faltantePorPagar
                                    const totalReembolsado = detallesPagos.totalReembolsado
                                    const porcentajeReembolsado = detallesPagos.porcentajeReembolsado
                                    const porcentajePagado = detallesPagos.porcentajePagado
                                    if (reservaAcutalRenderizada === reservaUID) {
                                        selectorTotalReservaEnPanelGlobal.innerHTML = totalReserva + "$"
                                    }
                                    if (!seleccionarInstancia) {


                                    }
                                    selectorTotalReserva.innerHTML = totalReserva + "$"
                                    selectorTotalPagado.innerHTML = totalPagado + "$"
                                    selectorFaltantePorPagar.innerHTML = faltantePorPagar + "$"
                                    selectorPorecentajeReembolsado.innerHTML = `Total reembolsado (${porcentajeReembolsado})`
                                    selectorPorecentajePagado.innerHTML = `Total pagado (${porcentajePagado})`
                                    selectorTotalReembolsado.innerHTML = totalReembolsado + "$"
                                    let estadoPagoUI
                                    if (estadoPago === "pagado") {
                                        estadoPagoUI = "Pagado"
                                    }
                                    if (estadoPago === "noPagado") {
                                        estadoPagoUI = "No pagado"
                                    }
                                    if (estadoPago === "pagadoParcialmente") {
                                        estadoPagoUI = "Pagado parcialmente"
                                    }
                                    if (estadoPago === "pagadoSuperadamente") {
                                        estadoPagoUI = "Pagado superadamente"
                                    }
                                    selectorEstadoPago.innerHTML = estadoPagoUI
                                }
                            },

                        },
                        servicios: {
                            arranque: async function (e) {
                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const instanciaUID_contenedorServicios = casaVitini.utilidades.codigoFechaInstancia()
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()

                                const contenedor = document.createElement("div")
                                contenedor.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "padding6"
                                )
                                contenedor.setAttribute("instanciaUID", instanciaUID_contenedorServicios)
                                contenedor.setAttribute("componente", "categoriaServicios")
                                contenedor.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(contenedor)
                                const reservaUI = document.querySelector("[reservaUID]")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                const reservaUID = reservaUI.getAttribute("reservaUID")

                                const transaccion = {
                                    reservaUID
                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"
                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "servicios",
                                    ]
                                }



                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const instanciaDestino = document.querySelector(`[componente=categoriaServicios][instanciaUID="${instanciaUID_contenedorServicios}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null
                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }
                                if (respuestaServidor?.ok) {

                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReserva_enlacesDePago_bloqueBotones")

                                    const boton = document.createElement("div")
                                    boton.classList.add("detallesReserva_transacciones_botonV1")
                                    boton.textContent = "Insertar servicio"
                                    boton.addEventListener("click", () => {
                                        this.componentesUI.insertarServicio.ui({
                                            instanciaUID_contenedorServicios: instanciaUID_contenedorServicios
                                        })
                                    })
                                    bloqueBotones.appendChild(boton)

                                    if (configuracionVista === "publica") {

                                    } else {
                                        instanciaDestino.appendChild(bloqueBotones)
                                    }

                                    const contenedorListaServicios = document.createElement("div")
                                    contenedorListaServicios.classList.add(
                                        "flexVertical",
                                        "gap6",
                                    )
                                    contenedorListaServicios.setAttribute("componente", "contenedorListaServiciosEnReserva")
                                    instanciaDestino.appendChild(contenedorListaServicios)

                                    instanciaDestino.style.justifyContent = "flex-start";
                                    const serviciosEnReserva = respuestaServidor.ok.servicios
                                    if (serviciosEnReserva.length === 0) {
                                        contenedorListaServicios.style.display = "none"

                                        const infoSinEnlaces = this.componentesUI.infoSinServiciosUI()
                                        instanciaDestino.appendChild(infoSinEnlaces)
                                    }
                                    if (serviciosEnReserva.length > 0) {
                                        const contenedorListaServicios = instanciaDestino.querySelector(`[componente=contenedorListaServiciosEnReserva]`)
                                        for (const servicioEnReserva of serviciosEnReserva) {


                                            const servicioUI = this.componentesUI.servicioUI({
                                                servicioUID_enReserva: servicioEnReserva.servicioUID,
                                                instanciaUID_contenedorServicios,
                                                nombreInterno: servicioEnReserva.nombre,
                                                contenedor: servicioEnReserva.contenedor,
                                                opcionesSeleccionadas: servicioEnReserva.opcionesSel

                                            })
                                            contenedorListaServicios.appendChild(servicioUI)
                                        }
                                    }
                                }
                            },
                            componentesUI: {
                                acutalizarServicioEnReserva: {

                                    ui: async function (data) {

                                        const servicioUID_enReserva = data.servicioUID_enReserva
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const main = document.querySelector("main")
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const instanciaUID_UIFlotanteServicios = ui.getAttribute("instanciaUID")
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        main.appendChild(ui)

                                        const botonCerrar = document.createElement("div")
                                        botonCerrar.classList.add("botonV1")
                                        botonCerrar.textContent = "Cerrar y volver"
                                        botonCerrar.setAttribute("boton", "cancelar")
                                        botonCerrar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        constructor.appendChild(botonCerrar)

                                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                                        constructor.appendChild(spinner)

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/servicios/obtenerDetallesDelServicioEnReserva",
                                            servicioUID_enReserva: String(servicioUID_enReserva),
                                            reservaUID: String(reservaUID)
                                        })
                                        console.log("respiestaServidor", respuestaServidor)
                                        const ui_enEspera = document.querySelector(`[instanciaUID="${instanciaUID_UIFlotanteServicios}"]`)
                                        if (!ui_enEspera) { return }
                                        if (respuestaServidor?.error) {
                                            const info = {
                                                titulo: "No existe ningúna servicio con ese identificador",
                                                descripcion: "Revisa el identificador porque este servicio que buscas no existe. Quizás este identificador existió y borraste esta servicio.."
                                            }
                                            casaVitini.ui.componentes.mensajeSimple(info)
                                        } else if (respuestaServidor?.ok) {
                                            constructor.innerHTML = null

                                            const botonCerrar = document.createElement("div")
                                            botonCerrar.classList.add("botonV1")
                                            botonCerrar.textContent = "Cerrar y volver"
                                            botonCerrar.setAttribute("boton", "cancelar")
                                            botonCerrar.addEventListener("click", () => {
                                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            })
                                            constructor.appendChild(botonCerrar)

                                            const servicio = respuestaServidor.servicio
                                            const servicioUID = servicio.servicioUID
                                            const contenedor = servicio.contenedor

                                            const servicioUI = casaVitini.ui.vistas.alojamiento.resumen.servicios.servicioUI({
                                                servicioUID,
                                                contenedor

                                            })
                                            servicioUI.setAttribute("estadoServicio", "selCompleta")
                                            servicioUI.querySelector("[componente=indicadorSelecion]").style.background = "rgb(0, 255, 0)"

                                            constructor.appendChild(servicioUI)
                                            const opcionesSel = servicio.opcionesSel

                                            Object.entries(opcionesSel).forEach(([grupoIDV, contenedorSel]) => {
                                                const selectorGrupo = servicioUI.querySelector(`[grupoIDV="${grupoIDV}"]`)
                                                contenedorSel.forEach(opcionIDV => {
                                                    const selectorOpcion = selectorGrupo.querySelector(`[opcionIDV="${opcionIDV}"]`)
                                                    selectorOpcion.setAttribute("estado", "activado")
                                                    selectorOpcion.querySelector("[componente=indicadorSelecion]").style.background = "rgb(0, 255, 0)"
                                                })
                                            })


                                            const botonInsertar = document.createElement("div")
                                            botonInsertar.classList.add("botonV1BlancoIzquierda")
                                            botonInsertar.textContent = "Actualizar servicio en reserva"
                                            botonInsertar.setAttribute("boton", "volver")
                                            botonInsertar.addEventListener("click", (e) => {
                                                const servicioUI_selector = e.target.closest("[componente=contenedor]").querySelector("[servicioUID]")

                                                const servicioUID = servicioUI_selector.getAttribute("servicioUID")
                                                const grupoDeOpciones = servicioUI_selector.querySelector("[area=grupoOpciones]").querySelectorAll("[componente=grupo]")
                                                const opcionesSeleccionadasDelServicio = {
                                                    servicioUID,
                                                    opcionesSeleccionadas: {}
                                                }
                                                const opcionesSeleccionadas = opcionesSeleccionadasDelServicio.opcionesSeleccionadas
                                                grupoDeOpciones.forEach((grupo) => {
                                                    const grupoIDV = grupo.getAttribute("grupoIDV")
                                                    opcionesSeleccionadas[grupoIDV] = []

                                                    const opcionesDelGrupoSeleccionadas = grupo.querySelectorAll("[selector=opcion][estado=activado]")
                                                    opcionesDelGrupoSeleccionadas.forEach(opcionSel => {
                                                        const opcionIDV = opcionSel.getAttribute("opcionIDV")
                                                        opcionesSeleccionadas[grupoIDV].push(opcionIDV)
                                                    })
                                                })

                                                // Poner una advertenc  ia superpuesta para al espera.
                                                this.confirmarActualizar({
                                                    servicioUID_enReserva,
                                                    reservaUID,
                                                    instanciaUID_UIFlotanteServicios,
                                                    instanciaUID_contenedorServicios,
                                                    opcionesSeleccionadasDelServicio
                                                })

                                            })
                                            constructor.appendChild(botonInsertar)
                                        }
                                    },
                                    confirmarActualizar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const servicioUID_enReserva = String(data.servicioUID_enReserva)
                                        const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const opcionesSeleccionadasDelServicio = data.opcionesSeleccionadasDelServicio

                                        const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                            mensaje: "Actualizando el servicio en la reserva",
                                            textoBoton: "ocultar",
                                            instanciaUID: instanciaPantallaCarga
                                        })

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/servicios/actualizarServicioEnReserva",
                                            reservaUID,
                                            servicioUID_enReserva,
                                            opcionesSeleccionadasDelServicio
                                        })


                                        document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`).remove()
                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            console.log("respuestaServidor", respuestaServidor)
                                            const servicioData = respuestaServidor.servicio
                                            const servicioUID_enReserva = servicioData.servicioUID
                                            const nombreInterno = servicioData.nombre
                                            const contenedor = servicioData.contenedor
                                            const opcionesSel = servicioData.opcionesSel


                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()

                                            const selectorContenedorServicios = document.querySelector(`[instanciaUID="${instanciaUID_contenedorServicios}"]`)
                                            if (!selectorContenedorServicios) {
                                                return
                                            }
                                            console.log("test")

                                            const servicioUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.servicios.componentesUI.servicioUI({
                                                servicioUID_enReserva: servicioUID_enReserva,
                                                instanciaUID_contenedorServicios,
                                                nombreInterno: nombreInterno,
                                                contenedor: contenedor,
                                                opcionesSeleccionadas: opcionesSel

                                            })
                                            const selectorInfo = selectorContenedorServicios.querySelector("[componente=contenedorInfoSinServicios]")
                                            selectorInfo?.remove()

                                            const selectorListaServicios = selectorContenedorServicios.querySelector("[componente=contenedorListaServiciosEnReserva]")
                                            selectorListaServicios.removeAttribute("style")

                                            const selContenedorServicio = selectorListaServicios.querySelector(`[servicioUID_enReserva="${servicioUID_enReserva}"]`)
                                            selectorListaServicios.replaceChild(servicioUI, selContenedorServicio);


                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },
                                },
                                insertarServicio: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_UIFlotanteServicios = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        main.appendChild(ui)

                                        await this.despliegeListaServicios({
                                            ui,
                                            instanciaUID_UIFlotanteServicios,
                                            instanciaUID_contenedorServicios,
                                            reservaUID
                                        })

                                    },
                                    despliegeListaServicios: async function (data) {

                                        const ui = data.ui
                                        const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const reservaUID = data.reservaUID

                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        constructor.innerHTML = null
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo servicios...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/servicios/obtenerServicios"
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_UIFlotanteServicios}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()
                                            constructor.appendChild(this.botonCancelar())

                                            const servicios = respuestaServidor.servicios

                                            const contenedor = document.createElement("div")
                                            contenedor.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap10",
                                            )
                                            constructor.appendChild(contenedor)
                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activada"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivada"
                                                }

                                            }

                                            servicios.forEach((detalles) => {
                                                const nombre = detalles.nombre
                                                const servicioUID = detalles.servicioUID
                                                const estadoIDV = detalles.estadoIDV
                                                const zonaIDV = detalles.zonaIDV
                                                const contenedorData = detalles.contenedor


                                                const contenedorServicio = document.createElement("div")
                                                contenedorServicio.setAttribute("servicioUID", servicioUID)
                                                contenedorServicio.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = nombre
                                                contenedorGlobal.appendChild(nombreOfertaUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado del servicio"
                                                contenedorGlobal.appendChild(estadoTitulo)


                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedorServicio.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )
                                                botonInsertar.textContent = "Seleccionar servicio"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.despliegeDeSeleccionEnServicio({
                                                        reservaUID,
                                                        servicioUID,
                                                        instanciaUID_UIFlotanteServicios,
                                                        instanciaUID_contenedorServicios,
                                                        ui,
                                                        constructor
                                                    })

                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir al servicio"
                                                botonVerOferta.setAttribute("href", "/administracion/servicios/servicio:" + servicioUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/servicios/servicio:" + servicioUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)

                                                contenedorServicio.appendChild(contendorBotones)
                                                contenedor.appendChild(contenedorServicio)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }
                                    },
                                    despliegeDeSeleccionEnServicio: async function (data) {

                                        const reservaUID = data.reservaUID
                                        const servicioUID = data.servicioUID
                                        const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const ui = data.ui
                                        const constructor = data.constructor
                                        constructor.innerHTML = null

                                        const botonCerrar = document.createElement("div")
                                        botonCerrar.classList.add("botonV1")
                                        botonCerrar.textContent = "Cerrar y volver"
                                        botonCerrar.setAttribute("boton", "cancelar")
                                        botonCerrar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        constructor.appendChild(botonCerrar)

                                        const spinner = casaVitini.ui.componentes.spinnerSimple()
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/servicios/detallesServicio",
                                            servicioUID: String(servicioUID)
                                        }
                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const ui_enEspera = document.querySelector(`[instanciaUID="${instanciaUID_UIFlotanteServicios}"]`)
                                        if (!ui_enEspera) { return }
                                        if (respuestaServidor?.error) {
                                            const info = {
                                                titulo: "No existe ningúna servicio con ese identificador",
                                                descripcion: "Revisa el identificador porque este servicio que buscas no existe. Quizás este identificador existió y borraste esta servicio.."
                                            }
                                            casaVitini.ui.componentes.mensajeSimple(info)
                                        } else if (respuestaServidor?.ok) {
                                            constructor.innerHTML = null

                                            const botonCerrar = document.createElement("div")
                                            botonCerrar.classList.add("botonV1")
                                            botonCerrar.textContent = "Cerrar y volver"
                                            botonCerrar.setAttribute("boton", "cancelar")
                                            botonCerrar.addEventListener("click", () => {
                                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            })
                                            constructor.appendChild(botonCerrar)

                                            const botonVolver = document.createElement("div")
                                            botonVolver.classList.add("botonV1BlancoIzquierda")
                                            botonVolver.textContent = "Volver a la lista de servicios"
                                            botonVolver.setAttribute("boton", "volver")
                                            botonVolver.addEventListener("click", () => {
                                                return this.despliegeListaServicios({
                                                    ui,
                                                    instanciaUID_UIFlotanteServicios,
                                                    instanciaUID_contenedorServicios,
                                                    reservaUID
                                                })
                                            })

                                            constructor.appendChild(botonVolver)

                                            const servicio = respuestaServidor.ok
                                            const servicioUID = servicio.servicioUID
                                            const contenedor = servicio.contenedor

                                            const servicioUI = casaVitini.ui.vistas.alojamiento.resumen.servicios.servicioUI({
                                                servicioUID,
                                                contenedor

                                            })
                                            constructor.appendChild(servicioUI)


                                            const botonInsertar = document.createElement("div")
                                            botonInsertar.classList.add("botonV1BlancoIzquierda")
                                            botonInsertar.textContent = "Insertar servicio en reserva"
                                            botonInsertar.setAttribute("boton", "volver")
                                            botonInsertar.addEventListener("click", (e) => {
                                                const servicioUI_selector = e.target.closest("[componente=contenedor]").querySelector("[servicioUID]")

                                                const servicioUID = servicioUI_selector.getAttribute("servicioUID")
                                                const grupoDeOpciones = servicioUI_selector.querySelector("[area=grupoOpciones]").querySelectorAll("[componente=grupo]")
                                                const opcionesSeleccionadasDelServicio = {
                                                    servicioUID,
                                                    opcionesSeleccionadas: {}
                                                }
                                                const opcionesSeleccionadas = opcionesSeleccionadasDelServicio.opcionesSeleccionadas
                                                grupoDeOpciones.forEach((grupo) => {
                                                    const grupoIDV = grupo.getAttribute("grupoIDV")
                                                    opcionesSeleccionadas[grupoIDV] = []

                                                    const opcionesDelGrupoSeleccionadas = grupo.querySelectorAll("[selector=opcion][estado=activado]")
                                                    opcionesDelGrupoSeleccionadas.forEach(opcionSel => {
                                                        const opcionIDV = opcionSel.getAttribute("opcionIDV")
                                                        opcionesSeleccionadas[grupoIDV].push(opcionIDV)
                                                    })
                                                })

                                                // Poner una advertenc  ia superpuesta para al espera.
                                                this.confirmarInsertar({
                                                    servicioUID,
                                                    reservaUID,
                                                    instanciaUID_UIFlotanteServicios,
                                                    instanciaUID_contenedorServicios,
                                                    opcionesSeleccionadasDelServicio
                                                })

                                            })
                                            constructor.appendChild(botonInsertar)
                                        }
                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const servicioUID = String(data.servicioUID)
                                        const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const opcionesSeleccionadasDelServicio = data.opcionesSeleccionadasDelServicio

                                        const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                            mensaje: "Insertando el servicio en la reserva",
                                            textoBoton: "ocultar",
                                            instanciaUID: instanciaPantallaCarga
                                        })

                                        const respuestaServidor = await casaVitini.shell.servidor({
                                            zona: "administracion/reservas/detallesReserva/servicios/insertarServicioEnReserva",
                                            reservaUID,
                                            servicioUID,
                                            opcionesSeleccionadasDelServicio
                                        })

                                        document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`).remove()
                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            const servicioData = respuestaServidor.servicio
                                            const servicioUID_enReserva = servicioData.servicioUID
                                            const nombreInterno = servicioData.nombre
                                            const contenedor = servicioData.contenedor
                                            const opcionesSel = servicioData.opcionesSel

                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()

                                            const selectorContenedorServicios = document.querySelector(`[instanciaUID="${instanciaUID_contenedorServicios}"]`)
                                            if (!selectorContenedorServicios) {
                                                return
                                            }
                                            const servicioUI = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.servicios.componentesUI.servicioUI({
                                                servicioUID_enReserva: servicioUID_enReserva,
                                                instanciaUID_contenedorServicios: instanciaUID_contenedorServicios,
                                                nombreInterno: nombreInterno,
                                                contenedor: contenedor,
                                                opcionesSeleccionadas: opcionesSel
                                            })
                                            const selectorInfo = selectorContenedorServicios.querySelector("[componente=contenedorInfoSinServicios]")
                                            selectorInfo?.remove()

                                            const selectorListaServicios = selectorContenedorServicios.querySelector("[componente=contenedorListaServiciosEnReserva]")
                                            selectorListaServicios.removeAttribute("style")
                                            selectorListaServicios.appendChild(servicioUI)

                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },
                                },
                                servicioUI: function (data) {

                                    const reservaUI = document.querySelector("[reservaUID]")
                                    const configuracionVista = reservaUI.getAttribute("configuracionVista")

                                    const servicioUID_enReserva = data.servicioUID_enReserva
                                    const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                    const nombreInterno = data.nombreInterno
                                    const opcionesSeleccionadas = data.opcionesSeleccionadas
                                    const contenedor = data.contenedor

                                    const definicion = contenedor.definicion
                                    const fechaFinal = contenedor.fechaFinal
                                    const duracionIDV = contenedor.duracionIDV
                                    const fechaInicio = contenedor.fechaInicio
                                    const tituloPublico = contenedor.tituloPublico
                                    const servicioUID = contenedor.servicioUID
                                    const disponibilidadIDV = contenedor.disponibilidadIDV
                                    const gruposDeOpciones = contenedor.gruposDeOpciones


                                    const diccionario = {
                                        disponibilidad: {
                                            constante: "Disponible",
                                            variable: "Disponibilidad variable"
                                        }
                                    }

                                    const servicioUI = document.createElement("div")
                                    servicioUI.setAttribute("servicioUID_enReserva", servicioUID_enReserva)
                                    servicioUI.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6",
                                        "backgroundGrey1",
                                        "borderRadius14"
                                    )
                                    const contenedorData = document.createElement("div")
                                    contenedorData.classList.add(
                                        "flexVertical",
                                        "gap6",
                                        "padding10"
                                    )
                                    servicioUI.appendChild(contenedorData)

                                    const contenedorNombreInterno = document.createElement("div")
                                    contenedorNombreInterno.classList.add(
                                        "flexVertical",
                                    )
                                    if (configuracionVista === "publica") {
                                    } else {
                                        contenedorData.appendChild(contenedorNombreInterno)
                                    }

                                    const tituluNombreInternoUI = document.createElement("p")
                                    tituluNombreInternoUI.textContent = `Nombre adminitrativo`
                                    contenedorNombreInterno.appendChild(tituluNombreInternoUI)

                                    const nombreInternoUI = document.createElement("p")
                                    nombreInternoUI.classList.add(
                                        "negrita")
                                    nombreInternoUI.textContent = `${nombreInterno}`
                                    contenedorNombreInterno.appendChild(nombreInternoUI)

                                    const contenedorNombrePublico = document.createElement("div")
                                    contenedorNombrePublico.classList.add(
                                        "flexVertical",
                                    )
                                    contenedorData.appendChild(contenedorNombrePublico)

                                    const tituluNombrePublico = document.createElement("p")
                                    tituluNombrePublico.textContent = `Nombre público`
                                    contenedorNombrePublico.appendChild(tituluNombrePublico)

                                    const titulo = document.createElement("p")
                                    titulo.classList.add(
                                        "negrita")
                                    titulo.textContent = tituloPublico
                                    contenedorNombrePublico.appendChild(titulo)


                                    const disponibilidadUI = document.createElement("p")
                                    disponibilidadUI.classList.add(
                                    )
                                    disponibilidadUI.textContent = diccionario.disponibilidad[disponibilidadIDV]
                                    contenedorData.appendChild(disponibilidadUI)


                                    if (disponibilidadIDV === "variable") {

                                        const info = document.createElement("p")
                                        info.classList.add(
                                        )
                                        info.textContent = `Este servicio tiene una disponibilidad limitada. Es por eso que si selecciona este servicio, nos pondremos en contacto con el titular de la reserva en las próximas horas para confirmarle la disponibilidad del servicio para su reserva.`
                                        contenedorData.appendChild(info)
                                    }



                                    if (duracionIDV === "rango") {
                                        const contenedorDuracion = document.createElement("div")
                                        contenedorDuracion.classList.add(
                                            "flexVertical",

                                        )
                                        contenedorData.appendChild(contenedorDuracion)

                                        const info = document.createElement("p")
                                        info.classList.add("negrita")
                                        info.textContent = `Servicio disponible solo desde ${fechaInicio} hata ${fechaFinal}. Ambas fechas incluidas.`
                                        contenedorDuracion.appendChild(info)

                                    }
                                    const definicionUI = document.createElement("p")
                                    definicionUI.classList.add(
                                    )
                                    definicionUI.textContent = definicion
                                    contenedorData.appendChild(definicionUI)





                                    Object.entries(gruposDeOpciones).forEach(([grupoIDV, gDP]) => {
                                        const nombreGrupo = gDP.nombreGrupo
                                        const opcionesGrupo = gDP.opcionesGrupo

                                        const contenedorGrupo = document.createElement("div")
                                        contenedorGrupo.setAttribute("grupoIDV", grupoIDV)
                                        contenedorGrupo.classList.add(
                                            "flexVertical", "gap6", "borderGrey1", "borderRadius14", "padding6"
                                        )


                                        const tituloGrupo = document.createElement("p")
                                        tituloGrupo.classList.add("negrita", "padding10")
                                        tituloGrupo.textContent = nombreGrupo
                                        contenedorGrupo.appendChild(tituloGrupo)


                                        const contenedorOpcionesGrupo = document.createElement("div")
                                        contenedorOpcionesGrupo.classList.add(
                                            "flexVertical", "gap6"
                                        )
                                        contenedorGrupo.appendChild(contenedorOpcionesGrupo)

                                        let interruptor = false

                                        opcionesGrupo.forEach((op) => {
                                            const opcionIDV = op.opcionIDV
                                            const nombreOpcion = op.nombreOpcion
                                            const precioOpcion = op.precioOpcion ? op.precioOpcion + "$" : "0.00$ (Sin coste añadido)"

                                            const selectorOpcionesGrupo = opcionesSeleccionadas[grupoIDV] || []
                                            if (selectorOpcionesGrupo.includes(opcionIDV)) {
                                                interruptor = true
                                                const contenedorOpcion = document.createElement("div")
                                                contenedorOpcion.classList.add(
                                                    "flexVertical", "gap6", "backgroundGrey1", "borderRadius10", "padding14"
                                                )
                                                contenedorOpcionesGrupo.appendChild(contenedorOpcion)

                                                // const grupoRenderizado_selector = servicioUI.querySelector(`[grupoIDV="${grupoIDV}"]`)
                                                // if (!grupoRenderizado_selector) {
                                                //     servicioUI.appendChild(contenedorGrupo)
                                                // }

                                                const opcionUI = document.createElement("p")
                                                opcionUI.setAttribute("opcionIDV", opcionIDV)

                                                opcionUI.textContent = nombreOpcion
                                                contenedorOpcion.appendChild(opcionUI)


                                                const precioUI = document.createElement("p")
                                                precioUI.setAttribute("opcionIDV", opcionIDV)
                                                precioUI.classList.add(
                                                    "textoNegrita"
                                                )
                                                precioUI.textContent = precioOpcion
                                                contenedorOpcion.appendChild(precioUI)
                                            }
                                        })
                                        if (interruptor) {
                                            servicioUI.appendChild(contenedorGrupo)
                                        }
                                    })

                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6"
                                    )

                                    if (configuracionVista === "publica") {
                                    } else {
                                        servicioUI.appendChild(contenedorBotones)
                                    }


                                    const botonModificar = document.createElement("div")
                                    botonModificar.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonModificar.textContent = "Modificar servicio en reserva"
                                    botonModificar.addEventListener("click", () => {

                                        this.acutalizarServicioEnReserva.ui({
                                            servicioUID_enReserva,
                                            instanciaUID_contenedorServicios
                                        })
                                    })
                                    contenedorBotones.appendChild(botonModificar)


                                    const botonIr = document.createElement("a")
                                    botonIr.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonIr.textContent = "Ir al servicio"
                                    botonIr.setAttribute("href", "/administracion/servicios/servicio:" + servicioUID)
                                    botonIr.setAttribute("target", "_blank")
                                    contenedorBotones.appendChild(botonIr)

                                    const botonEliminar = document.createElement("div")
                                    botonEliminar.classList.add("administracion_reservas_detallesReservas_enlacesDePago_botonV1")
                                    botonEliminar.textContent = "Eliminar servicio de la reserva"
                                    botonEliminar.addEventListener("click", () => {
                                        this.
                                            eliminarServicio
                                            .ui({
                                                instanciaUID_contenedorServicios,
                                                servicioUID_enReserva,
                                                nombreInterno
                                            })
                                    })
                                    contenedorBotones.appendChild(botonEliminar)



                                    return servicioUI
                                },
                                eliminarServicio: {
                                    ui: async function (data) {
                                        const nombreInterno = data.nombreInterno
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                        const servicioUID_enReserva = data.servicioUID_enReserva

                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        const instanciaUID_eliminarServicio = ui.getAttribute("instanciaUID")
                                        const constructor = ui.querySelector("[componente=constructor]")

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Confirmar eliminar el servicio ${nombreInterno} de la reserva`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = "Var a eliminar el servicio de la reserva, ¿Estas de acuerdo?"

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Comfirmar la eliminacion"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarEliminar({
                                                servicioUID_enReserva,
                                                instanciaUID_eliminarServicio,
                                                instanciaUID_contenedorServicios
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"
                                        document.querySelector("main").appendChild(ui)

                                    },
                                    confirmarEliminar: async function (data) {
                                        const servicioUID_enReserva = String(data.servicioUID_enReserva)
                                        const instanciaUID_eliminarServicio = data.instanciaUID_eliminarServicio
                                        const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios

                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarServicio}"]`)
                                        const contenedor = ui.querySelector("[componente=constructor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Eliminado servicio en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/servicios/eliminarServicioEnReserva",
                                            servicioUID_enReserva
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.actualizarReservaRenderizada()
                                            const selectorContenedorServicios = document.querySelector(`[instanciaUID="${instanciaUID_contenedorServicios}"]`)
                                            if (!selectorContenedorServicios) {
                                                return
                                            }
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            selectorContenedorServicios.querySelector(`[servicioUID_enReserva="${servicioUID_enReserva}"]`)?.remove()

                                            const selectorContenedoresDeServiciosRenderizados = selectorContenedorServicios.querySelectorAll("[servicioUID_enReserva]")
                                            if (selectorContenedoresDeServiciosRenderizados.length === 0) {
                                                selectorContenedorServicios.querySelector("[componente=contenedorListaServiciosEnReserva]").style.display = "none"
                                                const infoSinEnlaces = casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.servicios.componentesUI.infoSinServiciosUI()

                                                selectorContenedorServicios.appendChild(infoSinEnlaces)
                                            }
                                        }

                                    },

                                },
                                infoSinServiciosUI: () => {
                                    const infoSinEnlaces = document.createElement("div")
                                    infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                                    infoSinEnlaces.setAttribute("componente", "contenedorInfoSinServicios")
                                    infoSinEnlaces.textContent = "No hay ningún servicio en la reserva."
                                    return infoSinEnlaces
                                }
                            },

                        },
                        desgloseTotal: {
                            arranque: async function () {
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                document.querySelector(`[categoriaReserva=desgloseTotal]`).setAttribute("estadoCategoria", "actual")
                                const reservaUI = document.querySelector("[reservaUID]")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                const reservaUID = reservaUI.getAttribute("reservaUID")


                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                contenedorDinamico.style.background = "transparent"
                                const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()
                                const contenedorDesgloseDelTotal = document.createElement("div")
                                contenedorDesgloseDelTotal.classList.add("administracion_reserver_detallesReserva_contenedorDesgloseTotal")
                                contenedorDesgloseDelTotal.setAttribute("instanciaUID", instanciaUID)
                                contenedorDesgloseDelTotal.setAttribute("componente", "contenedorDesgloseTotal")
                                contenedorDesgloseDelTotal.appendChild(spinnerPorRenderizar)
                                contenedorDinamico.appendChild(contenedorDesgloseDelTotal)
                                const transaccion = {
                                    reservaUID

                                }

                                if (configuracionVista === "publica") {
                                    transaccion.zona = "miCasa/misReservas/detallesReserva"
                                } else {
                                    transaccion.zona = "administracion/reservas/detallesReserva/global/obtenerReserva"
                                    transaccion.capas = [
                                        "desgloseFinanciero",
                                    ]
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                const instanciaDestino = document.querySelector(`[componente=contenedorDesgloseTotal][instanciaUID="${instanciaUID}"]`)
                                if (!instanciaDestino) { return }
                                instanciaDestino.innerHTML = null

                                if (respuestaServidor?.error) {
                                    const errorUI = document.createElement("p")
                                    errorUI.classList.add("errorCategorialGlobal")
                                    errorUI.textContent = respuestaServidor?.error
                                    instanciaDestino.appendChild(errorUI)
                                }

                                if (respuestaServidor?.ok) {

                                    const panelBotones = document.createElement("nav")
                                    panelBotones.classList.add(
                                        "borderRadius10",
                                        "flexHorizontal",
                                        "gap6",
                                        "paddinHorizontal6",
                                        "paddinTop6",
                                        "elementosExpandidos",

                                    )


                                    const botonInsertarDescuento = document.createElement("div")
                                    botonInsertarDescuento.classList.add(
                                        "comportamientoBoton",
                                        "botonV3",
                                        "width100"
                                    )
                                    botonInsertarDescuento.textContent = "Insertar descuento"
                                    botonInsertarDescuento.addEventListener("click", () => {
                                        this.componentesUI.insertarDescuentos.ui({
                                            instanciaUID_contenedorFinanciero: instanciaUID
                                        })
                                    })
                                    panelBotones.appendChild(botonInsertarDescuento)

                                    const botonDescuentosCompatibles = document.createElement("div")
                                    botonDescuentosCompatibles.classList.add(
                                        "comportamientoBoton",
                                        "botonV3",
                                        "width100"
                                    )
                                    botonDescuentosCompatibles.textContent = "Descuentos compatibles"
                                    panelBotones.appendChild(botonDescuentosCompatibles)

                                    const botonSobreControlDePrecios = document.createElement("div")
                                    botonSobreControlDePrecios.classList.add(
                                        "comportamientoBoton",
                                        "botonV1",
                                        "width100"
                                    )
                                    botonSobreControlDePrecios.textContent = "Sobre control de precios"
                                    botonSobreControlDePrecios.addEventListener("click", () => {
                                        this.componentesUI.sobreControlPrecios.arranque()
                                    })
                                    panelBotones.appendChild(botonSobreControlDePrecios)

                                    const botonReconstruirTotal = document.createElement("div")
                                    botonReconstruirTotal.classList.add(
                                        "comportamientoBoton",
                                        "botonV1",
                                        "width100"
                                    )
                                    botonReconstruirTotal.textContent = "Reconstruir total"
                                    panelBotones.appendChild(botonReconstruirTotal)

                                    let modoUI_contenedorFinanciero
                                    if (configuracionVista === "publica") {
                                        modoUI_contenedorFinanciero = "plaza"
                                    } else {
                                        modoUI_contenedorFinanciero = "administracion"
                                    }

                                    const contenedorFinanciero = respuestaServidor.ok.contenedorFinanciero

                                    casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                        destino: `[instanciaUID="${instanciaUID}"][componente=contenedorDesgloseTotal]`,
                                        contenedorFinanciero,
                                        modoUI: modoUI_contenedorFinanciero

                                    })



                                }
                            },

                            componentesUI: {
                                insertarDescuentos: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_insertarDescuentosUI = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        main.appendChild(ui)
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo ofertas...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/ofertas/listasOfertasAdministracion"
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()
                                            constructor.appendChild(this.botonCancelar())

                                            const ofertas = respuestaServidor.ok

                                            const contenedorOfertas = document.createElement("div")
                                            contenedorOfertas.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap10",
                                            )
                                            constructor.appendChild(contenedorOfertas)
                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activada"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivada"
                                                }

                                            }

                                            ofertas.forEach((detalles) => {
                                                const nombreOferta = detalles.nombreOferta
                                                const ofertaUID = detalles.ofertaUID
                                                const fechaInicio = detalles.fechaInicio
                                                const fechaFinal = detalles.fechaFinal
                                                const estadoIDV = detalles.estadoIDV
                                                const zonaIDV = detalles.zonaIDV


                                                const contenedorOferta = document.createElement("div")
                                                contenedorOferta.setAttribute("ofertaUID", ofertaUID)
                                                contenedorOferta.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = nombreOferta
                                                contenedorGlobal.appendChild(nombreOfertaUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado de la oferta"
                                                contenedorGlobal.appendChild(estadoTitulo)


                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedorOferta.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )
                                                botonInsertar.textContent = "Insertar descuento en la reserva"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.confirmarInsertar({
                                                        reservaUID,
                                                        ofertaUID,
                                                        instanciaUID_insertarDescuentosUI,
                                                        instanciaUID_contenedorFinanciero
                                                    })

                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir a la oferta"
                                                botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)


                                                contenedorOferta.appendChild(contendorBotones)

                                                contenedorOfertas.appendChild(contenedorOferta)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }

                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const ofertaUID = String(data.ofertaUID)
                                        const instanciaUID_insertarDescuentosUI = data.instanciaUID_insertarDescuentosUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Insertando oferta en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/descuentos/insertarDescuentoPorAdministrador",
                                            reservaUID,
                                            ofertaUID
                                        }


                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {

                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },

                                },
                                insertarOfertasCompatibles: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_insertarDescuentosUI = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        main.appendChild(ui)
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo ofertas compatibles con la oferta...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/descuentos/obtenerDescuentosCompatiblesConLaReserva",
                                            reservaUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()
                                            const ofertas = respuestaServidor.ofertasCompatibles
                                            if (ofertas.length > 0) {
                                                constructor.appendChild(this.botonCancelar())
                                            } else {
                                                const info = document.createElement("p")
                                                info.classList.add("textoCentrado")
                                                info.textContent = "No hay ofertas compatibles con esta reserva. Si quieres insertar ofertas no compatibles de manera arbitraria, a esta reserva usa el botón de insertar descuentos."
                                                constructor.appendChild(info)
                                            }

                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activada"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivada"
                                                }
                                            }

                                            const contenedorOfertas = document.createElement("div")
                                            contenedorOfertas.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap10",
                                            )
                                            constructor.appendChild(contenedorOfertas)

                                            ofertas.forEach((contenedorOferta) => {
                                                const detalles = contenedorOferta.oferta
                                                const nombreOferta = detalles.nombreOferta
                                                const ofertaUID = detalles.ofertaUID
                                                const fechaInicio = detalles.fechaInicio
                                                const fechaFinal = detalles.fechaFinal
                                                const estadoIDV = detalles.estadoIDV
                                                const zonaIDV = detalles.zonaIDV

                                                const contenedorOfertaUI = document.createElement("div")
                                                contenedorOfertaUI.setAttribute("ofertaUID", ofertaUID)
                                                contenedorOfertaUI.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = nombreOferta
                                                contenedorGlobal.appendChild(nombreOfertaUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado de la oferta"
                                                contenedorGlobal.appendChild(estadoTitulo)

                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedorOfertaUI.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )

                                                botonInsertar.textContent = "Insertar descuento en la reserva"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.confirmarInsertarCompatible({
                                                        reservaUID,
                                                        ofertaUID,
                                                        instanciaUID_insertarDescuentosUI,
                                                        instanciaUID_contenedorFinanciero
                                                    })
                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir a la oferta"
                                                botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)

                                                contenedorOfertaUI.appendChild(contendorBotones)

                                                contenedorOfertas.appendChild(contenedorOfertaUI)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }

                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertarCompatible: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const ofertaUID = String(data.ofertaUID)
                                        const instanciaUID_insertarDescuentosUI = data.instanciaUID_insertarDescuentosUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Insertando oferta en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/descuentos/insertarDescuentoPorCompatible",
                                            reservaUID,
                                            ofertaUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },

                                },
                                sobreControlPrecios: {
                                    componentesUI: {
                                        botonAlterarPrecio: () => {
                                            const botonDeslegarOpciones = document.createElement("div")
                                            botonDeslegarOpciones.classList.add(
                                                "padding6",
                                                "botonV1",
                                                "comportamientoBoton"
                                            )
                                            botonDeslegarOpciones.textContent = "Alterar precio"
                                            return botonDeslegarOpciones
                                        },
                                        nocheUI: async function (data) {
                                            const fechaNoche = data.fechaNoche
                                            const apartamentoIDV = data.apartamentoIDV
                                            const main = document.querySelector("main")
                                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                            const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                            const instanciaUID_sobreControlUI = ui.getAttribute("instanciaUID")
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            main.appendChild(ui)
                                            const contenedor = ui.querySelector("[componente=contenedor]")
                                            const spinner = casaVitini.ui.componentes.spinner({
                                                mensaje: "Obteniendo detalles de la noche...",
                                                textoBoton: "Cancelar"
                                            })
                                            contenedor.appendChild(spinner)

                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/sobreControlPrecios/obtenerDetallesSobreControlNoche",
                                                reservaUID,
                                                apartamentoIDV: apartamentoIDV,
                                                fechaNoche: fechaNoche
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)

                                            if (!uiRenderizada) { return }
                                            if (respuestaServidor?.error) {
                                                uiRenderizada?.remove()
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor.ok) {
                                                contenedor.innerHTML = null

                                                const data = respuestaServidor.ok
                                                const instantanea = data.instantaneaNetoApartamento
                                                const apartamentoUI = instantanea.apartamentoUI
                                                const precioNetoApartamento = instantanea.precioNetoApartamento

                                                const sobreControl = data?.sobreControl
                                                const detallesSobreControl = sobreControl.detallesSobreControl || {}
                                                const operacion = detallesSobreControl?.operacion
                                                const valorSobreControl = detallesSobreControl?.valor || "0.00"

                                                const titulo = document.createElement("div")
                                                titulo.classList.add(
                                                    "textSize16",
                                                    "textoCentrado"
                                                )
                                                titulo.textContent = `Detalles del ${apartamentoUI} en la noche de ${fechaNoche}`
                                                contenedor.appendChild(titulo)

                                                const contenedorValorOrigen = document.createElement("div")
                                                contenedorValorOrigen.classList.add(
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding12",
                                                    "borderRadius8"
                                                )
                                                contenedor.appendChild(contenedorValorOrigen)

                                                const tituloValorOrigen = document.createElement("div")
                                                tituloValorOrigen.textContent = "Valor origen"
                                                contenedorValorOrigen.appendChild(tituloValorOrigen)

                                                const datoValorOrigen = document.createElement("div")
                                                datoValorOrigen.classList.add(
                                                    "negrita"
                                                )
                                                datoValorOrigen.textContent = precioNetoApartamento
                                                contenedorValorOrigen.appendChild(datoValorOrigen)

                                                const selectorTipoSobreControl = document.createElement("select")
                                                selectorTipoSobreControl.classList.add(
                                                    "selectorLista"
                                                )
                                                selectorTipoSobreControl.setAttribute("campo", "tipoOperacion")

                                                const tituloSelector = document.createElement("option");
                                                if (!operacion) {
                                                    tituloSelector.selected = true;
                                                }
                                                tituloSelector.disabled = true;
                                                tituloSelector.text = "Seleccionar el tipo de sobre control";
                                                selectorTipoSobreControl.appendChild(tituloSelector);

                                                const opciones = [
                                                    { value: "aumentarPorPorcentaje", text: "Aumentar por porcentaje" },
                                                    { value: "reducirPorPorcentaje", text: "Reducir por porcentaje" },
                                                    { value: "aumentarPorCantidadFija", text: "Aumentar por cantidad fija" },
                                                    { value: "reducirPorCantidadFila", text: "Reducir por cantidad fila" },
                                                    { value: "establecerCantidad", text: "Establecer cantidad" }
                                                ]
                                                for (const opcionData of opciones) {
                                                    const value = opcionData.value
                                                    const text = opcionData.text
                                                    const opcion = document.createElement("option");
                                                    opcion.value = opcionData.value;
                                                    opcion.text = opcionData.text;
                                                    if (operacion === value) {
                                                        opcion.selected = true;
                                                    }
                                                    selectorTipoSobreControl.appendChild(opcion);
                                                }
                                                contenedor.appendChild(selectorTipoSobreControl)
                                                const campoValor = document.createElement("input")
                                                campoValor.classList.add(
                                                    "campoTexto"
                                                )
                                                campoValor.setAttribute("campo", "valor")
                                                campoValor.placeholder = "Escribe la cantidad con dos decimales separados por punto, por ejemplo 0.00"
                                                campoValor.value = valorSobreControl

                                                contenedor.appendChild(campoValor)


                                                if (Object.keys(detallesSobreControl).length > 0) {
                                                    const boton = document.createElement("div")
                                                    boton.classList.add("botonV1")
                                                    boton.textContent = "Actualizar sobre control de precio"
                                                    boton.addEventListener("click", () => {
                                                        this.confirmar({
                                                            instanciaUID_sobreControlUI,
                                                            instanciaUID_contenedorFinanciero,
                                                            reservaUID,
                                                            apartamentoIDV,
                                                            tipoOperacion: selectorTipoSobreControl.value,
                                                            fechaNoche,
                                                            valorSobreControl: campoValor.value
                                                        })
                                                    })
                                                    contenedor.appendChild(boton)
                                                    const botonEliminar = document.createElement("div")
                                                    botonEliminar.classList.add("botonV1")
                                                    botonEliminar.textContent = "Eliminar sobre control de precio"
                                                    botonEliminar.addEventListener("click", () => {
                                                        this.eliminarSobreControl({
                                                            instanciaUID_sobreControlUI,
                                                            instanciaUID_contenedorFinanciero,
                                                            reservaUID,
                                                            apartamentoIDV,
                                                            fechaNoche
                                                        })
                                                    })
                                                    contenedor.appendChild(botonEliminar)
                                                } else {
                                                    const boton = document.createElement("div")
                                                    boton.classList.add("botonV1")
                                                    boton.textContent = "Crear sobre control de precio"
                                                    boton.addEventListener("click", () => {
                                                        this.confirmar({
                                                            instanciaUID_sobreControlUI,
                                                            instanciaUID_contenedorFinanciero,
                                                            reservaUID,
                                                            apartamentoIDV,
                                                            tipoOperacion: selectorTipoSobreControl.value,
                                                            fechaNoche,
                                                            valorSobreControl: campoValor.value
                                                        })
                                                    })
                                                    contenedor.appendChild(boton)
                                                }

                                                const botonCancelar = document.createElement("div")
                                                botonCancelar.classList.add("botonV1")
                                                botonCancelar.textContent = "Cancelar y volver al desglose por noche."
                                                botonCancelar.addEventListener("click", () => {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                })
                                                contenedor.appendChild(botonCancelar)
                                            }
                                        },
                                        confirmar: async (data) => {
                                            const instanciaUID_sobreControlUI = data.instanciaUID_sobreControlUI
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            const reservaUID = data.reservaUID
                                            const apartamentoIDV = data.apartamentoIDV
                                            const tipoOperacion = data.tipoOperacion
                                            const fechaNoche = data.fechaNoche
                                            const valorSobreControl = data.valorSobreControl
                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/sobreControlPrecios/actualizarSobreControlNoche",
                                                reservaUID,
                                                apartamentoIDV,
                                                fechaNoche,
                                                tipoOperacion,
                                                valorSobreControl
                                            }
                                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                            const contenedor = uiRenderizada.querySelector("[componente=contenedor]")


                                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                mensaje: "Aplicando sobrecontrol de precio",
                                                textoBoton: "ocultar",
                                                instanciaUID: instanciaPantallaCarga
                                            })

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const instanciaPantallaCargaUI = document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`)
                                            instanciaPantallaCargaUI?.remove()

                                            const uiContenedorFinanciero = document.querySelector(`[instanciaUID="${instanciaUID_contenedorFinanciero}"]`)


                                            if (respuestaServidor?.error) {
                                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor.ok) {
                                                const sobreControlUI = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                                if (sobreControlUI) {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                }

                                                const selectorDesgloseEnPantalla = document.querySelector(`[reservaUID="${reservaUID}"] [componente=contenedorDesgloseTotal]`)
                                                if (!selectorDesgloseEnPantalla) {
                                                    return
                                                }
                                                return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                    instanciaUID_contenedorFinanciero,
                                                    reservaUID
                                                })
                                            }
                                        },
                                        eliminarSobreControl: async (data) => {
                                            const instanciaUID_sobreControlUI = data.instanciaUID_sobreControlUI
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            const reservaUID = data.reservaUID
                                            const apartamentoIDV = data.apartamentoIDV
                                            const fechaNoche = data.fechaNoche
                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/sobreControlPrecios/eliminarSobreControlNoche",
                                                reservaUID,
                                                apartamentoIDV,
                                                fechaNoche
                                            }
                                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                            const contenedor = uiRenderizada.querySelector("[componente=contenedor]")

                                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                                mensaje: "Eliminado sobrecontrol de precio",
                                                textoBoton: "ocultar",
                                                instanciaUID: instanciaPantallaCarga
                                            })

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const instanciaPantallaCargaUI = document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`)
                                            instanciaPantallaCargaUI?.remove()

                                            if (respuestaServidor?.error) {
                                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor.ok) {
                                                const sobreControlUI = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                                if (sobreControlUI) {
                                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                }

                                                const selectorDesgloseEnPantalla = document.querySelector(`[reservaUID="${reservaUID}"] [componente=contenedorDesgloseTotal]`)
                                                if (!selectorDesgloseEnPantalla) {
                                                    return
                                                }
                                                return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                    instanciaUID_contenedorFinanciero,
                                                    reservaUID
                                                })
                                            }
                                        }
                                    },
                                },
                                eliminarOfertaEnReserva: {
                                    ui: async function (data) {

                                        const nombreOferta = data.nombreOferta
                                        const ofertaUID = data.ofertaUID
                                        const posicion = data.posicion
                                        const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const origen = data.origen

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        const instanciaUID = pantallaInmersiva.getAttribute("instanciaUID")
                                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.classList.add(
                                            "negrita"
                                        )
                                        titulo.textContent = nombreOferta
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = `Confirmas o no la eliminación de la oferta de la reserva, ¿Estás de acuerdo?`

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Confirmar la eliminación de la oferta de esta reserva"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmar({
                                                reservaUID,
                                                ofertaUID,
                                                posicion,
                                                origen,
                                                instanciaUID
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver a la reserva"
                                        document.querySelector("main").appendChild(pantallaInmersiva)

                                    },
                                    confirmar: async (data) => {

                                        const ofertaUID = data.ofertaUID
                                        const posicion = data.posicion
                                        const reservaUID = data.reservaUID
                                        const origen = data.origen

                                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                        const mensaje = "Elimiando oferta de la reserva..."
                                        const datosPantallaSuperpuesta = {
                                            instanciaUID: instanciaUID,
                                            mensaje: mensaje
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/descuentos/eliminarDescuentoEnReserva",
                                            reservaUID: String(reservaUID),
                                            ofertaUID: String(ofertaUID),
                                            origen,
                                            posicion: String(posicion)
                                        }


                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                        instanciaRenderizada.remove()

                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                reservaUID
                                            })
                                        }
                                    }

                                },
                                actualizarEstadoAutorizacion: async (data) => {

                                    const ofertaUID = data.ofertaUID
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const e = data.e
                                    const area = e.target.closest("[ofertaUID][posicion]")
                                    const autorizacionUI = area.querySelector("[dato=autorizacion]")
                                    const estadoActualData = area.querySelector("[estadoActual]")
                                    const estadoActual = estadoActualData.getAttribute("estadoActual")




                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/descuentos/actualizarAutorizacionDescuentoCompatible",
                                        reservaUID: String(reservaUID),
                                        ofertaUID: String(ofertaUID),
                                    }

                                    if (estadoActual === "aceptada") {
                                        autorizacionUI.textContent = "Rechazando..."
                                        transaccion.nuevaAutorizacion = "rechazada"
                                    } else if (estadoActual === "rechazada") {
                                        autorizacionUI.textContent = "Aceptando..."
                                        transaccion.nuevaAutorizacion = "aceptada"
                                    }



                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                    if (respuestaServidor?.error) {
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const estadoAutorizado = respuestaServidor.autorizacion
                                        estadoActualData.setAttribute("estadoActual", estadoAutorizado)

                                        if (estadoAutorizado === "aceptada") {
                                            autorizacionUI.textContent = "Aceptada"
                                            estadoActualData.textContent = "Rechazar oferta"
                                        } else if (estadoAutorizado === "rechazada") {
                                            autorizacionUI.textContent = "Rechazada"
                                            estadoActualData.textContent = "Aceptar oferta"
                                        }
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                            reservaUID
                                        })
                                    }
                                },
                                insertarImpuesto: {
                                    ui: async function (data) {
                                        const main = document.querySelector("main")
                                        const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const reservaUID = main.querySelector("[reservaUID]").getAttribute("reservaUID")
                                        const instanciaUID_insertarImpuestoUI = ui.getAttribute("instanciaUID")
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        main.appendChild(ui)
                                        const constructor = ui.querySelector("[componente=contenedor]")
                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Obteniendo impuestos...",
                                            textoBoton: "Cancelar"
                                        })
                                        constructor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/impuestos/listarTodosLosImpuestos"
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarImpuestoUI}"]`)
                                        if (!uiRenderizada) { return }
                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            spinner.remove()
                                            constructor.appendChild(this.botonCancelar())

                                            const impuestos = respuestaServidor.impuestos

                                            const contenedorOfertas = document.createElement("div")
                                            contenedorOfertas.classList.add(
                                                "maxWidth1280px",
                                                "width100",
                                                "flexVertical",
                                                "gap6",
                                            )
                                            constructor.appendChild(contenedorOfertas)
                                            const estadoUI_ = (estadoIDV) => {

                                                if (estadoIDV === "activado") {
                                                    return "Activada"
                                                } else if (estadoIDV === "desactivado") {
                                                    return "Desactivada"
                                                }

                                            }

                                            impuestos.forEach((impuesto) => {
                                                const impuestoUID = impuesto.impuestoUID
                                                const nombre = impuesto.nombre
                                                const tipoImpositivo = impuesto.tipoImpositivo
                                                const tipoValorIDV = impuesto.tipoValorIDV
                                                const entidadIDV = impuesto.entidadIDV
                                                const estadoIDV = impuesto.estadoIDV


                                                const contenedorOferta = document.createElement("div")
                                                contenedorOferta.setAttribute("impuestoUID", impuestoUID)
                                                contenedorOferta.classList.add(
                                                    "borderRadius12",
                                                    "width100",
                                                    "flexVertical",
                                                    "backgroundGrey1",
                                                    "padding6",
                                                    "gap10",
                                                )

                                                const contenedorGlobal = document.createElement("div")
                                                contenedorGlobal.classList.add(
                                                    "flexVertical",
                                                    "padding6",
                                                    "gap6"
                                                )

                                                const nombreOfertaUI = document.createElement("div")
                                                nombreOfertaUI.classList.add("negrita")
                                                nombreOfertaUI.textContent = nombre
                                                contenedorGlobal.appendChild(nombreOfertaUI)

                                                const estadoTitulo = document.createElement("div")
                                                estadoTitulo.textContent = "Estado del impuesto"
                                                contenedorGlobal.appendChild(estadoTitulo)


                                                const estadoUI = document.createElement("div")
                                                estadoUI.classList.add("negrita")
                                                estadoUI.textContent = estadoUI_(estadoIDV)
                                                contenedorGlobal.appendChild(estadoUI)
                                                contenedorOferta.appendChild(contenedorGlobal)

                                                const contendorBotones = document.createElement("div")
                                                contendorBotones.classList.add(
                                                    "flexHorizontal",
                                                    "gap6",
                                                )

                                                const botonInsertar = document.createElement("div")
                                                botonInsertar.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8"
                                                )
                                                botonInsertar.textContent = "Insertar impuesto en la reserva"
                                                botonInsertar.addEventListener("click", () => {
                                                    this.confirmarInsertar({
                                                        reservaUID,
                                                        impuestoUID,
                                                        instanciaUID_insertarImpuestoUI,
                                                        instanciaUID_contenedorFinanciero
                                                    })

                                                })
                                                contendorBotones.appendChild(botonInsertar)

                                                const botonVerOferta = document.createElement("a")
                                                botonVerOferta.classList.add(
                                                    "borderRadius8",
                                                    "backgroundGrey1",
                                                    "comportamientoBoton",
                                                    "padding8",
                                                    "limpiezaBotonA"
                                                )
                                                botonVerOferta.textContent = "Ir al impuesto"
                                                botonVerOferta.setAttribute("href", "/administracion/impuestos/" + impuestoUID)
                                                botonVerOferta.setAttribute("vista", "/administracion/impuestos/" + impuestoUID)
                                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                                contendorBotones.appendChild(botonVerOferta)


                                                contenedorOferta.appendChild(contendorBotones)

                                                contenedorOfertas.appendChild(contenedorOferta)
                                            })
                                            constructor.appendChild(this.botonCancelar())

                                        }

                                    },
                                    botonCancelar: () => {
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cerrar y volver a la reserva"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        return botonCancelar
                                    },
                                    confirmarInsertar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const impuestoUID = String(data.impuestoUID)
                                        const instanciaUID_insertarImpuestoUI = data.instanciaUID_insertarImpuestoUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarImpuestoUI}"]`)
                                        const contenedor = ui.querySelector("[componente=contenedor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Insertando oferta en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/impuestos/insertarImpuestoEnReserva",
                                            reservaUID,
                                            impuestoUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },

                                },
                                eliminarImpuesto: {
                                    ui: async function (data) {
                                        const nombreImpuesto = data.nombreImpuesto
                                        const impuestoUID = data.impuestoUID
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                        const instanciaUID_eliminarImpuestoUI = pantallaInmersiva.getAttribute("instanciaUID")


                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Confirmar eliminar impuesto ${nombreImpuesto} de la reserva`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = "Var a eliminar el impuesto de la reserva, ¿Estas de acuerdo ? "

                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Comfirmar la eliminacion"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarEliminar({
                                                impuestoUID,
                                                reservaUID,
                                                instanciaUID_contenedorFinanciero,
                                                instanciaUID_eliminarImpuestoUI
                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"

                                        document.querySelector("main").appendChild(pantallaInmersiva)

                                    },
                                    confirmarEliminar: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const impuestoUID = String(data.impuestoUID)
                                        const instanciaUID_eliminarImpuestoUI = data.instanciaUID_eliminarImpuestoUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                                        const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarImpuestoUI}"]`)
                                        const contenedor = ui.querySelector("[componente=constructor]")
                                        contenedor.innerHTML = null

                                        const spinner = casaVitini.ui.componentes.spinner({
                                            mensaje: "Eliminado impuesto en la reserva..."
                                        })
                                        contenedor.appendChild(spinner)

                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/impuestos/eliminarImpuestoEnReserva",
                                            reservaUID,
                                            impuestoUID
                                        }

                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }

                                    },

                                },
                                crearImpuestoAdHoc: {
                                    ui: async function (data) {
                                        const nombreImpuesto = data.nombreImpuesto
                                        const impuestoUID = data.impuestoUID
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                        const instanciaUID_eliminarImpuestoUI = pantallaInmersiva.getAttribute("instanciaUID")
                                        const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")

                                        const titulo = constructor.querySelector("[componente=titulo]")
                                        titulo.textContent = `Crear impuesto dedicado solo para esta reserva`
                                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                        mensaje.textContent = "Rellena el formulario para crear un impuesto solo para esta reserva.Este impuesto creado solo existirá en esta reserva.Si necesitas crear un impuesto que quieras usar para insertar en reservas, pero que no se aplique, crea un impuesto en la sección de impuesto y mantenlo desactivado."

                                        const contenedorFormulario = document.createElement("div")
                                        contenedorFormulario.classList.add(
                                            "flexVertical",
                                            "gap6"
                                        )
                                        contenedor.appendChild(contenedorFormulario)


                                        const campoCraerNuevoImpuesto = document.createElement("input")
                                        campoCraerNuevoImpuesto.classList.add(
                                            "padding10",
                                            "borderRadius10"

                                        )
                                        campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "nombreImpuesto")
                                        campoCraerNuevoImpuesto.placeholder = "Escribo el nombre del nuevo impuesto"
                                        contenedorFormulario.appendChild(campoCraerNuevoImpuesto)

                                        const campoTipoImpositivo = document.createElement("input")
                                        campoTipoImpositivo.classList.add(
                                            "padding10",
                                            "borderRadius10"
                                        )
                                        campoTipoImpositivo.setAttribute("comNuevoImpuesto", "tipoImpositivo")
                                        campoTipoImpositivo.placeholder = "0.00"
                                        contenedorFormulario.appendChild(campoTipoImpositivo)

                                        const contenedorOpciones = document.createElement("select")
                                        contenedorOpciones.classList.add(
                                            "padding10",
                                            "borderRadius10",
                                            "selectorLista"
                                        )
                                        contenedorOpciones.setAttribute("comNuevoImpuesto", "tipoValor")
                                        const tipoValorLista = [
                                            {
                                                tipoValorIDV: "",
                                                tipoValorUI: "Selecciona el tipo de impuesto"
                                            },
                                            {
                                                tipoValorIDV: "porcentaje",
                                                tipoValorUI: "Porcentaje"
                                            },
                                            {
                                                tipoValorIDV: "tasa",
                                                tipoValorUI: "Tasa"
                                            },

                                        ]
                                        tipoValorLista.forEach((contenedorTipoValor) => {
                                            const tipoValorIDV = contenedorTipoValor.tipoValorIDV
                                            const tipoValorUI = contenedorTipoValor.tipoValorUI
                                            const opcion = document.createElement("option");
                                            if (!tipoValorIDV) {
                                                opcion.selected = true;
                                                opcion.disabled = true;

                                            }
                                            opcion.value = tipoValorIDV;
                                            opcion.text = tipoValorUI;
                                            opcion.setAttribute("opcion", tipoValorIDV)
                                            contenedorOpciones.add(opcion);
                                        })
                                        contenedorFormulario.appendChild(contenedorOpciones)


                                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                        botonAceptar.textContent = "Crear impuesto dedicado para esta reserva"
                                        botonAceptar.addEventListener("click", () => {
                                            this.confirmarCrearImpuestoAdHoc({
                                                reservaUID,
                                                instanciaUID_contenedorFinanciero,
                                                instanciaUID_eliminarImpuestoUI,
                                                nombreImpuesto: campoCraerNuevoImpuesto.value,
                                                tipoImpositivo: campoTipoImpositivo.value,
                                                tipoValorIDV: contenedorOpciones.value

                                            })
                                        })
                                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                        botonCancelar.textContent = "Cancelar y volver"

                                        document.querySelector("main").appendChild(pantallaInmersiva)

                                    },
                                    confirmarCrearImpuestoAdHoc: async function (data) {
                                        const reservaUID = data.reservaUID
                                        const nombreImpuesto = data.nombreImpuesto
                                        const tipoImpositivo = data.tipoImpositivo
                                        const tipoValorIDV = data.tipoValorIDV

                                        const instanciaUID_eliminarImpuestoUI = data.instanciaUID_eliminarImpuestoUI
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                                        const instanciaUID_pantallaDeCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()

                                        const datosPantallaSuperpuesta = {
                                            instanciaUID: instanciaUID_pantallaDeCargaSuperPuesta,
                                            mensaje: "Creando impuesto dedicado e insertando en la reserva..."
                                        }
                                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                                        const transaccion = {
                                            zona: "administracion/reservas/detallesReserva/impuestos/insertarImpuestoDedicadoEnReserva",
                                            reservaUID,
                                            nombreImpuesto,
                                            tipoImpositivo,
                                            tipoValorIDV,
                                        }



                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCargaSuperPuesta}"]`)?.remove()

                                        const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                        if (!uiRenderizada) { return }

                                        if (respuestaServidor?.error) {
                                            return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                        }
                                        if (respuestaServidor?.ok) {
                                            casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                instanciaUID_contenedorFinanciero,
                                                reservaUID
                                            })
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        }
                                    },

                                },

                                reconstruirDesgloseFinanciero: {
                                    ui: async function (data) {
                                        const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                        const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")
                                        const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")
                                        document.querySelector("main").appendChild(pantallaInmersiva)



                                        const tituloUI = document.createElement("p")
                                        tituloUI.classList.add("tituloGris")
                                        tituloUI.setAttribute("componente", "titulo")
                                        tituloUI.textContent = `Elige el origen de la reconstrucion del desglose financiero de la reserva ${reservaUID}`
                                        contenedor.appendChild(tituloUI)



                                        const mensajeUI = document.createElement("div")
                                        mensajeUI.classList.add("mensajeUI")
                                        mensajeUI.setAttribute("componente", "mensajeUI")
                                        mensajeUI.textContent = "Esta operación reconstruye el desglose financiero.Reconstruir desde la instantánea, regenera el desglose financiero desde las instantáneas del contenedor financiero de la reserva.Esta operación es útil si no se ha reconstituido por alguna razón el desglose financiero correctamente tras alguna operación."
                                        contenedor.appendChild(mensajeUI)


                                        const botonDesdeInstantaneas = document.createElement("div")
                                        botonDesdeInstantaneas.classList.add("botonV1")
                                        botonDesdeInstantaneas.setAttribute("boton", "aceptar")
                                        botonDesdeInstantaneas.textContent = "Reconstruir desde instantaneas"
                                        botonDesdeInstantaneas.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            this.desdeInstantaneas.ui({
                                                reservaUID,
                                                instanciaUID_contenedorFinanciero,
                                                instanciaUID_reconstrucion
                                            })
                                        })
                                        contenedor.appendChild(botonDesdeInstantaneas)


                                        const mensajeUI_ = document.createElement("div")
                                        mensajeUI_.classList.add("mensajeUI")
                                        mensajeUI_.setAttribute("componente", "mensajeUI")
                                        mensajeUI_.textContent = "Reconstruir el desglose financiero desde el hub, reconstruirá el desglose financiero actualizando las instantáneas de la reserva desde el hub de precios base, comportamiento de precios y ofertas actualmente configurados.Esta operación es irreversible y puede ser útil cuando necesito actualizar ciertos datos del contenedor financiero de la reserva desde los hubs de origen."
                                        contenedor.appendChild(mensajeUI_)

                                        const botonDesdeHub = document.createElement("div")
                                        botonDesdeHub.classList.add("botonV1")
                                        botonDesdeHub.setAttribute("boton", "aceptar")
                                        botonDesdeHub.textContent = "Reconstruir desde el hub"
                                        botonDesdeHub.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            this.desdeHub.ui({
                                                reservaUID,
                                                instanciaUID_contenedorFinanciero,
                                                instanciaUID_reconstrucion
                                            })

                                        })

                                        contenedor.appendChild(botonDesdeHub)

                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("botonV1")
                                        botonCancelar.setAttribute("boton", "cancelar")
                                        botonCancelar.textContent = "Cancelar y volver"
                                        botonCancelar.addEventListener("click", () => {
                                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        contenedor.appendChild(botonCancelar)

                                    },
                                    desdeInstantaneas: {
                                        ui: async function (data) {
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")


                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmar reconstruir el desglose de la reserva ${reservaUID} de las instantaneas`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "Esta operacion reconstruye el desglose financiero.Si ha ocurrido un algun tipo de error en algun calculo drante la construcion del deshlose financiero, esta opcion podrai recuperar la intergrdiad del desglose financiero."

                                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                            botonAceptar.textContent = "Comfirmar la reconstrucción"
                                            botonAceptar.addEventListener("click", () => {
                                                this.confirmarReconstrucion({
                                                    reservaUID,
                                                    instanciaUID_contenedorFinanciero,
                                                    instanciaUID_reconstrucion
                                                })
                                            })
                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"

                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        confirmarReconstrucion: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const instanciaUID_reconstrucion = data.instanciaUID_reconstrucion
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_reconstrucion}"]`)
                                            const contenedor = ui.querySelector("[componente=constructor]")
                                            contenedor.innerHTML = null

                                            const spinner = casaVitini.ui.componentes.spinner({
                                                mensaje: "Reconstruyendo el desglose financiero desde las instantaneas de la reserva..."
                                            })
                                            contenedor.appendChild(spinner)

                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/contenedorFinanciero/reconstruirDesgloseDesdeInstantaneas",
                                                reservaUID
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            if (!uiRenderizada) { return }

                                            if (respuestaServidor?.error) {
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            }
                                            if (respuestaServidor?.ok) {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                    instanciaUID_contenedorFinanciero,
                                                    reservaUID
                                                })
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            }

                                        },
                                    },
                                    desdeHub: {
                                        ui: async function (data) {
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                            const reservaUID = document.querySelector("main").querySelector("[reservaUID]").getAttribute("reservaUID")

                                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                            const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")
                                            const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")
                                            contenedor.classList.add(
                                                "flexVertical"
                                            )



                                            const titulo = constructor.querySelector("[componente=titulo]")
                                            titulo.textContent = `Confirmar reconstruir el desglose de la reserva ${reservaUID} desde el hub (Operación irreversible)`
                                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                            mensaje.textContent = "Esta operación reconstruye el desglose financiero.Sí ha ocurrido un algún tipo de error en algún cálculo durante la construcción del desglose financiero, esta opción podría recuperar la integridad del desglose financiero."

                                            const campo = document.createElement("input")
                                            campo.placeholder = "Escribe la palabra reconstruir"
                                            campo.classList.add(
                                                "borderRadius10",
                                                "padding10"
                                            )
                                            contenedor.appendChild(campo)
                                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                            botonAceptar.textContent = "Confirmar la reconstrucción irreversible de todo el contenedor financiero de la reserva."
                                            botonAceptar.addEventListener("click", () => {
                                                this.confirmarReconstrucion({
                                                    reservaUID,
                                                    instanciaUID_contenedorFinanciero,
                                                    instanciaUID_reconstrucion,
                                                    palabra: campo.value
                                                })
                                            })
                                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                            botonCancelar.textContent = "Cancelar y volver"

                                            document.querySelector("main").appendChild(pantallaInmersiva)

                                        },
                                        confirmarReconstrucion: async function (data) {
                                            const reservaUID = data.reservaUID
                                            const palabra = data.palabra
                                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                                            const instanciaUID_pantallaDeCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()

                                            const datosPantallaSuperpuesta = {
                                                instanciaUID: instanciaUID_pantallaDeCargaSuperPuesta,
                                                mensaje: "Reconstruyendo todo el contenedor financiero de la reserva desde los hubs..."
                                            }
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                                            const transaccion = {
                                                zona: "administracion/reservas/detallesReserva/contenedorFinanciero/reconstruirDesgloseDesdeHubs",
                                                reservaUID,
                                                palabra,
                                            }

                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            const pantallaDeCarga_renderizda = document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCargaSuperPuesta}"]`)
                                            pantallaDeCarga_renderizda?.remove()

                                            const uiRenderizada = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                            if (!uiRenderizada) { return }

                                            if (respuestaServidor?.error) {
                                                if (pantallaDeCarga_renderizda) {
                                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                                }
                                            }
                                            if (respuestaServidor?.ok) {
                                                casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.desgloseTotal.controladores.desplegarContenedorFinanciero({
                                                    instanciaUID_contenedorFinanciero,
                                                    reservaUID
                                                })
                                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            }

                                        },
                                    }

                                },
                            },
                            controladores: {
                                desplegarContenedorFinanciero: async (data) => {
                                    const reservaUID = data.reservaUID
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/global/obtenerReserva",
                                        reservaUID: reservaUID,
                                        capas: [
                                            "desgloseFinanciero",
                                        ]
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                                    const instanciaRenderizada = document.querySelector(`[reservaUID="${reservaUID}"] [componente=contenedorDesgloseTotal]`)
                                    if (!instanciaRenderizada) {
                                        return
                                    }
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const totalGlobal = document.querySelector("[dataReserva=totalReservaConImpuestos]")

                                        const contenedorFinanciero = respuestaServidor.ok.contenedorFinanciero
                                        const totalFinal = contenedorFinanciero.desgloseFinanciero.global.totales.totalFinal
                                        totalGlobal.textContent = totalFinal

                                        casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                            destino: `[reservaUID="${reservaUID}"] [componente=contenedorDesgloseTotal]`,
                                            contenedorFinanciero,
                                            modoUI: "administracion"
                                        })
                                    }
                                }
                            }


                        },
                        cancelarReserva: {
                            arranque: () => {
                                document.body.style.overflow = "hidden";
                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                const advertenciaInmersivaIU = document.createElement("div")
                                advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                                advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                                advertenciaInmersivaIU.setAttribute("contenedor", "opcionesCancelacion")
                                const contenedorAdvertenciaInmersiva = document.createElement("div")
                                contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                                const contenidoAdvertenciaInmersiva = document.createElement("div")
                                contenidoAdvertenciaInmersiva.classList.add("contenidoAdvertenciaInmersiva")
                                contenidoAdvertenciaInmersiva.setAttribute("contenedor", "contenidoAdvertenciaInmersiva")
                                const contenedorCancelacion = document.createElement("div")
                                contenedorCancelacion.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                const tituloCancelarReserva = document.createElement("p")
                                tituloCancelarReserva.classList.add("tituloGris", "padding12")
                                tituloCancelarReserva.textContent = "Cancelar reserva"
                                contenedorCancelacion.appendChild(tituloCancelarReserva)
                                const botonCancelarProcesoCancelacion = document.createElement("div")
                                botonCancelarProcesoCancelacion.classList.add("botonV1")
                                botonCancelarProcesoCancelacion.textContent = "Cerrar y volver atras"
                                botonCancelarProcesoCancelacion.addEventListener("click", () => {
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.salirDelProceso(reservaUID)
                                })
                                contenedorCancelacion.appendChild(botonCancelarProcesoCancelacion)
                                const bloqueBloqueoApartamentos = document.createElement("div")
                                bloqueBloqueoApartamentos.classList.add(
                                    "flexVertical",
                                    "borderRadius22",
                                    "borderGrey1",
                                    "padding6",
                                    "gap6"
                                )
                                const tituloBloquoApartamentos = document.createElement("div")
                                tituloBloquoApartamentos.classList.add(
                                    "padding12"
                                )
                                tituloBloquoApartamentos.textContent = "Selecciona qué tipo de bloqueo quieres aplicar a los apartamentos de esta reserva tras la cancelación."
                                bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                                let opcionBloqueoApartamento = document.createElement("p")
                                opcionBloqueoApartamento.classList.add("botonV1BlancoIzquierda")
                                opcionBloqueoApartamento.setAttribute("componente", "cancelarReservaOpcionBloqueo")
                                opcionBloqueoApartamento.setAttribute("cancelarReservatipoBloqueo", "rangoTemporal")
                                opcionBloqueoApartamento.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.seleccionarOpcionBloqueoApartametos)
                                opcionBloqueoApartamento.textContent = "Bloquear los apartamentos de esta reserva tras la cancelación durante el mismo rango que tiene esta reserva."
                                bloqueBloqueoApartamentos.appendChild(opcionBloqueoApartamento)
                                opcionBloqueoApartamento = document.createElement("p")
                                opcionBloqueoApartamento.classList.add("botonV1BlancoIzquierda")
                                opcionBloqueoApartamento.setAttribute("componente", "cancelarReservaOpcionBloqueo")
                                opcionBloqueoApartamento.setAttribute("cancelarReservatipoBloqueo", "permanente")
                                opcionBloqueoApartamento.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.seleccionarOpcionBloqueoApartametos)
                                opcionBloqueoApartamento.textContent = "Bloquear los apartamentos de esta reserva tras la cancelación con un bloqueo permanente. Deberá liberarlos manualmente."
                                bloqueBloqueoApartamentos.appendChild(opcionBloqueoApartamento)


                                const tituloSinBloquoApartamentos = document.createElement("div")
                                tituloSinBloquoApartamentos.classList.add(
                                    "padding12"
                                )
                                tituloSinBloquoApartamentos.textContent = "Cancela la reserva sin bloquear los apartamentos y liberarlos para que esten disponibles inmediatament despues de cancelar la reserva."
                                bloqueBloqueoApartamentos.appendChild(tituloSinBloquoApartamentos)


                                opcionBloqueoApartamento = document.createElement("p")
                                opcionBloqueoApartamento.classList.add("botonV1BlancoIzquierda")
                                opcionBloqueoApartamento.setAttribute("componente", "cancelarReservaOpcionBloqueo")
                                opcionBloqueoApartamento.setAttribute("cancelarReservatipoBloqueo", "sinBloqueo")
                                opcionBloqueoApartamento.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.seleccionarOpcionBloqueoApartametos)
                                opcionBloqueoApartamento.textContent = "Liberar los apartamentos de esta reserva tras la cancelación para que pasen a estar disponibles para su reserva."
                                bloqueBloqueoApartamentos.appendChild(opcionBloqueoApartamento)
                                contenedorCancelacion.appendChild(bloqueBloqueoApartamentos)
                                const bloqueBotones = document.createElement("div")
                                bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                                const entradaPalabraCancelar = document.createElement("input")
                                entradaPalabraCancelar.classList.add("detallesReservaCancelarEntradaTextoCancelar")
                                entradaPalabraCancelar.placeholder = "Escriba la palabra cancelar"

                                const infoBotonCancelar = document.createElement("div")
                                infoBotonCancelar.classList.add("padding12")
                                infoBotonCancelar.textContent = "Para que se habilite el botón, tienes que seleccionar una de las tres opciones de arriba.Confirmar y cancelar la reserva."
                                bloqueBloqueoApartamentos.appendChild(infoBotonCancelar)
                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("botonV1BlancoIzquierda")
                                botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                botonCancelar.style.pointerEvents = "none"
                                botonCancelar.style.color = "#313131"
                                botonCancelar.textContent = "Confirmar y cancelar reserva"
                                botonCancelar.addEventListener("click", () => {
                                    const tipoBloqueoIDV = document.querySelector("[componente=cancelarReservaOpcionBloqueo][estado=activo]").getAttribute("cancelarReservatipoBloqueo")
                                    casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.confirmaCancelacion({
                                        tipoBloqueoIDV
                                    })
                                })
                                bloqueBloqueoApartamentos.appendChild(botonCancelar)
                                const infoEliminarReserva = document.createElement("div")
                                infoEliminarReserva.classList.add("padding12")

                                infoEliminarReserva.textContent = "También puedes eliminar irreversiblemente una reserva.La eliminación irreversible de una reserva borra la información de la reserva, así como los pagos asociados a la reserva y toda la información relacionada con la reserva, menos los datos de los clientes y titulares que permanecen disponibles para otras reservas.A diferencia de la cancelación, los datos de la reserva dejarán de estar disponibles."
                                bloqueBotones.appendChild(infoEliminarReserva)
                                const botonEliminarReserva = document.createElement("div")
                                botonEliminarReserva.classList.add("botonV1BlancoIzquierda")
                                botonEliminarReserva.setAttribute("componente", "botonConfirmarCancelarReserva")
                                botonEliminarReserva.textContent = "Eliminar irreversiblemente la reserva"
                                botonEliminarReserva.addEventListener("click", casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.eliminarReservaIrreversiblemente.UI)
                                bloqueBotones.appendChild(botonEliminarReserva)
                                contenedorCancelacion.appendChild(bloqueBotones)
                                contenidoAdvertenciaInmersiva.appendChild(contenedorCancelacion)
                                contenedorAdvertenciaInmersiva.appendChild(contenidoAdvertenciaInmersiva)
                                advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                                document.querySelector("main").appendChild(advertenciaInmersivaIU)
                            },
                            seleccionarOpcionBloqueoApartametos: (opcion) => {
                                let selectorOpciones = document.querySelectorAll("[componente=cancelarReservaOpcionBloqueo]")
                                let opcionBloqueo = opcion.target
                                let botonCancelar = document.querySelector("[componente=botonConfirmarCancelarReserva]")
                                if (opcionBloqueo.getAttribute("estado") === "activo") {
                                    opcionBloqueo.removeAttribute("estado")
                                    botonCancelar.style.pointerEvents = "none"
                                    botonCancelar.style.color = "#313131"
                                    opcionBloqueo.removeAttribute("style")

                                }
                                selectorOpciones.forEach((opcionBloqueo) => {
                                    opcionBloqueo.removeAttribute("style")
                                    opcionBloqueo.removeAttribute("estado")
                                })
                                opcionBloqueo.style.background = "blue"
                                opcionBloqueo.style.color = "white"
                                opcionBloqueo.setAttribute("estado", "activo")
                                botonCancelar.removeAttribute("style")
                            },
                            confirmaCancelacion: async function (data) {
                                const instanciaUID_pantallaEspera = casaVitini.utilidades.codigoFechaInstancia()
                                const metadatosPantallaCarga = {
                                    mensaje: "Cancelando reserva...",
                                    instanciaUID: instanciaUID_pantallaEspera,
                                }
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                                const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                const tipoBloqueoIDV = data.tipoBloqueoIDV
                                const transaccion = {
                                    zona: "administracion/reservas/detallesReserva/global/cancelarReserva",
                                    reservaUID: String(reservaUID),
                                    tipoBloqueoIDV: tipoBloqueoIDV
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const selectorPantallaDeCarga = document.querySelector(`[instanciaUID="${instanciaUID_pantallaEspera}"]`)
                                selectorPantallaDeCarga?.remove()

                                const reservaUI = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                if (!reservaUI) { return }

                                if (respuestaServidor?.error) {
                                    casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                } else if (respuestaServidor?.ok) {
                                    const m = "Reserva cancelada"
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    casaVitini.ui.componentes.advertenciaInmersiva(m)
                                    document.querySelector(`[reservaUID="${reservaUID}"] [dataReserva=estado]`).textContent = "Cancelada"
                                    document.querySelector(`[reservaUID="${reservaUID}"] [contenedor=pendiente]`).style.display = "none"
                                    document.querySelector(`[reservaUID="${reservaUID}"] [estadoReservaIDV]`).setAttribute("estadoReservaIDV", "cancelada")

                                    this.salirDelProceso(reservaUID)
                                }
                            },
                            eliminarReservaIrreversiblemente: {
                                UI: function () {
                                    const reservaUID = document.querySelector("[reservaUID]").getAttribute("reservaUID")
                                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                    const selectorContenedorOpcionesCancelacion = document.querySelector("[contenedor=opcionesCancelacion]")
                                    selectorContenedorOpcionesCancelacion.style.transition = "background 500ms"
                                    selectorContenedorOpcionesCancelacion.style.background = "rgba(255, 0, 0, 0.3)"
                                    selectorContenedorOpcionesCancelacion.setAttribute("instanciaUID", instanciaUID)
                                    const selectorContenido = selectorContenedorOpcionesCancelacion.querySelector("[contenedor=contenidoAdvertenciaInmersiva]")
                                    selectorContenido.innerHTML = null
                                    const contenedorCancelacion = document.createElement("div")
                                    contenedorCancelacion.classList.add(
                                        "flexVertical",
                                        "padding6",
                                        "gap6"
                                    )
                                    const tituloCancelarReserva = document.createElement("p")
                                    tituloCancelarReserva.classList.add("tituloGris", "padding12")
                                    tituloCancelarReserva.textContent = "Eliminar irreversiblemente una reserva"
                                    tituloCancelarReserva.style.color = "red"
                                    contenedorCancelacion.appendChild(tituloCancelarReserva)
                                    const botonCancelarProcesoCancelacion = document.createElement("div")
                                    botonCancelarProcesoCancelacion.classList.add("botonV1")
                                    botonCancelarProcesoCancelacion.textContent = "Cerrar y volver atras"
                                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.salirDelProceso(reservaUID)
                                    })
                                    contenedorCancelacion.appendChild(botonCancelarProcesoCancelacion)
                                    const bloqueBloqueoApartamentos = document.createElement("div")
                                    bloqueBloqueoApartamentos.classList.add("flexVertical", "gap6")
                                    const tituloBloquoApartamentos = document.createElement("div")
                                    tituloBloquoApartamentos.classList.add("padding12")
                                    tituloBloquoApartamentos.textContent = "Eliminar irreversiblemente una reserva, elimina de la base de datos la información de la reserva, los alojamientos asociados, los pernoctantes y el titular de la reserva (pero no sus datos como cliente), los pagos y los reembolsos.Esta eliminación es irreversible.Los datos desaparecerán de la base de datos y si no existen en una copia de seguridad, no serán recuperables.Si solo desea cancelar una reserva para liberar los apartamentos y hacer que deje de tener vigencia, cancélela y podrá seguir teniendo acceso a los datos de esta sin que tenga vigencia pernoctativa y ocupacional."
                                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                                    const infoSeguridad = document.createElement("div")
                                    infoSeguridad.classList.add("padding12")
                                    infoSeguridad.textContent = "Para eliminar una reserva irreversiblemente junto con toda su información relacionada, debe escribir su contraseña de usuario y su cuenta debe tener autorización administrativa."
                                    bloqueBloqueoApartamentos.appendChild(infoSeguridad)
                                    const campo = document.createElement("input")
                                    campo.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                                    campo.setAttribute("campo", "clave")
                                    campo.type = "password"
                                    campo.placeholder = "Escriba la contraseña de su VitiniID"
                                    bloqueBloqueoApartamentos.appendChild(campo)
                                    contenedorCancelacion.appendChild(bloqueBloqueoApartamentos)
                                    const bloqueBotones = document.createElement("div")
                                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1BlancoIzquierda")
                                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                                    botonCancelar.textContent = "Eliminar reseva irreversiblemente"
                                    botonCancelar.addEventListener("click", () => {
                                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.categoriasGlobales.cancelarReserva.eliminarReservaIrreversiblemente.confirmar({
                                            instanciaUID,
                                            reservaUID
                                        })
                                    })
                                    bloqueBloqueoApartamentos.appendChild(botonCancelar)
                                    contenedorCancelacion.appendChild(bloqueBotones)
                                    selectorContenido.appendChild(contenedorCancelacion)

                                },
                                confirmar: async (data) => {

                                    const reservaUID = data.reservaUID
                                    const instanciaUID = data.instanciaUID

                                    const clave = document.querySelector(`[instanciaUID="${instanciaUID}"] [campo=clave]`)
                                    const instanciaUID_pantallDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                                    const metadatosPantallaCarga = {
                                        mensaje: "Eliminado reserva...",
                                        instanciaUID: instanciaUID_pantallDeCarga,
                                    }
                                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                    const transaccion = {
                                        zona: "administracion/reservas/detallesReserva/global/eliminarIrreversiblementeReserva",
                                        reservaUID: String(reservaUID),
                                        clave: clave?.value
                                    }
                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const selectorPantallaDeCarga = document.querySelector(`[instanciaUID="${instanciaUID_pantallDeCarga}"]`)
                                    selectorPantallaDeCarga?.remove()

                                    const reservaUI = document.querySelector(`[reservaUID="${reservaUID}"]`)
                                    if (!reservaUI) { return }

                                    if (respuestaServidor?.error) {

                                        document.querySelector(`[instanciaUID="${instanciaUID}"] [campo=clave]`).value = ""
                                        return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                                        granuladoURL.rawArray.pop()
                                        const rawArray = granuladoURL.rawArray

                                        const main = document.querySelector("main")
                                        main.innerHTML = null

                                        const directoriosFusion = "/administracion/reservas"
                                        const componentesExistenteUID = "reservaUID_" + reservaUID
                                        const titulo = "Casa Vitini"
                                        const estado = {
                                            zona: directoriosFusion,
                                            EstadoInternoZona: "estado",
                                            tipoCambio: "parcial",
                                            componenteExistente: componentesExistenteUID,
                                            funcionPersonalizada: "administracion.reservas.detallesReserva.reservaUI.categorias.limpiarMenusCategorias"
                                        }
                                        window.history.pushState(estado, titulo, directoriosFusion);

                                        const info = document.createElement("div")
                                        info.classList.add(
                                            "margin10",
                                            "textoCentrado",
                                            "negritas"
                                        )
                                        info.textContent = `Se ha eliminado la reserva ${reservaUID}`
                                        main.appendChild(info)


                                    }
                                }
                            },
                            salirDelProceso: (reservaUID) => {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                                const granuladoURL = casaVitini.utilidades.granuladorURL()
                                granuladoURL.rawArray.pop()
                                const rawArray = granuladoURL.rawArray

                                const directoriosFusion = "/" + rawArray.join("/")
                                const componentesExistenteUID = "reservaUID_" + reservaUID
                                const titulo = "Casa Vitini"
                                const estado = {
                                    zona: directoriosFusion,
                                    EstadoInternoZona: "estado",
                                    tipoCambio: "parcial",
                                    componenteExistente: componentesExistenteUID,
                                    funcionPersonalizada: "casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.categorias.limpiarMenusCategorias"
                                }
                                window.history.pushState(estado, titulo, directoriosFusion);
                            },
                        },
                        miscelanea: {
                            arranque: async () => {
                                const reservaUI = document.querySelector("[reservaUID]")
                                const configuracionVista = reservaUI.getAttribute("configuracionVista")
                                const reservaUID = reservaUI.getAttribute("reservaUID")
                                const obtenerPDF = async () => {


                                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                    const instanciaUID = pantallaInmersiva.closest("[instanciaUID]").getAttribute("instanciaUID")


                                    const titulo = constructor.querySelector("[componente=titulo]")
                                    titulo.textContent = "Reserva en pdf"
                                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                    mensaje.textContent = "Generando el pdf..."

                                    const contenedorEspacio = constructor.querySelector("[componente=contenedor]")
                                    const spinnerPorRenderizar = casaVitini.ui.componentes.spinnerSimple()
                                    contenedorEspacio.appendChild(spinnerPorRenderizar)

                                    const botonDescargar = constructor.querySelector("[boton=aceptar]")
                                    botonDescargar.style.display = "none"

                                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                    botonCancelar.textContent = "Cancelar generacion del pdf..."

                                    document.querySelector("main").appendChild(pantallaInmersiva)
                                    const advertenciaInmersivaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                                    const transaccion = {
                                        reservaUID
                                    }

                                    if (configuracionVista === "publica") {
                                        transaccion.zona = "miCasa/misReservas/obtenerPDF"
                                    } else {
                                        transaccion.zona = "administracion/reservas/detallesReserva/miscelanea/pdfReserva"
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const pantallaInmersivaRenderizda = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                    if (!pantallaInmersivaRenderizda) {
                                        return
                                    }
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                    }
                                    if (respuestaServidor.ok) {
                                        const pdfBase64 = respuestaServidor.pdf
                                        const selectorZonaGestion = advertenciaInmersivaRenderizada.querySelector("[componente=contenedor]");
                                        selectorZonaGestion.innerHTML = null;
                                        mensaje.textContent = "Se ha generado el archivo PDF con el resumen de esta reserva.Para descargar el PDF, pulsa en el botón inferior.";

                                        const botonDescargarPDF = document.createElement("a")
                                        botonDescargarPDF.classList.add(
                                            "botonV1"
                                        )
                                        botonDescargarPDF.textContent = "Descargar un resumen de la reserva en PDF"
                                        botonDescargarPDF.download = "Reserva.pdf"
                                        botonDescargarPDF.title = "Descargar PDF"
                                        botonDescargarPDF.href = `data:application/pdf;base64,${pdfBase64}`


                                        botonDescargar.parentNode.replaceChild(botonDescargarPDF, botonDescargar);
                                        botonCancelar.textContent = "Cancelar y volver"
                                    }

                                }

                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                const contenedorDinamico = document.querySelector("[componente=contenedorDinamico]")
                                const contenedorDesgloseDelTotal = document.createElement("div")
                                contenedorDesgloseDelTotal.classList.add("administracion_reserver_detallesReserva_contenedorDesgloseTotal")
                                contenedorDesgloseDelTotal.setAttribute("instanciaUID", instanciaUID)
                                contenedorDesgloseDelTotal.setAttribute("componente", "contenedorDesgloseTotal")
                                contenedorDinamico.appendChild(contenedorDesgloseDelTotal)
                                const contenedorAdvertenciaInmersiva = document.createElement("div")
                                contenedorAdvertenciaInmersiva.classList.add("administracion_reservas_detallesReserva_contenedorMisleanea")
                                const titulo = document.createElement("p")
                                titulo.classList.add("detallesReserva_reembolso_tituloGlobal")
                                titulo.textContent = "Miscelánea"
                                contenedorAdvertenciaInmersiva.appendChild(titulo)
                                const infoGlobal = document.createElement("div")
                                infoGlobal.classList.add("detallesReserva_reembolso_infoGlobal")
                                infoGlobal.textContent = `En la miscelánea de la reserva encontrará operaciones y demás propósitos u opciones que, por su idiosincrasia específica, no requieren de un contexto dedicado.`
                                contenedorAdvertenciaInmersiva.appendChild(infoGlobal)
                                let boton = document.createElement("div")
                                boton.classList.add("botonV1BlancoIzquierda_sinRadius", "borderRadius12")
                                boton.addEventListener("click", obtenerPDF)
                                boton.textContent = "Generar un PDF del resumen de la reserva"
                                contenedorAdvertenciaInmersiva.appendChild(boton)
                                boton = document.createElement("div")
                                boton.classList.add("administracion_reservas_detallesReserfa_miscelanea_botonOpcion")
                                boton.textContent = "Generar un PDF del resumen de la reserva y enviar por mail(implementandose)"

                                const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                instanciaRenderizada.innerHTML = null
                                instanciaRenderizada.appendChild(contenedorAdvertenciaInmersiva)
                            }
                        },
                    },
                },

            },
            widgetsUI: {
                contenedorTituloDescripcionSimple: (data) => {

                    const titulo = data.titulo
                    const dato = data.dato
                    const contenedor = document.createElement("div")
                    contenedor.classList.add(
                        "flexVertical"
                    )
                    const tituloUI = document.createElement("p")
                    tituloUI.setAttribute("data", "tituloUI")
                    tituloUI.textContent = titulo
                    contenedor.appendChild(tituloUI)

                    const dataUI = document.createElement("p")
                    dataUI.setAttribute("data", "dataUI")
                    dataUI.textContent = dato

                    contenedor.appendChild(dataUI)
                    return contenedor

                }
            },
            serviciosUI: {
                contenedor_gruposDeOpciones: () => {
                    const contenedor = document.createElement("div")
                    contenedor.setAttribute("area", "grupoOpciones")
                    contenedor.classList.add(
                        "flexVertical",
                        "gap6",
                    )
                    return contenedor
                },
                grupoDeOpciones: () => {
                    const c = document.createElement("div")
                    c.setAttribute("componente", "grupo")
                    c.classList.add(
                        "flexVertical",
                        "padding6",
                        "borderGrey1",
                        "borderRadius14"
                    )

                    const titulo = document.createElement("p")
                    titulo.setAttribute("data", "titulo")
                    titulo.classList.add(
                        "padding6",
                        "negrita",
                        // "textoCentrado"
                    )
                    titulo.textContent = "Titulo o definición del grupo"
                    c.appendChild(titulo)

                    const opcionesDelContenedor = document.createElement("div")
                    opcionesDelContenedor.setAttribute("area", "seleccion")
                    opcionesDelContenedor.setAttribute("areaIDV", "areaIDV_destino")
                    opcionesDelContenedor.classList.add(
                        "flexVertical",
                        "gap6",
                        "padding6",
                        "borderGrey1",
                        "borderRadius14",
                        "ratonDefault"
                    )
                    // c.appendChild(opcionesDelContenedor)

                    return c
                },
                opcionUI: () => {
                    const contenedorGlobal = document.createElement("div")
                    contenedorGlobal.classList.add("contenedorGlobal", "contenedorGlobal_hover", "padding4")
                    contenedorGlobal.setAttribute("selector", "opcion")
                    contenedorGlobal.setAttribute("opcionIDV", "opcionIDV_destino")
                    //  contenedorGlobal.addEventListener("click", (e) => {

                    // const botonesGrupo = e.target.closest("[area=seleccion]").querySelectorAll("[selector=opcion]")
                    // botonesGrupo.forEach((b) => {
                    //     b.removeAttribute("estado")
                    //     const indicadorEsfera = b.querySelector("[componente=indicadorSelecion]")
                    //     indicadorEsfera.removeAttribute("style")

                    // })
                    // const contenedorSelecioando = e.target.closest("[selector=opcion]")
                    // contenedorSelecioando.setAttribute("estado", "activado")
                    // contenedorSelecioando.querySelector("[componente=indicadorSelecion]").style.background = "blue"
                    //  })

                    const esferaSeleccionable = document.createElement("div")
                    esferaSeleccionable.classList.add(
                        "esferaSeleccionable"
                    )
                    contenedorGlobal.appendChild(esferaSeleccionable)

                    const indicadorDeSeleccion = document.createElement("div")
                    indicadorDeSeleccion.setAttribute("componente", "indicadorSelecion")
                    indicadorDeSeleccion.classList.add(
                        "indicadorDeSeleccion"
                    )
                    esferaSeleccionable.appendChild(indicadorDeSeleccion)

                    const tituloConf = document.createElement("p")
                    tituloConf.setAttribute("data", "opcionUI")
                    tituloConf.classList.add(
                        "padding6",
                    )
                    tituloConf.textContent = "Nombre de la opcion"
                    contenedorGlobal.appendChild(tituloConf)

                    return contenedorGlobal
                },
                controladorSeleccion: async function (e) {

                    const opcionPulsada = e.target.closest("[selector=opcion]")
                    const confGrupo = JSON.parse(e.target.closest("[conf]").getAttribute("conf"))
                    const confSelNumero = confGrupo.confSelNumero
                    const estadoActual = opcionPulsada.getAttribute("estado")

                    const selectorGrupo = e.target.closest("[componente=grupo]")
                    const opcionesDelGrupo = selectorGrupo.querySelectorAll("[selector=opcion]")

                    if (confSelNumero.includes("maximoUnaOpcion")) {
                        opcionesDelGrupo.forEach(opcion => {
                            opcion.removeAttribute("estado")
                            const indicadorEsfera = opcion.querySelector("[componente=indicadorSelecion]")
                            indicadorEsfera.removeAttribute("style")
                        })
                    }
                    if (estadoActual === "activado") {
                        opcionPulsada.removeAttribute("estado")
                        opcionPulsada.querySelector("[componente=indicadorSelecion]").removeAttribute("style")
                    } else {
                        opcionPulsada.setAttribute("estado", "activado")
                        opcionPulsada.querySelector("[componente=indicadorSelecion]").style.background = "blue"
                    }

                    const areaGrupoOpciones = e.target.closest("[area=grupoOpciones]")
                    await this.controladorEstadoGrupos(areaGrupoOpciones)


                },
                controladorEstadoGrupos: async (areaGrupoOpciones) => {

                    const gruposDelServicio = areaGrupoOpciones.querySelectorAll("[componente=grupo]")
                    let interruptorRevisarGrupos = null
                    const servicioUI = areaGrupoOpciones.closest("[servicioUID]")
                    const iconoGlobalServicio = servicioUI.querySelector("[indicador=global]")

                    gruposDelServicio.forEach(grupo => {

                        const configuracionDelGrupo = JSON.parse(grupo.getAttribute("conf"))
                        const opcionesDelGrupo = grupo.querySelectorAll("[selector=opcion]")
                        for (const o of opcionesDelGrupo) {
                            const estadoOpcionObligatoria = o.getAttribute("estado")
                            if (estadoOpcionObligatoria === "activado") {
                                interruptorRevisarGrupos = "activar"
                                continue
                            }
                        }

                    })
                    if (interruptorRevisarGrupos === "activar") {

                        gruposDelServicio.forEach(grupo => {
                            let estadoGrupoObligatorio = null

                            const configuracionDelGrupo = JSON.parse(grupo.getAttribute("conf"))
                            const confSelObligatoria = configuracionDelGrupo.confSelObligatoria
                            if (confSelObligatoria.includes("unaObligatoria")) {

                                const opcionesDelGrupo = grupo.querySelectorAll("[selector=opcion]")
                                for (const o of opcionesDelGrupo) {
                                    const estadoOpcionObligatoria = o.getAttribute("estado")
                                    if (estadoOpcionObligatoria === "activado") {
                                        estadoGrupoObligatorio = "activar"
                                        continue
                                    }
                                }
                                if (estadoGrupoObligatorio === "activar") {
                                    grupo.removeAttribute("style")
                                    grupo.setAttribute("estadoGrupo", "sel")
                                } else {
                                    grupo.style.background = "red"
                                    grupo.removeAttribute("estadoGrupo")
                                }
                            }
                        })
                        // Si todas las opciones de un grupo estan seleccionadas, se considera el grupo completamtne selecionado
                        let estadoSelServicio = "sel"

                        for (const grupo of gruposDelServicio) {

                            const configuracionDelGrupo = JSON.parse(grupo.getAttribute("conf"))
                            const confSelObligatoria = configuracionDelGrupo.confSelObligatoria
                            if (confSelObligatoria.includes("unaObligatoria")) {
                                const estadoGrupoObligatorio = grupo.getAttribute("estadoGrupo")
                                if (estadoGrupoObligatorio !== "sel") {
                                    estadoSelServicio = "desactivado"
                                    break
                                }
                            }
                        }
                        if (estadoSelServicio === "sel") {
                            servicioUI.setAttribute("estadoServicio", "selCompleta")
                            iconoGlobalServicio.style.background = "green"

                        } else {
                            iconoGlobalServicio.style.background = "orange"
                            servicioUI.removeAttribute("estadoServicio")
                        }
                    } else {
                        gruposDelServicio.forEach(grupo => {
                            const configuracionDelGrupo = JSON.parse(grupo.getAttribute("conf"))
                            const confSelObligatoria = configuracionDelGrupo.confSelObligatoria
                            if (confSelObligatoria.includes("unaObligatoria")) {
                                grupo.removeAttribute("style")
                                grupo.removeAttribute("estadoGrupo")
                            }
                        })
                        servicioUI.removeAttribute("estadoServicio")
                        iconoGlobalServicio.removeAttribute("style")

                    }
                },

            }
        }
    },
    componentes: {
        temporizador: null,
        pasarelas: {
            square: {
                crearSesionPago: async (instanciaUID) => {
                    const transaccion = {
                        zona: "componentes/pasarela/squareConstruyeCliente"
                    };
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    const selectorSesionesPago = document.querySelectorAll("#sessionPagoSquare")
                    selectorSesionesPago.forEach(session => {
                        session.remove()
                    })
                    const metadataClienteSquare = document.createElement("script")
                    metadataClienteSquare.setAttribute("id", "sessionPagoSquare")
                    metadataClienteSquare.setAttribute("type", "text/javascript")
                    metadataClienteSquare.innerHTML = `
                window.applicationId="${respuestaServidor?.squareApplicationId}";
                window.locationId="${respuestaServidor?.squareLocationId}";
                window.currency="${respuestaServidor?.squareAccountCurrency}";
                window.country="${respuestaServidor?.squareAccountCountry}";
                window.idempotencyKey="${respuestaServidor?.idempotencyKey}"
                `
                    const selectorSquareJS = document.querySelector("section:not([estado=obsoleto])")
                    const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (instanciaUIDRenderizada) {
                        selectorSquareJS.insertAdjacentElement("afterend", metadataClienteSquare);
                    }
                },
                inyectorSquareJS: async (instanciaUID) => {
                    return new Promise((resolve, reject) => {
                        const selectorMotorarranque = document.querySelector("[square=motorarranque]")
                        const squareJS = document.createElement("script");
                        squareJS.setAttribute("type", "text/javascript");

                        squareJS.setAttribute("src", "https://sandbox.web.squarecdn.com/v1/square.js");
                        squareJS.setAttribute("id", "squareJS")
                        squareJS.onload = resolve;
                        squareJS.onerror = () => {
                            reject(new Error("Error al cargar el archivo square.js"))
                        }
                        const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (instanciaUIDRenderizada) {
                            selectorMotorarranque.insertAdjacentElement("afterend", squareJS);
                        }
                    })
                },
                inyectorMetodosPago: async (instanciaUID) => {
                    return new Promise((resolve, reject) => {
                        const seccion = document.querySelector("section:not([estado=obsoleto])")
                        let metodoPagoCargadoCorrectamente = 0;
                        const totalMetodosPago = 4;
                        const metodosPago = [
                            "/componentes/javascript/square/sq-ach.js",
                            "/componentes/javascript/square/sq-apple-pay.js",
                            "/componentes/javascript/square/sq-google-pay.js",
                            "/componentes/javascript/square/sq-card-pay.js"
                        ];
                        metodosPago.forEach(metodoPago => {
                            const metodoPagoElemento = document.createElement('script');
                            metodoPagoElemento.setAttribute("type", "text/javascript")
                            metodoPagoElemento.src = metodoPago;
                            metodoPagoElemento.onload = () => {
                                metodoPagoCargadoCorrectamente++;
                                if (metodoPagoCargadoCorrectamente === totalMetodosPago) {
                                    resolve();
                                }
                            };
                            metodoPagoElemento.onerror = () => {
                                reject(new Error(`Error al cargar el metodo de pago: ${metodoPago}`));
                            };
                            const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (instanciaUIDRenderizada) {
                                seccion.appendChild(metodoPagoElemento);
                            }
                        });
                    });
                },
                inyectorFlujoPago: async (instanciaUID) => {
                    return new Promise((resolve, reject) => {
                        const seccion = document.querySelector("section:not([estado=obsoleto])")
                        const flujoPago = document.createElement("script");
                        flujoPago.setAttribute("type", "text/javascript");
                        flujoPago.setAttribute("src", "/componentes/javascript/square/sq-payment-flow.js");
                        flujoPago.onload = resolve;
                        flujoPago.onerror = () => {
                            reject(new Error("Error al cargar el archivo sq-payment-flow.js"))
                        }
                        const instanciaUIDRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (instanciaUIDRenderizada) {
                            seccion.appendChild(flujoPago)
                        }
                    })
                },
                uiForm: (destino) => {
                    const selectorDestino = document.querySelector(destino);
                    if (selectorDestino === null) {
                        const error = "casaVitini.componentes.square.intectorFlujoPago no encuentra el elemento de destino"
                        return casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }

                    const paymentForm = document.createElement("form");
                    paymentForm.className = "payment-form";
                    paymentForm.id = "fast-checkout";

                    const wrapperDiv = document.createElement("div");
                    wrapperDiv.className = "wrapper";
                    paymentForm.appendChild(wrapperDiv);

                    const applePayButton = document.createElement("div");
                    applePayButton.id = "apple-pay-button";
                    applePayButton.alt = "apple-pay";
                    applePayButton.type = "button";
                    wrapperDiv.appendChild(applePayButton);

                    const googlePayButton = document.createElement("div");
                    googlePayButton.id = "google-pay-button";
                    googlePayButton.alt = "google-pay";
                    googlePayButton.type = "button";
                    wrapperDiv.appendChild(googlePayButton);

                    let borderDiv = document.createElement("div");
                    borderDiv.className = "border";
                    wrapperDiv.appendChild(borderDiv);
                    const numberSpan = document.createElement("span");
                    numberSpan.textContent = "O";
                    borderDiv.appendChild(numberSpan);

                    const achWrapperDiv = document.createElement("div");
                    achWrapperDiv.id = "ach-wrapper";
                    wrapperDiv.appendChild(achWrapperDiv);
                    const achLabel = document.createElement("label");
                    achLabel.htmlFor = "ach-account-holder-name";
                    achLabel.textContent = "Full Name";
                    achWrapperDiv.appendChild(achLabel);
                    const achInput = document.createElement("input");
                    achInput.id = "ach-account-holder-name";
                    achInput.type = "text";
                    achInput.placeholder = "Jane Doe";
                    achInput.name = "ach-account-holder-name";
                    achInput.autocomplete = "name";
                    achWrapperDiv.appendChild(achInput);
                    const achMessageSpan = document.createElement("span");
                    achMessageSpan.id = "ach-message";
                    achWrapperDiv.appendChild(achMessageSpan);
                    const achButton = document.createElement("button");
                    achButton.id = "ach-button";
                    achButton.type = "button";
                    achButton.textContent = "Pay with Bank Account";
                    achWrapperDiv.appendChild(achButton);

                    borderDiv = document.createElement("div");
                    borderDiv.className = "border";

                    const orSpan = document.createElement("span");
                    orSpan.textContent = "OR";


                    const cardContainerDiv = document.createElement("div");
                    cardContainerDiv.id = "card-container";
                    wrapperDiv.appendChild(cardContainerDiv);

                    const cardButton = document.createElement("button");
                    cardButton.id = "card-button";
                    cardButton.type = "button";
                    cardButton.textContent = "Pagar reserva y confirmarla";
                    wrapperDiv.appendChild(cardButton);

                    const paymentFlowMessageSpan = document.createElement("span");
                    paymentFlowMessageSpan.id = "payment-flow-message";
                    wrapperDiv.appendChild(paymentFlowMessageSpan);
                    selectorDestino.appendChild(paymentForm);
                },
                flujoPagoUI: {
                    desplegarUI: (mensaje) => {
                        document.body.style.overflow = 'hidden';
                        const advertenciaInmersivaUI = document.createElement("section")
                        advertenciaInmersivaUI.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaUI.setAttribute("componente", "advertenciaInmersiva")
                        const spinnerContainer = document.createElement('div');
                        spinnerContainer.setAttribute("componente", "iconoFlujoPago");
                        spinnerContainer.classList.add("lds-spinner");
                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement('div');
                            spinnerContainer.appendChild(div);
                        }
                        advertenciaInmersivaUI.appendChild(spinnerContainer)
                        const info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.textContent = mensaje
                        advertenciaInmersivaUI.appendChild(info)
                        document.body.appendChild(advertenciaInmersivaUI)
                    },
                    botonAcetpar: () => {
                        const boton = document.createElement("div")
                        boton.setAttribute("class", "botonV1")
                        boton.textContent = "Aceptar"
                        boton.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                        return boton
                    },
                    infoDuranteFlujo: (mensaje) => {
                        const contenedorMensaje = document.querySelector("[componente=mensajeFlujoPasarela]")
                        contenedorMensaje.textContent = "Comprodando datos para realizar el pago..."
                    },
                    errorInfo: (mensaje) => {
                        document.querySelector("[componente=iconoFlujoPago]")?.remove()
                        const contenedorMensaje = document.querySelector("[componente=mensajeFlujoPasarela]")
                        contenedorMensaje.textContent = mensaje
                        const advertenciaInmersivaUI = document.querySelector("[componente=advertenciaInmersiva]")
                        const botonAceptar = casaVitini.componentes.flujoPagoUI.botonAcetpar()
                        advertenciaInmersivaUI.appendChild(botonAceptar)
                    }
                },
            },
        },
        loginUI: async () => {
            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
            const url = window.location.pathname;
            const zona = {
                vista: url,
                tipoOrigen: "historial",
            }
            await casaVitini.shell.navegacion.controladorVista(zona)
        },
        privacidad: {
            arranque: (vista) => {
                const filtro = /privacidad(\/.*)?$/
                const resultadoFiltro = filtro.test(vista)
                if (vista && resultadoFiltro) {
                    return false
                }

                const cookies = casaVitini.componentes.privacidad.obtenerCookies()
                if (cookies.privacidad !== "consentimientoAceptado") {
                    return true
                }
            },
            obtenerCookies: () => {
                const cookiesArray = document.cookie.split("; ")
                const cookiesObjeto = {}

                for (const cadenaDeLaCookie of cookiesArray) {
                    const arrayPorCookie = cadenaDeLaCookie.split("=")
                    const nombre = arrayPorCookie[0]
                    const valor = arrayPorCookie[1]
                    cookiesObjeto[nombre] = valor
                }
                return cookiesObjeto
            },
            borrarCookies: () => {
                localStorage.clear()
                const cookies = casaVitini.componentes.privacidad.obtenerCookies()
                for (const [nombreCookies, valorCookie] of Object.entries(cookies)) {
                    if ('cookieStore' in window) {
                        cookieStore?.delete(nombreCookies)
                    } else {
                        document.cookie = nombreCookies + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
                    }
                }
            },
            crearCookieConsentimiento: () => {
                const fecha = new Date();
                fecha.setTime(fecha.getTime() + (365 * 24 * 60 * 60 * 1000));  // 24 horas desde ahora
                const expira = "expires=" + fecha.toUTCString();
                document.cookie = "privacidad=consentimientoAceptado; " + expira + "; SameSite=Strict; path=/; Secure";
            },
            advertenciaPrivacidadInicial: () => {

                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "privacidad")

                const titulo = document.createElement("p")
                titulo.textContent = "Advertencia de privacidad y uso de cookies "
                titulo.classList.add("tituloGris")
                main.appendChild(titulo)

                const resumenInicial = document.createElement("p")
                resumenInicial.style.marginTop = "10px"
                resumenInicial.textContent = `Este sitio web usa cookies propias y de terceros para soportar la navegación, mejorar la experiencia de usuario, personalizar el contenido y realizar análisis estadísticos sobre los hábitos de navegación.`
                main.appendChild(resumenInicial)

                const contenedorBotones = casaVitini.componentes.privacidad.ui.contenedorSecciones()
                main.appendChild(contenedorBotones)

                const contenedorDecision = casaVitini.componentes.privacidad.ui.contenedorDecision()
                main.appendChild(contenedorDecision)


            },
            ui: {
                contenedorSecciones: () => {

                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElasticoRelativo")
                    marcoElastico.style.maxWidth = "720px"
                    marcoElastico.style.gap = "10px"
                    marcoElastico.setAttribute("espacio", "politicas")

                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("flexVertical", "gap10")
                    marcoElastico.appendChild(contenedorBotones)


                    const botonPoliticaCookies = document.createElement("a")
                    botonPoliticaCookies.classList.add("botonV1")
                    botonPoliticaCookies.textContent = "Política de cookies"
                    botonPoliticaCookies.setAttribute("href", "/politicas/privacidad/cookies")
                    botonPoliticaCookies.setAttribute("vista", "/politicas/privacidad/cookies")
                    botonPoliticaCookies.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(botonPoliticaCookies)

                    const botonPoliticaPrivacidad = document.createElement("a")
                    botonPoliticaPrivacidad.classList.add("botonV1")
                    botonPoliticaPrivacidad.textContent = "Política de privacidad"
                    botonPoliticaPrivacidad.setAttribute("href", "/politicas/privacidad/politica_de_privacidad")
                    botonPoliticaPrivacidad.setAttribute("vista", "/politicas/privacidad/politica_de_privacidad")
                    botonPoliticaPrivacidad.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(botonPoliticaPrivacidad)

                    const botonCondicionesDeUso = document.createElement("a")
                    botonCondicionesDeUso.classList.add("botonV1")
                    botonCondicionesDeUso.setAttribute("href", "/politicas/privacidad/condiciones_de_uso")
                    botonCondicionesDeUso.setAttribute("vista", "/politicas/privacidad/condiciones_de_uso")
                    botonCondicionesDeUso.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    botonCondicionesDeUso.textContent = "Condiciones de uso"
                    contenedorBotones.appendChild(botonCondicionesDeUso)

                    return marcoElastico
                },
                contenedorDecision: () => {
                    const contenedorDecision = document.createElement("div")
                    contenedorDecision.classList.add("contenedorDecision")
                    contenedorDecision.setAttribute("contenedor", "botones")

                    const botonRechazar = document.createElement("a")
                    botonRechazar.classList.add("botonPrivacidad")
                    botonRechazar.textContent = "Rechazar todo"
                    botonRechazar.addEventListener("click", () => {
                        casaVitini.componentes.privacidad.borrarCookies()
                        window.location.href = "about:blank"
                    })
                    contenedorDecision.appendChild(botonRechazar)

                    const botonAceptar = document.createElement("a")
                    botonAceptar.classList.add("botonPrivacidad")
                    botonAceptar.textContent = "Aceptar todo"
                    botonAceptar.addEventListener("click", () => {

                        casaVitini.componentes.privacidad.crearCookieConsentimiento()
                        const url = window.location.pathname;
                        if (url === "/") {
                            return casaVitini.shell.navegacion.controladorVista("portada")
                        } else if (url === "/politicas/privacidad") {
                            const main = document.querySelector("main")
                            main.querySelector("[contenedor=botones]")?.remove()
                            const contenedorDecision = casaVitini.componentes.privacidad.ui.revocarDecision()
                            main.querySelector("[espacio=politicas]").appendChild(contenedorDecision)
                        } else {
                            return casaVitini.shell.navegacion.controladorVista(url)
                        }
                    })
                    contenedorDecision.appendChild(botonAceptar)
                    return contenedorDecision
                },
                revocarDecision: () => {
                    const contenedorDecision = document.createElement("div")
                    contenedorDecision.classList.add("flexVertical", "gap10")
                    contenedorDecision.setAttribute("contenedor", "botones")


                    const textoInfo = document.createElement("div")
                    textoInfo.classList.add("padding14", "textoCentrado")
                    textoInfo.textContent = "Ha aceptado las políticas de privacidad y condiciones de uso de Casa Vitini, si quiere, puede revocarlas en cualquier momento borrando la cache de su navegador o pulsando en el botón de revocar de abajo."
                    contenedorDecision.appendChild(textoInfo)

                    const botonRechazar = document.createElement("a")
                    botonRechazar.classList.add("botonV1")
                    botonRechazar.textContent = "Revocar decisión y borrar cookies"
                    botonRechazar.addEventListener("click", () => {
                        casaVitini.componentes.privacidad.borrarCookies()
                        document.querySelector("[contenedor=botones]")?.remove()
                        const main = document.querySelector("main")
                        const contenedorDecision = casaVitini.componentes.privacidad.ui.contenedorDecision()
                        main.querySelector("[espacio=politicas]").appendChild(contenedorDecision)


                    })
                    contenedorDecision.appendChild(botonRechazar)
                    return contenedorDecision


                }
            }
        },
        diccionarios: {
            reserva: {
                estadoPagoUI: "Estado del pago",
                estadoReservaIDV: (data) => {
                    if (data === "pendiente") {
                        return "Pendiente"
                    }
                    if (data === "confirmada") {
                        return "confirmada"
                    }
                    if (data === "cancelada") {
                        return "Cancelada"
                    }
                },
                origenIDV: (data) => {
                    if (data === "cliente") {
                        return "Cliente"
                    }
                    if (data === "administracion") {
                        return "Adminitración"
                    }
                },
                estadoPagoIDV: (data) => {
                    if (data === "noPagado") {
                        return "No pagado"
                    }
                    if (data === "pagadoParcialmente") {
                        return "Pagado parcialmente"
                    }
                    if (data === "pagadoSuperadamente") {
                        return "Pagado superadament"
                    }
                }
            }

        }
    },
    utilidades: {
        cadenas: {
            snakeToCamel: (snake) => {
                return snake.replace(/_([a-z])/g, (match, group) => {
                    return group.toUpperCase();
                });
            },
            camelToSnake: (camel) => {

                return camel.replace(/[A-Z]/g, (match) => {
                    return '_' + match.toLowerCase();
                });
            },
            constructorComasEY: (data) => {
                const array = data.array
                const articulo = data.articulo || ""
                if (array.length === 1) {
                    return array[0];
                } else {
                    const formattedString = array.slice(0, -1).join(', ' + articulo + " ") + ' y ' + articulo + " " + array.slice(-1);
                    return formattedString;
                }

            },
        },
        conversor: {
            fecha_humana_hacia_ISO: (fecha) => {
                const filtroFechaHumana = /^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[0-2])\/(\d{4})$/;
                if (filtroFechaHumana.test(fecha)) {
                    const fechaArray = fecha.split("/")
                    const dia = fechaArray[0]
                    const mes = fechaArray[1]
                    const ano = fechaArray[2]
                    const fechaISO = `${ano}-${mes}-${dia}`
                    return fechaISO
                } else {
                    const m = "En fecha_humana_hacia_ISO no se reconoce el formato humano"
                    return casaVitini.ui.componentes.advertenciaInmersiva(m)
                }
            },
            fecha_ISO_hacia_humana: (fecha) => {

                const filtroFechaISO = /^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;
                if (filtroFechaISO.test(fecha)) {
                    const fechaArray = fecha.split("-")
                    const dia = fechaArray[2]
                    const mes = fechaArray[1]
                    const ano = fechaArray[0]
                    const fechaHumana = `${dia}/${mes}/${ano}`
                    return fechaHumana
                } else {
                    const m = "En fecha_ISO_hacia_humana no se reconoce el formato ISO"
                    return casaVitini.ui.componentes.advertenciaInmersiva(m)
                }
            },
            extraerFechasInternas: (inicio, fin) => {
                const fechas = [];
                const inicio_objeto = new Date(inicio);
                const fin_objeto = new Date(fin);


                fin_objeto.setDate(fin_objeto.getDate() + 1);

                while (inicio_objeto < fin_objeto) {
                    fechas.push(inicio_objeto.toISOString().split("T")[0]);
                    inicio_objeto.setDate(inicio_objeto.getDate() + 1);
                }
                return fechas;
            },
            base64HaciaCadena: (base64) => {
                const binaryString = atob(base64);
                const asciiString = Array.from(binaryString, char => char).join('');
                return asciiString
            }
        },
        observador: {
            medirPorJerarquiaDom: {
                horizontal: (elemento) => {
                    let distancia = 0;

                    while (elemento) {
                        distancia += elemento.offsetLeft;
                        elemento = elemento.offsetParent;
                    }
                    return distancia;
                },
                vertical: {
                    desdeArribaDelElemento: (elemento) => {
                        let distancia = 0;

                        while (elemento) {
                            distancia += elemento.offsetTop;
                            elemento = elemento.offsetParent;
                        }
                        return distancia;
                    },
                    desdeAbajoDelElemento: (elemento) => {
                        let distancia = elemento.clientHeight;

                        while (elemento) {
                            distancia += (elemento.offsetTop);
                            elemento = elemento.offsetParent;
                        }
                        return distancia;
                    }
                }
            },
            anchoActualVentanad: window.innerWidth,
            menusFlotanes: (configuracion) => {
                const elementoParaObservar = configuracion.elementoParaObservar
                const elementoDestino = configuracion.elementoDestino


                const borrarInstancia = () => {
                    if (instanciaDelObservador) {
                        instanciaDelObservador.disconnect(); // Deja de observar el elemento
                        instanciaDelObservador = null; // Limpia la referencia a la instancia del observador
                    }
                };

                const selectorElementoOrigen = document.querySelector(elementoParaObservar);
                let instanciaDelObservador; // Declara la variable fuera del alcance de la función observador
                if (!selectorElementoOrigen) {
                    const mensaje = "No se encuentra el elemento a observar";
                    return casaVitini.ui.componentes.advertenciaInmersiva(mensaje);
                }
                const selectorElementoDestino = document.querySelector(elementoParaObservar);
                if (!selectorElementoDestino) {
                    const mensaje = "No se encuentra el elemento de destino";
                    borrarInstancia()
                    return casaVitini.ui.componentes.advertenciaInmersiva(mensaje);
                }

                instanciaDelObservador = new ResizeObserver(entries => {
                    for (let entry of entries) {
                        const { width, height, x, y } = entry.contentRect;
                        const contenedorRetorno = {
                            width: width,
                            height: height,
                            x: x,
                            y: y
                        }
                        const altoMenuFlotante = y + height
                        const ladoMenuFlotante = x
                    }
                });
                instanciaDelObservador.observe(selectorElementoOrigen);
            }

        },
        granuladorURL: () => {
            const urlActual = window.location.pathname
            const directoriosURL = []
            const parametrosURL = {}
            const parametrosArray = []
            let arrayURL = urlActual.split("/")
            arrayURL = arrayURL.filter((url) => url)
            arrayURL.forEach((bloque) => {
                if (bloque.includes(":")) {
                    const desgloseParametro = bloque.split(":")
                    parametrosURL[desgloseParametro[0]] = desgloseParametro[1]
                    const par = {
                        parametro: desgloseParametro[0],
                        valor: desgloseParametro[1]
                    }
                    parametrosArray.push(par)
                } else {
                    directoriosURL.push(bloque)
                }
            })
            const contenedorSeguroParaParametros = []
            for (const par of parametrosArray) {
                const parametro = par.parametro
                const valor = par.valor
                const estructura = parametro + ":" + valor
                contenedorSeguroParaParametros.push(estructura)
            }
            const contenedorParametrosParaFusion = []
            for (const [parametro, valor] of Object.entries(parametrosURL)) {
                const estructura = parametro + ":" + valor
                contenedorParametrosParaFusion.push(estructura)
            }
            const estructuraFinal = {
                rawArray: arrayURL,
                raw: urlActual,
                directorios: directoriosURL,
                parametros: parametrosURL,
                directoriosFusion: "/" + directoriosURL.join("/"),
                parametrosFusion: "/" + contenedorParametrosParaFusion.join("/"),
                contenedorSeguroParaParametros: contenedorSeguroParaParametros
            }
            return estructuraFinal
        },
        codigoFechaInstancia: function () {
            const generarUID = (() => {
                let ultimoUID = null;

                return () => {
                    let uid;
                    let fecha;
                    let año, mes, dia, horas, minutos, segundos, milisegundos;

                    do {
                        fecha = new Date();
                        año = fecha.getFullYear();
                        mes = String(fecha.getMonth() + 1).padStart(2, "0");
                        dia = String(fecha.getDate()).padStart(2, "0");
                        horas = String(fecha.getHours()).padStart(2, "0");
                        minutos = String(fecha.getMinutes()).padStart(2, "0");
                        segundos = String(fecha.getSeconds()).padStart(2, "0");
                        milisegundos = String(fecha.getMilliseconds()).padStart(3, "0");


                        uid = `${año}${mes}${dia}${horas}${minutos}${segundos}${milisegundos}`;
                    } while (uid === ultimoUID)
                    ultimoUID = uid;

                    return uid;
                };
            })();

            const contenedorVolatil = casaVitini.utilidades.contenedorVolatil || {};
            let uid = generarUID();

            while (contenedorVolatil[uid]) {
                uid = generarUID();
            }

            Object.keys(contenedorVolatil).forEach((contenedorUID) => {
                delete contenedorVolatil[contenedorUID];
            });

            contenedorVolatil[uid] = true;
            casaVitini.utilidades.contenedorVolatil = contenedorVolatil;

            return uid;
        },
        contenedorVolatil: null,
        ralentizador: async (milisegundos) => {
            await new Promise(resolve => setTimeout(resolve, Number(milisegundos)));
        },
        fechas: {
            constructorObjetoEstructuraPrecioDia: (fechaEntrada, fechaSalida) => {
                const arregloFechas = []
                let fechaEntrada_Objeto = new Date(fechaEntrada)
                const fechaSalida_Objeto = new Date(fechaSalida)

                fechaEntrada_Objeto.setHours(0, 0, 0, 0)
                fechaSalida_Objeto.setHours(0, 0, 0, 0)

                while (fechaEntrada_Objeto <= fechaSalida_Objeto) {
                    arregloFechas.push(fechaEntrada_Objeto.toISOString().split('T')[0])
                    fechaEntrada_Objeto.setDate(fechaEntrada_Objeto.getDate() + 1)
                }

                return arregloFechas
            }
        },
        borrarPosicionDeArrayPorCandena: (data) => {
            const array = data.array
            const cadenaParaBorrar = data.cadenaParaBorrar
            const indice = array.indexOf(cadenaParaBorrar);
            if (indice !== -1) {
                array.splice(indice, 1);
            }
            return array
        },
        validarRutaAFuncion: (ruta) => {
            const partes = ruta.split('.');
            let actual = casaVitini;

            for (let parte of partes) {
                if (!actual[parte]) {
                    return false;
                }
                actual = actual[parte];
            }

            return typeof actual === 'function';

        },
        ejecutarFuncionPorNomreDinamicoSinContexto: function (data) {
            const ruta = data.ruta
            const args = data.args
            const metodo = ruta.split('.').reduce((acc, parte) => acc[parte], casaVitini);
            if (typeof metodo === 'function') {
                return metodo(args);
            } else {
                throw new Error(`La ruta ${ruta} no corresponde a una función`);
            }
        },
        ejecutarFuncionPorNombreDinamicoConContexto: async function (data) {
            const ruta = data.ruta;
            const args = data.args;



            const partes = ruta.split('.');
            const contexto = partes.slice(0, -1).reduce((acc, parte) => acc[parte], casaVitini);
            const metodo = contexto[partes[partes.length - 1]];

            if (typeof metodo === 'function') {
                return await metodo.call(contexto, args);
            } else {
                throw new Error(`La ruta ${ruta} no corresponde a una función`);
            }
        },
        calendarios: {
            calcularNumeroSemanasDelMes: (data) => {

                const diasAnterioresAlPrimerDia = data.posicionPrimerDiaSemana - 1
                const numeroDiasPorMes = data.numeroDiasPorMes
                const totalDias = numeroDiasPorMes + diasAnterioresAlPrimerDia;
                const incertidumbre = totalDias / 7;
                const semanas = Number.isInteger(incertidumbre) ? incertidumbre : Math.ceil(totalDias / 7);
                return semanas;
            }
        }
    },
    administracion: {
        reservas: {
            arranque: async () => {
                const main = document.querySelector("main")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const parametros = granuladoURL.parametros

                main.setAttribute("zonaCSS", "/administracion/reservas")
                const botones = document.querySelectorAll("[componente=botonAdministracion]")
                botones.forEach((boton) => {
                    boton.addEventListener("click", (boton) => {
                        boton.preventDefault()
                        const vista = boton.target.getAttribute("vista")
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    })
                })
                if (parametros.reserva) {
                    main.innerHTML = null
                    main.setAttribute("zonaCSS", "administracion/reservas/detallesReserva")

                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add(
                        "marcoElasticoRelativo"
                    )
                    main.appendChild(marcoElastico)


                    const reservaUID = parametros.reserva
                    const reservaUI = await casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.despliege({
                        reservaUID
                    })
                    marcoElastico.appendChild(reservaUI)

                    const zonaURL = parametros.zona

                    if (zonaURL) {
                        const categoriaGlobalIDV = casaVitini.utilidades.cadenas.snakeToCamel(zonaURL)
                        casaVitini.ui.componentes.componentesComplejos.detallesReservaUI.reservaUI.ui.componentesUI.categoriasGlobalesUI.controladorCategorias({
                            origen: "url",
                            categoria: categoriaGlobalIDV
                        })
                    }

                }
            },
            buscador: {
                arranque: () => {
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")

                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    const directorios = granuladoURL.directorios

                    if (Object.keys(granuladoURL.parametros).length === 0) {

                        main.setAttribute("zonaCSS", "administracion/reservas/buscador")
                        casaVitini.administracion.reservas.buscador.buscadorUI()
                    } else if (Object.keys(granuladoURL.parametros).length > 0) {

                        main.setAttribute("zonaCSS", "administracion/reservas/buscador")
                        casaVitini.administracion.reservas.buscador.buscadorUI()


                        const parametrosFormatoURL = granuladoURL.parametros
                        const parametrosFormatoIDV = {}
                        Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                            const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                            let nombreColumnaIDV
                            if ((valorParametroURL)?.toLowerCase() === "reserva") {
                                nombreColumnaIDV = "reservaUID"
                            } else if ((valorParametroURL)?.toLowerCase() === "estado_reserva") {
                                nombreColumnaIDV = "estadoReservaIDV"
                            } else if (valorParametroURL) {
                                nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                            }
                            parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                            parametrosFormatoIDV.instanciaUID = instanciaUID
                        })
                        const buscadorUI = document.querySelector("[componente=navegacionZonaAdministracion]")

                        const estadoBusquedaUI = document.createElement("div")
                        estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                        estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                        estadoBusquedaUI.textContent = "Buscando..."
                        buscadorUI.parentNode.insertBefore(estadoBusquedaUI, buscadorUI.nextSibling);


                        casaVitini.administracion.reservas.buscador.mostrarReservasResueltas(parametrosFormatoIDV)
                    } else {
                        casaVitini.ui.componentes.urlDesconocida()
                    }
                },
                buscadorUI: (url) => {
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()

                    const marcoElastico = document.createElement("div")
                    marcoElastico.classList.add("marcoElasticoRelativo")
                    marcoElastico.setAttribute("componente", "marcoElastico")
                    const espacioReservas = document.createElement("div")
                    espacioReservas.setAttribute("componente", "espacioReservas")
                    espacioReservas.classList.add("administracion_reservas_espacioReservas")
                    const contenedorBotonesGlobales = document.createElement("div")
                    contenedorBotonesGlobales.classList.add(
                        "grid",
                        "grid3Columnas",
                        "borderRadius16",
                        "gap6"
                    )
                    const botonVerHoy = document.createElement("a")
                    botonVerHoy.classList.add("administracion_reservas_contenedorBotonesGlobales")
                    botonVerHoy.setAttribute("boton", "botonVerHoy")
                    botonVerHoy.addEventListener("click", casaVitini.administracion.reservas.buscador.verReservasHoy)
                    botonVerHoy.textContent = "Ver entradas hoy"
                    contenedorBotonesGlobales.appendChild(botonVerHoy)
                    const botonReservasPendientes = document.createElement("a")
                    botonReservasPendientes.classList.add("administracion_reservas_contenedorBotonesGlobales")
                    botonReservasPendientes.textContent = "Reservas pendientes de revisión"
                    botonReservasPendientes.setAttribute("vista", "/administracion/reservas/pendientes_de_revision")
                    botonReservasPendientes.setAttribute("href", "/administracion/reservas/pendientes_de_revision")
                    botonReservasPendientes.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotonesGlobales.appendChild(botonReservasPendientes)
                    const botonCrearReserva = document.createElement("a")
                    botonCrearReserva.classList.add("administracion_reservas_contenedorBotonesGlobales")
                    botonCrearReserva.textContent = "Crear una nueva reserva"
                    botonCrearReserva.setAttribute("vista", "/administracion/reservas/nueva")
                    botonCrearReserva.setAttribute("href", "/administracion/reservas/nueva")
                    botonCrearReserva.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotonesGlobales.appendChild(botonCrearReserva)
                    espacioReservas.appendChild(contenedorBotonesGlobales)

                    let buscadorUI = document.createElement("nav")
                    buscadorUI.classList.add("navegacionZonaAdministracion")
                    buscadorUI.setAttribute("componente", "navegacionZonaAdministracion")
                    let bloqueContenedor = document.createElement("div")
                    bloqueContenedor.classList.add("reservasBloqueContenedor")
                    const buscadorPorPalaba = document.createElement("input")
                    buscadorPorPalaba.classList.add("campoBuscadorIdReservas")
                    buscadorPorPalaba.setAttribute("componenteCampo", "buscadorPorId")
                    buscadorPorPalaba.setAttribute("origenBusqueda", "porTerminos")
                    buscadorPorPalaba.setAttribute("step", "any")
                    buscadorPorPalaba.setAttribute("placeholder", "Escribe para buscar reservas")
                    buscadorPorPalaba.addEventListener("input", casaVitini.administracion.reservas.buscador.buscadorReservas)
                    espacioReservas.appendChild(buscadorPorPalaba)
                    let buscadorReservasPorFecha = document.createElement("div")
                    buscadorReservasPorFecha.classList.add("adminsitracionReservasBuscador")
                    bloqueContenedor.appendChild(buscadorReservasPorFecha)
                    let bloqueFechas = document.createElement("div")
                    bloqueFechas.classList.add("adminsitracionBloqueSelecionDias")
                    bloqueFechas.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                    buscadorReservasPorFecha.appendChild(bloqueFechas)
                    let bloqueFechaEntrada = document.createElement("div")
                    bloqueFechaEntrada.classList.add("diaEntradaNuevoAdministracion")
                    bloqueFechaEntrada.classList.add("administracionFormatoBloqueDiaNuevo")
                    bloqueFechaEntrada.setAttribute("calendario", "entrada")
                    bloqueFechaEntrada.setAttribute("paralizadorevento", "ocultadorCalendarios")

                    bloqueFechaEntrada.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_entrada_perfilSimple",
                            contenedorOrigenIDV: "[calendario=entrada]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "inicioRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Seleciona una fecha de inicio de rango para la búsqueda"

                        })
                    })

                    bloqueFechaEntrada.setAttribute("componenteBuscador", "compartidoID")
                    bloqueFechas.appendChild(bloqueFechaEntrada)
                    let textoFechaEntrada = document.createElement("div")
                    textoFechaEntrada.classList.add("textoDiaNuevoAdministracion")
                    textoFechaEntrada.textContent = "Fecha de entrada"
                    bloqueFechaEntrada.appendChild(textoFechaEntrada)
                    let fechaEntradaElemento = document.createElement("div")
                    fechaEntradaElemento.classList.add("fechaNuevo")
                    fechaEntradaElemento.setAttribute("fechaUI", "fechaInicio")
                    fechaEntradaElemento.textContent = "(Seleccionar)"
                    bloqueFechaEntrada.appendChild(fechaEntradaElemento)
                    let bloqueFechaSalida = document.createElement("div")
                    bloqueFechaSalida.classList.add("diaEntradaNuevoAdministracion")
                    bloqueFechaSalida.classList.add("administracionFormatoBloqueDiaNuevo")
                    bloqueFechaSalida.setAttribute("calendario", "salida")
                    bloqueFechaSalida.setAttribute("componenteBuscador", "compartidoID")

                    bloqueFechaSalida.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_salida_perfilSimple",
                            contenedorOrigenIDV: "[calendario=salida]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "finalRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Seleciona una fecha de fin de rango para la búsqueda"
                        })
                    })
                    bloqueFechaSalida.setAttribute("paralizadorevento", "ocultadorCalendarios")
                    bloqueFechas.appendChild(bloqueFechaSalida)
                    let textoFechaSalida = document.createElement("div")
                    textoFechaSalida.classList.add("textoDiaNuevoAdministracion")
                    textoFechaSalida.textContent = "Fecha de salida"
                    bloqueFechaSalida.appendChild(textoFechaSalida)
                    let fechaSalidaElemento = document.createElement("div")
                    fechaSalidaElemento.classList.add("fechaNuevo")
                    fechaSalidaElemento.setAttribute("fechaUI", "fechaFin")
                    fechaSalidaElemento.textContent = "(Seleccionar)"
                    bloqueFechaSalida.appendChild(fechaSalidaElemento)
                    let selectorRango = document.createElement("div")
                    selectorRango.classList.add("selectorRango")
                    let opcionRango = document.createElement("p")
                    opcionRango.classList.add("selectorRangoOpcion")
                    opcionRango.setAttribute("selectorRango", "cualquieraQueCoincida")
                    opcionRango.textContent = "Cualquiera que coincida"
                    opcionRango.addEventListener("click", () => {
                        casaVitini.administracion.reservas.buscador.seleccionarRango("cualquieraQueCoincida")
                    })
                    selectorRango.appendChild(opcionRango)
                    opcionRango = document.createElement("p")
                    opcionRango.classList.add("selectorRangoOpcion")
                    opcionRango.setAttribute("selectorRango", "soloDentroDelRango")
                    opcionRango.textContent = "Solo dentro del rango"
                    opcionRango.addEventListener("click", () => {
                        casaVitini.administracion.reservas.buscador.seleccionarRango("soloDentroDelRango")
                    })
                    selectorRango.appendChild(opcionRango)
                    opcionRango = document.createElement("p")
                    opcionRango.classList.add("selectorRangoOpcion")
                    opcionRango.setAttribute("selectorRango", "porFechaDeEntrada")
                    opcionRango.textContent = "Por fecha de entradas"
                    opcionRango.addEventListener("click", () => {
                        casaVitini.administracion.reservas.buscador.seleccionarRango("porFechaDeEntrada")
                    })
                    selectorRango.appendChild(opcionRango)
                    opcionRango = document.createElement("p")
                    opcionRango.classList.add("selectorRangoOpcion")
                    opcionRango.setAttribute("selectorRango", "porFechaDeSalida")
                    opcionRango.textContent = "Por fecha de salida"
                    opcionRango.addEventListener("click", () => {
                        casaVitini.administracion.reservas.buscador.seleccionarRango("porFechaDeSalida")
                    })
                    selectorRango.appendChild(opcionRango)
                    buscadorReservasPorFecha.appendChild(selectorRango)
                    let botonMostrarReservas = document.createElement(("div"))
                    botonMostrarReservas.classList.add("botonMostrarDisponibilidad")
                    botonMostrarReservas.setAttribute("boton", "mostrarReservas")
                    botonMostrarReservas.setAttribute("origenBusqueda", "porFecha")
                    botonMostrarReservas.addEventListener("click", casaVitini.administracion.reservas.buscador.mostrarReservasPorRango)
                    buscadorUI.appendChild(bloqueContenedor)
                    botonMostrarReservas.textContent = "Mostrar reservas"
                    buscadorReservasPorFecha.appendChild(botonMostrarReservas)
                    espacioReservas.appendChild(buscadorUI)


                    const contenedorResultados = document.createElement("div")
                    contenedorResultados.setAttribute("contenedor", "reservasEncontradas")
                    contenedorResultados.classList.add(
                        "flexVertical",
                    )
                    espacioReservas.appendChild(contenedorResultados)




                    marcoElastico.appendChild(espacioReservas)
                    const seccion = document.querySelector("main")
                    seccion.appendChild(marcoElastico)
                },
                seleccionarDia: (dia) => {
                    let diaSeleccionadoComoElemento = dia.target;
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    let diaSeleccionado = dia.target.getAttribute("dia")
                    diaSeleccionado = diaSeleccionado.padStart(2, "0")
                    diaSeleccionado = Number(diaSeleccionado)
                    let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                    anoSeleccionado = anoSeleccionado.padStart(4, "0")
                    anoSeleccionado = Number(anoSeleccionado)
                    let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                    mesSeleccionado = mesSeleccionado.padStart(2, "0")
                    mesSeleccionado = Number(mesSeleccionado)
                    const fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    const selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                    selectorDias.forEach((dia) => {

                        dia.classList.remove("calendarioDiaReserva")
                        dia.classList.remove("calendarioDiaSeleccionado")
                    })
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        if (calendarioIO === "entrada") {
                            document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                            document.querySelector("#fechaEntrada").textContent = "Seleccionar"
                        }
                        if (calendarioIO === "salida") {
                            document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                            document.querySelector("#fechaSalida").textContent = "Seleccionar"
                        }
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                    }
                    const diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    diasDisponibles.forEach(diaDisponible => {
                        diaDisponible.removeAttribute("estadoDia")
                        diaDisponible.style.background = ""
                        diaDisponible.style.color = ""
                    })
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                    let fechaEntradaSeleccionada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    let datosFechaEntradaSeleccionada
                    if (fechaEntradaSeleccionada) {
                        const fechaEntradaSeleccionada_array = fechaEntradaSeleccionada.split("/")
                        diaSeleccionadoEntrada = fechaEntradaSeleccionada_array[0]
                        diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                        mesSeleccionadoEntrada = fechaEntradaSeleccionada_array[1]
                        mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                        anoSeleccionadoEntrada = fechaEntradaSeleccionada_array[2]
                        anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                        datosFechaEntradaSeleccionada = "existen"
                    }
                    let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    let datosFechaSalidaSeleccionada
                    if (fechaSalidaSelecionda) {
                        const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                        diaSeleccionadoSalida = fechaSalidaSelecionda_array[0]
                        diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                        mesSeleccionadoSalida = fechaSalidaSelecionda_array[1]
                        mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                        anoSeleccionadoSalida = fechaSalidaSelecionda_array[2]
                        anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                        datosFechaSalidaSeleccionada = "existen"
                    }
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("#fechaEntrada").textContent = fechaSeleccionadaUI
                        if (fechaSalidaSelecionda) {
                            if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {

                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("#fechaSalida").textContent = fechaSeleccionadaUI
                        if (fechaEntradaSeleccionada) {
                            if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                    }
                },
                mostrarDetallesReserva: (transaccion) => {
                    transaccion.preventDefault()
                    transaccion.stopPropagation()
                    const reserva = transaccion.target.parentNode.getAttribute("reserva")
                    const vista = "/administracion/reservas/" + reserva
                    const navegacion = {
                        vista: vista,
                        tipoOrigen: "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(navegacion)
                },
                constructorCalendario: async (boton) => {
                    const botonID = boton.target.getAttribute("calendario")
                    const alturaDinamicaArriba = casaVitini.utilidades.observador.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton.target.closest("[calendario]")) + 20
                    const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorCalendario = document.querySelector("[contenedor=calendario]")
                    const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    let datosFechaEntradaSeleccionada
                    if (fechaEntradaVolatil_Humana) {
                        const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("/")
                        diaSeleccionadoEntrada = Number(fechaEntradaAarray[0])
                        mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                        anoSeleccionadoEntrada = Number(fechaEntradaAarray[2])
                    }
                    const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    let datosFechaSalidaSeleccionada
                    if (fechaSalidaVolatil_Humana) {
                        const fechaSaliraArray = fechaSalidaVolatil_Humana.split("/")
                        diaSeleccionadoSalida = Number(fechaSaliraArray[0])
                        mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                        anoSeleccionadoSalida = Number(fechaSaliraArray[2])
                    }
                    if (botonID === "entrada") {
                        if (selectorCalendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        }
                        if (selectorCalendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)

                        }
                        if (fechaEntradaVolatil_Humana) {
                            const calendario = {
                                tipo: "personalizado",
                                tipoFecha: "entrada",
                                diaSeleccionado: diaSeleccionadoEntrada,
                                mes: Number(mesSeleccionadoEntrada),
                                ano: Number(anoSeleccionadoEntrada)
                            }
                            const tipoFecha = {
                                tipoFecha: "entrada",
                                almacenamientoCalendarioID: "AdministracionCalendario",
                                perfilMes: "calendario_entrada_perfilSimple",
                                calendarioIO: "entrada",
                                mensajeInfo: "Selecciona una fecha de entrada para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.instanciaUID = instanciaUID
                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        } else {
                            const calendario = {
                                tipo: "actual",
                                tipoFecha: "entrada",
                            }
                            const tipoFecha = {
                                tipoFecha: "entrada",
                                almacenamientoCalendarioID: "administracionCalendario",
                                perfilMes: "calendario_entrada_perfilSimple",
                                calendarioIO: "entrada",
                                mensajeInfo: "Selecciona una fecha de entrada para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.instanciaUID = instanciaUID
                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        }
                    }
                    if (botonID === "salida") {
                        if (selectorCalendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)

                        }
                        if (selectorCalendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        }
                        if (!fechaEntradaVolatil_Humana && !fechaSalidaVolatil_Humana) {
                            const calendario = {
                                tipo: "actual",
                                tipoFecha: "salida",
                            }
                            const tipoFecha = {
                                tipoFecha: "salida",
                                almacenamientoCalendarioID: "administracionCalendario",
                                perfilMes: "calendario_salida_perfilSimple",
                                calendarioIO: "salida",
                                mensajeInfo: "Selecciona una fecha de salida para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.instanciaUID = instanciaUID

                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        }
                        if (fechaEntradaVolatil_Humana && !fechaSalidaVolatil_Humana) {
                            const calendario = {
                                tipo: "personalizado",

                                tipoFecha: "salida",
                                diaSeleccionado: diaSeleccionadoEntrada,
                                mes: Number(mesSeleccionadoEntrada),
                                ano: Number(anoSeleccionadoEntrada)
                            }

                            const tipoFecha = {
                                tipoFecha: "salida",
                                almacenamientoCalendarioID: "administracionCalendario",
                                perfilMes: "calendario_salida_perfilSimple",
                                calendarioIO: "salida",
                                mensajeInfo: "Selecciona una fecha de salida para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.tiempo = "presente"
                            calendarioResuelto.instanciaUID = instanciaUID
                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        }
                        if (fechaSalidaVolatil_Humana) {
                            const calendario = {
                                tipo: "personalizado",

                                tipoFecha: "salida",
                                diaSeleccionado: diaSeleccionadoSalida,
                                mes: Number(mesSeleccionadoSalida),
                                ano: Number(anoSeleccionadoSalida)
                            }

                            const tipoFecha = {
                                tipoFecha: "salida",
                                almacenamientoCalendarioID: "administracionCalendario",
                                perfilMes: "calendario_salida_perfilSimple",
                                calendarioIO: "salida",
                                mensajeInfo: "Selecciona una fecha de salida para buscar reservas por un rango",
                                alturaDinamica: alturaDinamicaArriba,
                                instanciaUID: instanciaUID,
                                metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                            }
                            casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(tipoFecha)
                            document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                            const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(calendario)
                            calendarioResuelto.instanciaUID = instanciaUID
                            casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                        }
                    }
                },
                seleccionarRango: (rangoIDV) => {
                    let rangos = document.querySelectorAll("[selectorRango]")
                    rangos.forEach((rango) => {
                        let rangoPorCiclo = rango.getAttribute("selectorRango")
                        if (rangoPorCiclo === rangoIDV) {
                            rango.style.background = "#0800ff"
                            rango.style.color = "white"
                            rango.setAttribute("estadoSelecion", "activado")
                        } else {
                            rango.style.removeProperty("background")
                            rango.style.removeProperty("color")
                            rango.removeAttribute("estadoSelecion")
                        }
                    })
                },
                mostrarReservasResueltas: async function (transaccion) {

                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacioReservas]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)
                    delete transaccion.instanciaUID
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const paginaTipo = transaccion.paginaTipo
                    delete transaccion.paginaTipo

                    const selectorAlmacen = document.querySelector("[areaGrid=gridBuscadorReservas]")?.getAttribute("almacen") || "{}"
                    const almacen = JSON.parse(selectorAlmacen)

                    let nombreColumnaURL
                    const nombreColumna = transaccion.nombreColumna
                    if ((nombreColumna)?.toLowerCase() === "reservauid") {
                        nombreColumnaURL = "reserva"
                    } else
                        if ((nombreColumna)?.toLowerCase() === "estadoreservaidv") {
                            nombreColumnaURL = "estado_reserva"
                        } else if (nombreColumna) {
                            nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                        }
                    transaccion.pagina = Number(transaccion?.pagina || 1)
                    const tipoConsulta_entrada = transaccion.tipoConsulta || almacen?.tipoConsulta
                    const peticion = {
                        zona: "administracion/reservas/buscador/listarReservas",
                        tipoConsulta: tipoConsulta_entrada
                    }
                    if (tipoConsulta_entrada === "porTerminos") {
                        peticion.termino = transaccion.termino || almacen?.termino
                        peticion.nombreColumna = transaccion.nombreColumna
                        peticion.sentidoColumna = transaccion.sentidoColumna
                        peticion.pagina = transaccion.pagina

                    }

                    if (tipoConsulta_entrada === "hoy") {
                        peticion.tipoCoincidencia = transaccion.tipoCoincidencia
                        peticion.pagina = transaccion.pagina

                    }

                    if (tipoConsulta_entrada === "rango") {
                        peticion.tipoCoincidencia = transaccion.tipoCoincidencia || almacen?.tipoCoincidencia
                        peticion.fechaEntrada = transaccion.fechaEntrada || almacen?.fechaEntrada
                        peticion.fechaSalida = transaccion.fechaSalida || almacen?.fechaSalida

                        peticion.nombreColumna = transaccion.nombreColumna
                        peticion.sentidoColumna = transaccion.sentidoColumna

                        peticion.pagina = transaccion.pagina
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(peticion)

                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }

                    if (respuestaServidor?.error) {
                        document.querySelector("[componente=estadoBusqueda]").textContent = respuestaServidor?.error
                        return
                    }
                    if (respuestaServidor?.totalReservas === 0) {
                        document.querySelector("[gridUID=gridReservas]")?.remove()
                        document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]").textContent = "No se han encontrado reservas"
                        return
                    }
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    const reservas = respuestaServidor.reservas
                    const paginasTotales = respuestaServidor.paginasTotales
                    const pagina = respuestaServidor.pagina

                    const sentidoColumna = respuestaServidor.sentidoColumna
                    const tipoConsulta = respuestaServidor.tipoConsulta
                    const tipoCoincidencia = respuestaServidor.tipoCoincidencia
                    const termino = respuestaServidor.termino
                    const fechaEntrada = respuestaServidor.fechaEntrada
                    const fechaSalida = respuestaServidor.fechaSalida

                    const columnasGrid = [
                        {
                            columnaUI: "Reserva",
                            columnaIDV: "reservaUID",
                        },
                        {
                            columnaUI: "Fecha de entrada",
                            columnaIDV: "fechaEntrada",
                        },
                        {
                            columnaUI: "Fecha de salida",
                            columnaIDV: "fechaSalida",
                        },
                        {
                            columnaUI: "Estado de la reserva",
                            columnaIDV: "estadoReservaIDV",
                        },
                        {
                            columnaUI: "Titular de la reserva",
                            columnaIDV: "nombreCompleto",
                        },
                        {
                            columnaUI: "Pasaporte del titular",
                            columnaIDV: "pasaporteTitular",
                        },
                        {
                            columnaUI: "Correo del titular",
                            columnaIDV: "mailTitular",
                        },
                        {
                            columnaUI: "Fecha de la reserva",
                            columnaIDV: "fechaCreacion",
                        },
                    ]

                    const parametrosFinales = {}

                    if (tipoConsulta === "porTerminos") {
                        parametrosFinales.tipo_consulta = "por_terminos"
                        parametrosFinales.termino = termino
                    }
                    if (tipoConsulta === "rango") {
                        parametrosFinales.tipo_consulta = "rango"
                        parametrosFinales.tipo_coincidencia = casaVitini.utilidades.cadenas.camelToSnake(tipoCoincidencia)

                        if (tipoCoincidencia === "cualquieraQueCoincida") {
                            parametrosFinales.fecha_entrada = fechaEntrada
                            parametrosFinales.fecha_salida = fechaSalida
                        } else if (tipoCoincidencia === "soloDentroDelRango") {
                            parametrosFinales.fecha_entrada = fechaEntrada
                            parametrosFinales.fecha_salida = fechaSalida
                        } else if (tipoCoincidencia === "porFechaDeEntrada") {
                            parametrosFinales.fecha_entrada = fechaEntrada
                        } else if (tipoCoincidencia === "porFechaDeSalida") {
                            parametrosFinales.fecha_salida = fechaSalida
                        }
                    }

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal
                    const constructorAlmacen = {
                        tipoConsulta
                    }
                    if (tipoConsulta === "porTerminos") {
                        constructorAlmacen.termino = termino
                    }
                    if (tipoConsulta === "rango") {
                        constructorAlmacen.tipoCoincidencia = tipoCoincidencia
                        constructorAlmacen.fechaEntrada = fechaEntrada
                        constructorAlmacen.fechaSalida = fechaSalida
                    }

                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.reservas.buscador.mostrarReservasResueltas",
                        configuracionGrid: {
                            filas: reservas,
                            almacen: constructorAlmacen,
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[contenedor=reservasEncontradas]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridBuscadorReservas",
                            mascaraURL: {
                                mascara: "/administracion/reservas/reserva:",
                                parametro: "reservaUID"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })

                    const titulo = ""
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "navegacionZonaAdministracion",
                        funcionPersonalizada: "administracion.reservas.buscador.mostrarReservasResueltas",
                        args: transaccion
                    }


                    if (origen === "url" || origen === "botonMostrarReservas") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }

                    this.aplicadaDataBuscadorUI({
                        tipoConsulta: tipoConsulta,
                        termino: termino,
                        fechaEntrada: fechaEntrada,
                        fechaSalida: fechaSalida,
                        tipoCoincidencia: tipoCoincidencia

                    })
                },
                verReservasHoy: () => {
                    const instanciaUID = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")

                    const espacioReservas = document.querySelector("[contenedor=reservasEncontradas]")
                    const buscadorUI = document.querySelector("[componente=navegacionZonaAdministracion]")
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    document.querySelector("[gridUID=gridReservas]")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[contenedor=filtrosOrden]")?.remove()
                    espacioReservas.innerHTML = null
                    casaVitini.administracion.reservas.buscador.limpiarFormularioBusqueda()
                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.textContent = "Buscando..."
                    buscadorUI.parentNode.insertBefore(estadoBusquedaUI, buscadorUI.nextSibling);

                    const peticion = {
                        pagina: 1,
                        tipoConsulta: "hoy",
                        origen: "url",
                        instanciaUID: instanciaUID,
                        tipoCoincidencia: "porFechaEntrada"
                    }
                    casaVitini.administracion.reservas.buscador.mostrarReservasResueltas(peticion)
                },
                mostrarReservasPorRango: () => {
                    const fechaEntrada = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                    const fechaSalida = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")
                    const buscadorUI = document.querySelector("[componente=navegacionZonaAdministracion]")

                    const tipoRango = document.querySelector("[estadoSelecion=activado]")?.getAttribute("selectorRango")
                    document.querySelector("[gridUID=gridReservas]")?.remove()
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[contenedor=filtrosOrden]")?.remove()

                    const espacioReservas = document.querySelector("[contenedor=reservasEncontradas]")
                    espacioReservas.innerHTML = null

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.textContent = "Buscando..."
                    buscadorUI.parentNode.insertBefore(estadoBusquedaUI, buscadorUI.nextSibling);

                    const selectorCampoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
                    selectorCampoBuscador.value = null
                    const peticion = {
                        pagina: 1,
                        tipoConsulta: "rango",
                        tipoCoincidencia: tipoRango,
                        fechaEntrada: fechaEntrada,
                        fechaSalida: fechaSalida,
                        origen: "botonMostrarReservas",
                    }

                    casaVitini.administracion.reservas.buscador.mostrarReservasResueltas(peticion)
                },
                buscadorReservas: (reserva) => {

                    const espacioReservas = document.querySelector("[contenedor=reservasEncontradas]")
                    const buscadorUI = document.querySelector("[componente=navegacionZonaAdministracion]")
                    clearTimeout(casaVitini.componentes.temporizador);
                    document.querySelector("[componente=resultadosSinReservas]")?.remove()
                    document.querySelector("[gridUID=gridReservas")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    espacioReservas.innerHTML = null

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.textContent = "Buscando..."
                    buscadorUI.parentNode.insertBefore(estadoBusquedaUI, buscadorUI.nextSibling);

                    casaVitini.administracion.reservas.buscador.limpiarFormularioBusqueda()
                    const terminoBusqueda = reserva.target.value
                    if (terminoBusqueda.length === 0) {
                        clearTimeout(casaVitini.componentes.temporizador);
                        document.querySelector("[gridUID=gridReservas")?.remove()
                        document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        const vistaActual = document.querySelector("[componente=uiNavegacion]").getAttribute("vistaActual")
                        const resetUrl = "/administracion/reservas"
                        const titulo = "casavitini"
                        const estado = {
                            zona: vistaActual,
                            estadoInternoZona: "estado",
                            tipoCambio: "total"
                        }
                        window.history.replaceState(estado, titulo, resetUrl);
                        return
                    }
                    casaVitini.componentes.temporizador = setTimeout(() => {
                        const peticion = {
                            pagina: Number("1"),
                            tipoConsulta: "porTerminos",
                            termino: terminoBusqueda,
                            origen: "botonMostrarReservas",
                        }
                        casaVitini.administracion.reservas.buscador.mostrarReservasResueltas(peticion);
                    }, 1500);
                },
                limpiarFormularioBusqueda: () => {
                    const selectorCuadradoFechaEntrada = document.querySelector("[calendario=entrada]")
                    const selectorFechaEntradaUI = selectorCuadradoFechaEntrada.querySelector("[fechaUI=fechaInicio]")
                    const selectorCuadradoFechaSalida = document.querySelector("[calendario=salida]")
                    const selectorFechaSalidaUI = selectorCuadradoFechaSalida.querySelector("[fechaUI=fechaFin]")
                    selectorCuadradoFechaEntrada.removeAttribute("memoriaVolatil")
                    selectorFechaEntradaUI.textContent = "(Seleccionar)"
                    selectorCuadradoFechaSalida.removeAttribute("memoriaVolatil")
                    selectorFechaSalidaUI.textContent = "(Seleccionar)"
                    const selectorRangos = document.querySelectorAll(`[selectorRango]`)
                    selectorRangos.forEach((selectorRango) => {
                        selectorRango.removeAttribute("style")
                    })
                },
                aplicadaDataBuscadorUI: (data) => {

                    const campoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
                    const selectorRangos = document.querySelectorAll(`[selectorRango]`)

                    const selectorCuadradoFechaEntrada = document.querySelector("[calendario=entrada]")
                    const selectorFechaEntradaUI = selectorCuadradoFechaEntrada?.querySelector("[fechaUI=fechaInicio]")
                    const selectorCuadradoFechaSalida = document.querySelector("[calendario=salida]")
                    const selectorFechaSalidaUI = selectorCuadradoFechaSalida?.querySelector("[fechaUI=fechaFin]")

                    const tipoConsulta = data.tipoConsulta

                    if (tipoConsulta === "porTerminos") {
                        const selectorRangos = document.querySelectorAll(`[selectorRango]`)
                        selectorRangos.forEach((selectorRango) => {
                            selectorRango.removeAttribute("style")
                        })
                        selectorCuadradoFechaEntrada.removeAttribute("memoriaVolatil")
                        selectorFechaEntradaUI.textContent = "Seleccionar"
                        selectorCuadradoFechaSalida.removeAttribute("memoriaVolatil")
                        selectorFechaSalidaUI.textContent = "Seleccionar"

                        const termino = data.termino
                        campoBuscador.value = termino
                    } else if (tipoConsulta === "rango") {

                        const fechaEntrada = data.fechaEntrada
                        const fechaSalida = data.fechaSalida
                        const tipoCoincidencia = data.tipoCoincidencia

                        campoBuscador.value = ""
                        selectorRangos.forEach((selectorRango) => {
                            selectorRango.removeAttribute("style")
                        })


                        if (fechaEntrada) {


                            selectorCuadradoFechaEntrada.setAttribute("memoriaVolatil", fechaEntrada)
                            selectorFechaEntradaUI.textContent = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaEntrada)
                        }
                        if (fechaSalida) {
                            selectorCuadradoFechaSalida.setAttribute("memoriaVolatil", fechaSalida)
                            selectorFechaSalidaUI.textContent = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaSalida)
                        }


                        const selectorRango = document.querySelector(`[selectorRango=${tipoCoincidencia}]`)
                        selectorRango.style.background = "rgb(8, 0, 255)"
                        selectorRango.style.color = "white"
                        selectorRango.setAttribute("estadoSelecion", "activado")

                    }

                }
            },
            nuevaReserva: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/reservas/nueva")
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()
                    casaVitini.administracion.reservas.nuevaReserva.controladorOfertasInicial()
                    const selectorRangoUI = main.querySelector("[contenedor=selectorRango]")
                    selectorRangoUI.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                    const selectorBotonEntrada = document.querySelector("[calendario=entrada]")
                    selectorBotonEntrada.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_entrada_perfilSimple",
                            contenedorOrigenIDV: "[calendario=entrada]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "inicioRango",
                            metodoSelectorDia: null,
                            seleccionableDiaLimite: "no"
                        })
                    })

                    const selectorBotonSalida = document.querySelector("[calendario=salida]")
                    selectorBotonSalida.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_salida_perfilSimple",
                            contenedorOrigenIDV: "[calendario=salida]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "finalRango",
                            metodoSelectorDia: null,
                            seleccionableDiaLimite: "no"
                        })
                    })

                    document.querySelector("[componente=botonBuscarAlojamiento]").addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.buscarAlojamiento)
                    document.querySelector("[componente=botonConfirmarReserva]").addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.confirmarReservaNueva)
                },
                constructorCalendario: async (boton) => {
                    const botonID = boton.target.closest("[calendario]").getAttribute("componente")
                    let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const alturaDinamicaArriba = casaVitini.utilidades.observador.medirPorJerarquiaDom.vertical.desdeAbajoDelElemento(boton.target.closest("[componente]"))
                    const bloqueCalendario = document.querySelector("[componente=bloqueCalendario]")
                    const calendario = document.querySelector("[contenedor=calendario]")
                    if (botonID === "fechaEntrada") {
                        if (calendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)

                        }
                        if (calendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        }
                        let resolucionCalendario
                        if (fechaEntradaSelecionda) {
                            const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                            let mesEntradaSeleccionado = fechaEntradaSelecionda_array[1]
                            let anoEntradaSeleccionado = fechaEntradaSelecionda_array[2]
                            resolucionCalendario = {
                                tipo: "personalizado",
                                mes: Number(mesEntradaSeleccionado),
                                ano: Number(anoEntradaSeleccionado)
                            }
                        } else {
                            resolucionCalendario = {
                                tipo: "actual",
                            }
                        }
                        const metadatosCalendario = {
                            tipoFecha: "entrada",
                            almacenamientoCalendarioID: "administracionCalendario",
                            perfilMes: "calendario_entrada_perfilSimple",
                            calendarioIO: "entrada",
                            mensajeInfo: "Selecciona la fecha de entrada para esta reserva nueva",
                            alturaDinamica: alturaDinamicaArriba,
                            instanciaUID: instanciaUID,
                            metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                        }
                        casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(metadatosCalendario)
                        document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolucionCalendario)
                        calendarioResuelto.instanciaUID = instanciaUID
                        await casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                    }
                    if (botonID === "fechaSalida") {
                        if (calendario?.getAttribute("calendarioIO") === "salida") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)

                        }
                        if (calendario?.getAttribute("calendarioIO") === "entrada") {
                            bloqueCalendario.remove()
                            document.removeEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        }
                        let resolucionCalendario
                        if (fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                            const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                            let mesEntradaSeleccionado = fechaEntradaSelecionda_array[1]
                            let anoEntradaSeleccionado = fechaEntradaSelecionda_array[2]
                            resolucionCalendario = {
                                tipo: "personalizado",
                                mes: Number(mesEntradaSeleccionado),
                                ano: Number(anoEntradaSeleccionado)
                            }
                        }
                        if (fechaSalidaSelecionda) {
                            const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                            let mesSalidaSeleccionado = fechaSalidaSelecionda_array[1]
                            let anoSalidaSeleccionado = fechaSalidaSelecionda_array[2]
                            resolucionCalendario = {
                                tipo: "personalizado",

                                mes: Number(mesSalidaSeleccionado),
                                ano: Number(anoSalidaSeleccionado)
                            }
                        }
                        if (!fechaEntradaSelecionda && !fechaSalidaSelecionda) {
                            resolucionCalendario = {
                                tipo: "actual",
                                comando: "construyeObjeto"
                            }
                        }
                        let metadatosCalendario = {
                            tipoFecha: "salida",
                            almacenamientoCalendarioID: "administracionCalendario",
                            perfilMes: "calendario_salida_perfilSimple",
                            calendarioIO: "salida",
                            mensajeInfo: "Selecciona la fecha de salida para esta reserva nueva",
                            alturaDinamica: alturaDinamicaArriba,
                            instanciaUID: instanciaUID,
                            metodoSelectorDia: "ui.componentes.calendario.calendarioCompartido.seleccionarDia"
                        }
                        casaVitini.ui.componentes.calendario.constructorCalendarioNuevo(metadatosCalendario)
                        document.addEventListener("click", casaVitini.shell.controladoresUI.ocultarElementos)
                        const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(resolucionCalendario)
                        calendarioResuelto.instanciaUID = instanciaUID
                        casaVitini.ui.componentes.calendario.constructorMesNuevo(calendarioResuelto)
                    }
                },
                seleccionarDia: (dia) => {
                    let diaSeleccionadoComoElemento = dia.target;
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    let diaSeleccionado = dia.target.getAttribute("dia")
                    diaSeleccionado = diaSeleccionado.padStart(2, "0")
                    diaSeleccionado = Number(diaSeleccionado)
                    let anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano")
                    anoSeleccionado = anoSeleccionado.padStart(4, "0")
                    anoSeleccionado = Number(anoSeleccionado)
                    let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                    mesSeleccionado = mesSeleccionado.padStart(2, "0")
                    mesSeleccionado = Number(mesSeleccionado)
                    const fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    let selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                    selectorDias.forEach((dia) => {

                        dia.classList.remove("calendarioDiaReserva")
                        dia.classList.remove("calendarioDiaSeleccionado")
                    })
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        if (calendarioIO === "entrada") {
                            document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                            document.querySelector("[dataReserva=fechaEntrada]").textContent = "Seleccionar fecha de entrada"
                        }
                        if (calendarioIO === "salida") {
                            document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                            document.querySelector("[dataReserva=fechaSalida]").textContent = "Seleccionar fecha de salida"
                        }
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                    }
                    let diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    diasDisponibles.forEach(diaDisponible => {
                        diaDisponible.removeAttribute("estadoDia")
                        diaDisponible.style.background = ""
                        diaDisponible.style.color = ""
                    })
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                    let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    if (fechaEntradaSelecionda) {
                        const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                        diaSeleccionadoEntrada = fechaEntradaSelecionda_array[0]
                        diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                        mesSeleccionadoEntrada = fechaEntradaSelecionda_array[1]
                        mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                        anoSeleccionadoEntrada = fechaEntradaSelecionda_array[2]
                        anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                        datosFechaEntradaSeleccionada = "existen"
                    }
                    let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    if (fechaSalidaSelecionda) {
                        const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                        diaSeleccionadoSalida = fechaSalidaSelecionda_array[0]
                        diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                        mesSeleccionadoSalida = fechaSalidaSelecionda_array[1]
                        mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                        anoSeleccionadoSalida = fechaSalidaSelecionda_array[2]
                        anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                        datosFechaSalidaSeleccionada = "existen"
                    }
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("[dataReserva=fechaEntrada]").textContent = fechaSeleccionadaUI
                        if (fechaSalidaSelecionda) {
                            if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {

                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEachEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("[dataReserva=fechaSalida]").textContent = fechaSeleccionadaUI
                        if (fechaEntradaSelecionda) {
                            if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                    }
                },
                buscarAlojamiento: async () => {
                    try {
                        const fechaEntrada = document.querySelector("[calendario=entrada]")?.getAttribute("memoriaVolatil")
                        const fechaSalida = document.querySelector("[calendario=salida]")?.getAttribute("memoriaVolatil")

                        document.querySelectorAll("[componente=advertenciaIntegrada]").forEach((advertenciaRenderizada) => {
                            advertenciaRenderizada.remove()
                        })

                        const selectorContenedorBoton = document.querySelector("[componente=espacioBotonConfirmarReserva]")
                        selectorContenedorBoton.classList.add("elementoOcultoInicialmente")
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const selectorBloqueEspacioApartamentos = document.querySelector("[componente=espacioApartamento]")
                        selectorBloqueEspacioApartamentos.classList.remove("elementoOcultoInicialmente")
                        selectorBloqueEspacioApartamentos.setAttribute("instanciaUID", instanciaUID)
                        selectorBloqueEspacioApartamentos.innerHTML = null
                        const advertenciaInmersivaUI = document.createElement("div")
                        advertenciaInmersivaUI.setAttribute("class", "advertenciaIntegrada")
                        advertenciaInmersivaUI.setAttribute("componente", "advertenciaIntegrada")
                        const marcoElastico = document.createElement("div")
                        marcoElastico.classList.add("marcoElasticoError")
                        const spinnerContainer = document.createElement("div");
                        spinnerContainer.setAttribute("componente", "iconoCargaEnlace");
                        spinnerContainer.classList.add("lds", "spinner");
                        for (let i = 0; i < 12; i++) {
                            const div = document.createElement("div");
                            spinnerContainer.appendChild(div);
                        }

                        marcoElastico.appendChild(spinnerContainer)
                        const info = document.createElement("div")
                        info.setAttribute("class", "advertenciaInfoFlujoPago")
                        info.setAttribute("componente", "mensajeFlujoPasarela")
                        info.textContent = "Buscando alojamiento..."
                        marcoElastico.appendChild(info)
                        const boton = document.createElement("div")
                        boton.setAttribute("class", "errorBoton")
                        boton.textContent = "Cancelar"
                        boton.addEventListener("click", (e) => {
                            selectorBloqueEspacioApartamentos.classList.add("elementoOcultoInicialmente")
                            selectorBloqueEspacioApartamentos.removeAttribute("instanciaUID")
                            e.target.closest("[componente=advertenciaIntegrada]").remove()
                        })
                        marcoElastico.appendChild(boton)
                        advertenciaInmersivaUI.appendChild(marcoElastico)
                        selectorBloqueEspacioApartamentos.appendChild(advertenciaInmersivaUI)

                        const transaccion = {
                            zona: "administracion/reservas/nuevaReserva/apartamentosDisponiblesAdministracion",
                            fechaEntrada: fechaEntrada,
                            fechaSalida: fechaSalida
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            instanciaRenderizada.querySelector("[componente=advertenciaIntegrada]").remove()
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const apartamenosDisponiblesArray = respuestaServidor?.ok.apartamentosDisponibles
                            const configuracionesAlojamiento = respuestaServidor.configuracionesAlojamiento

                            if (apartamenosDisponiblesArray.length === 0) {
                                const infoNoDisponibilidad = document.createElement("div")
                                infoNoDisponibilidad.classList.add("administracion_reservas_crearReserva_infoSinAlojamiento")
                                infoNoDisponibilidad.textContent = "No hay ningún alojamiento disponible para las fechas seleccionadas.Eso es debido a reservas donde están estos apartamentos, bloqueos en estas fechas o configuraciones no disponibles.Para tener una visión sobre esta situación, puede ir al calendario, donde podrá ver lo que ocurre.Para ver todos los eventos, selecciona la capa Global del calendario.Inicialmente, el calendario tiene esta capa predeterminadamente seleccionada."
                                document.querySelector(`[instanciaUID="${instanciaUID}"]`).innerHTML = null
                                document.querySelector(`[instanciaUID="${instanciaUID}"]`).appendChild(infoNoDisponibilidad)
                                return
                            }
                            const apartamentosDisponiblesUI = document.createElement("apartamentosDisponibles")
                            apartamentosDisponiblesUI.classList.add("espacioApartamentosDipsoniblesCrearReserva")
                            apartamentosDisponiblesUI.setAttribute("componente", "apartamentosDisponibles")
                            for (const [apartamentoIDV, configuracion] of Object.entries(configuracionesAlojamiento)) {
                                const apartamentoUI = configuracion.apartamentoUI
                                const habitaciones = configuracion.habitaciones
                                const bloqueApartamentoUI = document.createElement("div")
                                bloqueApartamentoUI.classList.add("bloqueApartamentoUI")
                                bloqueApartamentoUI.setAttribute("apartamentoIDV", apartamentoIDV)
                                const tituloApartamentoUI = document.createElement("p")
                                tituloApartamentoUI.classList.add("tituloApartamentoUI")
                                tituloApartamentoUI.textContent = apartamentoUI
                                bloqueApartamentoUI.appendChild(tituloApartamentoUI)
                                const bloqueHabiaciones = document.createElement("div")
                                bloqueHabiaciones.classList.add("bloqueHabiaciones")
                                bloqueApartamentoUI.appendChild(bloqueHabiaciones)
                                for (const [habitacionIDV, detallesHabitacion] of Object.entries(habitaciones)) {
                                    const tituloHabitacion = document.createElement("div")
                                    tituloHabitacion.classList.add("tituloHabitacion")
                                    tituloHabitacion.textContent = detallesHabitacion.habitacionUI
                                    bloqueHabiaciones.appendChild(tituloHabitacion)
                                }
                                const botonSeleccionarApartamento = document.createElement("div")
                                botonSeleccionarApartamento.classList.add("botonSeleccionarApartamento")
                                botonSeleccionarApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                botonSeleccionarApartamento.textContent = "Seleccionar " + apartamentoUI
                                botonSeleccionarApartamento.addEventListener("click", casaVitini.administracion.reservas.nuevaReserva.seleccionarApartamento)
                                bloqueApartamentoUI.appendChild(botonSeleccionarApartamento)
                                apartamentosDisponiblesUI.appendChild(bloqueApartamentoUI)
                            }
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).innerHTML = null
                            document.querySelector(`[instanciaUID="${instanciaUID}"]`).appendChild(apartamentosDisponiblesUI)

                        }
                    } catch (errorCapturado) {
                        throw errorCapturado
                    }
                },
                controladorOfertasInicial: () => {

                    const controlEstados = (e) => {
                        const opcion = document.querySelectorAll("[configuracionOfertaIDV]")
                        const sel = e.target
                        const estadoActual = sel.getAttribute("estado")

                        opcion.forEach((o) => {
                            o.removeAttribute("style")
                            o.removeAttribute("estado")
                        })
                        if (estadoActual !== "s") {
                            sel.setAttribute("estado", "s")
                            sel.style.background = "blue"
                            sel.style.color = "white"
                        }

                    }
                    const selectorOpcion = document.querySelectorAll("[configuracionOfertaIDV]")
                    selectorOpcion.forEach((opcion) => {
                        opcion.addEventListener("click", controlEstados)
                    })


                },
                seleccionarApartamento: (apartamento) => {
                    const selectorEspacioBotonConfimrar = document.querySelector("[componente=espacioBotonConfirmarReserva]")
                    if (apartamento.target.getAttribute("estado")) {
                        apartamento.target.removeAttribute("style")
                        apartamento.target.removeAttribute("estado")
                        const contadorApartamentosSeleccionados = document.querySelectorAll("[estado=seleccionado]")
                        if (contadorApartamentosSeleccionados.length > 0) {
                            selectorEspacioBotonConfimrar.classList.remove("elementoOcultoInicialmente")
                        } else {
                            selectorEspacioBotonConfimrar.classList.add("elementoOcultoInicialmente")
                        }
                        return
                    }
                    apartamento.target.style.background = "blue"
                    apartamento.target.style.color = "white"
                    apartamento.target.setAttribute("estado", "seleccionado")
                    const contadorApartamentosSeleccionados = document.querySelectorAll("[estado=seleccionado]")
                    if (contadorApartamentosSeleccionados.length > 0) {
                        selectorEspacioBotonConfimrar.classList.remove("elementoOcultoInicialmente")
                    } else {
                        selectorEspacioBotonConfimrar.classList.add("elementoOcultoInicialmente")
                    }
                },
                confirmarReservaNueva: async () => {
                    const fechaEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    const estadoInicialIDV = document.querySelector("[selector=estadoInicialReserva]").value
                    const estadoInicialOfertasIDV = document.querySelector("[configuracionOfertaIDV][estado=s]").getAttribute("configuracionOfertaIDV")


                    const apartamentos = []
                    document.querySelectorAll("[estado=seleccionado]").forEach((apartamentoSeleccionado) => {
                        const apartamentoIDV = apartamentoSeleccionado.getAttribute("apartamentoIDV")
                        apartamentos.push(apartamentoIDV)
                    })
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const metadatosPantallaCarga = {
                        mensaje: "Creando reserva...",
                        instanciaUID,
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                    const transaccion = {
                        zona: "administracion/reservas/nuevaReserva/crearReservaSimpleAdministrativa",
                        fechaEntrada: fechaEntrada,
                        fechaSalida: fechaSalida,
                        estadoInicialIDV: estadoInicialIDV,
                        estadoInicialOfertasIDV: estadoInicialOfertasIDV,
                        apartamentos: apartamentos
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (pantallaDeCargaRenderizada) {
                        if (respuestaServidor?.error) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vista = `/administracion/reservas/reserva:${respuestaServidor?.reservaUID}`
                            const navegacion = {
                                vista: vista,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                }
            },
            pendientes_de_revision: {
                arranque: async () => {
                    const sectionRenderizada = document.querySelector("main[instanciaUID]")
                    const instanciaUID = sectionRenderizada.getAttribute("instanciaUID")
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/reservas/pendientesDeRevision")
                    const espacioReservasPendientes = document.querySelector(`main[instanciaUID="${instanciaUID}"]`).querySelector("[componente=espacioReservasPendientesDeRevision]")
                    const info = document.createElement("div")
                    info.classList.add("info")
                    info.textContent = "No hay reservas pendientes de revisión"
                    const transaccion = {
                        zona: "administracion/reservas/pendientes_de_revision/obtener_reservas"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        if (espacioReservasPendientes) {
                            const reservasPendientes = respuestaServidor.reservas
                            if (reservasPendientes.length === 0) {
                                casaVitini.administracion.reservas.pendientes_de_revision.componentes.infoSinReservas(instanciaUID)
                            } else {
                                for (const rP of reservasPendientes) {
                                    const global = rP.global
                                    const contenedorFinanciero = rP.contenedorFinanciero
                                    const contenedorTitular = rP.titular

                                    const reservaUID = global.reservaUID
                                    const fechaEntrada = global.fechaEntrada
                                    const fechaSalida = global.fechaSalida
                                    const fechaCreacion_ISO = global.fechaCreacion
                                    const totalConImpuestos = contenedorFinanciero.desgloseFinanciero.global.totales.totalFinal

                                    const nombreTitular = contenedorTitular.nombreTitular
                                    const pasaporteTitular = contenedorTitular.pasaporteTitular
                                    const tipoTitularIDV = contenedorTitular.tipoTitularIDV

                                    const contenedorReserva = document.createElement("div")
                                    contenedorReserva.classList.add("contenedorReserva")
                                    contenedorReserva.setAttribute("reservaUID", reservaUID)
                                    const contenedorInformacion = document.createElement("div")
                                    contenedorInformacion.classList.add("contenedorInformacion")
                                    const contenedorDatos = document.createElement("div")
                                    contenedorDatos.classList.add("contenedorDatos")
                                    const tituloReserva = document.createElement("p")
                                    tituloReserva.classList.add("dato")
                                    tituloReserva.textContent = "Reserva:"
                                    contenedorDatos.appendChild(tituloReserva)
                                    const numeroReserva = document.createElement("p")
                                    numeroReserva.classList.add("dato")
                                    numeroReserva.classList.add("negrita")
                                    numeroReserva.textContent = reservaUID
                                    contenedorDatos.appendChild(numeroReserva)
                                    const tituloFechaReserva = document.createElement("p")
                                    tituloFechaReserva.classList.add("dato")
                                    tituloFechaReserva.textContent = "Fecha de realización UTC:"
                                    contenedorDatos.appendChild(tituloFechaReserva)
                                    const fechaReserva = document.createElement("p")
                                    fechaReserva.classList.add("dato")
                                    fechaReserva.classList.add("negrita")
                                    fechaReserva.textContent = fechaCreacion_ISO
                                    contenedorDatos.appendChild(fechaReserva)
                                    const tituloTotalReserva = document.createElement("p")
                                    tituloTotalReserva.classList.add("dato")
                                    tituloTotalReserva.textContent = "Total:"
                                    contenedorDatos.appendChild(tituloTotalReserva)
                                    const totalReserva = document.createElement("p")
                                    totalReserva.classList.add("negrita")
                                    totalReserva.classList.add("dato")
                                    totalReserva.textContent = totalConImpuestos
                                    contenedorDatos.appendChild(totalReserva)
                                    contenedorInformacion.appendChild(contenedorDatos)
                                    const contenedorFechas = document.createElement("div")
                                    contenedorFechas.classList.add("contenedorFechas")
                                    const contenedorFechaEntrada = document.createElement("div")
                                    contenedorFechaEntrada.classList.add("contenedorFechaEntrada")
                                    const tituloFechaEntrada = document.createElement("div")
                                    tituloFechaEntrada.classList.add("tituloFecha")
                                    tituloFechaEntrada.textContent = "Fecha de entrada"
                                    contenedorFechaEntrada.appendChild(tituloFechaEntrada)
                                    const fechaEntrada_div = document.createElement("div")
                                    fechaEntrada_div.classList.add("fechaEntrada")
                                    fechaEntrada_div.textContent = fechaEntrada
                                    contenedorFechaEntrada.appendChild(fechaEntrada_div)
                                    contenedorFechas.appendChild(contenedorFechaEntrada)
                                    const contenedorFechaSalida = document.createElement("div")
                                    contenedorFechaSalida.classList.add("contenedorFechaSalida")
                                    const tituloFechaSalida = document.createElement("div")
                                    tituloFechaSalida.classList.add("tituloFecha")
                                    tituloFechaSalida.textContent = "Fecha de salida"
                                    contenedorFechaSalida.appendChild(tituloFechaSalida)
                                    const fechaSalida_div = document.createElement("div")
                                    fechaSalida_div.classList.add("fechaSalida")
                                    fechaSalida_div.textContent = fechaSalida
                                    contenedorFechaSalida.appendChild(fechaSalida_div)
                                    contenedorFechas.appendChild(contenedorFechaSalida)
                                    contenedorInformacion.appendChild(contenedorFechas)


                                    const contenedorTitularUI = document.createElement("div")
                                    contenedorTitularUI.classList.add(
                                        "flexVertical",
                                        "padding14"
                                    )
                                    contenedorInformacion.appendChild(contenedorTitularUI)

                                    if (Object.keys(contenedorTitular).length === 0) {
                                        const info = document.createElement("div")
                                        info.textContent = "Reserva sin titular asignado"
                                        contenedorTitularUI.appendChild(info)
                                    } else {
                                        const nombreTitularUI = document.createElement("div")
                                        nombreTitularUI.classList.add(
                                            "negrita"
                                        )
                                        nombreTitularUI.textContent = nombreTitular
                                        contenedorTitularUI.appendChild(nombreTitularUI)

                                        const pasaporteTitularUI = document.createElement("div")
                                        pasaporteTitularUI.textContent = pasaporteTitular
                                        contenedorTitularUI.appendChild(pasaporteTitularUI)

                                        if (tipoTitularIDV === "titularPool") {
                                            const tipoTitularUI = document.createElement("div")
                                            tipoTitularUI.textContent = ">>> Pendiente de verificación documental"
                                            contenedorTitularUI.appendChild(tipoTitularUI)

                                        }
                                    }



                                    contenedorReserva.appendChild(contenedorInformacion)
                                    const contenedorBotones = document.createElement("div")
                                    contenedorBotones.classList.add("contenedorBotones")
                                    const botonInsertarPago = document.createElement("a")
                                    botonInsertarPago.classList.add("boton")
                                    botonInsertarPago.textContent = "Ir a la reserva"
                                    botonInsertarPago.setAttribute("href", `/administracion/reservas/reserva:${reservaUID}`)
                                    botonInsertarPago.setAttribute("vista", `/administracion/reservas/reserva:${reservaUID}`)
                                    botonInsertarPago.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contenedorBotones.appendChild(botonInsertarPago)
                                    contenedorReserva.appendChild(contenedorBotones)
                                    espacioReservasPendientes.appendChild(contenedorReserva)
                                }
                            }
                        }
                    }
                },
                componentes: {
                    infoSinReservas: (instanciaUID) => {
                        const espacioReservasPendientes = document.querySelector(`main[instanciaUID="${instanciaUID}"]`).querySelector("[componente=espacioReservasPendientesDeRevision]")
                        if (espacioReservasPendientes) {
                            const info = document.createElement("div")
                            info.classList.add("info")
                            info.textContent = "No hay reservas pendientes de revisión, actualiza la página para comprobar de nuevo."
                            espacioReservasPendientes.appendChild(info)
                        }
                    }
                }
            }
        },
        administracion: {
            arranque: () => {

                const html = document.querySelector("html")
                html.style.height = "100%"
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion")

                const menu = main.querySelector("[contenedor=menu]")
                menu.style.flex = "1"
                const botones = document.querySelectorAll("[componente=botonAdministracion]")
                botones.forEach((boton) => {
                    boton.addEventListener("click", (boton) => {
                        boton.preventDefault()
                        const vista = boton.target.getAttribute("vista")
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    })
                })
            },
        },
        situacion: {
            arranque: async function () {
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/situacion")

                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const parametros = granuladoURL.parametros
                const fechaHoyTZ = await this.portada.obtenerFecha()
                const dia = fechaHoyTZ.dia
                const mes = fechaHoyTZ.mes
                const ano = fechaHoyTZ.ano
                const hora = fechaHoyTZ.hora
                const minuto = String(fechaHoyTZ.minuto).padStart(2, "0")
                const fechaUI = `Hoy son las ${hora}:${minuto}, ${dia} del ${mes} del ${ano}`

                const contenedorFecha = document.createElement("div")
                contenedorFecha.classList.add("administracion_situacion_portada_contenedorFecha")
                contenedorFecha.textContent = fechaUI
                if (Object.keys(parametros).length === 0) {
                    return this.portada.arranque()
                } else if (parametros.alojamiento) {
                    const apartamentoIDV = parametros.alojamiento
                    return this.detallesApartamento.arranque(apartamentoIDV)
                }
            },
            portada: {
                arranque: async function () {

                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                    marcoElastico.appendChild(spinner)
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/situacion/obtenerSituacion"
                    })
                    const instanciaRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    spinner.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        const titulo = document.querySelector(".tituloGris")
                        titulo.textContent = respuestaServidor.error

                    }
                    if (respuestaServidor?.ok) {
                        const situacion = respuestaServidor?.ok

                        const horaEntrada = respuestaServidor.horaEntrada
                        const horaSalida = respuestaServidor.horaSalida
                        const espacioSituacion = document.createElement("div")
                        espacioSituacion.classList.add("espacioSituacion")
                        espacioSituacion.setAttribute("componente", "espacioSituacion")
                        for (const [apartamentoIDV, detallesApartamento] of Object.entries(situacion)) {
                            const reservas = detallesApartamento.reservas
                            detallesApartamento.apartamentoIDV = apartamentoIDV
                            const calendariosSincronizados = detallesApartamento?.calendariosSincronizados || {}

                            const apartamentoUI = casaVitini.administracion.situacion.componentesUI.tarjetaApartamentoUI(detallesApartamento)
                            for (const detallesReservas of reservas) {
                                detallesReservas.horaEntrada = horaEntrada
                                detallesReservas.horaSalida = horaSalida
                                const contenedorReserva = casaVitini.administracion.situacion.componentesUI.tarjetaReservaUI(detallesReservas)
                                apartamentoUI.appendChild(contenedorReserva)
                            }
                            if (calendariosSincronizados.airbnb) {
                                const eventosAirbnb = calendariosSincronizados.airbnb.eventos
                                for (const detallesDelEvento of eventosAirbnb) {
                                    const contenedorEvento = casaVitini.administracion.situacion.componentesUI.tarjetaEventoUI(detallesDelEvento)
                                    apartamentoUI.appendChild(contenedorEvento)
                                }
                            }
                            espacioSituacion.appendChild(apartamentoUI)
                        }
                        marcoElastico.appendChild(espacioSituacion)
                    }
                },
                obtenerFecha: async () => {
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "componentes/fechaLocal"
                    })
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor.fechaISO) {
                        return respuestaServidor
                    }
                },
            },
            detallesApartamento: {
                arranque: async function (apartamentoIDV) {

                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                    marcoElastico.appendChild(spinner)

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/situacion/detallesSituacionApartamento",
                        apartamentoIDV: apartamentoIDV
                    })
                    const instanciaRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    spinner.remove()
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe el identificador del apartamento",
                            descripcion: "Estás buscando la situación de un apartamento que no existe o existe y no tiene una configuración disponible."
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }
                    if (respuestaServidor?.ok) {
                        const detallesApartamento = respuestaServidor?.ok
                        const apartamentoIDV = detallesApartamento.apartamentoIDV
                        const reservas = detallesApartamento.reservas
                        const horaEntrada = detallesApartamento.horaEntrada
                        const horaSalida = detallesApartamento.horaSalida
                        detallesApartamento.apartamentoIDV = apartamentoIDV
                        const calendariosSincronizados = detallesApartamento?.calendariosSincronizados || {}
                        const apartamentoUI = casaVitini.administracion.situacion.componentesUI.tarjetaApartamentoUI(detallesApartamento)
                        const selectorTituloApartamentoUI = apartamentoUI.querySelector("[componente=titulo]")
                        selectorTituloApartamentoUI.classList.remove("comportamientoBoton")
                        selectorTituloApartamentoUI.removeEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        selectorTituloApartamentoUI.removeAttribute("vista")
                        selectorTituloApartamentoUI.removeAttribute("href")

                        marcoElastico.appendChild(apartamentoUI)

                        const espacioEventosAirbnb = document.createElement("div")
                        espacioEventosAirbnb.classList.add("espacioEventosAirbnb")
                        espacioEventosAirbnb.setAttribute("componente", "espacioEventosAirbnb")

                        for (const [reservaUID, detallesReservas] of Object.entries(reservas)) {

                            const pernoctantes = detallesReservas.pernoctantes
                            const habitaciones = detallesReservas.habitaciones
                            detallesReservas.reservaUID = reservaUID
                            detallesReservas.horaEntrada = horaEntrada
                            detallesReservas.horaSalida = horaSalida
                            const contenedorReserva = casaVitini.administracion.situacion.componentesUI.tarjetaReservaUI(detallesReservas)
                            marcoElastico.appendChild(contenedorReserva)

                            if (habitaciones.length > 0) {
                                const espacioHabitaciones = document.createElement("div")
                                espacioHabitaciones.classList.add(
                                    "gridHorizontal2C",
                                    "gap6"
                                )
                                for (const detallesHabitacion of habitaciones) {
                                    const habitacionUI = detallesHabitacion.habitacionUI
                                    const habitacionUID = detallesHabitacion.componenteUID
                                    const habitacionBloque = casaVitini.administracion.situacion.componentesUI.tarjetaHabitacionUI({
                                        habitacionUI,
                                        habitacionUID
                                    })
                                    espacioHabitaciones.appendChild(habitacionBloque)
                                }
                                contenedorReserva.appendChild(espacioHabitaciones)
                            }
                            if (pernoctantes.length > 0) {
                                for (const pernoctante of pernoctantes) {

                                    const habitacionUID = pernoctante.habitacionUID
                                    const habitacionDestino = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                    if (!habitacionDestino) {
                                        continue
                                    }
                                    const pernoctanteUI = casaVitini.administracion.situacion.componentesUI.tarjetaPernotanteUI(pernoctante)
                                    habitacionDestino.appendChild(pernoctanteUI)
                                }
                            }
                        }
                        const eventosAirbnb = calendariosSincronizados.airbnb.eventos
                        for (const detallesDelEvento of eventosAirbnb) {
                            const contenedorEvento = casaVitini.administracion.situacion.componentesUI.tarjetaEventoUI(detallesDelEvento)
                            espacioEventosAirbnb.appendChild(contenedorEvento)
                        }
                        marcoElastico.appendChild(espacioEventosAirbnb)

                    }
                }
            },
            componentesUI: {
                tarjetaApartamentoUI: (data) => {
                    const apartamentoIDV = data.apartamentoIDV
                    const estadoPernoctacion = data.estadoPernoctacion
                    const estadoApartamento = data.estadoApartamento
                    const apartamentoUI = data.apartamentoUI
                    const zonaIDV = data.zonaIDV

                    const dic = {
                        estadoApartamento: {
                            disponible: "Disponible",
                            nodisponible: "No dispobile",

                        },
                        estadoPernoctacion: {
                            ocupado: "Ocupado",
                            libre: "Libre"
                        },
                        zona: {
                            privada: "Privada (Solo administración)",
                            global: "Global (Todo)",
                            publica: "Pública (Solo reserva pública)"
                        }
                    }

                    const apartamentoGUI = document.createElement("div")
                    apartamentoGUI.classList.add(
                        "flexVertical",
                        "padding6",
                        "gap6",
                        "backgroundWhite3",
                        "borderRadius20"
                    )

                    const apartamentoTitulo = document.createElement("a")
                    apartamentoTitulo.setAttribute("componente", "titulo")
                    apartamentoTitulo.classList.add(
                        "flexVertical",
                        "padding",
                        "borderRadius16",
                        "padding14",
                        "comportamientoBoton",
                        "negrita",
                        "ratonDefault"
                    )

                    apartamentoTitulo.textContent = apartamentoUI
                    apartamentoTitulo.setAttribute("vista", `/administracion/situacion/alojamiento:${apartamentoIDV}`)
                    apartamentoTitulo.setAttribute("href", `/administracion/situacion/alojamiento:${apartamentoIDV}`)
                    apartamentoTitulo.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    apartamentoGUI.appendChild(apartamentoTitulo)

                    const contenedorInfoGlobal = document.createElement("div")
                    contenedorInfoGlobal.classList.add(
                        "flexVertical",
                        "gap10",
                        "padding14",
                        "backgroundGrey1",
                        "borderRadius16"
                    )
                    apartamentoGUI.appendChild(contenedorInfoGlobal)

                    const contenedorEstadoPernoctacion = casaVitini.ui.componentes.widgetsUI.contenedorTituloDescripcionSimple({
                        titulo: "Estado pernoctativo",
                        dato: dic.estadoPernoctacion[estadoPernoctacion]
                    })
                    contenedorEstadoPernoctacion.querySelector("[data=dataUI]").style.fontWeight = "bold"
                    contenedorInfoGlobal.appendChild(contenedorEstadoPernoctacion)

                    const contenedorEstadoConfiguracionAlojamiento = casaVitini.ui.componentes.widgetsUI.contenedorTituloDescripcionSimple({
                        titulo: "Estado configuracíon de la alojamiento",
                        dato: dic.estadoApartamento[estadoApartamento]
                    })
                    contenedorEstadoConfiguracionAlojamiento.querySelector("[data=dataUI]").style.fontWeight = "bold"

                    contenedorInfoGlobal.appendChild(contenedorEstadoConfiguracionAlojamiento)

                    const contenedorZonaPublicacion = casaVitini.ui.componentes.widgetsUI.contenedorTituloDescripcionSimple({
                        titulo: "Zona de publicación",
                        dato: dic.zona[zonaIDV]
                    })
                    contenedorZonaPublicacion.querySelector("[data=dataUI]").style.fontWeight = "bold"
                    contenedorInfoGlobal.appendChild(contenedorZonaPublicacion)
                    return apartamentoGUI
                },
                tarjetaReservaUI: (data) => {
                    const reservaUID = data.reservaUID
                    const diaLimite = data.diaLimite
                    const fechaEntrada = data.fechaEntrada
                    const fechaSalida = data.fechaSalida
                    const porcentajeTranscurrido = data.porcentajeTranscurrido
                    const tiempoRestante = data.tiempoRestante
                    const numeroDiasReserva = data.numeroDiasReserva
                    const horaEntrada = data.horaEntrada
                    const horaSalida = data.horaSalida

                    const contenedorReserva = document.createElement("div")
                    contenedorReserva.classList.add("administracion_situacion_portada_contenedorReserva")
                    let bloqueEntidad = document.createElement("a")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    bloqueEntidad.setAttribute("vista", `/administracion/reservas/reserva:${reservaUID}/zona:alojamiento`)
                    bloqueEntidad.setAttribute("href", `/administracion/reservas/reserva:${reservaUID}/zona:alojamiento`)
                    bloqueEntidad.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                    bloqueEntidad.classList.add("administracion_situacion_portada_contenedorSelecccionable")
                    let tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.textContent = "Reserva"
                    bloqueEntidad.appendChild(tituloEntidad)
                    let apartamentoReserva = document.createElement("a")
                    apartamentoReserva.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    apartamentoReserva.textContent = reservaUID
                    bloqueEntidad.appendChild(apartamentoReserva)
                    contenedorReserva.appendChild(bloqueEntidad)
                    if (diaLimite === "diaDeSalida") {
                        let bloqueEntidad = document.createElement("div")
                        bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                        const aviso = document.createElement("div")
                        aviso.classList.add("administracion_situacion_portada_tituloEntidad")
                        aviso.classList.add("negrita")
                        aviso.textContent = "<<< Dia de salida"
                        bloqueEntidad.appendChild(aviso)
                        const tituloEntidad = document.createElement("div")
                        tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                        tituloEntidad.textContent = "Hoy es el día final de la reserva y los pernoctantes deben de abandonar el alojamiento antes de las " + horaSalida
                        bloqueEntidad.appendChild(tituloEntidad)
                        const datoEntidad = document.createElement("div")
                        datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                        datoEntidad.textContent = tiempoRestante

                        contenedorReserva.appendChild(bloqueEntidad)
                    }
                    if (diaLimite === "diaDeEntrada") {
                        let bloqueEntidad = document.createElement("div")
                        bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                        const aviso = document.createElement("div")
                        aviso.classList.add("administracion_situacion_portada_tituloEntidad")
                        aviso.classList.add("negrita")
                        aviso.textContent = ">>> Dia de entrada"
                        bloqueEntidad.appendChild(aviso)
                        const tituloEntidad = document.createElement("div")
                        tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                        tituloEntidad.textContent = "Hoy es el día de entrada de la reserva y el alojamiento debe de estar preparado antes de las " + horaEntrada + " para la llegada de los nuevos pernoctantes"
                        bloqueEntidad.appendChild(tituloEntidad)
                        const datoEntidad = document.createElement("div")
                        datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                        datoEntidad.textContent = tiempoRestante

                        contenedorReserva.appendChild(bloqueEntidad)
                    }
                    const contenedorFechas = document.createElement("div")
                    contenedorFechas.classList.add("administracion_situacion_portada_contenedorFechas")
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.textContent = "Fecha de entrada"
                    bloqueEntidad.appendChild(tituloEntidad)
                    let apartamentoFechaEntrada = document.createElement("div")
                    apartamentoFechaEntrada.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    apartamentoFechaEntrada.textContent = fechaEntrada
                    bloqueEntidad.appendChild(apartamentoFechaEntrada)
                    contenedorFechas.appendChild(bloqueEntidad)
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    bloqueEntidad.classList.add("administracion_situacion_portada_fechaDeSalida")
                    tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.textContent = "Fecha de salida"
                    bloqueEntidad.appendChild(tituloEntidad)
                    let apartamentoFechaSalida = document.createElement("div")
                    apartamentoFechaSalida.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    apartamentoFechaSalida.textContent = fechaSalida
                    bloqueEntidad.appendChild(apartamentoFechaSalida)
                    contenedorFechas.appendChild(bloqueEntidad)
                    contenedorReserva.appendChild(contenedorFechas)
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    let apartamentoEstadoReserva = document.createElement("div")
                    apartamentoEstadoReserva.classList.add("situacionApartamentoEstadoReserva")



                    const nombreClaseDinamica = `barraProgresso-anchoDinamico-${reservaUID}`;
                    if (!document.querySelector(`.${nombreClaseDinamica}`)) {

                        const style = document.createElement('style');
                        style.innerHTML = `
                            .${nombreClaseDinamica} {
                                width: ${porcentajeTranscurrido}
                        `;
                        document.querySelector("main").appendChild(style);
                    }

                    let barraProgresso = document.createElement("div")
                    barraProgresso.classList.add(
                        "situacionBarraProgressoReserva",
                        nombreClaseDinamica
                    )

                    apartamentoEstadoReserva.appendChild(barraProgresso)
                    bloqueEntidad.appendChild(apartamentoEstadoReserva)
                    contenedorReserva.appendChild(bloqueEntidad)
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.textContent = "Duración de la reserva"
                    bloqueEntidad.appendChild(tituloEntidad)
                    let datoEntidad = document.createElement("div")
                    datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    datoEntidad.textContent = numeroDiasReserva
                    bloqueEntidad.appendChild(datoEntidad)
                    contenedorReserva.appendChild(bloqueEntidad)
                    bloqueEntidad = document.createElement("div")
                    bloqueEntidad.classList.add("administracion_situacion_portada_bloqueEntidad")
                    tituloEntidad = document.createElement("div")
                    tituloEntidad.classList.add("administracion_situacion_portada_tituloEntidad")
                    tituloEntidad.textContent = "Tiempo restante de la reserva"
                    bloqueEntidad.appendChild(tituloEntidad)
                    datoEntidad = document.createElement("div")
                    datoEntidad.classList.add("adminsitracion_situacion_portada_datoEntidad")
                    datoEntidad.textContent = tiempoRestante
                    bloqueEntidad.appendChild(datoEntidad)
                    contenedorReserva.appendChild(bloqueEntidad)
                    return contenedorReserva
                },
                tarjetaEventoUI: (data) => {

                    const fechaInicio_ISO = data.fechaInicio
                    const fechaFinal_ISO = data.fechaFinal
                    const uid = data.uid
                    const descripcion = data?.descripcion || null
                    const nombreEvento = data.nombreEvento
                    const fechaInicioArray = fechaInicio_ISO.split("-")
                    const fechaInicio_Humano = `${fechaInicioArray[2]}/${fechaInicioArray[1]}/${fechaInicioArray[0]}`
                    const fechaFinalArray = fechaFinal_ISO.split("-")
                    const fechaFinal_Humano = `${fechaFinalArray[2]}/${fechaFinalArray[1]}/${fechaFinalArray[0]}`
                    let urlEvento
                    if (descripcion) {
                        const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                        const match = descripcion.match(regex);
                        urlEvento = match?.[1] ?? "No se encontró la URL en el texto proporcionado.";
                    }

                    const contenedorEvento = document.createElement("div")
                    contenedorEvento.classList.add(
                        "flexVertical",
                        "padding14",
                        "gap10",
                        "backgroundGrey1",
                        "borderRadius16"
                    )


                    const tituloPlataformaOrigen = document.createElement("p")

                    tituloPlataformaOrigen.textContent = "Evento de Airbnb"
                    contenedorEvento.appendChild(tituloPlataformaOrigen)

                    const descripcionEvento = document.createElement("p")

                    descripcionEvento.textContent = "Este evento proviene de un calendario sincronizado con Airbnb."
                    contenedorEvento.appendChild(descripcionEvento)

                    const contenedorFechas = document.createElement("div")
                    contenedorFechas.classList.add(
                        "gridHorizontal2C",
                        "gap6",

                    )
                    contenedorEvento.appendChild(contenedorFechas)

                    const contenedorFechaInicio = document.createElement("div")
                    contenedorFechaInicio.classList.add(
                        "flexVertical",
                        "borderRadius16",
                        "backgroundWhite3",
                        "flextJustificacion_center",
                        "flexAHCentrad",
                        "padding10"
                    )
                    contenedorFechas.appendChild(contenedorFechaInicio)

                    const tituloFechaInicio = document.createElement("p")
                    tituloFechaInicio.classList.add("tituloFecha")
                    tituloFechaInicio.textContent = "Fecha de inicio"
                    contenedorFechaInicio.appendChild(tituloFechaInicio)

                    const fechaInicioUI = document.createElement("p")
                    fechaInicioUI.classList.add("fechaDatoUI")
                    fechaInicioUI.textContent = fechaInicio_Humano
                    contenedorFechaInicio.appendChild(fechaInicioUI)

                    const contenedorFechaFin = document.createElement("div")
                    contenedorFechaFin.classList.add(
                        "flexVertical",
                        "borderRadius16",
                        "backgroundWhite3",
                        "flextJustificacion_center",
                        "flexAHCentrad",
                        "padding10"
                    )
                    contenedorFechas.appendChild(contenedorFechaFin)

                    const tituloFechaFin = document.createElement("p")
                    tituloFechaFin.classList.add("tituloFecha")
                    tituloFechaFin.textContent = "Fecha fin"
                    contenedorFechaFin.appendChild(tituloFechaFin)

                    const fechaFinUI = document.createElement("p")
                    fechaFinUI.classList.add("fechaDatoUI")
                    fechaFinUI.textContent = fechaFinal_Humano
                    contenedorFechaFin.appendChild(fechaFinUI)


                    if (descripcion) {
                        const botonIrAlEvento = document.createElement("a")
                        botonIrAlEvento.classList.add("botonIrAlEvento")
                        botonIrAlEvento.href = urlEvento
                        botonIrAlEvento.textContent = "Abrir evento. (Se ira a la web de Airbnb)"
                        contenedorEvento.appendChild(botonIrAlEvento)
                    } else {
                        const botonIrAlEvento = document.createElement("div")

                        botonIrAlEvento.textContent = "Airbnb no proporciona ninguna información sobre este evento.Probablemente, este evento sea de un calendario que Airbnb ha sincronizado con otra plataforma.Para ver más información de este evento, por favor diríjase a la web de Airbnb porque Airbnb no proporciona ninguna forma de enlazar este evento."
                        contenedorEvento.appendChild(botonIrAlEvento)
                    }
                    return contenedorEvento
                },
                tarjetaHabitacionUI: (data) => {
                    const habitacionUI = data.habitacionUI
                    const habitacionUID = data.habitacionUID

                    const contenedor = document.createElement("div")
                    contenedor.setAttribute("habitacionUID", habitacionUID)
                    contenedor.classList.add(
                        "flexVertical",
                        "gap6",
                        "borderGrey1",
                        "borderRadius12",
                        "padding6"
                    )
                    const tituloHabitacion = document.createElement("p")
                    tituloHabitacion.classList.add(
                        "negrita",
                        "padding10"
                    )
                    tituloHabitacion.textContent = habitacionUI
                    contenedor.appendChild(tituloHabitacion)
                    return contenedor
                },
                tarjetaPernotanteUI: (data) => {


                    const nombreCompleto = data.nombreCompleto
                    const tipoPernoctante = data.tipoPernoctante
                    const clienteUID = data.clienteUID
                    const habitacionUID = data.habitacionUID
                    const fechaCheckIn = data.fechaCheckIn
                    const fechaCheckOut = data.fechaCheckOut

                    const dic = {
                        cliente: "Cliente de Casa Vitini",
                        clientePool: "Cliente por veriricar"
                    }

                    const marcoPernoctante = document.createElement("a")
                    marcoPernoctante.classList.add(
                        "flexVertical",
                        "gap4",
                        "padding10",
                        "comportamientoBoton",
                        "borderRadius8",
                        "ratonDefault"
                    )
                    if (tipoPernoctante === "cliente") {
                        marcoPernoctante.setAttribute("vista", `/administracion/clientes/cliente:${clienteUID}`)
                        marcoPernoctante.setAttribute("href", `/administracion/clientes/cliente:${clienteUID}`)
                        marcoPernoctante.setAttribute("clienteUID", clienteUID)
                        marcoPernoctante.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    }
                    if (!fechaCheckIn) {
                        const tipoPernoctanteUI = document.createElement("div")
                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")

                        tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                        tipoPernoctanteUI.textContent = "Pendiente de checkin"
                        marcoPernoctante.appendChild(tipoPernoctanteUI)
                    } else {
                        const tipoPernoctanteUI = document.createElement("div")
                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")

                        tipoPernoctanteUI.setAttribute("componente", "checkInInfo")
                        tipoPernoctanteUI.textContent = "> " + fechaCheckIn
                        marcoPernoctante.appendChild(tipoPernoctanteUI)
                    }
                    if (fechaCheckOut) {
                        const tipoPernoctanteUI = document.createElement("div")
                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloCheckIn")
                        tipoPernoctanteUI.classList.add("letraRoja")
                        tipoPernoctanteUI.setAttribute("componente", "checkOutInfo")
                        tipoPernoctanteUI.textContent = "< " + fechaCheckOut
                        marcoPernoctante.appendChild(tipoPernoctanteUI)
                    }
                    if (tipoPernoctante === "clientePool") {
                        const tipoPernoctanteUI = document.createElement("div")
                        tipoPernoctanteUI.classList.add("administracion_reservas_detallesReserva_tituloPendienteComprobacion")
                        tipoPernoctanteUI.classList.add("parpadea")
                        tipoPernoctanteUI.setAttribute("componente", "pendienteComprobacion")
                        tipoPernoctanteUI.textContent = "Pendiente de comprobación documental"
                        marcoPernoctante.appendChild(tipoPernoctanteUI)
                    }
                    const nombreCompletoPernoctante = document.createElement("div")
                    nombreCompletoPernoctante.classList.add("administracion_situacion_detallesApartamento_nombrePernoctante")
                    nombreCompletoPernoctante.textContent = nombreCompleto
                    marcoPernoctante.appendChild(nombreCompletoPernoctante)
                    const tipoClientePernoctante = document.createElement("div")
                    tipoClientePernoctante.classList.add("administracion_situacion_detallesApartamento_tipoCliente")
                    tipoClientePernoctante.textContent = dic[tipoPernoctante]
                    marcoPernoctante.appendChild(tipoClientePernoctante)
                    return marcoPernoctante
                }
            }
        },
        complementosDeAlojamiento: {
            arranque: function () {
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const main = document.querySelector("main")

                if (granuladoURL.parametros.alojamiento) {
                    return this.complementosPorAlojamiento.arranque()
                } else if (granuladoURL.parametros.complemento) {
                    return this.complementosPorAlojamiento.detallesComplemento.arranque(granuladoURL.parametros.complemento)
                } else if (comandoInicial === "complementos_de_alojamiento") {
                    return this.portada.arranque()
                } else {
                    return casaVitini.ui.componentes.urlDesconocida()
                }
            },
            portada: {
                arranque: async function () {
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    const espacio = main.querySelector("[componente=espacio]")
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/arquitectura/configuraciones/listarConfiguracionApartamentos"
                    })
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionesAlojamiento = respuestaServidor.ok
                        configuracionesAlojamiento.forEach((conf) => {
                            const apartamentoIDV = conf.apartamentoIDV
                            const zonaIDV = conf.zonaIDV
                            const apartamentoUI = conf.apartamentoUI
                            const estadoConfiguracion = conf.estadoConfiguracion
                            const tarjeta = this.tarjetaAlojamientoUI({
                                apartamentoIDV,
                                apartamentoUI
                            })
                            espacio.appendChild(tarjeta)

                        })

                    }

                },
                tarjetaAlojamientoUI: (data) => {

                    const { apartamentoIDV, apartamentoUI } = data
                    const contenedor = document.createElement("a")
                    contenedor.setAttribute("apartamentoIDV", apartamentoIDV)
                    contenedor.href = "/administracion/complementos_de_alojamiento/alojamiento:" + apartamentoIDV
                    contenedor.setAttribute("vista", "/administracion/complementos_de_alojamiento/alojamiento:" + apartamentoIDV)
                    contenedor.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedor.classList.add("flexVertical", "gap6", "backgroundGrey1", "borderRadius14", "padding14")

                    const tituloUI = document.createElement("p")
                    tituloUI.classList.add("negrita")
                    tituloUI.textContent = apartamentoUI
                    contenedor.appendChild(tituloUI)

                    const descripcionComplementos = document.createElement("p")
                    descripcionComplementos.textContent = "Numero de complementos"
                    contenedor.appendChild(descripcionComplementos)

                    return contenedor

                }

            },
            complementosPorAlojamiento: {
                arranque: function () {
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    const main = document.querySelector("main")
                    if (comandoInicial === "nuevo") {
                        return this.nuevo.arranque(granuladoURL.parametros.alojamiento)
                    } else if (granuladoURL.parametros.alojamiento) {
                        return this.portada.arranque(granuladoURL.parametros.alojamiento)
                    } else {
                        return casaVitini.ui.componentes.urlDesconocida()
                    }
                },
                portada: {
                    arranque: async function (apartamentoIDV) {
                        const main = document.querySelector("main")
                        const instanciaUID = main.getAttribute("instanciaUID")
                        const espacio = main.querySelector("[componente=espacio]")

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("flexHorizontal")
                        const botonCrearCuenta = document.createElement("a")
                        botonCrearCuenta.classList.add("botonV1")
                        botonCrearCuenta.setAttribute("href", `/administracion/complementos_de_alojamiento/alojamiento:${apartamentoIDV}/nuevo`)
                        botonCrearCuenta.setAttribute("vista", `/administracion/complementos_de_alojamiento/alojamiento:${apartamentoIDV}/nuevo`)
                        botonCrearCuenta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        botonCrearCuenta.textContent = "Crear complemento"
                        contenedorBotones.appendChild(botonCrearCuenta)
                        espacio.appendChild(contenedorBotones)

                        const respuestaServidor = await casaVitini.shell.servidor({
                            zona: "administracion/complementosDeAlojamiento/obtenerComplementosPorAlojamiento",
                            apartamentoIDV
                        })
                        const ui_enEspera = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!ui_enEspera) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const complementos = respuestaServidor.complementosPorApartamentoIDV
                            complementos.forEach((com) => {
                                const tarjetaUI = this.tarjetaComplementoUI(com)
                                espacio.appendChild(tarjetaUI)
                            })
                        }
                    },
                    tarjetaComplementoUI: (data) => {

                        const { nombre, definicion, tipoPrecio, precio, estadoIDV, complementoUID } = data

                        const contenedor = document.createElement("a")
                        contenedor.setAttribute("href", `/administracion/complementos_de_alojamiento/complemento:${complementoUID}`)
                        contenedor.setAttribute("vista", `/administracion/complementos_de_alojamiento/complemento:${complementoUID}`)
                        contenedor.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        contenedor.classList.add(
                            "flexVertical",
                            "gap6",
                            "backgroundGrey1",
                            "padding14",
                            "borderRadius14"
                        )

                        const titulo = document.createElement("p")
                        titulo.classList.add("negrita")
                        titulo.textContent = nombre
                        contenedor.appendChild(titulo)

                        const estadoUI = document.createElement("p")
                        estadoUI.textContent = estadoIDV
                        contenedor.appendChild(estadoUI)

                        const definicionUI = document.createElement("p")
                        definicionUI.textContent = definicion
                        contenedor.appendChild(definicionUI)

                        const tipoPrecioUI = document.createElement("p")
                        tipoPrecioUI.textContent = tipoPrecio
                        contenedor.appendChild(tipoPrecioUI)

                        const precioUI = document.createElement("p")
                        precioUI.textContent = precio
                        contenedor.appendChild(precioUI)
                        return contenedor
                    }
                },
                nuevo: {
                    arranque: function (apartamentoIDV) {
                        const main = document.querySelector("main")
                        const espacio = main.querySelector("[componente=espacio]")

                        const ui = casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.componentesUI.complementoUI({
                            modoUI: "crear",
                            apartamentoIDV
                        })
                        espacio.appendChild(ui)
                        const botonCrearServicio = casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.componentesUI.botonesCrear()
                        ui.appendChild(botonCrearServicio)
                    },
                    crear: async function () {

                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                        const metadatosPantallaCarga = {
                            mensaje: "Creando complemento...",
                            instanciaUID: instanciaUID,
                        }

                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                        const transaccion = casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.utilidades.constructorObjeto()
                        transaccion.zona = "administracion/complementosDeAlojamiento/crearComplementoDeAlojamiento"

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!pantallaDeCargaRenderizada) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const complementoUID = respuestaServidor?.nuevoComplementoUID
                            const apartamentoIDV = respuestaServidor?.apartamentoIDV
                            casaVitini.shell.navegacion.controladorVista({
                                vista: `administracion/complementos_de_alojamiento/alojamiento:${apartamentoIDV}`,
                                tipoOrigen: "menuNavegador"
                            })
                        }
                    },
                },
                detallesComplemento: {
                    arranque: async function (complementoUID) {
                        const main = document.querySelector("main")
                        const espacio = main.querySelector("[componente=espacio]")
                        const instanciaUID = main.getAttribute("instanciaUID")
                        main.setAttribute("zonaCSS", "/administracion/complementoDeAlojamineto/complementoUI")

                        const respuestaServidor = await casaVitini.shell.servidor({
                            zona: "administracion/complementosDeAlojamiento/detallesComplemento",
                            complementoUID: String(complementoUID)
                        })
                        const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                        if (!seccionRenderizada) { return }
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ningúna servicio con ese identificador",
                                descripcion: "Revisa el identificador porque este servicio que buscas no existe. Quizás este identificador existió y borraste esta servicio.."
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        } else if (respuestaServidor?.ok) {

                            const complemento = respuestaServidor.ok
                            const apartamentoIDV = complemento.apartamentoIDV

                            espacio.setAttribute("instantanea", JSON.stringify(complemento))
                            espacio.innerHTML = null

                            const ui = casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.componentesUI.complementoUI({
                                modoUI: "editar",
                                apartamentoIDV,
                                complementoUID
                            })
                            espacio.appendChild(ui)
                            this.aplicaData({
                                complemento,
                                instanciaUID_destino: instanciaUID
                            })
                            const botonCrearServicio = casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.componentesUI.botonesDuranteModificacion()
                            ui.appendChild(botonCrearServicio)
                        }
                    },
                    aplicaData: function (data) {

                        const complemento = data.complemento
                        const complementoUI = complemento.complementoUI
                        const instanciaUID_destino = data.instanciaUID_destino
                        const complementoUID = complemento.complementoUID
                        const tipoPrecio = complemento.tipoPrecio
                        const precio = complemento.precio
                        const definicion = complemento.definicion
                        const estadoIDV = complemento.estadoIDV

                        const complementoUI_ = document.querySelector(`[instanciaUID="${instanciaUID_destino}"]`)
                        if (!complementoUI_) { return }

                        complementoUI_.querySelector("[componente=complementoUI]").setAttribute("complementoUID", complementoUID)

                        if (estadoIDV === "desactivado") {
                            complementoUI_.querySelector("[componente=estado]").setAttribute("estado", estadoIDV)
                            complementoUI_.querySelector("[componente=estado]").style.background = "#ff000091"
                            complementoUI_.querySelector("[componente=estado]").innerHTML = "Componente desactivado"
                        }
                        if (estadoIDV === "activado") {
                            complementoUI_.querySelector("[componente=estado]").setAttribute("estado", estadoIDV)
                            complementoUI_.querySelector("[componente=estado]").style.background = "#00ff006e"
                            complementoUI_.querySelector("[componente=estado]").innerHTML = "Componente activado"
                        }

                        const nombreUI = complementoUI_.querySelector("[campo=complementoUI]")
                        nombreUI.value = complementoUI

                        const definicionCampo = complementoUI_.querySelector("[campo=definicion]")
                        definicionCampo.value = definicion

                        const tipoPrecioUI = complementoUI_.querySelector("[campo=tipoPrecio]")
                        tipoPrecioUI.value = tipoPrecio

                        const precioCampo = complementoUI_.querySelector("[campo=precio]")
                        precioCampo.value = precio
                    },
                    guardarCambios: async function () {
                        const instanciaUID_pantallaEspera = casaVitini.utilidades.codigoFechaInstancia()
                        const main = document.querySelector("main")
                        const instanciaUID = main.getAttribute("instanciaUID")
                        const complementoUID = main.querySelector("[componente=complementoUI]").getAttribute("complementoUID")

                        const mensaje = "Actualizando comportamiento..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID_pantallaEspera,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const complementoObjeto = casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.utilidades.constructorObjeto()

                        const respuestaServidor = await casaVitini.shell.servidor({
                            zona: "administracion/complementosDeAlojamiento/actualizarComplemento",
                            complementoUID: String(complementoUID),
                            ...complementoObjeto
                        })
                        document.querySelector(`[instanciaUID="${instanciaUID_pantallaEspera}"]`)?.remove()
                        const complementoUI = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!complementoUI) { return }
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const complementoActualizado = respuestaServidor.complementoActualizado

                            const complementoUID = document.querySelector("[componente=complementoUI]")
                            complementoUID.setAttribute("instantanea", JSON.stringify(complementoActualizado))
                            casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.detallesComplemento.aplicaData({
                                complemento: complementoActualizado,
                                instanciaUID_destino: instanciaUID
                            })
                        }
                    },
                    eliminar: {
                        ui: function () {

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = "Confirmar eliminar el complemento"
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = "Var a eliminar el complemento y su aplicacion sera inmediata, ¿Estas de acuerdo?"

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = "Comfirmar la eliminación 1"
                            botonAceptar.addEventListener("click", () => {



                                return this.confirmar()
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar la eliminación"

                            document.querySelector("main").appendChild(pantallaInmersiva)

                        },
                        confirmar: async () => {

                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Eliminado el complemento..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const complementoUID = document.querySelector("[complementoUID]").getAttribute("complementoUID")
                            const transaccion = {
                                zona: "administracion/complementosDeAlojamiento/eliminarComplemento",
                                complementoUID: String(complementoUID)
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const apartamentoIDV = respuestaServidor.apartamentoIDV
                                const vista = `/administracion/complementos_de_alojamiento/alojamiento:${apartamentoIDV}`
                                const navegacion = {
                                    vista: vista,
                                }
                                casaVitini.shell.navegacion.controladorVista(navegacion)
                            }
                        }
                    },
                    estadoUIControlador: async (estado) => {
                        const complementoUID = document.querySelector("[complementoUID]")?.getAttribute("complementoUID")
                        if (!complementoUID) {
                            const error = "No se puede cambiar el estado del complemento porque no tiene un identificador único de servicio (complementoUID).Esto puede deberse a que aún no has creado el complemento o que lo has borrado. Si estás creando una complemento, por favor asegúrate de crearlo pulsando el botón 'Crear complemento' antes de activarla."
                            casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                        const selectorEstado = document.querySelector("[componente=estado]")

                        const estadoActualMemoriaVolatil = selectorEstado.textContent
                        selectorEstado.textContent = "Esperando al servidor...."
                        const estadoActual = estado.target.getAttribute("estado")
                        let estadoPropuesto
                        if (estadoActual === "desactivado") {
                            estadoPropuesto = "activado"
                        }
                        if (estadoActual === "activado") {
                            estadoPropuesto = "desactivado"
                        }
                        const transaccion = {
                            zona: "administracion/complementosDeAlojamiento/actualizarEstado",
                            complementoUID: String(complementoUID),
                            estadoIDV: estadoPropuesto
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            document.querySelector("[estadoServicio]").textContent = estadoActualMemoriaVolatil
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const estadoIDV = respuestaServidor?.estadoIDV
                            selectorEstado.setAttribute("estado", estadoIDV)
                            let estadoUI
                            if (estadoIDV === "activado") {
                                selectorEstado.style.background = "#00ff006e"
                                estadoUI = "Complemento activado"
                            }
                            if (estadoIDV === "desactivado") {
                                selectorEstado.style.background = "#ff000091"
                                estadoUI = "Complemento desactivado"
                            }
                            selectorEstado.textContent = estadoUI
                        }
                    },
                },
                componentesUI: {
                    complementoUI: (data) => {
                        const modoUI = data.modoUI
                        const apartamentoIDV = data.apartamentoIDV
                        const complementoUID = data.complementoUID
                        const ui = document.createElement("div");
                        ui.setAttribute("componente", "complementoUI");
                        ui.setAttribute("apartamentoIDV", apartamentoIDV)
                        ui.setAttribute("complementoUID", complementoUID)
                        ui.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding14"
                        )

                        const contenedorNombreEstado = document.createElement("div");

                        if (modoUI === "editar") {
                            contenedorNombreEstado.classList.add("crearOfertaContenedorHorizontalV2");

                            const botonEstadoOferta = document.createElement("div")
                            botonEstadoOferta.classList.add("creatOfertaBotonEstado")
                            botonEstadoOferta.setAttribute("componente", "estado")
                            botonEstadoOferta.addEventListener("click", casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.detallesComplemento.estadoUIControlador)
                            botonEstadoOferta.textContent = "Servicio desactivado"
                            contenedorNombreEstado.appendChild(botonEstadoOferta)

                        }
                        if (modoUI === "crear") {
                            contenedorNombreEstado.classList.add("flexVertical");
                        }
                        const input = document.createElement("input");
                        input.setAttribute("type", "text");
                        input.classList.add(
                            "padding12",
                            "borderRadius10"
                        );
                        input.setAttribute("campo", "complementoUI");
                        input.setAttribute("placeholder", "Escriba el nombre del nuevo complemento");
                        contenedorNombreEstado.appendChild(input)
                        ui.appendChild(contenedorNombreEstado)

                        const contenedorDefinicion = () => {
                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("contenedor", "definicion")
                            contenedor.classList.add(
                                "flexVertical",
                                "gap6",
                                "padding6",
                                "backgroundGrey1",
                                "borderRadius14"

                            )
                            const titulo = document.createElement("p")
                            titulo.classList.add(
                                "padding6"
                            )
                            titulo.textContent = "Añade una descripción si el complemento necesita de esta."
                            contenedor.appendChild(titulo)

                            const campo = document.createElement("input")
                            campo.setAttribute("campo", "tituloPublico")
                            campo.classList.add(
                                "padding10",
                                "borderRadius10"
                            )
                            campo.placeholder = "Titulo del servicio"
                            //contenedor.appendChild(campo)


                            const definicion = document.createElement("textarea")
                            definicion.setAttribute("campo", "definicion")
                            definicion.classList.add(
                                "padding10",
                                "borderRadius10",
                                "resizeOnlyVertical",
                                "area300px",

                            )
                            definicion.placeholder = "Definición del complemento"
                            contenedor.appendChild(definicion)
                            return contenedor
                        }

                        ui.appendChild(contenedorDefinicion())

                        const contenedorPrecio = () => {
                            const contenedor = document.createElement("div")
                            contenedor.setAttribute("contenedor", "cantidad")
                            contenedor.classList.add(
                                "flexVertical",
                                "gap6",
                                "padding6",
                                "backgroundGrey1",
                                "borderRadius14"

                            )
                            const titulo = document.createElement("p")
                            titulo.classList.add(
                                "padding6"
                            )
                            titulo.textContent = "Precio del servicio, determina el valor de este servicio. El precio del servicio tiene que estar en formato número con dos decimales separados por punto."
                            contenedor.appendChild(titulo)

                            const selector = document.createElement("select")
                            selector.classList.add(
                                "selector",
                            )
                            selector.setAttribute("campo", "tipoPrecio")
                            const opcionPredeterminada = document.createElement("option")
                            opcionPredeterminada.selected = true
                            opcionPredeterminada.disabled = true;
                            opcionPredeterminada.value = ""
                            opcionPredeterminada.text = "Seleciona el tipo de precio"
                            selector.appendChild(opcionPredeterminada)
                            const opciones = [
                                { value: "fijoPorReserva", text: "Precio fijo por reserva" },
                                { value: "porNoche", text: "Precio por noche" },

                            ]
                            for (const opcionData of opciones) {
                                const opcion = document.createElement("option");
                                opcion.value = opcionData.value;
                                opcion.text = opcionData.text;
                                selector.appendChild(opcion);
                            }
                            contenedor.appendChild(selector)

                            const campo = document.createElement("input")
                            campo.setAttribute("campo", "precio")
                            campo.classList.add(
                                "padding10",
                                "borderRadius10"
                            )
                            campo.placeholder = "00.00"
                            contenedor.appendChild(campo)


                            return contenedor
                        }

                        ui.appendChild(contenedorPrecio())

                        return ui


                    },
                    botonesCrear: () => {
                        const boton = document.createElement("p");
                        boton.classList.add("botonV1");
                        boton.textContent = "Crear complemento";
                        boton.setAttribute("boton", "crear");
                        boton.addEventListener("click", casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.nuevo.crear)
                        return boton
                    },
                    botonesDuranteModificacion: function () {
                        const contenedor = document.createElement("div");
                        contenedor.classList.add("contenedorBotones");
                        contenedor.setAttribute("contenedor", "botones");

                        const botonGuardar = document.createElement("div")
                        botonGuardar.classList.add("botonV1");
                        botonGuardar.setAttribute("componente", "botonGuardarCambios");
                        botonGuardar.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                        botonGuardar.addEventListener("click", casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.detallesComplemento.guardarCambios)
                        botonGuardar.textContent = "Actualizar complemento";

                        const botonCancelar = document.createElement("p");
                        botonCancelar.classList.add("botonV1");
                        botonCancelar.setAttribute("componente", "botonCancelarCambios");
                        botonCancelar.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                        botonCancelar.addEventListener("click", async () => {
                            const selectorInstantena = document.querySelector("[instantanea]").getAttribute("instantanea")
                            const instantanea = JSON.parse(selectorInstantena)
                            const instanciaUID_destino = document.querySelector(`main[instanciaUID]`).getAttribute("instanciaUID")
                            casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.detallesComplemento.aplicaData({
                                complemento: instantanea,
                                instanciaUID_destino: instanciaUID_destino,
                            })
                        })
                        botonCancelar.textContent = "Revertir cambios";

                        const botonEliminar = document.createElement("p");
                        botonEliminar.classList.add("botonV1");
                        botonEliminar.setAttribute("componente", "botonEliminarOferta");
                        botonEliminar.addEventListener("click", () => {
                            casaVitini.administracion.complementosDeAlojamiento.complementosPorAlojamiento.detallesComplemento.eliminar.ui()
                        })
                        botonEliminar.textContent = "Eliminar complemento";
                        contenedor.appendChild(botonGuardar);
                        contenedor.appendChild(botonCancelar);
                        contenedor.appendChild(botonEliminar);
                        return contenedor
                    },

                },
                utilidades: {
                    constructorObjeto: () => {
                        const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                        const complementoUI = document.querySelector("[campo=complementoUI]").value
                        const definicion = document.querySelector("[campo=definicion]").value
                        const tipoPrecio = document.querySelector("[campo=tipoPrecio]").value
                        const precio = document.querySelector("[campo=precio]").value
                        return {
                            apartamentoIDV,
                            complementoUI,
                            definicion,
                            tipoPrecio,
                            precio
                        }
                    },
                }
            }

        },
        servicios: {
            arranque: function () {
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const main = document.querySelector("main")
                if (granuladoURL.parametros.servicio) {
                    this.detallesServicio.arranque(granuladoURL.parametros.servicio)
                } else if (comandoInicial === "servicios") {
                    this.portada.arranque()
                } else {
                    casaVitini.ui.componentes.urlDesconocida()
                }
            },
            portada: {
                arranque: function () {
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    this.contenedorBotones()

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "servicio") {
                            nombreColumnaIDV = "serviciosUID"
                        } else if ((valorParametroURL)?.toLowerCase() === "estado") {
                            nombreColumnaIDV = "estadoIDV"
                        } else if ((valorParametroURL)?.toLowerCase() === "zona") {
                            nombreColumnaIDV = "zonaIDV"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV

                    })
                    casaVitini.administracion.servicios.portada.mostrarServiciosResueltos(parametrosFormatoIDV)

                },
                contenedorBotones: () => {
                    const espacio = document.querySelector("[componente=espacio]")
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("contenedorBotonesGlobales")
                    contenedorBotones.setAttribute("componente", "contenedorBotonesServicios")
                    const boton = document.createElement("a")
                    boton.classList.add("botonNuevo")
                    boton.textContent = "Crear servicio"
                    boton.setAttribute("href", "/administracion/servicios/nuevo")
                    boton.setAttribute("vista", "/administracion/servicios/nuevo")
                    boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(boton)
                    espacio.appendChild(contenedorBotones)
                },
                mostrarServiciosResueltos: async function (listarServicios) {

                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacio]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)

                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const transaccion = {
                        zona: "administracion/servicios/listaServiciosPaginados",
                        origen: "url",
                        tipoConstruccionGrid: "total",
                        ...listarServicios
                    }

                    transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                    const paginaTipo = transaccion.paginaTipo
                    let nombreColumnaURL
                    const nombreColumna = transaccion.nombreColumna
                    if ((nombreColumna)?.toLowerCase() === "serviciouid") {
                        nombreColumnaURL = "servicio"
                    } else if ((nombreColumna)?.toLowerCase() === "estadoidv") {
                        nombreColumnaURL = "estado"
                    } else if ((nombreColumna)?.toLowerCase() === "zonaidv") {
                        nombreColumnaURL = "zona"
                    } else if (nombreColumna) {
                        nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                    }

                    if (transaccion.sentido_columna) {
                        transaccion.sentidoColumna = transaccion.sentido_columna
                        delete transaccion.sentido_columna
                    }
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const tipoConstruccionGrid = transaccion.tipoConstruccionGrid
                    delete transaccion.tipoConstruccionGrid
                    const peticion = {
                        zona: "administracion/servicios/listaServiciosPaginados",
                        pagina: transaccion.pagina,
                    }
                    if (transaccion.nombreColumna) {
                        peticion.nombreColumna = transaccion.nombreColumna
                    }
                    if (transaccion.sentidoColumna) {
                        peticion.sentidoColumna = transaccion.sentidoColumna
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(peticion)

                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.totalServicios === 0) {
                        const espacioClientes = document.querySelector("[componente=espacio]")
                        document.querySelector("[gridUID=gridServicios]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        const estadoBusquedaUI = document.createElement("div")
                        estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                        estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                        estadoBusquedaUI.textContent = "No hay servicios configurados"
                        espacioClientes.appendChild(estadoBusquedaUI)
                        return

                    }
                    const servicios = respuestaServidor.servicios

                    const dicccionario = {
                        estados: {
                            activado: "Activado",
                            desactivado: "Desactivado"
                        }
                    }

                    for (const detallesDelServicio of servicios) {
                        const estadoIDV = detallesDelServicio.estadoIDV
                        detallesDelServicio.estadoIDV = dicccionario.estados[estadoIDV]
                    }
                    const sentidoColumna = respuestaServidor.sentidoColumna

                    const pagina = respuestaServidor.pagina
                    const paginasTotales = respuestaServidor.paginasTotales
                    const columnasGrid = [
                        {
                            columnaUI: "UID",
                            columnaIDV: "servicioUID",
                        },
                        {
                            columnaUI: "Nombre",
                            columnaIDV: "nombre",
                        },
                        {
                            columnaUI: "Zona",
                            columnaIDV: "zonaIDV",
                        },
                        {
                            columnaUI: "Estado",
                            columnaIDV: "estadoIDV",
                        },

                    ]
                    const parametrosFinales = {}

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal
                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.servicios.portada.mostrarServiciosResueltos",
                        configuracionGrid: {
                            filas: servicios,
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[componente=espacio]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridServicios",
                            mascaraURL: {
                                mascara: "/administracion/servicios/servicio:",
                                parametro: "servicioUID"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })


                    const titulo = "Administrar reservas"
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "contenedorBotonesServicios",
                        funcionPersonalizada: "administracion.servicios.portada.mostrarServiciosResueltos",
                        args: transaccion
                    }

                    if (origen === "url" || origen === "botonMostrarReservas") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }
                },
            },
            detallesServicio: {
                arranque: async function (servicioUID) {
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const transaccion = {
                        zona: "administracion/servicios/detallesServicio",
                        servicioUID: String(servicioUID)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe ningúna servicio con ese identificador",
                            descripcion: "Revisa el identificador porque este servicio que buscas no existe. Quizás este identificador existió y borraste esta servicio.."
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    } else if (respuestaServidor?.ok) {
                        const servicio = respuestaServidor.ok

                        const servicioUID = servicio.servicioUID
                        const espacioServicios = document.querySelector("[componente=espacio]")
                        espacioServicios.setAttribute("instantanea", JSON.stringify(servicio))
                        espacioServicios.innerHTML = null

                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "/administracion/servicios/servicioUI")
                        const servicioUI = casaVitini.administracion.servicios.componentesUI.detalleUI({
                            modoUI: "editar"
                        })
                        servicioUI.setAttribute("servicioUID", servicioUID)
                        espacioServicios.appendChild(servicioUI)
                        this.aplicaData({
                            servicio: servicio,
                            instanciaUID_destino: instanciaUID
                        })
                        const botonesModificacion = casaVitini.administracion.servicios.componentesUI.botonesDuranteModificacion()
                        servicioUI.appendChild(botonesModificacion)
                    }






                },
                aplicaData: function (data) {

                    const servicio = data.servicio
                    const instanciaUID_destino = data.instanciaUID_destino
                    const servicioUID = servicio.servicioUID
                    const nombre = servicio.nombre
                    const zonaIDV = servicio.zonaIDV
                    const contenedor = servicio.contenedor
                    const estadoIDV = servicio.estadoIDV

                    const servicioUI = document.querySelector(`[instanciaUID="${instanciaUID_destino}"]`)
                    if (!servicioUI) { return }

                    //servicioUI.querySelector("[componente=servicioUI]").setAttribute("servicioUID", servicioUID)

                    if (estadoIDV === "desactivado") {
                        servicioUI.querySelector("[componente=estadoServicio]").setAttribute("estadoServicio", estadoIDV)
                        servicioUI.querySelector("[componente=estadoServicio]").style.background = "#ff000091"
                        servicioUI.querySelector("[componente=estadoServicio]").innerHTML = "Oferta desactivada"
                    }
                    if (estadoIDV === "activado") {
                        servicioUI.querySelector("[componente=estadoServicio]").setAttribute("estadoServicio", estadoIDV)
                        servicioUI.querySelector("[componente=estadoServicio]").style.background = "#00ff006e"
                        servicioUI.querySelector("[componente=estadoServicio]").innerHTML = "Oferta activada"
                    }

                    const duracionIDV = contenedor.duracionIDV
                    const disponibilidadIDV = contenedor.disponibilidadIDV

                    const tituloPublico = contenedor.tituloPublico
                    const definicion = contenedor.definicion

                    const fechaInicio = contenedor?.fechaInicio
                    const fechaFinal = contenedor?.fechaFinal

                    const selectorContenedorFechas = servicioUI.querySelector("[contenedor=fechas]")


                    if (duracionIDV === "rango") {
                        servicioUI.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaInicio)
                        servicioUI.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaFinal)

                        const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio)
                        const fechaFinal_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinal)
                        const fechaInicioUI = servicioUI.querySelector("[calendario=entrada]").querySelector("[fechaUI]")
                        fechaInicioUI.textContent = fechaInicio_humana

                        const fechaFinalUI = servicioUI.querySelector("[calendario=salida]").querySelector("[fechaUI]")
                        fechaFinalUI.textContent = fechaFinal_humana
                        selectorContenedorFechas.style.display = "flex"
                    } else if (duracionIDV === "permanente") {
                        selectorContenedorFechas.style.display = "none"
                    }








                    const nombreServicioCampo = servicioUI.querySelector("[campo=nombreServicio]")
                    nombreServicioCampo.value = nombre

                    const zonaIDVSelector = servicioUI.querySelector("[campo=zonaIDV]")
                    zonaIDVSelector.value = zonaIDV

                    const duracionIDVSelector = servicioUI.querySelector("[campo=duracionIDV]")
                    duracionIDVSelector.value = duracionIDV

                    const disponibilidadIDVSelector = servicioUI.querySelector("[campo=disponibilidadIDV]")
                    disponibilidadIDVSelector.value = disponibilidadIDV




                    const tituloPublicoCampo = servicioUI.querySelector("[campo=tituloPublico]")
                    tituloPublicoCampo.value = tituloPublico

                    const definicionCampo = servicioUI.querySelector("[campo=definicion]")
                    definicionCampo.value = definicion

                    const componentesUI = casaVitini.administracion.servicios.componentesUI.grupoDeOpciones
                    const selectorContenedorGrupos = servicioUI.querySelector("[contenedor=grupos]")
                    selectorContenedorGrupos.innerHTML = null

                    const sinInfo = componentesUI.infoSinComplemento("No hay ningun grupo de opciones")
                    selectorContenedorGrupos.appendChild(sinInfo)


                    const gruposDeOpciones = contenedor.gruposDeOpciones
                    Object.entries(gruposDeOpciones).forEach(([grupoIDV, go]) => {

                        const gpUI = componentesUI.grupoUI()
                        selectorContenedorGrupos.querySelector("[componente=sinInfo]")?.remove()
                        selectorContenedorGrupos.appendChild(gpUI)

                        gpUI.querySelector("[campo=nombreGrupo]").value = go.nombreGrupo

                        const configuracionGrupo = go.configuracionGrupo


                        Object.entries(configuracionGrupo).forEach(([configuracionIDV, arrayParametros]) => {
                            const confIDV = configuracionIDV
                            const confSeleccionada = arrayParametros

                            const areaSeleecion = gpUI.querySelector(`[area=seleccion][confIDV="${confIDV}"]`)
                            confSeleccionada.forEach((cs) => {
                                const opcionSeleccionada = areaSeleecion.querySelector(`[opcionIDV="${cs}"]`)
                                opcionSeleccionada.setAttribute("estado", "activado")
                                opcionSeleccionada.querySelector("[componente=indicadorSelecion]").style.background = "blue"
                            })
                        })

                        const opcionesGrupo = go.opcionesGrupo
                        opcionesGrupo.forEach(og => {
                            const nombreOpcion = og.nombreOpcion
                            const precioOpcion = og.precioOpcion

                            const ogUI = componentesUI.opcionDelGrupo()
                            ogUI.querySelector("[campo=nombreOpcion]").value = nombreOpcion
                            ogUI.querySelector("[campo=precioOpcion]").value = precioOpcion

                            gpUI.querySelector("[componente=sinInfo]")?.remove()
                            gpUI.querySelector("[contenedor=opciones]").appendChild(ogUI)

                        })


                    })

                    // Inyectar grupo
                    // Inyectar nombrne grupo
                    // inyectar configracion grupo
                    // inyectac opcion
                    // inyectar datos opcion





                },
                estadoUIControlador: async (estado) => {
                    const servicioUID = document.querySelector("[servicioUID]")?.getAttribute("servicioUID")
                    if (!servicioUID) {
                        const error = "No se puede cambiar el estado del servicio porque no tiene un identificador único de servicio (servicioUID).Esto puede deberse a que aún no has creado la servicio o que la has borrado.Si estás creando una servicio, por favor asegúrate de crearlo pulsando el botón 'Crear servicio' antes de activarla."
                        casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }
                    const selectorEstado = document.querySelector("[componente=estadoServicio]")

                    const estadoActualMemoriaVolatil = selectorEstado.textContent
                    selectorEstado.textContent = "Esperando al servidor...."
                    const estadoActual = estado.target.getAttribute("estadoServicio")
                    let estadoOfertaPropuesto
                    if (estadoActual === "desactivado") {
                        estadoOfertaPropuesto = "activado"
                    }
                    if (estadoActual === "activado") {
                        estadoOfertaPropuesto = "desactivado"
                    }
                    const transaccion = {
                        zona: "administracion/servicios/actualizarEstadoServicio",
                        servicioUID: String(servicioUID),
                        estadoIDV: estadoOfertaPropuesto
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        document.querySelector("[estadoServicio]").textContent = estadoActualMemoriaVolatil
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const estadoIDV = respuestaServidor?.estadoIDV
                        selectorEstado.setAttribute("estadoServicio", estadoIDV)
                        let estadoUI
                        if (estadoIDV === "activado") {
                            selectorEstado.style.background = "#00ff006e"
                            estadoUI = "Servicio activado"
                        }
                        if (estadoIDV === "desactivado") {
                            selectorEstado.style.background = "#ff000091"
                            estadoUI = "Servicio desactivado"
                        }
                        selectorEstado.textContent = estadoUI
                    }
                },
                guardarCambios: async function () {
                    const instanciaUID_pantallaEspera = casaVitini.utilidades.codigoFechaInstancia()
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    const servicioUID = main.querySelector("[componente=servicioUI]").getAttribute("servicioUID")

                    const mensaje = "Actualizando servicio..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID_pantallaEspera,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const servicio = casaVitini.administracion.servicios.utilidades.constructorObjeto()

                    const transaccion = {
                        zona: "administracion/servicios/actualizarServicio",
                        servicioUID: String(servicioUID),
                        ...servicio
                    }


                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    document.querySelector(`[instanciaUID="${instanciaUID_pantallaEspera}"]`)?.remove()
                    const ui_espera = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!ui_espera) { return }
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const servicioActualizado = respuestaServidor.servicioActualizado

                        const servicioUI = document.querySelector("[componente=espacio]")
                        servicioUI.setAttribute("instantanea", JSON.stringify(servicioActualizado))

                        casaVitini.administracion.servicios.detallesServicio.aplicaData({
                            servicio: servicioActualizado,
                            instanciaUID_destino: instanciaUID
                        })
                    }
                },
                eliminarServicio: {
                    ui: () => {

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = "Confirmar eliminar el servicio"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = "Var a eliminar el servicio y su aplicacion sera inmediata, ¿Estas de acuerdo ? "

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.textContent = "Comfirmar la eliminación"
                        botonAceptar.addEventListener("click", casaVitini.administracion.servicios.detallesServicio.eliminarServicio.confirmar)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Cancelar la eliminación"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    confirmar: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Eliminado el servicio..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const servicioUID = document.querySelector("[servicioUID]").getAttribute("servicioUID")
                        const transaccion = {
                            zona: "administracion/servicios/eliminarServicio",
                            servicioUID: String(servicioUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vista = `/administracion/servicios`
                            const navegacion = {
                                vista: vista,

                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                }

            },
            componentesUI: {
                detalleUI: function (data) {
                    const modoUI = data.modoUI
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()

                    const ui = document.createElement("div");
                    ui.setAttribute("componente", "servicioUI");
                    ui.classList.add(
                        "servicioUI"
                    )

                    const contenedorNombreEstado = document.createElement("div");

                    if (modoUI === "editar") {
                        contenedorNombreEstado.classList.add("crearOfertaContenedorHorizontalV2");

                        const botonEstadoOferta = document.createElement("div")
                        botonEstadoOferta.classList.add("creatOfertaBotonEstado")
                        botonEstadoOferta.setAttribute("componente", "estadoServicio")
                        botonEstadoOferta.addEventListener("click", casaVitini.administracion.servicios.detallesServicio.estadoUIControlador)
                        botonEstadoOferta.textContent = "Servicio desactivado"
                        contenedorNombreEstado.appendChild(botonEstadoOferta)

                    }
                    if (modoUI === "crear") {
                        contenedorNombreEstado.classList.add("crearOfertaContenedorHorizontalModoCrear");
                    }

                    const input = document.createElement("input");
                    input.setAttribute("type", "text");
                    input.classList.add(
                        "padding12",
                        "borderRadius10"
                    );
                    input.setAttribute("campo", "nombreServicio");
                    input.setAttribute("placeholder", "Escriba el nombre de nuevo servicio");
                    contenedorNombreEstado.appendChild(input)
                    ui.appendChild(contenedorNombreEstado)



                    const contenedorSelectoresGlobales = document.createElement("div")
                    contenedorSelectoresGlobales.classList.add("contenedorSelectoresGlobales")

                    const selectorZona = () => {
                        const selector = document.createElement("select")
                        selector.classList.add(
                            "selector",
                            "textCentrado"
                        )
                        selector.setAttribute("campo", "zonaIDV")
                        const opcionPredeterminada = document.createElement("option")
                        opcionPredeterminada.selected = true
                        opcionPredeterminada.disabled = true;
                        opcionPredeterminada.value = ""
                        opcionPredeterminada.text = "Zona del servicio"
                        selector.appendChild(opcionPredeterminada)
                        const opciones = [
                            { value: "publica", text: "Zona pública" },
                            { value: "global", text: "Zona global" },
                            { value: "privada", text: "Zona privada" }
                        ]
                        for (const opcionData of opciones) {
                            const opcion = document.createElement("option");
                            opcion.value = opcionData.value;
                            opcion.text = opcionData.text;
                            selector.appendChild(opcion);
                        }
                        return selector
                    }
                    contenedorSelectoresGlobales.appendChild(selectorZona())

                    const selectorDuracion = () => {
                        const selector = document.createElement("select")
                        selector.classList.add(
                            "selector",
                            "textCentrado"
                        )
                        selector.setAttribute("campo", "duracionIDV")
                        selector.addEventListener("change", (e) => {
                            const sel = e.target.value
                            const selectorFechas = document.querySelector("[contenedor=fechas]")
                            if (sel === "permanente") {
                                selectorFechas.style.display = "none"
                            } else if (sel === "rango") {
                                selectorFechas.style.display = "flex"
                            }
                        })
                        const opcionPredeterminada = document.createElement("option")
                        opcionPredeterminada.selected = true
                        opcionPredeterminada.disabled = true;
                        opcionPredeterminada.value = ""
                        opcionPredeterminada.text = "Duración"
                        selector.appendChild(opcionPredeterminada)
                        const opciones = [
                            { value: "permanente", text: "Permanente" },
                            { value: "rango", text: "Solo durante un rango" }
                        ]
                        for (const opcionData of opciones) {
                            const opcion = document.createElement("option");
                            opcion.value = opcionData.value;
                            opcion.text = opcionData.text;
                            selector.appendChild(opcion);
                        }
                        return selector
                    }
                    contenedorSelectoresGlobales.appendChild(selectorDuracion())


                    const selectorDisponibilidad = () => {
                        const selector = document.createElement("select")
                        selector.classList.add(
                            "selector",
                            "textCentrado"
                        )
                        selector.setAttribute("campo", "disponibilidadIDV")
                        const opcionPredeterminada = document.createElement("option")
                        opcionPredeterminada.selected = true
                        opcionPredeterminada.disabled = true;
                        opcionPredeterminada.value = ""
                        opcionPredeterminada.text = "Disponibilidad"
                        selector.appendChild(opcionPredeterminada)
                        const opciones = [
                            { value: "constante", text: "Constante" },
                            { value: "variable", text: "Variable" }
                        ]
                        for (const opcionData of opciones) {
                            const opcion = document.createElement("option");
                            opcion.value = opcionData.value;
                            opcion.text = opcionData.text;
                            selector.appendChild(opcion);
                        }
                        return selector
                    }
                    contenedorSelectoresGlobales.appendChild(selectorDisponibilidad())

                    ui.appendChild(contenedorSelectoresGlobales);

                    const divContenedor = document.createElement("div");
                    divContenedor.classList.add("administracion_ofertas_crearOfertas_contenedorFecha");
                    divContenedor.setAttribute("contenedor", "fechas")
                    divContenedor.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                    const divContenedorHorizontal = document.createElement("div");
                    divContenedorHorizontal.classList.add("crearOfertaContenedorHorizontal");

                    const divContenedorFechaInicio = document.createElement("div");
                    divContenedorFechaInicio.classList.add("contenedorFecha");
                    divContenedorFechaInicio.setAttribute("calendario", "entrada");
                    divContenedorFechaInicio.setAttribute("componente", "inicioOferta");
                    divContenedorFechaInicio.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                    divContenedorFechaInicio.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_entrada_perfilSimple",
                            contenedorOrigenIDV: "[calendario=entrada]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "inicioRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Seleciona una fehca de inicio de vigencia del servicio"
                        })
                    })

                    const pFechaInicio = document.createElement("p");
                    pFechaInicio.classList.add("tituloFecha");
                    pFechaInicio.textContent = "Fecha de inicio";

                    const pFechaInicioSeleccionada = document.createElement("p");
                    pFechaInicioSeleccionada.classList.add("fechaInicio");
                    pFechaInicioSeleccionada.setAttribute("fechaUI", "fechaInicio");
                    pFechaInicioSeleccionada.textContent = "(Seleccionar)";

                    divContenedorFechaInicio.appendChild(pFechaInicio);
                    divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);

                    const divContenedorFechaFin = document.createElement("div");
                    divContenedorFechaFin.classList.add("contenedorFecha");
                    divContenedorFechaFin.setAttribute("calendario", "salida");
                    divContenedorFechaFin.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                    divContenedorFechaFin.setAttribute("componente", "finOferta");

                    divContenedorFechaFin.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_salida_perfilSimple",
                            contenedorOrigenIDV: "[calendario=salida]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "finalRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Seleciona una fehca de fin de vigencia del servicio"

                        })
                    })

                    const pFechaFin = document.createElement("p");
                    pFechaFin.classList.add("tituloFecha");
                    pFechaFin.textContent = "Fecha fin";

                    const pFechaFinSeleccionada = document.createElement("p");
                    pFechaFinSeleccionada.classList.add("fechaFin");
                    pFechaFinSeleccionada.setAttribute("fechaUI", "fechaFin");
                    pFechaFinSeleccionada.textContent = "(Seleccionar)";

                    divContenedorFechaFin.appendChild(pFechaFin);
                    divContenedorFechaFin.appendChild(pFechaFinSeleccionada);

                    divContenedorHorizontal.appendChild(divContenedorFechaInicio);
                    divContenedorHorizontal.appendChild(divContenedorFechaFin);

                    divContenedor.appendChild(divContenedorHorizontal);

                    ui.appendChild(divContenedor);


                    const contenedorDefinicion = () => {
                        const contenedor = document.createElement("div")
                        contenedor.setAttribute("contenedor", "definicion")
                        contenedor.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding6",
                            "backgroundGrey1",
                            "borderRadius14"

                        )
                        const titulo = document.createElement("p")
                        titulo.classList.add(
                            "padding6"
                        )
                        titulo.textContent = "Define nombre público para el servicio y una definición."
                        contenedor.appendChild(titulo)

                        const campo = document.createElement("input")
                        campo.setAttribute("campo", "tituloPublico")
                        campo.classList.add(
                            "padding10",
                            "borderRadius10"
                        )
                        campo.placeholder = "Titulo del servicio"
                        contenedor.appendChild(campo)


                        const definicion = document.createElement("textarea")
                        definicion.setAttribute("campo", "definicion")
                        definicion.classList.add(
                            "padding10",
                            "borderRadius10",
                            "resizeOnlyVertical",
                            "area300px",

                        )
                        definicion.placeholder = "Definición del servicio"
                        contenedor.appendChild(definicion)

                        return contenedor
                    }

                    ui.appendChild(contenedorDefinicion())





                    // const contenedorPrecio = () => {
                    //     const contenedor = document.createElement("div")
                    //     contenedor.setAttribute("contenedor", "cantidad")
                    //     contenedor.classList.add(
                    //         "flexVertical",
                    //         "gap6",


                    //     )
                    //     const titulo = document.createElement("p")
                    //     titulo.classList.add(
                    //         "padding6"
                    //     )
                    //     titulo.textContent = "Determina el tipo de selecicon del servicios"
                    //     contenedor.appendChild(titulo)

                    //     const selectorTipoServicio = document.createElement("select")
                    //     selectorTipoServicio.setAttribute("campo", "tipoServicio")
                    //     selectorTipoServicio.classList.add(
                    //         "selectorLista"
                    //     )
                    //     contenedor.appendChild(selectorTipoServicio)

                    //     const tituloSelector = document.createElement("option");
                    //     tituloSelector.selected = true;
                    //     tituloSelector.disabled = true;
                    //     tituloSelector.text = "Seleccionar el tipo de servicio";
                    //     selectorTipoServicio.appendChild(tituloSelector);

                    //     const opciones = [
                    //         { value: "opcionUnica", text: "Servicio de opcion unica" },
                    //         { value: "opcionUnicaMultiOpcional", text: "Servicio de opcion unica entre varias opciones" },
                    //         { value: "opcionMultiOpcional", text: "Servicio de opcion multiple" },
                    //     ]
                    //     for (const opcionData of opciones) {

                    //         const opcion = document.createElement("option");
                    //         opcion.value = opcionData.value;
                    //         opcion.text = opcionData.text;
                    //         selectorTipoServicio.appendChild(opcion);
                    //     }


                    //     const opcionUnicaUI = () => {
                    //         const c = document.createElement("div")
                    //         c.classList.add(
                    //             "flexVertical",
                    //             "gap6",
                    //             "padding6",
                    //             "backgroundGrey1",
                    //             "borderRadius14"

                    //         )

                    //         const titulo = document.createElement("p")
                    //         titulo.classList.add(
                    //             "padding6", "negrita", "textoCentrado"
                    //         )
                    //         titulo.textContent = "Opción unica"
                    //         c.appendChild(titulo)

                    //         const o = document.createElement("input")
                    //         o.setAttribute("campo", "tituloOpcion")
                    //         o.classList.add(
                    //             "padding10",
                    //             "borderRadius10"
                    //         )
                    //         o.placeholder = "Escribe el nombre de la opcion"
                    //         c.appendChild(o)


                    //         const precio = document.createElement("input")
                    //         precio.setAttribute("campo", "tituloOpcion")
                    //         precio.classList.add(
                    //             "padding10",
                    //             "borderRadius10"
                    //         )
                    //         precio.placeholder = "Precio de la opcion, ejemplo 10.00"
                    //         c.appendChild(precio)



                    //         const infoCan = document.createElement("p")
                    //         infoCan.classList.add(
                    //             "padding6", "textoCentrado"
                    //         )
                    //         infoCan.textContent = "Si la cantiad minima y maxima son iguales, entonces la opcion de cantidad desaparecera"
                    //         c.appendChild(infoCan)

                    //         const contenedorCantidades = document.createElement("div")
                    //         contenedorCantidades.classList.add(
                    //             "gridHorizontal2C",
                    //             "gap6"
                    //         )
                    //         c.appendChild(contenedorCantidades)


                    //         const cMin = document.createElement("input")
                    //         cMin.setAttribute("campo", "tituloOpcion")
                    //         cMin.classList.add(
                    //             "padding10",
                    //             "borderRadius10"
                    //         )
                    //         cMin.placeholder = "Determina la cantidad minina solicitable en numero enteros"
                    //         contenedorCantidades.appendChild(cMin)


                    //         const cMax = document.createElement("input")
                    //         cMin.setAttribute("campo", "tituloOpcion")
                    //         cMax.classList.add(
                    //             "padding10",
                    //             "borderRadius10"
                    //         )
                    //         cMax.placeholder = "Determina la cantidad MAXIMA solicitable en numero enteros"
                    //         contenedorCantidades.appendChild(cMax)

                    //         return c
                    //     }

                    //     contenedor.appendChild(opcionUnicaUI())

                    //     return contenedor
                    // }

                    ui.appendChild(this.grupoDeOpciones.areaConstruccion())

                    return ui

                },
                botonesCrearServicio: () => {
                    const boton = document.createElement("p");
                    boton.classList.add("botonV1");
                    boton.textContent = "Crear servicio";
                    boton.setAttribute("boton", "crearServucui");
                    boton.addEventListener("click", casaVitini.administracion.servicios.nuevo.crearServicio)
                    return boton
                },
                botonesModificar: () => {
                    const boton = document.createElement("div")
                    boton.classList.add("botonV1");
                    boton.setAttribute("componente", "botonEditar");
                    boton.setAttribute("contenedor", "botones");

                    boton.addEventListener("click", () => {
                        casaVitini.administracion.servicios.componentesUI.modosUI("modoEditar")
                    })
                    boton.textContent = "Modificar servicio";
                    return boton
                },
                botonesDuranteModificacion: function () {
                    const contenedor = document.createElement("div");
                    contenedor.classList.add("contenedorBotones");
                    contenedor.setAttribute("contenedor", "botones");

                    const botonGuardar = document.createElement("div")
                    botonGuardar.classList.add("botonV1");
                    botonGuardar.setAttribute("componente", "botonGuardarCambios");
                    botonGuardar.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    botonGuardar.addEventListener("click", casaVitini.administracion.servicios.detallesServicio.guardarCambios)
                    botonGuardar.textContent = "Actualizar servicio";

                    const botonCancelar = document.createElement("p");
                    botonCancelar.classList.add("botonV1");
                    botonCancelar.setAttribute("componente", "botonCancelarCambios");
                    botonCancelar.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    botonCancelar.addEventListener("click", async () => {
                        const selectorInstantena = document.querySelector("[componente=espacio][instantanea]").getAttribute("instantanea")
                        const instantanea = JSON.parse(selectorInstantena)
                        const instanciaUID_destino = document.querySelector(`main[instanciaUID]`).getAttribute("instanciaUID")
                        casaVitini.administracion.servicios.detallesServicio.aplicaData({
                            servicio: instantanea,
                            instanciaUID_destino: instanciaUID_destino,
                        })
                    })
                    botonCancelar.textContent = "Revertir cambios";

                    const botonEliminar = document.createElement("p");
                    botonEliminar.classList.add("botonV1");
                    botonEliminar.setAttribute("componente", "botonEliminarOferta");
                    botonEliminar.addEventListener("click", casaVitini.administracion.servicios.detallesServicio.eliminarServicio.ui)
                    botonEliminar.textContent = "Eliminar servicio";
                    contenedor.appendChild(botonGuardar);
                    contenedor.appendChild(botonCancelar);
                    contenedor.appendChild(botonEliminar);
                    return contenedor
                },
                modosUI: async (modo) => {
                    const contenedorBotones = document.querySelector("[componente=servicioUI]")
                    contenedorBotones.querySelector("[contenedro=botones]")?.remove()
                    if (modo === "modoEditar") {
                        const botones = casaVitini.administracion.servicios.componentesUI.botonesDuranteModificacion()
                        contenedorBotones.appendChild(botones)
                        document.querySelector("[componente=soloLecturaInfo]")?.classList.remove("elementoOcultoInicialmente")
                    }
                    if (modo === "modoCancelar") {
                        const botones = casaVitini.administracion.servicios.componentesUI.botonesModificar()
                        contenedorBotones.appendChild(botones)
                        document.querySelector("[componente=soloLecturaInfo]")?.classList.remove("elementoOcultoInicialmente")
                    }
                },
                grupoDeOpciones: {
                    areaConstruccion: function () {

                        const contenedor = document.createElement("div")
                        contenedor.setAttribute("area", "grupoOpciones")
                        contenedor.classList.add(
                            "flexVertical",
                            "gap6",
                        )
                        const titulo = document.createElement("p")
                        titulo.classList.add(
                            "padding6",
                            "textoCentrado"
                        )
                        titulo.textContent = "Grupos de opciones seleccionables"
                        contenedor.appendChild(titulo)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add(
                            "flexHorizontal"
                        )
                        contenedor.appendChild(contenedorBotones)

                        const boton = document.createElement("div")
                        boton.classList.add("botonV1")
                        boton.textContent = "Crear grupo de opciones"
                        boton.addEventListener("click", (e) => {
                            const area = e.target.closest("[area=grupoOpciones]")
                            const destino = area.querySelector("[contenedor=grupos]")
                            destino.querySelector(":scope > [componente=sinInfo]")?.remove()
                            destino.appendChild(this.grupoUI())
                        })
                        contenedorBotones.appendChild(boton)

                        const contenedorGrupos = document.createElement("div")
                        contenedorGrupos.setAttribute("contenedor", "grupos")
                        contenedorGrupos.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding6",
                            "borderGrey1",
                            "borderRadius20"
                        )
                        contenedor.appendChild(contenedorGrupos)

                        const sinInfo = this.infoSinComplemento("No hay ningun grupo de opciones")
                        contenedorGrupos.appendChild(sinInfo)


                        // const selectorTipoServicio = document.createElement("select")
                        // selectorTipoServicio.setAttribute("campo", "tipoServicio")
                        // selectorTipoServicio.classList.add(
                        //     "selectorLista"
                        // )
                        // contenedor.appendChild(selectorTipoServicio)

                        // const tituloSelector = document.createElement("option");
                        // tituloSelector.selected = true;
                        // tituloSelector.disabled = true;
                        // tituloSelector.text = "Seleccionar el tipo de servicio";
                        // selectorTipoServicio.appendChild(tituloSelector);

                        // const opciones = [
                        //     { value: "opcionUnica", text: "Servicio de opcion unica" },
                        //     { value: "opcionUnicaMultiOpcional", text: "Servicio de opcion unica entre varias opciones" },
                        //     { value: "opcionMultiOpcional", text: "Servicio de opcion multiple" },
                        // ]
                        // for (const opcionData of opciones) {

                        //     const opcion = document.createElement("option");
                        //     opcion.value = opcionData.value;
                        //     opcion.text = opcionData.text;
                        //     selectorTipoServicio.appendChild(opcion);
                        // }


                        // const opcionUnicaUI = () => {
                        //     const c = document.createElement("div")
                        //     c.classList.add(
                        //         "flexVertical",
                        //         "gap6",
                        //         "padding6",
                        //         "backgroundGrey1",
                        //         "borderRadius14"

                        //     )

                        //     const titulo = document.createElement("p")
                        //     titulo.classList.add(
                        //         "padding6", "negrita", "textoCentrado"
                        //     )
                        //     titulo.textContent = "Opción unica"
                        //     c.appendChild(titulo)

                        //     const o = document.createElement("input")
                        //     o.setAttribute("campo", "tituloOpcion")
                        //     o.classList.add(
                        //         "padding10",
                        //         "borderRadius10"
                        //     )
                        //     o.placeholder = "Escribe el nombre de la opcion"
                        //     c.appendChild(o)


                        //     const precio = document.createElement("input")
                        //     precio.setAttribute("campo", "tituloOpcion")
                        //     precio.classList.add(
                        //         "padding10",
                        //         "borderRadius10"
                        //     )
                        //     precio.placeholder = "Precio de la opcion, ejemplo 10.00"
                        //     c.appendChild(precio)



                        //     const infoCan = document.createElement("p")
                        //     infoCan.classList.add(
                        //         "padding6", "textoCentrado"
                        //     )
                        //     infoCan.textContent = "Si la cantiad minima y maxima son iguales, entonces la opcion de cantidad desaparecera"
                        //     c.appendChild(infoCan)

                        //     const contenedorCantidades = document.createElement("div")
                        //     contenedorCantidades.classList.add(
                        //         "gridHorizontal2C",
                        //         "gap6"
                        //     )
                        //     c.appendChild(contenedorCantidades)


                        //     const cMin = document.createElement("input")
                        //     cMin.setAttribute("campo", "tituloOpcion")
                        //     cMin.classList.add(
                        //         "padding10",
                        //         "borderRadius10"
                        //     )
                        //     cMin.placeholder = "Determina la cantidad minina solicitable en numero enteros"
                        //     contenedorCantidades.appendChild(cMin)


                        //     const cMax = document.createElement("input")
                        //     cMin.setAttribute("campo", "tituloOpcion")
                        //     cMax.classList.add(
                        //         "padding10",
                        //         "borderRadius10"
                        //     )
                        //     cMax.placeholder = "Determina la cantidad MAXIMA solicitable en numero enteros"
                        //     contenedorCantidades.appendChild(cMax)

                        //     return c
                        // }

                        // contenedor.appendChild(opcionUnicaUI())

                        return contenedor

                    },
                    grupoUI: function () {

                        const c = document.createElement("div")
                        c.setAttribute("componente", "grupo")
                        c.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding6",
                            "backgroundGrey1",
                            "borderRadius14"

                        )

                        const titulo = document.createElement("p")
                        titulo.classList.add(
                            "padding6", "negrita", "textoCentrado"
                        )
                        titulo.textContent = "Titulo o definición del grupo"
                        c.appendChild(titulo)


                        const tituloC = document.createElement("input")
                        tituloC.setAttribute("campo", "nombreGrupo")
                        tituloC.classList.add(
                            "padding10",
                            "borderRadius10"
                        )
                        tituloC.placeholder = "Titulo o definición del grupo"
                        c.appendChild(tituloC)


                        const contructorConfGrupo = (conf) => {
                            const confIDV = conf.confIDV
                            const opciones = conf.opciones


                            const opcionesDelContenedor = document.createElement("div")
                            opcionesDelContenedor.setAttribute("area", "seleccion")
                            opcionesDelContenedor.setAttribute("confIDV", confIDV)
                            opcionesDelContenedor.classList.add(
                                "flexVertical",
                                "gap6",
                                "padding6",
                                "borderGrey1",
                                "borderRadius14",
                                "ratonDefault"
                            )
                            c.appendChild(opcionesDelContenedor)


                            opciones.forEach((opcion) => {
                                const opcionUI = opcion.opcionUI
                                const opcionIDV = opcion.opcionIDV

                                const contenedorGlobal = document.createElement("div")
                                contenedorGlobal.classList.add("contenedorGlobal",)
                                contenedorGlobal.setAttribute("selector", "opcion")
                                contenedorGlobal.setAttribute("opcionIDV", opcionIDV)
                                contenedorGlobal.addEventListener("click", (e) => {

                                    const botonesGrupo = e.target.closest("[area=seleccion]").querySelectorAll("[selector=opcion]")
                                    botonesGrupo.forEach((b) => {
                                        b.removeAttribute("estado")
                                        const indicadorEsfera = b.querySelector("[componente=indicadorSelecion]")
                                        indicadorEsfera.removeAttribute("style")

                                    })
                                    const contenedorSelecioando = e.target.closest("[selector=opcion]")
                                    contenedorSelecioando.setAttribute("estado", "activado")
                                    contenedorSelecioando.querySelector("[componente=indicadorSelecion]").style.background = "blue"


                                })
                                opcionesDelContenedor.appendChild(contenedorGlobal)

                                const esferaSeleccionable = document.createElement("div")
                                esferaSeleccionable.classList.add(
                                    "esferaSeleccionable"
                                )
                                contenedorGlobal.appendChild(esferaSeleccionable)

                                const indicadorDeSeleccion = document.createElement("div")
                                indicadorDeSeleccion.setAttribute("componente", "indicadorSelecion")
                                indicadorDeSeleccion.classList.add(
                                    "indicadorDeSeleccion"
                                )
                                esferaSeleccionable.appendChild(indicadorDeSeleccion)

                                const tituloConf = document.createElement("p")
                                tituloConf.setAttribute("data", "servicioUI")
                                tituloConf.classList.add(
                                    "padding6",
                                )
                                tituloConf.textContent = opcionUI
                                contenedorGlobal.appendChild(tituloConf)

                                opcionesDelContenedor.appendChild(contenedorGlobal)

                            })
                            return opcionesDelContenedor
                        }



                        const dataConfSeleccionObligatoria = {
                            confIDV: "confSelObligatoria",
                            opciones: [
                                {
                                    opcionUI: "El grupo debe tener una opcion seleccionada obligatoriamente",
                                    opcionIDV: "unaObligatoria"
                                },
                                {
                                    opcionUI: "El grupo puede no tener ninguna opción seleccionada",
                                    opcionIDV: "ningunaObligatoria"
                                },

                            ]
                        }


                        c.appendChild(contructorConfGrupo(dataConfSeleccionObligatoria))

                        const dataConfSeleccionNumero = {
                            confIDV: "confSelNumero",
                            opciones: [
                                {
                                    opcionUI: "El grupo solo puede tener una opcion seleccionada",
                                    opcionIDV: "maximoUnaOpcion"
                                },
                                {
                                    opcionUI: "El grupo puede tener varias opciones seleccionadas",
                                    opcionIDV: "variasOpcionesAlMismoTiempo"
                                },
                            ]
                        }

                        c.appendChild(contructorConfGrupo(dataConfSeleccionNumero))

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add(
                            "flexHorizontal",
                            "gap6"
                        )
                        c.appendChild(contenedorBotones)

                        const boton = document.createElement("div")
                        boton.classList.add(
                            "botonV1"
                        )
                        boton.textContent = "Crear opción"
                        boton.addEventListener("click", (e) => {
                            const destino = c.querySelector("[contenedor=opciones]")
                            destino.querySelector("[componente=sinInfo]")?.remove()
                            destino.appendChild(this.opcionDelGrupo())

                        })
                        contenedorBotones.appendChild(boton)

                        const botonE = document.createElement("div")
                        botonE.classList.add(
                            "botonV1"
                        )
                        botonE.textContent = "Elimintar este grupo"
                        botonE.addEventListener("click", (e) => {
                            const contenedorGrupos = e.target.closest("[contenedor=grupos]")
                            c?.remove()
                            const gruposRestantes = contenedorGrupos.querySelectorAll("[componente=grupo]")
                            if (gruposRestantes.length === 0) {
                                contenedorGrupos.appendChild(this.infoSinComplemento("No hay ningun grupo de opciones"))
                            }
                        })
                        contenedorBotones.appendChild(botonE)


                        const contenedorOpciones = document.createElement("div")
                        contenedorOpciones.setAttribute("contenedor", "opciones")
                        contenedorOpciones.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding6",
                            "borderGrey1",
                            "borderRadius14"
                        )
                        c.appendChild(contenedorOpciones)

                        const sinInfo = this.infoSinComplemento("No hay opciones en el grupo")
                        contenedorOpciones.appendChild(sinInfo)

                        return c
                    },
                    infoSinComplemento: (data) => {
                        const info = document.createElement("p")
                        info.classList.add("flexVertical", "textoCentrado", "padding14")
                        info.setAttribute("componente", "sinInfo")
                        info.textContent = data
                        return info
                    },
                    opcionDelGrupo: function () {
                        const contenedor = document.createElement("div")
                        contenedor.setAttribute("componente", "opcion")
                        contenedor.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding6",
                            "backgroundGrey1",
                            "borderRadius14"
                        )
                        const titulo = document.createElement("p")
                        titulo.classList.add(
                            "padding6",
                            "textoCentrado"
                        )
                        titulo.textContent = "Nombre de la opcion"
                        contenedor.appendChild(titulo)


                        const tituloC = document.createElement("input")
                        tituloC.setAttribute("campo", "nombreOpcion")
                        tituloC.classList.add(
                            "padding10",
                            "borderRadius10"
                        )
                        tituloC.placeholder = "Nombre de la opcion"
                        contenedor.appendChild(tituloC)


                        const infoPrecio = document.createElement("p")
                        infoPrecio.classList.add(
                            "padding6",
                        )
                        infoPrecio.textContent = "Si esta opcion tiene un precio, escribalo abajo, si la opcion no tiene precio, dejaló en blanco."
                        contenedor.appendChild(infoPrecio)

                        const precioC = document.createElement("input")
                        precioC.setAttribute("campo", "precioOpcion")
                        precioC.classList.add(
                            "padding10",
                            "borderRadius10"
                        )
                        precioC.placeholder = "Precio de la opcion, ejemplo 00.00"
                        contenedor.appendChild(precioC)


                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add(
                            "flexHorizontal",
                        )
                        contenedor.appendChild(contenedorBotones)

                        const boton = document.createElement("div")
                        boton.style.borderRadius = "10px"
                        boton.classList.add(
                            "botonV4"
                        )
                        boton.textContent = "Eliminar opción"
                        boton.addEventListener("click", (e) => {
                            const contenedorOpciones = e.target.closest("[contenedor=opciones]")
                            contenedor.remove()
                            const opcionesRestantes = contenedorOpciones.querySelectorAll("[componente=opcion]")
                            if (opcionesRestantes.length === 0) {
                                contenedorOpciones.appendChild(this.infoSinComplemento("No hay opciones en el grupo"))
                            }

                        })
                        contenedorBotones.appendChild(boton)

                        return contenedor
                    }
                }


            },
            nuevo: {
                arranque: () => {

                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "/administracion/servicios/servicioUI")


                    const ui = casaVitini.administracion.servicios.componentesUI.detalleUI({
                        modoUI: "crear"
                    })
                    main.appendChild(ui)

                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add(
                        "flexVertical",
                    )
                    ui.appendChild(contenedorBotones)

                    const botonCrearServicio = casaVitini.administracion.servicios.componentesUI.botonesCrearServicio()
                    contenedorBotones.appendChild(botonCrearServicio)
                },
                crearServicio: async () => {

                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const metadatosPantallaCarga = {
                        mensaje: "Creando servicio...",
                        instanciaUID: instanciaUID,
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                    const transaccion = casaVitini.administracion.servicios.utilidades.constructorObjeto()
                    transaccion.zona = "administracion/servicios/crearServicio"


                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!pantallaDeCargaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const nuevoServicio = respuestaServidor?.nuevoServicioUID
                        const vista = `/administracion/servicios/servicio:${nuevoServicio}`
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                },
            },
            utilidades: {
                constructorObjeto: () => {

                    const nombreServicio = document.querySelector("[campo=nombreServicio]").value
                    const fechaInicio_ISO = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinal_ISO = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    const zonaIDV = document.querySelector("[campo=zonaIDV]").value
                    const duracionIDV = document.querySelector("[campo=duracionIDV]").value
                    const disponibilidadIDV = document.querySelector("[campo=disponibilidadIDV]").value

                    const tituloPublico = document.querySelector("[campo=tituloPublico]").value
                    const definicion = document.querySelector("[campo=definicion]").value

                    const o = {
                        nombreServicio,
                        zonaIDV,
                        contenedor: {
                            duracionIDV: duracionIDV,
                            disponibilidadIDV: disponibilidadIDV,
                            tituloPublico: tituloPublico,
                            definicion: definicion,
                            gruposDeOpciones: []

                        }
                    }

                    if (duracionIDV === "rango") {
                        o.contenedor.fechaInicio = fechaInicio_ISO
                        o.contenedor.fechaFinal = fechaFinal_ISO
                    }

                    const selectorGruposRenderizados = document.querySelector("[contenedor=grupos]").querySelectorAll("[componente=grupo]")

                    selectorGruposRenderizados.forEach((g) => {

                        const contenedorOpciones = {
                            nombreGrupo: g.querySelector("[campo=nombreGrupo]").value,
                            configuracionGrupo: [],
                            opcionesGrupo: []
                        }
                        contenedorOpciones.configuracionGrupo = {}
                        g.querySelectorAll("[area=seleccion]").forEach((cg) => {
                            const confIDV = cg.getAttribute("confIDV")
                            const confSeleccionada = []

                            cg.querySelectorAll("[opcionIDV][estado=activado]").forEach((ocg) => {
                                const opcionIDV = ocg.getAttribute("opcionIDV")
                                confSeleccionada.push(opcionIDV)
                            })
                            contenedorOpciones.configuracionGrupo[confIDV] = confSeleccionada
                        })
                        const opcionesDelGrupo = g.querySelector("[contenedor=opciones]").querySelectorAll("[componente=opcion]")
                        opcionesDelGrupo.forEach((og) => {

                            const nombreOpcion = og.querySelector("[campo=nombreOpcion]").value
                            const precioOpcion = og.querySelector("[campo=precioOpcion]").value
                            const opcion = {
                                nombreOpcion,
                                precioOpcion
                            }
                            contenedorOpciones.opcionesGrupo.push(opcion)
                        })
                        o.contenedor.gruposDeOpciones.push(contenedorOpciones)
                    })
                    return o
                },
            }
        },
        configuracion: {
            arranque: async () => {
                const marcoElastico = document.querySelector("[componente=marcoElastico]")
                marcoElastico.style.gap = "4px"
                const botones = document.querySelectorAll("[componente=botonConfiguracion]")
                botones.forEach((boton) => {
                    boton.addEventListener("click", (boton) => {
                        boton.preventDefault()
                        const vista = boton.target.closest("[vista]").getAttribute("vista")
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    })
                })
            },
            zonaHoraria: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const transaccion = {
                        zona: "administracion/configuracion/zonaHoraria/obtenerConfiguracion"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionGlobal = respuestaServidor?.ok
                        const zonaHoraria = configuracionGlobal.zonaHoraria
                        const listaZonasHorarias = configuracionGlobal.listaZonasHorarias
                        const horaEntradaTZ = configuracionGlobal.horaEntradaTZ
                        const horaSalidaTZ = configuracionGlobal.horaSalidaTZ
                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.textContent = "Determine la configuración global del sistema.Esta configuración se aplica a todo el sistema y a todos los usuarios. "
                        contenedorConfiguracionGlobal.appendChild(informacion)

                        let bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        let tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.textContent = "Zona horaria de Casa Vitini"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        let descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.textContent = "La zona horaria local se aplica sobre el reloj UTC para que pueda ver la hora y las fechas en la zona horaria.Por ejemplo, en el apartado de Situación, en la renderización de los calendarios y etc.La zona horaria debe de configurarse con la misma zona horaria de las instalaciones físicas de pernoctación de Casa Vitini.Entonces, el sistema de Casa Vitini puede implantarse en cualquier ordenador sin importar su reloj en zona horaria local.Es fundamental que la zona horaria del sistema sea la misma que la zona horaria de las instalaciones físicas de pernoctación de Casa Vitini.El motivo de esto es que los pernoctante puedan obtener calendarios locales a la zona horaria de Casa Vitini y realizar las reservas en zona horaria local de Casa Vitini."
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        const listaZonaHoraria = document.createElement("select")
                        listaZonaHoraria.classList.add("administracion_configuracion_valorConfiguracionInput")
                        listaZonaHoraria.setAttribute("campo", "zonaHoraria")
                        listaZonaHoraria.setAttribute("valorInicial", zonaHoraria)
                        listaZonaHoraria.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                        for (const zonaHorariaIterada of listaZonasHorarias) {
                            const zonaHorariaUI = zonaHorariaIterada.replaceAll("/", "/").replaceAll("_", " ")
                            const zonaHorariaOpcion = document.createElement("option");
                            zonaHorariaOpcion.text = zonaHorariaUI;
                            zonaHorariaOpcion.value = zonaHorariaIterada;
                            if (zonaHoraria === zonaHorariaIterada) {
                                zonaHorariaOpcion.selected = true;
                            }
                            listaZonaHoraria.add(zonaHorariaOpcion);
                        }
                        bloqueConfiguracion.appendChild(listaZonaHoraria)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        marcoElastico.appendChild(contenedorConfiguracionGlobal)
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.setAttribute("contenedor", "botones")
                        contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("administracion_configuracion_boton")
                        botonGuardarCambios.textContent = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.zonaHoraria.guardarCambios)
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("administracion_configuracion_boton")
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.zonaHoraria.cancelarCambios)
                        botonCancelarCambios.textContent = "Cancelar cambios"
                        contenedorBotones.appendChild(botonCancelarCambios)
                        marcoElastico.appendChild(contenedorBotones)
                    }
                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },
                guardarCambios: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando zona horaria del reloj..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const campos = document.querySelectorAll("[campo]")
                    const transacccion = {
                        zona: "administracion/configuracion/zonaHoraria/guardarConfiguracion"
                    }
                    campos.forEach((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const valorCampo = campo.value
                        transacccion[nombreCampo] = valorCampo
                    })
                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.administracion.configuracion.cancelarCambios()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const contenedorBotones = document.querySelector("[contenedor=botones]")
                        contenedorBotones.removeAttribute("style")
                        campos.forEach((campo) => {
                            campo.setAttribute("valorInicial", campo.value)
                        })
                    }
                }
            },
            horaDeEntradaSalida: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const transaccion = {
                        zona: "administracion/configuracion/horaDeEntradaSalida/obtenerConfiguracion"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionGlobal = respuestaServidor?.ok
                        const horaEntradaTZ = configuracionGlobal.horaEntradaTZ
                        const horaSalidaTZ = configuracionGlobal.horaSalidaTZ
                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.textContent = "Determine la configuración global del sistema.Esta configuración se aplica a todo el sistema y a todos los usuarios. "
                        contenedorConfiguracionGlobal.appendChild(informacion)

                        let bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        let tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.textContent = "Zona horaria de Casa Vitini"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        let descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.textContent = "La zona horaria local se aplica sobre el reloj UTC para que pueda ver la hora y las fechas en la zona horaria.Por ejemplo, en el apartado de Situación, en la renderización de los calendarios y etc.La zona horaria debe de configurarse con la misma zona horaria de las instalaciones físicas de pernoctacion de Casa Vitini.Entonces, el sistema de Casa Vitini puede implantarse en cualquier ordenador sin importar su reloj en zona horaria local.Es fundamental que la zona horaria del sistema sea la misma que la zona horaria de las instalaciones físicas de pernoctación de Casa Vitini.El motivo de esto es que los pernoctante puedan obtener calendarios locales a la zona horaria de Casa Vitini y realizar las reservas en zona horaria local de Casa Vitini."
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)

                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.textContent = "Hora de entrada"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.textContent = "Hora de entrada en zona horaria.Esta es la hora de entrada en la zona horaria seleccionada.Sirve para determinar la hora de entrada de las reservas en el día de entrada"
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        let valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "horaEntradaTZ")
                        valorConfiguracion.setAttribute("valorInicial", horaEntradaTZ)
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.horaDeEntradaSalida.controlCampo)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = horaEntradaTZ
                        valorConfiguracion.placeholder = "Selecciona una hora de entrada, por ejemplo 17:00"
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)

                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.textContent = "Hora de salida"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.textContent = "Hora de salida en zona horaria.Esta es la hora de salida en la zona horaria seleccionada.Sirve para determinar la hora de salida de las reservas en el día de salida "
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "horaSalidaTZ")
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.horaDeEntradaSalida.controlCampo)
                        valorConfiguracion.setAttribute("valorInicial", horaSalidaTZ)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = horaSalidaTZ
                        valorConfiguracion.placeholder = "Selecciona una hora de salida, por ejemplo 19:00 "
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        marcoElastico.appendChild(contenedorConfiguracionGlobal)
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.setAttribute("contenedor", "botones")
                        contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("administracion_configuracion_boton")
                        botonGuardarCambios.textContent = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.horaDeEntradaSalida.guardarCambios)
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("administracion_configuracion_boton")
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.horaDeEntradaSalida.cancelarCambios)
                        botonCancelarCambios.textContent = "Cancelar cambios"
                        contenedorBotones.appendChild(botonCancelarCambios)
                        marcoElastico.appendChild(contenedorBotones)
                    }
                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },
                guardarCambios: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando hora de entrada y salida..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const campos = document.querySelectorAll("[campo]")
                    const transacccion = {
                        zona: "administracion/configuracion/horaDeEntradaSalida/guardarConfiguracion"
                    }
                    campos.forEach((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const valorCampo = campo.value
                        transacccion[nombreCampo] = valorCampo
                    })

                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.administracion.configuracion.cancelarCambios()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const contenedorBotones = document.querySelector("[contenedor=botones]")
                        contenedorBotones.removeAttribute("style")
                        campos.forEach((campo) => {
                            campo.setAttribute("valorInicial", campo.value)
                        })
                    }
                }
            },
            arranqueAntiguo: async () => {
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/configuracion")
                const marcoElastico = document.querySelector("[componente=marcoElastico]")
                marcoElastico.style.gap = "4px"
                const transaccion = {
                    zona: "administracion/configuracion/obtenerConfiguracion"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const configuracionGlobal = respuestaServidor?.ok
                    const zonaHoraria = configuracionGlobal.zonaHoraria
                    const listaZonasHorarias = respuestaServidor.listaZonasHorarias
                    const horaEntradaTZ = configuracionGlobal.horaEntradaTZ
                    const horaSalidaTZ = configuracionGlobal.horaSalidaTZ
                    const contenedorConfiguracionGlobal = document.createElement("div")
                    contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                    const informacion = document.createElement("div")
                    informacion.classList.add("administracion_configuracion_informacion")
                    informacion.textContent = "Determine la configuración global del sistema.Esta configuración se aplica a todo el sistema y a todos los usuarios. "
                    contenedorConfiguracionGlobal.appendChild(informacion)

                    let bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                    let tituloConfiguracion = document.createElement("div")
                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.textContent = "Zona horaria de Casa Vitini"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)
                    let descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.textContent = "La zona horaria local se aplica sobre el reloj UTC para que pueda ver la hora y las fechas en la zona horaria.Por ejemplo, en el apartado de Situación, en la renderización de los calendarios y etc.La zona horaria debe de configurarse con la misma zona horaria de las instalaciones físicas de pernoctacion de Casa Vitini.Entonces, el sistema de Casa Vitini puede implantarse en cualquier ordenador sin importar su reloj en zona horaria local.Es fundamental que la zona horaria del sistema sea la misma que la zona horaria de las instalaciones físicas de pernoctación de Casa Vitini.El motivo de esto es que los pernoctante puedan obtener calendarios locales a la zona horaria de Casa Vitini y realizar las reservas en zona horaria local de Casa Vitini."
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)
                    const listaZonaHoraria = document.createElement("select")
                    listaZonaHoraria.classList.add("administracion_configuracion_valorConfiguracionInput")
                    listaZonaHoraria.setAttribute("campo", "zonaHoraria")
                    listaZonaHoraria.setAttribute("valorInicial", zonaHoraria)
                    listaZonaHoraria.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                    for (const zonaHorariaIterada of listaZonasHorarias) {
                        const zonaHorariaUI = zonaHorariaIterada.replaceAll("/", "/").replaceAll("_", " ")
                        const zonaHorariaOpcion = document.createElement("option");
                        zonaHorariaOpcion.text = zonaHorariaUI;
                        zonaHorariaOpcion.value = zonaHorariaIterada;
                        if (zonaHoraria === zonaHorariaIterada) {
                            zonaHorariaOpcion.selected = true;
                        }
                        listaZonaHoraria.add(zonaHorariaOpcion);
                    }
                    bloqueConfiguracion.appendChild(listaZonaHoraria)
                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)

                    bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                    tituloConfiguracion = document.createElement("div")
                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.textContent = "Hora de entrada"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)
                    descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.textContent = "Hora de entrada en zona horaria.Esta es la hora de entrada en la zona horaria seleccionada.Sirve para determinar la hora de entrada de las reservas en el día de entrada"
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)
                    let valorConfiguracion = document.createElement("input")
                    valorConfiguracion.setAttribute("campo", "horaEntradaTZ")
                    valorConfiguracion.setAttribute("valorInicial", horaEntradaTZ)
                    valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                    valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                    valorConfiguracion.value = horaEntradaTZ
                    valorConfiguracion.placeholder = "Selecciona una hora de entrada, por ejemplo 17:00"
                    bloqueConfiguracion.appendChild(valorConfiguracion)
                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)

                    bloqueConfiguracion = document.createElement("div")
                    bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                    tituloConfiguracion = document.createElement("div")
                    tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                    tituloConfiguracion.textContent = "Hora de salida"
                    bloqueConfiguracion.appendChild(tituloConfiguracion)
                    descripcionConfiguracion = document.createElement("div")
                    descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                    descripcionConfiguracion.textContent = "Hora de salida en zona horaria.Esta es la hora de salida en la zona horaria seleccionada.Sirve para determinar la hora de salida de las reservas en el día de salida "
                    bloqueConfiguracion.appendChild(descripcionConfiguracion)
                    valorConfiguracion = document.createElement("input")
                    valorConfiguracion.setAttribute("campo", "horaSalidaTZ")
                    valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.controlCampo)
                    valorConfiguracion.setAttribute("valorInicial", horaSalidaTZ)
                    valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                    valorConfiguracion.value = horaSalidaTZ
                    valorConfiguracion.placeholder = "Selecciona una hora de salida, por ejemplo 19:00 "
                    bloqueConfiguracion.appendChild(valorConfiguracion)
                    contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                    marcoElastico.appendChild(contenedorConfiguracionGlobal)
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.setAttribute("contenedor", "botones")
                    contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")
                    const botonGuardarCambios = document.createElement("div")
                    botonGuardarCambios.classList.add("administracion_configuracion_boton")
                    botonGuardarCambios.textContent = "Guardar cambios"
                    botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.guardarCambios)
                    contenedorBotones.appendChild(botonGuardarCambios)
                    const botonCancelarCambios = document.createElement("div")
                    botonCancelarCambios.classList.add("administracion_configuracion_boton")
                    botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.cancelarCambios)
                    botonCancelarCambios.textContent = "Cancelar cambios"
                    contenedorBotones.appendChild(botonCancelarCambios)
                    marcoElastico.appendChild(contenedorBotones)
                }
            },
            cancelarCambios: () => {
                const campos = document.querySelectorAll("[campo]")
                campos.forEach((campo) => {
                    campo.value = campo.getAttribute("valorInicial")
                })
                const contenedorBotones = document.querySelector("[contenedor=botones]")
                contenedorBotones.removeAttribute("style")
            },
            controlCampo: () => {
                const campos = document.querySelectorAll("[campo]")
                let estadoFinal = null
                campos.forEach((campo) => {
                    if (campo.value !== campo.getAttribute("valorInicial")) {
                        estadoFinal = "visible"
                    }
                })
                const contenedorBotones = document.querySelector("[contenedor=botones]")
                if (estadoFinal === "visible") {
                    contenedorBotones.style.display = "flex"
                } else {
                    contenedorBotones.removeAttribute("style")
                }
            },
            guardarCambios: async () => {
                const campos = document.querySelectorAll("[campo]")
                const transacccion = {
                    zona: "administracion/configuracion/guardarConfiguracion"
                }
                campos.forEach((campo) => {
                    const nombreCampo = campo.getAttribute("campo")
                    const valorCampo = campo.value
                    transacccion[nombreCampo] = valorCampo
                })
                const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                if (respuestaServidor?.error) {
                    casaVitini.administracion.configuracion.cancelarCambios()
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                    campos.forEach((campo) => {
                        campo.setAttribute("valorInicial", campo.value)
                    })
                }
            },
            calendariosSincronizados: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    if (comandoInicial === "calendarios_sincronizados" && !granuladoURL.parametros.calendario) {

                        const divContenedorAirBnb = document.createElement("div");
                        divContenedorAirBnb.classList.add("contenedorAirBnb");
                        const divBarraHerramientas = document.createElement("div");
                        divBarraHerramientas.classList.add("barraHerramientas");
                        const pTituloContenedor = document.createElement("p");
                        pTituloContenedor.classList.add("tituloContenedor");
                        pTituloContenedor.textContent = "Calendarios sincronizados con Airbnb";
                        const aBotonMas = document.createElement("a");
                        aBotonMas.classList.add("botonMas");
                        aBotonMas.setAttribute("vista", "/administracion/configuracion/calendarios_sincronizados/crear_calendario");
                        aBotonMas.setAttribute("href", "/administracion/configuracion/calendarios_sincronizados/crear_calendario");
                        aBotonMas.setAttribute("componente", "botonGlobal");
                        aBotonMas.addEventListener("click", (boton) => {
                            boton.preventDefault()
                            const vista = boton.target.closest("[vista]").getAttribute("vista")
                            const navegacion = {
                                vista: vista,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        })
                        aBotonMas.textContent = "Añadir calendario";
                        const divContenedorCalendarios = document.createElement("div");
                        divContenedorCalendarios.classList.add("contenedorCalendarios");
                        divContenedorCalendarios.setAttribute("componente", "contendorCalendariosAirbnb");
                        const pTituloInfo = document.createElement("p");
                        pTituloInfo.classList.add("tituloInfo");
                        pTituloInfo.textContent = "Esperando información...";

                        divBarraHerramientas.appendChild(pTituloContenedor);
                        divBarraHerramientas.appendChild(aBotonMas);
                        divContenedorAirBnb.appendChild(divBarraHerramientas);
                        divContenedorAirBnb.appendChild(divContenedorCalendarios);
                        divContenedorCalendarios.appendChild(pTituloInfo);
                        const selectorEspacioCalendarios = document.querySelector("[componente=calendariosSincronizados]")
                        selectorEspacioCalendarios.appendChild(divContenedorAirBnb);
                        const transaccion = {
                            zona: "/administracion/configuracion/calendariosSincronizados/obtenerCalendarios",
                            plataformaCalendarios: "airbnb"
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const calendariosEncontrados = respuestaServidor.ok
                            const selectorContenedor = document.querySelector("[componente=contendorCalendariosAirbnb]")
                            selectorContenedor.innerHTML = null
                            if (calendariosEncontrados.length === 0) {
                                const infoNoCalendarios = document.createElement("p")
                                infoNoCalendarios.classList.add("tituloInfo")
                                infoNoCalendarios.textContent = "No hay ningun calendario sincronizado"
                                selectorContenedor.appendChild(infoNoCalendarios)
                            } else {
                                for (const detallesDelCalendario of calendariosEncontrados) {
                                    const calendarioUID = detallesDelCalendario.calendarioUID
                                    const url = detallesDelCalendario.url
                                    const nombre = detallesDelCalendario.nombre
                                    const apartamentoIDV = detallesDelCalendario.apartamentoIDV
                                    const apartamentoUI = detallesDelCalendario.apartamentoUI
                                    const publicoUID = detallesDelCalendario.publicoUID
                                    const plataformaOrigen = detallesDelCalendario.plataformaOrigen
                                    const dataIcal = detallesDelCalendario.dataIcal
                                    const dominioActual = window.location.hostname
                                    const contenedorCalendarioIndiviudal = document.createElement("div")
                                    contenedorCalendarioIndiviudal.classList.add("contenedorCalendarioIndividual")
                                    contenedorCalendarioIndiviudal.setAttribute("calendarioUID", calendarioUID)
                                    const datosCalendario = document.createElement("div")
                                    datosCalendario.classList.add("contenedorDatosCalendario")
                                    const nombreCalendario = document.createElement("div")
                                    nombreCalendario.classList.add("nombreCalendario")
                                    nombreCalendario.textContent = nombre
                                    datosCalendario.appendChild(nombreCalendario)
                                    titulo = document.createElement("p")
                                    titulo.classList.add("tituloDatoCalendario")
                                    titulo.textContent = "Apartamento sincronizado"
                                    datosCalendario.appendChild(titulo)
                                    const apartamentoEnlazado = document.createElement("div")
                                    apartamentoEnlazado.classList.add("apartamentoEnlazado")
                                    apartamentoEnlazado.textContent = apartamentoUI + ` (${apartamentoIDV})`
                                    datosCalendario.appendChild(apartamentoEnlazado)
                                    titulo = document.createElement("p")
                                    titulo.classList.add("tituloDatoCalendario")
                                    titulo.textContent = "URL del calendario"
                                    datosCalendario.appendChild(titulo)
                                    const urlCalendarioImportado = document.createElement("div")
                                    urlCalendarioImportado.classList.add("urlCalendario")
                                    urlCalendarioImportado.textContent = url
                                    datosCalendario.appendChild(urlCalendarioImportado)
                                    titulo = document.createElement("p")
                                    titulo.classList.add("tituloDatoCalendario")
                                    titulo.textContent = "URL del calendario para exportar formato ICS"
                                    datosCalendario.appendChild(titulo)
                                    const urlCalendarioExportarICS = document.createElement("div")
                                    urlCalendarioExportarICS.classList.add("urlCalendario")
                                    urlCalendarioExportarICS.textContent = "https://" + dominioActual + "/calendarios_compartidos/formato:ics_v2/" + publicoUID
                                    datosCalendario.appendChild(urlCalendarioExportarICS)
                                    contenedorCalendarioIndiviudal.appendChild(datosCalendario)

                                    titulo = document.createElement("p")
                                    titulo.classList.add("tituloDatoCalendario")
                                    titulo.textContent = "URL del calendario para exportar formato ICS Airbnb"
                                    datosCalendario.appendChild(titulo)
                                    const urlCalendarioExportarICSAirbnbn = document.createElement("div")
                                    urlCalendarioExportarICSAirbnbn.classList.add("urlCalendario")
                                    urlCalendarioExportarICSAirbnbn.textContent = "https://" + dominioActual + "/calendarios_compartidos/formato:ics_v2_airbnb/" + publicoUID
                                    datosCalendario.appendChild(urlCalendarioExportarICSAirbnbn)
                                    contenedorCalendarioIndiviudal.appendChild(datosCalendario)


                                    const contenedorBotonesCalendario = document.createElement("div")
                                    contenedorBotonesCalendario.classList.add("contenedorBotonesCalendario")
                                    const botonEliminar = document.createElement("div")
                                    botonEliminar.classList.add("botonCalendario")
                                    botonEliminar.textContent = "Eliminar calendario"
                                    botonEliminar.addEventListener("click", () => {
                                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                        const contenedorElimianr = document.createElement("div")
                                        contenedorElimianr.classList.add("contenedorEliminar")
                                        const titulo = document.createElement("div")
                                        titulo.classList.add("tituloInmersivo")
                                        titulo.textContent = `Eliminar el calendario sincronizado de Airbnb`
                                        contenedorElimianr.appendChild(titulo)
                                        const mensaje = document.createElement("div")
                                        mensaje.classList.add("mensaje")
                                        mensaje.textContent = `¿Estas de acuerdo en eliminar el calendario con nombre ${nombre} enlazado al ${apartamentoUI}?`
                                        contenedorElimianr.appendChild(mensaje)
                                        const botonEliminar = document.createElement("div")
                                        botonEliminar.classList.add("boton")
                                        botonEliminar.textContent = "Eliminar calendario definitivamente"
                                        botonEliminar.addEventListener("click", async () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                            const metadatosPantallaCarga = {
                                                mensaje: "Actualizando calendario...",
                                                instanciaUID: instanciaUID,
                                            }
                                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                            const transaccion = {
                                                zona: "administracion/configuracion/calendariosSincronizados/airbnb/eliminarCalendario",
                                                calendarioUID: calendarioUID
                                            }
                                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                            document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`).forEach((pantalla) => {
                                                document.body.style.removeProperty("overflow")
                                                pantalla.remove()
                                            })
                                            const selectorCalendariosSincronizados = document.querySelector(`[componente=calendariosSincronizados]`)
                                            if (respuestaServidor?.error) {
                                                if (selectorCalendariosSincronizados) {
                                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                                }
                                            }
                                            if (respuestaServidor?.ok) {
                                                if (selectorCalendariosSincronizados) {
                                                    selectorCalendariosSincronizados.querySelector(`[calendarioUID="${calendarioUID}"]`).remove()
                                                }
                                            }
                                        })
                                        contenedorElimianr.appendChild(botonEliminar)
                                        const botonCancelar = document.createElement("div")
                                        botonCancelar.classList.add("boton")
                                        botonCancelar.textContent = "Cancelar y volver a la lista de calendarios"
                                        botonCancelar.addEventListener("click", () => {
                                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        })
                                        contenedorElimianr.appendChild(botonCancelar)
                                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                        pantallaInmersiva.querySelector("[contenedor=contenidoAdvertenciaInmersiva]").appendChild(contenedorElimianr)
                                        document.body.appendChild(pantallaInmersiva)
                                    })
                                    contenedorBotonesCalendario.appendChild(botonEliminar)
                                    const botonModificar = document.createElement("a")
                                    botonModificar.classList.add("botonCalendario")
                                    botonModificar.textContent = "Modificar calendario"
                                    botonModificar.href = `/administracion/configuracion/calendarios_sincronizados/calendario:${calendarioUID}`
                                    botonModificar.addEventListener("click", (boton) => {
                                        boton.preventDefault()
                                        const vista = `/administracion/configuracion/calendarios_sincronizados/calendario:${calendarioUID}`
                                        const navegacion = {
                                            vista: vista,
                                            tipoOrigen: "menuNavegador"
                                        }
                                        casaVitini.shell.navegacion.controladorVista(navegacion)
                                    })
                                    contenedorBotonesCalendario.appendChild(botonModificar)
                                    contenedorCalendarioIndiviudal.appendChild(contenedorBotonesCalendario)
                                    selectorContenedor.appendChild(contenedorCalendarioIndiviudal)
                                }
                            }
                        }
                    } else if (granuladoURL.parametros.calendario) {
                        const calenadrioUID = granuladoURL.parametros.calendario

                        const transaccion = {
                            zona: "/administracion/configuracion/calendariosSincronizados/detallesDelCalendario",
                            calendarioUID: calenadrioUID
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        if (respuestaServidor?.error) {
                            const selectorEspacioCalendarios = document.querySelector("[componente=calendariosSincronizados]")
                            const marcoError = document.createElement("div")
                            marcoError.classList.add("marcoError")
                            const errorInfo = document.createElement("div")
                            errorInfo.classList.add("errorInfoCalendarios")
                            errorInfo.textContent = "No existe ningún calendario con este identificador, por favor revisa el identificador."
                            marcoError.appendChild(errorInfo)
                            selectorEspacioCalendarios.appendChild(marcoError)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesDelCalendario = respuestaServidor.ok
                            const plataformaOrigen = detallesDelCalendario.plataformaOrigenIDV
                            if (plataformaOrigen === "airbnb") {
                                casaVitini.administracion.configuracion.calendariosSincronizados.airbnb.editarCalendarioUI(detallesDelCalendario)
                            }
                        }
                    }
                },
                airbnb: {
                    crearCalendario: {
                        arranque: async () => {
                            const main = document.querySelector("main")
                            main.setAttribute("zonaCSS", "administracion/configuracion")
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const selectorEspacioFormulario = document.querySelector("[componente=espacioFormulario_Airbnb]")
                            selectorEspacioFormulario.innerHTML = null
                            const formularioUI = await casaVitini.administracion.configuracion.calendariosSincronizados.airbnb.formularioCalendario({
                                modo: "crear"
                            })
                            formularioUI.setAttribute("instanciaUID", instanciaUID)
                            selectorEspacioFormulario.appendChild(formularioUI)
                            const botonCrearCalendario = document.createElement("div")
                            botonCrearCalendario.classList.add("botonCrearCalendario")
                            botonCrearCalendario.textContent = "Crear perfil del calenadrio sincronizado"
                            botonCrearCalendario.addEventListener("click", async () => {
                                const transaccion = {
                                    zona: "administracion/configuracion/calendariosSincronizados/airbnb/crearCalendario"
                                }
                                document.querySelectorAll("[campo]").forEach((campo) => {
                                    const nombreCampo = campo.getAttribute("campo")
                                    const valorCampo = campo.value
                                    transaccion[nombreCampo] = valorCampo
                                })
                                const metadatosPantallaCarga = {
                                    mensaje: "Creando calendario...",
                                    instanciaUID: instanciaUID,
                                }
                                document.body.style.overflow = "hidden";
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`).forEach((pantalla) => {
                                    document.body.style.removeProperty("overflow")
                                    pantalla.remove()
                                })
                                const selectorInstanciaFormularioUI = document.querySelector(`[componente=formularioUI][instanciaUID="${instanciaUID}"]`)
                                if (respuestaServidor?.error) {
                                    if (selectorInstanciaFormularioUI) {
                                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                    }
                                }
                                if (respuestaServidor?.ok) {
                                    if (selectorInstanciaFormularioUI) {
                                        const nuevoUID = respuestaServidor.nuevoUID
                                        const vista = `/administracion/configuracion/calendarios_sincronizados/calendario:${nuevoUID}`
                                        const navegacion = {
                                            vista: vista,

                                        }
                                        casaVitini.shell.navegacion.controladorVista(navegacion)
                                    }
                                }
                            })
                            selectorEspacioFormulario.appendChild(botonCrearCalendario)
                        }
                    },
                    formularioCalendario: async (data) => {

                        const modo = data.modo

                        const formularioUI = document.createElement("div")
                        formularioUI.classList.add("formularioUI")
                        formularioUI.setAttribute("componente", "formularioUI")
                        let definicion = document.createElement("p")
                        definicion.classList.add("plataforma")
                        definicion.textContent = "Plataforma Airbnb"

                        definicion = document.createElement("p")
                        definicion.classList.add("definicion")
                        definicion.textContent = "Define un nombre para el calendario.Utiliza este nombre en el futuro para poder recordar algo descriptivo de este calendario.Pon el nombre que creas más recordativo."
                        formularioUI.appendChild(definicion)
                        const nombreCalendario = document.createElement("input")
                        nombreCalendario.classList.add("nombreCalendario")
                        nombreCalendario.setAttribute("campo", "nombre")
                        nombreCalendario.placeholder = "Escribe un nombre para este calendario"
                        formularioUI.appendChild(nombreCalendario)
                        definicion = document.createElement("p")
                        definicion.classList.add("definicion")
                        definicion.textContent = "Selecciona el apartamento con el que vas a enlazar este calendario.Los calendarios de Airbnb se enlazan por apartamento.Cada calendario de airbnb es un apartamento"
                        formularioUI.appendChild(definicion)
                        const tipoApartamentoUI = document.createElement("select")
                        tipoApartamentoUI.classList.add("listaApartamentos")
                        tipoApartamentoUI.setAttribute("campo", "apartamentoIDV")
                        tipoApartamentoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)
                        const tipoApartamentoInicio = document.createElement("option");
                        tipoApartamentoInicio.value = "";
                        tipoApartamentoInicio.selected = true;
                        tipoApartamentoInicio.disabled = true;
                        tipoApartamentoInicio.text = "Seleccionar el apartamento a enlazar";
                        tipoApartamentoUI.add(tipoApartamentoInicio);
                        const apartamentosArray = await casaVitini.administracion.componentes.obtenerApartamentos()
                        if (apartamentosArray.length === 0) {
                            const opcion = document.createElement("option");
                            opcion.value = "";
                            opcion.disabled = true;
                            opcion.text = "No hay ningun apartamento disponible";
                            tipoApartamentoUI.add(opcion);
                        }
                        if (apartamentosArray.length > 0) {
                            apartamentosArray.forEach((detallesApartamento) => {
                                const apartamentoIDV = detallesApartamento.apartamentoIDV
                                const aparatmentoUI = detallesApartamento.apartamentoUI
                                const opcion = document.createElement("option");
                                opcion.value = apartamentoIDV;
                                opcion.text = aparatmentoUI;
                                tipoApartamentoUI.add(opcion);
                            })
                        }
                        formularioUI.appendChild(tipoApartamentoUI)

                        if (modo === "editar") {

                            const contenedorURL = document.createElement("div")
                            contenedorURL.classList.add(
                                "padding10",
                                "flexVertical",
                                "gap6"
                            )
                            formularioUI.appendChild(contenedorURL)

                            definicion = document.createElement("p")
                            definicion.textContent = "Url del calendario de Casa Vitini para exportar. Copia esta url en el otro sistema para sincronziar el calenedario de Casa Vitini con la plataforma de terceros compatible con ICS"
                            contenedorURL.appendChild(definicion)

                            const icsv2ui = document.createElement("p")
                            icsv2ui.textContent = "Formato: ICS V2"
                            icsv2ui.classList.add(
                                "negrita"
                            )
                            contenedorURL.appendChild(icsv2ui)

                            const urlCalendarioExport = document.createElement("p")
                            urlCalendarioExport.classList.add(
                                "breakWordkAll"
                            )
                            urlCalendarioExport.setAttribute("data", "urlExportacion")
                            contenedorURL.appendChild(urlCalendarioExport)

                            const icsv2uiAirbnb = document.createElement("p")
                            icsv2uiAirbnb.textContent = "Formato: ICS V2 Airbnb"
                            icsv2uiAirbnb.classList.add(
                                "negrita"
                            )
                            contenedorURL.appendChild(icsv2uiAirbnb)

                            const urlCalendarioExport_airbnb = document.createElement("p")
                            urlCalendarioExport_airbnb.classList.add(
                                "breakWordkAll"
                            )
                            urlCalendarioExport_airbnb.setAttribute("data", "urlExportacionAirbnbn")
                            contenedorURL.appendChild(urlCalendarioExport_airbnb)


                            definicion = document.createElement("p")
                            definicion.classList.add("definicion")
                            definicion.textContent = "Copia aquí la url del calendario de Airbnb, la url debe de ser la que comparte Airbnb para sincronizar calendarios en formato iCal, la url debe de estar en https"
                            formularioUI.appendChild(definicion)
                            const urlCalendario = document.createElement("input")
                            urlCalendario.classList.add("nombreCalendario")
                            urlCalendario.setAttribute("campo", "url")
                            urlCalendario.placeholder = "Escribe la url del calendario"
                            formularioUI.appendChild(urlCalendario)
                        }

                        return formularioUI
                    },
                    editarCalendarioUI: async (detallesDelCalendario) => {

                        const calendarioUID = detallesDelCalendario.calendarioUID
                        const nombre = detallesDelCalendario.nombre
                        const url = detallesDelCalendario.url
                        const apartamentoIDV = detallesDelCalendario.apartamentoIDV
                        const plataformaOrigen = detallesDelCalendario.plataformaOrigenIDV
                        const apartamentoUI = detallesDelCalendario.apartamentoUI
                        const publicoUID = detallesDelCalendario.publicoUID
                        const dominioActual = window.location.hostname

                        const urlExportacion = "https://" + dominioActual + "/calendarios_compartidos/formato:ics_v2/" + publicoUID
                        const urlExportacionAirbnb = "https://" + dominioActual + "/calendarios_compartidos/formato:ics_v2_airbnb/" + publicoUID


                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const plataformaOrigenUI = plataformaOrigen.charAt(0).toUpperCase() + plataformaOrigen.slice(1);
                        const selectorTitulo = document.querySelector("[componente=titutoGlobal]")
                        selectorTitulo.textContent = `Detalles del calendario de ${plataformaOrigenUI}`
                        const selectorEspacioCalendarios = document.querySelector("[componente=calendariosSincronizados]")
                        const formularioUI = await casaVitini.administracion.configuracion.calendariosSincronizados.airbnb.formularioCalendario({
                            modo: "editar"
                        });
                        formularioUI.setAttribute("instanciaUID", instanciaUID)
                        formularioUI.setAttribute("calendarioUID", calendarioUID)
                        const nombreInput = formularioUI.querySelector("[campo=nombre]");
                        nombreInput.value = nombre;
                        nombreInput.setAttribute("valorInicial", nombre);
                        const apartamentoIDVSelect = formularioUI.querySelector("[campo=apartamentoIDV]");
                        apartamentoIDVSelect.value = apartamentoIDV;
                        apartamentoIDVSelect.setAttribute("valorInicial", apartamentoIDV);
                        const urlExportacionUI = formularioUI.querySelector("[data=urlExportacion]");
                        urlExportacionUI.textContent = urlExportacion;
                        const urlExportacionAirbnbUI = formularioUI.querySelector("[data=urlExportacionAirbnbn]");
                        urlExportacionAirbnbUI.textContent = urlExportacionAirbnb;
                        const urlInput = formularioUI.querySelector("[campo=url]");
                        urlInput.value = url;
                        urlInput.setAttribute("valorInicial", url);
                        selectorEspacioCalendarios.appendChild(formularioUI);
                        const marcoBotones = document.createElement("div")
                        marcoBotones.classList.add("marcoBotones")
                        const botonCrearCalendario = document.createElement("div")
                        botonCrearCalendario.classList.add("botonCrearCalendario")
                        botonCrearCalendario.textContent = "Guardar cambios"
                        botonCrearCalendario.addEventListener("click", async () => {
                            const transaccion = {
                                zona: "administracion/configuracion/calendariosSincronizados/airbnb/actualizarCalendario",
                                calendarioUID: calendarioUID
                            }
                            document.querySelectorAll("[campo]").forEach((campo) => {
                                const nombreCampo = campo.getAttribute("campo")
                                const valorCampo = campo.value
                                transaccion[nombreCampo] = valorCampo

                            })
                            const metadatosPantallaCarga = {
                                mensaje: "Actualizando calendario...",
                                instanciaUID: instanciaUID,
                            }
                            document.body.style.overflow = "hidden";
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            document.querySelectorAll(`[instanciaUID="${instanciaUID}"][pantallaSuperpuesta=pantallaCargaSuperpuesta]`).forEach((pantalla) => {
                                document.body.style.removeProperty("overflow")
                                pantalla.remove()
                            })
                            const selectorInstanciaFormularioUI = document.querySelector(`[componente=formularioUI][instanciaUID="${instanciaUID}"]`)
                            if (respuestaServidor?.error) {
                                if (selectorInstanciaFormularioUI) {
                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                }
                            }
                            if (respuestaServidor?.ok) {
                                if (selectorInstanciaFormularioUI) {
                                    document.querySelectorAll("[campo]").forEach((campo) => {
                                        const valorCampo = campo.value
                                        const valorInicial = campo.getAttribute("valorInicial")
                                        if (valorCampo !== valorInicial) {
                                            campo.setAttribute("valorInicial", valorCampo)
                                        }
                                    })
                                }
                            }
                        })
                        marcoBotones.appendChild(botonCrearCalendario)
                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("botonCrearCalendario")
                        botonCancelar.textContent = "Restablecer cambios"
                        botonCancelar.addEventListener("click", async () => {
                            document.querySelectorAll("[campo]").forEach((campo) => {
                                const valorInicial = campo.getAttribute("valorInicial")
                                campo.value = valorInicial
                            })
                        })
                        marcoBotones.appendChild(botonCancelar)
                        selectorEspacioCalendarios.appendChild(marcoBotones)
                    }
                },
            },
            limitesReservaPublica: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const transaccion = {
                        zona: "administracion/configuracion/limitesReservaPublica/obtenerConfiguracion"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionGlobal = respuestaServidor?.ok
                        const diasMaximosReserva = configuracionGlobal.diasMaximosReserva
                        const diasAntelacionReserva = configuracionGlobal.diasAntelacionReserva
                        const limiteFuturoReserva = configuracionGlobal.limiteFuturoReserva
                        const horaLimiteDelMismoDia = configuracionGlobal?.horaLimiteDelMismoDia || ""

                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.textContent = "Determina los límites de las reservas que pre confirman los clientes desde Casa Vitini. A diferencia de las reservas que se confirman en el panel de administración. Las reservas que preconfirman los clientes tienen unos límites. Como unos días de antelación, número de días máximos de duración o un límite futuro para aceptar reservas hasta un punto en el futuro."
                        contenedorConfiguracionGlobal.appendChild(informacion)
                        let bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        let tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.textContent = "Dias de antelación"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        let descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.textContent = "Determina el número de días de antelación escribiendo el número de días de antelación.Si, por ejemplo, escribes un mínimo de diez días de antelación, se aceptarán reservas a partir del día número 11 desde el día presente. El día presente cuenta como día 0. Si, por ejemplo quisieras aceptar reservas para el mismo día, entonces establece los días de antelación en 0"
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        let valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "diasAntelacionReserva")
                        valorConfiguracion.setAttribute("valorInicial", diasAntelacionReserva)
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.limitesReservaPublica.controlCampo)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = diasAntelacionReserva
                        valorConfiguracion.placeholder = "Determina el numero de días de antelación"
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        const horaLimite = casaVitini.administracion.configuracion.limitesReservaPublica.componentesUI.horaDelMismoDia(horaLimiteDelMismoDia)
                        bloqueConfiguracion.appendChild(horaLimite)

                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.textContent = "Duración máxima de la reserva"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.textContent = "Determina el numero maximo de días con noche que puede tener una reserva "
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "diasMaximosReserva")
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.limitesReservaPublica.controlCampo)
                        valorConfiguracion.setAttribute("valorInicial", diasMaximosReserva)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = diasMaximosReserva
                        valorConfiguracion.placeholder = "Selecciona una hora de salida, por ejemplo 19:00 "
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.textContent = "Límite futuro para aceptar reservas"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.textContent = "Determina el número máximo de días en lo que se está dispuesto a aceptar una reserva. Por ejemplo, si no aceptas reservas más allá de un año."
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        valorConfiguracion = document.createElement("input")
                        valorConfiguracion.setAttribute("campo", "limiteFuturoReserva")
                        valorConfiguracion.addEventListener("input", casaVitini.administracion.configuracion.limitesReservaPublica.controlCampo)
                        valorConfiguracion.setAttribute("valorInicial", limiteFuturoReserva)
                        valorConfiguracion.classList.add("administracion_configuracion_valorConfiguracionInput")
                        valorConfiguracion.value = limiteFuturoReserva
                        valorConfiguracion.placeholder = "Determinal el limite futuro en numero de dias"
                        bloqueConfiguracion.appendChild(valorConfiguracion)
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        marcoElastico.appendChild(contenedorConfiguracionGlobal)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.setAttribute("contenedor", "botones")
                        contenedorBotones.classList.add("administracion_configuracion_contenedorBotones")
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("administracion_configuracion_boton")
                        botonGuardarCambios.textContent = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.configuracion.limitesReservaPublica.guardarCambios)
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("administracion_configuracion_boton")
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.configuracion.limitesReservaPublica.cancelarCambios)
                        botonCancelarCambios.textContent = "Cancelar cambios"
                        contenedorBotones.appendChild(botonCancelarCambios)
                        marcoElastico.appendChild(contenedorBotones)
                    }
                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },
                guardarCambios: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando límites de las reservas públicas..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const campos = document.querySelectorAll("[campo]")
                    const transacccion = {
                        zona: "administracion/configuracion/limitesReservaPublica/guardarConfiguracion"
                    }
                    campos.forEach((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const valorCampo = campo.value
                        transacccion[nombreCampo] = String(valorCampo)
                    })
                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.administracion.configuracion.cancelarCambios()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const contenedorBotones = document.querySelector("[contenedor=botones]")
                        contenedorBotones.removeAttribute("style")
                        campos.forEach((campo) => {
                            campo.setAttribute("valorInicial", campo.value)
                        })
                    }
                },
                componentesUI: {
                    horaDelMismoDia: (horaLimiteDelMismoDia) => {
                        const contenedor = document.createElement("div")
                        contenedor.classList.add(
                            "ocultoInicialmente",
                            "flexVertical",
                            "padding6",
                            "gap6",
                            "backgroundGrey1",
                            "borderRadius12"
                        )

                        const descripcion = document.createElement("p")
                        descripcion.classList.add(
                            "padding6"
                        )
                        descripcion.textContent = `Cuando seleccionas 0 días de antelación, permites aceptar reservas el mismo día presente. Es necesario determinar una hora máxima para aceptar reservas el mismo día. Por ejemplo, puedes no aceptar reservas más tarde de las 11 de la mañana. Escribe la hora en formato 24 H y con los minutos. Por ejemplo, si la hora máxima para hacer una reserva en el mismo día es a las once en punto de la mañana, entonces escribe 11:00. Si es a las nueve de la mañana en punto, entonces escribe 09:00. Siempre escribe los dos dígitos tanto para la hora como para los minutos. Este campo solo es obligatorio rellenarlo cuando los días de antelación son 0, si no puedes dejarlo en blanco.`
                        contenedor.appendChild(descripcion)

                        const campoHora = document.createElement("input")
                        campoHora.classList.add("administracion_configuracion_valorConfiguracionInput")
                        campoHora.placeholder = "Escribe la hora en formato 24H, tal que asi 00:00"
                        campoHora.setAttribute("campo", "horaLimiteDelMismoDia")
                        campoHora.addEventListener("input", casaVitini.administracion.configuracion.limitesReservaPublica.controlCampo)
                        campoHora.setAttribute("valorInicial", horaLimiteDelMismoDia)
                        campoHora.value = horaLimiteDelMismoDia
                        contenedor.appendChild(campoHora)
                        return contenedor
                    }

                }
            },
            interruptores: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.style.gap = "4px"
                    const transaccion = {
                        zona: "administracion/configuracion/interruptores/obtenerInterruptores"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionGlobal = respuestaServidor.ok
                        const aceptarReservasPublicas = configuracionGlobal.aceptarReservasPublicas
                        const estados = [
                            {
                                estadoUI: "Activado",
                                estadoIDV: "activado"
                            },
                            {
                                estadoUI: "Desactivado",
                                estadoIDV: "desactivado"
                            }
                        ]
                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.textContent = "Los interruptores permiten activar o desactivar funciones específicas. Como, por ejemplo, permitir reservas públicas o no.Puede activar y desactivar los interruptores y tener un control más modular del sistema."
                        contenedorConfiguracionGlobal.appendChild(informacion)
                        bloqueConfiguracion = document.createElement("div")
                        bloqueConfiguracion.classList.add("administracion_configuracion_bloqueConfiguracion")
                        tituloConfiguracion = document.createElement("div")
                        tituloConfiguracion.classList.add("administracion_configuracion_tituloConfiguracion")
                        tituloConfiguracion.textContent = "Permitir reservas públicas"
                        bloqueConfiguracion.appendChild(tituloConfiguracion)
                        descripcionConfiguracion = document.createElement("div")
                        descripcionConfiguracion.classList.add("administracion_configuracion_descripcion")
                        descripcionConfiguracion.textContent = "Este interruptor determina si se deben permitir reservas públicas ahora mismo. Si el interruptor está activado, personas en todo el mundo podrán pre confirmar reservas desde Casa Vitini."
                        bloqueConfiguracion.appendChild(descripcionConfiguracion)
                        const io_aceptarReservasPublicas_UI = document.createElement("select")
                        io_aceptarReservasPublicas_UI.setAttribute("interruptor", "aceptarReservasPublicas")
                        io_aceptarReservasPublicas_UI.classList.add("administracion_configuracion_valorConfiguracionInput")
                        io_aceptarReservasPublicas_UI.setAttribute("valorInicial", aceptarReservasPublicas)
                        io_aceptarReservasPublicas_UI.addEventListener("change", (e) => {
                            const metadatos = {
                                interruptorIDV: "aceptarReservasPublicas",
                                estado: e.target.value
                            }
                            e.target.style.pointerEvents = "none"
                            casaVitini.administracion.configuracion.interruptores.actualizarInterruptor(metadatos)
                        })
                        bloqueConfiguracion.appendChild(io_aceptarReservasPublicas_UI)
                        let estadoInicial = document.createElement("option")
                        estadoInicial.value = "";
                        estadoInicial.disabled = true;
                        if (!aceptarReservasPublicas) {
                            estadoInicial.selected = true;
                        }
                        estadoInicial.text = "Seleccionar el estado del interruptor";
                        io_aceptarReservasPublicas_UI.add(estadoInicial);
                        for (const detallesDelEstado of estados) {
                            const estadoIDV = detallesDelEstado.estadoIDV
                            const estadoUI = detallesDelEstado.estadoUI
                            const opcion = document.createElement("option");
                            opcion.value = estadoIDV;
                            opcion.text = estadoUI;
                            if (estadoIDV === aceptarReservasPublicas) {
                                opcion.selected = true;
                            }
                            io_aceptarReservasPublicas_UI.add(opcion);
                        }
                        contenedorConfiguracionGlobal.appendChild(bloqueConfiguracion)
                        marcoElastico.appendChild(contenedorConfiguracionGlobal)
                    }
                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },
                actualizarInterruptor: async (interruptor) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const seccionUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const interruptorIDV = interruptor.interruptorIDV
                    const estado = interruptor.estado
                    const selectorListaEstadosInterruptor = seccionRenderizadaOrigen.querySelector(`[interruptor=${interruptorIDV}]`)
                    const valorInicial = selectorListaEstadosInterruptor.getAttribute("valorInicial")
                    const estadoSoliciado = selectorListaEstadosInterruptor.querySelector(`option[value=${estado}]`)
                    let procesandoEstadoUI
                    if (estado === "activado") {
                        procesandoEstadoUI = "Activando..."
                    }
                    if (estado === "desactivado") {
                        procesandoEstadoUI = "Desactivando..."
                    }
                    estadoSoliciado.text = procesandoEstadoUI
                    const transacccion = {
                        zona: "administracion/configuracion/interruptores/actualizarEstado",
                        interruptorIDV: interruptorIDV,
                        estado: estado
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${seccionUID}"]`)
                    if (!seccionRenderizada) { return }
                    selectorListaEstadosInterruptor.removeAttribute("style")
                    if (respuestaServidor?.error) {
                        let estadoInicialUI
                        if (estado === "activado") {
                            estadoInicialUI = "Activado"
                        }
                        if (estado === "desactivado") {
                            estadoInicialUI = "Desactivado"
                        }
                        estadoSoliciado.text = estadoInicialUI
                        selectorListaEstadosInterruptor.value = valorInicial
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        let estadoFinalUI
                        if (estado === "activado") {
                            estadoFinalUI = "Activado"
                        }
                        if (estado === "desactivado") {
                            estadoFinalUI = "Desactivado"
                        }
                        estadoSoliciado.text = estadoFinalUI
                        selectorListaEstadosInterruptor.setAttribute("valorInicial", estado)
                    }
                }
            },
            mensajesEnPortada: {

                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/configuracion/mensajesEnPortada")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    const soloDigitos = /^\d+$/;

                    if (comandoInicial === "mensajes_en_portada") {
                        casaVitini.administracion.configuracion.mensajesEnPortada.portadaUI()
                    } else if (soloDigitos.test(comandoInicial)) {
                        const transaccion = {
                            zona: "administracion/configuracion/mensajesEnPortada/detallesDelMensaje",
                            mensajeUID: comandoInicial
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)

                        if (!seccionRenderizada) { return }
                        if (respuestaServidor.error) {
                            const titulo = document.querySelector(".tituloGris")
                            titulo.textContent = "No existe ningún mensaje de portada con el identificador: " + comandoInicial
                            return
                        }
                        main.setAttribute("zonaCSS", "administracion/configuracion/mensajesEnPortada/detallesDelMensaje")
                        casaVitini.administracion.configuracion.mensajesEnPortada.detallesDelMensaje.mensajeUI(respuestaServidor.ok)
                    } else {
                        const info = {
                            titulo: "Impuesto inexistente",
                            descripcion: "El impuesto al que hace referencia la URL no existe.Revisa el identificador.Quizás fue un impuesto que tuviste hace un tiempo y que borraste"
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }

                },
                portadaUI: async () => {
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")
                    marcoElastico.innerHTML = null
                    const titulo = document.querySelector(".tituloGris")
                    titulo.textContent = "Mensajes en portada"

                    const transaccion = {
                        zona: "administracion/configuracion/mensajesEnPortada/obtenerMensajes"
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)


                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                        titulo.textContent = respuestaServidor?.error
                    }
                    if (respuestaServidor?.ok) {
                        const mensajesEnPortada = respuestaServidor.ok

                        const contenedorConfiguracionGlobal = document.createElement("div")
                        contenedorConfiguracionGlobal.classList.add("administracion_configuracion_contenedorConfiguracion")
                        const informacion = document.createElement("div")
                        informacion.classList.add("administracion_configuracion_informacion")
                        informacion.textContent = "Los mensajes en portada son textos que aparecen en portada."
                        contenedorConfiguracionGlobal.appendChild(informacion)

                        const contenedor = document.createElement("div")
                        contenedor.classList.add("contenedor")

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("contenedorBotones")

                        const botonNuevoMensaje = document.createElement("a")
                        botonNuevoMensaje.classList.add("botonNuevoMensaje")
                        botonNuevoMensaje.textContent = "Nuevo mensaje en portada"
                        botonNuevoMensaje.setAttribute("href", "/administracion/configuracion/mensajes_en_portada/nuevo")
                        botonNuevoMensaje.setAttribute("vista", "/administracion/configuracion/mensajes_en_portada/nuevo")
                        botonNuevoMensaje.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        contenedorBotones.appendChild(botonNuevoMensaje)

                        contenedorBotones.appendChild(botonNuevoMensaje)

                        contenedor.appendChild(contenedorBotones)

                        const contenedorListaMensajes = document.createElement("div")
                        contenedorListaMensajes.classList.add("contenedorListaMensajes")

                        mensajesEnPortada.sort((a, b) => a.posicion - b.posicion);
                        const numeroTotalMensajes = mensajesEnPortada.length


                        let posicionContenedor = 0
                        for (const detallesDelMensaje of mensajesEnPortada) {

                            const mensajeUID = detallesDelMensaje.mensajeUID
                            const mensaje = detallesDelMensaje.mensaje
                            const estadoIDV = detallesDelMensaje.estadoIDV
                            const posicion = detallesDelMensaje.posicion

                            const configuracionMensaje = {
                                mensajeUID: mensajeUID,
                                mensaje: mensaje,
                                estadoIDV: estadoIDV,
                                posicion: posicion,
                                numeroTotalMensajes: numeroTotalMensajes
                            }
                            const mensajeUI = casaVitini.administracion.configuracion.mensajesEnPortada.mensajeUI(configuracionMensaje)
                            posicionContenedor = posicionContenedor + 1

                            const contenedorDePosicion = document.createElement("div")
                            contenedorDePosicion.classList.add("contenedorDePosicion")
                            contenedorDePosicion.setAttribute("posicion", posicionContenedor)

                            contenedorDePosicion.appendChild(mensajeUI)
                            contenedorListaMensajes.appendChild(contenedorDePosicion)

                        }
                        contenedor.appendChild(contenedorListaMensajes)
                        marcoElastico.appendChild(contenedor)
                    }
                },
                mensajeUI: (detallesDelMensaje) => {
                    const estados = {
                        activado: "Activado",
                        desactivado: "Desactivado"
                    }

                    const mensajeUID = detallesDelMensaje.mensajeUID
                    const mensaje = detallesDelMensaje.mensaje
                    const estadoIDV = detallesDelMensaje.estadoIDV
                    const posicion = Number(detallesDelMensaje.posicion)
                    const numeroTotalMensajes = detallesDelMensaje.numeroTotalMensajes


                    const contenedorMensaje = document.createElement("div")
                    contenedorMensaje.classList.add("contenedorMensaje")
                    contenedorMensaje.setAttribute("mensajeUID", mensajeUID)

                    const textoDelMensaje = document.createElement("div")
                    textoDelMensaje.classList.add("textoDelMensaje")
                    textoDelMensaje.textContent = mensaje
                    contenedorMensaje.appendChild(textoDelMensaje)

                    const contenedorBotonesMensaje = document.createElement("div")
                    contenedorBotonesMensaje.classList.add("contenedorBotonesMensaje")

                    const selectorEstado = document.createElement("select")
                    selectorEstado.setAttribute("componente", "selectorEstado")
                    selectorEstado.setAttribute("valorInicial", estadoIDV)
                    selectorEstado.classList.add("selector")
                    selectorEstado.addEventListener("change", (e) => {
                        const metadatos = {
                            estadoSeleccionado: e.target.value,
                            mensajeUID: mensajeUID
                        }
                        casaVitini.administracion.configuracion.mensajesEnPortada.actualizarEstado(metadatos)
                    })

                    const opcion = document.createElement("option");
                    opcion.text = "Seleccionar el estado del mensaje"
                    opcion.disabled = "true"
                    selectorEstado.add(opcion);

                    for (const [estadoIDV_, estadoUI] of Object.entries(estados)) {
                        const opcion = document.createElement("option");
                        opcion.value = estadoIDV_;
                        opcion.text = estadoUI
                        if (estadoIDV_ === estadoIDV) {
                            opcion.selected = "true"
                        }
                        selectorEstado.add(opcion);
                    }

                    contenedorBotonesMensaje.appendChild(selectorEstado)

                    const selectorPosicion = document.createElement("select")
                    selectorPosicion.classList.add("selector")
                    selectorPosicion.setAttribute("componente", "selectorPosicion")
                    selectorPosicion.addEventListener("change", (e) => {
                        const metadatos = {
                            nuevaPosicion: e.target.value,
                            mensajeUIDActual: mensajeUID
                        }
                        casaVitini.administracion.configuracion.mensajesEnPortada.moverPosicion(metadatos)
                    })

                    for (let index = 0; index < numeroTotalMensajes; index++) {
                        const posicionLoop = index + 1
                        const opcion = document.createElement("option");
                        opcion.value = posicionLoop;
                        if (posicion === posicionLoop) {
                            opcion.text = "Posicion " + posicionLoop;
                            opcion.disabled = "true"
                            opcion.selected = "true"
                        } else {
                            opcion.text = "Mover a la posicion " + posicionLoop;
                        }
                        selectorPosicion.add(opcion);
                    }
                    contenedorBotonesMensaje.appendChild(selectorPosicion)

                    const botonModificar = document.createElement("div")
                    botonModificar.classList.add("boton")
                    botonModificar.textContent = "Modificar mensaje"
                    botonModificar.setAttribute("href", "/administracion/configuracion/mensajes_en_portada/" + mensajeUID)
                    botonModificar.setAttribute("vista", "/administracion/configuracion/mensajes_en_portada/" + mensajeUID)
                    botonModificar.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.traductorCambioVista)
                    contenedorBotonesMensaje.appendChild(botonModificar)

                    const botonEliminar = document.createElement("div")
                    botonEliminar.classList.add("boton")
                    botonEliminar.textContent = "Eliminar mensaje"
                    botonEliminar.addEventListener("click", () => {
                        casaVitini.administracion.configuracion.mensajesEnPortada.eliminarMensaje.UI({ mensajeUID })
                    })
                    contenedorBotonesMensaje.appendChild(botonModificar)

                    contenedorBotonesMensaje.appendChild(botonEliminar)

                    contenedorMensaje.appendChild(contenedorBotonesMensaje)
                    return contenedorMensaje


                },
                cancelarCambios: () => {
                    const campos = document.querySelectorAll("[campo]")
                    campos.forEach((campo) => {
                        campo.value = campo.getAttribute("valorInicial")
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    contenedorBotones.removeAttribute("style")
                },
                controlCampo: () => {
                    const campos = document.querySelectorAll("[campo]")
                    let estadoFinal = null
                    campos.forEach((campo) => {
                        if (campo.value !== campo.getAttribute("valorInicial")) {
                            estadoFinal = "visible"
                        }
                    })
                    const contenedorBotones = document.querySelector("[contenedor=botones]")
                    if (estadoFinal === "visible") {
                        contenedorBotones.style.display = "flex"
                    } else {
                        contenedorBotones.removeAttribute("style")
                    }
                },

                nuevo: {
                    arranque: () => {
                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "administracion/configuracion/mensajesEnPortada/nuevo")
                        const marcoElastico = document.querySelector("[componente=marcoElastico]")
                        marcoElastico.style.padding = "6px"
                        const botonCrearNuevoMensaje = document.querySelector("[boton=crearNuevoMensaje]")
                        botonCrearNuevoMensaje.addEventListener("click", casaVitini.administracion.configuracion.mensajesEnPortada.nuevo.crearMensaje)
                    },
                    crearMensaje: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = document.querySelector("[componente=textoDelMensaje]").value
                        const mensajeEsppera = "Creando nuevo mensaje en portada..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensajeEsppera
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const transacccion = {
                            zona: "administracion/configuracion/mensajesEnPortada/crearMensaje",
                            mensaje: mensaje
                        }



                        const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                        const seccionRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!seccionRenderizada)
                            seccionRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vistaFinal = `/administracion/configuracion/mensajes_en_portada`
                            const navegacion = {
                                vista: vistaFinal,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                detallesDelMensaje: {
                    mensajeUI: (detallesDelMensaje) => {


                        const titulo = document.querySelector("main .titulo")
                        titulo.textContent = "Detalles del mensaje"

                        const mensajeUID = detallesDelMensaje.mensajeUID
                        const mensaje = detallesDelMensaje.mensaje

                        const estado = detallesDelMensaje.estado
                        const posicion = detallesDelMensaje.posicion

                        const marcoElastico = document.querySelector("[componente=marcoElastico]")

                        const contenedorMensaje = document.createElement("div")
                        contenedorMensaje.classList.add("contenedorDelMensaje")
                        contenedorMensaje.setAttribute("mensajeUID", mensajeUID)

                        const textoDelMensaje = document.createElement("textarea")
                        textoDelMensaje.classList.add("textoDelMensaje")
                        textoDelMensaje.setAttribute("componente", "textoDelMensaje")
                        textoDelMensaje.value = mensaje
                        textoDelMensaje.placeholder = "Escribe el mensaje en portada aquí"
                        contenedorMensaje.appendChild(textoDelMensaje)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("contenedorBotones")
                        const botonGuardar = document.createElement("div")
                        botonGuardar.classList.add("boton")
                        botonGuardar.addEventListener("click", casaVitini.administracion.configuracion.mensajesEnPortada.detallesDelMensaje.guardarMensaje)
                        botonGuardar.textContent = "Guardar mensaje"

                        contenedorBotones.appendChild(botonGuardar)
                        contenedorMensaje.appendChild(contenedorBotones)
                        marcoElastico.appendChild(contenedorMensaje)



                    },
                    guardarMensaje: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensajeUID = document.querySelector("[mensajeUID]").getAttribute("mensajeUID")
                        const mensaje = document.querySelector("[componente=textoDelMensaje]").value
                        const mensajeCarga = "Guardando mensaje..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensajeCarga
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const transacccion = {
                            zona: "administracion/configuracion/mensajesEnPortada/actualizarMensaje",
                            mensaje: mensaje,
                            mensajeUID: mensajeUID
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                        const seccionRenderizada = document.querySelector(`main [instanciaUID="${instanciaUID}"]`)
                        if (!seccionRenderizada)
                            seccionRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vistaFinal = `/administracion/configuracion/mensajes_en_portada`
                            const navegacion = {
                                vista: vistaFinal,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                eliminarMensaje: {
                    UI: (data) => {
                        const mensajeUID = data.mensajeUID

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = "Confirmas la eliminación del mensaje de la portada"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = "Vas a eliminar este mensaje, no solo se borrará de la portada inmediatamente, sino que también se eliminará de Casa Vitini de manera irreversible.Si solo deseas que no aparezca, puedes desactivarlo.Sí, por el contrario, quieres eliminarlo, entonces está en el lugar correcto."

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.textContent = "Comfirmar la eliminacion del mensaje"
                        botonAceptar.addEventListener("click", () => {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            casaVitini.administracion.configuracion.mensajesEnPortada.eliminarMensaje.confirmar(mensajeUID)
                        })
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Cancelar la eliminación"
                        document.querySelector("main").appendChild(pantallaInmersiva)
                    },
                    confirmar: async (mensajeUID) => {

                        const instanciaUID_pantalaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                        const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                        const mensaje = "Eliminando el mensaje..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID_pantalaDeCarga,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const transaccion = {
                            zona: "administracion/configuracion/mensajesEnPortada/eliminarMensaje",
                            mensajeUID: String(mensajeUID)
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)


                        const instanciaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUID_pantalaDeCarga}"]`)
                        instanciaRenderizada?.remove()
                        if (respuestaServidor?.error) {
                            if (!instanciaRenderizada) { return }
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const instanciaMainRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaMainRenderizada) { }
                            const mensajeUID = respuestaServidor.mensajeUID
                            instanciaMainRenderizada.querySelector(`[mensajeUID="${mensajeUID}"]`)?.remove()
                            casaVitini.administracion.configuracion.mensajesEnPortada.portadaUI()
                        }
                    }
                },
                moverPosicion: async (o) => {
                    const nuevaPosicion = o.nuevaPosicion
                    const mensajeUIDActual = o.mensajeUIDActual
                    const posicionDelMensajeActual = document.querySelector(`[mensajeUID="${mensajeUIDActual}"]`)
                        .closest("[posicion]").getAttribute("posicion")

                    const instanciaUID_pantalaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const mensaje = "Cambiando de posición..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID_pantalaDeCarga,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const transaccion = {
                        zona: "administracion/configuracion/mensajesEnPortada/moverPosicion",
                        mensajeUID: String(mensajeUIDActual),
                        nuevaPosicion: String(nuevaPosicion)
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                    const instanciaRenderizada = document.querySelector(`[pantallaSuperpuesta=pantallaCargaSuperpuesta][instanciaUID="${instanciaUID_pantalaDeCarga}"]`)
                    instanciaRenderizada?.remove()
                    if (respuestaServidor?.error) {
                        if (!instanciaRenderizada) { return }
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const instanciaMainRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaMainRenderizada) { }
                        const mensajeSeleccionado = respuestaServidor.mensajeSeleccionado
                        const mensajeAfectado = respuestaServidor.mensajeAfectado














                        const numeroTotalMensajes = document.querySelectorAll("[posicion]").length

                        const contenedorSeleccionado = document.querySelector(`[posicion="${nuevaPosicion}"]`)
                        contenedorSeleccionado.innerHTML = null

                        const configuracionMensaje = {
                            mensajeUID: mensajeSeleccionado.mensajeUID,
                            mensaje: mensajeSeleccionado.mensaje,
                            estadoIDV: mensajeSeleccionado.estadoIDV,
                            posicion: nuevaPosicion,
                            numeroTotalMensajes: numeroTotalMensajes
                        }
                        const mensajeUI_seleccionado = casaVitini.administracion.configuracion.mensajesEnPortada.mensajeUI(configuracionMensaje)
                        contenedorSeleccionado.appendChild(mensajeUI_seleccionado)

                        const contenedorAfectado = document.querySelector(`[posicion="${posicionDelMensajeActual}"]`)
                        contenedorAfectado.innerHTML = null
                        const configuracionMensajeAfectado = {
                            mensajeUID: mensajeAfectado.mensajeUID,
                            mensaje: mensajeAfectado.mensaje,
                            estadoIDV: mensajeAfectado.estadoIDV,
                            posicion: posicionDelMensajeActual,
                            numeroTotalMensajes: numeroTotalMensajes
                        }
                        const mensajeUI_afectado = casaVitini.administracion.configuracion.mensajesEnPortada.mensajeUI(configuracionMensajeAfectado)
                        contenedorAfectado.appendChild(mensajeUI_afectado)
                    }

                },
                actualizarEstado: async (interruptor) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const seccionUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const mensajeUID = interruptor.mensajeUID
                    const estadoIDV = interruptor.estadoSeleccionado
                    const selectorListaEstadosInterruptor = seccionRenderizadaOrigen.querySelector(`[mensajeUID="${mensajeUID}"] [componente=selectorEstado]`)
                    const valorInicial = selectorListaEstadosInterruptor.getAttribute("valorInicial")
                    const estadoSoliciado = selectorListaEstadosInterruptor.querySelector(`option[value=${estadoIDV}]`)
                    let procesandoEstadoUI
                    if (estadoIDV === "activado") {
                        procesandoEstadoUI = "Activando..."
                    }
                    if (estadoIDV === "desactivado") {
                        procesandoEstadoUI = "Desactivando..."
                    }
                    estadoSoliciado.text = procesandoEstadoUI
                    const transacccion = {
                        zona: "administracion/configuracion/mensajesEnPortada/actualizarEstado",
                        mensajeUID: mensajeUID,
                        estadoIDV: estadoIDV
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transacccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${seccionUID}"]`)

                    if (!seccionRenderizada) { return }
                    selectorListaEstadosInterruptor.removeAttribute("style")
                    if (respuestaServidor?.error) {
                        let estadoInicialUI
                        if (estadoIDV === "activado") {
                            estadoInicialUI = "Activado"
                        }
                        if (estadoIDV === "desactivado") {
                            estadoInicialUI = "Desactivado"
                        }
                        estadoSoliciado.text = estadoInicialUI
                        selectorListaEstadosInterruptor.value = valorInicial
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        let estadoFinalUI
                        if (estadoIDV === "activado") {

                            estadoFinalUI = "Activado"
                        }
                        if (estadoIDV === "desactivado") {
                            estadoFinalUI = "Desactivado"
                        }
                        estadoSoliciado.text = estadoFinalUI
                        selectorListaEstadosInterruptor.setAttribute("valorInicial", estadoIDV)
                    }
                }
            },
            telefonoPublicoWhatsApp: {
                arranque: async function () {
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")


                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/telefonoPublicoWhatsApp/obtenerTelefono"
                    })
                    casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                    const ui_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!ui_renderizada) { return }
                    if (respuestaServidor?.error) {
                        marcoElastico.textContent = respuestaServidor?.error
                    }
                    if (respuestaServidor?.ok) {
                        const telefonoPublicoWhatsApp = respuestaServidor.ok.telefonoPublicoWhatsApp

                        const informacion = document.createElement("div")
                        informacion.classList.add(
                            "padding14"
                        )
                        informacion.textContent = "El número de teléfono público permite otorgar al cliente un icono de WhatsApp durante el proceso de reserva que le permite abrir en su teléfono un chat directo con CasaVitini. Sí se establece un teléfono público, aparecer un icono de WhatsApp al cliente durante el proceso de reserva. Si elimina el número de teléfono, el icono desaparecerá. Ingresa el número con el código internacional. Cuando escriba el código internacional, escribe solo los numero. Por ejemplo, Si el código es +505 escribe los números sin el signo más. Si el código es 00505 escríbelo sin los dos ceros de delante."
                        marcoElastico.appendChild(informacion)


                        const titulo = document.createElement("div")
                        titulo.classList.add(
                            "padding14"
                        )
                        titulo.textContent = "Número de telefono público WhatsApp"
                        marcoElastico.appendChild(titulo)

                        const campoNumero = document.createElement("input")
                        campoNumero.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                        campoNumero.placeholder = "Número de ejemplo 0000 000 00 00 00"
                        campoNumero.value = telefonoPublicoWhatsApp || ""
                        campoNumero.setAttribute("campo", "numero")
                        marcoElastico.appendChild(campoNumero)

                        const botonGuardar = document.createElement("div")
                        botonGuardar.style.width = "fit-content"
                        botonGuardar.classList.add(
                            "botonV1"
                        )
                        botonGuardar.textContent = "Actualizar numero de telefono público"
                        botonGuardar.addEventListener("click", () => {
                            this.actualizarTelefono(campoNumero.value)
                        })
                        marcoElastico.appendChild(botonGuardar)

                    }
                },
                actualizarTelefono: async (data) => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando número de telefono público..."

                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    })
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/telefonoPublicoWhatsApp/actualizarNumero",
                        telefonoPublicoWhatsApp: data
                    })
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const telefonoPublicoWhatsApp = respuestaServidor.telefonoPublicoWhatsApp
                        const campo = document.querySelector("[campo=numero]")
                        campo.value = telefonoPublicoWhatsApp || ""
                    }
                }
            },
            correoCopiaReservaPublica: {
                arranque: async function () {
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")


                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/correoCopiaReservaPublica/obtener"
                    })
                    casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                    const ui_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!ui_renderizada) { return }
                    if (respuestaServidor?.error) {
                        marcoElastico.textContent = respuestaServidor?.error
                    }
                    if (respuestaServidor?.ok) {
                        const correoCopiaReservaPublica = respuestaServidor.ok.correoCopiaReservaPublica

                        const informacion = document.createElement("div")
                        informacion.classList.add(
                            "padding14"
                        )
                        informacion.textContent = "Determina el correo al que enviar un aviso cuando un cliente realiza una reserva desde la zona pública. Cuando se realiza una reserva desde la zona pública, se envía una copia de la reserva al cliente por correo y si lo necesita también se puede enviar un aviso por mail a la dirección que determine aquí."
                        marcoElastico.appendChild(informacion)


                        const titulo = document.createElement("div")
                        titulo.classList.add(
                            "padding14"
                        )
                        titulo.textContent = "Correo al que enviar un aviso"
                        marcoElastico.appendChild(titulo)

                        const campoNumero = document.createElement("input")
                        campoNumero.classList.add("botonV1BlancoIzquierda_noSeleccionable")
                        campoNumero.placeholder = "ejemplo@ejemplo.com"
                        campoNumero.value = correoCopiaReservaPublica || ""
                        campoNumero.setAttribute("campo", "dato")
                        marcoElastico.appendChild(campoNumero)

                        const botonGuardar = document.createElement("div")
                        botonGuardar.style.width = "fit-content"
                        botonGuardar.classList.add(
                            "botonV1"
                        )
                        botonGuardar.textContent = "Actualizar"
                        botonGuardar.addEventListener("click", () => {
                            this.actualizar(campoNumero.value)
                        })
                        marcoElastico.appendChild(botonGuardar)

                    }
                },
                actualizar: async (data) => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando.."

                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    })
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/correoCopiaReservaPublica/actualizar",
                        correoCopiaReservaPublica: data
                    })

                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }

                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const correoCopiaReservaPublica = respuestaServidor.correoCopiaReservaPublica
                        const campo = document.querySelector("[campo=dato]")
                        campo.value = correoCopiaReservaPublica || ""
                    }
                }
            },
            mensajePrincipalEnReservaConfirmada: {
                arranque: async function () {
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    main.setAttribute("zonaCSS", "administracion/configuracion")
                    const marcoElastico = document.querySelector("[componente=marcoElastico]")


                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/mensajePrincipalEnReservaConfirmada/obtenerMensaje"
                    })
                    casaVitini.shell.controladoresUI.ocultarMenusVolatiles()
                    const ui_renderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!ui_renderizada) { return }
                    if (respuestaServidor?.error) {
                        marcoElastico.textContent = respuestaServidor?.error
                    }
                    if (respuestaServidor?.ok) {
                        const mensajePrincipalEnReservaConfirmada = respuestaServidor.ok.mensajePrincipalEnReservaConfirmada

                        const informacion = document.createElement("div")
                        informacion.classList.add(
                            "padding14"
                        )
                        informacion.textContent = "El mensaje principal en la reserva confirmada es el texto que le aparecerá al cliente cuando este realiza una reserva publica por su cuenta desde Casa Vitini. Este mensaje le da la información principal que el cliente necesita tras confirmar su reserva. Como, por ejemplo, como realizar el pago, si debe de hacer alguna operación de más o no. Si lo desea, puede dejar en blanco este campo, aunque es recomendable siempre asistir con información también en la parte final de la reserva."
                        marcoElastico.appendChild(informacion)


                        const titulo = document.createElement("div")
                        titulo.classList.add(
                            "padding14"
                        )
                        titulo.textContent = "Mensaje principal de información para la vista de reserva confirmada"
                        marcoElastico.appendChild(titulo)

                        const campoNumero = document.createElement("textarea")
                        campoNumero.classList.add("areaTexto")
                        campoNumero.placeholder = "Escriba un mensaje principal"
                        campoNumero.value = mensajePrincipalEnReservaConfirmada || ""
                        campoNumero.setAttribute("campo", "mensaje")
                        marcoElastico.appendChild(campoNumero)

                        const botonGuardar = document.createElement("div")
                        botonGuardar.style.width = "fit-content"
                        botonGuardar.classList.add(
                            "botonV1"
                        )
                        botonGuardar.textContent = "Actualizar mensaje"
                        botonGuardar.addEventListener("click", () => {
                            this.actualizarMensaje(campoNumero.value)
                        })
                        marcoElastico.appendChild(botonGuardar)

                    }
                },
                actualizarMensaje: async (data) => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando número de telefono público..."





                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    })
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/configuracion/mensajePrincipalEnReservaConfirmada/actualizarMensaje",
                        mensajePrincipalEnReservaConfirmada: data
                    })
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const mensajePrincipalEnReservaConfirmada = respuestaServidor.mensajePrincipalEnReservaConfirmada
                        const campo = document.querySelector("[campo=mensaje]")
                        campo.value = mensajePrincipalEnReservaConfirmada || ""
                    }
                }
            }
        },
        clientes: {
            arranque: async () => {
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const main = document.querySelector("main")
                const instanciaUID = main.getAttribute("instanciaUID")
                const parametroBuscar = granuladoURL.parametros.buscar
                const parametros = granuladoURL.parametros
                const rawArray = granuladoURL.rawArray

                if (Object.keys(parametros).length === 0) {

                    main.setAttribute("zonaCSS", "administracion/clientes/buscador")
                    casaVitini.administracion.clientes.buscador.buscadorUI()
                } else if (parametros.buscar) {


                    main.setAttribute("zonaCSS", "administracion/clientes/buscador")
                    casaVitini.administracion.clientes.buscador.buscadorUI()
                    if (!granuladoURL.parametros.buscar) {
                        return
                    }

                    const campoBuscador = document.querySelector("[componenteCampo=buscadorPorId]")
                    campoBuscador.value = decodeURI(parametroBuscar)

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "cliente_uid") {
                            nombreColumnaIDV = "clienteUID"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        } else if ((nombreParametroIDV)?.toLowerCase() === "buscar") {
                            valorParametroURL = decodeURI(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                    })

                    casaVitini.administracion.clientes.buscador.mostrarClientesResueltos(parametrosFormatoIDV)
                } else if (parametros.cliente && comandoInicial === "editar") {

                    main.setAttribute("zonaCSS", "administracion/clientes/editar")
                    await casaVitini.administracion.clientes.detallesCliente.editar.UI()
                } else if (parametros.cliente) {

                    const clienteUID = parametros.cliente
                    await casaVitini.administracion.clientes.detallesCliente.portada.UI(clienteUID)
                    main.setAttribute("zonaCSS", "administracion/clientes/detalles")

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "reserva_uid") {
                            nombreColumnaIDV = "reservaUID"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV

                    })
                    parametrosFormatoIDV.clienteUID = parametros.cliente
                    await casaVitini.administracion.clientes.detallesCliente.portada.mostrarReservasDelClienteResueltas(parametrosFormatoIDV)
                }
            },
            nuevo: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/clientes/nuevo")
                    const selectorBotonCrearCliente = document.querySelector("[componente=botonCrearCliente]")
                    selectorBotonCrearCliente.addEventListener("click", casaVitini.administracion.clientes.nuevo.crearCliente)
                },
                crearCliente: async () => {
                    const selectorCampos = document.querySelectorAll("[campo]")
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando nuevo cliente..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const transaccion = {
                        zona: "administracion/clientes/crearCliente"
                    }
                    selectorCampos.forEach((campo) => {
                        const nombreCampo = campo.getAttribute("campo")
                        const datosCampo = campo.value
                        transaccion[nombreCampo] = datosCampo
                    })
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const nuevoUIDCliente = respuestaServidor?.nuevoUIDCliente
                        const vista = `/administracion/clientes/cliente:${nuevoUIDCliente}`
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                }
            },
            buscador: {
                buscadorUI: () => {
                    const espacioClientes = document.querySelector("[componente=espacioClientes]")
                    const campoBuscador = document.createElement("input")
                    campoBuscador.classList.add("campoBuscadorClientes")
                    campoBuscador.setAttribute("componente", "zonaNavegacionPaginadaClientes")
                    campoBuscador.setAttribute("componenteCampo", "buscadorPorId")
                    campoBuscador.setAttribute("placeholder", "Busque un cliente por nombre, por cualquier dato.")
                    campoBuscador.addEventListener("input", casaVitini.administracion.clientes.buscador.buscadorClientesPorCampo)
                    espacioClientes.appendChild(campoBuscador)



                },
                buscadorClientesPorCampo: async (cliente) => {

                    const instanciaUID = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")
                    const campo = document.querySelector("[componente=zonaNavegacionPaginadaClientes]")
                    const terminoBusqueda = cliente.target.value
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    document.querySelector("[areaGrid=gridClientes]")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[contenedor=filtrosOrden]")?.remove()

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.textContent = "Buscando..."

                    campo.parentNode.insertBefore(estadoBusquedaUI, campo.nextSibling);


                    const granuladorURL = casaVitini.utilidades.granuladorURL()
                    if (granuladorURL.parametros.buscar) {
                        history.replaceState(null, null, granuladorURL.directoriosFusion);
                    }
                    const campoVacio = cliente.target.value.length
                    if (campoVacio === 0) {
                        clearTimeout(casaVitini.componentes.temporizador);
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        document.querySelector("[areaGrid=gridClientes]")?.remove()
                        const vistaActual = document.querySelector("[componente=uiNavegacion]").getAttribute("vistaActual")
                        const resetUrl = "/administracion/clientes"
                        const titulo = "casavitini"
                        const estado = {
                            zona: vistaActual,
                            estadoInternoZona: "estado",
                            tipoCambio: "total"
                        }
                        window.history.replaceState(estado, titulo, resetUrl);
                        return
                    }
                    clearTimeout(casaVitini.componentes.temporizador);
                    casaVitini.componentes.temporizador = setTimeout(async () => {
                        const transaccion = {
                            zona: "administracion/clientes/buscar",
                            pagina: 1,
                            buscar: terminoBusqueda,
                            origen: "botonMostrarClientes",
                            tipoConstruccionGrid: "total",
                            granuladoURL: granuladorURL,
                            instanciaUID: instanciaUID
                        }


                        casaVitini.administracion.clientes.buscador.mostrarClientesResueltos(transaccion)
                    }, 1500);
                },
                mostrarClientesResueltos: async function (transaccion) {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacioComportamiento]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)
                    delete transaccion.instanciaUID
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const paginaTipo = transaccion.paginaTipo
                    const selectorAlmacen = document.querySelector("[areaGrid=gridClientes]")?.getAttribute("almacen") || "{}"
                    const almacen = JSON.parse(selectorAlmacen)
                    const busquedaInicial = transaccion.buscar || almacen?.buscar

                    let nombreColumnaURL
                    const nombreColumna = transaccion.nombreColumna
                    if ((nombreColumna)?.toLowerCase() === "clienteuid") {
                        nombreColumnaURL = "cliente_uid"
                    } else if (nombreColumna) {
                        nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                    }

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/clientes/buscar",
                        buscar: busquedaInicial,
                        nombreColumna: transaccion.nombreColumna,
                        sentidoColumna: transaccion.sentidoColumna,
                        pagina: Number(transaccion?.pagina || 1)
                    })


                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }

                    if (respuestaServidor?.error) {

                        document.querySelector("[componente=estadoBusqueda]").textContent = respuestaServidor?.error
                        return
                    }
                    if (respuestaServidor.totalClientes === 0) {

                        document.querySelector("[componente=estadoBusqueda]").textContent = "No se han encontrado clientes"
                        return
                    }
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    const clientes = respuestaServidor.clientes
                    const buscar = respuestaServidor.buscar
                    const paginasTotales = respuestaServidor.paginasTotales
                    const pagina = respuestaServidor.pagina
                    const sentidoColumna = respuestaServidor.sentidoColumna

                    const columnasGrid = [
                        {
                            columnaUI: "UID",
                            columnaIDV: "clienteUID",
                        },
                        {
                            columnaUI: "Nombre",
                            columnaIDV: "nombre",
                        },
                        {
                            columnaUI: "Primer apellido",
                            columnaIDV: "primerApellido",
                        },
                        {
                            columnaUI: "Segundo Apellido",
                            columnaIDV: "segundoApellido",
                        },
                        {
                            columnaUI: "Pasaporte",
                            columnaIDV: "pasaporte",
                        },
                        {
                            columnaUI: "Teléfono",
                            columnaIDV: "telefono",
                        },
                        {
                            columnaUI: "Mail",
                            columnaIDV: "mail",
                        },
                    ]
                    const parametrosFinales = {
                        buscar: buscar
                    }

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL;
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal
                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.clientes.buscador.mostrarClientesResueltos",
                        configuracionGrid: {
                            filas: clientes,
                            almacen: {
                                buscar: buscar,
                            },
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[componente=espacioClientes]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridClientes",
                            mascaraURL: {
                                mascara: "/administracion/clientes/cliente:",
                                parametro: "clienteUID"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })

                    const titulo = "Casa Vitini"
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "zonaNavegacionPaginadaClientes",
                        funcionPersonalizada: "administracion.clientes.buscador.mostrarClientesResueltos",
                        args: transaccion
                    }

                    if (origen === "url" || origen === "botonMostrarClientes") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }
                },
            },
            detallesCliente: {
                portada: {
                    UI: async (cliente) => {

                        const transaccion = {
                            zona: "administracion/clientes/detallesCliente",
                            clienteUID: cliente
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ningún cliente con ese identificador.",
                                descripcion: "Revisa el identificador del cliente porque este no existe.Quizás borraste el cliente que buscas.Quizás te equivocaste al escribir el identificador del cliente."
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                        if (respuestaServidor?.ok) {

                            const detallesCliente = respuestaServidor?.ok
                            const clienteUID = detallesCliente.clienteUID
                            const nombre = detallesCliente.nombre
                            const primerApellido = detallesCliente?.primerApellido
                            const segundoApellido = detallesCliente?.segundoApellido
                            const pasaporte = detallesCliente.pasaporte
                            const telefono = detallesCliente?.telefono
                            const mail = detallesCliente?.mail
                            const notas = detallesCliente?.notas

                            let selectorEspacioClientes = document.querySelector("[componente=espacioClientes]")

                            let deatallesClienteUI = document.createElement("div")
                            deatallesClienteUI.classList.add("detallesClienteUIBotones")

                            let boton = document.createElement("a")
                            boton.classList.add(
                                "detallesClienteBoton",
                                "areaSinDecoracionPredeterminada"
                            )
                            boton.setAttribute("boton", "editar")
                            boton.textContent = "Editar datos"
                            boton.href = `/administracion/clientes/cliente:${clienteUID}/editar`
                            boton.setAttribute("vista", `/administracion/clientes/cliente:${clienteUID}/editar`)
                            boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                            deatallesClienteUI.appendChild(boton)
                            selectorEspacioClientes.appendChild(deatallesClienteUI)


                            deatallesClienteUI = document.createElement("div")
                            deatallesClienteUI.classList.add("detallesClienteUI")
                            deatallesClienteUI.setAttribute("clienteUID", clienteUID)
                            deatallesClienteUI.setAttribute("componente", "clienteUID" + clienteUID)
                            let bloqueHorizontal = document.createElement("div")
                            bloqueHorizontal.classList.add("detallesClienteBloqueHorizontal")
                            let bloqueVertical = document.createElement("div")
                            bloqueVertical.classList.add("detallesClienteBloqueVertical")

                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            const nombreTitulo = document.createElement("p")
                            nombreTitulo.classList.add("detallesClienteTituloDato")
                            nombreTitulo.textContent = "Nombre"
                            bloqueDato.appendChild(nombreTitulo)
                            let nombreDato = document.createElement("p")
                            nombreDato.classList.add("detallesClienteDatoCampo")
                            nombreDato.setAttribute("componenteDetalle", "nombre")
                            nombreDato.textContent = nombre
                            bloqueDato.appendChild(nombreDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            const primerApellidoTitulo = document.createElement("p")
                            primerApellidoTitulo.classList.add("detallesClienteTituloDato")
                            primerApellidoTitulo.textContent = "Primer apellido"
                            bloqueDato.appendChild(primerApellidoTitulo)
                            const primerApellidoDato = document.createElement("p")
                            primerApellidoDato.classList.add("detallesClienteDatoCampo")
                            primerApellidoDato.textContent = primerApellido
                            primerApellidoDato.setAttribute("componenteDetalle", "primerApellido")
                            bloqueDato.appendChild(primerApellidoDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            const segundoApellidoTitulo = document.createElement("p")
                            segundoApellidoTitulo.classList.add("detallesClienteTituloDato")
                            segundoApellidoTitulo.textContent = "Segundo apellido"
                            bloqueDato.appendChild(segundoApellidoTitulo)
                            const segundoApellidoDato = document.createElement("p")
                            segundoApellidoDato.classList.add("detallesClienteDatoCampo")
                            segundoApellidoDato.textContent = segundoApellido
                            segundoApellidoDato.setAttribute("componenteDetalle", "segundoApellido")
                            bloqueDato.appendChild(segundoApellidoDato)
                            bloqueHorizontal.appendChild(bloqueVertical)
                            bloqueVertical = document.createElement("div")
                            bloqueVertical.classList.add("detallesClienteBloqueVertical")

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            const pasaporteTitulo = document.createElement("p")
                            pasaporteTitulo.classList.add("detallesClienteTituloDato")
                            pasaporteTitulo.textContent = "Pasaporte"

                            bloqueDato.appendChild(pasaporteTitulo)
                            const pasaporteDato = document.createElement("p")
                            pasaporteDato.classList.add("detallesClienteDatoCampo")
                            pasaporteDato.setAttribute("componenteDetalle", "pasaporte")
                            pasaporteDato.textContent = pasaporte
                            bloqueDato.appendChild(pasaporteDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            if (telefono) {
                                bloqueVertical.appendChild(bloqueDato)
                            }

                            const telefonoTitulo = document.createElement("p")
                            telefonoTitulo.classList.add("detallesClienteTituloDato")
                            telefonoTitulo.textContent = "Teléfono"
                            bloqueDato.appendChild(telefonoTitulo)

                            const telefonoDato = document.createElement("p")
                            telefonoDato.classList.add("detallesClienteDatoCampo")
                            telefonoDato.setAttribute("componenteDetalle", "telefono")
                            telefonoDato.textContent = telefono
                            bloqueDato.appendChild(telefonoDato)


                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            if (mail) {
                                bloqueVertical.appendChild(bloqueDato)

                            } const correoElectronicoTitulo = document.createElement("p")
                            correoElectronicoTitulo.classList.add("detallesClienteTituloDato")
                            correoElectronicoTitulo.textContent = "Correo electrónico"
                            bloqueDato.appendChild(correoElectronicoTitulo)

                            const correoElectronicoDato = document.createElement("p")
                            correoElectronicoDato.classList.add("detallesClienteDatoCampo")
                            correoElectronicoDato.textContent = mail
                            correoElectronicoDato.setAttribute("componenteDetalle", "mail")
                            bloqueDato.appendChild(correoElectronicoDato)

                            bloqueHorizontal.appendChild(bloqueVertical)
                            deatallesClienteUI.appendChild(bloqueHorizontal)
                            bloqueHorizontal = document.createElement("div")
                            bloqueHorizontal.classList.add("detallesClienteBloqueHorizontal")

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueHorizontal.appendChild(bloqueDato)

                            const notasTitulo = document.createElement("p")
                            notasTitulo.classList.add("detallesClienteTituloDato")
                            notasTitulo.textContent = "Notas"
                            bloqueDato.appendChild(notasTitulo)
                            const notasDato = document.createElement("p")
                            notasDato.classList.add("detallesClienteDatoCampo")
                            notasDato.setAttribute("componenteDetalle", "notas")
                            notasDato.textContent = notas
                            bloqueDato.appendChild(notasDato)
                            if (notas) {
                                deatallesClienteUI.appendChild(bloqueHorizontal)

                            }
                            selectorEspacioClientes.appendChild(deatallesClienteUI)
                            const contenedorResultados = document.createElement("div")
                            contenedorResultados.setAttribute("contenedor", "reservasDelCliente")
                            contenedorResultados.classList.add(
                                "flexVertical"
                            )
                            selectorEspacioClientes.appendChild(contenedorResultados)
                        }
                    },
                    mostrarReservasDelClienteResueltas: async function (transaccion) {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const selectorEspacio = document.querySelector("[componente=espacioComportamiento]")
                        selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)
                        delete transaccion.instanciaUID
                        const origen = transaccion.origen
                        delete transaccion.origen
                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                        delete transaccion.granuladoURL

                        const paginaTipo = transaccion.paginaTipo
                        let nombreColumnaURL
                        const nombreColumna = transaccion.nombreColumna
                        transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                        if ((nombreColumna)?.toLowerCase() === "reservauid") {
                            nombreColumnaURL = "reserva_uid"
                        } else if (nombreColumna) {
                            nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                        }
                        const selectorAlmacen = document.querySelector("[areaGrid=grisReservasDelCliente]")?.getAttribute("almacen") || "{}"
                        const almacen = JSON.parse(selectorAlmacen)
                        const clienteUID = transaccion.clienteUID || almacen?.clienteUID

                        const respuestaServidor = await casaVitini.shell.servidor({
                            zona: "administracion/clientes/reservasDelCliente",
                            pagina: transaccion.pagina,
                            nombreColumna: nombreColumna,
                            sentidoColumna: transaccion.sentidoColumna,
                            clienteUID: String(clienteUID),
                        })

                        const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                        if (!instanciaRenderizada) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.totalReservas === 0) {
                            const espacioClientes = document.querySelector("[componente=espacioClientes]")
                            document.querySelector("[gridUID=gridClientes]")?.remove()
                            document.querySelector("[componente=estadoBusqueda]")?.remove()
                            const estadoBusquedaUI = document.createElement("div")
                            estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                            estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                            estadoBusquedaUI.textContent = "Este cliente no tiene nínguna reserva asociada a el"
                            espacioClientes.appendChild(estadoBusquedaUI)
                            return

                        }
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        const reservasDelCliente = respuestaServidor.reservas
                        const paginasTotales = respuestaServidor.paginasTotales
                        const pagina = respuestaServidor.pagina
                        const sentidoColumna = respuestaServidor.sentidoColumna
                        const columnasGrid = [
                            {
                                columnaUI: "Como",
                                columnaIDV: "como",
                            },
                            {
                                columnaUI: "Reserva",
                                columnaIDV: "reservaUID",
                            },
                            {
                                columnaUI: "Fecha de entrada",
                                columnaIDV: "fechaEntrada",
                            },
                            {
                                columnaUI: "Fecha de salida",
                                columnaIDV: "fechaSalida",
                            }
                        ]
                        const parametrosFinales = {}

                        if (nombreColumna) {
                            parametrosFinales.cliente = clienteUID
                            parametrosFinales.nombre_columna = nombreColumnaURL
                            parametrosFinales.sentido_columna = sentidoColumna
                        }
                        if (respuestaServidor?.pagina > 1 && paginasTotales > 1) {
                            parametrosFinales.pagina = pagina
                        }
                        const estructuraParametrosFinales = []
                        for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                            const estructura = `${parametroFinal}:${valorFinal}`
                            estructuraParametrosFinales.push(estructura)
                        }
                        let parametrosURLFInal = ""
                        if (estructuraParametrosFinales.length > 0) {
                            parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                        }

                        const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                        casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                            metodoSalida: "administracion.clientes.detallesCliente.portada.mostrarReservasDelClienteResueltas",
                            configuracionGrid: {
                                filas: reservasDelCliente,
                                almacen: {
                                    clienteUID: clienteUID,
                                },
                                sentidoColumna: sentidoColumna,
                                nombreColumna: nombreColumna,
                                pagina: pagina,
                                destino: "[contenedor=reservasDelCliente]",
                                columnasGrid: columnasGrid,
                                gridUID: "grisReservasDelCliente",
                                mascaraURL: {
                                    mascara: "/administracion/reservas/reserva:",
                                    parametro: "reservaUID"
                                },
                            },
                            configuracionPaginador: {
                                paginasTotales: paginasTotales,
                                granuladoURL: {
                                    parametros: parametrosFinales,
                                    directoriosFusion: granuladoURL.directoriosFusion
                                },
                            }
                        })

                        const titulo = "Administrar reservas"
                        const estado = {
                            zona: constructorURLFinal,
                            EstadoInternoZona: "estado",
                            tipoCambio: "parcial",
                            componenteExistente: "clienteUID" + clienteUID,
                            funcionPersonalizada: "administracion.clientes.detallesCliente.portada.mostrarReservasDelClienteResueltas",
                            args: transaccion
                        }
                        if (origen === "url" || origen === "botonMostrarClientes") {
                            window.history.replaceState(estado, titulo, constructorURLFinal);
                        } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                            window.history.pushState(estado, titulo, constructorURLFinal);
                        } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                            window.history.replaceState(estado, titulo, constructorURLFinal);
                        }
                    },
                    editar: () => {
                        let camposLectura = document.querySelectorAll("[componenteDetalle]")
                        camposLectura.forEach((campo) => {
                            let datoCampo = campo.textContent
                            let idCampo = campo.getAttribute("componenteDetalle")
                            campo.style.display = "none"
                            let tipoElemento
                            if (idCampo === "notas") {
                                tipoElemento = "textarea"
                            } else {
                                tipoElemento = "input"
                            }
                            let campoEditable = document.createElement(tipoElemento)
                            campoEditable.classList.add("detallesClienteCampoEditable")
                            campoEditable.value = datoCampo
                            campoEditable.setAttribute("componenteEditable", idCampo)
                            let selectorContenedor = campo.parentNode
                            selectorContenedor.appendChild(campoEditable)
                        })
                        document.querySelector("[boton=editar]").classList.add("estadoInicialInvisible")
                        document.querySelector("[boton=dejarDeEditar]").classList.remove("estadoInicialInvisible")
                        document.querySelector("[boton=eliminarCliente]").classList.remove("estadoInicialInvisible")
                        document.querySelector("[boton=guardarCambios]").classList.remove("estadoInicialInvisible")
                    },
                    dejarDeEditar: () => {
                        let camposEditables = document.querySelectorAll("[componenteEditable]")
                        camposEditables.forEach((campo) => {
                            campo.remove()
                        })
                        let camposLectura = document.querySelectorAll("[componenteDetalle]")
                        camposLectura.forEach((campo) => {
                            campo.removeAttribute("style")
                        })
                        document.querySelector("[boton=editar]").classList.remove("estadoInicialInvisible")
                        document.querySelector("[boton=dejarDeEditar]").classList.add("estadoInicialInvisible")
                        document.querySelector("[boton=guardarCambios]").classList.add("estadoInicialInvisible")
                        document.querySelector("[boton=guardarCambios]").classList.add("estadoInicialInvisible")
                    },
                    guardarCambios: async () => {
                        const campos = document.querySelectorAll("[componenteDetalle]")
                        const clienteUID = document.querySelector("[clienteUID]").getAttribute("clienteUID")
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                            instanciaUID: instanciaUID,
                            mensaje: "Actualizando datos del cliente..."
                        })

                        const datosParaActualizar = {
                            zona: "administracion/clientes/modificarCliente",
                            clienteUID: String(clienteUID)
                        }
                        campos.forEach((campo) => {
                            const campoDato = campo.value
                            const campoNombre = campo.getAttribute("componenteDetalle")
                            datosParaActualizar[campoNombre] = campoDato

                        })

                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()

                        if (respuestaServidor?.error) {
                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.shell.navegacion.controladorVista({
                                vista: "/administracion/clientes/" + clienteUID,
                                tipoOrigen: "menuNavegador"
                            })
                        }
                    },
                    eliminarCliente: {
                        UI: () => {

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = "Eliminar irreversiblemente al cliente"
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = "Eliminar irreversiblemente a un cliente, elimina la información de este cliente en su ficha y en las reservas donde estuvo.Es decir, desaparecerá de las reservas donde estuvo este cliente."

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = "Comfirmar la eliminacion del cliente"
                            botonAceptar.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.portada.eliminarCliente.confirmar)
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar la eliminacion"

                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        confirmar: async () => {
                            const campoEditable = document.querySelectorAll("[componenteEditable]")
                            const clienteUID = document.querySelector("[clienteUID]").getAttribute("clienteUID")
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const metadatosPantallaCarga = {
                                mensaje: "Esperando al servidor...",
                                instanciaUID: instanciaUID,
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                            const selectorPantallaDeCargaSuperpuestaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            const datosParaActualizar = {
                                zona: "administracion/clientes/eliminar",
                                clienteUID: String(clienteUID)
                            }
                            campoEditable.forEach((campo) => {
                                const campoID = campo.getAttribute("componenteEditable")
                                const campoDato = campo.value
                                const campoEditable = document.querySelector(`[componenteEditable=${campoID}]`)
                                const campoLectura = document.querySelector(`[componenteDetalle=${campoID}]`)
                                if (campoEditable.value !== campoLectura.textContent) {
                                    datosParaActualizar[campoID] = campoDato
                                }
                            })
                            const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                            selectorPantallaDeCargaSuperpuestaRenderizada?.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                await casaVitini.shell.navegacion.controladorVista({
                                    vista: "administracion/clientes",
                                    tipoOrigen: "menuNavegador"
                                })
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.ok)
                            }
                        },
                    }
                },
                editar: {
                    UI: async () => {
                        const granuladoURL = casaVitini.utilidades.granuladorURL()
                        const parametros = granuladoURL.parametros
                        const clienteUID = parametros.cliente

                        const transaccion = {
                            zona: "administracion/clientes/detallesCliente",
                            clienteUID: clienteUID
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ningun cliente con ese identificador",
                                descripcion: "Revisa el identificador del cliente porque este no existe.Quizás borraste el cliente que buscas.Quizás te equivocaste al escribir el identificador del cliente."
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesCliente = respuestaServidor?.ok
                            const clienteUID = detallesCliente.clienteUID
                            const nombre = detallesCliente.nombre
                            const primerApellido = detallesCliente?.primerApellido
                            const segundoApellido = detallesCliente?.segundoApellido
                            const pasaporte = detallesCliente.pasaporte
                            const telefono = detallesCliente?.telefono
                            const mail = detallesCliente?.mail
                            const notas = detallesCliente?.notas

                            let selectorEspacioClientes = document.querySelector("[componente=espacioClientes]")

                            let deatallesClienteUI = document.createElement("div")
                            deatallesClienteUI.classList.add("detallesClienteUIBotones")

                            selectorEspacioClientes.appendChild(deatallesClienteUI)
                            deatallesClienteUI = document.createElement("div")
                            deatallesClienteUI.classList.add("detallesClienteUI")
                            deatallesClienteUI.setAttribute("clienteUID", clienteUID)


                            let bloqueHorizontal = document.createElement("div")
                            bloqueHorizontal.classList.add("detallesClienteBloqueHorizontal")
                            let bloqueVertical = document.createElement("div")
                            bloqueVertical.classList.add("detallesClienteBloqueVertical")

                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let nombreTitulo = document.createElement("p")
                            nombreTitulo.classList.add("detallesClienteTituloDato")
                            nombreTitulo.textContent = "Nombre"
                            bloqueDato.appendChild(nombreTitulo)
                            let nombreDato = document.createElement("input")
                            nombreDato.classList.add(
                                "campoTexto"
                            )
                            nombreDato.setAttribute("componenteDetalle", "nombre")
                            nombreDato.value = nombre
                            bloqueDato.appendChild(nombreDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let primerApellidoTitulo = document.createElement("p")
                            primerApellidoTitulo.classList.add("detallesClienteTituloDato")
                            primerApellidoTitulo.textContent = "Primer apellido"
                            bloqueDato.appendChild(primerApellidoTitulo)
                            let primerApellidoDato = document.createElement("input")
                            primerApellidoDato.classList.add(
                                "campoTexto"

                            )
                            primerApellidoDato.value = primerApellido
                            primerApellidoDato.setAttribute("componenteDetalle", "primerApellido")
                            bloqueDato.appendChild(primerApellidoDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let segundoApellidoTitulo = document.createElement("p")
                            segundoApellidoTitulo.classList.add("detallesClienteTituloDato")
                            segundoApellidoTitulo.textContent = "Segundo apellido"
                            bloqueDato.appendChild(segundoApellidoTitulo)
                            let segundoApellidoDato = document.createElement("input")
                            segundoApellidoDato.classList.add(
                                "campoTexto"

                            )
                            segundoApellidoDato.value = segundoApellido
                            segundoApellidoDato.setAttribute("componenteDetalle", "segundoApellido")
                            bloqueDato.appendChild(segundoApellidoDato)
                            bloqueHorizontal.appendChild(bloqueVertical)
                            bloqueVertical = document.createElement("div")
                            bloqueVertical.classList.add("detallesClienteBloqueVertical")

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let pasaporteTitulo = document.createElement("p")
                            pasaporteTitulo.classList.add("detallesClienteTituloDato")
                            pasaporteTitulo.textContent = "Pasaporte"
                            bloqueDato.appendChild(pasaporteTitulo)
                            let pasaporteDato = document.createElement("input")
                            pasaporteDato.classList.add(
                                "campoTexto"

                            )
                            pasaporteDato.setAttribute("componenteDetalle", "pasaporte")
                            pasaporteDato.value = pasaporte
                            bloqueDato.appendChild(pasaporteDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let telefonoTitulo = document.createElement("p")
                            telefonoTitulo.classList.add("detallesClienteTituloDato")
                            telefonoTitulo.textContent = "Teléfono"
                            bloqueDato.appendChild(telefonoTitulo)
                            let telefonoDato = document.createElement("input")
                            telefonoDato.classList.add(
                                "campoTexto"

                            )
                            telefonoDato.setAttribute("componenteDetalle", "telefono")
                            telefonoDato.value = telefono
                            bloqueDato.appendChild(telefonoDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueVertical.appendChild(bloqueDato)
                            let correoElectronicoTitulo = document.createElement("p")
                            correoElectronicoTitulo.classList.add("detallesClienteTituloDato")
                            correoElectronicoTitulo.textContent = "Correo electrónico"
                            bloqueDato.appendChild(correoElectronicoTitulo)
                            let correoElectronicoDato = document.createElement("input")
                            correoElectronicoDato.classList.add(
                                "campoTexto"

                            )
                            correoElectronicoDato.value = mail
                            correoElectronicoDato.setAttribute("componenteDetalle", "correoElectronico")
                            bloqueDato.appendChild(correoElectronicoDato)
                            bloqueHorizontal.appendChild(bloqueVertical)
                            deatallesClienteUI.appendChild(bloqueHorizontal)
                            bloqueHorizontal = document.createElement("div")
                            bloqueHorizontal.classList.add("detallesClienteBloqueHorizontalNotas")

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("detallesClienteBloqueDato")
                            bloqueHorizontal.appendChild(bloqueDato)
                            let notasTitulo = document.createElement("p")
                            notasTitulo.classList.add("detallesClienteTituloDato")
                            notasTitulo.textContent = "Notas"
                            bloqueDato.appendChild(notasTitulo)
                            let notasDato = document.createElement("textarea")
                            notasDato.classList.add(
                                "campoTexto"

                            )
                            notasDato.setAttribute("componenteDetalle", "notas")
                            notasDato.rows = "4"
                            notasDato.value = notas
                            bloqueDato.appendChild(notasDato)
                            deatallesClienteUI.appendChild(bloqueHorizontal)

                            selectorEspacioClientes.appendChild(deatallesClienteUI)

                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add(
                                "flexVertical",
                                "gap6",
                                "padding12"
                            )
                            deatallesClienteUI.appendChild(contenedorBotones)


                            let boton = document.createElement("div")
                            boton.classList.add("detallesClienteBoton")
                            boton.setAttribute("boton", "guardarCambios")
                            boton.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.portada.guardarCambios)
                            boton.textContent = "Guardar cambios"
                            contenedorBotones.appendChild(boton)

                            boton = document.createElement("div")
                            boton.classList.add("detallesClienteBoton")
                            boton.setAttribute("boton", "eliminarCliente")
                            boton.addEventListener("click", casaVitini.administracion.clientes.detallesCliente.portada.eliminarCliente.UI)
                            boton.textContent = "Eliminar cliente"
                            contenedorBotones.appendChild(boton)


                        }
                    },
                },

            },
            fusion: {
                portada: {
                    arranque: () => {
                        const selectorCampos = document.querySelectorAll("[campo]")
                        selectorCampos.forEach(campo => {
                            campo.addEventListener("input", (e) => {
                                const terminoBusqueda = e.target.value
                                const contenedor = e.target.getAttribute("campo")
                                casaVitini.administracion.clientes.fusion.listaResultadosUI({
                                    terminoBusqueda,
                                    contenedor
                                })
                            })
                        })
                        const botonFusion = document.querySelector("[boton=fusion]")
                        botonFusion.addEventListener("click", () => {

                            const clienteOrigen = document.querySelector("[contenedor=origen]").querySelector("[estado=seleccionado]")
                            const clienteDestino = document.querySelector("[contenedor=destino]").querySelector("[estado=seleccionado]")

                            if (!clienteOrigen) {
                                const m = "Por favor, primero selecciona el cliente de ORIGEN. Para ello, busca en el campo de búsqueda del campo cliente ORIGEN y selecciona el cliente ORIGEN."
                                casaVitini.ui.componentes.advertenciaInmersiva(m)
                            } else if (!clienteDestino) {
                                const m = "Por favor, primero selecciona el cliente de DESTINO; para ello, busca en el campo de búsqueda del campo cliente DESTINO y selecciona el cliente DESTINO."
                                casaVitini.ui.componentes.advertenciaInmersiva(m)
                            } else {
                                casaVitini.administracion.clientes.fusion.confirmarFusion.UI()
                            }
                        })
                    }
                },
                listaResultadosUI: async function (data) {

                    const contenedor = data.contenedor
                    const terminoBusqueda = data.terminoBusqueda
                    const selectorContenedor = document.querySelector(`[contenedor="${contenedor}"]`)
                    const selectorContenedorListaResultados = selectorContenedor.querySelector(`[componente=listaResultados]`)

                    const contenedorListaResultdos = document.createElement("div")
                    contenedorListaResultdos.setAttribute("componente", "listaResultados")
                    if (!selectorContenedorListaResultados) {
                        selectorContenedor.appendChild(contenedorListaResultdos)
                    }
                    const selectorContenedorListaResultados_renderizada = selectorContenedor.querySelector(`[componente=listaResultados]`)
                    selectorContenedorListaResultados_renderizada.innerHTML = null

                    const campoVacio = terminoBusqueda.length
                    if (campoVacio === 0) {
                        clearTimeout(casaVitini.componentes.temporizador);
                        selectorContenedorListaResultados_renderizada?.remove()
                        return
                    }

                    const info = document.createElement("p")
                    info.classList.add(
                        "infoBuscando",
                        "padding6"
                    )
                    info.setAttribute("componente", "info")
                    info.textContent = "Buscando..."

                    const selectorInfoRenderizada = selectorContenedor.querySelector("[componente=info]")
                    if (!selectorInfoRenderizada) {
                        selectorContenedorListaResultados_renderizada.appendChild(info)
                    }

                    clearTimeout(casaVitini.componentes.temporizador);
                    casaVitini.administracion.clientes.fusion.contenedorEventoTemporal[contenedor] = setTimeout(() => {
                        const instanciaUIDBuscador = casaVitini.utilidades.codigoFechaInstancia()
                        selectorContenedorListaResultados_renderizada.setAttribute("instanciaUIDBuscador", instanciaUIDBuscador)
                        this.transactor({
                            terminoBusqueda,
                            instanciaUIDBuscador,
                        })
                    }, 1500);
                },
                transactor: async function (data) {
                    const terminoBusqueda = data.terminoBusqueda
                    const instanciaUIDBuscador = data.instanciaUIDBuscador

                    const transaccion = {
                        zona: "administracion/clientes/buscar",
                        tipoBusqueda: "rapido",
                        buscar: terminoBusqueda
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                    const listaBuscadorRenderizada = document.querySelector(`[instanciaUIDBuscador="${instanciaUIDBuscador}"]`)
                    if (!listaBuscadorRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        return listaBuscadorRenderizada.querySelector("[componente=info]").innerHTML = respuestaServidor?.error
                    }

                    const resultadosClientes = respuestaServidor?.clientes
                    if (resultadosClientes.length === 0) {
                        return listaBuscadorRenderizada.querySelector("[componente=info]").innerHTML = "Nada encontrado"
                    }
                    listaBuscadorRenderizada.innerHTML = null
                    resultadosClientes.forEach((clienteEncontrado) => {
                        const clienteUID = clienteEncontrado.clienteUID
                        const nombre = clienteEncontrado.nombre
                        const primerApellido = clienteEncontrado.primerApellido
                        const segundoApellido = clienteEncontrado.segundoApellido
                        const pasaporte = clienteEncontrado.pasaporte
                        const bloqueCliente = document.createElement("div")
                        bloqueCliente.classList.add(
                            "administracionReservaDetallesBuscadorRapidoBloqueCliente",
                            "borderRadius12"
                        )
                        bloqueCliente.setAttribute("clienteUID", clienteUID)
                        bloqueCliente.setAttribute("componente", "elementoResultadosBuscadorRapido")
                        bloqueCliente.addEventListener("click", (e) => {

                            const selectorResultadosContenedor = e.target.closest("[componente=listaResultados]").querySelectorAll("[componente=elementoResultadosBuscadorRapido]")
                            selectorResultadosContenedor.forEach((resultado) => {
                                resultado.removeAttribute("estado")
                                resultado.removeAttribute("style")
                            })
                            const resultadoSeleccionado = e.target
                            resultadoSeleccionado.setAttribute("estado", "seleccionado")
                            resultadoSeleccionado.style.background = "blue"
                            resultadoSeleccionado.style.color = "white"
                        })

                        const filaNombre = document.createElement("p")
                        filaNombre.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaNombre")
                        filaNombre.setAttribute("dato", "nombre")
                        filaNombre.textContent = `${nombre} ${primerApellido} ${segundoApellido}`
                        bloqueCliente.appendChild(filaNombre)
                        const filaPasaporte = document.createElement("p")
                        filaPasaporte.classList.add("administracionReservaDetallesBuscadorRapidoBloqueClienteFilaPasaporte")
                        filaPasaporte.setAttribute("dato", "pasaporte")
                        filaPasaporte.textContent = pasaporte
                        bloqueCliente.appendChild(filaPasaporte)
                        listaBuscadorRenderizada.appendChild(bloqueCliente)
                    })
                },
                contenedorEventoTemporal: {},
                confirmarFusion: {
                    UI: function () {
                        const clienteOrigen = document.querySelector("[contenedor=origen]").querySelector("[estado=seleccionado]")
                        const clienteDestino = document.querySelector("[contenedor=destino]").querySelector("[estado=seleccionado]")

                        const nombreOrigen = clienteOrigen.querySelector("[dato=nombre]").textContent
                        const pasaporteOrigen = clienteOrigen.querySelector("[dato=pasaporte]").textContent
                        const uidOrigen = clienteOrigen.getAttribute("clienteUID")

                        const nombreDestino = clienteDestino.querySelector("[dato=nombre]").textContent
                        const pasaporteDestino = clienteDestino.querySelector("[dato=pasaporte]").textContent
                        const uidDestino = clienteDestino.getAttribute("clienteUID")

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                        const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = "Operacion de fusión irreversible"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = `Se va a fusionar como cliente ORIGEN a ${nombreOrigen} (${pasaporteOrigen}) con el cliente DESTINO ${nombreDestino} (${pasaporteDestino}). Esta operación es irreversible. El cliente ORIGEN será eliminado y sustituido por el cliente destino en todas las reservas donde esté presente el cliente ORIGEN. Una vez se haya sustituido al cliente ORIGEN por el DESTINO en las reservas, el cliente ORIGEN será eliminado del hub de clientes.`

                        const contenedorFusion = document.createElement("div")
                        contenedorFusion.classList.add(
                            "flexVertical",
                            "gap6"
                        )
                        contenedor.appendChild(contenedorFusion)

                        const origenUI = document.createElement("div")
                        origenUI.classList.add(
                            "flexVertical",
                            "padding12",
                            "backgroundGrey1",
                            "borderRadius14"
                        )
                        contenedorFusion.appendChild(origenUI)

                        const tituloOrigenUI = document.createElement("p")
                        tituloOrigenUI.textContent = "<<< ORIGEN"
                        origenUI.appendChild(tituloOrigenUI)


                        const nombreOrigenUI = document.createElement("p")
                        nombreOrigenUI.classList.add(
                            "negrita"
                        )
                        nombreOrigenUI.textContent = nombreOrigen
                        origenUI.appendChild(nombreOrigenUI)

                        const pasaporteOrigenUI = document.createElement("p")
                        pasaporteOrigenUI.textContent = pasaporteOrigen
                        origenUI.appendChild(pasaporteOrigenUI)

                        const destinoUI = document.createElement("div")
                        destinoUI.classList.add(
                            "flexVertical",
                            "padding12",
                            "backgroundGrey1",
                            "borderRadius14"
                        )
                        contenedorFusion.appendChild(destinoUI)

                        const tituloDestinoUI = document.createElement("p")
                        tituloDestinoUI.textContent = ">>> DESTINO"
                        destinoUI.appendChild(tituloDestinoUI)

                        const nombreDestinoUI = document.createElement("p")
                        nombreDestinoUI.classList.add(
                            "negrita"
                        )
                        nombreDestinoUI.textContent = nombreDestino
                        destinoUI.appendChild(nombreDestinoUI)

                        const pasaporteDestinoUI = document.createElement("p")
                        pasaporteDestinoUI.textContent = pasaporteDestino
                        destinoUI.appendChild(pasaporteDestinoUI)


                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.textContent = "Comfirmar e iniciar la fusión"
                        botonAceptar.addEventListener("click", () => {
                            this.confirmar({
                                clienteOrigenUID: uidOrigen,
                                clienteDestinoUID: uidDestino

                            })
                        })
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Cancelar la eliminacion"

                        document.querySelector("main").appendChild(pantallaInmersiva)
                    },
                    confirmar: async (data) => {
                        const clienteOrigenUID = data.clienteOrigenUID
                        const clienteDestinoUID = data.clienteDestinoUID

                        const instanciaUID_main = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const metadatosPantallaCarga = {
                            mensaje: "Fusionando clientes...",
                            instanciaUID: instanciaUID,
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                        const selectorPantallaDeCargaSuperpuestaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        const datosParaActualizar = {
                            zona: "administracion/clientes/fusion",
                            clienteUID_origen: clienteOrigenUID,
                            clienteUID_destino: clienteDestinoUID
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        selectorPantallaDeCargaSuperpuestaRenderizada?.remove()
                        const instanciaUI_main_renderizada = document.querySelector(`[instanciaUID="${instanciaUID_main}"]`)
                        if (!instanciaUI_main_renderizada) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const m = "Se ha producido la fusion"
                            instanciaUI_main_renderizada.innerHTML = null
                            instanciaUI_main_renderizada.textContent = m
                        }
                    },
                },
            }
        },
        precios: {
            arranque: async () => {
                const main = document.querySelector("main")
                const seccionRenderizadaOrigen = document.querySelector("main")
                main.style.wordBreak = "break-word"
                const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                if (comandoInicial === "precios" && Object.keys(granuladoURL.parametros).length === 0) {
                    main.setAttribute("zonaCSS", "administracion/precios")
                    casaVitini.administracion.precios.portadaUI()
                } else if (granuladoURL.parametros && comandoInicial !== "precios") {
                    main.setAttribute("zonaCSS", "administracion/precios")
                    const info = {
                        titulo: "No existe ningún perfil de precio base con ese identificador.",
                        descripcion: "Revisa el identificado porque no existe el perfil de precio que solicitas."
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                } else if (granuladoURL.parametros.apartamentos) {
                    main.setAttribute("zonaCSS", "administracion/precios/detalles")
                    const transaccion = {
                        zona: "administracion/precios/detallePrecioBaseApartamento",
                        apartamentoIDV: granuladoURL.parametros.apartamentos
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada)
                        if (respuestaServidor.error) {
                            const titulo = document.querySelector(".tituloGris")
                            titulo.textContent = "No existe ningún precio con el identificador: " + granuladoURL.parametros.apartamentos

                        }
                    casaVitini.administracion.precios.detallesApartamenro(respuestaServidor)
                } else if (granuladoURL.parametros.impuestos) {
                    const transaccion = {
                        zona: "administracion/impuestos/detalleImpuesto",
                        impuestoUID: Number(granuladoURL.parametros.impuestos)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada)
                        if (respuestaServidor.error) {
                            const titulo = document.querySelector(".tituloGris")
                            titulo.textContent = "No existe ningún impuesto con el identificador: " + granuladoURL.parametros.apartamentos

                        }
                    casaVitini.administracion.precios.detalleImpuesto(respuestaServidor)
                }
            },
            portadaUI: async () => {
                const selectorEspacioPreciosEImpuestos = document.querySelector("[componente=precios]")
                const transaccion = {
                    zona: "administracion/precios/listaPreciosApartamentos"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const preciosApartmentos = respuestaServidor?.ok
                    const bloqueGlobalApartamentos = document.createElement("div")
                    bloqueGlobalApartamentos.classList.add("preciosEImpuestosBloqueGlobal")
                    const contenedorTituloYOpciones = document.createElement("div")
                    contenedorTituloYOpciones.classList.add("preciosEImpuestosTituloYOpciones")
                    const tituloBloque = document.createElement("p")
                    tituloBloque.classList.add("preciosEImpuestosBloqueTitulo")
                    tituloBloque.textContent = "Precios de los apartmentos"
                    contenedorTituloYOpciones.appendChild(tituloBloque)
                    bloqueGlobalApartamentos.appendChild(contenedorTituloYOpciones)
                    const bloqueHorizontal = document.createElement("div")
                    bloqueHorizontal.classList.add("precioEImpuestosBloqueHorizotnal")
                    preciosApartmentos.forEach((detalleApartamento) => {
                        const uidPrecioApartamento = detalleApartamento.uid
                        const apartamentoIDV = detalleApartamento.apartamento
                        const precio = detalleApartamento.precio
                        const moneda = detalleApartamento.moneda
                        const apartamentoUI = detalleApartamento.apartamentoUI
                        const totalImpuestos = detalleApartamento.totalImpuestos
                        const totalNocheBruto = detalleApartamento.totalNocheBruto
                        const bloqueApartamento = document.createElement("a")
                        bloqueApartamento.classList.add("preciosEImpuestosBloqueApartamento")
                        bloqueApartamento.setAttribute("href", "/administracion/precios/apartamentos:" + apartamentoIDV)
                        bloqueApartamento.setAttribute("vista", "/administracion/precios/apartamentos:" + apartamentoIDV)
                        bloqueApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                        bloqueApartamento.addEventListener("click", casaVitini.administracion.precios.entrarDetallesApartamento)
                        const tituloApartamento = document.createElement("p")
                        tituloApartamento.classList.add("preciosEImpuestosTituloApartamento")
                        tituloApartamento.textContent = apartamentoUI
                        bloqueApartamento.appendChild(tituloApartamento)
                        if (precio) {

                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("precioEImpuestosBloqueDato")
                            let tituloDato = document.createElement("p")
                            tituloDato.classList.add("precioEImpuestosOpcionApartamentoTitulo")
                            tituloDato.textContent = "Total neto por noche"
                            bloqueDato.appendChild(tituloDato)
                            let datoUI = document.createElement("p")
                            datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                            datoUI.textContent = precio
                            bloqueDato.appendChild(datoUI)
                            bloqueApartamento.appendChild(bloqueDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("precioEImpuestosBloqueDato")
                            tituloDato = document.createElement("p")
                            tituloDato.classList.add("precioEImpuestosOpcionApartamentoTitulo")
                            tituloDato.textContent = "Total impuestos aplicados por noche"
                            bloqueDato.appendChild(tituloDato)
                            datoUI = document.createElement("p")
                            datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                            datoUI.textContent = totalImpuestos
                            bloqueDato.appendChild(datoUI)
                            bloqueApartamento.appendChild(bloqueDato)

                            bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("precioEImpuestosBloqueDato")
                            tituloDato = document.createElement("p")
                            tituloDato.classList.add("precioEImpuestosOpcionApartamentoTitulo")
                            tituloDato.textContent = "Total bruto por noche"
                            bloqueDato.appendChild(tituloDato)
                            datoUI = document.createElement("p")
                            datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                            datoUI.textContent = totalNocheBruto
                            bloqueDato.appendChild(datoUI)
                            bloqueApartamento.appendChild(bloqueDato)
                        } else {

                            let bloqueDato = document.createElement("div")
                            bloqueDato.classList.add("precioEImpuestosBloqueDato")
                            datoUI = document.createElement("p")
                            datoUI.classList.add("precioEImpuestosOpcionApartamentoDato")
                            datoUI.textContent = "Este apartamento tiene una configuración de apartamento, pero no tiene ningún perfil de precio creado, por lo tanto, no está disponible para reservar al ser un requisito para construir una configuración válida."
                            bloqueDato.appendChild(datoUI)
                            bloqueApartamento.appendChild(bloqueDato)
                        }
                        bloqueHorizontal.appendChild(bloqueApartamento)
                    })
                    bloqueGlobalApartamentos.appendChild(bloqueHorizontal)
                    selectorEspacioPreciosEImpuestos.appendChild(bloqueGlobalApartamentos)
                }
            },
            gridPrecios: async (entrada) => {
            },
            detallesApartamenro: async (respuestaServidor) => {
                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "No existe ningún perfil de precio base con ese identificador.",
                        descripcion: "Revisa el identificado porque no existe el perfil de precio que solicitas."
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                } else if (respuestaServidor?.ok) {


                    const detallesApartamento = respuestaServidor?.ok
                    const apartamentoUI = detallesApartamento.apartamentoUI
                    const apartamentoIDV = detallesApartamento.apartamentoIDV
                    const precioNetoPorNoche = detallesApartamento.precioNetoPorNoche
                    const totalImpuestos = detallesApartamento.totalImpuestos
                    const totalBrutoPorNoche = detallesApartamento.totalBrutoPorNoche
                    const impuestos = detallesApartamento.impuestos

                    const selectorTitulo = document.querySelector("[componente=titulo]")
                    selectorTitulo.textContent = "Perfil de precio del " + apartamentoUI

                    const selectorEspacioPreciosEImpuestos = document.querySelector("[componente=precios]")
                    const bloqueContenedorHorizontal = document.createElement("div")
                    bloqueContenedorHorizontal.classList.add("preciosEImpuestosDetalleApartamentoBloqueHorizontal")
                    const bloqueDetallesApartamento = document.createElement("div")
                    bloqueDetallesApartamento.classList.add("preciosEImpuestosDetalleApartamentoDetallesApartmento")
                    bloqueDetallesApartamento.setAttribute("componente", "contenedorDetallesApartamento")
                    bloqueDetallesApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                    const tituloApartamento = document.createElement("p")
                    tituloApartamento.classList.add("preciosEImpuestosDetalleApartamentoTituloApartamento")
                    tituloApartamento.textContent = apartamentoUI
                    bloqueDetallesApartamento.appendChild(tituloApartamento)

                    let bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDato")
                    let tituloDato = document.createElement("div")
                    tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                    tituloDato.textContent = "Precio neto por noche"
                    bloqueDato.appendChild(tituloDato)
                    let precioDato = document.createElement("p")
                    precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumero")
                    precioDato.setAttribute("precioNetoPorNoche", precioNetoPorNoche)
                    precioDato.textContent = precioNetoPorNoche
                    bloqueDato.appendChild(precioDato)
                    bloqueDetallesApartamento.appendChild(bloqueDato)

                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDato")
                    tituloDato = document.createElement("div")
                    tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                    tituloDato.textContent = "Total impuestos por noche"
                    bloqueDato.appendChild(tituloDato)
                    precioDato = document.createElement("p")
                    precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumero")
                    precioDato.setAttribute("totalImpuestos", totalImpuestos)
                    precioDato.textContent = totalImpuestos
                    bloqueDato.appendChild(precioDato)
                    bloqueDetallesApartamento.appendChild(bloqueDato)

                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDato")
                    tituloDato = document.createElement("div")
                    tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                    tituloDato.textContent = "Total bruto por noche"
                    bloqueDato.appendChild(tituloDato)
                    precioDato = document.createElement("p")
                    precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumero")
                    precioDato.setAttribute("totalBrutoPorNoche", totalBrutoPorNoche)

                    precioDato.textContent = totalBrutoPorNoche
                    bloqueDato.appendChild(precioDato)
                    bloqueDetallesApartamento.appendChild(bloqueDato)
                    let bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueBotones")
                    bloqueBotones.setAttribute("componente", "bloqueBotones")
                    let boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.textContent = "Modificar precio"
                    boton.setAttribute("componente", "botonModificar")
                    boton.addEventListener("click", casaVitini.administracion.precios.nuevoPrecioApartamentoUI)
                    bloqueBotones.appendChild(boton)






                    boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("componente", "botonCancelar")
                    boton.addEventListener("click", () => {
                        casaVitini.administracion.precios.cancelarModificarPrecio()
                    })
                    boton.textContent = "Cancelar"
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("componente", "botonPrevisualizar")
                    boton.textContent = "Simular nuevo precio"
                    boton.addEventListener("click", casaVitini.administracion.precios.previsualizarPrecioApartamento)
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("componente", "botonCancelarSimulacion")
                    boton.textContent = "Dejar de simular precio"
                    boton.addEventListener("click", casaVitini.administracion.precios.cancelarSimulacion)
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("div")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.textContent = "Establecer nuevo precio neto"
                    boton.addEventListener("click", () => {
                        casaVitini.administracion.precios.establecerNuevoPrecioNetoApartamento()
                    })
                    boton.setAttribute("componente", "botonGuardar")
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("a")
                    boton.classList.add("preciosEImpuestosDetalleApartamentoDetallesBoton")
                    boton.textContent = "Ir a la configuración del apartamento"
                    boton.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                    boton.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                    boton.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    bloqueBotones.appendChild(boton)
                    bloqueDetallesApartamento.appendChild(bloqueBotones)
                    bloqueContenedorHorizontal.appendChild(bloqueDetallesApartamento)
                    selectorEspacioPreciosEImpuestos.appendChild(bloqueContenedorHorizontal)
                    let bloqueDetalles = document.createElement("div")
                    bloqueDetalles.classList.add("preciosEImpuestosDetalleApartamentoDetallesApartmento")
                    bloqueDetalles.setAttribute("componente", "bloqueDetallesImpuestos")
                    let tituloImpuesto = document.createElement("div")
                    tituloImpuesto.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloImpuesto")
                    tituloImpuesto.textContent = "Impuestos Aplicados"
                    bloqueDetalles.appendChild(tituloImpuesto)
                    impuestos.forEach((detalleImpuesto) => {
                        const nombreImpuesto = detalleImpuesto.nombreImpuesto
                        const tipoImpositivo = detalleImpuesto.tipoImpositivo
                        const tipoValorIDV = detalleImpuesto.tipoValorIDV
                        const totalImpuesto = detalleImpuesto.totalImpuesto
                        const impuestoUID = detalleImpuesto.impuestoUID

                        const tipoValorUI = {
                            tasa: "Tasa",
                            porcentaje: "Porcentaje"
                        }

                        let bloqueImpuesto = document.createElement("div")
                        bloqueImpuesto.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueImpuesto")
                        bloqueImpuesto.setAttribute("impuestoUID", impuestoUID)
                        let tituloDato = document.createElement("div")
                        tituloDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloDato")
                        tituloDato.textContent = nombreImpuesto
                        bloqueImpuesto.appendChild(tituloDato)
                        let bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDatoImpuesto")
                        let tituloBloque = document.createElement("p")
                        tituloBloque.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloBloque")
                        tituloBloque.textContent = "Tipo impositivo"
                        bloqueDato.appendChild(tituloBloque)
                        let precioDato = document.createElement("p")
                        precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumeroImpuesto")
                        precioDato.textContent = tipoImpositivo
                        bloqueDato.appendChild(precioDato)
                        bloqueImpuesto.appendChild(bloqueDato)
                        bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDatoImpuesto")
                        tituloBloque = document.createElement("p")
                        tituloBloque.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloBloque")
                        tituloBloque.textContent = "Tipo valor"
                        bloqueDato.appendChild(tituloBloque)
                        precioDato = document.createElement("p")
                        precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumeroImpuesto")
                        precioDato.textContent = tipoValorUI[tipoValorIDV]
                        bloqueDato.appendChild(precioDato)
                        bloqueImpuesto.appendChild(bloqueDato)
                        bloqueDato = document.createElement("div")
                        bloqueDato.classList.add("preciosEImpuestosDetalleApartamentoDetallesBloqueDatoImpuesto")
                        bloqueDato.setAttribute("componente", "contenedorTotalImpuesto")
                        tituloBloque = document.createElement("p")
                        tituloBloque.classList.add("preciosEImpuestosDetalleApartamentoDetallesTituloBloque")
                        tituloBloque.textContent = "Total impuesto"
                        bloqueDato.appendChild(tituloBloque)
                        precioDato = document.createElement("p")
                        precioDato.classList.add("preciosEImpuestosDetalleApartamentoDatoNumeroImpuesto")
                        precioDato.setAttribute("totalImpuesto", totalImpuesto)
                        precioDato.textContent = totalImpuesto
                        bloqueDato.appendChild(precioDato)
                        bloqueImpuesto.appendChild(bloqueDato)
                        bloqueDetalles.appendChild(bloqueImpuesto)
                    })
                    bloqueContenedorHorizontal.appendChild(bloqueDetalles)
                }
            },
            nuevoPrecioApartamentoUI: () => {
                let selectorBloqueBotones = document.querySelector("[componente=bloqueBotones]")
                let selectorcontenedorDetallesApartamento = document.querySelector("[componente=contenedorDetallesApartamento]")
                document.querySelector("[componente=botonModificar]").classList.add("elementoOcultoInicialmente")

                document.querySelector("[componente=botonCancelar]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[componente=botonGuardar]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").classList.remove("elementoOcultoInicialmente")
                let contenedorNuevoPrecioUI = document.createElement("div")
                contenedorNuevoPrecioUI.classList.add("preciosEImpuestosDetalleApartamentoDetallesEntradaContenedorNuevoPrecioUI")
                contenedorNuevoPrecioUI.setAttribute("componente", "contenedorNuevoPrecio")
                let info = document.createElement("div")
                info.classList.add("preciosEImpuestosDetalleApartamentoDetallesEntradaContenedorInfo")
                info.textContent = "Escriba el nuevo precio en el campo de precio.Puedes previsualizar el precio antes de aplicarlo."
                contenedorNuevoPrecioUI.appendChild(info)
                let entradaNuevoPrecio = document.createElement("input")
                entradaNuevoPrecio.classList.add("preciosEImpuestosDetalleApartamentoDetallesEntradaNuevoPrecio")
                entradaNuevoPrecio.setAttribute("componente", "campoNuevoPrecio")
                entradaNuevoPrecio.placeholder = "00.00"
                contenedorNuevoPrecioUI.appendChild(entradaNuevoPrecio)
                selectorcontenedorDetallesApartamento.insertBefore(contenedorNuevoPrecioUI, selectorBloqueBotones);
            },
            previsualizarPrecioApartamento: async () => {
                const selectorCampoNuevoPrecio = document.querySelector("[componente=campoNuevoPrecio]")
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const mensaje = "Calculando previsualizacion del precio..."
                const datosPantallaSuperpuesta = {
                    instanciaUID: instanciaUID,
                    mensaje: mensaje
                }
                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                const transaccion = {
                    zona: "administracion/precios/previsualizarPrecioApartamento",
                    apartamentoIDV: apartamentoIDV,
                    propuestaPrecio: selectorCampoNuevoPrecio.value
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (!instanciaRenderizada) { return }
                instanciaRenderizada.remove()

                if (respuestaServidor?.error) {
                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    document.querySelector("[componente=botonCancelarSimulacion]").classList.remove("elementoOcultoInicialmente")
                    document.querySelector("[componente=botonPrevisualizar]").style.background = "green"
                    document.querySelector("[componente=botonPrevisualizar]").style.color = "white"
                    const propuestaDetalles = respuestaServidor?.ok
                    const precioNetoPorNochePropuesto = propuestaDetalles.precioNetoPorNochePropuesto
                    const totalImpuestos = propuestaDetalles.totalImpuestos
                    const totalBrutoPorNoche = propuestaDetalles.totalBrutoPorNoche
                    const selectorAreaApartamento = document.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                    const selectorPrecioNetoPorDia = selectorAreaApartamento.querySelector("[precioNetoPorNoche]")
                    selectorPrecioNetoPorDia.style.color = "green"
                    selectorPrecioNetoPorDia.textContent = precioNetoPorNochePropuesto + " (Simulación)"

                    const selectorTotalImpuestos = selectorAreaApartamento.querySelector("[totalImpuestos]")
                    selectorTotalImpuestos.style.color = "green"
                    selectorTotalImpuestos.textContent = totalImpuestos + " (Simulación)"

                    const selectorTotalBrutoPorDia = selectorAreaApartamento.querySelector("[totalBrutoPorNoche]")
                    selectorTotalBrutoPorDia.style.color = "green"
                    selectorTotalBrutoPorDia.textContent = totalBrutoPorNoche + " (Simulación)"

                    const impuestosPorPropuesta = propuestaDetalles.impuestos
                    impuestosPorPropuesta.forEach((impuestoPropuesta) => {
                        const impuestoUID = impuestoPropuesta.impuestoUID
                        const totalImpuesto = impuestoPropuesta.totalImpuesto
                        const selectorTotalImpuesto = document.querySelector(`[impuestoUID="${impuestoUID}"] [totalImpuesto]`)
                        selectorTotalImpuesto.style.color = "green"
                        selectorTotalImpuesto.textContent = totalImpuesto + " (Simulación)"
                    })
                }
            },
            establecerNuevoPrecioNetoApartamento: async function () {
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const mensaje = "Actualizando el precio del apartamento...."
                const datosPantallaSuperpuesta = {
                    instanciaUID: instanciaUID,
                    mensaje: mensaje
                }
                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                const selectorCampoNuevoPrecio = document.querySelector("[componente=campoNuevoPrecio]")
                const selectorApartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                const transaccion = {
                    zona: "administracion/precios/establecerNuevoPrecioApartamento",
                    apartamentoIDV: selectorApartamentoIDV,
                    nuevoPrecio: String(selectorCampoNuevoPrecio.value)
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (!instanciaRenderizada) { return }
                instanciaRenderizada.remove()
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    this.cancelarSimulacion()
                    this.cancelarModificarPrecio()
                    const propuestaDetalles = respuestaServidor?.ok
                    const precioNetoPorNoche = propuestaDetalles.precioNetoPorNoche
                    const totalImpuestos = propuestaDetalles.totalImpuestos
                    const totalBrutoPorNoche = propuestaDetalles.totalBrutoPorNoche

                    const areaApartamento = document.querySelector(`[apartamentoIDV="${selectorApartamentoIDV}"]`)

                    const selectorPrecioNetoPorNoche = areaApartamento.querySelector("[precioNetoPorNoche]")
                    selectorPrecioNetoPorNoche.removeAttribute("style")
                    selectorPrecioNetoPorNoche.textContent = precioNetoPorNoche

                    const selectorTotalImpuestos = areaApartamento.querySelector("[totalImpuestos]")
                    selectorTotalImpuestos.removeAttribute("style")
                    selectorTotalImpuestos.textContent = totalImpuestos

                    const selectorTotalBrutoPorNoche = areaApartamento.querySelector("[totalBrutoPorNoche]")
                    selectorTotalBrutoPorNoche.removeAttribute("style")
                    selectorTotalBrutoPorNoche.textContent = totalBrutoPorNoche

                    const impuestosPorPropuesta = propuestaDetalles.impuestos
                    impuestosPorPropuesta.forEach((impuestoPropuesta) => {
                        const impuestoUID = impuestoPropuesta.impuestoUID
                        const totalImpuesto = impuestoPropuesta.totalImpuesto
                        const selectorTotalImpuesto = document.querySelector(`[impuestoUID="${impuestoUID}"] [totalImpuesto]`)
                        selectorTotalImpuesto.textContent = totalImpuesto
                    })
                }
            },
            cancelarSimulacion: () => {
                const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                const selectorAreaApartamento = document.querySelector(`[apartamentoIDV="${apartamentoIDV}"]`)
                const selectorPrecioNetoPorDia = selectorAreaApartamento.querySelector("[precioNetoPorNoche]")
                selectorPrecioNetoPorDia.removeAttribute("style")
                selectorPrecioNetoPorDia.textContent = selectorPrecioNetoPorDia.getAttribute("precioNetoPorNoche")

                const selectorTotalImpuestos = selectorAreaApartamento.querySelector("[totalImpuestos]")
                selectorTotalImpuestos.removeAttribute("style")
                selectorTotalImpuestos.textContent = selectorTotalImpuestos.getAttribute("totalImpuestos")

                const selectorTotalBrutoPorDia = selectorAreaApartamento.querySelector("[totalBrutoPorNoche]")
                selectorTotalBrutoPorDia.removeAttribute("style")
                selectorTotalBrutoPorDia.textContent = selectorTotalBrutoPorDia.getAttribute("totalBrutoPorNoche")

                const selectorImpuestosRenderizados = document.querySelectorAll(`[impuestoUID]`)
                selectorImpuestosRenderizados.forEach((impuestoRenderizado) => {
                    const selectorTotalImpuesto = impuestoRenderizado.querySelector("[totalImpuesto]")
                    selectorTotalImpuesto.removeAttribute("style")
                    selectorTotalImpuesto.textContent = selectorTotalImpuesto.getAttribute(`totalImpuesto`)
                })
                document.querySelector("[componente=botonCancelarSimulacion]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").removeAttribute("style")
                const selectorCampoPrecio = document.querySelector("[componente=campoNuevoPrecio]")
                if (selectorCampoPrecio) {
                    selectorCampoPrecio.value = ""

                }
            },
            cancelarModificarPrecio: async function () {
                document.querySelector("[componente=botonCancelarSimulacion]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").removeAttribute("style")
                document.querySelector("[componente=botonModificar]").classList.remove("elementoOcultoInicialmente")

                document.querySelector("[componente=botonCancelar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonGuardar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=botonPrevisualizar]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[componente=contenedorNuevoPrecio]")?.remove()
                this.cancelarSimulacion()
            },
            eliminarPerfilPrecio: {
                UI: () => {
                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                    const titulo = constructor.querySelector("[componente=titulo]")
                    titulo.textContent = "Confirmar la eliminación del perfil del precio del apartamento"
                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                    mensaje.textContent = "Vas a eliminar el perfil de precio de un apartamento.Esta acción será inmediata e impedirá reservar el apartamento, ya que no se pueden hacer reservas sin un precio asignado.Si estás de acuerdo con esta operación, confirma cuando desees; de lo contrario, cancela el proceso."
                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                    botonAceptar.textContent = "Comfirmar la eliminacion"
                    botonAceptar.addEventListener("click", casaVitini.administracion.precios.eliminarPerfilPrecio.confirmarEliminarPrecio)
                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                    botonCancelar.textContent = "Cancelar la eliminacion"

                    document.querySelector("main").appendChild(pantallaInmersiva)
                },
                confirmarEliminarPrecio: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Eliminado el perfil de precio..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                    const transaccion = {
                        zona: "administracion/precios/eliminarPerfilPrecioApartamento",
                        apartamentoIDV: apartamentoIDV
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const entrada = {
                            vista: "/administracion/precios",
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(entrada)
                    }
                }
            },
            entrarDetallesApartamento: (apartamento) => {
                apartamento.stopPropagation()
                apartamento.preventDefault()
                const apartamentoIDV = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV");
                const vista = "/administracion/precios/apartamentos:" + apartamentoIDV
                const entrada = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                casaVitini.shell.navegacion.controladorVista(entrada)
            },
        },
        simuladorDePrecios: {
            arranque: async function () {
                const main = document.querySelector("main")
                const instanciaUID = main.getAttribute("instanciaUID")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

                const parametros = granuladoURL.parametros
                if (comandoInicial === "simulador_de_precios" && !parametros.simulacion) {
                    this.portada.contenedorBotones()
                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "simulacion_uid") {
                            nombreColumnaIDV = "simulacionUID"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                    })

                    this.portada.mostrarSimulacionesResueltas(parametrosFormatoIDV)
                } else if (comandoInicial === "simulador_de_precios" && parametros.simulacion) {
                    main.setAttribute("zonaCSS", "administracion/simuladorDePrecios/detalles")

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/simuladorDePrecios/detallesSimulacion",
                        simulacionUID: String(parametros.simulacion)
                    })
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor.error) {
                        const titulo = document.querySelector(".tituloGris")
                        titulo.textContent = "No existe ningúns simulación con el identificador: " + parametros.simulacion
                        main.innerHTML = null
                        main.appendChild(titulo)
                        return
                    }
                    await this.detallesSimulacion.detalleSimulacion(respuestaServidor)

                    const zonaURL = parametros.zona
                    if (zonaURL) {
                        const categoriaGlobalIDV = casaVitini.utilidades.cadenas.snakeToCamel(zonaURL)
                        casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.categoriasGlobalesUI.controladorMostrar({
                            origen: "url",
                            categoria: categoriaGlobalIDV
                        })
                    }
                }
                else {
                    casaVitini.ui.componentes.urlDesconocida()

                }

            },
            portada: {
                mostrarSimulacionesResueltas: async function (data) {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacio]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)

                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/simulador_de_precios")
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const transaccion = {
                        origen: "url",
                        ...data
                    }

                    transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                    const paginaTipo = transaccion.paginaTipo
                    const nombreColumna = transaccion.nombreColumna

                    let nombreColumnaURL
                    if ((nombreColumna)?.toLowerCase() === "simulacionuid") {
                        nombreColumnaURL = "simulacion_uid"
                    } else if (nombreColumna) {
                        nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                    }
                    if (transaccion.sentido_columna) {
                        transaccion.sentidoColumna = transaccion.sentido_columna
                        delete transaccion.sentido_columna
                    }
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/simuladorDePrecios/listaSimulacionesPaginados",
                        pagina: transaccion.pagina,
                        nombreColumna: nombreColumna,
                        sentidoColumna: transaccion.sentidoColumna
                    })
                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }

                    if (respuestaServidor?.totalSimulaciones === 0) {
                        const espacioClientes = document.querySelector("[componente=espacio]")
                        document.querySelector("[gridUID=gridImpuestos]")?.remove()
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        const estadoBusquedaUI = document.createElement("div")
                        estadoBusquedaUI.classList.add(
                            "buscadorClientesEstadoBusqueda",
                            "textoCentrado"
                        )
                        estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                        estadoBusquedaUI.textContent = "No hay simulaciones configurados"
                        espacioClientes.appendChild(estadoBusquedaUI)
                        return

                    }
                    const simulaciones = respuestaServidor.simulaciones
                    const sentidoColumna = respuestaServidor.sentidoColumna
                    const pagina = respuestaServidor.pagina
                    const paginasTotales = respuestaServidor.paginasTotales
                    const columnasGrid = [
                        {
                            columnaUI: "UID",
                            columnaIDV: "simulacionUID",
                        },
                        {
                            columnaUI: "Nombre",
                            columnaIDV: "nombre",
                        },
                        {
                            columnaUI: "Fecah de creación",
                            columnaIDV: "fechaCreacion",
                        },
                        {
                            columnaUI: "Fecha de entrada",
                            columnaIDV: "fechaEntrada",
                        },
                        {
                            columnaUI: "Fecha de salida",
                            columnaIDV: "fechaSalida",
                        }
                    ]
                    const parametrosFinales = {}

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.simuladorDePrecios.portada.mostrarSimulacionesResueltas",
                        configuracionGrid: {
                            filas: simulaciones,
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[componente=espacio]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridSimuladorDePrecios",
                            mascaraURL: {
                                mascara: "/administracion/simulador_de_precios/simulacion:",
                                parametro: "simulacionUID"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })

                    const titulo = "ADminstar reservas"
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "contenedorBotonesSimulador",
                        funcionPersonalizada: "administracion.simuladorDePrecios.portada.mostrarSimulacionesResueltas",
                        args: transaccion
                    }
                    if (origen === "url" || origen === "botonMostrarClientes") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);

                    }
                },
                contenedorBotones: () => {
                    const espacioImpuestos = document.querySelector("[contenedor=botones]")
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add(
                        "flexHorizontal",
                        "flexDerecha"
                    )
                    contenedorBotones.setAttribute("componente", "contenedorBotonesSimulador")
                    const botonCrearImpuesto = document.createElement("a")
                    botonCrearImpuesto.classList.add("botonV1")
                    botonCrearImpuesto.textContent = "Nueva simulación"
                    botonCrearImpuesto.setAttribute("href", "/administracion/simulador_de_precios/nueva_simulacion")
                    botonCrearImpuesto.setAttribute("vista", "/administracion/simulador_de_precios/nueva_simulacion")
                    botonCrearImpuesto.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(botonCrearImpuesto)
                    espacioImpuestos.appendChild(contenedorBotones)
                },
            },
            nuevaSimulacion: {
                arranque: async function () {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/simuladorPrecios/nuevaSimulacion")

                    const selectorEspacio = document.querySelector("[componente=espacio]")

                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")
                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add(
                        "flexVertical",
                        "textoCentrado"
                    )
                    tituloBloquoApartamentos.textContent = "Cree una simulación de un desglose total. Esto le permite cerciorarse en detalle de cómo se aplican las reservas, los impuestos, los servicios, las ofertas y los comportamientos de precio. Para empezar a crear una simulacion, determina un nombre para esta. Luego tambien podras cambiar el nombre en cualquier momento."
                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                    selectorEspacio.appendChild(bloqueBloqueoApartamentos)


                    const campoNombre = document.createElement("input")
                    campoNombre.setAttribute("campo", "nombre")
                    campoNombre.classList.add(
                        "padding12",
                        "backgroundGrey1",
                        "borderRadius10"
                    )
                    campoNombre.placeholder = "Escribe el nombre de la nueva simulación"
                    selectorEspacio.appendChild(campoNombre)


                    const botonCrear = document.createElement("div")
                    botonCrear.classList.add(
                        "botonV1",
                        "comportamientoBoton",
                        "padding6",
                        "textoCentrado",
                        "backgroundGrey1",
                        "borderRadius8",
                        "noSelecionable"
                    )
                    botonCrear.textContent = "Crear nueva simulación"
                    botonCrear.addEventListener("click", this.guardarNuevaSimulacion)
                    selectorEspacio.appendChild(botonCrear)



                },
                guardarNuevaSimulacion: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Guardando simulacion..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje,
                        identificadorVisual: "pantallaDeCarga"
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                    const nombre = document.querySelector("[campo=nombre]").value










                    const transaccion = {
                        zona: "administracion/simuladorDePrecios/guardarSimulacion",
                        nombre
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()

                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const simuacionUID = respuestaServidor.simulacionUID
                        const entrada = {
                            vista: "/administracion/simulador_de_precios/simulacion:" + simuacionUID,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(entrada)
                    }
                },
            },
            detallesSimulacion: {
                detalleSimulacion: async function (respuestaServidor) {
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe ninguna simulación con ese identificador",
                            descripcion: "La simulación a que hace referencia la URL no existe.Revisa el identificador.Quizás fue una simulación que tuviste hace un tiempo y que borraste"
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }
                    if (respuestaServidor?.ok) {


                        const simulacionData = respuestaServidor
                        const nombre = simulacionData.nombre
                        const zonaIDV = simulacionData.zonaIDV
                        const simulacionUID = simulacionData.simulacionUID
                        const fechaCreacion = simulacionData?.fechaCreacion
                        const fechaEntrada = simulacionData?.fechaEntrada
                        const fechaSalida = simulacionData?.fechaSalida
                        const contenedorFinanciero = simulacionData.contenedorFinanciero
                        const apartamentos = simulacionData.apartamentos
                        const servicios = simulacionData.servicios || []
                        const complementosDeAlojamiento = simulacionData.complementosDeAlojamiento
                        const codigosDescuento = simulacionData.codigosDescuento || []

                        const selectorEspacio = document.querySelector("[componente=espacio]")
                        const contenedor = document.createElement("div")
                        contenedor.classList.add("contenedorNuevaSimiulacion")
                        selectorEspacio.appendChild(contenedor)
                        const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")

                        const simulacionUI = casaVitini.administracion.simuladorDePrecios.componentes.simulacionUI({ simulacionUID })
                        simulacionUI.setAttribute("componente", `simulacionUID_${simulacionUID}`)

                        selectorEspacio.appendChild(simulacionUI)

                        const selectorTitulo = document.querySelector(".tituloGris")
                        selectorTitulo.classList.add(
                            "padding5"
                        )
                        selectorTitulo.style.position = "sticky"
                        selectorTitulo.style.top = "20px"
                        selectorTitulo.style.zIndex = "2"

                        const controladorAlturaTituloDinamico = (e) => {
                            const selectorInstanciaActual = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!selectorInstanciaActual) {
                                document.removeEventListener("scroll", controladorAlturaTituloDinamico)

                            }
                            const altura = window.scrollY || window.pageYOffset;

                            if (altura > 20) {
                                selectorTitulo.style.boxShadow = "0px 0px 28px 0px rgba(0, 0, 0, 0.5)"
                                selectorTitulo.style.backdropFilter = "blur(50px)"
                                selectorTitulo.style.webkitBackdropFilter = "blur(50px)"
                                selectorTitulo.style.position = "sticky"
                                selectorTitulo.style.top = "20px"
                                selectorTitulo.style.zIndex = "2"
                                selectorTitulo.style.background = "#rgb(255 255 255/25%)"
                                selectorTitulo.style.paddingRight = "20px"
                                selectorTitulo.style.borderRadius = "42px"
                                selectorTitulo.style.paddingLeft = "20px"
                                selectorTitulo.style.paddingTop = "5px"
                                selectorTitulo.style.paddingBottom = "5px"
                                selectorTitulo.style.color = "black"
                            } else {
                                selectorTitulo.removeAttribute("style")
                            }
                        }
                        document.addEventListener("scroll", controladorAlturaTituloDinamico)

                        const contenedorSimulacion = document.querySelector("[contenedor=simulacion]")
                        const contenedorGlobal = simulacionUI.querySelector("[contenedor=botones]")

                        const campoNombre = document.createElement("input")
                        campoNombre.setAttribute("campo", "nombre")
                        campoNombre.classList.add(
                            "padding6",
                            "backgroundGrey1",
                            "borderRadius8",
                            "padding10",
                            "simplificadorCampo",
                            "noSelecionable"
                        )
                        campoNombre.placeholder = "Escriba un nombre para la simulación"

                        contenedorGlobal.appendChild(campoNombre)

                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add(
                            "gridHorizontal2C",
                            "gap6"
                        )
                        contenedorGlobal.appendChild(contenedorBotones)


                        const botonGuardar = document.createElement("div")
                        botonGuardar.classList.add(
                            "botonV1",
                            "comportamientoBoton",
                            "padding6",
                            "textoCentrado",
                            "backgroundGrey1",
                            "borderRadius8",
                            "noSelecionable"
                        )
                        botonGuardar.textContent = "Guardar simulación"
                        botonGuardar.addEventListener("click", () => {
                            this.actualizarNombreSimulacion()
                        })

                        contenedorBotones.appendChild(botonGuardar)

                        const botonEliminar = document.createElement("div")
                        botonEliminar.classList.add(
                            "botonV1",
                            "comportamientoBoton",
                            "padding6",
                            "textoCentrado",
                            "backgroundGrey1",
                            "borderRadius8",
                            "noSelecionable"
                        )
                        botonEliminar.textContent = "Eliminar simulación"
                        botonEliminar.addEventListener("click", () => {
                            this.eliminarSimulacion.UI()
                        })
                        contenedorBotones.appendChild(botonEliminar)

                        const selectorNombre = simulacionUI.querySelector("[campo=nombre]")
                        const selectorFechaEntrada = simulacionUI.querySelector("[calendario=entrada]")
                        const selectorFechaSalida = simulacionUI.querySelector("[calendario=salida]")
                        const selectorFechaCreacion = simulacionUI.querySelector("[calendario=unico]")
                        const selectorsApartamentos = simulacionUI.querySelector("[contenedor=apartamentosSeleccianados]")
                        const instanciaUID_contenedorApartamentos = selectorsApartamentos.querySelector("[instanciaUID]").getAttribute("instanciaUID")



                        const hubFecha = (fecha) => {
                            if (fecha) {
                                return casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fecha)
                            } else {
                                return "(Seleccionar)"
                            }
                        }

                        selectorEspacio.setAttribute("simulacionUID", simulacionUID)
                        selectorNombre.value = nombre
                        if (fechaCreacion) {
                            selectorFechaCreacion.setAttribute("memoriaVolatil", fechaCreacion)
                        }
                        if (fechaEntrada) {
                            selectorFechaEntrada.setAttribute("memoriaVolatil", fechaEntrada)
                        }
                        if (fechaSalida) {
                            selectorFechaSalida.setAttribute("memoriaVolatil", fechaSalida)
                        }

                        selectorFechaCreacion.querySelector("[fechaUI=unico]").textContent = hubFecha(fechaCreacion)
                        selectorFechaEntrada.querySelector("[fechaUI=fechaInicio]").textContent = hubFecha(fechaEntrada)
                        selectorFechaSalida.querySelector("[fechaUI=fechaFin]").textContent = hubFecha(fechaSalida)

                        const selectorBotonReconstrucion = simulacionUI.querySelector("[boton=reconstruccionHubSinConfirmacion]")
                        selectorBotonReconstrucion.addEventListener("click", () => {
                            this.componentesUI.reconstruirDesgloseFinanciero.desdeHub.confirmarReconstrucion({
                                simulacionUID: String(simulacionUID),
                                sobreControl: "activado"
                            })
                        })

                        for (const contenedorApartamento of apartamentos) {
                            const apartamentoIDV = contenedorApartamento.apartamentoIDV
                            const apartamentoUI = contenedorApartamento.apartamentoUI
                            const infoSinApartamento = document.querySelector("[componente=infoSinApartamento]")
                            infoSinApartamento.style.display = "none"

                            const selectorApartamentoUI = casaVitini.administracion.simuladorDePrecios.componentes.apartamentoUI({
                                apartamentoIDV,
                                apartamentoUI,
                                instanciaUID: instanciaUID_contenedorApartamentos,
                                tipoDespliegue: "parcial"
                            })
                            const selectorZonaApartamentos = document.querySelector("[componente=zonaAnadirApartamento]")
                            selectorZonaApartamentos.appendChild(selectorApartamentoUI)
                        }

                        const selectorZonaIDV = simulacionUI.querySelector("[selector=zonaIDV]")
                        selectorZonaIDV.value = zonaIDV || ""

                        casaVitini.administracion.simuladorDePrecios.componentes.servicios.actualizarContenedor({
                            servicios,
                            simulacionUID
                        })

                        casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.complementosDeAlojamiento.arranque({
                            apartamentos,
                            complementosDeAlojamiento
                        })
                        if (contenedorFinanciero.desgloseFinanciero) {
                            casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                destino: `[contenedor=simulacion]`,
                                contenedorFinanciero,
                                modoUI: "simulador"
                            })
                        } else {
                            simulacionUI.querySelector("[contenedor=simulacion]").style.display = "none"
                        }
                    }
                },
                componentesUI: {
                    alojamiento: {
                        insertarAlojamiento: async (data) => {

                            const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const apartamentoIDV = String(data.apartamentoIDV)

                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                mensaje: "Insertando apartamento en la simulación...",
                                textoBoton: "ocultar",
                                instanciaUID: instanciaPantallaCarga
                            })

                            const respuestaServidor = await casaVitini.shell.servidor({
                                zona: "administracion/simuladorDePrecios/alojamiento/insertarAlojamientoEnSimulacion",
                                simulacionUID,
                                apartamentoIDV,
                            })
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"] [contenedor=apartamentosSeleccianados]`)
                            if (!uiRenderizada) { return }
                            casaVitini.administracion.simuladorDePrecios.componentes.controladorUIPorFaltaDeLLaves(respuestaServidor)
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                return false
                            }
                            if (respuestaServidor?.ok) {
                                console.log("respuestaSer", respuestaServidor)
                                const alojamiento = respuestaServidor.ok
                                const nuevoApartamento = respuestaServidor.nuevoApartamento
                                const desgloseFinanciero = respuestaServidor.desgloseFinanciero

                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                if (desgloseFinanciero) {
                                    casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                        destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                        contenedorFinanciero: { desgloseFinanciero },
                                        modoUI: "simulador"
                                    })
                                }
                                const contenedorComplementosAlojamiento = document.querySelector("[contenedor=complementosAlojamiento]")
                                const instanciaUID_contenedorComplementos = contenedorComplementosAlojamiento.getAttribute("instanciaUID")
                                const apartamentoUI = casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.complementosDeAlojamiento.componentesUI.apartamentoUI({
                                    apartamentoIDV: nuevoApartamento.apartamentoIDV,
                                    apartamentoUI: nuevoApartamento.apartamentoUI,
                                    apartamentoUID: nuevoApartamento.apartamentoUID,
                                    instanciaUID_contenedorComplementos: instanciaUID_contenedorComplementos
                                })
                                const contenedorLista = contenedorComplementosAlojamiento.querySelector("[componente=contenedorLista]")

                                contenedorLista.appendChild(apartamentoUI)

                                return true
                            }

                        },
                        eliminarApartamento: async (data) => {

                            const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const apartamentoIDV = String(data.apartamentoIDV)
                            const e = data.e

                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                mensaje: "Eliminando apartamento en la simulación...",
                                textoBoton: "ocultar",
                                instanciaUID: instanciaPantallaCarga
                            })

                            const respuestaServidor = await casaVitini.shell.servidor({
                                zona: "administracion/simuladorDePrecios/alojamiento/eliminarAlojamientoEnSimulacion",
                                simulacionUID,
                                apartamentoIDV,
                            })
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"] [contenedor=apartamentosSeleccianados]`)
                            if (!uiRenderizada) { return }
                            console.log("test")
                            casaVitini.administracion.simuladorDePrecios.componentes.controladorUIPorFaltaDeLLaves(respuestaServidor)
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const alojamiento = respuestaServidor.ok
                                const desgloseFinanciero = alojamiento.desgloseFinanciero
                                console.log("uiRenderizada", uiRenderizada)
                                const apartamentoRenderizado = e.target.closest("[apartamentoSeleccionado]")
                                const area = apartamentoRenderizado.closest("[instanciaUID]")
                                const conteoApartamentos = area.querySelectorAll(`[apartamentoSeleccionado]`)
                                apartamentoRenderizado.remove()
                                console.log("conteoApartamentos.length", conteoApartamentos.length)
                                if (conteoApartamentos.length === 1) {
                                    area.querySelector("[componente=infoSinApartamento]").removeAttribute("style")
                                }

                                if (desgloseFinanciero) {
                                    casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                        destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                        contenedorFinanciero: { desgloseFinanciero },
                                        modoUI: "simulador"
                                    })
                                }

                                const contenedorComplementosAlojamiento = document.querySelector(`[contenedor=complementosAlojamiento] [componente=contenedorLista] [apartamentoIDV="${apartamentoIDV}"]`)
                                contenedorComplementosAlojamiento?.remove()


                            }
                            return casaVitini.administracion.simuladorDePrecios.componentes.actualizaSimulacion()


                        }
                    },
                    complementosDeAlojamiento: {
                        arranque: async function (data) {

                            const apartamentos = data.apartamentos
                            const complementosDeAlojamiento = data.complementosDeAlojamiento
                            const constenedorGlobal = document.querySelector("[contenedor=complementosAlojamiento]")
                            const instanciaUID_contenedorComplementos = casaVitini.utilidades.codigoFechaInstancia()

                            const contenedor = document.createElement("div")
                            contenedor.classList.add(
                                "flexVertical",
                                "gap6",
                                //  "padding6"
                            )
                            contenedor.setAttribute("instanciaUID", instanciaUID_contenedorComplementos)
                            contenedor.setAttribute("componente", "complementosDeAlojamiento")
                            constenedorGlobal.appendChild(contenedor)
                            const simulacionUI = document.querySelector("[simulacionUID]")
                            const simulacionUID = simulacionUI.getAttribute("simulacionUID")

                            const contenedorLista = document.createElement("div")
                            contenedorLista.classList.add(
                                "gridHorizontal2C",
                                "gap6",
                            )
                            contenedorLista.setAttribute("componente", "contenedorLista")
                            contenedor.appendChild(contenedorLista)

                            // const apartamentoUI = (data) => {
                            //     const apartamentoUI = data.apartamentoUI
                            //     const apartamentoUID = data.apartamentoUID
                            //     const apartamentoIDV = data.apartamentoIDV

                            //     const ui = document.createElement("div")
                            //     ui.setAttribute("apartamentoUID", apartamentoUID)
                            //     ui.setAttribute("apartamentoIDV", apartamentoIDV)
                            //     ui.classList.add(
                            //         "flexVertical",
                            //         "gap6",
                            //         "padding6",
                            //         "borderRadius12",
                            //         "backgroundGrey1"
                            //     )

                            //     const n = document.createElement("p")
                            //     n.classList.add(
                            //         "negrita",
                            //         "padding14"
                            //     )
                            //     n.textContent = apartamentoUI
                            //     ui.appendChild(n)

                            //     const contBo = document.createElement("div")
                            //     contBo.classList.add("flexHorizontal")
                            //     ui.appendChild(contBo)

                            //     const b = document.createElement("div")
                            //     b.classList.add("botonV3")
                            //     b.textContent = "Añadir complemento de alojamiento"
                            //     b.addEventListener("click", () => {
                            //         this.componentesUI.insertarComplementoEnAlojamiento.ui({
                            //             instanciaUID_contenedorComplementos,
                            //             apartamentoIDV,
                            //         })
                            //     })
                            //     contBo.appendChild(b)

                            //     const c = document.createElement("div")
                            //     c.setAttribute("contenedor", "complementos")
                            //     c.classList.add(
                            //         "flexVertical",
                            //         "gap6",
                            //     )
                            //     c.appendChild(this.componentesUI.infoSinComplemento())
                            //     ui.appendChild(c)
                            //     return ui
                            // }
                            if (apartamentos.length > 0) {
                                constenedorGlobal.querySelector("[componente=sinInfo]")?.remove()
                            }
                            apartamentos.forEach((a) => {
                                const apartamentoIDV = a.apartamentoIDV
                                const apartamentoUI_ = a.apartamentoUI
                                const apartamentoUID = a.apartamentoUID

                                contenedorLista.appendChild(this.componentesUI.apartamentoUI({
                                    apartamentoIDV,
                                    apartamentoUI: apartamentoUI_,
                                    apartamentoUID,
                                    instanciaUID_contenedorComplementos
                                }))

                            })

                            complementosDeAlojamiento.forEach((com) => {
                                const sel = contenedor.querySelector(`[apartamentoIDV="${com.apartamentoIDV}"] [contenedor=complementos]`)
                                sel.querySelector("[componente=sinInfo]")?.remove()
                                sel.appendChild(this.componentesUI.complementoUI(com))
                            })


                        },
                        componentesUI: {
                            insertarComplementoEnAlojamiento: {
                                ui: async function (data) {
                                    const main = document.querySelector("main")
                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                    const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                                    const instanciaUID_insertarComplementoUI = ui.getAttribute("instanciaUID")
                                    const instanciaUID_contenedorComplementos = data.instanciaUID_contenedorComplementos
                                    const apartamentoIDV = data.apartamentoIDV
                                    main.appendChild(ui)
                                    const constructor = ui.querySelector("[componente=contenedor]")
                                    const spinner = casaVitini.ui.componentes.spinner({
                                        mensaje: "Obteniendo complementos del alojamiento...",
                                        textoBoton: "Cancelar"
                                    })
                                    constructor.appendChild(spinner)

                                    const transaccion = {
                                        zona: "administracion/complementosDeAlojamiento/obtenerComplementosPorAlojamiento",
                                        apartamentoIDV
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_contenedorComplementos}"]`)
                                    if (!uiRenderizada) { return }
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        spinner.remove()


                                        const complementosPorApartamentoIDV = respuestaServidor.complementosPorApartamentoIDV

                                        const contenedor = document.createElement("div")
                                        contenedor.classList.add(
                                            "maxWidth1280px",
                                            "width100",
                                            "flexVertical",
                                            "gap10",
                                        )
                                        constructor.appendChild(contenedor)
                                        const estadoUI_ = (estadoIDV) => {

                                            if (estadoIDV === "activado") {
                                                return "Activada"
                                            } else if (estadoIDV === "desactivado") {
                                                return "Desactivada"
                                            }

                                        }
                                        if (complementosPorApartamentoIDV.length > 0) {
                                            constructor.appendChild(this.botonCancelar())

                                        } else {
                                            const info = document.querySelector("p")
                                            info.classList.add("textoCentrado", "padding14")
                                            info.textContent = "Este alojamiento no tiene ningun complemento configurado."
                                            constructor.appendChild(info)
                                        }
                                        complementosPorApartamentoIDV.forEach((c) => {
                                            const complementoUI = c.complementoUI
                                            const complementoUID = c.complementoUID
                                            const estadoIDV = c.estadoIDV
                                            const tipoPrecio = c.tipoPrecio
                                            const precio = c.precio
                                            const definicion = c.definicion


                                            const contenedor = document.createElement("div")
                                            contenedor.setAttribute("complementoUID", complementoUID)
                                            contenedor.classList.add(
                                                "borderRadius12",
                                                "width100",
                                                "flexVertical",
                                                "backgroundGrey1",
                                                "padding6",
                                                "gap6"
                                            )

                                            const contenedorGlobal = document.createElement("div")
                                            contenedorGlobal.classList.add(
                                                "flexVertical",
                                                "padding6",
                                                "gap6"
                                            )

                                            const nombreOfertaUI = document.createElement("div")
                                            nombreOfertaUI.classList.add("negrita")
                                            nombreOfertaUI.textContent = complementoUI
                                            contenedorGlobal.appendChild(nombreOfertaUI)

                                            const estadoTitulo = document.createElement("div")
                                            estadoTitulo.textContent = "Estado del complemento"
                                            contenedorGlobal.appendChild(estadoTitulo)


                                            const estadoUI = document.createElement("div")
                                            estadoUI.classList.add("negrita")
                                            estadoUI.textContent = estadoUI_(estadoIDV)
                                            contenedorGlobal.appendChild(estadoUI)
                                            contenedor.appendChild(contenedorGlobal)

                                            const contendorBotones = document.createElement("div")
                                            contendorBotones.classList.add(
                                                "flexHorizontal",
                                                "gap6",
                                            )

                                            const botonInsertar = document.createElement("div")
                                            botonInsertar.classList.add(
                                                "borderRadius8",
                                                "backgroundGrey1",
                                                "comportamientoBoton",
                                                "padding8"
                                            )
                                            botonInsertar.textContent = "Insertar complemento en el alojamiento"
                                            botonInsertar.addEventListener("click", () => {
                                                this.confirmarInsertar({
                                                    simulacionUID,
                                                    complementoUID,
                                                    instanciaUID_insertarComplementoUI,
                                                    instanciaUID_contenedorComplementos
                                                })

                                            })
                                            contendorBotones.appendChild(botonInsertar)

                                            const botonVerOferta = document.createElement("a")
                                            botonVerOferta.classList.add(
                                                "borderRadius8",
                                                "backgroundGrey1",
                                                "comportamientoBoton",
                                                "padding8",
                                                "limpiezaBotonA"
                                            )
                                            botonVerOferta.textContent = "Ir al complemento"
                                            botonVerOferta.setAttribute("href", "/administracion/complementos_de_alojamiento/complemento:" + complementoUID)
                                            botonVerOferta.setAttribute("vista", "/administracion/complementos_de_alojamiento/complemento:" + complementoUID)
                                            botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                            contendorBotones.appendChild(botonVerOferta)

                                            contenedor.appendChild(contendorBotones)
                                            constructor.appendChild(contenedor)
                                        })
                                        constructor.appendChild(this.botonCancelar())

                                    }

                                },
                                botonCancelar: () => {
                                    const botonCancelar = document.createElement("div")
                                    botonCancelar.classList.add("botonV1")
                                    botonCancelar.setAttribute("boton", "cancelar")
                                    botonCancelar.textContent = "Cerrar y volver a la reserva"
                                    botonCancelar.addEventListener("click", () => {
                                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    return botonCancelar
                                },
                                confirmarInsertar: async function (data) {
                                    const simulacionUID = data.simulacionUID
                                    const complementoUID = String(data.complementoUID)
                                    const instanciaUID_insertarComplementoUI = data.instanciaUID_insertarComplementoUI
                                    const instanciaUID_contenedorComplementos = data.instanciaUID_contenedorComplementos

                                    const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarComplementoUI}"]`)
                                    const contenedor = ui.querySelector("[componente=contenedor]")
                                    contenedor.innerHTML = null

                                    const spinner = casaVitini.ui.componentes.spinner({
                                        mensaje: "Insertando complemento en el alojamiento..."
                                    })
                                    contenedor.appendChild(spinner)

                                    const transaccion = {
                                        zona: "administracion/simuladorDePrecios/complementosDeAlojamiento/insertarComplementoDeAlojamientoEnSimulacion",
                                        simulacionUID,
                                        complementoUID
                                    }

                                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                    const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_contenedorComplementos}"]`)
                                    if (!uiRenderizada) { return }
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    if (respuestaServidor?.error) {
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const complementoDeAlojamiento = respuestaServidor.complementoDeAlojamiento
                                        const apartamentoIDV_destino = complementoDeAlojamiento.apartamentoIDV

                                        const selectorContenedor = uiRenderizada.querySelector(`[apartamentoIDV="${apartamentoIDV_destino}"] [contenedor=complementos]`)
                                        if (!selectorContenedor) {
                                            return
                                        }

                                        const complementoUI = casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.complementosDeAlojamiento.componentesUI.complementoUI({
                                            complementoUID: complementoDeAlojamiento.complementoUID,
                                            complementoUI: complementoDeAlojamiento.complementoUI,
                                            definicion: complementoDeAlojamiento.definicion,
                                            precio: complementoDeAlojamiento.precio,
                                            tipoPrecio: complementoDeAlojamiento.tipoPrecio,
                                            apartamentoIDV: complementoDeAlojamiento.apartamentoIDV
                                        })
                                        const selectorInfo = selectorContenedor.querySelector("[componente=sinInfo]")
                                        selectorInfo?.remove()

                                        selectorContenedor.appendChild(complementoUI)
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                        const desgloseFinanciero = respuestaServidor?.desgloseFinanciero
                                        if (desgloseFinanciero) {
                                            casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                                destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                                contenedorFinanciero: { desgloseFinanciero },
                                                modoUI: "simulador"
                                            })
                                        }
                                    }

                                },
                            },
                            eliminarComplementoDeAlojamiento: {
                                ui: async function (data) {
                                    const complementoUI = data.complementoUI
                                    const apartamentoIDV = data.apartamentoIDV
                                    const instanciaUID_contenedorComplementosDeAlojamiento = data.instanciaUID_contenedorComplementosDeAlojamiento
                                    const complementoUID_enSimulacion = data.complementoUID_enSimulacion

                                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                    const instanciaUID_eliminarServicio = ui.getAttribute("instanciaUID")
                                    const constructor = ui.querySelector("[componente=constructor]")

                                    const titulo = constructor.querySelector("[componente=titulo]")
                                    titulo.textContent = `Confirmar eliminar el complemento de alojamiento ${complementoUI} de la reserva`
                                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                    mensaje.textContent = "Var a eliminar el complemento de alojamiento de la reserva, ¿Estas de acuerdo?"

                                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                    botonAceptar.textContent = "Comfirmar la eliminacion"
                                    botonAceptar.addEventListener("click", () => {
                                        this.confirmarEliminar({
                                            complementoUID_enSimulacion,
                                            instanciaUID_eliminarServicio,
                                            instanciaUID_contenedorComplementosDeAlojamiento,
                                            apartamentoIDV
                                        })
                                    })
                                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                    botonCancelar.textContent = "Cancelar y volver"
                                    document.querySelector("main").appendChild(ui)

                                },
                                confirmarEliminar: async function (data) {
                                    const complementoUID_enSimulacion = String(data.complementoUID_enSimulacion)
                                    const apartamentoIDV = data.apartamentoIDV
                                    const instanciaUID_eliminarServicio = data.instanciaUID_eliminarServicio
                                    const instanciaUID_contenedorComplementosDeAlojamiento = data.instanciaUID_contenedorComplementosDeAlojamiento
                                    const main = document.querySelector("main")
                                    const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")


                                    const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarServicio}"]`)
                                    const contenedor = ui.querySelector("[componente=constructor]")
                                    contenedor.innerHTML = null

                                    const spinner = casaVitini.ui.componentes.spinner({
                                        mensaje: "Eliminado complemento de alojamiento de la simulación en la reserva..."
                                    })
                                    contenedor.appendChild(spinner)

                                    const respuestaServidor = await casaVitini.shell.servidor({
                                        zona: "administracion/simuladorDePrecios/complementosDeAlojamiento/eliminarComplementoDeAlojamientoEnSimulacion",
                                        complementoUID_enSimulacion
                                    })
                                    if (respuestaServidor?.error) {
                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                    }
                                    if (respuestaServidor?.ok) {
                                        const selectorContenedor = document.querySelector(`[instanciaUID="${instanciaUID_contenedorComplementosDeAlojamiento}"] [apartamentoIDV="${apartamentoIDV}"] [contenedor=complementos]`)
                                        if (!selectorContenedor) {
                                            return
                                        }

                                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                        selectorContenedor.querySelector(`[complentoUID_enSimulacion="${complementoUID_enSimulacion}"]`)?.remove()

                                        const selectorContenedoresDeServiciosRenderizados = selectorContenedor.querySelectorAll("[complentoUID_enSimulacion]")
                                        if (selectorContenedoresDeServiciosRenderizados.length === 0) {
                                            const infoSinEnlaces = casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.complementosDeAlojamiento.componentesUI.infoSinComplemento()
                                            selectorContenedor.appendChild(infoSinEnlaces)
                                        }

                                        const desgloseFinanciero = respuestaServidor?.desgloseFinanciero
                                        if (desgloseFinanciero) {
                                            casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                                destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                                contenedorFinanciero: { desgloseFinanciero },
                                                modoUI: "simulador"
                                            })
                                        }
                                    }

                                },

                            },
                            infoSinComplemento: () => {
                                const info = document.createElement("p")
                                info.classList.add("flexVertical", "textoCentrado", "padding14")
                                info.setAttribute("componente", "sinInfo")
                                info.textContent = "No hay ningún complemento en este alojamiento."
                                return info
                            },
                            complementoUI: (data) => {
                                const complementoUID = data.complementoUID
                                const complementoUI = data.complementoUI
                                const definicion = data.definicion
                                const precio = data.precio
                                const tipoPrecio = data.tipoPrecio
                                const apartamentoIDV = data.apartamentoIDV


                                const renderizaPrecio = (data) => {
                                    const precio = data.precio
                                    const tipoPrecio = data.tipoPrecio
                                    if (tipoPrecio === "fijoPorReserva") {
                                        return `${precio}$ Total`
                                    } else if (tipoPrecio === "porNoche") {
                                        return `${precio}$ / Por noche`
                                    }
                                }


                                const ui = document.createElement("div")
                                ui.setAttribute("complentoUID_enSimulacion", complementoUID)
                                ui.setAttribute("apartamentoIDV", apartamentoIDV)
                                ui.style.alignItems = "start"
                                ui.classList.add(
                                    "gridHorizontal2C-1fr-min",
                                    "gap6",
                                    "padding6",
                                    "borderRadius12",
                                    "backgroundGrey1"
                                )

                                const dataCont = document.createElement("div")
                                dataCont.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "padding6",
                                )
                                ui.appendChild(dataCont)


                                const n = document.createElement("p")
                                n.classList.add(
                                    "negrita",
                                )
                                n.textContent = complementoUI
                                dataCont.appendChild(n)


                                const p = document.createElement("p")
                                p.classList.add(
                                    //   "padding14"
                                )
                                p.textContent = renderizaPrecio({
                                    tipoPrecio,
                                    precio
                                })
                                dataCont.appendChild(p)


                                const d = document.createElement("p")
                                d.classList.add(
                                    //  "padding14"
                                )
                                d.textContent = definicion
                                dataCont.appendChild(d)

                                const b = document.createElement("div")
                                b.style.borderRadius = "10px"
                                b.classList.add("botonV1")
                                b.addEventListener("click", (e) => {
                                    const instanciaUID_contenedorComplementosDeAlojamiento = e.target.closest("[componente=complementosDeAlojamiento]").getAttribute("instanciaUID")

                                    casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.complementosDeAlojamiento.componentesUI.eliminarComplementoDeAlojamiento.ui({
                                        complementoUI,
                                        instanciaUID_contenedorComplementosDeAlojamiento,
                                        complementoUID_enSimulacion: complementoUID,
                                        apartamentoIDV
                                    })
                                })
                                b.textContent = "Eliminar"
                                ui.appendChild(b)

                                return ui
                            },
                            apartamentoUI: function (data) {
                                const apartamentoUI = data.apartamentoUI
                                const apartamentoUID = data.apartamentoUID
                                const apartamentoIDV = data.apartamentoIDV
                                const instanciaUID_contenedorComplementos = data.instanciaUID_contenedorComplementos


                                const ui = document.createElement("div")
                                ui.setAttribute("apartamentoUID", apartamentoUID)
                                ui.setAttribute("apartamentoIDV", apartamentoIDV)
                                ui.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "padding6",
                                    "borderRadius12",
                                    "backgroundGrey1"
                                )

                                const n = document.createElement("p")
                                n.classList.add(
                                    "negrita",
                                    "padding14"
                                )
                                n.textContent = apartamentoUI
                                ui.appendChild(n)

                                const contBo = document.createElement("div")
                                contBo.classList.add("flexHorizontal")
                                ui.appendChild(contBo)

                                const b = document.createElement("div")
                                b.classList.add("botonV3")
                                b.textContent = "Añadir complemento de alojamiento"
                                b.addEventListener("click", () => {
                                    this.insertarComplementoEnAlojamiento.ui({
                                        instanciaUID_contenedorComplementos,
                                        apartamentoIDV,
                                    })
                                })
                                contBo.appendChild(b)

                                const c = document.createElement("div")
                                c.setAttribute("contenedor", "complementos")
                                c.classList.add(
                                    "flexVertical",
                                    "gap6",
                                )
                                c.appendChild(this.infoSinComplemento())
                                ui.appendChild(c)
                                return ui
                            }
                        },
                    },
                    insertarDescuentos: {
                        ui: async function (data) {
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const instanciaUID_insertarDescuentosUI = ui.getAttribute("instanciaUID")
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            main.appendChild(ui)
                            const constructor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo ofertas...",
                                textoBoton: "Cancelar"
                            })
                            constructor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/ofertas/listasOfertasAdministracion"
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                            if (!uiRenderizada) { return }
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                spinner.remove()
                                constructor.appendChild(this.botonCancelar())

                                const ofertas = respuestaServidor.ok

                                const contenedorOfertas = document.createElement("div")
                                contenedorOfertas.classList.add(
                                    "maxWidth1280px",
                                    "width100",
                                    "flexVertical",
                                    "gap6",
                                )
                                constructor.appendChild(contenedorOfertas)
                                const estadoUI_ = (estadoIDV) => {

                                    if (estadoIDV === "activado") {
                                        return "Activada"
                                    } else if (estadoIDV === "desactivado") {
                                        return "Desactivada"
                                    }

                                }

                                ofertas.forEach((detalles) => {
                                    const nombreOferta = detalles.nombreOferta
                                    const ofertaUID = detalles.ofertaUID
                                    const fechaInicio = detalles.fechaInicio
                                    const fechaFinal = detalles.fechaFinal
                                    const estadoIDV = detalles.estadoIDV
                                    const zonaIDV = detalles.zonaIDV


                                    const contenedorOferta = document.createElement("div")
                                    contenedorOferta.setAttribute("ofertaUID", ofertaUID)
                                    contenedorOferta.classList.add(
                                        "borderRadius12",
                                        "width100",
                                        "flexVertical",
                                        "backgroundGrey1",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorGlobal = document.createElement("div")

                                    const nombreOfertaUI = document.createElement("div")
                                    nombreOfertaUI.classList.add("negrita")
                                    nombreOfertaUI.textContent = nombreOferta
                                    contenedorGlobal.appendChild(nombreOfertaUI)

                                    const estadoTitulo = document.createElement("div")
                                    estadoTitulo.textContent = "Estado de la oferta"
                                    contenedorGlobal.appendChild(estadoTitulo)


                                    const estadoUI = document.createElement("div")
                                    estadoUI.classList.add("negrita")
                                    estadoUI.textContent = estadoUI_(estadoIDV)
                                    contenedorGlobal.appendChild(estadoUI)
                                    contenedorOferta.appendChild(contenedorGlobal)

                                    const contendorBotones = document.createElement("div")
                                    contendorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6",
                                    )

                                    const botonInsertar = document.createElement("div")
                                    botonInsertar.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8"
                                    )
                                    botonInsertar.textContent = "Insertar descuento en la reserva"
                                    botonInsertar.addEventListener("click", () => {
                                        this.confirmarInsertar({
                                            simulacionUID,
                                            ofertaUID,
                                            instanciaUID_insertarDescuentosUI,
                                            instanciaUID_contenedorFinanciero
                                        })

                                    })
                                    contendorBotones.appendChild(botonInsertar)

                                    const botonVerOferta = document.createElement("a")
                                    botonVerOferta.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8",
                                        "limpiezaBotonA"
                                    )
                                    botonVerOferta.textContent = "Ir a la oferta"
                                    botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                    botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                    botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contendorBotones.appendChild(botonVerOferta)


                                    contenedorOferta.appendChild(contendorBotones)

                                    contenedorOfertas.appendChild(contenedorOferta)
                                })
                                constructor.appendChild(this.botonCancelar())

                            }

                        },
                        botonCancelar: () => {
                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.textContent = "Cerrar y volver a la reserva"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            return botonCancelar
                        },
                        confirmarInsertar: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const ofertaUID = String(data.ofertaUID)
                            const instanciaUID_insertarDescuentosUI = data.instanciaUID_insertarDescuentosUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            contenedor.innerHTML = null

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Insertando oferta en la reserva..."
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/insertarDescuentoPorAdministrador",
                                simulacionUID,
                                ofertaUID
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }

                        },
                    },
                    insertarOfertasCompatibles: {
                        ui: async function (data) {
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const instanciaUID_insertarDescuentosUI = ui.getAttribute("instanciaUID")
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            main.appendChild(ui)
                            const constructor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo ofertas compatibles con la oferta...",
                                textoBoton: "Cancelar"
                            })
                            constructor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/obtenerDescuentosCompatiblesConLaSimulacion",
                                simulacionUID
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                            if (!uiRenderizada) { return }
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {


                                const ofertas = respuestaServidor.ofertasCompatibles


                                spinner.remove()
                                if (ofertas.length > 0) {
                                    constructor.appendChild(this.botonCancelar())

                                } else {
                                    const info = document.createElement("p")
                                    info.classList.add(
                                        "textoCentrado"
                                    )
                                    info.textContent = "No hay ofertas compatibles con esta reserva. Si quieres insertar ofertas no compatibles de manera arbitraria, a esta reserva usa el botón de insertar descuentos."
                                    constructor.appendChild(info)

                                }
                                const contenedorOfertas = document.createElement("div")
                                contenedorOfertas.classList.add(
                                    "maxWidth1280px",
                                    "width100",
                                    "flexVertical",
                                    "gap6",
                                )
                                constructor.appendChild(contenedorOfertas)

                                const estadoUI_ = (estadoIDV) => {

                                    if (estadoIDV === "activado") {
                                        return "Activada"
                                    } else if (estadoIDV === "desactivado") {
                                        return "Desactivada"
                                    }
                                }

                                ofertas.forEach((contenedorOferta) => {
                                    const detalles = contenedorOferta.oferta
                                    const nombreOferta = detalles.nombreOferta
                                    const ofertaUID = detalles.ofertaUID
                                    const fechaInicio = detalles.fechaInicio
                                    const fechaFinal = detalles.fechaFinal
                                    const estadoIDV = detalles.estadoIDV
                                    const zonaIDV = detalles.zonaIDV

                                    const contenedorOfertaUI = document.createElement("div")
                                    contenedorOfertaUI.setAttribute("ofertaUID", ofertaUID)
                                    contenedorOfertaUI.classList.add(
                                        "borderRadius12",
                                        "width100",
                                        "flexVertical",
                                        "backgroundGrey1",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorGlobal = document.createElement("div")

                                    const nombreOfertaUI = document.createElement("div")
                                    nombreOfertaUI.classList.add("negrita")
                                    nombreOfertaUI.textContent = nombreOferta
                                    contenedorGlobal.appendChild(nombreOfertaUI)

                                    const estadoTitulo = document.createElement("div")
                                    estadoTitulo.textContent = "Estado de la oferta"
                                    contenedorGlobal.appendChild(estadoTitulo)

                                    const estadoUI = document.createElement("div")
                                    estadoUI.classList.add("negrita")
                                    estadoUI.textContent = estadoUI_(estadoIDV)
                                    contenedorGlobal.appendChild(estadoUI)
                                    contenedorOfertaUI.appendChild(contenedorGlobal)

                                    const contendorBotones = document.createElement("div")
                                    contendorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6",
                                    )

                                    const botonInsertar = document.createElement("div")
                                    botonInsertar.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8"
                                    )

                                    botonInsertar.textContent = "Insertar descuento en la reserva"
                                    botonInsertar.addEventListener("click", () => {
                                        this.confirmarInsertarCompatible({
                                            simulacionUID,
                                            ofertaUID,
                                            instanciaUID_insertarDescuentosUI,
                                            instanciaUID_contenedorFinanciero
                                        })
                                    })
                                    contendorBotones.appendChild(botonInsertar)

                                    const botonVerOferta = document.createElement("a")
                                    botonVerOferta.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8",
                                        "limpiezaBotonA"
                                    )
                                    botonVerOferta.textContent = "Ir a la oferta"
                                    botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                    botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                    botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contendorBotones.appendChild(botonVerOferta)

                                    contenedorOfertaUI.appendChild(contendorBotones)

                                    contenedorOfertas.appendChild(contenedorOfertaUI)
                                })
                                constructor.appendChild(this.botonCancelar())

                            }

                        },
                        botonCancelar: () => {
                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.textContent = "Cerrar y volver a la reserva"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            return botonCancelar
                        },
                        confirmarInsertarCompatible: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const ofertaUID = String(data.ofertaUID)
                            const instanciaUID_insertarDescuentosUI = data.instanciaUID_insertarDescuentosUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarDescuentosUI}"]`)
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            contenedor.innerHTML = null

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Insertando oferta en la reserva..."
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/insertarDescuentoPorCompatible",
                                simulacionUID,
                                ofertaUID
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }

                        },

                    },
                    sobreControlPrecios: {
                        botonAlterarPrecio: () => {
                            const botonDeslegarOpciones = document.createElement("div")
                            botonDeslegarOpciones.classList.add(
                                "padding6",
                                "botonV1",
                                "comportamientoBoton"
                            )
                            botonDeslegarOpciones.textContent = "Alterar precio"
                            return botonDeslegarOpciones
                        },
                        nocheUI: async function (data) {
                            const fechaNoche = data.fechaNoche
                            const apartamentoIDV = data.apartamentoIDV
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const instanciaUID_sobreControlUI = ui.getAttribute("instanciaUID")
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            main.appendChild(ui)
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo detalles de la noche...",
                                textoBoton: "Cancelar"
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/sobreControlPrecios/obtenerDetallesSobreControlNoche",
                                simulacionUID,
                                apartamentoIDV: apartamentoIDV,
                                fechaNoche: fechaNoche
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)

                            if (!uiRenderizada) { return }
                            if (respuestaServidor?.error) {
                                uiRenderizada?.remove()
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor.ok) {
                                contenedor.innerHTML = null

                                const data = respuestaServidor.ok
                                const instantanea = data.instantaneaNetoApartamento
                                const apartamentoUI = instantanea.apartamentoUI
                                const precioNetoApartamento = instantanea.precioNetoApartamento

                                const sobreControl = data?.sobreControl
                                const detallesSobreControl = sobreControl.detallesSobreControl || {}
                                const operacion = detallesSobreControl?.operacion
                                const valorSobreControl = detallesSobreControl?.valor || "0.00"

                                const titulo = document.createElement("div")
                                titulo.classList.add(
                                    "textSize16",
                                    "textoCentrado"
                                )
                                titulo.textContent = `Detalles del ${apartamentoUI} en la noche de ${fechaNoche}`
                                contenedor.appendChild(titulo)

                                const contenedorValorOrigen = document.createElement("div")
                                contenedorValorOrigen.classList.add(
                                    "flexVertical",
                                    "backgroundGrey1",
                                    "padding12",
                                    "borderRadius8"
                                )
                                contenedor.appendChild(contenedorValorOrigen)

                                const tituloValorOrigen = document.createElement("div")
                                tituloValorOrigen.textContent = "Valor origen"
                                contenedorValorOrigen.appendChild(tituloValorOrigen)

                                const datoValorOrigen = document.createElement("div")
                                datoValorOrigen.classList.add(
                                    "negrita"
                                )
                                datoValorOrigen.textContent = precioNetoApartamento
                                contenedorValorOrigen.appendChild(datoValorOrigen)

                                const selectorTipoSobreControl = document.createElement("select")
                                selectorTipoSobreControl.classList.add(
                                    "selectorLista"
                                )
                                selectorTipoSobreControl.setAttribute("campo", "tipoOperacion")

                                const tituloSelector = document.createElement("option");
                                if (!operacion) {
                                    tituloSelector.selected = true;
                                }
                                tituloSelector.disabled = true;
                                tituloSelector.text = "Seleccionar el tipo de sobre control";
                                selectorTipoSobreControl.appendChild(tituloSelector);

                                const opciones = [
                                    { value: "aumentarPorPorcentaje", text: "Aumentar por porcentaje" },
                                    { value: "reducirPorPorcentaje", text: "Reducir por porcentaje" },
                                    { value: "aumentarPorCantidadFija", text: "Aumentar por cantidad fija" },
                                    { value: "reducirPorCantidadFila", text: "Reducir por cantidad fila" },
                                    { value: "establecerCantidad", text: "Establecer cantidad" }
                                ]
                                for (const opcionData of opciones) {
                                    const value = opcionData.value
                                    const text = opcionData.text
                                    const opcion = document.createElement("option");
                                    opcion.value = opcionData.value;
                                    opcion.text = opcionData.text;
                                    if (operacion === value) {
                                        opcion.selected = true;
                                    }
                                    selectorTipoSobreControl.appendChild(opcion);
                                }
                                contenedor.appendChild(selectorTipoSobreControl)
                                const campoValor = document.createElement("input")
                                campoValor.classList.add(
                                    "campoTexto"
                                )
                                campoValor.setAttribute("campo", "valor")
                                campoValor.placeholder = "Escribe la cantidad con dos decimales separados por punto, por ejemplo 0.00"
                                campoValor.value = valorSobreControl

                                contenedor.appendChild(campoValor)


                                if (Object.keys(detallesSobreControl).length > 0) {
                                    const boton = document.createElement("div")
                                    boton.classList.add("boton")
                                    boton.textContent = "Actualizar sobre control de precio"
                                    boton.addEventListener("click", () => {
                                        this.confirmar({
                                            instanciaUID_sobreControlUI,
                                            instanciaUID_contenedorFinanciero,
                                            simulacionUID,
                                            apartamentoIDV,
                                            tipoOperacion: selectorTipoSobreControl.value,
                                            fechaNoche,
                                            valorSobreControl: campoValor.value
                                        })
                                    })
                                    contenedor.appendChild(boton)
                                    const botonEliminar = document.createElement("div")
                                    botonEliminar.classList.add("boton")
                                    botonEliminar.textContent = "Eliminar sobre control de precio"
                                    botonEliminar.addEventListener("click", () => {
                                        this.eliminarSobreControl({
                                            instanciaUID_sobreControlUI,
                                            instanciaUID_contenedorFinanciero,
                                            simulacionUID,
                                            apartamentoIDV,
                                            fechaNoche
                                        })
                                    })
                                    contenedor.appendChild(botonEliminar)
                                } else {
                                    const boton = document.createElement("div")
                                    boton.classList.add("boton")
                                    boton.textContent = "Crear sobre control de precio"
                                    boton.addEventListener("click", () => {
                                        this.confirmar({
                                            instanciaUID_sobreControlUI,
                                            instanciaUID_contenedorFinanciero,
                                            simulacionUID,
                                            apartamentoIDV,
                                            tipoOperacion: selectorTipoSobreControl.value,
                                            fechaNoche,
                                            valorSobreControl: campoValor.value
                                        })
                                    })
                                    contenedor.appendChild(boton)
                                }

                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.textContent = "Cancelar y volver al desglose por noche."
                                botonCancelar.addEventListener("click", () => {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCancelar)
                            }
                        },
                        confirmar: async function (data) {
                            const instanciaUID_sobreControlUI = data.instanciaUID_sobreControlUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = data.simulacionUID
                            const apartamentoIDV = data.apartamentoIDV
                            const tipoOperacion = data.tipoOperacion
                            const fechaNoche = data.fechaNoche
                            const valorSobreControl = data.valorSobreControl
                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/sobreControlPrecios/actualizarSobreControlNoche",
                                simulacionUID,
                                apartamentoIDV,
                                fechaNoche,
                                tipoOperacion,
                                valorSobreControl
                            }
                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                            const contenedor = uiRenderizada.querySelector("[componente=contenedor]")


                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                mensaje: "Aplicando sobrecontrol de precio",
                                textoBoton: "ocultar",
                                instanciaUID: instanciaPantallaCarga
                            })

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaPantallaCargaUI = document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`)
                            instanciaPantallaCargaUI?.remove()

                            const uiContenedorFinanciero = document.querySelector(`[instanciaUID="${instanciaUID_contenedorFinanciero}"]`)


                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor.ok) {
                                const sobreControlUI = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                if (sobreControlUI) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                }

                                const selectorDesgloseEnPantalla = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                if (!selectorDesgloseEnPantalla) {
                                    return
                                }
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })

                            }
                        },
                        eliminarSobreControl: async (data) => {
                            const instanciaUID_sobreControlUI = data.instanciaUID_sobreControlUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = data.simulacionUID
                            const apartamentoIDV = data.apartamentoIDV
                            const fechaNoche = data.fechaNoche
                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/sobreControlPrecios/eliminarSobreControlNoche",
                                simulacionUID,
                                apartamentoIDV,
                                fechaNoche
                            }
                            const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                            const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                mensaje: "Eliminado sobrecontrol de precio",
                                textoBoton: "ocultar",
                                instanciaUID: instanciaPantallaCarga
                            })

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaPantallaCargaUI = document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`)
                            instanciaPantallaCargaUI?.remove()

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor.ok) {
                                const sobreControlUI = document.querySelector(`[instanciaUID="${instanciaUID_sobreControlUI}"]`)
                                if (sobreControlUI) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                }

                                const selectorDesgloseEnPantalla = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                if (!selectorDesgloseEnPantalla) {
                                    return
                                }
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }
                        }

                    },
                    eliminarOfertaEnSimulacion: {
                        ui: async function (data) {

                            const nombreOferta = data.nombreOferta
                            const ofertaUID = data.ofertaUID
                            const posicion = data.posicion
                            const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const origen = data.origen

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const instanciaUID = pantallaInmersiva.getAttribute("instanciaUID")
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.classList.add(
                                "negrita"
                            )
                            titulo.textContent = nombreOferta
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = `Confirmas o no la eliminación de la oferta de la reserva, ¿Estas de acuerdo?`

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = "Confirmar la eliminación de la oferta de esta reserva"
                            botonAceptar.addEventListener("click", () => {
                                this.confirmar({
                                    simulacionUID,
                                    ofertaUID,
                                    posicion,
                                    origen,
                                    instanciaUID
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar y volver a la reserva"
                            document.querySelector("main").appendChild(pantallaInmersiva)

                        },
                        confirmar: async (data) => {

                            const ofertaUID = data.ofertaUID
                            const posicion = data.posicion
                            const simulacionUID = data.simulacionUID
                            const origen = data.origen

                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Elimiando oferta de la reserva..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/eliminarDescuentoEnSimulacion",
                                simulacionUID: String(simulacionUID),
                                ofertaUID: String(ofertaUID),
                                origen,
                                posicion: String(posicion)
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            instanciaRenderizada.remove()

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }
                        }

                    },
                    actualizarEstadoAutorizacion: async (data) => {

                        const ofertaUID = data.ofertaUID
                        const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                        const e = data.e
                        const area = e.target.closest("[ofertaUID][posicion]")
                        const autorizacionUI = area.querySelector("[dato=autorizacion]")
                        const estadoActualData = area.querySelector("[estadoActual]")
                        const estadoActual = estadoActualData.getAttribute("estadoActual")

                        const transaccion = {
                            zona: "administracion/simuladorDePrecios/descuentos/actualizarAutorizacionDescuentoCompatible",
                            simulacionUID: String(simulacionUID),
                            ofertaUID: String(ofertaUID),
                        }

                        if (estadoActual === "aceptada") {
                            autorizacionUI.textContent = "Rechazando..."
                            transaccion.nuevaAutorizacion = "rechazada"
                        } else if (estadoActual === "rechazada") {
                            autorizacionUI.textContent = "Aceptando..."
                            transaccion.nuevaAutorizacion = "aceptada"
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const estadoAutorizado = respuestaServidor.autorizacion
                            estadoActualData.setAttribute("estadoActual", estadoAutorizado)
                            if (estadoAutorizado === "aceptada") {
                                autorizacionUI.textContent = "Aceptada"
                                estadoActualData.textContent = "Rechazar oferta"
                            } else if (estadoAutorizado === "rechazada") {
                                autorizacionUI.textContent = "Rechazada"
                                estadoActualData.textContent = "Aceptar oferta"
                            }
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                simulacionUID
                            })
                        }
                    },
                    insertarImpuesto: {
                        ui: async function (data) {
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const instanciaUID_insertarImpuestoUI = ui.getAttribute("instanciaUID")
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            main.appendChild(ui)
                            const constructor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo impuestos...",
                                textoBoton: "Cancelar"
                            })
                            constructor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/impuestos/listarTodosLosImpuestos"
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_insertarImpuestoUI}"]`)
                            if (!uiRenderizada) { return }
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                spinner.remove()
                                constructor.appendChild(this.botonCancelar())

                                const impuestos = respuestaServidor.impuestos

                                const contenedorOfertas = document.createElement("div")
                                contenedorOfertas.classList.add(
                                    "maxWidth1280px",
                                    "width100",
                                    "flexVertical",
                                    "gap6",
                                )
                                constructor.appendChild(contenedorOfertas)
                                const estadoUI_ = (estadoIDV) => {

                                    if (estadoIDV === "activado") {
                                        return "Activada"
                                    } else if (estadoIDV === "desactivado") {
                                        return "Desactivada"
                                    }

                                }

                                impuestos.forEach((impuesto) => {
                                    const impuestoUID = impuesto.impuestoUID
                                    const nombre = impuesto.nombre
                                    const tipoImpositivo = impuesto.tipoImpositivo
                                    const tipoValorIDV = impuesto.tipoValorIDV
                                    const entidadIDV = impuesto.entidadIDV
                                    const estadoIDV = impuesto.estadoIDV


                                    const contenedorOferta = document.createElement("div")
                                    contenedorOferta.setAttribute("impuestoUID", impuestoUID)
                                    contenedorOferta.classList.add(
                                        "borderRadius12",
                                        "width100",
                                        "flexVertical",
                                        "backgroundGrey1",
                                        "padding6",
                                        "gap6"
                                    )

                                    const contenedorGlobal = document.createElement("div")

                                    const nombreOfertaUI = document.createElement("div")
                                    nombreOfertaUI.classList.add("negrita")
                                    nombreOfertaUI.textContent = nombre
                                    contenedorGlobal.appendChild(nombreOfertaUI)

                                    const estadoTitulo = document.createElement("div")
                                    estadoTitulo.textContent = "Estado del impuesto"
                                    contenedorGlobal.appendChild(estadoTitulo)


                                    const estadoUI = document.createElement("div")
                                    estadoUI.classList.add("negrita")
                                    estadoUI.textContent = estadoUI_(estadoIDV)
                                    contenedorGlobal.appendChild(estadoUI)
                                    contenedorOferta.appendChild(contenedorGlobal)

                                    const contendorBotones = document.createElement("div")
                                    contendorBotones.classList.add(
                                        "flexHorizontal",
                                        "gap6",
                                    )

                                    const botonInsertar = document.createElement("div")
                                    botonInsertar.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8"
                                    )
                                    botonInsertar.textContent = "Insertar impuesto en la reserva"
                                    botonInsertar.addEventListener("click", () => {
                                        this.confirmarInsertar({
                                            simulacionUID,
                                            impuestoUID,
                                            instanciaUID_insertarImpuestoUI,
                                            instanciaUID_contenedorFinanciero
                                        })
                                    })
                                    contendorBotones.appendChild(botonInsertar)

                                    const botonVerOferta = document.createElement("a")
                                    botonVerOferta.classList.add(
                                        "borderRadius8",
                                        "backgroundGrey1",
                                        "comportamientoBoton",
                                        "padding8",
                                        "limpiezaBotonA"
                                    )
                                    botonVerOferta.textContent = "Ir al impuesto"
                                    botonVerOferta.setAttribute("href", "/administracion/impuestos/" + impuestoUID)
                                    botonVerOferta.setAttribute("vista", "/administracion/impuestos/" + impuestoUID)
                                    botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contendorBotones.appendChild(botonVerOferta)


                                    contenedorOferta.appendChild(contendorBotones)

                                    contenedorOfertas.appendChild(contenedorOferta)
                                })
                                constructor.appendChild(this.botonCancelar())

                            }

                        },
                        botonCancelar: () => {
                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.textContent = "Cerrar y volver a la reserva"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            return botonCancelar
                        },
                        confirmarInsertar: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const impuestoUID = String(data.impuestoUID)
                            const instanciaUID_insertarImpuestoUI = data.instanciaUID_insertarImpuestoUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarImpuestoUI}"]`)
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            contenedor.innerHTML = null

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Insertando oferta en la reserva..."
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/impuestos/insertarImpuestoEnSimulacion",
                                impuestoUID,
                                simulacionUID
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }
                        },

                    },
                    eliminarImpuesto: {
                        ui: async function (data) {
                            const nombreImpuesto = data.nombreImpuesto
                            const impuestoUID = data.impuestoUID
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                            const instanciaUID_eliminarImpuestoUI = pantallaInmersiva.getAttribute("instanciaUID")


                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = `Confirmar eliminar impuesto ${nombreImpuesto} de la reserva`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = "Var a eliminar el impuesto de la reserva, ¿Estas de acuerdo ? "

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = "Comfirmar la eliminacion"
                            botonAceptar.addEventListener("click", () => {
                                this.confirmarEliminar({
                                    impuestoUID,
                                    simulacionUID,
                                    instanciaUID_contenedorFinanciero,
                                    instanciaUID_eliminarImpuestoUI
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar y volver"

                            document.querySelector("main").appendChild(pantallaInmersiva)

                        },
                        confirmarEliminar: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const impuestoUID = String(data.impuestoUID)
                            const instanciaUID_eliminarImpuestoUI = data.instanciaUID_eliminarImpuestoUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero



                            const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarImpuestoUI}"]`)
                            const contenedor = ui.querySelector("[componente=constructor]")
                            contenedor.innerHTML = null

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Eliminado impuesto en la reserva..."
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/impuestos/eliminarImpuestoEnSimulacion",
                                simulacionUID,
                                impuestoUID
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }

                        },

                    },
                    crearImpuestoAdHoc: {
                        ui: async function (data) {
                            const nombreImpuesto = data.nombreImpuesto
                            const impuestoUID = data.impuestoUID
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                            const instanciaUID_eliminarImpuestoUI = pantallaInmersiva.getAttribute("instanciaUID")
                            const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = `Crear impuesto dedicado solo para esta reserva`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = "Rellena el formulario para crear un impuesto solo para esta reserva.Este impuesto creado solo existirá en esta reserva.Si necesitas crear un impuesto que quieras usar para insertar en reservas, pero que no se aplique, crea un impuesto en la sección de impuesto y mantenlo desactivado."

                            const contenedorFormulario = document.createElement("div")
                            contenedorFormulario.classList.add(
                                "flexVertical",
                                "gap6"
                            )
                            contenedor.appendChild(contenedorFormulario)


                            const campoCraerNuevoImpuesto = document.createElement("input")
                            campoCraerNuevoImpuesto.classList.add(
                                "padding10",
                                "borderRadius10"

                            )
                            campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "nombreImpuesto")
                            campoCraerNuevoImpuesto.placeholder = "Escribo el nombre del nuevo impuesto"
                            contenedorFormulario.appendChild(campoCraerNuevoImpuesto)

                            const campoTipoImpositivo = document.createElement("input")
                            campoTipoImpositivo.classList.add(
                                "padding10",
                                "borderRadius10"
                            )
                            campoTipoImpositivo.setAttribute("comNuevoImpuesto", "tipoImpositivo")
                            campoTipoImpositivo.placeholder = "0.00"
                            contenedorFormulario.appendChild(campoTipoImpositivo)

                            const contenedorOpciones = document.createElement("select")
                            contenedorOpciones.classList.add(
                                "padding10",
                                "borderRadius10",
                                "selectorLista"
                            )
                            contenedorOpciones.setAttribute("comNuevoImpuesto", "tipoValor")
                            const tipoValorLista = [
                                {
                                    tipoValorIDV: "",
                                    tipoValorUI: "Selecciona el tipo de impuesto"
                                },
                                {
                                    tipoValorIDV: "porcentaje",
                                    tipoValorUI: "Porcentaje"
                                },
                                {
                                    tipoValorIDV: "tasa",
                                    tipoValorUI: "Tasa"
                                },

                            ]
                            tipoValorLista.forEach((contenedorTipoValor) => {
                                const tipoValorIDV = contenedorTipoValor.tipoValorIDV
                                const tipoValorUI = contenedorTipoValor.tipoValorUI
                                const opcion = document.createElement("option");
                                if (!tipoValorIDV) {
                                    opcion.selected = true;
                                    opcion.disabled = true;

                                }
                                opcion.value = tipoValorIDV;
                                opcion.text = tipoValorUI;
                                opcion.setAttribute("opcion", tipoValorIDV)
                                contenedorOpciones.add(opcion);
                            })
                            contenedorFormulario.appendChild(contenedorOpciones)


                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = "Crear impuesto dedicado para esta reserva"
                            botonAceptar.addEventListener("click", () => {
                                this.confirmarCrearImpuestoAdHoc({
                                    simulacionUID,
                                    instanciaUID_contenedorFinanciero,
                                    instanciaUID_eliminarImpuestoUI,
                                    nombreImpuesto: campoCraerNuevoImpuesto.value,
                                    tipoImpositivo: campoTipoImpositivo.value,
                                    tipoValorIDV: contenedorOpciones.value

                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar y volver"

                            document.querySelector("main").appendChild(pantallaInmersiva)

                        },
                        confirmarCrearImpuestoAdHoc: async function (data) {
                            const simulacionUID = data.simulacionUID
                            const nombreImpuesto = data.nombreImpuesto
                            const tipoImpositivo = data.tipoImpositivo
                            const tipoValorIDV = data.tipoValorIDV

                            const instanciaUID_eliminarImpuestoUI = data.instanciaUID_eliminarImpuestoUI
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                            const instanciaUID_pantallaDeCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()

                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID_pantallaDeCargaSuperPuesta,
                                mensaje: "Creando impuesto dedicado e insertando en la reserva..."
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/impuestos/insertarImpuestoDedicadoEnSimulacion",
                                simulacionUID,
                                nombreImpuesto,
                                tipoImpositivo,
                                tipoValorIDV,
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCargaSuperPuesta}"]`)?.remove()

                            const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                            if (!uiRenderizada) { return }

                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                    simulacionUID
                                })
                            }
                        },

                    },
                    reconstruirDesgloseFinanciero: {
                        ui: async function (data) {
                            const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                            const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")
                            const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")
                            document.querySelector("main").appendChild(pantallaInmersiva)



                            const tituloUI = document.createElement("p")
                            tituloUI.classList.add("tituloGris")
                            tituloUI.setAttribute("componente", "titulo")
                            tituloUI.textContent = `Elige el origen de la reconstrucion del desglose financiero de la reserva ${simulacionUID}`
                            contenedor.appendChild(tituloUI)



                            const mensajeUI = document.createElement("div")
                            mensajeUI.classList.add("mensajeUI")
                            mensajeUI.setAttribute("componente", "mensajeUI")
                            mensajeUI.textContent = "Esta operación reconstruye el desglose financiero.Reconstruir desde la instantánea regenera el desglose financiero desde las instantáneas del contenedor financiero de la reserva.Esta operación es útil si no se ha reconstituido por alguna razón el desglose financiero correctamente tras alguna operación."
                            contenedor.appendChild(mensajeUI)


                            const botonDesdeInstantaneas = document.createElement("div")
                            botonDesdeInstantaneas.classList.add("boton")
                            botonDesdeInstantaneas.setAttribute("boton", "aceptar")
                            botonDesdeInstantaneas.textContent = "Reconstruir desde instantaneas"
                            botonDesdeInstantaneas.addEventListener("click", () => {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                this.desdeInstantaneas.ui({
                                    simulacionUID,
                                    instanciaUID_contenedorFinanciero,
                                    instanciaUID_reconstrucion
                                })
                            })
                            contenedor.appendChild(botonDesdeInstantaneas)


                            const mensajeUI_ = document.createElement("div")
                            mensajeUI_.classList.add("mensajeUI")
                            mensajeUI_.setAttribute("componente", "mensajeUI")
                            mensajeUI_.textContent = "Reconstruir el desglose financiero desde el hub, reconstruirá el desglose financiero actualizando las instantáneas de la reserva desde el hub de precios base, comportamiento de precios y ofertas actualmente configurados.Esta operación es irreversible y puede ser útil cuando necesito actualizar ciertos datos del contenedor financiero de la reserva desde los hubs de origen."
                            contenedor.appendChild(mensajeUI_)

                            const botonDesdeHub = document.createElement("div")
                            botonDesdeHub.classList.add("boton")
                            botonDesdeHub.setAttribute("boton", "aceptar")
                            botonDesdeHub.textContent = "Reconstruir desde el hub"
                            botonDesdeHub.addEventListener("click", () => {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                this.desdeHub.ui({
                                    simulacionUID,
                                    instanciaUID_contenedorFinanciero,
                                    instanciaUID_reconstrucion
                                })

                            })

                            contenedor.appendChild(botonDesdeHub)

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.textContent = "Cancelar y volver"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            contenedor.appendChild(botonCancelar)

                        },
                        desdeInstantaneas: {
                            ui: async function (data) {
                                const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")


                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Confirmar reconstruir el desglose de la reserva ${simulacionUID} de las instantaneas`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = "Esta operación reconstruye el desglose financiero.Sí ha ocurrido un algún tipo de error en algún cálculo durante la construcción del desglose financiero, esta opción podría recuperar la interferencia del desglose financiero."

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.textContent = "Comfirmar la reconstrucción"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarReconstrucion({
                                        simulacionUID,
                                        instanciaUID_contenedorFinanciero,
                                        instanciaUID_reconstrucion
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"

                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            confirmarReconstrucion: async function (data) {
                                const simulacionUID = data.simulacionUID
                                const instanciaUID_reconstrucion = data.instanciaUID_reconstrucion
                                const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero

                                const ui = document.querySelector(`[instanciaUID="${instanciaUID_reconstrucion}"]`)
                                const contenedor = ui.querySelector("[componente=constructor]")
                                contenedor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Reconstruyendo el desglose financiero desde las instantáneas de la reserva..."
                                })
                                contenedor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/simuladorDePrecios/contenedorFinanciero/reconstruirDesgloseDesdeInstantaneas",
                                    simulacionUID
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                if (!uiRenderizada) { return }

                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                        simulacionUID
                                    })
                                }

                            },
                        },
                        desdeHub: {
                            ui: async function (data) {
                                const instanciaUID_contenedorFinanciero = data.instanciaUID_contenedorFinanciero
                                const simulacionUID = document.querySelector("main").querySelector("[simulacionUID]").getAttribute("simulacionUID")

                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const instanciaUID_reconstrucion = pantallaInmersiva.getAttribute("instanciaUID")
                                const contenedor = pantallaInmersiva.querySelector("[componente=contenedor]")
                                contenedor.classList.add(
                                    "flexVertical"
                                )



                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Confirmar reconstruir el desglose de la reserva ${simulacionUID} desde el hub (Operación irreversible)`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = "Esta operación reconstruye el desglose financiero, actualizando las instantáneas desde el hub de precios base, comportamientos de precio, ofertas e impuestos.Esta operación es irreversible porque sobrescribe los datos actuales de las instantáneas y reconstruye todo el contenedor financiero de la reserva.Para evitar falsos clics, por favor, escribe la palabra, reconstruir, en el campo de texto."

                                const campo = document.createElement("input")
                                campo.placeholder = "Escribe la palabra reconstruir"
                                campo.classList.add(
                                    "borderRadius10",
                                    "padding10"
                                )
                                contenedor.appendChild(campo)
                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.textContent = "Comfirmar la reconstrucción irreversible de todo el contenedor financiero de la reserva"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarReconstrucion({
                                        simulacionUID,
                                        instanciaUID_contenedorFinanciero,
                                        instanciaUID_reconstrucion,
                                        palabra: campo.value
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"

                                document.querySelector("main").appendChild(pantallaInmersiva)

                            },
                            confirmarReconstrucion: async function (data) {
                                const simulacionUID = data.simulacionUID
                                const palabra = data.palabra
                                const sobreControl = data.sobreControl

                                const instanciaUID_pantallaDeCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()

                                const datosPantallaSuperpuesta = {
                                    instanciaUID: instanciaUID_pantallaDeCargaSuperPuesta,
                                    mensaje: "Reconstruyendo todo el contenedor financiero de la reserva desde los hubs..."
                                }
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                                const transaccion = {
                                    zona: "administracion/simuladorDePrecios/contenedorFinanciero/reconstruirDesgloseDesdeHubs",
                                    simulacionUID,
                                    palabra,
                                    sobreControl
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const pantallaDeCarga_renderizda = document.querySelector(`[instanciaUID="${instanciaUID_pantallaDeCargaSuperPuesta}"]`)
                                pantallaDeCarga_renderizda?.remove()

                                const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                if (!uiRenderizada) { return }


                                casaVitini.administracion.simuladorDePrecios.componentes.controladorUIPorFaltaDeLLaves(respuestaServidor)

                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const servicios = respuestaServidor.instantaneaServicios
                                    casaVitini.administracion.simuladorDePrecios.componentes.servicios.actualizarContenedor({ servicios })
                                    return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                                        simulacionUID
                                    })
                                }

                            },
                        }

                    },
                    desplegarContenedorFinanciero: async (data) => {
                        const simulacionUID = data.simulacionUID
                        const transaccion = {
                            zona: "administracion/simuladorDePrecios/detallesSimulacion",
                            simulacionUID: String(simulacionUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        const instanciaRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                        if (!instanciaRenderizada) {
                            return
                        }
                        if (respuestaServidor?.error) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {

                            const contenedorFinanciero = respuestaServidor.contenedorFinanciero
                            casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                contenedorFinanciero,
                                modoUI: "simulador"
                            })
                        }
                    },
                    categoriasGlobalesUI: {
                        despliege: function (data) {
                            const simulacionUID = data.simulacionUID
                            const url = "/administracion/simulador_de_precios/simulacion:" + simulacionUID + "/zona:"

                            const contenedor = document.createElement("div");
                            contenedor.classList.add(
                                "flexVertical"
                            );
                            contenedor.setAttribute("componente", "panelDetallesReserva")

                            const contenedorBotonesExpandidos = document.createElement("div")
                            contenedorBotonesExpandidos.classList.add("menuGlobalSimuiacion")
                            contenedorBotonesExpandidos.setAttribute("contenedor", "botonesExpandidos")

                            contenedor.appendChild(contenedorBotonesExpandidos)

                            const marcoMenuResponsivo = document.createElement("div");
                            marcoMenuResponsivo.setAttribute("class", "menuGlobalSimuiacion_responsivo");
                            marcoMenuResponsivo.textContent = "Menú reserva"
                            marcoMenuResponsivo.addEventListener("click", () => {
                                document.body.style.overflow = "hidden";
                                this.desplegarMenuResponsivo({
                                    simulacionUID,
                                })

                            })
                            contenedor.appendChild(marcoMenuResponsivo);

                            const botonUI = (data) => {

                                const categoria = data.categoria
                                const zonaURL = casaVitini.utilidades.cadenas.camelToSnake(categoria)
                                const cateoriaUI = data.cateoriaUI

                                const ui = document.createElement("a");
                                ui.setAttribute("class", "menuCategoria");
                                ui.setAttribute("categoria", categoria);
                                ui.href = url + zonaURL;
                                ui.addEventListener("click", (e) => {
                                    e.preventDefault()
                                    this.controladorMostrar({
                                        categoria: categoria,
                                        origen: "botonCategoria",
                                    })
                                })
                                ui.textContent = cateoriaUI;
                                return ui

                            }
                            const lista = [
                                {
                                    categoria: "alojamiento",
                                    cateoriaUI: "Alojamiento"
                                },
                                {
                                    categoria: "complementosAlojamiento",
                                    cateoriaUI: "Complementos del alojamiento"
                                },
                                {
                                    categoria: "servicios",
                                    cateoriaUI: "Servicios"
                                },
                                {
                                    categoria: "codigosDescuento",
                                    cateoriaUI: "Codigos de descuento"
                                },
                                {
                                    categoria: "desgloseFinanciero",
                                    cateoriaUI: "Deslose financiero"
                                },
                            ]

                            lista.forEach((c) => {
                                const boton = botonUI(c)
                                contenedorBotonesExpandidos.appendChild(boton)
                            })
                            return contenedor;
                        },
                        desplegarMenuResponsivo: function (data) {
                            const simulacionUID = data.simulacionUID

                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            ui.setAttribute("controlador", "controlResponsivoVisibilidad")
                            document.querySelector("main").appendChild(ui)

                            const contenedor = ui.querySelector("[componente=contenedor]")
                            contenedor.style.paddingTop = "0px"

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("botonV1")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.textContent = "Cerrar";
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            contenedor.appendChild(botonCancelar)

                            const panelGlobal = this.despliege({
                                simulacionUID
                            })
                            const contenedorBotonesEspandidos = panelGlobal.querySelector("[contenedor=botonesExpandidos]")
                            contenedorBotonesEspandidos.classList.remove("menuGlobalSimuiacion")
                            contenedorBotonesEspandidos.style.display = 'grid'
                            contenedorBotonesEspandidos.style.gap = '6px'

                            contenedorBotonesEspandidos.querySelectorAll("[categoria]").forEach((boton) => {
                                boton.classList.add("botonV1BlancoIzquierda")
                                boton.classList.remove("menuCategoria")

                            })
                            contenedor.appendChild(contenedorBotonesEspandidos)

                            const controlResponsivoVisibilidad = () => {
                                const selectorElementoObservado = document.querySelector("[controlador=controlResponsivoVisibilidad]")
                                if (!selectorElementoObservado) {
                                    window.removeEventListener("resize", controlResponsivoVisibilidad);
                                    return
                                }
                                const windowWidth = window.innerWidth;
                                const threshold = "922"
                                if (windowWidth > threshold) {
                                    selectorElementoObservado?.remove()
                                }
                            }
                            window.addEventListener("resize", controlResponsivoVisibilidad);

                        },
                        ocultaCategorias: function () {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                            this.limpiarMenusCategorias()
                            document.querySelector("[componente=contenedorDinamico]").innerHTML = null
                        },
                        limpiarMenusCategorias: () => {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas();
                            const botonesCategoria = document.querySelectorAll(`[contenedor=botonesExpandidos] [categoria]`)
                            botonesCategoria.forEach((boton) => {
                                boton.removeAttribute("style")
                                boton.setAttribute("estadoCategoria", "otra")
                            })
                        },
                        controladorMostrar: function (data) {
                            const origen = data.origen
                            const categoriaIDV = data.categoria
                            const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")

                            const url = "/administracion/simulador_de_precios/simulacion:" + simulacionUID + "/zona:"
                            const categoriaActual = document.querySelector("[estadoCategoria=actual]")?.getAttribute("categoria")
                            const selectorBotonCategoriaRenderizado = document.querySelector(`[categoria="${categoriaIDV}"]`)
                            const estadoCategoria = selectorBotonCategoriaRenderizado?.getAttribute("estadoCategoria")
                            this.limpiarMenusCategorias()
                            selectorBotonCategoriaRenderizado.setAttribute("estadoCategoria", "actual")

                            const todosLosContenedores = document.querySelectorAll("[zonaSimulacion]")
                            todosLosContenedores.forEach(z => z.removeAttribute("style"))

                            const zonaSel = document.querySelector(`[zonaSimulacion=${categoriaIDV}]`)
                            zonaSel.style.display = "flex"
                            const funcionPersonalizada = `administracion.simuladorDePrecios.detallesSimulacion.componentesUI.categoriasGlobalesUI.controladorMostrar`

                            const botonCategoriaGlobal = document.querySelector(`[contenedor=botonesExpandidos] [categoria="${categoriaIDV}"]`)
                            botonCategoriaGlobal.style.background = "blue"
                            botonCategoriaGlobal.style.color = "white"
                            const categoriaURL = casaVitini.utilidades.cadenas.camelToSnake(categoriaIDV)
                            const directoriosFusion = url + categoriaURL
                            const componentesExistenteUID = "simulacionUID_" + simulacionUID
                            const titulo = "Casa Vitini"

                            const estado = {
                                zona: directoriosFusion,
                                EstadoInternoZona: "estado",
                                tipoCambio: "parcial",
                                componenteExistente: componentesExistenteUID,
                                funcionPersonalizada: funcionPersonalizada,
                                args: {
                                    origen: "url",
                                    categoria: categoriaIDV
                                }
                            }
                            console.log(categoriaActual, categoriaIDV, categoriaActual)
                            if (!categoriaActual || categoriaIDV === categoriaActual) {
                                window.history.replaceState(estado, titulo, directoriosFusion)
                            } else if (categoriaIDV !== categoriaActual) {
                                if (origen === "url") {
                                    window.history.replaceState(estado, titulo, directoriosFusion);
                                }
                                if (origen === "botonCategoria" && (estadoCategoria === "otra" || !estadoCategoria)) {
                                    window.history.pushState(estado, titulo, directoriosFusion);
                                }
                                if (origen === "botonCategoria" && estadoCategoria === "actual") {
                                    window.history.replaceState(estado, titulo, directoriosFusion);
                                }
                            }


                        }

                    },
                },
                eliminarSimulacion: {
                    UI: function () {
                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = "Confirmar la eliminación de la simulación"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = "Vas a eliminar la simulacuión"

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.textContent = "Comfirmar la eliminacion del impuesto"
                        botonAceptar.addEventListener("click", () => {
                            this.confirmarEliminacion()
                        })
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Cancelar la eliminación"
                        document.querySelector("main").appendChild(pantallaInmersiva)
                    },
                    confirmarEliminacion: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Eliminado simulaciuon..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                        const transaccion = {
                            zona: "administracion/simuladorDePrecios/eliminarSimulacion",
                            simulacionUID: String(simulacionUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            const entrada = {
                                vista: "/administracion/simulador_de_precios",

                            }
                            casaVitini.shell.navegacion.controladorVista(entrada)
                        }
                    }
                },
                actualizarNombreSimulacion: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando el nombre de la simulación..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje,
                        identificadorVisual: "pantallaDeCarga"
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                    const nombre = document.querySelector("[campo=nombre]").value
                    const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")

                    const transaccion = {
                        zona: "administracion/simuladorDePrecios/actualizarNombreSimulacion",
                        simulacionUID,
                        nombre

                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()

                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    }
                },
            },
            componentes: {
                simulacionUI: function (data) {
                    const simulacionUID = data.simulacionUID
                    const contenedor = document.createElement("div")
                    contenedor.classList.add(
                        "flexVertical",
                        "gap6"
                    )

                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()

                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.setAttribute("contenedor", "botones")
                    contenedorBotones.classList.add(
                        "flexVertical",
                        "gap6"
                    )
                    contenedor.appendChild(contenedorBotones)

                    const contenedorFechaCreacion = document.createElement("div");
                    contenedorFechaCreacion.setAttribute("calendario", "fechaCreacion");
                    contenedorFechaCreacion.setAttribute("CSS", "selectorFechas")
                    contenedorFechaCreacion.classList.add(
                        "flexVertical",
                        "gap6"
                    )
                    contenedorFechaCreacion.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                    contenedorFechaCreacion.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)
                    contenedor.appendChild(contenedorFechaCreacion);



                    const contenedorZonaIDV = document.createElement("div")
                    contenedorZonaIDV.classList.add(
                        "flexVertical"
                    )
                    contenedorFechaCreacion.appendChild(contenedorZonaIDV)
                    const opcionesEntidad = [
                        {
                            zonaIDV: "",
                            zonaUI: "Zona simulada"
                        },
                        {
                            zonaIDV: "global",
                            zonaUI: "Global"
                        },
                        {
                            zonaIDV: "privada",
                            zonaUI: "Privada"
                        },
                        {
                            zonaIDV: "publica",
                            zonaUI: "Pública"
                        },

                    ]
                    const selectorZonaIDV = document.createElement("select")
                    selectorZonaIDV.addEventListener("change", () => {
                        casaVitini.administracion.simuladorDePrecios.componentes.actualizaSimulacion()
                    })

                    selectorZonaIDV.classList.add(
                        "selectorZonas",
                        "padding10",
                        "borderRadius6",
                        "selectorLista"
                    )
                    selectorZonaIDV.setAttribute("selector", "zonaIDV")
                    opcionesEntidad.forEach((e) => {
                        const zonaIDV = e.zonaIDV
                        const zonaUI = e.zonaUI
                        const opcion = document.createElement("option");

                        if (zonaIDV === "") {
                            opcion.disabled = true;
                            opcion.selected = true;

                        }

                        opcion.value = zonaIDV;
                        opcion.text = zonaUI;
                        selectorZonaIDV.add(opcion);
                    })
                    contenedorZonaIDV.appendChild(selectorZonaIDV)

                    const selectorFechaCreacion = document.createElement("div")
                    selectorFechaCreacion.classList.add("contenedorFecha");
                    selectorFechaCreacion.setAttribute("calendario", "unico");
                    selectorFechaCreacion.setAttribute("nombreContenedor", "rangoUnico")

                    selectorFechaCreacion.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_unico_perfilSimple",
                            contenedorOrigenIDV: "[calendario=unico]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "unico",
                            metodoSelectorDia: "administracion.simuladorDePrecios.componentes.pasarelaSelectorDia",
                            tituloCalendario: "Selecciona la fecha de creación simulada de la reserva"
                        })
                    })

                    const tituloFechaCreacion = document.createElement("p");
                    tituloFechaCreacion.classList.add("negrita");
                    tituloFechaCreacion.textContent = "Fecha de creación simulada"
                    selectorFechaCreacion.appendChild(tituloFechaCreacion)

                    const fechaCreacionUI = document.createElement("p");
                    fechaCreacionUI.classList.add("fechaInicio");
                    fechaCreacionUI.setAttribute("fechaUI", "unico");
                    fechaCreacionUI.textContent = "(Seleccionar)";
                    selectorFechaCreacion.appendChild(fechaCreacionUI)

                    contenedorFechaCreacion.appendChild(selectorFechaCreacion);


                    const botonResetearFechas = document.createElement("div")
                    botonResetearFechas.classList.add(
                        "botonV1",
                        "comportamientoBoton",
                        "padding6",
                        "textoCentrado",
                        "backgroundGrey1",
                        "borderRadius8",
                        "noSelecionable"
                    )
                    botonResetearFechas.textContent = "Borrar el rango de fechas"
                    botonResetearFechas.addEventListener("click", (e) => {

                        const selectorFechaEntrada = document.querySelector("[calendario=entrada]")
                        const selectorFechaSalida = document.querySelector("[calendario=salida]")

                        selectorFechaEntrada.classList.add("parpadeoFondoAzul")
                        selectorFechaSalida.classList.add("parpadeoFondoAzul")

                        selectorFechaSalida.removeAttribute("memoriaVolatil")
                        selectorFechaEntrada.removeAttribute("memoriaVolatil")
                        selectorFechaEntrada.querySelector("[fechaUI=fechaInicio]").textContent = "(Seleccionar)"
                        selectorFechaSalida.querySelector("[fechaUI=fechaFin]").textContent = "(Seleccionar)"

                    })
                    contenedor.appendChild(botonResetearFechas)

                    const selectorRangoSimulado = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                        metodoSelectorDia: "administracion.simuladorDePrecios.componentes.pasarelaSelectorDia",
                        nombreContenedor: "rangoDeSimulacion",
                        modo: "administracion",
                        seleccionableDiaLimite: "no",
                        sobreControlConfiguracion: {
                            configuracionInicio: {
                                tituloCalendario: "Seleciona una fecha de entrada simulada de la reserva"
                            },
                            configuracionFin: {
                                tituloCalendario: "Seleciona una fecha de salida simulada de la reserva"
                            }
                        }
                    })
                    contenedor.appendChild(selectorRangoSimulado)

                    const menuGlobal = casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.categoriasGlobalesUI.despliege({
                        simulacionUID
                    })
                    contenedor.appendChild(menuGlobal)

                    const botonReconstrucionHub = document.createElement("div")
                    botonReconstrucionHub.setAttribute("boton", "reconstruccionHubSinConfirmacion")
                    botonReconstrucionHub.classList.add("botonV1")
                    botonReconstrucionHub.textContent = "Reconstruir desglose desde los hubs"
                    contenedor.appendChild(botonReconstrucionHub)

                    const porApartamentoDedicado = document.createElement("div");
                    porApartamentoDedicado.classList.add(
                        "flexVertical",
                        "gap6",
                        "backgroundGrey1",
                        "padding6",
                        "borderRadius12",
                        "ocultoInicial_enContexto"
                    );
                    porApartamentoDedicado.setAttribute("contenedor", "apartamentosSeleccianados")
                    porApartamentoDedicado.setAttribute("zonaSimulacion", "alojamiento")
                    contenedor.appendChild(porApartamentoDedicado)

                    const tituloApartamentos = document.createElement("p")
                    tituloApartamentos.classList.add(
                        "negrita",
                        "padding10"
                    )
                    tituloApartamentos.textContent = "Apartamentos de la simulación"
                    porApartamentoDedicado.appendChild(tituloApartamentos)

                    const selectorApartamentosEspecificosUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                        textoContenedorVacio: "Añade apartamentos a la simulación",
                        tipoDespliegue: "parcial",
                        metodoPersonalizado: "simulador",
                    })
                    porApartamentoDedicado.appendChild(selectorApartamentosEspecificosUI)


                    const contenedorZonaCodigo = document.createElement("div")
                    contenedorZonaCodigo.setAttribute("contenedor", "codigosDescuento")
                    contenedorZonaCodigo.setAttribute("zonaSimulacion", "codigosDescuento")
                    contenedorZonaCodigo.classList.add(
                        "flexVertical",
                        "gap6",
                        "backgroundGrey1",
                        "padding6",
                        "borderRadius12",
                        "ocultoInicial_enContexto"
                    )

                    contenedor.appendChild(contenedorZonaCodigo)

                    const contendorBotonesCampoCodigoDescuento = document.createElement("div")
                    contendorBotonesCampoCodigoDescuento.classList.add(
                        "flexHorizontal",
                        "flexApiladoI"
                    )
                    contenedorZonaCodigo.appendChild(contendorBotonesCampoCodigoDescuento)


                    const botonAgregarCampoCodigoDescuento = document.createElement("div")
                    botonAgregarCampoCodigoDescuento.classList.add(
                        "botonV1"
                    )
                    botonAgregarCampoCodigoDescuento.textContent = "Agregar campo de descuento"
                    botonAgregarCampoCodigoDescuento.addEventListener("click", () => {

                        const contenedorCodigosDecuentos = document.querySelector("[contenedor=codigosDescuento]")
                        const lista = contenedorCodigosDecuentos.querySelector("[contenedor=listaDescuentos]")
                        lista.removeAttribute("style")
                        const contenedorCampoUI = casaVitini.administracion.simuladorDePrecios.componentes.contenedorCodigosDescuento.contenedorCampo()
                        lista.appendChild(contenedorCampoUI)

                        const botonComprobar = casaVitini.administracion.simuladorDePrecios.componentes.contenedorCodigosDescuento.botonComprobar()
                        const selectorBotonComprobar_renderizado = contenedorCodigosDecuentos.querySelector("[boton=comprobar]")
                        if (!selectorBotonComprobar_renderizado) {
                            contenedorCodigosDecuentos.appendChild(botonComprobar)
                        }
                    })
                    contendorBotonesCampoCodigoDescuento.appendChild(botonAgregarCampoCodigoDescuento)



                    const contenedorCodigosDescuentosPorVerificar = document.createElement("div")
                    contenedorCodigosDescuentosPorVerificar.setAttribute("contenedor", "listaDescuentos")
                    contenedorCodigosDescuentosPorVerificar.style.display = "none"
                    contenedorCodigosDescuentosPorVerificar
                    contenedorCodigosDescuentosPorVerificar.classList.add(
                        "flexVertical",
                        "gap6",
                        "padding6"
                    )
                    contenedorZonaCodigo.appendChild(contenedorCodigosDescuentosPorVerificar)


                    const contenedorServicios = document.createElement("div");
                    contenedorServicios.setAttribute("zonaSimulacion", "servicios")
                    contenedorServicios.classList.add(
                        "flexVertical",
                        "gap6",
                        "backgroundGrey1",
                        "padding6",
                        "borderRadius12",
                        "ocultoInicial_enContexto"
                    );
                    contenedorServicios.setAttribute("contenedor", "servicios")
                    contenedor.appendChild(contenedorServicios)

                    const tituloServicios = document.createElement("p")
                    tituloServicios.classList.add(
                        "negrita",
                        "padding10"
                    )
                    tituloServicios.textContent = "Servicios de la simulación"
                    contenedorServicios.appendChild(tituloServicios)

                    const serviciosUI = casaVitini.administracion.simuladorDePrecios.componentes.servicios.arranque()
                    contenedorServicios.appendChild(serviciosUI)

                    const contenedorComplementosDeAlojamiento = document.createElement("div");
                    contenedorComplementosDeAlojamiento.setAttribute("zonaSimulacion", "complementosAlojamiento")
                    contenedorComplementosDeAlojamiento.classList.add(
                        "flexVertical",
                        "gap6",
                        "backgroundGrey1",
                        "padding6",
                        "borderRadius12",
                        "ocultoInicial_enContexto"
                    );
                    contenedorComplementosDeAlojamiento.setAttribute("contenedor", "complementosAlojamiento")
                    contenedor.appendChild(contenedorComplementosDeAlojamiento)

                    const tituloComplementos = document.createElement("p")
                    tituloComplementos.classList.add(
                        "negrita",
                        "padding10"
                    )
                    tituloComplementos.textContent = "Complementos de alojamiento"
                    contenedorComplementosDeAlojamiento.appendChild(tituloComplementos)


                    const infoSinAlojamiento = casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.complementosDeAlojamiento.componentesUI.infoSinComplemento()
                    contenedorComplementosDeAlojamiento.appendChild(infoSinAlojamiento)


                    const contenedorSimulacion = document.createElement("div")
                    contenedorSimulacion.classList.add("ocultoInicial_enContexto", "flexVertical")
                    contenedorSimulacion.setAttribute("zonaSimulacion", "desgloseFinanciero")
                    contenedorSimulacion.setAttribute("contenedor", "simulacion")
                    contenedor.appendChild(contenedorSimulacion)

                    return contenedor

                },
                actualizaSimulacion: async function (data) {

                    const fechaCreacionUI = document.querySelector("[calendario=unico]")
                    const fechaCreacion = fechaCreacionUI?.getAttribute("memoriaVolatil") || null

                    const fechaEntradaUI = document.querySelector("[calendario=entrada]")
                    const fechaEntrada = fechaEntradaUI?.getAttribute("memoriaVolatil") || null

                    const fechaSalidaUI = document.querySelector("[calendario=salida]")
                    const fechaSalida = fechaSalidaUI?.getAttribute("memoriaVolatil") || null

                    const apartamentosIDVARRAYUI = document.querySelectorAll("[apartamentoSeleccionado]")

                    const zonaIDVUI = document.querySelector("[selector=zonaIDV]")
                    const zonaIDV = zonaIDVUI.value

                    const simulacionUID = document.querySelector("[simulacionUID]")?.getAttribute("simulacionUID")
                    if (!simulacionUID) {
                        return
                    }
                    const marcoElastico = document.querySelector("[componente=espacio]")
                    const selectorContendorSimulacion = document.querySelector("[contenedor=simulacion]")
                    selectorContendorSimulacion.style.display = "none"

                    const spinnerSimple = casaVitini.ui.componentes.spinnerSimple()
                    marcoElastico.appendChild(spinnerSimple)

                    const apartamentosIDVARRAY = []
                    apartamentosIDVARRAYUI.forEach((apartamento) => {
                        const apartamentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                        apartamentosIDVARRAY.push(apartamentoIDV)
                    })

                    const transaccion = {
                        zona: "administracion/simuladorDePrecios/actualizarSimulacionPorDataGlobal",
                        fechaCreacion,
                        fechaEntrada,
                        fechaSalida,
                        apartamentosIDVARRAY,
                        simulacionUID,
                        zonaIDV
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    this.controladorUIPorFaltaDeLLaves(respuestaServidor)

                    if (respuestaServidor?.error) {
                        selectorContendorSimulacion.removeAttribute("style")
                        spinnerSimple?.remove()
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        const selectorRecovery = data?.selectorRecovery

                        if (selectorRecovery) {
                            const fechaRecovery_ISO = data?.fechaRecovery_ISO
                            const fechaRecovery_humana = data?.fechaRecovery_humana

                            const selectorContenedorFecha = document.querySelector(selectorRecovery)
                            selectorContenedorFecha.setAttribute("memoriaVolatil", fechaRecovery_ISO)
                            selectorContenedorFecha.querySelector("[fechaUI]").textContent = fechaRecovery_humana
                        }
                    }
                    if (respuestaServidor?.ok) {
                        selectorContendorSimulacion.innerHTML = null
                        selectorContendorSimulacion.removeAttribute("style")
                        spinnerSimple?.remove()

                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        return casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.desplegarContenedorFinanciero({
                            simulacionUID
                        })
                    }
                },
                controladorUIPorFaltaDeLLaves: (data) => {
                    const llavesIDV = [
                        "[calendario=unico]",
                        "[calendario=entrada]",
                        "[calendario=salida]",
                        "[contenedor=apartamentosSeleccianados]",
                        "[selector=zonaIDV]"
                    ]
                    if (data.llavesFaltantes) {

                        const llavesFaltantes = data.llavesFaltantes
                        const llaves = [
                            "fechaEntrada",
                            "fechaSalida",
                            "fechaCreacion",
                            "apartamentosIDVARRAY",
                            "zonaIDV"
                        ]
                        const dic = {
                            fechaCreacion: llavesIDV[0],
                            fechaEntrada: llavesIDV[1],
                            fechaSalida: llavesIDV[2],
                            apartamentosIDVARRAY: llavesIDV[3],
                            zonaIDV: llavesIDV[4]
                        }
                        llaves.forEach((llave) => {
                            if (llavesFaltantes.includes(llave)) {
                                const selector = dic[llave];
                                const elemento = document.querySelector(selector);
                                if (elemento) {
                                    elemento.classList.add("parpadeoFondoAzul");
                                }
                            } else {
                                const selector = dic[llave];
                                const elemento = document.querySelector(selector);
                                if (elemento) {
                                    elemento.classList.remove("parpadeoFondoAzul");
                                }
                            }
                        })
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        const spinnnerRenderizado = document.querySelector("[componente=spinnerSimple]")
                        spinnnerRenderizado?.remove()

                        const selectorContendorSimulacion = document.querySelector("[contenedor=simulacion]")
                        selectorContendorSimulacion.removeAttribute("style")
                    } else {
                        llavesIDV.forEach((llaveIDV) => {
                            document.querySelector(llaveIDV).classList.remove("parpadeoFondoAzul")
                        })
                    }
                },
                apartamentoUI: function (data) {

                    const apartamentoIDV = data.apartamentoIDV
                    const apartamentoUI = data.apartamentoUI
                    const tipoDespliegue = data.tipoDespliegue
                    const seleccionadoInicial = data.seleccionadoInicial
                    const descuentoTotal = data.descuentoTotal || "0.00"


                    const apartamentoSeleccionadoUI = document.createElement("div")
                    apartamentoSeleccionadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                    apartamentoSeleccionadoUI.setAttribute("apartamentoSeleccionado", apartamentoIDV)
                    const tituloApartamento = document.createElement("div")
                    tituloApartamento.classList.add("crearOfertaApartamentoSeleccionadoUITitulo")
                    tituloApartamento.textContent = apartamentoUI
                    apartamentoSeleccionadoUI.appendChild(tituloApartamento)
                    const botonEliminarApartamento = document.createElement("div")
                    botonEliminarApartamento.classList.add("crearOfertaBoton")
                    botonEliminarApartamento.textContent = "Eliminar apartamento 11"
                    botonEliminarApartamento.addEventListener("click", (e) => {
                        casaVitini.administracion.simuladorDePrecios.detallesSimulacion.componentesUI.alojamiento.eliminarApartamento({
                            apartamentoIDV,
                            e
                        })
                    })
                    apartamentoSeleccionadoUI.appendChild(botonEliminarApartamento)
                    return apartamentoSeleccionadoUI
                },
                servicios: {
                    arranque: () => {

                        const contenedor = document.createElement("div")
                        contenedor.setAttribute("class", "contenedorServicios")
                        contenedor.setAttribute("componente", "categoriaServicios")

                        const contenedorInformacionGlobal = document.createElement("div")
                        contenedorInformacionGlobal.classList.add("administracion_reservas_detallesReserva_contenedorEnlacesDePago")

                        contenedor.appendChild(contenedorInformacionGlobal)
                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReserva_enlacesDePago_bloqueBotones")

                        const botonCrearPagoManual = document.createElement("div")
                        botonCrearPagoManual.classList.add("detallesReserva_transacciones_botonV1")
                        botonCrearPagoManual.textContent = "Insertar un servicio"
                        botonCrearPagoManual.addEventListener("click", () => {
                            casaVitini.administracion.simuladorDePrecios.componentes.servicios.componentesUI.insertarServicio.ui({
                            })
                        })
                        bloqueBotones.appendChild(botonCrearPagoManual)
                        contenedorInformacionGlobal.appendChild(bloqueBotones)

                        const contenedorListaServicios = document.createElement("div")
                        contenedorListaServicios.classList.add("listaServicios")
                        contenedorListaServicios.setAttribute("componente", "contenedorListaServiciosEnReserva")
                        contenedor.appendChild(contenedorListaServicios)

                        return contenedor

                    },
                    componentesUI: {
                        insertarServicio: {
                            ui: async function (data) {
                                const main = document.querySelector("main")
                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("reservaUID")
                                const instanciaUID_UIFlotanteServicios = ui.getAttribute("instanciaUID")
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                main.appendChild(ui)

                                await this.despliegeListaServicios({
                                    ui,
                                    instanciaUID_UIFlotanteServicios,
                                    instanciaUID_contenedorServicios,
                                    simulacionUID
                                })

                            },
                            despliegeListaServicios: async function (data) {

                                const ui = data.ui
                                const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                const simulacionUID = data.simulacionUID


                                const constructor = ui.querySelector("[componente=contenedor]")
                                constructor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Obteniendo servicios...",
                                    textoBoton: "Cancelar"
                                })
                                constructor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/servicios/obtenerServicios"
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_UIFlotanteServicios}"]`)
                                if (!uiRenderizada) { return }
                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    spinner.remove()
                                    constructor.appendChild(this.botonCancelar())

                                    const servicios = respuestaServidor.servicios

                                    const contenedor = document.createElement("div")
                                    contenedor.classList.add(
                                        "maxWidth1280px",
                                        "width100",
                                        "flexVertical",
                                        "gap10",
                                    )
                                    constructor.appendChild(contenedor)
                                    const estadoUI_ = (estadoIDV) => {

                                        if (estadoIDV === "activado") {
                                            return "Activada"
                                        } else if (estadoIDV === "desactivado") {
                                            return "Desactivada"
                                        }

                                    }

                                    servicios.forEach((detalles) => {
                                        const nombre = detalles.nombre
                                        const servicioUID = detalles.servicioUID
                                        const estadoIDV = detalles.estadoIDV
                                        const zonaIDV = detalles.zonaIDV
                                        const contenedorData = detalles.contenedor

                                        const contenedorServicio = document.createElement("div")
                                        contenedorServicio.setAttribute("servicioUID", servicioUID)
                                        contenedorServicio.classList.add(
                                            "borderRadius12",
                                            "width100",
                                            "flexVertical",
                                            "backgroundGrey1",
                                            "padding6",
                                            "gap6"
                                        )

                                        const contenedorGlobal = document.createElement("div")
                                        contenedorGlobal.classList.add(
                                            "flexVertical",
                                            "padding6",
                                            "gap6"
                                        )

                                        const nombreOfertaUI = document.createElement("div")
                                        nombreOfertaUI.classList.add("negrita")
                                        nombreOfertaUI.textContent = nombre
                                        contenedorGlobal.appendChild(nombreOfertaUI)

                                        const estadoTitulo = document.createElement("div")
                                        estadoTitulo.textContent = "Estado del servicio"
                                        contenedorGlobal.appendChild(estadoTitulo)

                                        const estadoUI = document.createElement("div")
                                        estadoUI.classList.add("negrita")
                                        estadoUI.textContent = estadoUI_(estadoIDV)
                                        contenedorGlobal.appendChild(estadoUI)
                                        contenedorServicio.appendChild(contenedorGlobal)

                                        const contendorBotones = document.createElement("div")
                                        contendorBotones.classList.add(
                                            "flexHorizontal",
                                            "gap6",
                                        )

                                        const botonInsertar = document.createElement("div")
                                        botonInsertar.classList.add(
                                            "borderRadius8",
                                            "backgroundGrey1",
                                            "comportamientoBoton",
                                            "padding8"
                                        )
                                        botonInsertar.textContent = "Insertar servicios en la simulación"
                                        botonInsertar.addEventListener("click", () => {

                                            this.despliegeDeSeleccionEnServicio({
                                                servicioUID,
                                                instanciaUID_UIFlotanteServicios,
                                                ui
                                            })
                                        })
                                        contendorBotones.appendChild(botonInsertar)

                                        const botonVerOferta = document.createElement("a")
                                        botonVerOferta.classList.add(
                                            "borderRadius8",
                                            "backgroundGrey1",
                                            "comportamientoBoton",
                                            "padding8",
                                            "limpiezaBotonA"
                                        )
                                        botonVerOferta.textContent = "Ir al servicio"
                                        botonVerOferta.setAttribute("href", "/administracion/servicios/servicio:" + servicioUID)
                                        botonVerOferta.setAttribute("vista", "/administracion/servicios/servicio:" + servicioUID)
                                        botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                        contendorBotones.appendChild(botonVerOferta)

                                        contenedorServicio.appendChild(contendorBotones)
                                        contenedor.appendChild(contenedorServicio)
                                    })
                                    constructor.appendChild(this.botonCancelar())
                                }
                            },
                            despliegeDeSeleccionEnServicio: async function (data) {

                                const simulacionUID = data.simulacionUID
                                const servicioUID = data.servicioUID
                                const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                const ui = data.ui
                                const constructor = ui.querySelector("[componente=contenedor]")
                                constructor.innerHTML = null

                                const botonCerrar = document.createElement("div")
                                botonCerrar.classList.add("botonV1")
                                botonCerrar.textContent = "Cerrar y volver a la simulación"
                                botonCerrar.setAttribute("boton", "cancelar")
                                botonCerrar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                constructor.appendChild(botonCerrar)

                                const spinner = casaVitini.ui.componentes.spinnerSimple()
                                constructor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/servicios/detallesServicio",
                                    servicioUID: String(servicioUID)
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const ui_enEspera = document.querySelector(`[instanciaUID="${instanciaUID_UIFlotanteServicios}"]`)
                                if (!ui_enEspera) { return }
                                if (respuestaServidor?.error) {
                                    const info = {
                                        titulo: "No existe ningúna servicio con ese identificador",
                                        descripcion: "Revisa el identificador porque este servicio que buscas no existe. Quizás este identificador existió y borraste esta servicio.."
                                    }
                                    casaVitini.ui.componentes.mensajeSimple(info)
                                } else if (respuestaServidor?.ok) {
                                    constructor.innerHTML = null

                                    const botonCerrar = document.createElement("div")
                                    botonCerrar.classList.add("botonV1")
                                    botonCerrar.textContent = "Cerrar y volver"
                                    botonCerrar.setAttribute("boton", "cancelar")
                                    botonCerrar.addEventListener("click", () => {
                                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    constructor.appendChild(botonCerrar)

                                    const botonVolver = document.createElement("div")
                                    botonVolver.classList.add("botonV1BlancoIzquierda")
                                    botonVolver.textContent = "Volver a la lista de servicios"
                                    botonVolver.setAttribute("boton", "volver")
                                    botonVolver.addEventListener("click", () => {
                                        return this.despliegeListaServicios({
                                            ui,
                                            instanciaUID_UIFlotanteServicios,
                                            instanciaUID_contenedorServicios,
                                            simulacionUID
                                        })
                                    })

                                    constructor.appendChild(botonVolver)

                                    const servicio = respuestaServidor.ok
                                    const servicioUID = servicio.servicioUID
                                    const contenedor = servicio.contenedor

                                    const servicioUI = casaVitini.ui.vistas.alojamiento.resumen.servicios.servicioUI({
                                        servicioUID,
                                        contenedor

                                    })
                                    constructor.appendChild(servicioUI)


                                    const botonInsertar = document.createElement("div")
                                    botonInsertar.classList.add("botonV1BlancoIzquierda")
                                    botonInsertar.textContent = "Insertar servicio en simulacion"
                                    botonInsertar.setAttribute("boton", "volver")
                                    botonInsertar.addEventListener("click", (e) => {
                                        const servicioUI_selector = e.target.closest("[componente=contenedor]").querySelector("[servicioUID]")

                                        const servicioUID = servicioUI_selector.getAttribute("servicioUID")
                                        const grupoDeOpciones = servicioUI_selector.querySelector("[area=grupoOpciones]").querySelectorAll("[componente=grupo]")
                                        const opcionesSeleccionadasDelServicio = {
                                            servicioUID,
                                            opcionesSeleccionadas: {}
                                        }
                                        const opcionesSeleccionadas = opcionesSeleccionadasDelServicio.opcionesSeleccionadas
                                        grupoDeOpciones.forEach((grupo) => {
                                            const grupoIDV = grupo.getAttribute("grupoIDV")
                                            opcionesSeleccionadas[grupoIDV] = []

                                            const opcionesDelGrupoSeleccionadas = grupo.querySelectorAll("[selector=opcion][estado=activado]")
                                            opcionesDelGrupoSeleccionadas.forEach(opcionSel => {
                                                const opcionIDV = opcionSel.getAttribute("opcionIDV")
                                                opcionesSeleccionadas[grupoIDV].push(opcionIDV)
                                            })
                                        })

                                        // Poner una advertenc  ia superpuesta para al espera.
                                        this.confirmarInsertar({
                                            servicioUID,
                                            instanciaUID_UIFlotanteServicios,
                                            instanciaUID_contenedorServicios,
                                            opcionesSeleccionadasDelServicio
                                        })

                                    })
                                    constructor.appendChild(botonInsertar)
                                }
                            },
                            botonCancelar: () => {
                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.setAttribute("boton", "cancelar")
                                botonCancelar.textContent = "Cerrar y volver a la reserva"
                                botonCancelar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                return botonCancelar
                            },
                            confirmarInsertar: async function (data) {
                                const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                                const servicioUID = String(data.servicioUID)
                                const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                const opcionesSeleccionadasDelServicio = data.opcionesSeleccionadasDelServicio
                                // const ui = document.querySelector(`[instanciaUID="${instanciaUID_insertarServiciosUI}"]`)
                                // const contenedor = ui.querySelector("[componente=contenedor]")
                                // contenedor.innerHTML = null


                                const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                    mensaje: "Insertando servicio en la simulación...",
                                    textoBoton: "ocultar",
                                    instanciaUID: instanciaPantallaCarga
                                })

                                const respuestaServidor = await casaVitini.shell.servidor({
                                    zona: "administracion/simuladorDePrecios/servicios/insertarServicioEnSimulacion",
                                    simulacionUID,
                                    servicioUID,
                                    opcionesSeleccionadasDelServicio
                                })
                                const uiRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"] [contenedor=servicios]`)

                                if (!uiRenderizada) { return }
                                casaVitini.administracion.simuladorDePrecios.componentes.controladorUIPorFaltaDeLLaves(respuestaServidor)
                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {

                                    const servicioData = respuestaServidor.servicio
                                    const nombreInterno = servicioData.nombre
                                    const contenedor = servicioData.contenedor
                                    const servicioUID_enSimulacion = servicioData.servicioUID
                                    const opcionesSel = servicioData.opcionesSel

                                    const servicioUI = casaVitini.administracion.simuladorDePrecios.componentes.servicios.componentesUI.servicioUI({
                                        servicioUID_enSimulacion: servicioUID_enSimulacion,
                                        instanciaUID_contenedorServicios: "contenedorServicios",
                                        nombreInterno: nombreInterno,
                                        contenedor: contenedor,
                                        opcionesSeleccionadas: opcionesSel

                                    })
                                    const selectorInfo = uiRenderizada.querySelector("[componente=contenedorInfoSinServicios]")
                                    selectorInfo?.remove()

                                    const selectorListaServicios = uiRenderizada.querySelector("[componente=contenedorListaServiciosEnReserva]")
                                    selectorListaServicios.appendChild(servicioUI)

                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                    const desgloseFinanciero = respuestaServidor?.desgloseFinanciero
                                    if (desgloseFinanciero) {
                                        casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                            destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                            contenedorFinanciero: { desgloseFinanciero },
                                            modoUI: "simulador"
                                        })
                                    }
                                }

                            },
                        },
                        servicioUI: (data) => {
                            const servicioUID_enSimulacion = data.servicioUID_enSimulacion
                            const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                            const nombreInterno = data.nombreInterno
                            const contenedor = data.contenedor
                            const opcionesSeleccionadas = data.opcionesSeleccionadas

                            const definicion = contenedor.definicion
                            const fechaFinal = contenedor.fechaFinal
                            const duracionIDV = contenedor.duracionIDV
                            const fechaInicio = contenedor.fechaInicio
                            const tituloPublico = contenedor.tituloPublico
                            const servicioUID = contenedor.servicioUID
                            const disponibilidadIDV = contenedor.disponibilidadIDV
                            const gruposDeOpciones = contenedor.gruposDeOpciones


                            const diccionario = {
                                disponibilidad: {
                                    constante: "Disponible",
                                    variable: "Disponibilidad variable"
                                }
                            }

                            const servicioUI = document.createElement("div")
                            servicioUI.setAttribute("servicioUID_enSimulacion", servicioUID_enSimulacion)
                            servicioUI.classList.add(
                                "flexVertical",
                                "padding6",
                                "backgroundGrey1",
                                "borderRadius10",
                                "gap6"
                            )
                            const contenedorInterno = document.createElement("div")
                            contenedorInterno.classList.add(
                                "flexVertical",
                                "gap6"
                            )
                            servicioUI.appendChild(contenedorInterno)

                            const contenedorNombreInterno = document.createElement("div")
                            contenedorNombreInterno.classList.add(
                                "flexVertical",
                                "padding8"
                            )
                            contenedorInterno.appendChild(contenedorNombreInterno)

                            const tituluNombreInternoUI = document.createElement("p")
                            tituluNombreInternoUI.textContent = `Nombre adminitrativo`
                            contenedorNombreInterno.appendChild(tituluNombreInternoUI)

                            const nombreInternoUI = document.createElement("p")
                            nombreInternoUI.classList.add(
                                "negrita")
                            nombreInternoUI.textContent = `${nombreInterno}`
                            contenedorNombreInterno.appendChild(nombreInternoUI)

                            const contenedorGlobal = document.createElement("div")
                            contenedorGlobal.classList.add(
                                "flexVertical"
                            )
                            servicioUI.appendChild(contenedorGlobal)

                            const contenedorNombrePublico = document.createElement("div")
                            contenedorNombrePublico.classList.add(
                                "flexVertical",
                                "padding6"
                            )
                            contenedorGlobal.appendChild(contenedorNombrePublico)

                            const tituluNombrePublico = document.createElement("p")
                            tituluNombrePublico.textContent = `Nombre público`
                            contenedorNombrePublico.appendChild(tituluNombrePublico)

                            const titulo = document.createElement("p")
                            titulo.classList.add(
                                "negrita")
                            titulo.textContent = tituloPublico
                            contenedorNombrePublico.appendChild(titulo)


                            const disponibilidadUI = document.createElement("p")
                            disponibilidadUI.classList.add(
                                "padding6"
                            )
                            disponibilidadUI.textContent = diccionario.disponibilidad[disponibilidadIDV]
                            servicioUI.appendChild(disponibilidadUI)


                            if (disponibilidadIDV === "variable") {

                                const info = document.createElement("p")
                                info.classList.add(
                                    "padding6"
                                )
                                info.textContent = `Este servicio tiene una disponibilidad limitada. Es por eso que si selecciona este servicio, nos pondremos en contacto con el titular de la reserva en las próximas horas para confirmarle la disponibilidad del servicio para su reserva.`
                                servicioUI.appendChild(info)
                            }

                            if (duracionIDV === "rango") {
                                const contenedorDuracion = document.createElement("div")
                                contenedorDuracion.classList.add(
                                    "flexVertical",
                                    "padding6"

                                )
                                servicioUI.appendChild(contenedorDuracion)

                                const info = document.createElement("p")
                                info.classList.add("negrita")
                                info.textContent = `Servicio disponible solo desde ${fechaInicio} hata ${fechaFinal}. Ambas fechas incluidas.`
                                contenedorDuracion.appendChild(info)

                            }
                            const definicionUI = document.createElement("p")
                            definicionUI.classList.add(
                                "padding6"
                            )
                            definicionUI.textContent = definicion
                            servicioUI.appendChild(definicionUI)


                            Object.entries(gruposDeOpciones).forEach(([grupoIDV, gDP]) => {
                                const nombreGrupo = gDP.nombreGrupo
                                const opcionesGrupo = gDP.opcionesGrupo

                                const contenedorGrupo = document.createElement("div")
                                contenedorGrupo.setAttribute("grupoIDV", grupoIDV)
                                contenedorGrupo.classList.add(
                                    "flexVertical", "gap6", "borderGrey1", "borderRadius14", "padding6"
                                )


                                const tituloGrupo = document.createElement("p")
                                tituloGrupo.classList.add("negrita", "padding10")
                                tituloGrupo.textContent = nombreGrupo
                                contenedorGrupo.appendChild(tituloGrupo)


                                const contenedorOpcionesGrupo = document.createElement("div")
                                contenedorOpcionesGrupo.classList.add(
                                    "flexVertical", "gap6"
                                )
                                contenedorGrupo.appendChild(contenedorOpcionesGrupo)

                                let interruptor = false

                                opcionesGrupo.forEach((op) => {
                                    const opcionIDV = op.opcionIDV
                                    const nombreOpcion = op.nombreOpcion
                                    const precioOpcion = op.precioOpcion ? op.precioOpcion + "$" : "0.00$ (Sin coste añadido)"

                                    const selectorOpcionesGrupo = opcionesSeleccionadas[grupoIDV] || []
                                    if (selectorOpcionesGrupo.includes(opcionIDV)) {
                                        interruptor = true
                                        const contenedorOpcion = document.createElement("div")
                                        contenedorOpcion.classList.add(
                                            "flexVertical", "gap6", "backgroundGrey1", "borderRadius10", "padding14"
                                        )
                                        contenedorOpcionesGrupo.appendChild(contenedorOpcion)

                                        // const grupoRenderizado_selector = servicioUI.querySelector(`[grupoIDV="${grupoIDV}"]`)
                                        // if (!grupoRenderizado_selector) {
                                        //     servicioUI.appendChild(contenedorGrupo)
                                        // }

                                        const opcionUI = document.createElement("p")
                                        opcionUI.setAttribute("opcionIDV", opcionIDV)

                                        opcionUI.textContent = nombreOpcion
                                        contenedorOpcion.appendChild(opcionUI)


                                        const precioUI = document.createElement("p")
                                        precioUI.setAttribute("opcionIDV", opcionIDV)
                                        precioUI.classList.add(
                                            "textoNegrita"
                                        )
                                        precioUI.textContent = precioOpcion
                                        contenedorOpcion.appendChild(precioUI)
                                    }
                                })
                                if (interruptor) {
                                    servicioUI.appendChild(contenedorGrupo)
                                }
                            })



                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add(
                                "flexHorizontal",
                                "flexAHCentrad",
                                "gap6"
                            )
                            servicioUI.appendChild(contenedorBotones)


                            const botonModificar = document.createElement("div")
                            botonModificar.classList.add("botonV6")
                            botonModificar.textContent = "Modificar servicio en simulacón"
                            botonModificar.addEventListener("click", () => {

                                casaVitini
                                    .administracion
                                    .simuladorDePrecios
                                    .componentes
                                    .servicios
                                    .componentesUI.acutalizarServicioEnSimulacion.ui({
                                        servicioUID_enSimulacion,
                                        instanciaUID_contenedorServicios
                                    })
                            })
                            contenedorBotones.appendChild(botonModificar)


                            const botonIr = document.createElement("a")
                            botonIr.classList.add("botonV6")
                            botonIr.textContent = "Ir al servicio"
                            botonIr.setAttribute("href", "/administracion/servicios/servicio:" + servicioUID)
                            botonIr.setAttribute("target", "_blank")
                            contenedorBotones.appendChild(botonIr)


                            const botonEliminar = document.createElement("div")
                            botonEliminar.classList.add("botonV6")
                            botonEliminar.textContent = "Eliminar servicio de la simulación"
                            botonEliminar.addEventListener("click", () => {
                                casaVitini
                                    .administracion
                                    .simuladorDePrecios
                                    .componentes
                                    .servicios
                                    .componentesUI.
                                    eliminarServicio
                                    .ui({
                                        instanciaUID_contenedorServicios,
                                        servicioUID_enSimulacion,
                                        nombreInterno
                                    })
                            })
                            contenedorBotones.appendChild(botonEliminar)




                            return servicioUI
                        },
                        eliminarServicio: {
                            ui: async function (data) {
                                const nombreInterno = data.nombreInterno
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                const servicioUID_enSimulacion = data.servicioUID_enSimulacion

                                const simulacionUID = document.querySelector("[simulacionUID]").getAttribute("simulacionUID")


                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const instanciaUID_eliminarServicio = ui.getAttribute("instanciaUID")
                                const constructor = ui.querySelector("[componente=constructor]")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Confirmar eliminar el servicio ${nombreInterno} de la reserva simulada`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = "Var a eliminar el servicio de la reserva simulada, ¿Estas de acuerdo?"

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.textContent = "Comfirmar la eliminacion"
                                botonAceptar.addEventListener("click", () => {
                                    this.confirmarEliminar({
                                        servicioUID_enSimulacion,
                                        instanciaUID_eliminarServicio,
                                        instanciaUID_contenedorServicios,
                                        simulacionUID
                                    })
                                })
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"
                                document.querySelector("main").appendChild(ui)

                            },
                            confirmarEliminar: async function (data) {
                                const servicioUID_enSimulacion = String(data.servicioUID_enSimulacion)

                                const instanciaUID_eliminarServicio = data.instanciaUID_eliminarServicio
                                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                                const simulacionUID = data.simulacionUID
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                const ui = document.querySelector(`[instanciaUID="${instanciaUID_eliminarServicio}"]`)
                                const contenedor = ui.querySelector("[componente=constructor]")
                                contenedor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Eliminado servicio en la reserva..."
                                })
                                contenedor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/simuladorDePrecios/servicios/eliminarServicioEnSimulacion",
                                    servicioUID_enSimulacion
                                }

                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                if (respuestaServidor?.error) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    const simulacionUIRenderizada = document.querySelector(`[simulacionUID="${simulacionUID}"]`)
                                    if (!simulacionUIRenderizada) {
                                        return
                                    }
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    simulacionUIRenderizada.querySelector(`[servicioUID_enSimulacion="${servicioUID_enSimulacion}"]`)?.remove()

                                    const selectorContenedoresDeServiciosRenderizados = simulacionUIRenderizada.querySelectorAll("[servicioUID_enSimulacion]")
                                    if (selectorContenedoresDeServiciosRenderizados.length === 0) {
                                        const infoSinEnlaces = casaVitini
                                            .administracion
                                            .simuladorDePrecios
                                            .componentes
                                            .servicios
                                            .componentesUI
                                            .infoSinServiciosUI()
                                        const selectorContenedorDinamico = document.querySelector("[contenedor=servicios]")
                                        selectorContenedorDinamico.appendChild(infoSinEnlaces)
                                    }
                                    const desgloseFinanciero = respuestaServidor?.desgloseFinanciero
                                    if (desgloseFinanciero) {
                                        casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                            destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                            contenedorFinanciero: { desgloseFinanciero },
                                            modoUI: "simulador"
                                        })
                                    }
                                }

                            },

                        },
                        infoSinServiciosUI: () => {
                            const infoSinEnlaces = document.createElement("div")
                            infoSinEnlaces.classList.add("reservaDetalles_transacciones_enlacesDePago_infoSinEnlaces")
                            infoSinEnlaces.setAttribute("componente", "contenedorInfoSinServicios")
                            infoSinEnlaces.textContent = "No hay ningún servicio en la reserva simulada."
                            return infoSinEnlaces
                        },
                        acutalizarServicioEnSimulacion: {
                            ui: async function (data) {
                                const servicioUID_enSimulacion = data.servicioUID_enSimulacion
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                const main = document.querySelector("main")
                                const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")

                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const instanciaUID_UIFlotanteServicios = ui.getAttribute("instanciaUID")
                                const constructor = ui.querySelector("[componente=contenedor]")
                                main.appendChild(ui)

                                const botonCerrar = document.createElement("div")
                                botonCerrar.classList.add("botonV1")
                                botonCerrar.textContent = "Cerrar y volver"
                                botonCerrar.setAttribute("boton", "cancelar")
                                botonCerrar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                constructor.appendChild(botonCerrar)

                                const spinner = casaVitini.ui.componentes.spinnerSimple()
                                constructor.appendChild(spinner)

                                const respuestaServidor = await casaVitini.shell.servidor({
                                    zona: "administracion/simuladorDePrecios/servicios/obtenerDetallesDelServicioEnSimulacion",
                                    servicioUID_enSimulacion: String(servicioUID_enSimulacion),
                                    simulacionUID: String(simulacionUID)
                                })
                                console.log("respiestaServidor", respuestaServidor)
                                const ui_enEspera = document.querySelector(`[instanciaUID="${instanciaUID_UIFlotanteServicios}"]`)
                                if (!ui_enEspera) { return }
                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                                } else if (respuestaServidor?.ok) {
                                    constructor.innerHTML = null

                                    const botonCerrar = document.createElement("div")
                                    botonCerrar.classList.add("botonV1")
                                    botonCerrar.textContent = "Cerrar y volver"
                                    botonCerrar.setAttribute("boton", "cancelar")
                                    botonCerrar.addEventListener("click", () => {
                                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    })
                                    constructor.appendChild(botonCerrar)

                                    const servicio = respuestaServidor.servicio
                                    const servicioUID = servicio.servicioUID
                                    const contenedor = servicio.contenedor

                                    const servicioUI = casaVitini.ui.vistas.alojamiento.resumen.servicios.servicioUI({
                                        servicioUID,
                                        contenedor
                                    })
                                    servicioUI.setAttribute("estadoServicio", "selCompleta")
                                    servicioUI.querySelector("[componente=indicadorSelecion]").style.background = "rgb(0, 255, 0)"

                                    constructor.appendChild(servicioUI)
                                    const opcionesSel = servicio.opcionesSel

                                    Object.entries(opcionesSel).forEach(([grupoIDV, contenedorSel]) => {
                                        const selectorGrupo = servicioUI.querySelector(`[grupoIDV="${grupoIDV}"]`)
                                        contenedorSel.forEach(opcionIDV => {
                                            const selectorOpcion = selectorGrupo.querySelector(`[opcionIDV="${opcionIDV}"]`)
                                            selectorOpcion.setAttribute("estado", "activado")
                                            selectorOpcion.querySelector("[componente=indicadorSelecion]").style.background = "rgb(0, 255, 0)"
                                        })
                                    })

                                    const botonInsertar = document.createElement("div")
                                    botonInsertar.classList.add("botonV1BlancoIzquierda")
                                    botonInsertar.textContent = "Actualizar servicio en simulacion"
                                    botonInsertar.setAttribute("boton", "volver")
                                    botonInsertar.addEventListener("click", (e) => {
                                        const servicioUI_selector = e.target.closest("[componente=contenedor]").querySelector("[servicioUID]")

                                        const servicioUID = servicioUI_selector.getAttribute("servicioUID")
                                        const grupoDeOpciones = servicioUI_selector.querySelector("[area=grupoOpciones]").querySelectorAll("[componente=grupo]")
                                        const opcionesSeleccionadasDelServicio = {
                                            servicioUID,
                                            opcionesSeleccionadas: {}
                                        }
                                        const opcionesSeleccionadas = opcionesSeleccionadasDelServicio.opcionesSeleccionadas
                                        grupoDeOpciones.forEach((grupo) => {
                                            const grupoIDV = grupo.getAttribute("grupoIDV")
                                            opcionesSeleccionadas[grupoIDV] = []

                                            const opcionesDelGrupoSeleccionadas = grupo.querySelectorAll("[selector=opcion][estado=activado]")
                                            opcionesDelGrupoSeleccionadas.forEach(opcionSel => {
                                                const opcionIDV = opcionSel.getAttribute("opcionIDV")
                                                opcionesSeleccionadas[grupoIDV].push(opcionIDV)
                                            })
                                        })

                                        // Poner una advertenc  ia superpuesta para al espera.
                                        this.confirmarActualizar({
                                            servicioUID_enSimulacion,
                                            simulacionUID,
                                            instanciaUID_UIFlotanteServicios,
                                            instanciaUID_contenedorServicios,
                                            opcionesSeleccionadasDelServicio
                                        })
                                    })
                                    constructor.appendChild(botonInsertar)
                                }
                            },
                            confirmarActualizar: async function (data) {
                                const simulacionUID = data.simulacionUID
                                const servicioUID_enSimulacion = String(data.servicioUID_enSimulacion)
                                const instanciaUID_UIFlotanteServicios = data.instanciaUID_UIFlotanteServicios
                                const instanciaUID_contenedorServicios = data.instanciaUID_contenedorServicios
                                const opcionesSeleccionadasDelServicio = data.opcionesSeleccionadasDelServicio

                                const instanciaPantallaCarga = casaVitini.utilidades.codigoFechaInstancia()
                                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                                    mensaje: "Actualizando el servicio en la simulación",
                                    textoBoton: "ocultar",
                                    instanciaUID: instanciaPantallaCarga
                                })

                                const respuestaServidor = await casaVitini.shell.servidor({
                                    zona: "administracion/simuladorDePrecios/servicios/actualizarServicioEnSimulacion",
                                    simulacionUID,
                                    servicioUID_enSimulacion,
                                    opcionesSeleccionadasDelServicio
                                })


                                document.querySelector(`[instanciaUID="${instanciaPantallaCarga}"]`).remove()
                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    console.log("respuestaServidor", respuestaServidor)
                                    const servicioData = respuestaServidor.servicio
                                    const servicioUID_enSimulacion = servicioData.servicioUID
                                    const nombreInterno = servicioData.nombre
                                    const contenedor = servicioData.contenedor
                                    const opcionesSel = servicioData.opcionesSel
                                    const desgloseFinanciero = respuestaServidor?.desgloseFinanciero

                                    const selectorContenedorServicios = document.querySelector(`[simulacionUID="${simulacionUID}"] [contenedor=servicios]`)
                                    if (!selectorContenedorServicios) {
                                        return
                                    }

                                    const servicioUI = casaVitini.administracion.simuladorDePrecios.componentes.servicios.componentesUI.servicioUI({
                                        servicioUID_enSimulacion: servicioUID_enSimulacion,
                                        instanciaUID_contenedorServicios: "contenedorServicios",
                                        nombreInterno: nombreInterno,
                                        contenedor: contenedor,
                                        opcionesSeleccionadas: opcionesSel

                                    })
                                    const selectorInfo = selectorContenedorServicios.querySelector("[componente=contenedorInfoSinServicios]")
                                    selectorInfo?.remove()

                                    const selectorListaServicios = selectorContenedorServicios.querySelector("[componente=contenedorListaServiciosEnReserva]")

                                    const selContenedorServicio = selectorListaServicios.querySelector(`[servicioUID_enSimulacion="${servicioUID_enSimulacion}"]`)
                                    selectorListaServicios.replaceChild(servicioUI, selContenedorServicio);

                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    if (desgloseFinanciero) {
                                        casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                            destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                            contenedorFinanciero: { desgloseFinanciero },
                                            modoUI: "simulador"
                                        })
                                    }
                                }

                            },
                        },
                    },
                    actualizarContenedor: (data) => {
                        const servicios = data.servicios
                        const simulacionUID = data.simulacionUID
                        const simulacionUI = document.querySelector("[simulacionUID]")
                        const contenedorListaServicios = simulacionUI.querySelector(`[componente=contenedorListaServiciosEnReserva]`)
                        contenedorListaServicios.innerHTML = null

                        if (servicios.length === 0) {
                            const contenedorServicios = simulacionUI.querySelector(`[contenedor=servicios]`)
                            const infoSinEnlaces_selector = contenedorServicios.querySelector("[componente=contenedorInfoSinServicios]")
                            if (!infoSinEnlaces_selector) {
                                const infoSinEnlaces = casaVitini
                                    .administracion
                                    .simuladorDePrecios
                                    .componentes
                                    .servicios
                                    .componentesUI
                                    .infoSinServiciosUI()
                                contenedorServicios.appendChild(infoSinEnlaces)
                            }

                        } else {
                            for (const servicioEnReserva of servicios) {
                                const servicioUI = casaVitini
                                    .administracion
                                    .simuladorDePrecios
                                    .componentes
                                    .servicios
                                    .componentesUI
                                    .servicioUI({
                                        servicioUID_enSimulacion: servicioEnReserva.servicioUID,
                                        instanciaUID_contenedorServicios: simulacionUID,
                                        nombreInterno: servicioEnReserva.nombre,
                                        contenedor: servicioEnReserva.contenedor,
                                        opcionesSeleccionadas: servicioEnReserva.opcionesSel
                                    })
                                contenedorListaServicios.appendChild(servicioUI)
                            }
                        }


                    },


                },
                contenedorCodigosDescuento: {
                    infoInit: () => {
                        const info = document.createElement("div")
                        info.classList.add(
                            "flexVertical"
                        )
                        info.textContent = "Añada descuentos para verificarlos"
                        return info
                    },
                    descuentoUI: (data) => {
                        const descuentoBASE64 = data.descuentoBASE64

                        const contenedor = document.createElement("div")
                        contenedor.classList.add(
                            "flexVertical"
                        )
                        const info = document.createElement("p")
                        info.textContent = descuentoBASE64
                        contenedor.appendChild(info)

                        const botonEliminar = document.createElement("p")
                        botonEliminar.textContent = "Elimnar codigo descuento"
                        contenedor.appendChild(botonEliminar)

                        return contenedor
                    },
                    contenedorCampo: (data) => {

                        const campoData = data?.campoData || ""

                        const contenedor = document.createElement("div")
                        contenedor.style.gridTemplateColumns = "1fr auto"
                        contenedor.setAttribute("componente", "campoDescuento")
                        contenedor.classList.add(
                            "gridHorizontal2C",
                            "gap6",
                            "padding6",
                            "borderRadius12",
                            "borderGrey1"
                        )

                        const campoCodigo = document.createElement("input")
                        campoCodigo.setAttribute("campo", "codigoDescuento")
                        campoCodigo.classList.add(
                            "padding10",
                            "borderRadius8",
                        )
                        campoCodigo.placeholder = "Inserta un codigo de descuento para comprobar"
                        campoCodigo.value = campoData
                        contenedor.appendChild(campoCodigo)

                        const botonComprobar = document.createElement("div")
                        botonComprobar.classList.add(
                            "padding10",
                            "borderRadius8",
                            "botonV1",
                        )
                        botonComprobar.textContent = "Eliminar"
                        botonComprobar.addEventListener("click", (e) => {

                            const contenedorDescuentos = e.target.closest("[contenedor=codigosDescuento]")
                            const numeroCampos = contenedorDescuentos.querySelectorAll("[componente=campoDescuento]")
                            if (numeroCampos.length === 1) {
                                contenedorDescuentos.querySelector("[boton=comprobar]")?.remove()
                                const lista = contenedorDescuentos.querySelector("[contenedor=listaDescuentos]")
                                lista.style.display = "none"
                            }
                            const contenedorCampo = e.target.closest("[componente=campoDescuento]")
                            contenedorCampo?.remove()
                        })
                        contenedor.appendChild(botonComprobar)
                        return contenedor
                    },
                    botonComprobar: function () {
                        const boton = document.createElement("div")
                        boton.setAttribute("boton", "comprobar")
                        boton.classList.add(
                            "botonV1"
                        )
                        boton.textContent = "Comprobar codigo."
                        boton.addEventListener("click", () => {
                            this.cribadoOfertas.ui()
                        })
                        return boton
                    },
                    cribadoOfertas: {
                        ui: async function () {
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            main.appendChild(ui)
                            const instanciaUID_cribadoOfertas = ui.getAttribute("instanciaUID")
                            const simulacionUID = main.querySelector("[simulacionUID]").getAttribute("simulacionUID")
                            const contenedorDescuentosSimulacion = main.querySelector("[contenedor=codigosDescuento]")
                            const selectorCamposCodigos = contenedorDescuentosSimulacion.querySelector("[contenedor=listaDescuentos]").querySelectorAll("[campo=codigoDescuento]")
                            const codigosDescuentosPorVerificar = []
                            selectorCamposCodigos.forEach((contenedor) => {
                                const campo = contenedor.value
                                if (campo.length > 0) {
                                    codigosDescuentosPorVerificar.push(campo)
                                }
                            })

                            if (codigosDescuentosPorVerificar.length === 0) {
                                const m = "Escribe algún código en el campo de códigos, están todos vacíos."
                                return casaVitini.ui.componentes.advertenciaInmersiva(m)
                            }

                            const constructor = ui.querySelector("[componente=contenedor]")
                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo ofertas compatibles con los codigos de descuento...",
                                textoBoton: "Cancelar"
                            })
                            constructor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/simuladorDePrecios/descuentos/comprobarCodigosEnSimulacion",
                                simulacionUID,
                                codigosDescuentos: codigosDescuentosPorVerificar
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)


                            const uiRenderizada = document.querySelectorAll(`[instanciaUID="${instanciaUID_cribadoOfertas}"]`)
                            if (!uiRenderizada) { return }
                            spinner.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                constructor.appendChild(this.componentes.botonCancelar())
                                const ofertasCompatibles = respuestaServidor.ofertas.compatible
                                const ofertasIncompatibles = respuestaServidor.ofertas.incompatible







                                const contenedorOfertas = document.createElement("div")
                                contenedorOfertas.classList.add(
                                    "maxWidth1280px",
                                    "width100",
                                    "flexVertical",
                                    "gap6",
                                )
                                constructor.appendChild(contenedorOfertas)

                                const contenedorCompatibles = document.createElement("div")
                                contenedorCompatibles.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                if (ofertasCompatibles.length > 0) {
                                    contenedorOfertas.appendChild(contenedorCompatibles)
                                }
                                const tituloCompatibles = document.createElement("p")
                                tituloCompatibles.classList.add(
                                    "padding6"
                                )
                                tituloCompatibles.textContent = "Ofertas compatibles por código y el resto de condiciones. Estas ofertas son compatibles totalmente con la simulación. Puede añadirlas desde aquí."
                                contenedorCompatibles.appendChild(tituloCompatibles)

                                ofertasCompatibles.forEach((oferta) => {

                                    const ofertaUI = this.componentes.ofertaUI({
                                        contenedorOferta: oferta,
                                        simulacionUID,
                                        instanciaUID_cribadoOfertas
                                    })
                                    const enSimulacion = oferta?.enSimulacion
                                    if (enSimulacion === "si") {
                                        ofertaUI.querySelector("[boton=insertarOferta]")?.remove()
                                        const info = document.createElement("p")
                                        info.classList.add(
                                            "padding6"
                                        )
                                        info.textContent = "Esta oferta compatible ya está añadida a la simulación. Las ofertas basadas en condiciones solo se pueden añadir una vez. Si necesitas añadir esta oferta, puedes hacerlo administrativamente desde el contenedor financiero."
                                        ofertaUI.appendChild(info)
                                    }


                                    contenedorCompatibles.appendChild(ofertaUI)
                                })

                                const contenedorIncompatibles = document.createElement("div")
                                contenedorIncompatibles.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                if (ofertasIncompatibles.length > 0) {
                                    contenedorOfertas.appendChild(contenedorIncompatibles)
                                }

                                const tituloIncompatibles = document.createElement("p")
                                tituloIncompatibles.classList.add(
                                    "padding6"
                                )
                                tituloIncompatibles.textContent = "Ofertas compatibles por código por no con el resto de condiciones. Las condiciones que no se cumplen están marcadas con un borde rojo."
                                contenedorIncompatibles.appendChild(tituloIncompatibles)


                                ofertasIncompatibles.forEach((oferta) => {
                                    const condicionesQueNoSeCumple = oferta.condicionesQueNoSeCumple
                                    const ofertaUI = this.componentes.ofertaUI({
                                        contenedorOferta: oferta,
                                        instanciaUID_cribadoOfertas
                                    })
                                    ofertaUI.querySelector("[boton=insertarOferta]")?.remove()
                                    contenedorIncompatibles.appendChild(ofertaUI)

                                    condicionesQueNoSeCumple.forEach((condicionIDV) => {

                                        const selectorContenedorCondicion = ofertaUI.querySelector(`[tipoCondicion="${condicionIDV}"]`)
                                        selectorContenedorCondicion.classList.add(
                                            "borderRadius12",
                                        )
                                        selectorContenedorCondicion.style.border = "1px solid red"
                                    })


                                })

                                constructor.appendChild(this.componentes.botonCancelar())


                            }

                        },
                        componentes: {
                            condicionesUI: (data) => {
                                const condicionesArray = data.condicionesArray
                                const contenedorCondiciones = document.createElement("div")
                                contenedorCondiciones.setAttribute("contenedor", "condiciones")
                                contenedorCondiciones.classList.add(
                                    "flexVertical",
                                    "gap6",
                                    "backgroundGrey1",
                                    "padding6",
                                    "borderRadius14"
                                )
                                const tituloContendor = document.createElement("div")
                                tituloContendor.classList.add(
                                    "negrita",
                                    "padding6",

                                )
                                tituloContendor.textContent = "Condiciones de la oferta"
                                contenedorCondiciones.appendChild(tituloContendor)

                                condicionesArray.forEach((condicion) => {
                                    const tipoCondicion = condicion.tipoCondicion

                                    const contenedorCondicion = document.createElement("div")
                                    contenedorCondicion.classList.add("contenedorCondicion")
                                    contenedorCondicion.setAttribute("tipoCondicion", tipoCondicion)
                                    contenedorCondicion.classList.add(
                                        "flexVertical",
                                        "padding6",
                                    )
                                    const definicionCondicion = casaVitini
                                        .ui
                                        .componentes
                                        .contenedorFinanciero
                                        .componentesUI
                                        .ofertas
                                        .componentesUI
                                        .definicionCondiciones({
                                            tipoCondicion,
                                            condicion
                                        })
                                    contenedorCondicion.appendChild(definicionCondicion)
                                    contenedorCondiciones.appendChild(contenedorCondicion)
                                })
                                return contenedorCondiciones

                            },
                            ofertaUI: function (data) {

                                const contenedorOferta = data.contenedorOferta
                                const simulacionUID = data.simulacionUID
                                const instanciaUID_cribadoOfertas = data.instanciaUID_cribadoOfertas

                                const ofertaData = contenedorOferta.oferta
                                const nombreOferta = ofertaData.nombreOferta
                                const ofertaUID = ofertaData.ofertaUID
                                const fechaInicio = ofertaData.fechaInicio
                                const fechaFinal = ofertaData.fechaFinal
                                const estadoIDV = ofertaData.estadoIDV
                                const zonaIDV = ofertaData.zonaIDV
                                const condicionesArray = ofertaData.condicionesArray


                                const estadoUI_ = (estadoIDV) => {

                                    if (estadoIDV === "activado") {
                                        return "Activada"
                                    } else if (estadoIDV === "desactivado") {
                                        return "Desactivada"
                                    }

                                }

                                const contenedorOfertaUI = document.createElement("div")
                                contenedorOfertaUI.setAttribute("ofertaUID", ofertaUID)
                                contenedorOfertaUI.classList.add(
                                    "borderRadius12",
                                    "width100",
                                    "flexVertical",
                                    "backgroundGrey1",
                                    "padding6",
                                    "gap6"
                                )

                                const contenedorGlobal = document.createElement("div")
                                contenedorGlobal.classList.add(
                                    "flexVertical",
                                    "padding12",
                                    "gap6"
                                )

                                const nombreOfertaUI = document.createElement("div")
                                nombreOfertaUI.classList.add("negrita")
                                nombreOfertaUI.textContent = nombreOferta
                                contenedorGlobal.appendChild(nombreOfertaUI)

                                const estadoTitulo = document.createElement("div")
                                estadoTitulo.textContent = "Estado de la oferta"
                                contenedorGlobal.appendChild(estadoTitulo)


                                const estadoUI = document.createElement("div")
                                estadoUI.classList.add("negrita")
                                estadoUI.textContent = estadoUI_(estadoIDV)
                                contenedorGlobal.appendChild(estadoUI)
                                contenedorOfertaUI.appendChild(contenedorGlobal)

                                const descuentosUI = this.condicionesUI({ condicionesArray })
                                contenedorOfertaUI.appendChild(descuentosUI)

                                const contendorBotones = document.createElement("div")
                                contendorBotones.classList.add(
                                    "flexHorizontal",
                                    "gap6",
                                )

                                const botonInsertar = document.createElement("div")
                                botonInsertar.setAttribute("boton", "insertarOferta")
                                botonInsertar.classList.add(
                                    "borderRadius8",
                                    "backgroundGrey1",
                                    "comportamientoBoton",
                                    "padding8"
                                )
                                botonInsertar.textContent = "Insertar descuento en la reserva"
                                botonInsertar.addEventListener("click", () => {
                                    this.confirmarInsertar({
                                        simulacionUID,
                                        ofertaUID,
                                        instanciaUID_cribadoOfertas,
                                    })

                                })
                                contendorBotones.appendChild(botonInsertar)

                                const botonVerOferta = document.createElement("a")
                                botonVerOferta.classList.add(
                                    "borderRadius8",
                                    "backgroundGrey1",
                                    "comportamientoBoton",
                                    "padding8",
                                    "limpiezaBotonA"
                                )
                                botonVerOferta.textContent = "Ir a la oferta"
                                botonVerOferta.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                botonVerOferta.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                botonVerOferta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                contendorBotones.appendChild(botonVerOferta)

                                contenedorOfertaUI.appendChild(contendorBotones)

                                return contenedorOfertaUI
                            },
                            botonCancelar: () => {
                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.setAttribute("boton", "cancelar")
                                botonCancelar.textContent = "Cerrar y volver a la simulación"
                                botonCancelar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                return botonCancelar
                            },
                            confirmarInsertar: async function (data) {
                                const simulacionUID = data.simulacionUID
                                const ofertaUID = String(data.ofertaUID)
                                const instanciaUID_cribadoOfertas = data.instanciaUID_cribadoOfertas
                                const main = document.querySelector("main")
                                const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                                const instanciaUID = ui.getAttribute("instanciaUID")
                                main.appendChild(ui)
                                const contenedor = ui.querySelector("[componente=contenedor]")
                                contenedor.innerHTML = null

                                const spinner = casaVitini.ui.componentes.spinner({
                                    mensaje: "Insertando oferta en la simulación..."
                                })
                                contenedor.appendChild(spinner)

                                const transaccion = {
                                    zona: "administracion/simuladorDePrecios/descuentos/insertarDescuentoPorCompatiblePorCodigo",
                                    simulacionUID: String(simulacionUID),
                                    ofertaUID,
                                    codigosDescuentos: [
                                        "ey"
                                    ]
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                const uiRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                                uiRenderizada?.remove()


                                if (respuestaServidor?.error) {
                                    return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                                }

                                if (respuestaServidor?.ok) {
                                    const uiOfertaEnInstancia = document.querySelector(`[instanciaUID="${instanciaUID_cribadoOfertas}"] [ofertaUID="${ofertaUID}"]`)
                                    if (uiOfertaEnInstancia) {
                                        uiOfertaEnInstancia.querySelector("[boton=insertarOferta]")?.remove()
                                        const info = document.createElement("p")
                                        info.classList.add(
                                            "padding6"
                                        )
                                        info.textContent = "Oferta recién añadida correctamente a la simulación. No se puede volver a añadir una oferta basada en condiciones. Para añadir una oferta arbitrariamente, hazlo mediante el botón de añadir ofertas administrativamente en la sección ofertas del contenedor financiero de la simulación."
                                        uiOfertaEnInstancia.appendChild(info)


                                    }
                                    const uiSimulacion = document.querySelector(`[simulacionUID="${simulacionUID}"]`)

                                    if (uiSimulacion) {
                                        const desgloseFinanciero = respuestaServidor?.desgloseFinanciero

                                        if (desgloseFinanciero) {
                                            casaVitini.ui.componentes.contenedorFinanciero.constructor({
                                                destino: `[simulacionUID="${simulacionUID}"] [contenedor=simulacion]`,
                                                contenedorFinanciero: { desgloseFinanciero },
                                                modoUI: "simulador"
                                            })
                                        }
                                    }

                                }

                            },
                        }
                    }
                },
                pasarelaSelectorDia: function (e) {
                    const d = {
                        unico: "[nombreContenedor=rangoUnico][calendario=unico]",
                        entrada: "[nombreContenedor=rangoDeSimulacion][calendario=entrada]",
                        salida: "[nombreContenedor=rangoDeSimulacion][calendario=salida]",
                    }
                    const tipoCalendario = e.target.closest("[tipoCalendario]").getAttribute("tipoCalendario")
                    const selectorContenedorFecha = document.querySelector(d[tipoCalendario])
                    const fechaRecovery_ISO = selectorContenedorFecha?.getAttribute("memoriaVolatil")
                    const fechaRecovery_humana = selectorContenedorFecha?.querySelector("[fechaUI]").textContent

                    casaVitini.ui.componentes.calendario.calendarioCompartido.seleccionarDia(e)
                    this.actualizaSimulacion({
                        selectorRecovery: d[tipoCalendario],
                        fechaRecovery_ISO,
                        fechaRecovery_humana
                    })
                }
            },
        },
        impuestos: {
            arranque: async () => {
                const main = document.querySelector("main")
                const instanciaUID = main.getAttribute("instanciaUID")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const soloDigitos = /^\d+$/;

                if (comandoInicial === "impuestos") {
                    casaVitini.administracion.impuestos.contenedorBotones()

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "impuesto_uid") {
                            nombreColumnaIDV = "impuestoUID"
                        } else if ((valorParametroURL)?.toLowerCase() === "tipo_valor") {
                            nombreColumnaIDV = "tipoValorIDV"
                        } else if ((valorParametroURL)?.toLowerCase() === "entidad") {
                            nombreColumnaIDV = "entidadIDV"
                        } else if ((valorParametroURL)?.toLowerCase() === "estado") {
                            nombreColumnaIDV = "estadoIDV"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                    })

                    casaVitini.administracion.impuestos.mostrarImpuestosResueltos(parametrosFormatoIDV)
                } else if (soloDigitos.test(comandoInicial)) {
                    main.setAttribute("zonaCSS", "administracion/impuestos/detalles")
                    const transaccion = {
                        zona: "administracion/impuestos/detalleImpuesto",
                        impuestoUID: String(comandoInicial)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor.error) {
                        const titulo = document.querySelector(".tituloGris")
                        titulo.textContent = "No existe ningún impuesto con el identificador: " + comandoInicial
                        main.innerHTML = null
                        main.appendChild(titulo)
                        return
                    }
                    casaVitini.administracion.impuestos.detalleImpuesto(respuestaServidor)
                }
                else {
                    casaVitini.ui.componentes.urlDesconocida()

                }

            },
            mostrarImpuestosResueltos: async function (listasImpuestos) {
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const selectorEspacio = document.querySelector("[componente=espacioImpuestos]")
                selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)

                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/impuestos")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const transaccion = {
                    origen: "url",
                    tipoConstruccionGrid: "total",
                    ...listasImpuestos
                }
                const paginaTipo = transaccion.paginaTipo
                let nombreColumnaURL
                const nombreColumna = transaccion.nombreColumna
                transaccion.pagina = transaccion.pagina ? Number(transaccion.pagina) : 1
                if ((nombreColumna)?.toLowerCase() === "impuestouid") {
                    nombreColumnaURL = "impuesto_uid"
                } else if ((nombreColumna)?.toLowerCase() === "tipovaloridv") {
                    nombreColumnaURL = "tipo_valor"
                } else if ((nombreColumna)?.toLowerCase() === "entidadidv") {
                    nombreColumnaURL = "entidad"
                } else if ((nombreColumna)?.toLowerCase() === "estadoidv") {
                    nombreColumnaURL = "estado"
                } else if (nombreColumna) {
                    nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                }

                const origen = transaccion.origen
                delete transaccion.origen
                const respuestaServidor = await casaVitini.shell.servidor({
                    zona: "administracion/impuestos/listaImpuestosPaginados",
                    pagina: transaccion.pagina,
                    nombreColumna: nombreColumna,
                    sentidoColumna: transaccion.sentidoColumna
                })

                const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                if (!instanciaRenderizada) {
                    return
                }

                if (respuestaServidor?.error) {
                    return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }

                if (respuestaServidor?.totalImpuestos === 0) {
                    const espacioClientes = document.querySelector("[componente=espacioImpuestos]")
                    document.querySelector("[gridUID=gridImpuestos]")?.remove()
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.textContent = "No hay impuestos configurados"
                    espacioClientes.appendChild(estadoBusquedaUI)
                    return

                }
                const impuestos = respuestaServidor.impuestos

                const dicccionario = {
                    estados: {
                        activado: "Activado",
                        desactivado: "Desactivado"
                    },
                    tiposValores: {
                        porcentaje: "Porcentaje",
                        tasa: "Tasa"
                    },
                    entidades: {
                        reserva: "Reserva",
                        servicio: "Servicio",
                        global: "Global"
                    },
                }

                for (const detallesDelImpuesto of impuestos) {
                    const tipoValorIDV = detallesDelImpuesto.tipoValorIDV
                    const entidadIDV = detallesDelImpuesto.entidadIDV
                    const estadoIDV = detallesDelImpuesto.estadoIDV
                    detallesDelImpuesto.tipoValorIDV = dicccionario.tiposValores[tipoValorIDV]
                    detallesDelImpuesto.estadoIDV = dicccionario.estados[estadoIDV]
                    detallesDelImpuesto.entidadIDV = dicccionario.entidades[entidadIDV]
                }
                const sentidoColumna = respuestaServidor.sentidoColumna

                const pagina = respuestaServidor.pagina
                const paginasTotales = respuestaServidor.paginasTotales
                const columnasGrid = [
                    {
                        columnaUI: "UID",
                        columnaIDV: "impuestoUID",
                    },
                    {
                        columnaUI: "Impuesto",
                        columnaIDV: "nombre",
                    },
                    {
                        columnaUI: "Tipo Impositivo",
                        columnaIDV: "tipoImpositivo",
                    },
                    {
                        columnaUI: "Tipo Valor",
                        columnaIDV: "tipoValorIDV",
                    },
                    {
                        columnaUI: "Entidad",
                        columnaIDV: "entidadIDV",
                    },
                    {
                        columnaUI: "Estado",
                        columnaIDV: "estadoIDV",
                    }
                ]
                const parametrosFinales = {}

                if (transaccion.nombreColumna) {
                    parametrosFinales.nombre_columna = nombreColumnaURL
                    parametrosFinales.sentido_columna = sentidoColumna
                }
                if (pagina > 1 && paginasTotales > 1) {
                    parametrosFinales.pagina = pagina
                }
                const estructuraParametrosFinales = []
                for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                    const estructura = `${parametroFinal}:${valorFinal}`
                    estructuraParametrosFinales.push(estructura)
                }
                let parametrosURLFInal = ""
                if (estructuraParametrosFinales.length > 0) {
                    parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                }

                const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                    metodoSalida: "administracion.impuestos.mostrarImpuestosResueltos",
                    configuracionGrid: {
                        filas: impuestos,
                        sentidoColumna: sentidoColumna,
                        nombreColumna: nombreColumna,
                        pagina: pagina,
                        destino: "[componente=espacioImpuestos]",
                        columnasGrid: columnasGrid,
                        gridUID: "gridImpuestos",
                        mascaraURL: {
                            mascara: "/administracion/impuestos/",
                            parametro: "impuestoUID"
                        },
                    },
                    configuracionPaginador: {
                        paginasTotales: paginasTotales,
                        granuladoURL: {
                            parametros: parametrosFinales,
                            directoriosFusion: granuladoURL.directoriosFusion
                        },
                    }
                })

                const titulo = "Casa Vitini"
                const estado = {
                    zona: constructorURLFinal,
                    EstadoInternoZona: "estado",
                    tipoCambio: "parcial",
                    componenteExistente: "contenedorBotonesImpuestos",
                    funcionPersonalizada: "administracion.impuestos.mostrarImpuestosResueltos",
                    args: transaccion
                }







                if (origen === "url" || origen === "botonMostrarClientes") {
                    window.history.replaceState(estado, titulo, constructorURLFinal);
                } else if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                    window.history.pushState(estado, titulo, constructorURLFinal);
                } else if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                    window.history.replaceState(estado, titulo, constructorURLFinal);
                }
            },
            detalleImpuesto: async (respuestaServidor) => {
                if (respuestaServidor?.error) {
                    const info = {
                        titulo: "Impuesto inexistente",
                        descripcion: "El impuesto al que hace referencia la URL no existe.Revisa el identificador.Quizás fue un impuesto que tuviste hace un tiempo y que borraste."
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                }
                if (respuestaServidor?.ok) {
                    const detallesImpuesto = respuestaServidor?.ok
                    const impuestoUID = detallesImpuesto.impuestoUID
                    const nombre = detallesImpuesto.nombre
                    const tipoValorIDV = detallesImpuesto.tipoValorIDV
                    const tipoImpositivo = detallesImpuesto.tipoImpositivo
                    const entidadIDV = detallesImpuesto.entidadIDV
                    const estadoIDV = detallesImpuesto.estadoIDV


                    const dicccionario = {
                        estados: {
                            activado: "Activado",
                            desactivado: "Desactivado"
                        },
                        tiposValores: {
                            porcentaje: "Porcentaje",
                            tasa: "Tasa"
                        },
                        entidades: {
                            reserva: "Reserva",
                            servicio: "Servicio",
                            global: "Global"
                        },
                    }


                    let selectorEspacioPreciosEImpuestos = document.querySelector("[componente=impuestos]")
                    let bloqueDetallesImpuesto = document.createElement("div")
                    bloqueDetallesImpuesto.classList.add("detalleImpuestoBloque")
                    bloqueDetallesImpuesto.setAttribute("impuestoUID", impuestoUID)
                    bloqueDetallesImpuesto.setAttribute("componente", "bloqueDetalles")
                    let nombreImpuestoUI = document.createElement("p")
                    nombreImpuestoUI.classList.add("detalleImpuestoNombre")
                    nombreImpuestoUI.setAttribute("detalleImpuesto", "nombre")
                    nombreImpuestoUI.textContent = nombre
                    bloqueDetallesImpuesto.appendChild(nombreImpuestoUI)
                    let bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "tipoImpositivo")
                    let tituloDato = document.createElement("p")
                    tituloDato.classList.add("detalleImpuestoTituloDato")
                    tituloDato.textContent = "Tipo impositivo"
                    bloqueDato.appendChild(tituloDato)
                    let datoLectura = document.createElement("p")
                    datoLectura.classList.add("detalleImpuestoDatoLectura")
                    datoLectura.setAttribute("detalleImpuesto", "tipoImpositivo")
                    datoLectura.textContent = tipoImpositivo
                    bloqueDato.appendChild(datoLectura)
                    bloqueDetallesImpuesto.appendChild(bloqueDato)
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "tipoValorIDV")
                    tituloDato = document.createElement("p")
                    tituloDato.classList.add("detalleImpuestoTituloDato")
                    tituloDato.textContent = "Tipo valor"
                    bloqueDato.appendChild(tituloDato)
                    datoLectura = document.createElement("p")
                    datoLectura.classList.add("detalleImpuestoDatoLectura")
                    datoLectura.setAttribute("detalleImpuesto", "tipoValorIDV")
                    datoLectura.setAttribute("tipoValorIDV", tipoValorIDV)
                    datoLectura.textContent = dicccionario.tiposValores[tipoValorIDV]
                    bloqueDato.appendChild(datoLectura)
                    bloqueDetallesImpuesto.appendChild(bloqueDato)
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "entidadIDV")
                    tituloDato = document.createElement("p")
                    tituloDato.classList.add("detalleImpuestoTituloDato")
                    tituloDato.textContent = "Entidad"
                    bloqueDato.appendChild(tituloDato)
                    datoLectura = document.createElement("p")
                    datoLectura.classList.add("detalleImpuestoDatoLectura")
                    datoLectura.setAttribute("detalleImpuesto", "entidadIDV")
                    datoLectura.setAttribute("entidadIDV", entidadIDV)
                    datoLectura.textContent = dicccionario.entidades[entidadIDV]
                    bloqueDato.appendChild(datoLectura)
                    bloqueDetallesImpuesto.appendChild(bloqueDato)
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "estadoIDV")
                    tituloDato = document.createElement("p")
                    tituloDato.classList.add("detalleImpuestoTituloDato")
                    tituloDato.textContent = "Estado del impuesto"
                    bloqueDato.appendChild(tituloDato)
                    datoLectura = document.createElement("p")
                    datoLectura.classList.add("detalleImpuestoDatoLectura")
                    datoLectura.setAttribute("detalleImpuesto", "estadoIDV")
                    datoLectura.setAttribute("estadoIDV", estadoIDV)
                    datoLectura.textContent = dicccionario.estados[estadoIDV]
                    bloqueDato.appendChild(datoLectura)
                    bloqueDetallesImpuesto.appendChild(bloqueDato)
                    bloqueDato = document.createElement("div")
                    bloqueDato.classList.add("detalleImpuestoBloqueDato")
                    bloqueDato.setAttribute("bloqueDato", "moneda")











                    selectorEspacioPreciosEImpuestos.appendChild(bloqueDetallesImpuesto)
                    let bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detalleImpuestoBloqueBotones")
                    let boton = document.createElement("p")
                    boton.classList.add("detalleImpuestoBoton")
                    boton.setAttribute("boton", "editarImpuesto")
                    boton.textContent = "Editar impuesto"
                    boton.addEventListener("click", casaVitini.administracion.impuestos.editarImpuesto)
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("p")
                    boton.classList.add("detalleImpuestoBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("boton", "guardarCambios")
                    boton.addEventListener("click", casaVitini.administracion.impuestos.guardarModificacionesImpuesto)
                    boton.textContent = "Guardar cambios"
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("p")
                    boton.classList.add("detalleImpuestoBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("boton", "cancelarCambios")
                    boton.addEventListener("click", casaVitini.administracion.impuestos.cancelarCambiosImpuesto)
                    boton.textContent = "Cancelar cambios"
                    bloqueBotones.appendChild(boton)
                    boton = document.createElement("p")
                    boton.classList.add("detalleImpuestoBoton")
                    boton.classList.add("elementoOcultoInicialmente")
                    boton.setAttribute("boton", "eliminarImpuesto")
                    boton.addEventListener("click", casaVitini.administracion.impuestos.eliminarPerfilImpuestos.UI)
                    boton.textContent = "Eliminar impuesto"
                    bloqueBotones.appendChild(boton)
                    selectorEspacioPreciosEImpuestos.appendChild(bloqueBotones)
                }
            },
            editarImpuesto: async () => {
                document.querySelector("[boton=editarImpuesto]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[boton=guardarCambios]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[boton=cancelarCambios]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[boton=eliminarImpuesto]").classList.remove("elementoOcultoInicialmente")
                const opcionesTipoValor = [
                    {
                        tipoValorIDV: "tasa",
                        tipoValorUI: "Tasa"
                    }, {
                        tipoValorIDV: "porcentaje",
                        tipoValorUI: "Porcentaje"
                    }
                ]
                const opcionesEntidad = [
                    {
                        entidadIDV: "reserva",
                        entidadUI: "Reserva"
                    },
                    {
                        entidadIDV: "servicio",
                        entidadUI: "Servicio"
                    },
                    {
                        entidadIDV: "global",
                        entidadUI: "Global"
                    }
                ]
                const listaEstados = [
                    {
                        estadoIDV: "activado",
                        estadoUI: "Activado"
                    }, {
                        estadoIDV: "desactivado",
                        estadoUI: "Desactivado"
                    }
                ]
                const selectorDatoLectura = document.querySelectorAll("[detalleImpuesto]")
                selectorDatoLectura.forEach((detalleImpuesto) => {
                    detalleImpuesto.style.display = "none"
                    const nombreDetalles = detalleImpuesto.getAttribute("detalleImpuesto")
                    const datoDetalle = detalleImpuesto.textContent
                    const campoEditable = document.createElement("input")
                    campoEditable.classList.add("detalleImpuestoCampoEditable")
                    campoEditable.setAttribute("componente", "campoEditable")
                    campoEditable.setAttribute("campoEditable", nombreDetalles)
                    campoEditable.setAttribute("datoActual", datoDetalle)
                    campoEditable.value = datoDetalle
                    if (nombreDetalles === "nombre") {
                        const selectorBloqueDetalles = document.querySelector("[componente=bloqueDetalles")
                        const selectorPrimerBloqueDAtos = document.querySelector("[bloqueDato=tipoImpositivo]")
                        campoEditable.placeholder = "Escribe un nombre para el impuesto"
                        campoEditable.classList.add("nombreImpuestoCampo")
                        selectorBloqueDetalles.insertBefore(campoEditable, selectorPrimerBloqueDAtos);
                    }
                    if (nombreDetalles === "tipoValorIDV") {
                        const tipoValorIDV_actual = detalleImpuesto.getAttribute("tipoValorIDV")
                        const contenedorOpciones = document.createElement("select")
                        contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                        contenedorOpciones.setAttribute("componente", "campoEditable")
                        contenedorOpciones.setAttribute("campoEditable", nombreDetalles)
                        contenedorOpciones.setAttribute("datoActual", tipoValorIDV_actual)
                        opcionesTipoValor.forEach((opcionTipoValor) => {
                            const tipoValorIDV = opcionTipoValor.tipoValorIDV
                            const tipoValorUI = opcionTipoValor.tipoValorUI
                            const opcion = document.createElement("option");
                            opcion.value = tipoValorIDV;
                            opcion.text = tipoValorUI;
                            opcion.setAttribute("opcion", tipoValorIDV)
                            contenedorOpciones.add(opcion);
                        })
                        contenedorOpciones.value = tipoValorIDV_actual;
                        const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(contenedorOpciones)
                        if (nombreDetalles === "tipoImpositivo") {
                            const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                            selectorBloqueDato.appendChild(campoEditable)
                        }
                    }
                    if (nombreDetalles === "entidadIDV") {
                        const aplicacionSobreIDV_actual = detalleImpuesto.getAttribute("entidadIDV")
                        const contenedorOpciones = document.createElement("select")
                        contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                        contenedorOpciones.setAttribute("componente", "campoEditable")
                        contenedorOpciones.setAttribute("campoEditable", nombreDetalles)
                        contenedorOpciones.setAttribute("datoActual", aplicacionSobreIDV_actual)
                        opcionesEntidad.forEach((e) => {
                            const entidadIDV = e.entidadIDV
                            const entidadUI = e.entidadUI
                            const opcion = document.createElement("option");
                            opcion.value = entidadIDV;
                            opcion.text = entidadUI;
                            opcion.setAttribute("opcion", entidadIDV)
                            contenedorOpciones.add(opcion);
                        })
                        contenedorOpciones.value = aplicacionSobreIDV_actual;
                        const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(contenedorOpciones)
                        if (nombreDetalles === "tipoImpositivo") {
                            const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                            selectorBloqueDato.appendChild(campoEditable)
                        }
                    }
                    if (nombreDetalles === "estadoIDV") {
                        const estadoIDV_Actual = detalleImpuesto.getAttribute("estadoIDV")
                        const contenedorOpciones = document.createElement("select")
                        contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                        contenedorOpciones.setAttribute("componente", "campoEditable")
                        contenedorOpciones.setAttribute("campoEditable", nombreDetalles)
                        contenedorOpciones.setAttribute("datoActual", estadoIDV_Actual)
                        listaEstados.forEach((estado) => {
                            const estadoIDV = estado.estadoIDV
                            const estadoUI = estado.estadoUI
                            const opcion = document.createElement("option");
                            opcion.value = estadoIDV;
                            opcion.text = `${estadoUI}`;
                            opcion.setAttribute("opcion", estadoIDV)
                            contenedorOpciones.add(opcion);
                        })
                        contenedorOpciones.value = estadoIDV_Actual;
                        const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        selectorBloqueDato.appendChild(contenedorOpciones)
                        if (nombreDetalles === "tipoImpositivo") {
                            const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                            selectorBloqueDato.appendChild(campoEditable)
                        }
                    }
                    if (nombreDetalles === "tipoImpositivo") {
                        const selectorBloqueDato = document.querySelector(`[bloqueDato="${nombreDetalles}"]`)
                        campoEditable.placeholder = "Escribe un tipo impositivo(00.00)"

                        selectorBloqueDato.appendChild(campoEditable)
                    }
                })
            },
            cancelarCambiosImpuesto: () => {
                document.querySelector("[boton=editarImpuesto]").classList.remove("elementoOcultoInicialmente")
                document.querySelector("[boton=guardarCambios]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[boton=cancelarCambios]").classList.add("elementoOcultoInicialmente")
                document.querySelector("[boton=eliminarImpuesto]").classList.add("elementoOcultoInicialmente")
                const selectorCamposEditables = document.querySelectorAll("[componente=campoEditable]")
                selectorCamposEditables.forEach((campoEditable) => {
                    campoEditable.remove()
                })
                const selectorDatoLectura = document.querySelectorAll("[detalleImpuesto]")
                selectorDatoLectura.forEach((detalleImpuesto) => {
                    detalleImpuesto.removeAttribute("style")
                })
            },
            guardarModificacionesImpuesto: async () => {
                const impuestoUID = document.querySelector("[impuestoUID]").getAttribute("impuestoUID")
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const mensaje = "Guardando impuesto..."
                const datosPantallaSuperpuesta = {
                    instanciaUID: instanciaUID,
                    mensaje: mensaje
                }
                casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                const transaccion = {
                    zona: "administracion/impuestos/guardarModificacionImpuesto",
                    impuestoUID: String(impuestoUID)
                }
                const selectorCamposEditables = document.querySelectorAll("[componente=campoEditable]")
                selectorCamposEditables.forEach(campoEditable => {
                    const nombreCampoEditable = campoEditable.getAttribute("campoEditable")
                    const datoCampoEditable = campoEditable.value
                    transaccion[nombreCampoEditable] = datoCampoEditable
                })

                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                if (!instanciaRenderizada) { return }
                instanciaRenderizada.remove()
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const detalleImpuestoActualizado = respuestaServidor?.detallesImpuesto
                    const nombre = detalleImpuestoActualizado.nombre
                    const impuestoUID = detalleImpuestoActualizado.impuestoUID
                    const tipoImpositivo = detalleImpuestoActualizado.tipoImpositivo
                    const tipoValorIDV = detalleImpuestoActualizado.tipoValorIDV
                    const estadoIDV = detalleImpuestoActualizado.estadoIDV
                    const entidadIDV = detalleImpuestoActualizado.entidadIDV

                    const dicccionario = {
                        estados: {
                            activado: "Activado",
                            desactivado: "Desactivado"
                        },
                        tiposValores: {
                            porcentaje: "Porcentaje",
                            tasa: "Tasa"
                        },
                        entidades: {
                            reserva: "Reserva",
                            servicio: "Servicios",
                            global: "Global"
                        },
                    }

                    const selectorCamposEditables = document.querySelectorAll("[componente=campoEditable]")
                    selectorCamposEditables.forEach(campoEditable => campoEditable.remove())
                    const selectorNombreImpuesto = document.querySelector("[detalleImpuesto=nombre]")

                    selectorNombreImpuesto.textContent = nombre
                    const selectotipoImpositivo = document.querySelector("[detalleImpuesto=tipoImpositivo]")
                    selectotipoImpositivo.textContent = tipoImpositivo

                    const selectorTipoValor = document.querySelector("[detalleImpuesto=tipoValorIDV]")
                    selectorTipoValor.setAttribute("tipoValor", tipoValorIDV)
                    selectorTipoValor.textContent = dicccionario.tiposValores[tipoValorIDV]

                    const selectorEntidad = document.querySelector("[detalleImpuesto=entidadIDV]")
                    selectorEntidad.setAttribute("entidadIDV", entidadIDV)
                    selectorEntidad.textContent = dicccionario.entidades[entidadIDV]

                    const selectorMoneda = document.querySelector("[detalleImpuesto=estadoIDV]")
                    selectorMoneda.setAttribute("estadoIDV", estadoIDV)
                    selectorMoneda.textContent = dicccionario.estados[estadoIDV]

                    const selectorDatoLectura = document.querySelectorAll("[detalleImpuesto]")
                    selectorDatoLectura.forEach((detalleImpuesto) => {
                        detalleImpuesto.removeAttribute("style")
                    })
                    document.querySelector("[boton=editarImpuesto]").classList.remove("elementoOcultoInicialmente")
                    document.querySelector("[boton=guardarCambios]").classList.add("elementoOcultoInicialmente")
                    document.querySelector("[boton=cancelarCambios]").classList.add("elementoOcultoInicialmente")
                    document.querySelector("[boton=eliminarImpuesto]").classList.add("elementoOcultoInicialmente")
                }
            },
            eliminarPerfilImpuestos: {
                UI: () => {
                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                    const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                    const titulo = constructor.querySelector("[componente=titulo]")
                    titulo.textContent = "Confirmar la eliminación del perfil del impuesto"
                    const mensaje = constructor.querySelector("[componente=mensajeUI]")
                    mensaje.textContent = "Vas a eliminar un impuesto y su aplicación será inmediata en los precios de las reservas."

                    const botonAceptar = constructor.querySelector("[boton=aceptar]")
                    botonAceptar.textContent = "Comfirmar la eliminacion del impuesto"
                    botonAceptar.addEventListener("click", casaVitini.administracion.impuestos.eliminarPerfilImpuestos.confirmarEliminacion)
                    const botonCancelar = constructor.querySelector("[boton=cancelar]")
                    botonCancelar.textContent = "Cancelar la eliminacion"

                    document.querySelector("main").appendChild(pantallaInmersiva)
                },
                confirmarEliminacion: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Eliminado impuesto..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const impuestoUID = document.querySelector("[impuestoUID]").getAttribute("impuestoUID")
                    const transaccion = {
                        zona: "administracion/impuestos/eliminarPerfilImpuesto",
                        impuestoUID: String(impuestoUID)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                        selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                        const entrada = {
                            vista: "/administracion/impuestos",
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(entrada)
                    }
                }
            },
            crearImpuesto: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/impuestos/nuevo")

                    const opcionesTipoValor = [
                        {
                            tipoValorIDV: "porcentaje",
                            tipoValorUI: "Porcentaje"
                        },
                        {
                            tipoValorIDV: "tasa",
                            tipoValorUI: "Tasa"
                        }
                    ]

                    const opcionesEntidad = [
                        {
                            entidadIDV: "reserva",
                            entidadUI: "Reserva"
                        },
                        {
                            entidadIDV: "servicio",
                            entidadUI: "Servicios"
                        },
                        {
                            entidadIDV: "global",
                            entidadUI: "Global"
                        },

                    ]

                    const selectorEspacioImpuestos = document.querySelector("[componente=espacioImpuestos]")
                    const contenedorNuevoImpuesto = document.createElement("div")
                    contenedorNuevoImpuesto.classList.add("contenedorNuevoImpuesto")
                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")
                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.textContent = "Para crear un nuevo impuesto, rellene los datos de este, establece un nombre, una cantidad y seleccione las opciones restantes."
                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                    let campoCraerNuevoImpuesto = document.createElement("input")
                    campoCraerNuevoImpuesto.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto")
                    campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "nombre")
                    campoCraerNuevoImpuesto.placeholder = "Escribo el nombre del nuevo impuesto"
                    bloqueBloqueoApartamentos.appendChild(campoCraerNuevoImpuesto)
                    campoCraerNuevoImpuesto = document.createElement("input")
                    campoCraerNuevoImpuesto.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto")
                    campoCraerNuevoImpuesto.setAttribute("comNuevoImpuesto", "tipoImpositivo")
                    campoCraerNuevoImpuesto.placeholder = "0.00"
                    bloqueBloqueoApartamentos.appendChild(campoCraerNuevoImpuesto)
                    let contenedorOpciones = document.createElement("select")
                    contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                    contenedorOpciones.setAttribute("comNuevoImpuesto", "tipoValorIDV")

                    const opTipoValor = document.createElement("option")
                    opTipoValor.selected = "true"
                    opTipoValor.disabled = "true"
                    opTipoValor.value = ""
                    opTipoValor.text = "Selecciona el tipo de valor del impuesto"
                    contenedorOpciones.appendChild(opTipoValor)

                    opcionesTipoValor.forEach((opcionTipoValor) => {
                        const tipoValorIDV = opcionTipoValor.tipoValorIDV
                        const tipoValorUI = opcionTipoValor.tipoValorUI
                        const opcion = document.createElement("option");
                        opcion.value = tipoValorIDV;
                        opcion.text = tipoValorUI;
                        opcion.setAttribute("opcion", tipoValorIDV)
                        contenedorOpciones.add(opcion);
                    })
                    bloqueBloqueoApartamentos.appendChild(contenedorOpciones)
                    contenedorOpciones = document.createElement("select")
                    contenedorOpciones.classList.add("detalleImpuestoSelectorLista")
                    contenedorOpciones.setAttribute("comNuevoImpuesto", "entidadIDV")


                    const opEntidades = document.createElement("option")
                    opEntidades.selected = "true"
                    opEntidades.disabled = "true"
                    opEntidades.value = ""
                    opEntidades.text = "Selecciona el tipo de entidad"
                    contenedorOpciones.appendChild(opEntidades)

                    opcionesEntidad.forEach((entidad) => {
                        const entidadIDV = entidad.entidadIDV
                        const entidadUI = entidad.entidadUI
                        const opcion = document.createElement("option");
                        opcion.value = entidadIDV;
                        opcion.text = entidadUI;
                        opcion.setAttribute("opcion", entidadIDV)
                        contenedorOpciones.add(opcion);
                    })
                    bloqueBloqueoApartamentos.appendChild(contenedorOpciones)

                    contenedorNuevoImpuesto.appendChild(bloqueBloqueoApartamentos)
                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.textContent = "Crear nuevo impuesto"
                    botonCancelar.addEventListener("click", casaVitini.administracion.impuestos.crearImpuesto.confirmarCrearImpuesto)
                    bloqueBotones.appendChild(botonCancelar)
                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.textContent = "Cancelar"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                        selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })

                    contenedorNuevoImpuesto.appendChild(bloqueBotones)
                    selectorEspacioImpuestos.appendChild(contenedorNuevoImpuesto)

                },
                confirmarCrearImpuesto: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando nuevo impuesto..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje,
                        identificadorVisual: "pantallaDeCarga"
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const transaccion = {
                        zona: "administracion/impuestos/crearNuevoImpuesto"
                    }

                    let selectorCampos = document.querySelectorAll("[comNuevoImpuesto]")
                    selectorCampos.forEach((campoNuevoImpuesto) => {
                        const nombreCampo = campoNuevoImpuesto.getAttribute("comNuevoImpuesto")
                        const datoCampo = campoNuevoImpuesto.value
                        transaccion[nombreCampo] = datoCampo
                    })

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()


                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const nuevoUIDIMpuesto = respuestaServidor?.nuevoImpuestoUID
                        const entrada = {
                            vista: "/administracion/impuestos/" + nuevoUIDIMpuesto,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(entrada)
                    }
                }
            },
            contenedorBotones: () => {
                const espacioImpuestos = document.querySelector("[componente=impuestos]")
                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("administracion_impuestos_contenedorBotones")
                contenedorBotones.setAttribute("componente", "contenedorBotonesImpuestos")
                const botonCrearImpuesto = document.createElement("a")
                botonCrearImpuesto.classList.add("administracion_impuestos_botonV1")
                botonCrearImpuesto.textContent = "Crear impuesto"
                botonCrearImpuesto.setAttribute("href", "/administracion/impuestos/crear_nuevo_impuesto")
                botonCrearImpuesto.setAttribute("vista", "/administracion/impuestos/crear_nuevo_impuesto")
                botonCrearImpuesto.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                contenedorBotones.appendChild(botonCrearImpuesto)
                espacioImpuestos.appendChild(contenedorBotones)
            },
        },
        gestion_de_ofertas: {
            arranque: async function () {
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const main = document.querySelector("main")
                if (comandoInicial === "gestion_de_ofertas" && Object.keys(granuladoURL.parametros).length === 0) {
                    main.setAttribute("zonaCSS", "administracion/ofertas")
                    this.portada.portadaUI()
                } else if (granuladoURL.parametros.oferta) {
                    main.setAttribute("zonaCSS", "administracion/ofertas/ofertaUI")
                    this.detallesOferta.obtenerDetallesOferta(granuladoURL.parametros.oferta)
                } else {
                    const info = {
                        titulo: "No existe ninguna oferta con ese identificador",
                        descripcion: "La oferta que buscas con ese identificador no existe.Comprueba el identificador de la reserva"
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                }
            },
            portada: {
                portadaUI: async function () {
                    const espacioOfertas = document.querySelector("[componente=espacioOfertas]")
                    const contenedor = document.createElement("div")
                    contenedor.classList.add("gestionDeOfertasContenedor")
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("gestionDeOfertasContenedorBotones")
                    const botonCrearOfertas = document.createElement("a")
                    botonCrearOfertas.classList.add("gestionDeOfertasBotonCrearOferta")
                    botonCrearOfertas.textContent = "Crear una nueva oferta"
                    botonCrearOfertas.setAttribute("href", "/administracion/gestion_de_ofertas/crear_oferta")
                    botonCrearOfertas.setAttribute("vista", "/administracion/gestion_de_ofertas/crear_oferta")
                    botonCrearOfertas.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    contenedorBotones.appendChild(botonCrearOfertas)
                    contenedor.appendChild(contenedorBotones)
                    const contenedorOfertas = document.createElement("div")
                    contenedorOfertas.classList.add("gestionDeOfertasContedorOfertas")
                    contenedorOfertas.setAttribute("componente", "espacioListaOfertas")
                    contenedor.appendChild(contenedorOfertas)
                    espacioOfertas.appendChild(contenedor)
                    const transaccion = {
                        zona: "administracion/ofertas/listasOfertasAdministracion"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const espacioListaOfertas = document.querySelector("[componente=espacioListaOfertas]")

                        const ofertasEncontradas = respuestaServidor?.ok
                        if (typeof ofertasEncontradas === "string") {
                            const ofertaUI = document.createElement("a")
                            ofertaUI.classList.add("ofertaUINoHay")
                            const tituloOferta = document.createElement("p")
                            tituloOferta.classList.add("ofertaUITituloOferta")
                            tituloOferta.textContent = "No hay ofertas configuradas"
                            ofertaUI.appendChild(tituloOferta)
                            espacioListaOfertas.appendChild(ofertaUI)

                        }
                        if (Array.isArray(ofertasEncontradas) && ofertasEncontradas.length > 0) {
                            ofertasEncontradas.forEach((detalleOferta) => {

                                const ofertaUID = detalleOferta.ofertaUID
                                const nombreOferta = detalleOferta.nombreOferta
                                const fechaInicio = detalleOferta.fechaInicio
                                const fechaFinal = detalleOferta.fechaFinal
                                const entidadIDV = detalleOferta.entidadIDV
                                const estadoIDV = detalleOferta.estadoIDV
                                const zonaIDV = detalleOferta.zonaIDV
                                const condicionesArray = detalleOferta.condicionesArray
                                const descuentosJSON = detalleOferta.descuentosJSON

                                const estadoUI = {
                                    activado: "Activada",
                                    desactivado: "Desactivada"
                                }
                                const entidadUI = {
                                    reserva: "Reserva"
                                }
                                const zonaUI = {
                                    global: "Global",
                                    privada: "Privada",
                                    publica: "Pública"
                                }
                                const ofertaUI = document.createElement("a")
                                ofertaUI.classList.add("ofertaUI")
                                ofertaUI.setAttribute("ofertaUID", ofertaUID)
                                ofertaUI.setAttribute("href", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                ofertaUI.setAttribute("vista", "/administracion/gestion_de_ofertas/oferta:" + ofertaUID)
                                ofertaUI.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.traductorCambioVista)
                                const tituloOferta = document.createElement("p")
                                tituloOferta.classList.add("ofertaUITituloOferta")
                                tituloOferta.textContent = nombreOferta
                                ofertaUI.appendChild(tituloOferta)
                                const contenedorGlobalOferta = document.createElement("div")
                                contenedorGlobalOferta.classList.add("ofertaUIContenedorGlobalOferta")

                                const contenedorDetalleOferta = document.createElement("div")
                                contenedorDetalleOferta.classList.add("ofertaUIContenedorDetalles")

                                const fechaInicioContenedor = document.createElement("div")
                                fechaInicioContenedor.classList.add("ofertaUIFechaContenedor")
                                const tituloFechaInicio = document.createElement("div")
                                tituloFechaInicio.classList.add("ofertaUITituloFecha")
                                tituloFechaInicio.textContent = "Fecha de inicio"
                                fechaInicioContenedor.appendChild(tituloFechaInicio)
                                const datoFechaInicio = document.createElement("div")
                                datoFechaInicio.classList.add("ofertaUIDatoFecha")
                                datoFechaInicio.textContent = fechaInicio
                                fechaInicioContenedor.appendChild(datoFechaInicio)
                                contenedorDetalleOferta.appendChild(fechaInicioContenedor)
                                const fechaFinContenedor = document.createElement("div")
                                fechaFinContenedor.classList.add("ofertaUIFechaContenedor")
                                const tituloFechaFin = document.createElement("div")
                                tituloFechaFin.classList.add("ofertaUITituloFecha")
                                tituloFechaFin.textContent = "Fecha de fin"
                                fechaFinContenedor.appendChild(tituloFechaFin)
                                const datoFechaFin = document.createElement("div")
                                datoFechaFin.classList.add("ofertaUIDatoFecha")
                                datoFechaFin.textContent = fechaFinal
                                fechaFinContenedor.appendChild(datoFechaFin)
                                contenedorDetalleOferta.appendChild(fechaFinContenedor)
                                contenedorGlobalOferta.appendChild(contenedorDetalleOferta)
                                ofertaUI.appendChild(contenedorGlobalOferta)
                                let contenedorPropiedadesOferta = document.createElement("div")
                                contenedorPropiedadesOferta.classList.add("ofertaUIContenedorPropiedades")

                                const bloqueEstado = document.createElement("div")
                                bloqueEstado.classList.add("ofertaUIBloqueOpcion")
                                const tituloEstado = document.createElement("p")
                                tituloEstado.classList.add("ofertaUITituloOpcion")
                                tituloEstado.textContent = "Estado de la oferta"
                                bloqueEstado.appendChild(tituloEstado)
                                const estadoUIX = document.createElement("p")
                                estadoUIX.classList.add("ofertaUIDatoOpcion")
                                estadoUIX.textContent = estadoUI[estadoIDV]
                                bloqueEstado.appendChild(estadoUIX)
                                contenedorPropiedadesOferta.appendChild(bloqueEstado)



                                let bloqueOpcion = document.createElement("div")
                                bloqueOpcion.classList.add("ofertaUIBloqueOpcion")
                                let tituloOpcion = document.createElement("p")
                                tituloOpcion.classList.add("ofertaUITituloOpcion")
                                tituloOpcion.textContent = "Entidad"
                                bloqueOpcion.appendChild(tituloOpcion)
                                let datoOpcion = document.createElement("p")
                                datoOpcion.classList.add("ofertaUIDatoOpcion")
                                datoOpcion.textContent = entidadUI[entidadIDV]
                                bloqueOpcion.appendChild(datoOpcion)
                                contenedorPropiedadesOferta.appendChild(bloqueOpcion)


                                tituloOpcion = document.createElement("p")
                                tituloOpcion.classList.add("ofertaUITituloOpcion")
                                tituloOpcion.textContent = "Zona de publicación"
                                bloqueOpcion.appendChild(tituloOpcion)
                                datoOpcion = document.createElement("p")
                                datoOpcion.classList.add("ofertaUIDatoOpcion")
                                datoOpcion.textContent = zonaUI[zonaIDV]
                                bloqueOpcion.appendChild(datoOpcion)

                                contenedorPropiedadesOferta.appendChild(bloqueOpcion)
                                contenedorGlobalOferta.appendChild(contenedorPropiedadesOferta)

                                const contenedorCYD = document.createElement("div")
                                contenedorCYD.classList.add(
                                    "flexVertical",
                                    "gap6"
                                )
                                contenedorCYD.setAttribute("contenedor", "condicionesDescuentos")

                                const condicionesUI = this.condicionesUI({
                                    condicionesArray
                                })
                                contenedorCYD.appendChild(condicionesUI)

                                const descuentoUI = this.descuentosUI({
                                    descuentosJSON
                                })
                                contenedorCYD.appendChild(descuentoUI)

                                contenedorGlobalOferta.appendChild(contenedorCYD)
                                espacioListaOfertas.appendChild(ofertaUI)
                            })
                        }
                    }
                },
                condicionesUI: (data) => {
                    const condicionesArray = data.condicionesArray
                    const contenedorCondiciones = document.createElement("div")
                    contenedorCondiciones.setAttribute("contenedor", "condiciones")
                    contenedorCondiciones.classList.add(
                        "flexVertical",
                        "gap6",
                        "backgroundGrey1",
                        "padding6",
                        "borderRadius14"
                    )
                    const tituloContendor = document.createElement("div")
                    tituloContendor.classList.add(
                        "negrita",
                        "padding6",

                    )
                    tituloContendor.textContent = "Condiciones de la oferta"
                    contenedorCondiciones.appendChild(tituloContendor)

                    condicionesArray.forEach((condicion) => {
                        const tipoCondicion = condicion.tipoCondicion

                        const contenedorCondicion = document.createElement("div")
                        contenedorCondicion.classList.add("contenedorCondicion")
                        contenedorCondicion.setAttribute("tipoCondicion", tipoCondicion)
                        contenedorCondicion.classList.add(
                            "flexVertical",
                            "padding6",
                        )
                        const definicionCondicion = casaVitini
                            .ui
                            .componentes
                            .contenedorFinanciero
                            .componentesUI
                            .ofertas
                            .componentesUI
                            .definicionCondiciones({
                                tipoCondicion,
                                condicion
                            })
                        contenedorCondicion.appendChild(definicionCondicion)
                        contenedorCondiciones.appendChild(contenedorCondicion)
                    })
                    return contenedorCondiciones

                },
                descuentosUI: (data) => {
                    const descuentosJSON = data.descuentosJSON
                    const tipoDescuento = descuentosJSON?.tipoDescuento
                    const subTipoDescuento = descuentosJSON?.subTipoDescuento

                    const contenedorDescuentos = document.createElement("div")
                    contenedorDescuentos.setAttribute("contenedor", "descuentos")
                    contenedorDescuentos.classList.add(
                        "flexVertical",
                        "backgroundGrey1",
                        "padding12",
                        "borderRadius14",
                        "gap6"
                    )
                    const tituloContendor = document.createElement("div")
                    tituloContendor.classList.add(
                        "negrita",

                    )
                    tituloContendor.textContent = "Descuentos de la oferta"
                    contenedorDescuentos.appendChild(tituloContendor)

                    const desfinicionDescuento = casaVitini
                        .ui
                        .componentes
                        .contenedorFinanciero
                        .componentesUI
                        .ofertas
                        .componentesUI.definicionDescuentos({
                            tipoDescuento,
                            subTipoDescuento,
                            descuentosJSON
                        })
                    contenedorDescuentos.appendChild(desfinicionDescuento)

                    return contenedorDescuentos
                },
            },
            crearOferta: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/ofertas/ofertaUI")
                    const selector = document.querySelector("[componente=espacioOfertas]")
                    const ofertaUI = casaVitini.administracion.gestion_de_ofertas.detalleUI("crearOferta")
                    selector.appendChild(ofertaUI)
                    selector.setAttribute("modo", "crearOferta")
                    const botonesCrearOferta = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesCrearOferta()
                    main.appendChild(botonesCrearOferta)
                },
                crearOfertaConfirmar: async () => {

                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const metadatosPantallaCarga = {
                        mensaje: "Creando reserva...",
                        instanciaUID: instanciaUID,
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(metadatosPantallaCarga)
                    const transaccion = casaVitini.administracion.gestion_de_ofertas.utilidades.constructorObjeto()
                    transaccion.zona = "administracion/ofertas/crearOferta"
                    transaccion.entidadIDV = "reserva"


                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!pantallaDeCargaRenderizada) {
                        return
                    }
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const nuevaOferta = respuestaServidor?.oferta.ofertaUID
                        const vista = `/administracion/gestion_de_ofertas/oferta:${nuevaOferta}`
                        const navegacion = {
                            vista: vista,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                },

            },
            detallesOferta: {
                obtenerDetallesOferta: async function (ofertaUID) {
                    const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                    const transaccion = {
                        zona: "administracion/ofertas/detallesOferta",
                        ofertaUID: ofertaUID
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe ningúna oferta con ese identificador",
                            descripcion: "Revisa el identificador porque esta oferta que buscas no existe.Quizás este identificador existió y borraste esta oferta.."
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    } else if (respuestaServidor?.ok) {
                        const oferta = respuestaServidor.ok
                        const ofertaUID = oferta.ofertaUID
                        const espacioOfertasGlobal = document.querySelector("[componente=espacioOfertas]")
                        espacioOfertasGlobal.setAttribute("instantanea", JSON.stringify(oferta))
                        espacioOfertasGlobal.setAttribute("ofertaUID", ofertaUID)

                        espacioOfertasGlobal.innerHTML = null
                        const ofertaUI = casaVitini.administracion.gestion_de_ofertas.detalleUI("editarOferta")
                        espacioOfertasGlobal.appendChild(ofertaUI)
                        await this.aplicaData({
                            oferta: oferta,
                            instanciaUID_destino: instanciaUID
                        })
                        const selectorBoton = seccionRenderizada.querySelector("[boton=anadirCondicion]")
                        selectorBoton.removeAttribute("style")
                        const botonesModificacion = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesDuranteModificacionOferta()
                        espacioOfertasGlobal.appendChild(botonesModificacion)
                    }
                },
                aplicaData: async function (data) {

                    const oferta = data.oferta
                    const instanciaUID_destino = data.instanciaUID_destino
                    const ofertaUI = document.querySelector(`[instanciaUID="${instanciaUID_destino}"]`)

                    const nombreOferta = oferta.nombreOferta
                    const ofertaUID = oferta.ofertaUID
                    const fechaInicio_ISO = oferta.fechaInicio
                    const fechaFinal_ISO = oferta.fechaFinal
                    const condicionesArray = oferta.condicionesArray
                    const descuentosJSON = oferta.descuentosJSON
                    const estadoIDV = oferta.estadoIDV
                    const zonaIDV = oferta.zonaIDV
                    const modo = data.modo || null

                    const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio_ISO)
                    const fechaFinal_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinal_ISO)

                    const espacioOfertasGlobal = ofertaUI.querySelector("[componente=espacioOfertas]")
                    espacioOfertasGlobal.setAttribute("ofertaUID", String(ofertaUID))
                    espacioOfertasGlobal.setAttribute("modo", "editarOferta")


                    if (modo !== "resversion") {
                        const selectorEstadoOfertaUI = ofertaUI.querySelector("[componente=estadoOferta]")
                        if (estadoIDV === "desactivado") {
                            selectorEstadoOfertaUI.setAttribute("estadoOferta", estadoIDV)
                            selectorEstadoOfertaUI.style.background = "#ff000091"
                            selectorEstadoOfertaUI.innerHTML = "Oferta desactivada"
                        }
                        if (estadoIDV === "activado") {
                            selectorEstadoOfertaUI.setAttribute("estadoOferta", estadoIDV)
                            selectorEstadoOfertaUI.style.background = "#00ff006e"
                            selectorEstadoOfertaUI.innerHTML = "Oferta activada"
                        }
                    }


                    const campoNombreOferta = ofertaUI.querySelector("[campoOferta=nombreOferta]")
                    campoNombreOferta.value = nombreOferta

                    const selectorFechaInicio = ofertaUI.querySelector("[calendario=entrada]")
                    selectorFechaInicio.setAttribute("memoriaVolatil", fechaInicio_ISO)
                    const selectorFechaInicioUI = ofertaUI.querySelector("[fechaUI=fechaInicio]")
                    selectorFechaInicioUI.textContent = fechaInicio_humana

                    const selectorZonaIDV = ofertaUI.querySelector("[campo=zonaIDV]")
                    selectorZonaIDV.value = zonaIDV

                    const selectorFechaFin = ofertaUI.querySelector("[calendario=salida]")
                    selectorFechaFin.setAttribute("memoriaVolatil", fechaFinal_ISO)
                    const selectorFechaFinUI = ofertaUI.querySelector("[fechaUI=fechaFin]")
                    selectorFechaFinUI.textContent = fechaFinal_humana

                    const contenedorSuperBloque = ofertaUI.querySelector("[contenedor=superBloque]")
                    const spinner = casaVitini.ui.componentes.spinnerSimple()
                    contenedorSuperBloque.appendChild(spinner)


                    const contenedorCondiciones = ofertaUI.querySelector("[contenedor=condiciones]")
                    contenedorCondiciones.style.display = "none"
                    const selectorOfertasRenderizdas = contenedorCondiciones.querySelectorAll("[zonaOferta]")
                    selectorOfertasRenderizdas.forEach((ofertaObsoleta) => ofertaObsoleta.remove())
                    const contenedorDescuentosUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.condicionesUI

                    for (const condicion of condicionesArray) {
                        const tipoCondicion = condicion.tipoCondicion
                        const descuentoUI = contenedorDescuentosUI[tipoCondicion]()

                        if (tipoCondicion === "porNumeroDeApartamentos") {
                            const tipoConteo = condicion.tipoConteo
                            const numeroDeApartamentos = condicion.numeroDeApartamentos

                            const selectorTipoConteo = descuentoUI.querySelector("[campoOferta=tipoConteo]")
                            selectorTipoConteo.value = tipoConteo
                            const selectorNumeroApartamentos = descuentoUI.querySelector("[campoOferta=numeroDeApartamentos]")
                            selectorNumeroApartamentos.value = numeroDeApartamentos
                        } else if (tipoCondicion === "porCodigoDescuento") {
                            const codigoDescuento = condicion.codigoDescuento


                            const selectorCampoCodigo = descuentoUI.querySelector("[campo=codigoDescuento]")
                            selectorCampoCodigo.value = codigoDescuento
                        } else if (tipoCondicion === "porDiasDeAntelacion") {
                            const tipoConteo = condicion.tipoConteo
                            const numeroDeDias = condicion.numeroDeDias

                            const selectorTipoConteo = descuentoUI.querySelector("[campoOferta=tipoConteo]")
                            selectorTipoConteo.value = tipoConteo
                            const selectorNumeroDeDias = descuentoUI.querySelector("[campoOferta=numeroDeDias]")
                            selectorNumeroDeDias.value = numeroDeDias

                        } else if (tipoCondicion === "porDiasDeReserva") {
                            const tipoConteo = condicion.tipoConteo
                            const numeroDeDias = condicion.numeroDeDias

                            const selectorTipoConteo = descuentoUI.querySelector("[campoOferta=tipoConteo]")
                            selectorTipoConteo.value = tipoConteo
                            const selectorNumeroDeDias = descuentoUI.querySelector("[campoOferta=numeroDeDias]")
                            selectorNumeroDeDias.value = numeroDeDias
                        } else if (tipoCondicion === "conFechaCreacionEntreRango") {

                        } else if (tipoCondicion === "conFechaEntradaEntreRango") {
                            const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO
                            const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO

                            const fechaInicioRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicioRango_ISO)
                            const fechaFinalRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinalRango_ISO)

                            const selectorEntrada = descuentoUI.querySelector("[calendario=entrada]")
                            const entradaUI = selectorEntrada.querySelector("[fechaUI]")

                            const selectorSalida = descuentoUI.querySelector("[calendario=salida]")
                            const salidaUI = selectorSalida.querySelector("[fechaUI]")

                            selectorEntrada.setAttribute("memoriaVolatil", fechaInicioRango_ISO)
                            selectorSalida.setAttribute("memoriaVolatil", fechaFinalRango_ISO)

                            entradaUI.textContent = fechaInicioRango_humana
                            salidaUI.textContent = fechaFinalRango_humana
                        } else  if (tipoCondicion === "conFechaSalidaEntreRango") {
                            const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO
                            const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO

                            const fechaInicioRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicioRango_ISO)
                            const fechaFinalRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinalRango_ISO)

                            const selectorEntrada = descuentoUI.querySelector("[calendario=entrada]")
                            const entradaUI = selectorEntrada.querySelector("[fechaUI]")

                            const selectorSalida = descuentoUI.querySelector("[calendario=salida]")
                            const salidaUI = selectorSalida.querySelector("[fechaUI]")

                            selectorEntrada.setAttribute("memoriaVolatil", fechaInicioRango_ISO)
                            selectorSalida.setAttribute("memoriaVolatil", fechaFinalRango_ISO)

                            entradaUI.textContent = fechaInicioRango_humana
                            salidaUI.textContent = fechaFinalRango_humana
                        } else if (tipoCondicion === "porRangoDeFechas") {
                            const fechaInicioRango_ISO = condicion.fechaInicioRango_ISO
                            const fechaFinalRango_ISO = condicion.fechaFinalRango_ISO

                            const fechaInicioRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicioRango_ISO)
                            const fechaFinalRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinalRango_ISO)

                            const selectorEntrada = descuentoUI.querySelector("[calendario=entrada]")
                            const entradaUI = selectorEntrada.querySelector("[fechaUI]")

                            const selectorSalida = descuentoUI.querySelector("[calendario=salida]")
                            const salidaUI = selectorSalida.querySelector("[fechaUI]")

                            selectorEntrada.setAttribute("memoriaVolatil", fechaInicioRango_ISO)
                            selectorSalida.setAttribute("memoriaVolatil", fechaFinalRango_ISO)

                            entradaUI.textContent = fechaInicioRango_humana
                            salidaUI.textContent = fechaFinalRango_humana
                        } else if (tipoCondicion === "porApartamentosEspecificos") {
                            const tipoDeEspecificidad = condicion.tipoDeEspecificidad
                            const apartamentos = condicion.apartamentos
                            const instanciaUID = descuentoUI.querySelector("[instanciaUID]").getAttribute("instanciaUID")
                            const selectorTipoEspeficidad = descuentoUI.querySelector("[campo=tipoDeEspecificidad]")
                            selectorTipoEspeficidad.value = tipoDeEspecificidad

                            for (const contenedorApartamento of apartamentos) {
                                const apartamentoIDV = contenedorApartamento.apartamentoIDV
                                const apartamentoUI = contenedorApartamento.apartamentoUI

                                const infoSinApartamento = descuentoUI.querySelector("[componente=infoSinApartamento]")
                                infoSinApartamento.style.display = "none"

                                const selectorApartamentoUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.apartamentoUI({
                                    apartamentoIDV,
                                    apartamentoUI,
                                    instanciaUID,
                                    tipoDespliegue: "parcial"
                                })
                                const selectorZonaApartamentos = descuentoUI.querySelector("[componente=zonaAnadirApartamento]")


                                selectorZonaApartamentos.appendChild(selectorApartamentoUI)

                            }
                        }
                        contenedorCondiciones.appendChild(descuentoUI)

                    }
                    casaVitini.administracion.gestion_de_ofertas.componenteUI.controlDespliegeContenedorDescuento()

                    const contenedorDescuentos = ofertaUI.querySelector("[contenedor=descuentos]")
                    contenedorDescuentos.style.display = "none"
                    contenedorDescuentos.innerHTML = null

                    const descuentosUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.contenedorDescuento()
                    contenedorDescuentos.appendChild(descuentosUI)


                    const tipoDescuento = descuentosJSON.tipoDescuento

                    const selectorTipoDescuentos = contenedorDescuentos.querySelector("[componente=tipoDescuento]")
                    selectorTipoDescuentos.value = tipoDescuento

                    casaVitini.administracion.gestion_de_ofertas.componenteUI.controladorDescuentos({
                        descuentoIDV: tipoDescuento
                    })

                    if (tipoDescuento === "totalNeto") {
                        const contenedor = contenedorDescuentos.querySelector("[descuentoIDV=totalNeto]")
                        const descuentoTotal = descuentosJSON.descuentoTotal
                        const tipoAplicacion = descuentosJSON.tipoAplicacion

                        const campoTipoDesceunto = contenedor.querySelector("[campoOferta=tipoDescuento]")
                        campoTipoDesceunto.value = tipoAplicacion

                        const campoDescuentoGlobal = contenedor.querySelector("[campoOferta=descuentoGlobal]")
                        campoDescuentoGlobal.value = descuentoTotal

                    } else if (tipoDescuento === "mismoDescuentoParaCadaApartamento") {
                        const contenedor = contenedorDescuentos.querySelector("[descuentoIDV=mismoDescuentoParaCadaApartamento]")
                        const descuentoTotal = descuentosJSON.descuentoTotal
                        const tipoAplicacion = descuentosJSON.tipoAplicacion

                        const campoTipoDesceunto = contenedor.querySelector("[campoOferta=tipoDescuento]")
                        campoTipoDesceunto.value = tipoAplicacion

                        const campoDescuentoGlobal = contenedor.querySelector("[campoOferta=descuentoGlobal]")
                        campoDescuentoGlobal.value = descuentoTotal

                    } else if (tipoDescuento === "individualPorApartamento") {
                        const apartamentos = descuentosJSON.apartamentos

                        const contenedorApartamentos = contenedorDescuentos.querySelector("[descuentoIDV=individualPorApartamento]")
                        const instanciaUID = contenedorApartamentos.getAttribute("instanciaUID")

                        for (const apartamento of apartamentos) {

                            const apartamentoIDV = apartamento.apartamentoIDV
                            const descuentoTotal = apartamento.descuentoTotal
                            const tipoAplicacion = apartamento.tipoAplicacion
                            const apartamentoUI = apartamento.apartamentoUI

                            const infoSinApartamento = contenedorApartamentos.querySelector("[componente=infoSinApartamento]")
                            infoSinApartamento.style.display = "none"

                            const selectorApartamentoUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.apartamentoUI({
                                apartamentoIDV,
                                apartamentoUI,
                                instanciaUID,
                                tipoDespliegue: "total",
                                seleccionadoInicial: tipoAplicacion,
                                descuentoTotal: descuentoTotal
                            })
                            const selectorZonaApartamentos = contenedorApartamentos.querySelector("[componente=zonaAnadirApartamento]")
                            selectorZonaApartamentos.appendChild(selectorApartamentoUI)
                        }
                    } else if (tipoDescuento === "porRango") {

                        const contenedorPorRango = contenedorDescuentos.querySelector("[descuentoIDV=porRango]")
                        const selectorSubTipo = contenedorPorRango.querySelector("[componente=subTipoDescuento]")

                        const selectorEntrada = contenedorPorRango.querySelector("[calendario=entrada]")
                        const selectorSalida = contenedorPorRango.querySelector("[calendario=salida]")

                        const fechaInicioRango_ISO = descuentosJSON.fechaInicioRango_ISO
                        const fechaFinalRango_ISO = descuentosJSON.fechaFinalRango_ISO

                        const fechaInicioRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicioRango_ISO)
                        const fechaFinalRango_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFinalRango_ISO)

                        const entradaUI = selectorEntrada.querySelector("[fechaUI]")
                        const salidaUI = selectorSalida.querySelector("[fechaUI]")

                        selectorEntrada.setAttribute("memoriaVolatil", fechaInicioRango_ISO)
                        selectorSalida.setAttribute("memoriaVolatil", fechaFinalRango_ISO)

                        entradaUI.textContent = fechaInicioRango_humana
                        salidaUI.textContent = fechaFinalRango_humana

                        const subTipoDescuento = descuentosJSON.subTipoDescuento

                        if (subTipoDescuento === "totalNetoPorRango") {
                            const tipoAplicacion = descuentosJSON.tipoAplicacion
                            const descuentoTotal = descuentosJSON.descuentoTotal

                            selectorSubTipo.value = subTipoDescuento
                            casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.controladorUI({
                                contenedorIDV: subTipoDescuento
                            })

                            const contenedorTotalNetoPorRango = contenedorPorRango.querySelector("[contenedorPorRango=totalNetoPorRango]")
                            const selectorTipoDescuento = contenedorTotalNetoPorRango.querySelector("[campoOferta=tipoDescuento]")
                            selectorTipoDescuento.value = tipoAplicacion

                            const selectorDescuentoGlobal = contenedorTotalNetoPorRango.querySelector("[campoOferta=descuentoGlobal]")
                            selectorDescuentoGlobal.value = descuentoTotal
                        } else if (subTipoDescuento === "porDiasDelRango") {

                            const descuentoPorDias = descuentosJSON.descuentoPorDias
                            const contenedorDias = contenedorPorRango.querySelector("[contenedorPorRango=porDiasDelRango]")
                            contenedorDias.classList.remove("estadoInicialInvisible")
                            contenedorDias.innerHTML = null

                            selectorSubTipo.value = subTipoDescuento

                            for (const detallesDelDia of descuentoPorDias) {
                                const tipoDescuentoDelDia = detallesDelDia.tipoDescuento
                                const fecha = detallesDelDia.fecha

                                const contenedorDia = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.constructorDiaUI({
                                    fecha: fecha
                                })
                                contenedorDias.appendChild(contenedorDia)

                                const selectorContextoAplicacion = contenedorDia.querySelector("[campoOferta=contextoAplicacion]")
                                selectorContextoAplicacion.value = tipoDescuentoDelDia


                                if (tipoDescuentoDelDia === "netoPorDia") {
                                    const descuentoTotal = detallesDelDia.descuentoTotal
                                    const tipoAplicacion = detallesDelDia.tipoAplicacion

                                    const contenedorNetoDelDia = contenedorDia.querySelector("[contenedorDelDia=netoPorDia]")
                                    contenedorNetoDelDia.classList.remove("estadoInicialInvisible")

                                    const campoDescuentoTotal = contenedorNetoDelDia.querySelector("[campoOferta=descuentoGlobal]")
                                    campoDescuentoTotal.value = descuentoTotal

                                    const selectorTipoDescuento = contenedorNetoDelDia.querySelector("[campoOferta=tipoDescuento]")
                                    selectorTipoDescuento.value = tipoAplicacion

                                } else if (tipoDescuentoDelDia === "netoPorApartamentoDelDia") {
                                    const apartamentos = detallesDelDia.apartamentos

                                    const contenedorNetoPorApartamentoDelDia = contenedorDia.querySelector("[contenedorDelDia=netoPorApartamentoDelDia]")
                                    contenedorNetoPorApartamentoDelDia.classList.remove("estadoInicialInvisible")

                                    for (const apartamento of apartamentos) {


                                        const apartamentoIDV = apartamento.apartamentoIDV
                                        const descuentoTotal = apartamento.descuentoTotal
                                        const tipoAplicacion = apartamento.tipoAplicacion
                                        const apartamentoUI = apartamento.apartamentoUI
                                        const infoSinApartamento = contenedorDia.querySelector("[componente=infoSinApartamento]")
                                        infoSinApartamento.style.display = "none"

                                        const selectorApartamentoUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.apartamentoUI({
                                            apartamentoIDV,
                                            apartamentoUI,
                                            instanciaUID: fecha,
                                            tipoDespliegue: "total",
                                            seleccionadoInicial: tipoAplicacion,
                                            descuentoTotal: descuentoTotal
                                        })
                                        const selectorZonaApartamentos = contenedorDia.querySelector("[componente=zonaAnadirApartamento]")
                                        selectorZonaApartamentos.appendChild(selectorApartamentoUI)
                                    }
                                }
                            }
                        }

                        const area = document.querySelector("[contenedor=descuentos] [area=descuentosPorRango]")
                        const contenedorPorDiasDentro = area.querySelector("[contenedorPorRango=porDiasDelRango]")
                        const fechas = casaVitini.utilidades.conversor.extraerFechasInternas(fechaInicioRango_ISO, fechaFinalRango_ISO)

                        for (const fecha of fechas) {
                            const selectorDiaRenderizado = contenedorPorDiasDentro.querySelector(`[instanciaUID="${fecha}"]`)
                            if (!selectorDiaRenderizado) {
                                const contenedorDia = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.constructorDiaUI({
                                    fecha: fecha
                                })
                                contenedorPorDiasDentro.appendChild(contenedorDia)
                            }
                        }

                    }

                    const selectorSpinnerRenderizado = ofertaUI.querySelector("[contenedor=spinner]")
                    selectorSpinnerRenderizado.remove()

                    const selectorCondicionesRenderizado = ofertaUI.querySelector("[contenedor=condiciones]")
                    selectorCondicionesRenderizado.removeAttribute("style")


                    const selectorDescuentosRenderizado = ofertaUI.querySelector("[contenedor=descuentos]")
                    selectorDescuentosRenderizado.removeAttribute("style")

                },

                ofertaModos: async (modo) => {
                    const contenedorBotones = document.querySelector("[componente=espacioCrearOferta] [contenedor=botones]")

                    if (modo === "modoEditar") {
                        contenedorBotones.innerHTML = null
                        const botones = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesDuranteModificacionOferta()
                        contenedorBotones.appendChild(botones)
                        document.querySelector("[componente=soloLecturaInfo]")?.classList.remove("elementoOcultoInicialmente")

                    }
                    if (modo === "modoCancelar") {
                        contenedorBotones.innerHTML = null
                        const botones = casaVitini.administracion.gestion_de_ofertas.componenteUI.botonesModificarOferta()
                        contenedorBotones.appendChild(botones)

                        document.querySelector("[componente=soloLecturaInfo]")?.classList.remove("elementoOcultoInicialmente")
                    }
                },
                estadoOferta: async (estadoOferta) => {
                    const ofertaUID = document.querySelector("[ofertaUID]")?.getAttribute("ofertaUID")
                    if (!ofertaUID) {
                        const error = "No se puede cambiar el estado de esta oferta porque no tiene un identificador único de oferta (ofertaUID).Esto puede deberse a que aún no has creado la oferta o que la has borrado.Si estás creando una oferta, por favor asegúrate de crearla pulsando el botón 'Crear oferta' antes de activarla."
                        casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }
                    const selectorEstadoOfertaUI = document.querySelector("[estadoOferta]")


                    const estadoActualMemoriaVolatil = selectorEstadoOfertaUI.textContent
                    selectorEstadoOfertaUI.textContent = "Esperando al servidor...."
                    const estadoOfertaActual = estadoOferta.target.getAttribute("estadoOferta")
                    let estadoOfertaPropuesto
                    if (estadoOfertaActual === "desactivado") {
                        estadoOfertaPropuesto = "activado"
                    }
                    if (estadoOfertaActual === "activado") {
                        estadoOfertaPropuesto = "desactivado"
                    }
                    const transaccion = {
                        zona: "administracion/ofertas/actualizarEstadoOferta",
                        ofertaUID: String(ofertaUID),
                        estadoIDV: estadoOfertaPropuesto
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        document.querySelector("[estadoOferta]").textContent = estadoActualMemoriaVolatil
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const estadoIDV = respuestaServidor?.estadoIDV
                        selectorEstadoOfertaUI.setAttribute("estadoOferta", estadoIDV)
                        let estadoOfertaUI
                        if (estadoIDV === "activado") {
                            selectorEstadoOfertaUI.style.background = "#00ff006e"
                            estadoOfertaUI = "Oferta activada"
                        }
                        if (estadoIDV === "desactivado") {
                            selectorEstadoOfertaUI.style.background = "#ff000091"
                            estadoOfertaUI = "Oferta desactivada"
                        }
                        selectorEstadoOfertaUI.textContent = estadoOfertaUI
                    }
                },
                guardarCambiosOferta: async function () {
                    const instanciaUID_pantallaEspera = casaVitini.utilidades.codigoFechaInstancia()
                    const main = document.querySelector("main")
                    const instanciaUID = main.getAttribute("instanciaUID")
                    const ofertaUID = main.querySelector("[componente=espacioOfertas]").getAttribute("ofertaUID")

                    const mensaje = "Actualizando oferta..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID_pantallaEspera,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const oferta = casaVitini.administracion.gestion_de_ofertas.utilidades.constructorObjeto()

                    const transaccion = {
                        zona: "administracion/ofertas/actualizarOferta",
                        ofertaUID: String(ofertaUID),
                        ...oferta
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    document.querySelector(`[instanciaUID="${instanciaUID_pantallaEspera}"]`)?.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const ofertaActualizada = respuestaServidor.ofertaActualizada

                        const espacioOfertasGlobal = document.querySelector("[componente=espacioOfertas]")
                        espacioOfertasGlobal.setAttribute("instantanea", JSON.stringify(ofertaActualizada))

                        await casaVitini.administracion.gestion_de_ofertas.detallesOferta.aplicaData({
                            oferta: ofertaActualizada,
                            instanciaUID_destino: instanciaUID
                        })
                    }
                },
                eliminarOferta: {
                    UI: async () => {

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = "Confirmar eliminar oferta"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = "Var a eliminar la oferta y su aplicacion sera inmediata en los precios, ¿Estas de acuerdo ? "

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.textContent = "Comfirmar la eliminacion"
                        botonAceptar.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.eliminarOferta.confirmar)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Cancelar la eliminacion"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    confirmar: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Eliminado el oferta..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const ofertaUID = document.querySelector("[ofertaUID]").getAttribute("ofertaUID")
                        const transaccion = {
                            zona: "administracion/ofertas/eliminarOferta",
                            ofertaUID: String(ofertaUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vista = `/administracion/gestion_de_ofertas`
                            const navegacion = {
                                vista: vista,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                }
            },
            traductorCambioVista: (oferta) => {
                oferta.preventDefault()
                oferta.stopPropagation()
                const vista = oferta.target.closest("[vista]").getAttribute("vista")
                const entrada = {
                    vista: vista,
                    tipoOrigen: "menuNavegador"
                }
                casaVitini.shell.navegacion.controladorVista(entrada)
            },
            detalleUI: (modoUI) => {
                const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()
                const divPrincipal = document.createElement("div");
                divPrincipal.setAttribute("componente", "espacioCrearOferta");
                divPrincipal.classList.add("espacioClientes");

                const divContenedorNombreYEstado = document.createElement("div");

                if (modoUI === "editarOferta") {
                    divContenedorNombreYEstado.classList.add("crearOfertaContenedorHorizontalV2");

                    const botonEstadoOferta = document.createElement("div")
                    botonEstadoOferta.classList.add("creatOfertaBotonEstado")
                    botonEstadoOferta.setAttribute("componente", "estadoOferta")
                    botonEstadoOferta.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.estadoOferta)
                    botonEstadoOferta.textContent = "Oferta desactivada"
                    divContenedorNombreYEstado.appendChild(botonEstadoOferta)

                }
                if (modoUI === "crearOferta") {
                    divContenedorNombreYEstado.classList.add("crearOfertaContenedorHorizontalModoCrear");
                }

                const input = document.createElement("input");
                input.setAttribute("type", "text");
                input.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                input.setAttribute("campoOferta", "nombreOferta");
                input.setAttribute("placeholder", "Escriba un nombre a esta oferta, el nombre sera publico");
                divContenedorNombreYEstado.appendChild(input)
                divPrincipal.appendChild(divContenedorNombreYEstado)


                const titulo = document.createElement("p");
                titulo.classList.add("crearOfertaTituloOpcion");
                titulo.textContent = "Selecciona el rango de fechas de vigencia de la oferta.Este rango determina el inicio y el final de la vigencia de la oferta.Cuando se realiza una reserva, se determina si, en el momento de hacer una reserva, con la fecha de creación, esta, la reserva, puede acceder a la oferta.";
                divPrincipal.appendChild(titulo);

                const divContenedor = document.createElement("div");
                divContenedor.classList.add("administracion_ofertas_crearOfertas_contenedorFecha");
                divContenedor.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                const divContenedorHorizontal = document.createElement("div");
                divContenedorHorizontal.classList.add("crearOfertaContenedorHorizontal");

                const divContenedorFechaInicio = document.createElement("div");
                divContenedorFechaInicio.classList.add("contenedorFecha");
                divContenedorFechaInicio.setAttribute("calendario", "entrada");
                divContenedorFechaInicio.setAttribute("componente", "inicioOferta");
                divContenedorFechaInicio.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                divContenedorFechaInicio.addEventListener("click", async () => {
                    await casaVitini.ui.componentes.calendario.configurarCalendario({
                        perfilMes: "calendario_entrada_perfilSimple",
                        contenedorOrigenIDV: "[calendario=entrada]",
                        instanciaUID_contenedorFechas,
                        rangoIDV: "inicioRango",
                        metodoSelectorDia: null,
                        tituloCalendario: "Selecciona la fecha de inicio del rango de vigencia de la oferta"
                    })
                })


                const pFechaInicio = document.createElement("p");
                pFechaInicio.classList.add("tituloFecha");
                pFechaInicio.textContent = "Fecha de inicio";

                const pFechaInicioSeleccionada = document.createElement("p");
                pFechaInicioSeleccionada.classList.add("fechaInicio");
                pFechaInicioSeleccionada.setAttribute("fechaUI", "fechaInicio");
                pFechaInicioSeleccionada.textContent = "(Seleccionar)";

                divContenedorFechaInicio.appendChild(pFechaInicio);
                divContenedorFechaInicio.appendChild(pFechaInicioSeleccionada);

                const divContenedorFechaFin = document.createElement("div");
                divContenedorFechaFin.classList.add("contenedorFecha");
                divContenedorFechaFin.setAttribute("calendario", "salida");
                divContenedorFechaFin.setAttribute("paralizadorEvento", "ocultadorCalendarios");
                divContenedorFechaFin.setAttribute("componente", "finOferta");

                divContenedorFechaFin.addEventListener("click", async () => {
                    await casaVitini.ui.componentes.calendario.configurarCalendario({
                        perfilMes: "calendario_salida_perfilSimple",
                        contenedorOrigenIDV: "[calendario=salida]",
                        instanciaUID_contenedorFechas,
                        rangoIDV: "finalRango",
                        metodoSelectorDia: null,
                        tituloCalendario: "Selecciona la fecha del fin del rango de vigencia de la oferta"

                    })
                })
                const contenedorZonaOferta = document.createElement("div")
                contenedorZonaOferta.classList.add("contenedorZonaOferta")

                const selectorZonaOferta = document.createElement("select")
                selectorZonaOferta.classList.add(
                    "selector",
                    "textCentrado"
                )
                selectorZonaOferta.setAttribute("campo", "zonaIDV")
                const opcionPredeterminada = document.createElement("option")
                opcionPredeterminada.selected = true
                opcionPredeterminada.disabled = true;
                opcionPredeterminada.value = "no"
                opcionPredeterminada.text = "Zona de la oferta"
                selectorZonaOferta.appendChild(opcionPredeterminada)
                const opciones = [
                    { value: "publica", text: "Zona publica" },
                    { value: "global", text: "Zona global" },
                    { value: "privada", text: "Zona privada" }
                ]
                for (const opcionData of opciones) {
                    const opcion = document.createElement("option");
                    opcion.value = opcionData.value;
                    opcion.text = opcionData.text;
                    selectorZonaOferta.appendChild(opcion);
                }
                contenedorZonaOferta.appendChild(selectorZonaOferta)


                const pFechaFin = document.createElement("p");
                pFechaFin.classList.add("tituloFecha");
                pFechaFin.textContent = "Fecha fin";

                const pFechaFinSeleccionada = document.createElement("p");
                pFechaFinSeleccionada.classList.add("fechaFin");
                pFechaFinSeleccionada.setAttribute("fechaUI", "fechaFin");
                pFechaFinSeleccionada.textContent = "(Seleccionar)";

                divContenedorFechaFin.appendChild(pFechaFin);
                divContenedorFechaFin.appendChild(pFechaFinSeleccionada);

                divContenedorHorizontal.appendChild(divContenedorFechaInicio);
                divContenedorHorizontal.appendChild(contenedorZonaOferta);
                divContenedorHorizontal.appendChild(divContenedorFechaFin);

                divContenedor.appendChild(divContenedorHorizontal);

                divPrincipal.appendChild(divContenedor);


                const botonAnadirCondicion = document.createElement("div")
                botonAnadirCondicion.classList.add("botonV1")
                botonAnadirCondicion.setAttribute("boton", "anadirCondicion")
                if (modoUI === "editarOferta") {
                    botonAnadirCondicion.style.display = "none"
                }
                botonAnadirCondicion.textContent = "Añadir condición"
                botonAnadirCondicion.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.componenteUI.selectorTipoOferta)
                divPrincipal.appendChild(botonAnadirCondicion)

                const contonenedorPropiedades = document.createElement("div")
                contonenedorPropiedades.setAttribute("contenedor", "superBloque")
                contonenedorPropiedades.classList.add(
                    "flexVertical",
                    "gap6"
                )
                divPrincipal.appendChild(contonenedorPropiedades)

                const contenedorCondiciones = document.createElement("div")
                contenedorCondiciones.setAttribute("contenedor", "condiciones")
                contenedorCondiciones.classList.add("contenedorCondiciones")
                contonenedorPropiedades.appendChild(contenedorCondiciones)

                const infoCondiciones = document.createElement("div")
                infoCondiciones.setAttribute("info", "condiciones")
                infoCondiciones.classList.add(
                    "textoCentrado",
                    "padding10"
                )
                infoCondiciones.textContent = "Inserta condiciones a esta oferta."
                contenedorCondiciones.appendChild(infoCondiciones)

                const contenedorDescuentos = document.createElement("div")
                contenedorDescuentos.setAttribute("contenedor", "descuentos")
                contonenedorPropiedades.appendChild(contenedorDescuentos)

                const descuentosUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.contenedorDescuento()
                contenedorDescuentos.appendChild(descuentosUI)

                return divPrincipal
            },
            componenteUI: {
                botonesCrearOferta: () => {
                    const pBotonCrearOferta_O1 = document.createElement("p");
                    pBotonCrearOferta_O1.classList.add("botonV1");
                    pBotonCrearOferta_O1.textContent = "Crear oferta";
                    pBotonCrearOferta_O1.setAttribute("componente", "botonCrearOferta");
                    pBotonCrearOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.crearOfertaConfirmar)
                    return pBotonCrearOferta_O1
                },
                botonesModificarOferta: () => {
                    const botonModificarOferta = document.createElement("div")
                    botonModificarOferta.classList.add("botonV1");
                    botonModificarOferta.setAttribute("componente", "botonEditarOferta");
                    botonModificarOferta.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    botonModificarOferta.addEventListener("click", () => {
                        casaVitini.administracion.gestion_de_ofertas.detallesOferta.ofertaModos("modoEditar")
                    })
                    botonModificarOferta.textContent = "Modificar oferta";
                    return botonModificarOferta
                },
                botonesDuranteModificacionOferta: function () {
                    const divBotones_O1 = document.createElement("div");
                    divBotones_O1.classList.add("crearOfertaEpacioBotones");
                    divBotones_O1.setAttribute("componente", "espacioBotones")

                    const pBotonGuardarOferta_O1 = document.createElement("div")
                    pBotonGuardarOferta_O1.classList.add("botonV1");
                    pBotonGuardarOferta_O1.setAttribute("componente", "botonGuardarCambios");
                    pBotonGuardarOferta_O1.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    pBotonGuardarOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.guardarCambiosOferta)
                    pBotonGuardarOferta_O1.textContent = "Actualizar oferta";

                    const pBotonCancelarCambiosOferta_O1 = document.createElement("p");
                    pBotonCancelarCambiosOferta_O1.classList.add("botonV1");
                    pBotonCancelarCambiosOferta_O1.setAttribute("componente", "botonCancelarCambios");
                    pBotonCancelarCambiosOferta_O1.setAttribute("tipoOferta", "conXApartamentosEnConcreto");
                    pBotonCancelarCambiosOferta_O1.addEventListener("click", async () => {
                        const selectorInstantena = document.querySelector("[instantanea]").getAttribute("instantanea")
                        const instantanea = JSON.parse(selectorInstantena)
                        const instanciaUID_destino = document.querySelector(`main[instanciaUID]`).getAttribute("instanciaUID")
                        await casaVitini.administracion.gestion_de_ofertas.detallesOferta.aplicaData({
                            oferta: instantanea,
                            instanciaUID_destino: instanciaUID_destino,
                            modo: "resversion"
                        })
                    })
                    pBotonCancelarCambiosOferta_O1.textContent = "Revertir cambios";

                    const pBotonEliminarOferta_O1 = document.createElement("p");
                    pBotonEliminarOferta_O1.classList.add("botonV1");
                    pBotonEliminarOferta_O1.setAttribute("componente", "botonEliminarOferta");
                    pBotonEliminarOferta_O1.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.detallesOferta.eliminarOferta.UI)
                    pBotonEliminarOferta_O1.textContent = "Eliminar oferta";
                    divBotones_O1.appendChild(pBotonGuardarOferta_O1);
                    divBotones_O1.appendChild(pBotonCancelarCambiosOferta_O1);
                    divBotones_O1.appendChild(pBotonEliminarOferta_O1);
                    return divBotones_O1
                },
                contenedorDescuento: function () {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                    const contenedorDescuentos = document.createElement("div");
                    contenedorDescuentos.classList.add("contenedorDescuento");
                    contenedorDescuentos.setAttribute("contenedorDescuento", instanciaUID)
                    contenedorDescuentos.setAttribute("instanciaUID", instanciaUID)


                    const titulo = document.createElement("p");
                    titulo.classList.add("crearOfertaTituloOpcion");
                    titulo.textContent =
                        "Determina dónde se aplica el descuento de esta oferta. Este tipo de oferta que has seleccionado se basa en los apartamentos concretos que tiene que escoger el cliente. Es por eso que, aparte de la opción de descuento al neto de la reserva, puedes establecer descuentos individuales por apartamento dedicado.";
                    contenedorDescuentos.appendChild(titulo);


                    const selectorDescuento = document.createElement("select");
                    selectorDescuento.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                    selectorDescuento.setAttribute("campoOferta", "contextoAplicacion");
                    selectorDescuento.setAttribute("componente", "tipoDescuento");
                    selectorDescuento.addEventListener("change", (e) => {
                        const descuentoIDV = e.target.value
                        this.controladorDescuentos({
                            descuentoIDV
                        })
                    })

                    const opcionesSelector = [{
                        nombre: "¿Donde se aplica el descuento de esta oferta?",
                        inicial: "si",
                    },
                    {
                        nombre: "Aplicación del descuento a cualquier apartamento de la reserva de manera individual.",
                        descuentoIDV: "mismoDescuentoParaCadaApartamento",
                    },
                    {
                        nombre: "Aplicación al neto de la reserva.",
                        descuentoIDV: "totalNeto",
                    },
                    {
                        nombre: "Aplicación a los días dentro de un rango.",
                        descuentoIDV: "porRango",
                    },
                    {
                        nombre: "Aplicación individual por apartamento.",
                        descuentoIDV: "individualPorApartamento",
                    },]


                    for (const opcion of opcionesSelector) {

                        const nombre = opcion.nombre
                        const inicial = opcion.inicial
                        const descuentoIDV = opcion.descuentoIDV

                        const opcionUI = document.createElement("option")
                        if (inicial === "si") {
                            opcionUI.selected = true;
                            opcionUI.disabled = true;
                        } else {
                            opcionUI.value = descuentoIDV
                        }
                        opcionUI.textContent = nombre

                        selectorDescuento.appendChild(opcionUI)
                    }
                    contenedorDescuentos.appendChild(selectorDescuento)
                    const descuentoIndividualPorApartmento = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.individualPorApartamento()
                    contenedorDescuentos.appendChild(descuentoIndividualPorApartmento)
                    const descuentoTotalNeto = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.totalNeto()
                    contenedorDescuentos.appendChild(descuentoTotalNeto)
                    const mismoDescuentoParaCadaApartamento = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.mismoDescuentoParaCadaApartamento()
                    contenedorDescuentos.appendChild(mismoDescuentoParaCadaApartamento)
                    const descuentoPorRango = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.arranque()
                    contenedorDescuentos.appendChild(descuentoPorRango)

                    return contenedorDescuentos

                },
                contenedorSelectorApartamentosEspecificos: () => {

                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const porApartamentoDedicado = document.createElement("div");
                    porApartamentoDedicado.classList.add("contenedorDescuento");
                    porApartamentoDedicado.setAttribute("instanciaUID", instanciaUID)

                    const divCrearOfertaEspacioOpciones_3 = document.createElement("div");
                    divCrearOfertaEspacioOpciones_3.classList.add("crearOfeartaEspacioOpciones");

                    const divCrearOfertaConentenedor4_3 = document.createElement("div");
                    divCrearOfertaConentenedor4_3.setAttribute("controladorDesliegue", "descuentosDedicados");
                    divCrearOfertaConentenedor4_3.setAttribute("parteOferta", "descuentosDedicados");


                    const contenedorSelectorApartamentos = document.createElement("div");
                    contenedorSelectorApartamentos.classList.add("crearOfertaConentenedor");
                    contenedorSelectorApartamentos.setAttribute("parteOferta", "apartamentosDedicados");

                    const pCrearOFertaBotonAnadirApartamento_3 = document.createElement("p");
                    pCrearOFertaBotonAnadirApartamento_3.classList.add("crearOFertaBotonAnadirApartamento");
                    pCrearOFertaBotonAnadirApartamento_3.setAttribute("componente", "botonAnadirApartamentoOferta");
                    pCrearOFertaBotonAnadirApartamento_3.textContent = "Añadir apartamento";
                    pCrearOFertaBotonAnadirApartamento_3.addEventListener("click", (e) => {
                        const data = {
                            e: e,
                            instanciaUID: instanciaUID,
                        }
                        casaVitini.administracion.gestion_de_ofertas.crearOferta.apartamentosDisponibles(data)
                    })
                    contenedorSelectorApartamentos.appendChild(pCrearOFertaBotonAnadirApartamento_3);



                    const divCrearOfertaZonaAnadirApartamento_3 = document.createElement("div");
                    divCrearOfertaZonaAnadirApartamento_3.classList.add("crearOfertaZonaAnadirApartamento");
                    divCrearOfertaZonaAnadirApartamento_3.setAttribute("componente", "zonaAnadirApartamento");

                    const pCrearApartamentoInfoSinApartamento_3 = document.createElement("p");
                    pCrearApartamentoInfoSinApartamento_3.classList.add("crearApartamentoInfoSinApartamento");
                    pCrearApartamentoInfoSinApartamento_3.setAttribute("componente", "infoSinApartamento");
                    pCrearApartamentoInfoSinApartamento_3.textContent =
                        "Añade apartamentos a esta condición para determinar que apartamentos en concreto tienen que estar en una reserva para acceder a esta oferta";
                    divCrearOfertaZonaAnadirApartamento_3.appendChild(pCrearApartamentoInfoSinApartamento_3);
                    contenedorSelectorApartamentos.appendChild(divCrearOfertaZonaAnadirApartamento_3);
                    divCrearOfertaConentenedor4_3.appendChild(contenedorSelectorApartamentos);

                    divCrearOfertaEspacioOpciones_3.appendChild(divCrearOfertaConentenedor4_3);
                    porApartamentoDedicado.appendChild(divCrearOfertaEspacioOpciones_3);

                    return porApartamentoDedicado

                },
                selectorTipoOferta: () => {

                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                    const constructor = pantallaInmersiva.querySelector("[componente=contenedor]")
                    const destino = pantallaInmersiva.querySelector("[destino=inyector]")

                    const tituloUI = document.createElement("p")
                    tituloUI.classList.add("tituloGris", "padding6")
                    tituloUI.setAttribute("componente", "titulo")
                    tituloUI.textContent = "Añadir condición"
                    constructor.appendChild(tituloUI)

                    const divContenedorHorizontalTipoOfertas = document.createElement("div");
                    divContenedorHorizontalTipoOfertas.classList.add("crearOfertaContenedorHorizontalTipoOfertas");


                    const infoReservas = document.createElement("p")
                    infoReservas.classList.add(
                        "negrita",
                        "padding6"
                    )
                    infoReservas.setAttribute("componente", "titulo")
                    infoReservas.textContent = "Condiciones para reservas"
                    constructor.appendChild(infoReservas)



                    const divContenedorTipoOfertas = document.createElement("div");
                    divContenedorTipoOfertas.classList.add("crearOfertaConentenedor");
                    destino.appendChild(divContenedorTipoOfertas);
                    divContenedorTipoOfertas.appendChild(divContenedorHorizontalTipoOfertas);


                    const opcionesTipoOferta = [
                        {
                            tipo: "conFechaEntradaEntreRango",
                            titulo: "Con fecha de entrada entre rango.",
                            descripcion: "Aplicar esta oferta cuando la fecha de entrada de una reserva está dentro de un rango de fechas."
                        },
                        {
                            tipo: "conFechaSalidaEntreRango",
                            titulo: "Con fecha de salida entre rango.",
                            descripcion: "Aplicar esta oferta cuando la fecha de salida de una reserva está dentro de un rango de fechas."
                        },
                        {
                            tipo: "conFechaCreacionEntreRango",
                            titulo: "Con fecha de creación entre rango.",
                            descripcion: "Aplicar esta oferta cuando la fecha de creación de una reserva está dentro del rango de vigencia de la oferta."
                        },
                        {
                            tipo: "porNumeroDeApartamentos",
                            titulo: "Por número de apartamentos ",
                            descripcion: "Aplicar oferta cuando una reserva cumple con el número de apartamentos requeridos por este tipo de condición."
                        },
                        {
                            tipo: "porApartamentosEspecificos",
                            titulo: "Por apartamentos específicos ",
                            descripcion: "Aplicar oferta cuando una reserva contiene los apartamentos en específico que requiere esta condición."
                        },
                        {
                            tipo: "porDiasDeAntelacion",
                            titulo: "Por días de antelación ",
                            descripcion: "Aplicar oferta cuando una reserva cumple con el requisito de los días de antelación que requiere la condición."
                        },
                        {
                            tipo: "porDiasDeReserva",
                            titulo: "Por días de la reserva",
                            descripcion: "Aplicar oferta cuando una reserva cumple con los requisitos de días de duración que requiere la condición."
                        },
                        {
                            tipo: "porRangoDeFechas",
                            titulo: "Por rango de fechas de la reserva",
                            descripcion: "Aplicar esta oferta cuando se realiza una reserva cuyo rango determinado por la fecha de entrada y la fecha de salida se cruza con el rango de duración determinado en esta condición."
                        }, {
                            tipo: "porCodigoDescuento",
                            titulo: "Por código de descuento",
                            descripcion: "Aplicar esta oferta a la reserva que inserte un código de descuento."
                        }
                    ];

                    for (const opcion of opcionesTipoOferta) {
                        const tipoOferta = opcion.tipo
                        const divOpcionTipoOferta = document.createElement("div");
                        divOpcionTipoOferta.classList.add("opcionTipoOFerta");
                        divOpcionTipoOferta.setAttribute("tipoOferta", tipoOferta);
                        divOpcionTipoOferta.addEventListener("click", () => {
                            const espacioCrearOferta = document.querySelector("[componente=espacioCrearOferta] [contenedor=condiciones]")
                            const ofertaUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.condicionesUI[tipoOferta]()
                            espacioCrearOferta.appendChild(ofertaUI)
                            casaVitini.administracion.gestion_de_ofertas.componenteUI.controlDespliegeContenedorDescuento()
                            return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        })
                        const pTituloTipoOferta = document.createElement("p");
                        pTituloTipoOferta.classList.add("crearOfertaTituloTipoOferta");
                        pTituloTipoOferta.textContent = opcion.titulo;
                        divContenedorTipoOfertas.appendChild(pTituloTipoOferta);

                        const pDescripcionTipoOferta = document.createElement("p");
                        pDescripcionTipoOferta.classList.add("crearOfertaDescripcionTipoOferta");
                        pDescripcionTipoOferta.textContent = opcion.descripcion;
                        divOpcionTipoOferta.appendChild(pTituloTipoOferta);
                        divOpcionTipoOferta.appendChild(pDescripcionTipoOferta);
                        divContenedorHorizontalTipoOfertas.appendChild(divOpcionTipoOferta);
                    }

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("boton")
                    botonCancelar.textContent = "Cerrar y volver al a edición de la oferta"
                    botonCancelar.setAttribute("boton", "cancelar")
                    botonCancelar.addEventListener("click", () => {
                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    })
                    constructor.appendChild(botonCancelar)
                    document.querySelector("main").appendChild(pantallaInmersiva)
                },
                eliminarContenedorCondicion: (tipoCondicion) => {
                    tipoCondicion.target.closest("[zonaOferta]").remove()
                    return casaVitini.administracion.gestion_de_ofertas.componenteUI.controlDespliegeContenedorDescuento()
                },
                controlDespliegeContenedorDescuento: () => {
                    const contenedorCondiciones = document.querySelector("[componente=espacioCrearOferta] [contenedor=condiciones]")
                    const contenedorDescuentos = document.querySelector("[componente=espacioCrearOferta] [contenedor=descuentos]")
                    const ofertasRenderizadas = contenedorCondiciones.querySelectorAll("[zonaOferta]")
                    const selectorContenedorInfoCondiciones = contenedorCondiciones.querySelector("[info=condiciones]")
                    if (ofertasRenderizadas.length > 0) {
                        selectorContenedorInfoCondiciones.style.display = "none"
                    } else {
                        selectorContenedorInfoCondiciones.removeAttribute("style")
                    }
                },
                condicionesUI: {
                    botonEliminarCondicion: () => {
                        const botonBorrarCondicion = document.createElement("p")
                        botonBorrarCondicion.classList.add("botonV1")
                        botonBorrarCondicion.setAttribute("componente", "titulo")
                        botonBorrarCondicion.textContent = "Eliminar condición"
                        botonBorrarCondicion.addEventListener("click", casaVitini.administracion.gestion_de_ofertas.componenteUI.eliminarContenedorCondicion)
                        return botonBorrarCondicion
                    },
                    porNumeroDeApartamentos: function () {
                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "porNumeroDeApartamentos");

                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)

                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)


                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por número de apartamentos";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar oferta cuando una reserva cumple con el número de apartamentos requeridos por este tipo de condición.";
                        contenedor.appendChild(descripcionCondicion);



                        const seleccionaTipoNumero = document.createElement("select");
                        seleccionaTipoNumero.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        seleccionaTipoNumero.setAttribute("campoOferta", "tipoConteo");

                        const optionO1 = document.createElement("option");
                        optionO1.selected = true;
                        optionO1.disabled = true;
                        optionO1.setAttribute("value", "");
                        optionO1.textContent = "Selecciona si a partir de o un número exacto de apartamentos.";
                        const optionO2 = document.createElement("option");
                        optionO2.value = "numeroExacto";
                        optionO2.textContent = "Con un número exacto de apartamentos.";
                        const opcion03 = document.createElement("option");
                        opcion03.value = "hastaUnNumeroExacto";
                        opcion03.textContent = "Hasta un número exacto de apartamentos.";
                        const opcion04 = document.createElement("option");
                        opcion04.value = "aPartirDe";
                        opcion04.textContent = "A partir de un número exacto de apartamentos.";
                        seleccionaTipoNumero.appendChild(optionO1);
                        seleccionaTipoNumero.appendChild(optionO2);
                        seleccionaTipoNumero.appendChild(opcion03)
                        seleccionaTipoNumero.appendChild(opcion04)
                        contenedor.appendChild(seleccionaTipoNumero);


                        const inputNumeroApartamentos_O1 = document.createElement("input");
                        inputNumeroApartamentos_O1.setAttribute("type", "text");
                        inputNumeroApartamentos_O1.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        inputNumeroApartamentos_O1.placeholder = "0";
                        inputNumeroApartamentos_O1.setAttribute("campoOferta", "numeroDeApartamentos");
                        contenedor.appendChild(inputNumeroApartamentos_O1);

                        return contenedor
                    },
                    porCodigoDescuento: function () {

                        const contenedor = document.createElement("div");
                        contenedor.classList.add("contenedorCondicion");
                        contenedor.setAttribute("zonaOferta", "porCodigoDescuento");


                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)


                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)


                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por código de descuento";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar esta oferta a la reserva que inserte un código de descuento.";
                        contenedor.appendChild(descripcionCondicion);


                        const campoCodigo = document.createElement("input")
                        campoCodigo.setAttribute("campo", "codigoDescuento")
                        campoCodigo.classList.add("campoTextoSimple")
                        campoCodigo.placeholder = "Escribe el código"
                        contenedor.appendChild(campoCodigo)

                        return contenedor
                    },
                    porDiasDeAntelacion: function () {
                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "porDiasDeAntelacion");
                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)


                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)


                        const divEspacioOpciones_O1 = document.createElement("div");
                        divEspacioOpciones_O1.classList.add("crearOfeartaEspacioOpciones");

                        const divContenedor1_O1 = document.createElement("div");
                        divContenedor1_O1.classList.add("crearOfertaConentenedor");

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por días de antelación";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar oferta cuando una reserva cumple con el requisito de los días de antelación que requiere la condición.";
                        contenedor.appendChild(descripcionCondicion);


                        const seleccionaTipoNumero = document.createElement("select");
                        seleccionaTipoNumero.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        seleccionaTipoNumero.setAttribute("campoOferta", "tipoConteo");

                        const optionO1 = document.createElement("option");
                        optionO1.selected = true;
                        optionO1.disabled = true;
                        optionO1.setAttribute("value", "");
                        optionO1.textContent = "Selecciona si a partir de o un número exacto de días.";
                        const optionO2 = document.createElement("option");
                        optionO2.value = "numeroExacto";
                        optionO2.textContent = "Con un número exacto de días de antelación.";
                        const opcion03 = document.createElement("option");
                        opcion03.value = "aPartirDe";
                        opcion03.textContent = "A partir de un número exacto de días de antelación.";
                        const opcion04 = document.createElement("option");
                        opcion04.value = "hastaUnNumeroExacto";
                        opcion04.textContent = "Hasta un número exacto de días de antelación.";
                        seleccionaTipoNumero.appendChild(optionO1);
                        seleccionaTipoNumero.appendChild(optionO2);
                        seleccionaTipoNumero.appendChild(opcion03);
                        seleccionaTipoNumero.appendChild(opcion04);
                        divContenedor1_O1.appendChild(seleccionaTipoNumero);


                        const inputNumeroApartamentos_O1 = document.createElement("input");
                        inputNumeroApartamentos_O1.setAttribute("type", "text");
                        inputNumeroApartamentos_O1.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        inputNumeroApartamentos_O1.placeholder = "Determina el número de días de antelación.";
                        inputNumeroApartamentos_O1.setAttribute("campoOferta", "numeroDeDias");

                        divContenedor1_O1.appendChild(inputNumeroApartamentos_O1);




                        divEspacioOpciones_O1.appendChild(divContenedor1_O1);
                        contenedor.appendChild(divEspacioOpciones_O1);


                        return contenedor
                    },
                    porDiasDeReserva: function () {
                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "porDiasDeReserva");
                        contenedor.classList.add("contenedorCondicion");



                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)



                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)


                        const divEspacioOpciones_O1 = document.createElement("div");
                        divEspacioOpciones_O1.classList.add("crearOfeartaEspacioOpciones");

                        const divContenedor1_O1 = document.createElement("div");
                        divContenedor1_O1.classList.add("crearOfertaConentenedor");


                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por días de la reserva";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar oferta cuando una reserva cumple con los requisitos de días de duración que requiere la condición.";
                        contenedor.appendChild(descripcionCondicion);


                        const seleccionaTipoNumero = document.createElement("select");
                        seleccionaTipoNumero.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        seleccionaTipoNumero.setAttribute("campoOferta", "tipoConteo");

                        const optionO1 = document.createElement("option");
                        optionO1.selected = true;
                        optionO1.disabled = true;
                        optionO1.setAttribute("value", "");
                        optionO1.textContent = "Selecciona si a partir de o un número exacto de días con noche.";
                        const optionO2 = document.createElement("option");
                        optionO2.value = "numeroExacto";
                        optionO2.textContent = "Con un número exacto de días con noche de la reserva.";
                        const opcion03 = document.createElement("option");
                        opcion03.value = "aPartirDe";
                        opcion03.textContent = "AA partir de un número exacto de días con noche de la reserva.";
                        const opcion04 = document.createElement("option");
                        opcion04.value = "hastaUnNumeroExacto";
                        opcion04.textContent = "Hasta un número exacto de días con noche de la reserva.";
                        seleccionaTipoNumero.appendChild(optionO1);
                        seleccionaTipoNumero.appendChild(optionO2);
                        seleccionaTipoNumero.appendChild(opcion03);
                        seleccionaTipoNumero.appendChild(opcion04);
                        divEspacioOpciones_O1.appendChild(divContenedor1_O1);


                        const inputNumeroApartamentos_O1 = document.createElement("input");
                        inputNumeroApartamentos_O1.setAttribute("type", "text");
                        inputNumeroApartamentos_O1.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        inputNumeroApartamentos_O1.placeholder = "Determina el número de días con noche de la reserva.";
                        inputNumeroApartamentos_O1.setAttribute("campoOferta", "numeroDeDias");

                        divContenedor1_O1.appendChild(seleccionaTipoNumero);
                        divContenedor1_O1.appendChild(inputNumeroApartamentos_O1);


                        contenedor.appendChild(divEspacioOpciones_O1);

                        return contenedor
                    },
                    conFechaCreacionEntreRango: function () {

                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "conFechaCreacionEntreRango");
                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)

                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Con fecha de creación entre rango.";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar esta oferta cuando la fecha de creación de una reserva está dentro del rango de vigencia de la oferta.";
                        contenedor.appendChild(descripcionCondicion);

                        return contenedor
                    },
                    conFechaEntradaEntreRango: function () {

                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "conFechaEntradaEntreRango");
                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)

                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Con fecha de entrada entre rango";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar esta oferta cuando la fecha de entrada de una reserva está dentro de un rango de fechas.";
                        contenedor.appendChild(descripcionCondicion);

                        const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            modo: "administracion",
                            sobreControlConfiguracion: {
                                configuracionInicio: {
                                    tituloCalendario: "Seleciona una fecha de inicio del rango"
                                },
                                configuracionFin: {
                                    tituloCalendario: "Seleciona una fecha de fin del rango"
                                }
                            }

                        })
                        contenedor.appendChild(contenedorFechasUI)

                        return contenedor
                    },
                    conFechaSalidaEntreRango: function () {

                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "conFechaSalidaEntreRango");
                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)

                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Con fecha de salida entre rango";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar esta oferta cuando la fecha de salida de una reserva está dentro de un rango de fechas.";
                        contenedor.appendChild(descripcionCondicion);

                        const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            modo: "administracion",
                            sobreControlConfiguracion: {
                                configuracionInicio: {
                                    tituloCalendario: "Seleciona una fecha de inicio del rango"
                                },
                                configuracionFin: {
                                    tituloCalendario: "Seleciona una fecha de fin del rango"
                                }
                            }

                        })
                        contenedor.appendChild(contenedorFechasUI)
                        return contenedor
                    },
                    porRangoDeFechas: function () {

                        const contenedor = document.createElement("div");
                        contenedor.setAttribute("zonaOferta", "porRangoDeFechas");
                        contenedor.classList.add("contenedorCondicion");

                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")


                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        contenedor.appendChild(contenedorBotonesGlobales)
                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por rango de fechas de la reserva";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar esta oferta cuando se realiza una reserva cuyo rango determinado por la fecha de entrada y la fecha de salida se cruza con el rango de duración determinado en esta condición.";
                        contenedor.appendChild(descripcionCondicion);

                        const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            modo: "administracion",

                        })
                        contenedor.appendChild(contenedorFechasUI)

                        return contenedor
                    },
                    porApartamentosEspecificos: function () {

                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                        const contenedor = document.createElement("div");
                        contenedor.classList.add("contenedorDescuento");


                        contenedor.setAttribute("zonaOferta", "porApartamentosEspecificos");


                        const contenedorBotonesGlobales = document.createElement("div")
                        contenedorBotonesGlobales.classList.add("contenedorBotonesGlobal")
                        contenedorBotonesGlobales.setAttribute("contenedorEnCondicion", "botones")
                        contenedor.appendChild(contenedorBotonesGlobales)


                        const botonEliminarCondicion = this.botonEliminarCondicion()
                        contenedorBotonesGlobales.appendChild(botonEliminarCondicion)

                        const titulo = document.createElement("p");
                        titulo.classList.add(
                            "textoCentrado",
                            "negrita"
                        );
                        titulo.textContent = "Por apartamentos específicos ";
                        contenedor.appendChild(titulo);


                        const descripcionCondicion = document.createElement("p");
                        descripcionCondicion.classList.add("crearOfertaTituloOpcion");
                        descripcionCondicion.textContent = "Aplicar oferta cuando una reserva contiene los apartamentos en específico que requiere esta condición.";
                        contenedor.appendChild(descripcionCondicion);


                        const selector = document.createElement("select")
                        selector.classList.add(
                            "selectorLista")
                        selector.setAttribute("campo", "tipoDeEspecificidad")
                        contenedor.appendChild(selector)

                        const tituloSelector = document.createElement("option")
                        tituloSelector.value = ""
                        tituloSelector.selected = true
                        tituloSelector.disabled = true
                        tituloSelector.text = "Seleccionar el tipo condicional."
                        selector.add(tituloSelector)

                        const tipoExacto = document.createElement("option")
                        tipoExacto.value = "exactamente"
                        tipoExacto.text = "La reserva debe contener exactamente estos apartamentos."
                        selector.add(tipoExacto)

                        const tipoAlguno = document.createElement("option")
                        tipoAlguno.value = "alguno"
                        tipoAlguno.text = "La reserva debe de contener alguno de estos apartamentos."
                        selector.add(tipoAlguno)

                        const tipoExactamenteEntreOtros = document.createElement("option")
                        tipoExactamenteEntreOtros.value = "exactamenteEntreOtros"
                        tipoExactamenteEntreOtros.text = "La reserva debe contener exactamente estos apartamentos y, además, puede contener otros."
                        selector.add(tipoExactamenteEntreOtros)

                        const tipoNOAlguno = document.createElement("option")
                        tipoNOAlguno.value = "noDebeContenedorAlguno"
                        tipoNOAlguno.text = "La reserva no debe de contener alguno de estos apartamentos."
                        selector.add(tipoNOAlguno)

                        const tipoNOAlgunoExacto = document.createElement("option")
                        tipoNOAlgunoExacto.value = "noDebeContenedorExactamente"
                        tipoNOAlgunoExacto.text = "La reserva no debe de contener exactamente de estos apartamentos."
                        selector.add(tipoNOAlgunoExacto)

                        const tipoNOAlgunoExactoEntreOtros = document.createElement("option")
                        tipoNOAlgunoExactoEntreOtros.value = "noDebeContenedorExactamenteEntreOtros"
                        tipoNOAlgunoExactoEntreOtros.text = "La reserva no debe de contener exactamente de estos apartamentos, entre otros."


                        const texto = "Añade apartamentos a esta condición para determinar qué apartamentos en concreto tienen que estar en una reserva para acceder a esta oferta."

                        const selectorApartamentosEspecificosUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: texto,
                            tipoDespliegue: "parcial"
                        })
                        contenedor.appendChild(selectorApartamentosEspecificosUI)
                        return contenedor
                    }

                },
                descuentosUI: {
                    individualPorApartamento: () => {
                        const contenedorDescuento = document.createElement("div");
                        contenedorDescuento.classList.add("crearOfertaConentenedor", "estadoInicialInvisible");
                        contenedorDescuento.setAttribute("descuentoIDV", "individualPorApartamento");

                        const titulo = document.createElement("p");
                        titulo.classList.add("crearOfertaTituloOpcion");
                        titulo.textContent =
                            "Añade qué apartamentos en concreto debe de seleccionar el cliente para que se aplique esta oferta.";
                        contenedorDescuento.appendChild(titulo);

                        const selectorApartamentosEspecificosUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: "No hay ningún apartamento dentro de esta reserva.Pulse el botón Añadir apartamento para añadir apartamentos en específico.",
                            tipoDespliegue: "total"
                        })
                        contenedorDescuento.appendChild(selectorApartamentosEspecificosUI);
                        return contenedorDescuento
                    },
                    totalNeto: () => {
                        const contenedorDescuento = document.createElement("div");
                        contenedorDescuento.classList.add("crearOfertaConentenedor", "estadoInicialInvisible");
                        contenedorDescuento.setAttribute("descuentoIDV", "totalNeto");

                        const titulo = document.createElement("p");
                        titulo.classList.add("crearOfertaTituloOpcion");
                        titulo.textContent =
                            "Determina si esta oferta será un descuento por porcentaje o una rebaja fija del precio y luego determina esa cantidad.";
                        contenedorDescuento.appendChild(titulo);

                        const selector = document.createElement("select");
                        selector.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        selector.setAttribute("campoOferta", "tipoDescuento");

                        const opcionInicial = document.createElement("option");
                        opcionInicial.selected = true;
                        opcionInicial.disabled = true;
                        opcionInicial.setAttribute("value", "");
                        opcionInicial.textContent = "Selecciona el tipo de descuento";

                        const opcionPorcentaje = document.createElement("option");
                        opcionPorcentaje.value = "porcentaje";
                        opcionPorcentaje.textContent = "Descuento por porcentaje";

                        const opcionCantidad = document.createElement("option");
                        opcionCantidad.value = "cantidadFija";
                        opcionCantidad.textContent = "Descuento por cantidad fija";

                        selector.appendChild(opcionInicial);
                        selector.appendChild(opcionPorcentaje);
                        selector.appendChild(opcionCantidad);
                        contenedorDescuento.appendChild(selector);

                        const campo = document.createElement("input");
                        campo.setAttribute("type", "text");
                        campo.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        campo.setAttribute("placeholder", "00.00");
                        campo.setAttribute("campoOferta", "descuentoGlobal");
                        contenedorDescuento.appendChild(campo);

                        return contenedorDescuento
                    },
                    mismoDescuentoParaCadaApartamento: () => {
                        const contenedorDescuento = document.createElement("div");
                        contenedorDescuento.classList.add("crearOfertaConentenedor", "estadoInicialInvisible");
                        contenedorDescuento.setAttribute("descuentoIDV", "mismoDescuentoParaCadaApartamento");

                        const titulo = document.createElement("p");
                        titulo.classList.add("crearOfertaTituloOpcion");
                        titulo.textContent =
                            "Determina si esta oferta será un descuento para cada apartamento por porcentaje o una rebaja fija del precio y luego determina esa cantidad.";
                        contenedorDescuento.appendChild(titulo);

                        const selector = document.createElement("select");
                        selector.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        selector.setAttribute("campoOferta", "tipoDescuento");

                        const opcionInicial = document.createElement("option");
                        opcionInicial.selected = true;
                        opcionInicial.disabled = true;
                        opcionInicial.setAttribute("value", "");
                        opcionInicial.textContent = "Selecciona el tipo de descuento.";

                        const opcionPorcentaje = document.createElement("option");
                        opcionPorcentaje.value = "porcentaje";
                        opcionPorcentaje.textContent = "Descuento por porcentaje";

                        const opcionCantidad = document.createElement("option");
                        opcionCantidad.value = "cantidadFija";
                        opcionCantidad.textContent = "Descuento por cantidad fija";

                        selector.appendChild(opcionInicial);
                        selector.appendChild(opcionPorcentaje);
                        selector.appendChild(opcionCantidad);
                        contenedorDescuento.appendChild(selector);

                        const campo = document.createElement("input");
                        campo.setAttribute("type", "text");
                        campo.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                        campo.setAttribute("placeholder", "00.00");
                        campo.setAttribute("campoOferta", "descuentoGlobal");
                        contenedorDescuento.appendChild(campo);

                        return contenedorDescuento
                    },
                    porRango: {
                        arranque: () => {
                            const contenedorDescuento = document.createElement("div");
                            contenedorDescuento.classList.add("crearOfertaConentenedor", "estadoInicialInvisible");
                            contenedorDescuento.setAttribute("descuentoIDV", "porRango");
                            contenedorDescuento.setAttribute("area", "descuentosPorRango")

                            const titulo = document.createElement("p");
                            titulo.classList.add("crearOfertaTituloOpcion");
                            titulo.textContent =
                                "Determina el rango de aplicación del descuento.Una vez selecciones el rango.Podrás determinar si aplicar un descuento al neto total de la reserva que esté dentro de ese rango.Es decir, los días de la reserva con noche que estén dentro de ese rango.También puedes aplicar un descuento personalizado dentro de cada día con noche.Determinando si el descuento se aplica al neto de un día o a apartamentos específicos dentro de un día.";
                            contenedorDescuento.appendChild(titulo);

                            const contenedorFechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                                metodoSelectorDia: "administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.pasarelaSelectorDia",
                                nombreContenedor: "totalNetoPorRango",
                                modo: "administracion",

                            })
                            contenedorDescuento.appendChild(contenedorFechasUI)

                            const selectorTipoDescuento = document.createElement("select");
                            selectorTipoDescuento.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                            selectorTipoDescuento.setAttribute("campoOferta", "contextoAplicacion");
                            selectorTipoDescuento.setAttribute("componente", "subTipoDescuento");
                            selectorTipoDescuento.addEventListener("change", (e) => {
                                casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.controladorUI({
                                    contenedorIDV: e.target.value
                                })
                            })
                            const opcionesSelector = [{
                                nombre: "Determina, dentro del rango seleccionado, cómo se aplica el descuento.",
                                inicial: "si",
                            }, {
                                nombre: "AAplicar descuento al total neto de la suma de los días de la reserva dentro del rango.",
                                descuentoIDV: "totalNetoPorRango",
                            }, {
                                nombre: "Aplicar descuentos individuales a los días de la reserva dentro del rango.",
                                descuentoIDV: "porDiasDelRango",
                            }]

                            for (const opcion of opcionesSelector) {
                                const nombre = opcion.nombre
                                const inicial = opcion.inicial
                                const descuentoIDV = opcion.descuentoIDV
                                const opcionUI = document.createElement("option")
                                if (inicial === "si") {
                                    opcionUI.selected = true;
                                    opcionUI.disabled = true;
                                } else {
                                    opcionUI.value = descuentoIDV
                                }
                                opcionUI.textContent = nombre
                                selectorTipoDescuento.appendChild(opcionUI)
                            }
                            contenedorDescuento.appendChild(selectorTipoDescuento)

                            const totalNetoPorRango = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.totalNetoPorRango()
                            contenedorDescuento.appendChild(totalNetoPorRango)

                            const porDiasDelRango = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.porDiasDelRango.arranque()
                            contenedorDescuento.appendChild(porDiasDelRango)

                            return contenedorDescuento
                        },
                        infoInicialSinApartametno: () => {
                            const info = document.createElement("p")
                            info.classList.add(
                                "texto",
                                "textoCentrado",
                                "padding6"
                            )
                            info.textContent = "Selecciona un rango de fecha para determinar en qué rango de la reserva se aplicarán los descuentos y poder personalizar los días."
                            return info
                        },
                        totalNetoPorRango: () => {
                            const contenedor = document.createElement("div")
                            contenedor.classList.add("estadoInicialInvisible", "contenedorInternoPorRango")
                            contenedor.setAttribute("contenedorPorRango", "totalNetoPorRango")

                            const selector = document.createElement("select");
                            selector.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto",);
                            selector.setAttribute("campoOferta", "tipoDescuento");

                            const opcionInicial = document.createElement("option");
                            opcionInicial.selected = true;
                            opcionInicial.disabled = true;
                            opcionInicial.setAttribute("value", "");
                            opcionInicial.textContent = "Selecciona el tipo de descuento al total neto de los días de la reserva dentro del rango.";

                            const opcionPorcentaje = document.createElement("option");
                            opcionPorcentaje.value = "porcentaje";
                            opcionPorcentaje.textContent = "Descuento por porcentaje";

                            const opcionCantidad = document.createElement("option");
                            opcionCantidad.value = "cantidadFija";
                            opcionCantidad.textContent = "Descuento por cantidad fija";

                            selector.appendChild(opcionInicial);
                            selector.appendChild(opcionPorcentaje);
                            selector.appendChild(opcionCantidad);
                            contenedor.appendChild(selector);

                            const campo = document.createElement("input");
                            campo.setAttribute("type", "text");
                            campo.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                            campo.setAttribute("placeholder", "00.00");
                            campo.setAttribute("campoOferta", "descuentoGlobal");
                            contenedor.appendChild(campo);

                            return contenedor

                        },
                        porDiasDelRango: {
                            arranque: () => {
                                const contenedor = document.createElement("div")
                                contenedor.setAttribute("contenedor", "porDiasDentroDelRango")
                                contenedor.setAttribute("contenedorPorRango", "porDiasDelRango")
                                contenedor.classList.add("estadoInicialInvisible", "contenedorInternoPorRango")
                                const info = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.infoInicialSinApartametno()
                                contenedor.appendChild(info)
                                return contenedor
                            },
                            totalNetoPorDiaUI: (data) => {
                                const instanciaUID = data.instanciaUID
                                const contenedorOpcionNetoDia = document.createElement("div")
                                contenedorOpcionNetoDia.classList.add(
                                    "estadoInicialInvisible",
                                    "contenedorVertical",
                                    "gap6"
                                )
                                contenedorOpcionNetoDia.setAttribute("contenedorDelDia", "netoPorDia")
                                contenedorOpcionNetoDia.setAttribute("instanciaUID", instanciaUID)
                                const selector = document.createElement("select");
                                selector.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                                selector.setAttribute("campoOferta", "tipoDescuento");

                                const opcionInicial = document.createElement("option");
                                opcionInicial.selected = true;
                                opcionInicial.disabled = true;
                                opcionInicial.setAttribute("value", "");
                                opcionInicial.textContent = "Selecciona el tipo de descuento al total neto de los días de la reserva dentro del rango.";

                                const opcionPorcentaje = document.createElement("option");
                                opcionPorcentaje.value = "porcentaje";
                                opcionPorcentaje.textContent = "Descuento por porcentaje";

                                const opcionCantidad = document.createElement("option");
                                opcionCantidad.value = "cantidadFija";
                                opcionCantidad.textContent = "Descuento por cantidad fija";

                                selector.appendChild(opcionInicial);
                                selector.appendChild(opcionPorcentaje);
                                selector.appendChild(opcionCantidad);
                                contenedorOpcionNetoDia.appendChild(selector);

                                const campo = document.createElement("input");
                                campo.setAttribute("type", "text");
                                campo.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                                campo.setAttribute("placeholder", "00.00");
                                campo.setAttribute("campoOferta", "descuentoGlobal");
                                contenedorOpcionNetoDia.appendChild(campo);

                                return contenedorOpcionNetoDia
                            },
                            totalNetoPorApartamentosDelDiaUI: (data) => {
                                const instanciaUID = data.instanciaUID

                                const contenedorPorApartamento = document.createElement("div")
                                contenedorPorApartamento.classList.add(
                                    "estadoInicialInvisible",
                                    "contenedorVertical",
                                    "gap6"
                                )
                                contenedorPorApartamento.setAttribute("contenedorDelDia", "netoPorApartamentoDelDia")
                                contenedorPorApartamento.setAttribute("instanciaUID", instanciaUID)

                                const titulo = document.createElement("p");
                                titulo.classList.add("crearOfertaTituloOpcion");
                                titulo.textContent =
                                    "AAñade qué apartamentos en concreto debe de seleccionar el cliente para que se aplique esta oferta.";
                                contenedorPorApartamento.appendChild(titulo);
                                const selectorApartamentosEspecificosUI = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                                    textoContenedorVacio: "Añade apartamentos a esta condición para determinar qué apartamentos en concreto tienen que estar en una reserva para acceder a esta oferta.",
                                    tipoDespliegue: "total"
                                })
                                contenedorPorApartamento.appendChild(selectorApartamentosEspecificosUI);
                                return contenedorPorApartamento
                            },
                        },
                        infoSinApartamentos: () => {
                            const info = document.createElement("P")
                            info.textContent = "Añade algún apartamento."
                        },
                        componentes: {
                            pasarelaSelectorDia: function (e) {
                                casaVitini.ui.componentes.calendario.calendarioCompartido.seleccionarDia(e)
                                const area = document.querySelector("[contenedor=descuentos] [area=descuentosPorRango]")
                                const contenedorPorDiasDentro = area.querySelector("[contenedorPorRango=porDiasDelRango]")
                                const fechaInicioRango = area.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                                const fechaFinalRango = area.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                                contenedorPorDiasDentro.innerHTML = null
                                if (fechaInicioRango && fechaFinalRango) {



                                    const fechas = casaVitini.utilidades.conversor.extraerFechasInternas(fechaInicioRango, fechaFinalRango)

                                    for (const fecha of fechas) {
                                        const selectorDiaRenderizado = contenedorPorDiasDentro.querySelector(`[instanciaUID="${fecha}"]`)
                                        if (!selectorDiaRenderizado) {
                                            const contenedorDia = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.componentes.constructorDiaUI({
                                                fecha: fecha
                                            })
                                            contenedorPorDiasDentro.appendChild(contenedorDia)
                                        }
                                    }
                                } else {
                                    const info = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.infoInicialSinApartametno()
                                    contenedorPorDiasDentro.appendChild(info)
                                }

                            },
                            controladorUI: (data) => {
                                const contenedorIDV = data.contenedorIDV
                                const areaDescuentosPorRano = document.querySelector("[contenedor=descuentos]").querySelector("[area=descuentosPorRango]")
                                const selectorContenedores = areaDescuentosPorRano.querySelectorAll("[contenedorPorRango]")

                                selectorContenedores.forEach((contenedor) => {
                                    contenedor.classList.add("estadoInicialInvisible")
                                })
                                areaDescuentosPorRano.querySelector(`[contenedorPorRango=${contenedorIDV}]`).classList.remove("estadoInicialInvisible")
                            },
                            constructorDiaUI: (data) => {

                                const fecha = data.fecha
                                const tipoDescuento = data.tipoDescuento
                                const fechaDia_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fecha)

                                const contenedorDia = document.createElement("div")
                                contenedorDia.classList.add("contenedorDia")
                                contenedorDia.setAttribute("fechaDelDia", fecha)
                                contenedorDia.setAttribute("contenedor", "dia")
                                contenedorDia.setAttribute("instanciaUID", fecha)

                                const fechaDelDiaUI = document.createElement("p")
                                fechaDelDiaUI.classList.add("texto", "textoCentrado", "negrita", "padding6")
                                fechaDelDiaUI.innerHTML = fechaDia_humana
                                contenedorDia.appendChild(fechaDelDiaUI)

                                const selectorEnDia = document.createElement("select");
                                selectorEnDia.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                                selectorEnDia.setAttribute("campoOferta", "contextoAplicacion");
                                selectorEnDia.addEventListener("change", (e) => {
                                    const areaDia = e.target.closest("[contenedor=dia]")
                                    const conteneodrIDV = e.target.value
                                    const selectoresContenedor = areaDia.querySelectorAll("[contenedorDelDia")
                                    for (const contenedor of selectoresContenedor) {
                                        contenedor.classList.add("estadoInicialInvisible")
                                    }
                                    areaDia.querySelector(`[contenedorDelDia="${conteneodrIDV}"]`).classList.remove("estadoInicialInvisible")
                                })
                                const opcionesSelector = [{
                                    nombre: "Determina, dentro de este día, cómo se aplica un descuento al neto del día o por apartamentos del día.",
                                    inicial: "si",
                                }, {
                                    nombre: "Aplicar descuento al total neto del día.",
                                    descuentoIDV: "netoPorDia",
                                }, {
                                    nombre: "Aplicar descuentos individuales a los apartamientos del día.",
                                    descuentoIDV: "netoPorApartamentoDelDia",
                                }]

                                for (const opcion of opcionesSelector) {
                                    const nombre = opcion.nombre
                                    const inicial = opcion.inicial
                                    const descuentoIDV = opcion.descuentoIDV
                                    const opcionUI = document.createElement("option")
                                    if (inicial === "si") {
                                        opcionUI.selected = true;
                                        opcionUI.disabled = true;
                                    } else {
                                        opcionUI.value = descuentoIDV
                                    }
                                    opcionUI.textContent = nombre
                                    selectorEnDia.appendChild(opcionUI)
                                    contenedorDia.appendChild(selectorEnDia)
                                }
                                if (tipoDescuento) {
                                    selectorEnDia.value = tipoDescuento
                                }
                                const totalNetoPorDiaUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.porDiasDelRango.totalNetoPorDiaUI({
                                    instanciaUID: fecha
                                })
                                contenedorDia.appendChild(totalNetoPorDiaUI)

                                const totalNetoPorApartametnosDelDiaUI = casaVitini.administracion.gestion_de_ofertas.componenteUI.descuentosUI.porRango.porDiasDelRango.totalNetoPorApartamentosDelDiaUI({
                                    instanciaUID: fecha
                                })
                                contenedorDia.appendChild(totalNetoPorApartametnosDelDiaUI)
                                return contenedorDia
                            }
                        }
                    }
                },
                controladorDescuentos: (data) => {
                    const descuentoIDV = data.descuentoIDV
                    const areaDescuentosUI = document.querySelector("[contenedor=descuentos]")
                    const selectorDescuentosUI = areaDescuentosUI.querySelectorAll("[descuentoIDV]")
                    selectorDescuentosUI.forEach((descuentoUI) => {
                        descuentoUI.classList.add("estadoInicialInvisible")
                    })
                    areaDescuentosUI.querySelector(`[descuentoIDV="${descuentoIDV}"]`)?.classList.remove("estadoInicialInvisible")
                }

            },
            utilidades: {
                constructorObjeto: () => {

                    const nombreOferta = document.querySelector("[campoOferta=nombreOferta]").value
                    const fechaInicio_ISO = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinal_ISO = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    const zonaIDV = document.querySelector("[campo=zonaIDV]").value

                    const contenedorCondiciones = document.querySelector("[contenedor=condiciones]")

                    const oferta = {
                        nombreOferta,
                        zonaIDV,
                        entidadIDV: "reserva",
                        fechaInicio: fechaInicio_ISO,
                        fechaFinal: fechaFinal_ISO,
                        condicionesArray: [],
                        descuentosJSON: {}
                    }
                    const condiciones = contenedorCondiciones.querySelectorAll(`[zonaOferta]`)
                    condiciones.forEach((espacioCondicion) => {
                        const tipoCondicion = espacioCondicion.getAttribute("zonaOferta")
                        const estructuraConficion = {}
                        if (tipoCondicion === "porNumeroDeApartamentos") {
                            const tipoConteo = espacioCondicion.querySelector("[campoOferta=tipoConteo]").value
                            const numeroDeApartamentos = espacioCondicion.querySelector("[campoOferta=numeroDeApartamentos]").value

                            estructuraConficion.tipoCondicion = tipoCondicion
                            estructuraConficion.tipoConteo = tipoConteo
                            estructuraConficion.numeroDeApartamentos = numeroDeApartamentos

                            oferta.condicionesArray.push(estructuraConficion)
                        } else if (tipoCondicion === "porApartamentosEspecificos") {
                            estructuraConficion.tipoCondicion = tipoCondicion
                            const tipoDeEspecificidad = espacioCondicion.querySelector("[campo=tipoDeEspecificidad]").value
                            estructuraConficion.tipoDeEspecificidad = tipoDeEspecificidad
                            estructuraConficion.apartamentos = []

                            const apartamentosSeleccionados = espacioCondicion.querySelectorAll("[apartamentoSeleccionado]")
                            apartamentosSeleccionados.forEach((apartamento) => {
                                const apartamentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                                estructuraConficion.apartamentos.push({
                                    apartamentoIDV: apartamentoIDV
                                })
                            })
                            oferta.condicionesArray.push(estructuraConficion)

                        } else if (tipoCondicion === "porDiasDeAntelacion") {
                            const tipoConteo = espacioCondicion.querySelector("[campoOferta=tipoConteo]").value
                            const numeroDeDias = espacioCondicion.querySelector("[campoOferta=numeroDeDias]").value

                            estructuraConficion.tipoCondicion = tipoCondicion
                            estructuraConficion.tipoConteo = tipoConteo
                            estructuraConficion.numeroDeDias = numeroDeDias

                            oferta.condicionesArray.push(estructuraConficion)
                        } else if (tipoCondicion === "porDiasDeReserva") {
                            const tipoConteo = espacioCondicion.querySelector("[campoOferta=tipoConteo]").value
                            const numeroDeDias = espacioCondicion.querySelector("[campoOferta=numeroDeDias]").value

                            estructuraConficion.tipoCondicion = tipoCondicion
                            estructuraConficion.tipoConteo = tipoConteo
                            estructuraConficion.numeroDeDias = numeroDeDias
                            oferta.condicionesArray.push(estructuraConficion)

                        } else if (tipoCondicion === "conFechaCreacionEntreRango") {
                            estructuraConficion.tipoCondicion = tipoCondicion
                            oferta.condicionesArray.push(estructuraConficion)
                        } else if (tipoCondicion === "conFechaEntradaEntreRango") {
                            estructuraConficion.tipoCondicion = tipoCondicion

                            const fechaInicioRango_ISO = espacioCondicion.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                            const fechaFinalRango_ISO = espacioCondicion.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                            estructuraConficion.fechaInicioRango_ISO = fechaInicioRango_ISO
                            estructuraConficion.fechaFinalRango_ISO = fechaFinalRango_ISO


                            oferta.condicionesArray.push(estructuraConficion)

                        } else if (tipoCondicion === "conFechaSalidaEntreRango") {
                            estructuraConficion.tipoCondicion = tipoCondicion

                            const fechaInicioRango_ISO = espacioCondicion.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                            const fechaFinalRango_ISO = espacioCondicion.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                            estructuraConficion.fechaInicioRango_ISO = fechaInicioRango_ISO
                            estructuraConficion.fechaFinalRango_ISO = fechaFinalRango_ISO

                            oferta.condicionesArray.push(estructuraConficion)

                        } else if (tipoCondicion === "porRangoDeFechas") {
                            estructuraConficion.tipoCondicion = tipoCondicion

                            const fechaInicioRango_ISO = espacioCondicion.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                            const fechaFinalRango_ISO = espacioCondicion.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                            estructuraConficion.fechaInicioRango_ISO = fechaInicioRango_ISO
                            estructuraConficion.fechaFinalRango_ISO = fechaFinalRango_ISO
                            oferta.condicionesArray.push(estructuraConficion)

                        } else if (tipoCondicion === "porCodigoDescuento") {
                            estructuraConficion.tipoCondicion = tipoCondicion
                            const codigoDescuento = espacioCondicion.querySelector("[campo=codigoDescuento]").value
                            estructuraConficion.codigoDescuento = codigoDescuento
                            oferta.condicionesArray.push(estructuraConficion)

                        } else {
                            const error = "No se reconoce el tipo de oferta"
                            return casaVitini.ui.vistas.advertenciaInmersiva(error)
                        }
                    })


                    const contenedorDescuentos = document.querySelector("[contenedor=descuentos]")
                    const tipoDescuento = contenedorDescuentos.querySelector("[componente=tipoDescuento]")?.value
                    if (tipoDescuento === "totalNeto") {
                        const descuentoTotal = contenedorDescuentos.querySelector(`[descuentoIDV="${tipoDescuento}"] [campoOferta=descuentoGlobal]`).value
                        const tipoAplicacion = contenedorDescuentos.querySelector(`[descuentoIDV="${tipoDescuento}"] [campoOferta=tipoDescuento]`).value

                        const estructuraDescuento = {
                            tipoDescuento: tipoDescuento,
                            tipoAplicacion: tipoAplicacion,
                            descuentoTotal: descuentoTotal
                        }
                        oferta.descuentosJSON = estructuraDescuento
                    } else if (tipoDescuento === "mismoDescuentoParaCadaApartamento") {
                        const descuentoTotal = contenedorDescuentos.querySelector(`[descuentoIDV="${tipoDescuento}"] [campoOferta=descuentoGlobal]`).value
                        const tipoAplicacion = contenedorDescuentos.querySelector(`[descuentoIDV="${tipoDescuento}"] [campoOferta=tipoDescuento]`).value

                        const estructuraDescuento = {
                            tipoDescuento: tipoDescuento,
                            tipoAplicacion: tipoAplicacion,
                            descuentoTotal: descuentoTotal
                        }
                        oferta.descuentosJSON = estructuraDescuento
                    } else if (tipoDescuento === "individualPorApartamento") {
                        const apartamentos = []

                        const apartamentosSeleccionados = contenedorDescuentos.querySelector("[descuentoidv=individualPorApartamento]").querySelectorAll("[apartamentoSeleccionado]")
                        apartamentosSeleccionados.forEach((apartamento) => {
                            const apartamentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                            const descuentoTotal = apartamento.querySelector("[campoapartamentoseleccionado=descuentoTotal]").value
                            const tipoDescuento = apartamento.querySelector("[campoapartamentoseleccionado=tipoDescuento]").value

                            const estructuraApartamento = {
                                apartamentoIDV,
                                descuentoTotal,
                                tipoAplicacion: tipoDescuento
                            }
                            apartamentos.push(estructuraApartamento)

                        })
                        const estructuraDescuento = {
                            tipoDescuento: tipoDescuento,
                            apartamentos: apartamentos
                        }
                        oferta.descuentosJSON = estructuraDescuento

                    } else if (tipoDescuento === "porRango") {
                        const area = contenedorDescuentos.querySelector("[area=descuentosPorRango]")
                        const fechaInicioRango_ISO = area.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                        const fechaFinalRango_ISO = area.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                        const subTipoDescuento = area.querySelector("[componente=subTipoDescuento]").value


                        const estructuraDescuento = {
                            tipoDescuento: tipoDescuento,
                            fechaInicioRango_ISO: fechaInicioRango_ISO,
                            fechaFinalRango_ISO: fechaFinalRango_ISO,
                            subTipoDescuento: subTipoDescuento,
                        }
                        oferta.descuentosJSON = estructuraDescuento

                        if (subTipoDescuento === "totalNetoPorRango") {
                            const descuentoTotal = area.querySelector("[campoOferta=descuentoGlobal]").value
                            const tipoAplicacion = area.querySelector("[campoOferta=tipoDescuento]").value
                            estructuraDescuento.tipoAplicacion = tipoAplicacion
                            estructuraDescuento.descuentoTotal = descuentoTotal
                        }

                        if (subTipoDescuento === "porDiasDelRango") {
                            estructuraDescuento.descuentoPorDias = []

                            const contenedorPorDiasPorRango = area.querySelectorAll("[contenedor=dia]")
                            contenedorPorDiasPorRango.forEach((dia) => {

                                const fechaDelDia = dia.getAttribute("fechaDelDia")

                                const estructuraDescuentoPorDia = {
                                    fecha: fechaDelDia
                                }
                                const tipoDescuentoEnElDia = dia.querySelector("[campoOferta=contextoAplicacion]").value
                                estructuraDescuentoPorDia.tipoDescuento = tipoDescuentoEnElDia


                                if (tipoDescuentoEnElDia === "netoPorDia") {
                                    const descuentoTotal = dia.querySelector("[campoOferta=descuentoGlobal]").value
                                    const tipoAplicacion = dia.querySelector("[campoOferta=tipoDescuento]").value

                                    estructuraDescuentoPorDia.tipoAplicacion = tipoAplicacion
                                    estructuraDescuentoPorDia.descuentoTotal = descuentoTotal

                                    estructuraDescuento.descuentoPorDias.push(estructuraDescuentoPorDia)

                                } else if (tipoDescuentoEnElDia === "netoPorApartamentoDelDia") {
                                    const contenedorApartamentos = dia.querySelectorAll("[apartamentoSeleccionado]")
                                    estructuraDescuentoPorDia.apartamentos = []

                                    contenedorApartamentos.forEach((apartamento) => {
                                        const aparatmentoIDV = apartamento.getAttribute("apartamentoSeleccionado")
                                        const tipoAplicacion = apartamento.querySelector("[campoApartamentoSeleccionado=tipoDescuento]").value
                                        const descuentoTotal = apartamento.querySelector("[campoApartamentoSeleccionado=descuentoTotal]").value

                                        const descuentoPorApartamento = {
                                            apartamentoIDV: aparatmentoIDV,
                                            tipoAplicacion: tipoAplicacion,
                                            descuentoTotal: descuentoTotal,
                                        }

                                        estructuraDescuentoPorDia.apartamentos.push(descuentoPorApartamento)

                                    })
                                    estructuraDescuento.descuentoPorDias.push(estructuraDescuentoPorDia)

                                }
                            })
                        }
                    }
                    return oferta
                },
            }
        },
        comportamiento_de_precios: {
            arranque: async () => {
                const main = document.querySelector("main")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                if (comandoInicial === "comportamiento_de_precios" && Object.keys(granuladoURL.parametros).length === 0) {

                    main.setAttribute("zonaCSS", "administracion/comportamiento_de_precios")
                    casaVitini.administracion.comportamiento_de_precios.portadaUI()
                } else if (granuladoURL.parametros.comportamiento) {

                    main.setAttribute("zonaCSS", "administracion/comportamiento_de_precios/comportamientoUI")
                    casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.UI(granuladoURL.parametros.comportamiento)
                } else {

                    const info = {
                        titulo: "No existe ninguna reserva con ese identificador",
                        descripcion: "No existe ningún comportamiento de precio con este identificador."
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                }

            },
            portadaUI: async () => {
                const espacioOfertas = document.querySelector("[componente=espacioComportamiento]")
                const contenedor = document.createElement("div")
                contenedor.classList.add("gestionDeOfertasContenedor")
                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("gestionDeOfertasContenedorBotones")
                const botonCrearOfertas = document.createElement("a")
                botonCrearOfertas.classList.add("gestionDeOfertasBotonCrearOferta")
                botonCrearOfertas.textContent = "Crear un comportamiento de precios"
                botonCrearOfertas.setAttribute("href", "/administracion/comportamiento_de_precios/crear_comportamiento")
                botonCrearOfertas.setAttribute("vista", "/administracion/comportamiento_de_precios/crear_comportamiento")
                botonCrearOfertas.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                contenedorBotones.appendChild(botonCrearOfertas)
                contenedor.appendChild(contenedorBotones)
                const contenedorOfertas = document.createElement("div")
                contenedorOfertas.classList.add("comportamintoDePreciosSuperBloque")
                contenedorOfertas.setAttribute("componente", "espacioListaOfertas")
                contenedor.appendChild(contenedorOfertas)
                espacioOfertas.appendChild(contenedor)
                const transaccion = {
                    zona: "administracion/comportamientoDePrecios/listaComportamientosPrecios"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const espacioListaOfertas = document.querySelector("[componente=espacioListaOfertas]")
                    const comportamientosCondigurados = respuestaServidor?.comportamientosDePrecio
                    if (comportamientosCondigurados.length === 0) {
                        const ofertaUI = document.createElement("a")
                        ofertaUI.classList.add("ofertaUINoHay")
                        const tituloOferta = document.createElement("p")
                        tituloOferta.classList.add("ofertaUITituloOferta")
                        tituloOferta.textContent = "No hay ningún comportamiento de precios configurado.Pulsa en el botón para crear un nuevo comportamiento de precio para crear uno."
                        ofertaUI.appendChild(tituloOferta)
                        espacioListaOfertas.appendChild(ofertaUI)
                        return
                    } else if (comportamientosCondigurados.length > 0) {


                        const comportamientosUI = (data) => {
                            const contenedor = data.contenedor
                            const tipo = contenedor.tipo
                            const comportamientoUID = data.comportamientoUID
                            const nombreComportamiento = data.nombreComportamiento
                            const estadoIDV = data.estadoIDV

                            const objetoEstado = {
                                activado: "Comportamiento activado",
                                desactivado: "Comportamiento desactivado"
                            }

                            const definicionTipo = {
                                porRango: "Basado en el rango de vigencia del comportamiento.",
                                porDias: "Basado en días de la semana.",
                                porCreacion: "Basado en el rango de vigencia del comportamiento y el rango de creación."

                            }

                            const descripcionObjeto = {
                                porRango: "Este comportamiento solo se aplica a los días con noche que estén dentro del rango especificado.",
                                porDias: "Este comportamiento se aplica a los días con noche de la semana específicos.Este comportamiento se aplicará repetidamente hasta que se desactive o elimine.",
                                porCreacion: "Este comportamiento solo se aplica a los días con noche que estén dentro del rango especificado.Siempre que la reserva se halla hecha entre los rangos de creación especificados."

                            }

                            const comportamientoUI = document.createElement("a")
                            comportamientoUI.classList.add("comportamientoUI")
                            comportamientoUI.setAttribute("comportamientoUI", comportamientoUID)
                            comportamientoUI.setAttribute("href", "/administracion/comportamiento_de_precios/comportamiento:" + comportamientoUID)
                            comportamientoUI.setAttribute("vista", "/administracion/comportamiento_de_precios/comportamiento:" + comportamientoUID)
                            comportamientoUI.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.traductorCambioVista)

                            const contenedorTituloEstado = document.createElement("div")
                            contenedorTituloEstado.classList.add("contenedorTituloEstado")

                            const tituloComportamiento = document.createElement("p")
                            tituloComportamiento.classList.add("ofertaUITituloOferta")
                            tituloComportamiento.classList.add("negrita")
                            tituloComportamiento.textContent = nombreComportamiento
                            contenedorTituloEstado.appendChild(tituloComportamiento)

                            const estadoComportamiento = document.createElement("p")
                            estadoComportamiento.classList.add("ofertaUITituloOferta")
                            estadoComportamiento.textContent = objetoEstado[estadoIDV]
                            contenedorTituloEstado.appendChild(estadoComportamiento)


                            const definicionTipoUI = document.createElement("p")
                            definicionTipoUI.classList.add("ofertaUITituloOferta")
                            definicionTipoUI.textContent = definicionTipo[tipo]
                            contenedorTituloEstado.appendChild(definicionTipoUI)

                            comportamientoUI.appendChild(contenedorTituloEstado)

                            const descripcion = document.createElement("p")
                            descripcion.classList.add("contenedorTituloEstado")
                            descripcion.textContent = descripcionObjeto[tipo]
                            comportamientoUI.appendChild(descripcion)


                            if (tipo === "porRango") {
                                const fechaInicio = contenedor.fechaInicio
                                const fechaFinal = contenedor.fechaFinal

                                const contenedorGlobalOferta = document.createElement("div")
                                contenedorGlobalOferta.classList.add("ofertaUIContenedorComportamiento")

                                const contenedorDetalleOferta = document.createElement("div")
                                contenedorDetalleOferta.classList.add("ofertaUIContenedorDetalles")

                                const fechaInicioContenedor = document.createElement("div")
                                fechaInicioContenedor.classList.add("comportamientoUIFechaContenedor")
                                const tituloFechaInicio = document.createElement("div")
                                tituloFechaInicio.classList.add("ofertaUITituloFecha")
                                tituloFechaInicio.textContent = "Fecha de inicio del comportamiento"
                                fechaInicioContenedor.appendChild(tituloFechaInicio)
                                const datoFechaInicio = document.createElement("div")
                                datoFechaInicio.classList.add("ofertaUIDatoFecha")
                                datoFechaInicio.textContent = fechaInicio
                                fechaInicioContenedor.appendChild(datoFechaInicio)
                                contenedorGlobalOferta.appendChild(fechaInicioContenedor)
                                const fechaFinContenedor = document.createElement("div")
                                fechaFinContenedor.classList.add("comportamientoUIFechaContenedor")
                                const tituloFechaFin = document.createElement("div")
                                tituloFechaFin.classList.add("ofertaUITituloFecha")
                                tituloFechaFin.textContent = "Fecha de fin  del comportamiento"
                                fechaFinContenedor.appendChild(tituloFechaFin)
                                const datoFechaFin = document.createElement("div")
                                datoFechaFin.classList.add("ofertaUIDatoFecha")
                                datoFechaFin.textContent = fechaFinal
                                fechaFinContenedor.appendChild(datoFechaFin)
                                contenedorGlobalOferta.appendChild(fechaFinContenedor)
                                comportamientoUI.appendChild(contenedorGlobalOferta)

                                return comportamientoUI
                            } else if (tipo === "porDias") {
                                const diasArray = contenedor.dias
                                const numeroDedias = diasArray.length

                                const contenedorGlobalOferta = document.createElement("div")
                                contenedorGlobalOferta.classList.add("contenedorDiasSelecionados")
                                contenedorGlobalOferta.style.gridTemplateColumns = `repeat(${numeroDedias}, 1fr)`


                                const contenedorDetalleOferta = document.createElement("div")
                                contenedorDetalleOferta.classList.add("ofertaUIContenedorDetalles")


                                const diasObjeto = {
                                    lunes: "Lunes",
                                    martes: "Martes",
                                    miercoles: "Miércoles",
                                    jueves: "Jueves",
                                    viernes: "Viernes",
                                    sabado: "Sábado",
                                    domingo: "Domingo"
                                }

                                for (const dia of diasArray) {
                                    const contenedorDia = document.createElement("div")
                                    contenedorDia.classList.add("diaSeleciconadoCelda")
                                    contenedorDia.textContent = diasObjeto[dia]
                                    contenedorGlobalOferta.appendChild(contenedorDia)

                                }
                                comportamientoUI.appendChild(contenedorGlobalOferta)
                                return comportamientoUI


                            } else if (tipo === "porCreacion") {
                                const fechaFinal_creacionReserva = contenedor.fechaFinal_creacionReserva
                                const fechaInicio_creacionReserva = contenedor.fechaInicio_creacionReserva

                                const fechaInicio = contenedor.fechaInicio
                                const fechaFinal = contenedor.fechaFinal

                                const contenedorGlobalOferta = document.createElement("div")
                                contenedorGlobalOferta.classList.add("ofertaUIContenedorComportamiento")

                                const fechaInicioContenedor = document.createElement("div")
                                fechaInicioContenedor.classList.add("comportamientoUIFechaContenedor")
                                const tituloFechaInicio = document.createElement("div")
                                tituloFechaInicio.classList.add("ofertaUITituloFecha")
                                tituloFechaInicio.textContent = "Fecha de inicio del comportamiento"
                                fechaInicioContenedor.appendChild(tituloFechaInicio)
                                const datoFechaInicio = document.createElement("div")
                                datoFechaInicio.classList.add("ofertaUIDatoFecha")
                                datoFechaInicio.textContent = fechaInicio
                                fechaInicioContenedor.appendChild(datoFechaInicio)
                                contenedorGlobalOferta.appendChild(fechaInicioContenedor)
                                const fechaFinContenedor = document.createElement("div")
                                fechaFinContenedor.classList.add("comportamientoUIFechaContenedor")
                                const tituloFechaFin = document.createElement("div")
                                tituloFechaFin.classList.add("ofertaUITituloFecha")
                                tituloFechaFin.textContent = "Fecha de fin del comportamiento"
                                fechaFinContenedor.appendChild(tituloFechaFin)
                                const datoFechaFin = document.createElement("div")
                                datoFechaFin.classList.add("ofertaUIDatoFecha")
                                datoFechaFin.textContent = fechaFinal
                                fechaFinContenedor.appendChild(datoFechaFin)
                                contenedorGlobalOferta.appendChild(fechaFinContenedor)
                                comportamientoUI.appendChild(contenedorGlobalOferta)


                                const infoCreacion = document.createElement("div")
                                infoCreacion.textContent = "El rango de creacion determina que la fecah de creacion de una reserva, debe de estar dentro de este rango para que se aplique el comportamiento de precio."
                                comportamientoUI.appendChild(infoCreacion)


                                const contenedorRangoCreacion = document.createElement("div")
                                contenedorRangoCreacion.classList.add("ofertaUIContenedorComportamiento")

                                const fechaInicioCreacionContenedor = document.createElement("div")
                                fechaInicioCreacionContenedor.classList.add("comportamientoUIFechaContenedor")

                                const tituloFechaInicioCreacion = document.createElement("div")
                                tituloFechaInicioCreacion.classList.add("ofertaUITituloFecha")
                                tituloFechaInicioCreacion.textContent = "Fecha de inicio del rango de creación"
                                fechaInicioCreacionContenedor.appendChild(tituloFechaInicioCreacion)

                                const datoFechaInicioCreacion = document.createElement("div")
                                datoFechaInicioCreacion.classList.add("ofertaUIDatoFecha")
                                datoFechaInicioCreacion.textContent = fechaFinal_creacionReserva
                                fechaInicioCreacionContenedor.appendChild(datoFechaInicioCreacion)
                                contenedorRangoCreacion.appendChild(fechaInicioCreacionContenedor)

                                const fechaFinContenedorCreacion = document.createElement("div")
                                fechaFinContenedorCreacion.classList.add("comportamientoUIFechaContenedor")

                                const tituloFechaFinCreacion = document.createElement("div")
                                tituloFechaFinCreacion.classList.add("ofertaUITituloFecha")
                                tituloFechaFinCreacion.textContent = "Fecha de fin del rango de creación"
                                fechaFinContenedorCreacion.appendChild(tituloFechaFinCreacion)

                                const datoFechaFinCreacion = document.createElement("div")
                                datoFechaFinCreacion.classList.add("ofertaUIDatoFecha")
                                datoFechaFinCreacion.textContent = fechaInicio_creacionReserva
                                fechaFinContenedorCreacion.appendChild(datoFechaFinCreacion)

                                contenedorRangoCreacion.appendChild(fechaFinContenedorCreacion)
                                comportamientoUI.appendChild(contenedorRangoCreacion)

                                return comportamientoUI
                            }

                        }

                        comportamientosCondigurados.forEach((detallesComportamiento) => {
                            const comportamientoUI = comportamientosUI(detallesComportamiento)

                            espacioListaOfertas.appendChild(comportamientoUI)
                        })
                    }
                }
            },
            crearComportamiento: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/comportamiento_de_precios/comportamientoUI")
                    const selector = document.querySelector("[componente=espacioComportamiento]")

                    casaVitini.administracion.comportamiento_de_precios.detalleUI("crearOferta")

                },
                desplegarOpcionesOferta: (opcionOferta) => {
                    const tipoOferta = opcionOferta.target.closest("[tipoOferta]").getAttribute("tipoOferta")
                    const selectorZonaOferta = document.querySelectorAll("[zonaOferta]")
                    selectorZonaOferta.forEach((zonaOferta) => {
                        zonaOferta.classList.add("estadoInicialInvisible")
                    })
                    document.querySelector(`[zonaOferta=${tipoOferta}]`).classList.remove("estadoInicialInvisible")
                    const selectoresBotonDeplegarOpcionesOferta = document.querySelectorAll("[tipoOferta]")
                    selectoresBotonDeplegarOpcionesOferta.forEach((boton) => {
                        boton.removeAttribute("style")
                    })
                    opcionOferta.target.closest("[tipoOferta]").style.background = "blue"
                    opcionOferta.target.closest("[tipoOferta]").style.color = "white"
                },
                crearComortamientoConfirmar: async function () {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando comportamiento de precio..."

                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta({
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    })
                    const contenedorComportamiento = casaVitini.administracion.comportamiento_de_precios.constructorObjeto()

                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/crearComportamiento",
                        ...contenedorComportamiento
                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {

                        if (respuestaServidor.comportamientosEnConflicto) {
                            const comportamientosEnConflictoUI = casaVitini.administracion.comportamiento_de_precios.compomentesUI.comportamientosEnClonfictoUI(respuestaServidor)

                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            document.querySelector("main").appendChild(ui)
                            const constructor = ui.querySelector("[componente=constructor]")
                            const contenedor = ui.querySelector("[componente=contenedor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = `Comportamientos de precio en conflicto`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = respuestaServidor?.error

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = "Aceptar y volver al comportamiento"
                            botonAceptar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.remove()

                            contenedor.appendChild(comportamientosEnConflictoUI)
                        } else {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                        }


                    }
                    if (respuestaServidor?.ok) {
                        const comportamientoUID = respuestaServidor?.comportamientoUID
                        const vista = `/administracion/comportamiento_de_precios/comportamiento:${comportamientoUID}`
                        const navegacion = {
                            vista: vista,

                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                },
                apartamentosDisponibles: async (data) => {


                    const apartamento = data.e
                    const destino = data.destino

                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    apartamento.stopPropagation()
                    const selectorMenuObsoleto = document.querySelector("[comMenu=menuVolatilApartamentoDisponbiles]")

                    if (selectorMenuObsoleto) {
                        selectorMenuObsoleto.remove()

                    }
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const alturaDinamica = apartamento.target.getBoundingClientRect().bottom;
                    const horizontalDinamico = apartamento.target.getBoundingClientRect().left;
                    const anchoDinamico = apartamento.target.getBoundingClientRect().width;
                    document.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.ocultarMenusVolatiles)
                    const apartamentosUI = document.createElement("div")
                    apartamentosUI.classList.add("crearOfertaMenuVolatilAnadirApartamento")
                    apartamentosUI.setAttribute("comMenu", "menuVolatilApartamentoDisponbiles")
                    apartamentosUI.setAttribute("componente", "menuVolatil")
                    apartamentosUI.setAttribute("instanciaUID", instanciaUID)
                    apartamentosUI.style.top = (alturaDinamica + 6) + "px"
                    apartamentosUI.style.left = (horizontalDinamico) + "px"
                    apartamentosUI.style.maxWidth = 500 + "px"
                    apartamentosUI.textContent = "Obteniendo apartamentos..."
                    document.querySelector("main").appendChild(apartamentosUI)
                    const transaccion = {
                        zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[componente=menuVolatil][instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    if (respuestaServidor?.error) {
                        instanciaRenderizada.remove()
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        instanciaRenderizada.innerHTML = null
                        const apartamentosDisponibles = respuestaServidor?.ok
                        apartamentosDisponibles.forEach((apartamentoDisponible) => {
                            const apartamentoIDV = apartamentoDisponible.apartamentoIDV
                            const apartamentoUI = apartamentoDisponible.apartamentoUI
                            const estadoUI = apartamentoDisponible.estadoUI
                            const apartamentoDetallesUI = document.createElement("div")
                            apartamentoDetallesUI.classList.add("crearOfertaApartamentoUI")
                            apartamentoDetallesUI.addEventListener("click", (e) => {
                                casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarApartamento({
                                    e,
                                    destino: destino
                                })
                            })
                            apartamentoDetallesUI.setAttribute("apartamentoIDV", apartamentoIDV)
                            apartamentoDetallesUI.setAttribute("apartamentoUI", apartamentoUI)
                            apartamentoDetallesUI.setAttribute("apartamentoComoOpcion", apartamentoIDV)
                            const apartamentoTitulo = document.createElement("p")
                            apartamentoTitulo.classList.add("crearOfertaApartamentoTItulo")
                            apartamentoTitulo.textContent = apartamentoUI
                            apartamentoDetallesUI.appendChild(apartamentoTitulo)
                            const apartamentoEstadoUI = document.createElement("p")
                            apartamentoEstadoUI.classList.add("crearOfertaApartamentoEstado")
                            apartamentoEstadoUI.setAttribute("estadouI", estadoUI)
                            apartamentoEstadoUI.textContent = estadoUI
                            apartamentoDetallesUI.appendChild(apartamentoEstadoUI)
                            instanciaRenderizada.appendChild(apartamentoDetallesUI)
                        })
                        const selectorApartamentoYaRenderizado = document.querySelectorAll(`[apartamentoComoOpcion]`)
                        if (selectorApartamentoYaRenderizado.length === 0) {
                            const info = document.createElement("p")
                            info.classList.add("crearApartamentoInfoSinApartamento")
                            info.setAttribute("componente", "infoSinApartamento")
                            info.textContent = "Todos los apartamentos disponibles están insertados en la oferta."
                            instanciaRenderizada.appendChild(info)
                        }
                    }
                },
                ocultarMenusVolatiles: (menuVolatil) => {
                    let componente = menuVolatil?.target.getAttribute("componente")
                    if (componente === "menuDesplegable") {

                    }
                    if (componente !== "menuVolatil") {
                        let selectorMenusVolatiles = document.querySelectorAll("[componente=menuVolatil]")
                        document.removeEventListener("click", casaVitini.administracion.gestion_de_ofertas.crearOferta.ocultarMenusVolatiles)
                        selectorMenusVolatiles.forEach(menuVolatil => {
                            menuVolatil.remove()
                        })
                    }
                },
                insertarApartamento: (data) => {
                    const apartamento = data.e
                    const destino = data.destino
                    const apartamentoIDV = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoIDV")
                    const apartamentoUI = apartamento.target.closest("[apartamentoIDV]").getAttribute("apartamentoUI")
                    const detallesApartamento = {
                        apartamentoIDV: apartamentoIDV,
                        apartamentoUI: apartamentoUI
                    }

                    const opciones = {
                        apartamentoIDV: apartamentoIDV,
                        apartamentoUI: apartamentoUI
                    }
                    const descuentoDedicadoUI = casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarOpcionesApartamento(opciones)


                    const zonaDescuentoDedicados = document.querySelector(destino)

                    zonaDescuentoDedicados.style.display = "grid"
                    zonaDescuentoDedicados.appendChild(descuentoDedicadoUI)
                },
                insertarApartamentoUI: async (detallesApartmento) => {
                    let apartamentoIDV = detallesApartmento.apartamentoIDV
                    let apartamentoUI = detallesApartmento.apartamentoUI
                    let apartamentoSeleccionadoUI = document.createElement("div")
                    apartamentoSeleccionadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                    apartamentoSeleccionadoUI.setAttribute("apartamentoSeleccionado", apartamentoIDV)
                    let tituloApartamento = document.createElement("div")
                    tituloApartamento.classList.add("crearOfertaApartamentoSeleccionadoUITitulo")
                    tituloApartamento.textContent = apartamentoUI
                    apartamentoSeleccionadoUI.appendChild(tituloApartamento)
                    let botonEliminarApartamento = document.createElement("div")
                    botonEliminarApartamento.classList.add("crearOfertaBoton")
                    botonEliminarApartamento.textContent = "Eliminar apartamento333"
                    botonEliminarApartamento.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.crearComportamiento.eliminarApartamenro)
                    apartamentoSeleccionadoUI.appendChild(botonEliminarApartamento)
                    return apartamentoSeleccionadoUI
                },
                insertarOpcionesApartamento: (opcionesApartamento) => {
                    const apartamentoIDV = opcionesApartamento.apartamentoIDV
                    const apartamentoUI = opcionesApartamento.apartamentoUI
                    const cantidad = opcionesApartamento.cantidad ? opcionesApartamento.cantidad : null
                    const simboloIDV = opcionesApartamento.simboloIDV ? opcionesApartamento.simboloIDV : null
                    const descuentoDedicadoUI = document.createElement("div")
                    descuentoDedicadoUI.classList.add("crearOfertaApartamentoSeleccionadoUI")
                    descuentoDedicadoUI.setAttribute("descuentoDedicadoUI", apartamentoUI)
                    descuentoDedicadoUI.setAttribute("descuentoDedicadoIDV", apartamentoIDV)
                    descuentoDedicadoUI.setAttribute("apartamentoSeleccionado", apartamentoIDV)
                    descuentoDedicadoUI.setAttribute("contenedor", "apartamentoDedicado")
                    tituloApartamento = document.createElement("div")
                    tituloApartamento.classList.add("crearOfertaDescuentoDedicadoUITitulo")
                    tituloApartamento.textContent = apartamentoUI
                    descuentoDedicadoUI.appendChild(tituloApartamento)
                    const cantidadUI = document.createElement("input")
                    cantidadUI.classList.add("crearOferDescuentoDedicadoCantidad")
                    cantidadUI.setAttribute("campoApartamentoSeleccionado", "cantidad")
                    cantidadUI.placeholder = "Inserta la cantidad"
                    cantidadUI.value = cantidad
                    descuentoDedicadoUI.appendChild(cantidadUI)
                    const tipoDescuento = document.createElement("select")
                    tipoDescuento.classList.add("crearOfertaDescuentoDedicadoListaTipoDescuento")
                    tipoDescuento.setAttribute("campoApartamentoSeleccionado", "simboloIDV")
                    const opcionPredeterminada = document.createElement("option")
                    if (!simboloIDV) {
                        opcionPredeterminada.selected = true;
                    }
                    opcionPredeterminada.disabled = true;
                    opcionPredeterminada.value = "no"
                    opcionPredeterminada.text = "Selecciona el tipo de comportamiento."
                    tipoDescuento.appendChild(opcionPredeterminada)
                    const opciones = [
                        { value: "aumentoPorcentaje", text: "Aumentar precio por porcentaje." },
                        { value: "aumentoCantidad", text: "Aumentar precio por cantidad." },
                        { value: "reducirCantidad", text: "Reducir precio por cantidad" },
                        { value: "reducirPorcentaje", text: "Reducir precio por porcentaje" },
                        { value: "precioEstablecido", text: "Establecer el precio" }
                    ];
                    for (const opcionData of opciones) {
                        const opcion = document.createElement("option");
                        if (simboloIDV === opcionData.value) {
                            opcion.selected = true;
                        }
                        opcion.value = opcionData.value;
                        opcion.text = opcionData.text;
                        opcion.setAttribute("apartamentoIDV", apartamentoIDV);
                        tipoDescuento.appendChild(opcion);
                    }
                    descuentoDedicadoUI.appendChild(tipoDescuento)
                    const botonEliminarApartamento = document.createElement("div")
                    botonEliminarApartamento.classList.add("crearComportamientoBotonEliminarApartamento")
                    botonEliminarApartamento.textContent = "Eliminar apartamento"

                    botonEliminarApartamento.addEventListener("click", (e) => {
                        const apartamentoRenderizado = e.target.closest("[apartamentoSeleccionado]")
                        const area = e.target.closest("[componente=zonaAnadirApartamento]")
                        apartamentoRenderizado.remove()

                        const conteoApartamentos = area.querySelectorAll(`[apartamentoSeleccionado]`)
                        if (conteoApartamentos.length === 0) {
                            area.querySelector("[componente=infoSinApartamento]").removeAttribute("style")
                        }
                    })
                    descuentoDedicadoUI.appendChild(botonEliminarApartamento)
                    return descuentoDedicadoUI
                },
                eliminarApartamenro: (apartamento) => {
                    let apartamentoIDV = apartamento.target.parentNode.getAttribute("apartamentoSeleccionado")
                    apartamento.target.parentNode.remove()
                    let conteoDescuentoDedicados = document.querySelector("[componente=comportamientoSuperBloque]").querySelectorAll("[descuentoDedicadoUI]")
                    if (conteoDescuentoDedicados.length === 0) {
                        document.querySelector("[componente=infoDescuentoDedicados]").removeAttribute("style")
                        document.querySelector("[componente=comportamientoSuperBloque]").style.display = "flex"
                    }
                },
                opcionesOferta: (opcion) => {
                    let opciones = opcion.target.value

                    let selectorOpciones = document.querySelectorAll("[controladorDesliegue]")
                    selectorOpciones.forEach((opcion) => {
                        opcion.classList.add("estadoInicialInvisible")
                    })

                    let zonaDespliegue
                    if (opciones === "totalNetoApartamentoDedicado") {
                        zonaDespliegue = "descuentosDedicados"
                    }
                    if (opciones === "totalNetoApartmento") {
                        zonaDespliegue = "descuentoGlobal"
                    }
                    if (opciones === "totalNetoReserva") {
                        zonaDespliegue = "descuentoGlobal"
                    }
                    document.querySelector(`[controladorDesliegue="${zonaDespliegue}"]`)?.classList.remove("estadoInicialInvisible")
                },

            },
            detallesComportamiento: {
                UI: async (comportamientoUID) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/detallesComportamiento",
                        comportamientoUID: String(comportamientoUID)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor?.error) {
                        const titulo = document.querySelector(".tituloGris")
                        titulo.textContent = "No existe ningún comportamiento de precio con el identificador: " + comportamientoUID
                        return
                    }
                    if (respuestaServidor?.ok) {
                        const detalles = respuestaServidor?.detallesComportamiento
                        const comportamientoUID = detalles.comportamientoUID
                        const estadoIDV = detalles.estadoIDV
                        const espacioOfertas = document.querySelector("[componente=espacioComportamiento]")
                        espacioOfertas.setAttribute("comportamientoUID", comportamientoUID)
                        espacioOfertas.setAttribute("valoresIniciales", JSON.stringify(detalles))
                        const soloLecturaUI = document.createElement("div")
                        soloLecturaUI.classList.add("editarOfertaSoloLecturaUI")
                        const soloLecturaInfo = document.createElement("p")
                        soloLecturaInfo.classList.add("editarOfertaSoloLecutraInfo")
                        soloLecturaInfo.setAttribute("componente", "soloLecturaInfo")
                        soloLecturaInfo.textContent = "Modo solo lectura"
                        soloLecturaUI.appendChild(soloLecturaInfo)
                        espacioOfertas.appendChild(soloLecturaUI)
                        const ofertaUI = await casaVitini.administracion.comportamiento_de_precios.detalleUI("editarOferta")

                        espacioOfertas.appendChild(ofertaUI)

                        const selectorEstadoComportamiento = document.querySelector("[componente=estadoComportamiento]")
                        if (estadoIDV === "desactivado") {
                            selectorEstadoComportamiento.setAttribute("estado", estadoIDV)
                            selectorEstadoComportamiento.innerHTML = "Comportamiento desactivado"
                            selectorEstadoComportamiento.style.background = "#ff000091"
                        }
                        if (estadoIDV === "activado") {
                            selectorEstadoComportamiento.setAttribute("estado", estadoIDV)
                            selectorEstadoComportamiento.style.background = "#00ff006e"
                            selectorEstadoComportamiento.innerHTML = "Comportamiento activado"
                        }
                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.imprimirDatosEnUI()
                    }
                },
                guardarCambiosComportamiento: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando comportamiento de precio..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const main = document.querySelector("main")
                    const comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                    const contenedorComportamiento = casaVitini.administracion.comportamiento_de_precios.constructorObjeto()

                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/actualizarComportamiento",
                        comportamientoUID: String(comportamientoUID),
                        ...contenedorComportamiento

                    }

                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const comportamientoActualizado = respuestaServidor.comportamientoActualizado
                        const espacioOfertas = document.querySelector("[componente=espacioComportamiento]")
                        espacioOfertas.setAttribute("valoresIniciales", JSON.stringify(comportamientoActualizado))
                        const modo = {
                            modo: "botonCancelarCambios"
                        }
                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.comportamientoModos(modo)

                    }
                },
                comportamientoModos: (modo) => {
                    let botonModo
                    if (modo.target) {
                        botonModo = modo.target.getAttribute("componente")
                    }
                    if (modo.modo) {
                        botonModo = modo.modo
                    }
                    if (botonModo === "botonEditarOferta") {
                        let selectorBotonesEditar = document.querySelectorAll("[componente=botonEditarOferta]")
                        selectorBotonesEditar.forEach((boton) => {
                            boton.classList.add("elementoOcultoInicialmente")
                        })
                        let selectorBotonesGuardarCambios = document.querySelectorAll("[componente=botonGuardarCambios]")
                        selectorBotonesGuardarCambios.forEach((boton) => {
                            boton.classList.remove("elementoOcultoInicialmente")
                        })
                        let selectorBotonesCancelarCambios = document.querySelectorAll("[componente=botonCancelarCambios]")
                        selectorBotonesCancelarCambios.forEach((boton) => {
                            boton.classList.remove("elementoOcultoInicialmente")
                        })
                        let selectorBotonesEliminarOferta = document.querySelectorAll("[componente=botonEliminarOferta]")
                        selectorBotonesEliminarOferta.forEach((boton) => {
                            boton.classList.remove("elementoOcultoInicialmente")
                        })
                        document.querySelector("[componente=espacioCrearOferta]").classList.remove("eventosDesactivadosInicialmente")
                        document.querySelector("[componente=soloLecturaInfo]").textContent = "Modo edición"
                    }
                    if (botonModo === "botonCancelarCambios") {
                        document.querySelector("[componente=soloLecturaInfo]").textContent = "Modo solo lectura"

                        const selectorBotonesEditar = document.querySelectorAll("[componente=botonEditarOferta]")
                        selectorBotonesEditar.forEach((boton) => {
                            boton.classList.remove("elementoOcultoInicialmente")
                        })
                        const selectorBotonesGuardarCambios = document.querySelectorAll("[componente=botonGuardarCambios]")
                        selectorBotonesGuardarCambios.forEach((boton) => {
                            boton.classList.add("elementoOcultoInicialmente")
                        })
                        const selectorBotonesCancelarCambios = document.querySelectorAll("[componente=botonCancelarCambios]")
                        selectorBotonesCancelarCambios.forEach((boton) => {
                            boton.classList.add("elementoOcultoInicialmente")
                        })
                        const selectorBotonesEliminarOferta = document.querySelectorAll("[componente=botonEliminarOferta]")
                        selectorBotonesEliminarOferta.forEach((boton) => {
                            boton.classList.add("elementoOcultoInicialmente")
                        })
                        document.querySelector("[componente=espacioCrearOferta]").classList.add("eventosDesactivadosInicialmente")
                        document.querySelector("[componente=soloLecturaInfo]").classList.remove("elementoOcultoInicialmente")

                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.imprimirDatosEnUI()
                    }
                },
                estadoComportamiento: async (estadoOferta) => {
                    let comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                    let selectorEstadoComportamientoUI = document.querySelector("[componente=estadoComportamiento]")
                    let estadoActualMemoriaVolatil = selectorEstadoComportamientoUI.textContent
                    selectorEstadoComportamientoUI.textContent = "Esperando al servidor...."
                    let estadoOfertaActual = estadoOferta.target.getAttribute("estado")
                    let estadoComportamientoPropuesto
                    if (estadoOfertaActual === "desactivado") {
                        estadoComportamientoPropuesto = "activado"
                    }
                    if (estadoOfertaActual === "activado") {
                        estadoComportamientoPropuesto = "desactivado"
                    }
                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/actualizarEstadoComportamiento",
                        comportamientoUID: String(comportamientoUID),
                        estadoPropuesto: estadoComportamientoPropuesto
                    }
                    let respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        document.querySelector("[componente=estadoComportamiento]").textContent = estadoActualMemoriaVolatil
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        let estadoComportamientoConfirmado = respuestaServidor?.estadoComportamiento
                        selectorEstadoComportamientoUI.setAttribute("estado", estadoComportamientoConfirmado)
                        let estadoComportamientoUI
                        if (estadoComportamientoConfirmado === "activado") {
                            selectorEstadoComportamientoUI.style.background = "#00ff006e"
                            estadoComportamientoUI = "Comportamiento activado"
                        }
                        if (estadoComportamientoConfirmado === "desactivado") {
                            selectorEstadoComportamientoUI.style.background = "#ff000091"
                            estadoComportamientoUI = "Comportamiento desactivado"
                        }
                        selectorEstadoComportamientoUI.textContent = estadoComportamientoUI
                    }
                },
                eliminarComportamiento: {
                    UI: async () => {
                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = "Confirmar la eliminación del comportamiento de precio"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = "Var a eliminar un comportamiento de precios configurado, ¿Estas de acuerdo ? "

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.textContent = "Comfirmar la eliminacion"
                        botonAceptar.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.eliminarComportamiento.confirmar)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Cancelar la eliminacion"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    confirmar: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Eliminado el comportamiento del precio..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                        const transaccion = {
                            zona: "administracion/comportamientoDePrecios/eliminarComportamiento",
                            comportamientoUID: String(comportamientoUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const vista = `/administracion/comportamiento_de_precios`
                            const navegacion = {
                                vista: vista,

                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                controladoresUI: {
                    opcionesTipo: (tipo) => {
                        const selectorBotones = document.querySelectorAll("[botonTipo]")
                        selectorBotones.forEach((boton) => {
                            boton.removeAttribute("style")
                            boton.removeAttribute("estado")

                        })
                        const botonSeleccionado = document.querySelector(`[botonTipo="${tipo}"]`)
                        if (botonSeleccionado) {
                            botonSeleccionado.style.background = "blue"
                            botonSeleccionado.style.color = "white"
                            botonSeleccionado.setAttribute("estado", "activado")

                        }

                        const selectoresContenedoresTipo = document.querySelectorAll(`[contenedor_tipobloqueo]`)
                        selectoresContenedoresTipo.forEach((contenedor) => {
                            contenedor.removeAttribute("style")
                        })

                        const contenedorSeleccionado = document.querySelector(`[contenedor_tipobloqueo="${tipo}"]`)
                        if (contenedorSeleccionado) {
                            document.querySelector("[contenedor=tipoComportamientos]").classList.remove("ocultoInicial")

                            contenedorSeleccionado.style.display = "flex"
                        }
                    },
                    selectorDiasSemana: (diasArray) => {
                        const selectorDias = document.querySelectorAll("[componente=diaUI]")
                        selectorDias.forEach((dia) => {
                            dia.removeAttribute("style")
                            dia.removeAttribute("estado")
                        })

                        for (const diaIDV of diasArray) {
                            const selectorDia = document.querySelector(`[componente=diaUI][diaIDV="${diaIDV}"]`)
                            selectorDia.setAttribute("estado", "activado")
                            selectorDia.style.background = "blue"
                            selectorDia.style.color = "white"
                        }
                    }

                },
                imprimirDatosEnUI: function () {
                    const datos = JSON.parse(document.querySelector("[valoresIniciales]").getAttribute("valoresIniciales"))
                    const nombreComportamiento = datos.nombreComportamiento
                    const contenedor = datos.contenedor
                    const tipo = contenedor.tipo
                    const apartamentos = contenedor.apartamentos

                    const campoNombre = document.querySelector("[campoOferta=nombreOferta]")
                    campoNombre.value = nombreComportamiento

                    casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.controladoresUI.opcionesTipo(tipo)
                    const areaContenedor = document.querySelector(`[contenedor_tipobloqueo="${tipo}"]`)

                    if (tipo === "porRango") {
                        const contenedorFechasRango = areaContenedor.querySelector("[nombreContenedor=rangoComportamiento]")
                        const selectorFechaInicio = contenedorFechasRango.querySelector("[calendario=entrada]")
                        const selectorFechaFin = contenedorFechasRango.querySelector("[calendario=salida]")
                        const selectorFechaInicioUI = contenedorFechasRango.querySelector("[fechaUI=fechaInicio]")
                        const selectorFechaFinUI = contenedorFechasRango.querySelector("[fechaUI=fechaFin]")

                        const selectorDias = document.querySelectorAll("[componente=diaUI]")
                        selectorDias.forEach((dia) => {
                            dia.removeAttribute("style")
                            dia.removeAttribute("estado")
                        })

                        const fechaInicio = contenedor.fechaInicio
                        const fechaFinal = contenedor.fechaFinal
                        selectorFechaInicio.setAttribute("memoriaVolatil", fechaInicio)
                        selectorFechaFin.setAttribute("memoriaVolatil", fechaFinal)
                        selectorFechaInicioUI.textContent = fechaInicio
                        selectorFechaFinUI.textContent = fechaFinal
                    } else if (tipo === "porDias") {
                        const diasArray = contenedor.dias
                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.controladoresUI.selectorDiasSemana(diasArray)
                    } else if (tipo === "porCreacion") {
                        const selectorFechaInicio = areaContenedor.querySelector("[calendario=entrada]")
                        const selectorFechaFin = areaContenedor.querySelector("[calendario=salida]")
                        const selectorFechaInicioUI = areaContenedor.querySelector("[fechaUI=fechaInicio]")
                        const selectorFechaFinUI = areaContenedor.querySelector("[fechaUI=fechaFin]")

                        const fechaInicio = contenedor.fechaInicio
                        const fechaFinal = contenedor.fechaFinal
                        selectorFechaInicio.setAttribute("memoriaVolatil", fechaInicio)
                        selectorFechaFin.setAttribute("memoriaVolatil", fechaFinal)
                        selectorFechaInicioUI.textContent = fechaInicio
                        selectorFechaFinUI.textContent = fechaFinal

                        const contenedorFechasCreacion = areaContenedor.querySelector("[nombreContenedor=rangoReservaCreacion]")

                        const selectorFechaInicioCreacion = contenedorFechasCreacion.querySelector("[calendario=entrada]")
                        const selectorFechaFinCreacion = contenedorFechasCreacion.querySelector("[calendario=salida]")
                        const selectorFechaInicioUICreacion = contenedorFechasCreacion.querySelector("[fechaUI=fechaInicio]")
                        const selectorFechaFinUICreacion = contenedorFechasCreacion.querySelector("[fechaUI=fechaFin]")

                        const fechaInicio_creacionReserva = contenedor.fechaInicio_creacionReserva
                        const fechaFinal_creacionReserva = contenedor.fechaFinal_creacionReserva
                        selectorFechaInicioCreacion.setAttribute("memoriaVolatil", fechaInicio_creacionReserva)
                        selectorFechaFinCreacion.setAttribute("memoriaVolatil", fechaFinal_creacionReserva)
                        selectorFechaInicioUICreacion.textContent = fechaInicio_creacionReserva
                        selectorFechaFinUICreacion.textContent = fechaFinal_creacionReserva
                    }

                    const contenedorApartamentos = areaContenedor.querySelector(`[componente=zonaAnadirApartamento]`)
                    contenedorApartamentos.querySelector(`[componente=infoSinApartamento]`).style.display = "none"
                    const apartamentosObsoletos = contenedorApartamentos.querySelectorAll("[contenedor=apartamentoDedicado]")
                    apartamentosObsoletos.forEach(apartamento => apartamento.remove())
                    for (const detalleApartamento of apartamentos) {
                        const apartamentoIDV = detalleApartamento.apartamentoIDV
                        const apartamentoUI = detalleApartamento.apartamentoUI
                        const cantidad = detalleApartamento.cantidad
                        const simboloIDV = detalleApartamento.simboloIDV
                        const insertarOpcionesApartamento = casaVitini.administracion.comportamiento_de_precios.crearComportamiento.insertarOpcionesApartamento({
                            apartamentoIDV: apartamentoIDV,
                            apartamentoUI: apartamentoUI,
                            simboloIDV: simboloIDV,
                            cantidad: cantidad
                        })
                        contenedorApartamentos.appendChild(insertarOpcionesApartamento)

                    }
                }
            },
            traductorCambioVista: (oferta) => {
                oferta.preventDefault()
                oferta.stopPropagation()
                let vista = oferta.target.closest("[vista]").getAttribute("vista")
                let entrada = {
                    "vista": vista,
                    "tipoOrigen": "menuNavegador"
                }
                casaVitini.shell.navegacion.controladorVista(entrada)
            },
            detalleUI: async function (modo) {
                const selector = document.querySelector("[componente=espacioComportamiento]")

                if (modo !== "editarOferta" && modo !== "crearOferta") {
                    const error = "¿En qué modo quieres que despliegue la interfaz de oferta en editarOferat o en crearOferta"
                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                }

                const divPrincipal = document.createElement("div");
                divPrincipal.setAttribute("componente", "espacioCrearOferta");
                divPrincipal.classList.add("espacioComportamiento");
                selector.appendChild(divPrincipal)

                if (modo === "editarOferta") {
                    divPrincipal.classList.add("eventosDesactivadosInicialmente")
                }

                const divContenedorNombreYEstado = document.createElement("div");
                if (modo === "editarOferta") {
                    divContenedorNombreYEstado.classList.add("crearOfertaContenedorHorizontalV2");
                }
                if (modo === "crearOferta") {
                    divContenedorNombreYEstado.classList.add("crearOfertaContenedorHorizontal_modoCrear");
                }

                if (modo === "editarOferta") {
                    const botonEstadoOferta = document.createElement("div")
                    botonEstadoOferta.classList.add("creatOfertaBotonEstado")
                    botonEstadoOferta.setAttribute("componente", "estadoComportamiento")
                    botonEstadoOferta.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.estadoComportamiento)
                    botonEstadoOferta.style.pointerEvents = "all"
                    botonEstadoOferta.textContent = "Comportamiento desactivado"
                    divContenedorNombreYEstado.appendChild(botonEstadoOferta)
                }


                const input = document.createElement("input");
                input.setAttribute("type", "text");
                input.classList.add("preciosEImpuestosbotonOpcionCrearNuevoImpuesto");
                input.setAttribute("campoOferta", "nombreOferta");
                input.setAttribute("placeholder", "Escribe un nombre para idenfiticar el comportamiento");
                divContenedorNombreYEstado.appendChild(input)
                divPrincipal.appendChild(divContenedorNombreYEstado)


                const selectorTipoComportamiento = this.compomentesUI.barraGlobal()
                divPrincipal.appendChild(selectorTipoComportamiento)

                const contenedorTipoComportamiento = document.createElement("div")
                contenedorTipoComportamiento.setAttribute("contenedor", "tipoComportamientos")
                contenedorTipoComportamiento.classList.add(
                    "flexVertical",
                    "backgroundGrey1",
                    "padding6",
                    "borderRadius12",
                    "ocultoInicial"
                )
                divPrincipal.appendChild(contenedorTipoComportamiento)

                const contenedorPorRango = this.compomentesUI.perfilesComportamiento.porRango()
                contenedorTipoComportamiento.appendChild(contenedorPorRango)
                const contenedorPorDias = this.compomentesUI.perfilesComportamiento.porDias()
                contenedorTipoComportamiento.appendChild(contenedorPorDias)
                const contenedorPorCreacion = await this.compomentesUI.perfilesComportamiento.porCreacion()
                contenedorTipoComportamiento.appendChild(contenedorPorCreacion)


                const divCrearOfertaEpacioBotones_3 = document.createElement("div");
                divCrearOfertaEpacioBotones_3.classList.add("crearOfertaEpacioBotones");
                divCrearOfertaEpacioBotones_3.style.pointerEvents = "all"

                const pCrearOfervaBotonV1_3 = document.createElement("p");
                pCrearOfervaBotonV1_3.classList.add("crearOfervaBotonV1");
                pCrearOfervaBotonV1_3.setAttribute("tipoOferta", "porApartamentoDedicado");
                if (modo === "crearOferta") {
                    pCrearOfervaBotonV1_3.setAttribute("componente", "botonCrearOferta");
                    pCrearOfervaBotonV1_3.textContent = "Crear comportamiento";
                    pCrearOfervaBotonV1_3.addEventListener("click", () => {
                        casaVitini.administracion.comportamiento_de_precios.crearComportamiento.crearComortamientoConfirmar()
                    })
                }
                if (modo === "editarOferta") {
                    pCrearOfervaBotonV1_3.setAttribute("componente", "botonEditarOferta");
                    pCrearOfervaBotonV1_3.textContent = "Editar comportamiento";
                    pCrearOfervaBotonV1_3.style.pointerEvents = "all"
                    pCrearOfervaBotonV1_3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.comportamientoModos)
                }

                const pBotonGuardarOferta_03 = document.createElement("p");
                pBotonGuardarOferta_03.classList.add("crearOfervaBotonV1");
                pBotonGuardarOferta_03.classList.add("elementoOcultoInicialmente");
                pBotonGuardarOferta_03.setAttribute("componente", "botonGuardarCambios");
                pBotonGuardarOferta_03.setAttribute("tipoOferta", "porApartamentoDedicado");
                pBotonGuardarOferta_03.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.guardarCambiosComportamiento)
                pBotonGuardarOferta_03.textContent = "Guardar comportamiento";
                const pBotonCancelarCambiosOferta_O3 = document.createElement("p");
                pBotonCancelarCambiosOferta_O3.classList.add("crearOfervaBotonV1");
                pBotonCancelarCambiosOferta_O3.classList.add("elementoOcultoInicialmente");
                pBotonCancelarCambiosOferta_O3.setAttribute("componente", "botonCancelarCambios");
                pBotonCancelarCambiosOferta_O3.setAttribute("tipoOferta", "porApartamentoDedicado");
                pBotonCancelarCambiosOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.comportamientoModos)
                pBotonCancelarCambiosOferta_O3.textContent = "Cancelar cambios y dejar de editar";
                const pBotonEliminarOferta_O3 = document.createElement("p");
                pBotonEliminarOferta_O3.classList.add("crearOfervaBotonV1");
                pBotonEliminarOferta_O3.classList.add("elementoOcultoInicialmente");
                pBotonEliminarOferta_O3.setAttribute("componente", "botonEliminarOferta");
                pBotonEliminarOferta_O3.addEventListener("click", casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.eliminarComportamiento.UI)
                pBotonEliminarOferta_O3.textContent = "Eliminar comportamiento";
                divCrearOfertaEpacioBotones_3.appendChild(pBotonGuardarOferta_03);
                divCrearOfertaEpacioBotones_3.appendChild(pBotonCancelarCambiosOferta_O3);
                divCrearOfertaEpacioBotones_3.appendChild(pBotonEliminarOferta_O3);
                divPrincipal.appendChild(pCrearOfervaBotonV1_3)
                divPrincipal.appendChild(divCrearOfertaEpacioBotones_3)
                return divPrincipal


            },
            compomentesUI: {
                contenedorSelectorApartamento: () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()

                    const contenedorApartamentos = document.createElement("div")
                    contenedorApartamentos.setAttribute("instanciaUID", instanciaUID)
                    contenedorApartamentos.setAttribute("contenedor", "apartamentosDelComportamiento")
                    contenedorApartamentos.classList.add(
                        "flexVertical",
                        "gap6"
                    );


                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("crearComportameintoEspacioBotones")

                    const pCrearOFertaBotonAnadirApartamento_31 = document.createElement("p");
                    pCrearOFertaBotonAnadirApartamento_31.classList.add("crearOFertaBotonAnadirApartamento");
                    pCrearOFertaBotonAnadirApartamento_31.setAttribute("componente", "botonAnadirApartamentoOferta");
                    pCrearOFertaBotonAnadirApartamento_31.textContent = "Añadir apartamento";
                    pCrearOFertaBotonAnadirApartamento_31.addEventListener("click", (e) => {
                        casaVitini.administracion.comportamiento_de_precios.crearComportamiento.apartamentosDisponibles({
                            e: e,
                            destino: `[instanciaUID="${instanciaUID}"] [componente=comportamientoSuperBloque]`
                        })
                    })
                    contenedorBotones.appendChild(pCrearOFertaBotonAnadirApartamento_31);
                    contenedorApartamentos.appendChild(contenedorBotones)

                    const porApartamentoDedicado = document.createElement("div");
                    porApartamentoDedicado.classList.add("espaciadoInterno");
                    porApartamentoDedicado.setAttribute("zonaOferta", "porApartamentoDedicado");
                    porApartamentoDedicado.setAttribute("contenedor", "apartamentos");

                    const divCrearOfertaEspacioOpciones_3 = document.createElement("div");
                    divCrearOfertaEspacioOpciones_3.classList.add("administracion_comportamientoPreciso_crearComportameinto_espacioContenedorApartamentos");
                    divCrearOfertaEspacioOpciones_3.setAttribute("componente", "comportamientoSuperBloque")
                    contenedorApartamentos.appendChild(divCrearOfertaEspacioOpciones_3);


                    const pCrearOfertaTituloOpcion5_3 = document.createElement("p");
                    pCrearOfertaTituloOpcion5_3.classList.add("crearComportamientoConentenedor");
                    pCrearOfertaTituloOpcion5_3.setAttribute("componente", "infoDescuentoDedicados");
                    pCrearOfertaTituloOpcion5_3.textContent =
                        "Ahora mismo no tienes ningún apartamento seleccionado para poder aplicarle un comportamiento de precio.Pulsa en el botón Añadir apartamento para comenzar.";
                    divCrearOfertaEspacioOpciones_3.appendChild(pCrearOfertaTituloOpcion5_3);
                    return contenedorApartamentos

                },
                insertarComportamientoPorAntelacion: function (data) {

                    const diasAntelacion = data.diasAntelacion
                    if (!diasAntelacion) {
                        const error = "Inserta al menos un numero"
                        return casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }

                    const selectorPerfilRepedito = document.querySelector(`[perfil=diasAntelacion][diaAntelacion="${diasAntelacion}"]`)
                    if (selectorPerfilRepedito) {
                        const error = `Ya has insertar un perfil para ${diasAntelacion} de antelacion`
                        return casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }

                    const contenedor = document.createElement("div")
                    contenedor.setAttribute("perfil", "diasAntelacion")
                    contenedor.classList.add(
                        "backgroundGrey1",
                        "padding6"
                    )
                    contenedor.setAttribute("diaAntelacion", diasAntelacion)

                    const botonEliminar = document.createElement("div")
                    botonEliminar.classList.add("botonV1")
                    botonEliminar.textContent = "Eliminar comportamiento"
                    botonEliminar.addEventListener("click", (e) => {
                        const contenedorUI = e.target.closest("[perfil=diasAntelacion]")
                        contenedorUI.remove()
                    })
                    contenedor.appendChild(botonEliminar)

                    const titulo = document.createElement("div")
                    titulo.classList.add(
                        "padding6"
                    )
                    titulo.textContent = `Aplicar comportamiento a los apartamentos cuando se haga una reserva con ${diasAntelacion} o más días de antelación`
                    contenedor.appendChild(titulo)


                    const selectorUI = this.contenedorSelectorApartamento()
                    contenedor.appendChild(selectorUI)

                    const destino = document.querySelector("[contenedor=comportamientosPorDiasAntelacion]")
                    destino.appendChild(contenedor)
                },
                barraGlobal: () => {
                    const selectorBoton = (boton) => {
                        const botonID = boton.target.getAttribute("botonTipo")
                        casaVitini.administracion.comportamiento_de_precios.detallesComportamiento.controladoresUI.opcionesTipo(botonID)
                    }
                    const selectorTipoComportamiento = document.createElement("div")
                    selectorTipoComportamiento.classList.add("selectorTipoComportamiento")

                    const botonTipoComportamiento_porRango = document.createElement("div")
                    botonTipoComportamiento_porRango.classList.add("botonTipoComportamiento")
                    botonTipoComportamiento_porRango.setAttribute("botonTipo", "porRango")
                    botonTipoComportamiento_porRango.textContent = "Por rango de fechas"
                    botonTipoComportamiento_porRango.addEventListener("click", selectorBoton)
                    selectorTipoComportamiento.appendChild(botonTipoComportamiento_porRango)

                    const botonTipoComportamiento_porCreacion = document.createElement("div")
                    botonTipoComportamiento_porCreacion.classList.add("botonTipoComportamiento")
                    botonTipoComportamiento_porCreacion.setAttribute("botonTipo", "porCreacion")
                    botonTipoComportamiento_porCreacion.textContent = "Por rango de fechas y rango de creación de reserva"
                    botonTipoComportamiento_porCreacion.addEventListener("click", selectorBoton)
                    selectorTipoComportamiento.appendChild(botonTipoComportamiento_porCreacion)

                    const botonTipoComportamiento_porDias = document.createElement("div")
                    botonTipoComportamiento_porDias.classList.add("botonTipoComportamiento")
                    botonTipoComportamiento_porDias.setAttribute("botonTipo", "porDias")
                    botonTipoComportamiento_porDias.textContent = "Por días de la semana"
                    botonTipoComportamiento_porDias.addEventListener("click", selectorBoton)
                    selectorTipoComportamiento.appendChild(botonTipoComportamiento_porDias)

                    const botonTipoComportamiento_porDiasAntelacion = document.createElement("div")
                    botonTipoComportamiento_porDiasAntelacion.classList.add("botonTipoComportamiento")
                    botonTipoComportamiento_porDiasAntelacion.setAttribute("botonTipo", "porAntelacion")
                    botonTipoComportamiento_porDiasAntelacion.textContent = "Por días de antelación"
                    botonTipoComportamiento_porDiasAntelacion.addEventListener("click", selectorBoton)

                    return selectorTipoComportamiento
                },
                perfilesComportamiento: {

                    porRango: () => {

                        const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()


                        const contenedorTipoPorRango = document.createElement("div");
                        contenedorTipoPorRango.classList.add("crearComportameintoContendorFechas");
                        contenedorTipoPorRango.setAttribute("contenedor_tipoBloqueo", "porRango")
                        contenedorTipoPorRango.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                        const info = document.createElement("p")
                        info.classList.add(
                            "padding6",
                            "textoCentrado"
                        )
                        info.textContent = "Seleccionar el rango de días en los cuales se aplicará el comportamiento de precio de los apartamentos."
                        contenedorTipoPorRango.appendChild(info)
                        const fechasRangoAplicacion = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({
                            nombreContenedor: "rangoComportamiento",
                            modo: "administracion",
                            sobreControlConfiguracion: {
                                configuracionInicio: {
                                    tituloCalendario: "Seleciona una fecha de inicio del comportamiento"
                                }
                            }
                        })
                        contenedorTipoPorRango.appendChild(fechasRangoAplicacion);

                        const contenedorApartamentos = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: "Añade apartamentos para determinar el comportamiento de precio.",
                            tipoDespliegue: "total",
                            metodoPersonalizado: "comportamientoDePrecios",
                            sobreControlConfiguracion: {
                                configuracionFin: {
                                    tituloCalendario: "Seleciona una fecha de de fin del comportamiento"
                                }
                            }
                        })

                        contenedorTipoPorRango.appendChild(contenedorApartamentos);

                        return contenedorTipoPorRango
                    },
                    porCreacion: async () => {
                        const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()

                        const contenedorTipoPorCreacion = document.createElement("div");
                        contenedorTipoPorCreacion.classList.add("crearComportameintoContendorFechas");
                        contenedorTipoPorCreacion.setAttribute("contenedor_tipoBloqueo", "porCreacion")
                        contenedorTipoPorCreacion.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                        const info = document.createElement("p")
                        info.classList.add(
                            "padding6",
                            "textoCentrado"
                        )
                        info.textContent = "Seleccionar el rango de días en los cuales se aplicará el comportamiento de precio de los apartamentos."
                        contenedorTipoPorCreacion.appendChild(info)
                        const fechasRangoAplicacion = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({

                            nombreContenedor: "rangoComportamiento",
                            modo: "administracion",
                            sobreControlConfiguracion: {
                                configuracionInicio: {
                                    tituloCalendario: "Seleciona una fecha de inicio del comportamiento"
                                },
                                configuracionFin: {
                                    tituloCalendario: "Seleciona una fecha de de fin del comportamiento"
                                }
                            }
                        })
                        contenedorTipoPorCreacion.appendChild(fechasRangoAplicacion);
                        const info1 = document.createElement("p")
                        info1.classList.add(
                            "padding6",
                            "textoCentrado"
                        )
                        info1.textContent = "Selecciona el rango en el cual tiene que estar la fecha de creación de la reserva para aplicarse este comportamiento."
                        contenedorTipoPorCreacion.appendChild(info1)
                        const fechasRangoCreacion = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({

                            nombreContenedor: "rangoReservaCreacion",
                            modo: "administracion",
                            sobreControlConfiguracion: {
                                configuracionInicio: {
                                    tituloCalendario: "Seleciona la fecha de inicio del rango donde debe de estar la fecha de creación de la reserva"
                                },
                                configuracionFin: {
                                    tituloCalendario: "Seleciona una fecha de de fin del rango donde debe de estar la fecha de creación de la reserva"
                                }
                            }

                        })
                        contenedorTipoPorCreacion.appendChild(fechasRangoCreacion);


                        const contenedorApartamentos = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: "Añade apartamentos para determinar el comportamiento de precio.",
                            tipoDespliegue: "total",
                            metodoPersonalizado: "comportamientoDePrecios"
                        })

                        contenedorTipoPorCreacion.appendChild(contenedorApartamentos);

                        return contenedorTipoPorCreacion
                    },
                    porDias: () => {


                        const selectorDiaSemana = (e) => {
                            const dia = e.target
                            const estadoDia = dia.getAttribute("estado")

                            if (estadoDia === "activado") {
                                dia.removeAttribute("style")
                                dia.removeAttribute("estado")
                            } else {
                                dia.setAttribute("estado", "activado")
                                dia.style.background = "blue"
                                dia.style.color = "white"
                            }
                        }

                        const comportamientoPorDias = document.createElement("div")
                        comportamientoPorDias.classList.add("contenedorOculto");
                        comportamientoPorDias.setAttribute("contenedor_tipoBloqueo", "porDias")
                        comportamientoPorDias.classList.add(
                            "flexVertical",
                            "gap6"
                        )

                        const contenedorTipoPorDias = document.createElement("div");
                        contenedorTipoPorDias.classList.add("contenedorPorDias");
                        const dias = [
                            {
                                nombreIDV: "lunes",
                                nombreUI: "Lunes"
                            },
                            {
                                nombreIDV: "martes",
                                nombreUI: "Martes"
                            },
                            {
                                nombreIDV: "miercoles",
                                nombreUI: "Miércoles"
                            },
                            {
                                nombreIDV: "jueves",
                                nombreUI: "Jueves"
                            },
                            {
                                nombreIDV: "viernes",
                                nombreUI: "Viernes"
                            },
                            {
                                nombreIDV: "sabado",
                                nombreUI: "Sábado"
                            },
                            {
                                nombreIDV: "domingo",
                                nombreUI: "Domingo"
                            }
                        ]

                        for (const dia of dias) {
                            const nombreUI = dia.nombreUI
                            const nombreIDV = dia.nombreIDV

                            const diaUI = document.createElement("div")
                            diaUI.classList.add("diaUI")
                            diaUI.classList.add("negrita")
                            diaUI.setAttribute("componente", "diaUI")
                            diaUI.setAttribute("diaIDV", nombreIDV)
                            diaUI.textContent = nombreUI
                            diaUI.addEventListener("click", selectorDiaSemana)
                            contenedorTipoPorDias.appendChild(diaUI)
                        }
                        comportamientoPorDias.appendChild(contenedorTipoPorDias);

                        const contenedorApartamentos = casaVitini.ui.componentes.componentesComplejos.selectorApartamentosEspecificosUI.despliegue({
                            textoContenedorVacio: "Añade apartamentos para determinar el comportamiento de precio.",
                            tipoDespliegue: "total",
                            metodoPersonalizado: "comportamientoDePrecios"
                        })

                        comportamientoPorDias.appendChild(contenedorApartamentos);
                        return comportamientoPorDias

                    },
                    porDiasDeAntelacion: () => {
                        const comportamientoPorAntelacion = document.createElement("div")
                        comportamientoPorAntelacion.classList.add("contenedorOculto");
                        comportamientoPorAntelacion.setAttribute("contenedor_tipoBloqueo", "porAntelacion")
                        comportamientoPorAntelacion.classList.add(
                            "flexVertical",
                            "gap6",
                            "padding6"
                        )

                        contenedorTipoComportamiento.appendChild(comportamientoPorAntelacion);
                        const fechasUI = casaVitini.ui.componentes.componentesComplejos.contenedorFechasUI({

                            modo: "administracion",

                        })
                        comportamientoPorAntelacion.appendChild(fechasUI)

                        const contenedorSelectorAntelacion = document.createElement("div")
                        contenedorSelectorAntelacion.classList.add(
                            "flexVertical"
                        )
                        comportamientoPorAntelacion.appendChild(contenedorSelectorAntelacion)

                        const botonAnadirComportamientoPorDiasDeAntecion = document.createElement("div")
                        botonAnadirComportamientoPorDiasDeAntecion.classList.add("botonV1")
                        botonAnadirComportamientoPorDiasDeAntecion.textContent = "Añadir comportamiento por antelacion"
                        botonAnadirComportamientoPorDiasDeAntecion.addEventListener("click", () => {
                            const campoDiasAntelacion = document.querySelector("[campo=diasAntelacion]").value
                            this.compomentesUI.insertarComportamientoPorAntelacion({
                                diasAntelacion: campoDiasAntelacion
                            })
                        })
                        comportamientoPorAntelacion.appendChild(botonAnadirComportamientoPorDiasDeAntecion)

                        const entradDias = document.createElement("input")
                        entradDias.setAttribute("campo", "diasAntelacion")
                        entradDias.type = "number"
                        entradDias.classList.add(
                            "padding6",
                            "borderRadius6"
                        )
                        entradDias.placeholder = "Inserta el numero maximo de dias de antelacion"
                        comportamientoPorAntelacion.appendChild(entradDias)


                        const contenedorPerfilDiasAntelacion = document.createElement("div")
                        contenedorPerfilDiasAntelacion.setAttribute("contenedor", "comportamientosPorDiasAntelacion")
                        comportamientoPorAntelacion.appendChild(contenedorPerfilDiasAntelacion)
                        return comportamientoPorAntelacion
                    }







                },
                comportamientosEnClonfictoUI: (data) => {
                    const comportamientosEnConflicto = data.comportamientosEnConflicto
                    const ui_ = document.createElement("div")
                    ui_.classList.add(
                        "flexVertical",
                        "gap6"
                    )
                    comportamientosEnConflicto.forEach((comportamiento) => {
                        const comportamientoUID = comportamiento.comportamientoUID
                        const nombreComportamiento = comportamiento.nombreComportamiento
                        const apartamentos = comportamiento.contenedor.apartamentos

                        const comportamientoUI = document.createElement("a")
                        comportamientoUI.classList.add(
                            "flexVertical",
                            "borderRadius14",
                            "backgroundWhite3",
                            "padding14",
                            "flexApiladoI",
                            "comportamientoBoton",
                            "ratonDefault",
                            "gap6"
                        )
                        comportamientoUI.setAttribute("href", "/administracion/comportamiento_de_precios/comportamiento:" + comportamientoUID)
                        comportamientoUI.setAttribute("vista", "/administracion/comportamiento_de_precios/comportamiento:" + comportamientoUID)
                        comportamientoUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                        const tituloComportamiento = document.createElement("p")
                        tituloComportamiento.classList.add(
                            "flexAplicadoI"
                        )
                        tituloComportamiento.textContent = "Nombre del comportamiento en conflicto:"
                        comportamientoUI.appendChild(tituloComportamiento)

                        const nombreComportamientoUI = document.createElement("p")
                        nombreComportamientoUI.classList.add(
                            "negrita"
                        )
                        nombreComportamientoUI.textContent = nombreComportamiento
                        comportamientoUI.appendChild(nombreComportamientoUI)

                        const contenedorApartamentosEnConflicto = document.createElement("div")
                        contenedorApartamentosEnConflicto.classList.add(
                            "flexVertical",
                            "gap6"
                        )

                        comportamientoUI.appendChild(contenedorApartamentosEnConflicto)


                        const tituloAC = document.createElement("p")
                        tituloAC.textContent = "Dentro de este comportamiento de precio, los apartamentos siguientes entran en conflicto con este comportameinto:"
                        contenedorApartamentosEnConflicto.appendChild(tituloAC)

                        apartamentos.forEach((apartamento) => {
                            const apartamentoIDV = apartamento.apartamentoIDV
                            const apartamentoUI = apartamento.apartamentoUI

                            const apartUI = document.createElement("div")
                            apartUI.classList.add("flexVertical")

                            const nombre = document.createElement("p")
                            nombre.classList.add("negrita")
                            nombre.textContent = apartamentoUI
                            apartUI.appendChild(nombre)

                            contenedorApartamentosEnConflicto.appendChild(apartUI)
                        })

                        ui_.appendChild(comportamientoUI)
                    })
                    return ui_
                }
            },
            constructorObjeto: () => {
                const tipo = document.querySelector("[botonTipo][estado=activado]")?.getAttribute("botonTipo")
                const nombreComportamiento = document.querySelector("[campoOferta=nombreOferta]").value
                const contenedorGlobal = {
                    nombreComportamiento: nombreComportamiento,
                    contenedor: {
                        tipo
                    }
                }
                const contenedorComportamiento = contenedorGlobal.contenedor
                if (tipo === "porRango") {
                    const area = document.querySelector(`[contenedor_tipobloqueo=porRango]`)
                    const fechaInicio_ISO = area.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinal_ISO = area.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    contenedorComportamiento.fechaInicio = fechaInicio_ISO
                    contenedorComportamiento.fechaFinal = fechaFinal_ISO
                    contenedorComportamiento.apartamentos = []
                    const selectoresApartamentos = document.querySelectorAll(`[contenedor_tipobloqueo=porRango] [apartamentoseleccionado]`)
                    selectoresApartamentos.forEach((apartamentos) => {
                        const apartamentoIDV = apartamentos.getAttribute("descuentoDedicadoIDV")
                        const cantidad = apartamentos.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                        const simboloIDV = apartamentos.querySelector("[campoApartamentoSeleccionado=simboloIDV]").value
                        const apartamentoFinal = {
                            apartamentoIDV: apartamentoIDV,
                            cantidad: cantidad,
                            simboloIDV: simboloIDV
                        }
                        contenedorComportamiento.apartamentos.push(apartamentoFinal)
                    })
                } else if (tipo === "porCreacion") {
                    const area = document.querySelector(`[contenedor_tipobloqueo=porCreacion]`)
                    const contenedorRangoComportamiento = area.querySelector("[nombreContenedor=rangoComportamiento]")
                    const contenedorRangoReservaCreacion = area.querySelector("[nombreContenedor=rangoReservaCreacion]")

                    const fechaInicioRangoComportamiento_ISO = contenedorRangoComportamiento.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinalRangoComportamiento_ISO = contenedorRangoComportamiento.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    const fechaInicioRangoReservaCreacion_ISO = contenedorRangoReservaCreacion.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinalRangoReservaCreacion_ISO = contenedorRangoReservaCreacion.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    contenedorComportamiento.fechaInicio = fechaInicioRangoComportamiento_ISO
                    contenedorComportamiento.fechaFinal = fechaFinalRangoComportamiento_ISO
                    contenedorComportamiento.fechaInicio_creacionReserva = fechaInicioRangoReservaCreacion_ISO
                    contenedorComportamiento.fechaFinal_creacionReserva = fechaFinalRangoReservaCreacion_ISO
                    contenedorComportamiento.apartamentos = []
                    const selectoresApartamentos = document.querySelectorAll(`[contenedor_tipobloqueo=porCreacion] [apartamentoseleccionado]`)
                    selectoresApartamentos.forEach((apartamentos) => {
                        const apartamentoIDV = apartamentos.getAttribute("descuentoDedicadoIDV")
                        const cantidad = apartamentos.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                        const simboloIDV = apartamentos.querySelector("[campoApartamentoSeleccionado=simboloIDV]").value
                        const apartamentoFinal = {
                            apartamentoIDV: apartamentoIDV,
                            cantidad: cantidad,
                            simboloIDV: simboloIDV
                        }
                        contenedorComportamiento.apartamentos.push(apartamentoFinal)
                    })
                } else if (tipo === "porDias") {
                    const selectorDiasSeleccionados = document.querySelectorAll("[componente=diaUI][estado=activado]")
                    const diasSeleccionados = []
                    selectorDiasSeleccionados.forEach((diaSeleecionado) => {
                        const diaIDV = diaSeleecionado.getAttribute("diaIDV")
                        diasSeleccionados.push(diaIDV)
                    })

                    contenedorComportamiento.dias = diasSeleccionados
                    const selectoresApartamentos = document.querySelectorAll(`[contenedor_tipobloqueo=porDias] [apartamentoseleccionado]`)
                    contenedorComportamiento.apartamentos = []

                    selectoresApartamentos.forEach((apartamentos) => {
                        const apartamentoIDV = apartamentos.getAttribute("descuentoDedicadoIDV")
                        const cantidad = apartamentos.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                        const simboloIDV = apartamentos.querySelector("[campoApartamentoSeleccionado=simboloIDV]").value
                        const apartamentoFinal = {
                            apartamentoIDV: apartamentoIDV,
                            cantidad: cantidad,
                            simboloIDV: simboloIDV
                        }
                        contenedorComportamiento.apartamentos.push(apartamentoFinal)
                    })
                } else if (tipo === "porAntelacion") {

                    const area = document.querySelector(`[contenedor_tipobloqueo=porAntelacion]`)
                    const fechaInicio_humana = area.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    const fechaFinal_humana = area.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")

                    const fechaInicio_ISO = casaVitini.utilidades.conversor.fecha_humana_hacia_ISO(fechaInicio_humana)
                    const fechaFinal_ISO = casaVitini.utilidades.conversor.fecha_humana_hacia_ISO(fechaFinal_humana)

                    contenedorComportamiento.fechaInicio = fechaInicio_ISO
                    contenedorComportamiento.fechaFinal = fechaFinal_ISO
                    const contenedorAntelaciones = []
                    const selectorCotnenedorPorAntelacion = document.querySelectorAll(`[contenedor_tipobloqueo=porAntelacion] [diaAntelacion]`)

                    selectorCotnenedorPorAntelacion.forEach((contenedor) => {

                        const diasAntelacion = contenedor.getAttribute("diaAntelacion")
                        const estructura = {
                            diasAntelacion: diasAntelacion,
                            apartamentos: {}
                        }
                        const selectorApartamentosPerfil = contenedor.querySelectorAll("[contenedor=apartamentoDedicado]")
                        selectorApartamentosPerfil.forEach((apartamentoDedicado) => {

                            const apartamentoIDV = apartamentoDedicado.getAttribute("descuentoDedicadoIDV")
                            const cantidad = apartamentoDedicado.querySelector("[campoApartamentoSeleccionado=cantidad]").value
                            const simboloIDV = apartamentoDedicado.querySelector("[campoApartamentoSeleccionado=simboloIDV]").value

                            const estructuraApartametno = {
                                cantidad,
                                simboloIDV
                            }
                            estructura.apartamentos[apartamentoIDV] = estructuraApartametno
                        })
                        contenedorAntelaciones.push(estructura)
                    })

                    contenedorComportamiento.perfilesAntelacion = contenedorAntelaciones
                }
                return contenedorGlobal


            }
        },
        enlacesDePago: {
            arranque: async () => {
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/enlacesDePago")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const directorioUltimo = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                const parametros = granuladoURL.parametros
                if (directorioUltimo === "enlaces_de_pago") {
                    return casaVitini.administracion.enlacesDePago.portadaUI()
                } else {
                    if (parametros.enlace) {
                        casaVitini.administracion.enlacesDePago.detallesEnlace.UI(parametros.enlace)
                    }
                }
                const info = {
                    titulo: "No existe ningún enlace de pago con ese identificador.",
                    descripcion: "El enlace de pago que buscas con ese identificador no existe.Comprueba el identificador de la reserva"
                }
                casaVitini.ui.componentes.mensajeSimple(info)
            },
            portadaUI: async () => {
                const espacio = document.querySelector("[componente=enlacesDePago]")
                const contenedor = document.createElement("div")
                contenedor.classList.add("enlacesDePago_contenedor")
                const contenedorBotones = document.createElement("div")
                contenedorBotones.classList.add("enlacesDePago_contenedorBotones")
                const botonCrearEnlace = document.createElement("a")
                botonCrearEnlace.classList.add("gestionDeOfertasBotonCrearOferta")
                botonCrearEnlace.textContent = "Crear un enlace de pago"
                botonCrearEnlace.setAttribute("href", "/administracion/enlaces_de_pago/crear_enlace")
                botonCrearEnlace.setAttribute("vista", "/administracion/enlaces_de_pago/crear_enlace")
                botonCrearEnlace.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)

                contenedor.appendChild(contenedorBotones)
                const contenedorOfertas = document.createElement("div")
                contenedorOfertas.classList.add("comportamintoDePreciosSuperBloque")
                contenedorOfertas.setAttribute("componente", "espacioEnlacesRenderizados")
                contenedor.appendChild(contenedorOfertas)
                espacio.appendChild(contenedor)
                const transaccion = {
                    zona: "administracion/enlacesDePago/obtenerEnlaces"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const espacioEnlacesRenderizados = document.querySelector("[componente=espacioEnlacesRenderizados]")
                    const enlacesCreados = respuestaServidor?.ok
                    if (enlacesCreados.length === 0) {
                        const enlaceUI = document.createElement("a")
                        enlaceUI.classList.add("ofertaUINoHay")
                        const tituloOferta = document.createElement("p")
                        tituloOferta.classList.add("ofertaUITituloOferta")
                        tituloOferta.textContent = "No hay ningún enlace creado.Desde aquí puedes ver todos los enlaces de pago generados desde las reservas de una forma centralizada.Puedes generar un enlace de pago desde la reserva en la pestaña enlaces de pago."
                        enlaceUI.appendChild(tituloOferta)
                        espacioEnlacesRenderizados.appendChild(enlaceUI)
                        return
                    }
                    if (Array.isArray(enlacesCreados) && enlacesCreados.length > 0) {
                        enlacesCreados.forEach((detalleOferta) => {
                            const enlaceUID = detalleOferta.enlace
                            const nombreEnlace = detalleOferta.nombreEnlace
                            const reservaUID = detalleOferta.reservaUID
                            const totalReserva = detalleOferta.totalReserva
                            const cantidad = detalleOferta.cantidad
                            const descripcion = detalleOferta.descripcion
                            const estadoPagoIDV = detalleOferta.estadoPagoIDV
                            const estadoPagoUI = {
                                pagaodo: "Enlace pagado",
                                noPagado: "Enlace no pagado"
                            }
                            const descripcionFinalUI = descripcion ? descripcion : "Este enlace no tiene descripción"
                            const enlaceUI = document.createElement("a")
                            enlaceUI.classList.add("enlaceUI")
                            enlaceUI.setAttribute("enlaceUID", enlaceUID)

                            const tituloEnlace = document.createElement("p")
                            tituloEnlace.classList.add("ofertaUITituloOferta")
                            tituloEnlace.setAttribute("valorInicial", nombreEnlace)
                            tituloEnlace.textContent = nombreEnlace
                            enlaceUI.appendChild(tituloEnlace)
                            const precioUI = document.createElement("p")
                            precioUI.classList.add("ofertaUITituloOferta")
                            precioUI.textContent = totalReserva + "$ " + estadoPagoUI[estadoPagoIDV]
                            enlaceUI.appendChild(precioUI)
                            const tituloReserva = document.createElement("a")
                            tituloReserva.classList.add("enlaceUIContenedor_vinculo")
                            tituloReserva.setAttribute("href", "/administracion/reservas/reserva:" + reservaUID + "/enlaces_de_pago")
                            tituloReserva.setAttribute("vista", "/administracion/reservas/reserva:" + reservaUID + "/enlaces_de_pago")
                            tituloReserva.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            tituloReserva.textContent = `Reserva ${reservaUID} (Ir a la reserva)`
                            enlaceUI.appendChild(tituloReserva)
                            const irAlEnlace = document.createElement("a")
                            irAlEnlace.classList.add("enlaceUIContenedor_vinculo")
                            irAlEnlace.setAttribute("href", "/pagos/" + enlaceUID)
                            irAlEnlace.setAttribute("vista", "/pagos/" + enlaceUID)
                            irAlEnlace.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            irAlEnlace.textContent = "Ir al enlace"
                            enlaceUI.appendChild(irAlEnlace)
                            const enlaceUIContenedor = document.createElement("div")
                            enlaceUIContenedor.classList.add("enlaceUIContenedor")
                            const descripcionUI = document.createElement("div")
                            descripcionUI.classList.add("ofertaUITituloFecha")
                            descripcionUI.textContent = "Descripción del enlace"
                            enlaceUIContenedor.appendChild(descripcionUI)
                            const datoFechaFin = document.createElement("div")
                            datoFechaFin.classList.add("ofertaUIDatoFecha")
                            datoFechaFin.setAttribute("valorInicial", descripcion)
                            datoFechaFin.textContent = descripcionFinalUI
                            enlaceUIContenedor.appendChild(datoFechaFin)
                            enlaceUI.appendChild(enlaceUIContenedor)
                            espacioEnlacesRenderizados.appendChild(enlaceUI)
                        })
                    }
                }
            },
            detallesEnlace: {
                UI: async (uid) => {
                    const transaccion = {
                        zona: "administracion/enlacesDePago/detallesDelEnlace",
                        enlaceUID: Number(uid)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe ningun enlace de pago con ese identificador",
                            descripcion: "El enlace de pago que buscas con ese identificador no existe.Comprueba el identificador de la reserva"
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }
                    if (respuestaServidor?.ok) {
                        const detallesEnlace = respuestaServidor?.ok
                        const uidEnlace = detallesEnlace.reserva
                        const nombreEnlace = detallesEnlace.nombreEnlace
                        const codigo = detallesEnlace.codigo
                        const reserva = detallesEnlace.reserva
                        const precio = detallesEnlace.precio
                        const descripcion = detallesEnlace.descripcion
                        const estadoPago = detallesEnlace.estadoPago
                        let estadoUIFinal
                        if (estadoPago === "sinInformacion") {
                            estadoUIFinal = "Estado del pago sin informacion."
                        }
                        if (estadoPago === "pagado") {
                            estadoUIFinal = "Pago realizado"
                        }
                        if (estadoPago === "noPagado") {
                            estadoUIFinal = "No pagado"
                        }
                        const espacioDetallesEnlace = document.querySelector("[componente=enlacesDePago]")
                        espacioDetallesEnlace.setAttribute("comportamientoUID", uid)
                        const contenedorDetallesEnlace = document.createElement("div")
                        contenedorDetallesEnlace.classList.add("detallesEnlace_contenedor")
                        contenedorDetallesEnlace.setAttribute("enlaceUID", uidEnlace)
                        const nombreEnlaceUI = document.createElement("input")
                        nombreEnlaceUI.classList.add("detallesEnlace_nombreEnlace")
                        nombreEnlaceUI.setAttribute("campo", "nombreEnlace")
                        nombreEnlaceUI.setAttribute("valorInicial", nombreEnlace)
                        nombreEnlaceUI.addEventListener("input", casaVitini.administracion.enlacesDePago.controladorBotones)
                        nombreEnlaceUI.placeholder = "Escribe un nombre para este enlace y poder identificarlo rápidamente"
                        nombreEnlaceUI.value = nombreEnlace
                        contenedorDetallesEnlace.appendChild(nombreEnlaceUI)
                        const precioUI = document.createElement("div")
                        precioUI.classList.add("detallesEnlace_precio")
                        precioUI.textContent = precio + "$"
                        contenedorDetallesEnlace.appendChild(precioUI)
                        const estadoPagoUI = document.createElement("div")
                        estadoPagoUI.classList.add("detallesEnlace_estadoPago")
                        estadoPagoUI.textContent = estadoUIFinal
                        contenedorDetallesEnlace.appendChild(estadoPagoUI)
                        const codigoUI = document.createElement("a")
                        codigoUI.classList.add("detallesEnlace_codigo")
                        codigoUI.setAttribute("href", "/pago: " + codigo)
                        codigoUI.setAttribute("vista", "/pago: " + codigo)
                        codigoUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        codigoUI.textContent = "Ir al enlace del pago"
                        contenedorDetallesEnlace.appendChild(codigoUI)
                        const reservaUI = document.createElement("a")
                        reservaUI.classList.add("detallesEnlace_codigo")
                        reservaUI.setAttribute("href", "/administracion/reservas/" + reserva)
                        reservaUI.setAttribute("vista", "/administracion/reservas/" + reserva)
                        reservaUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        reservaUI.textContent = `Ir a la reserva (${reserva})`
                        contenedorDetallesEnlace.appendChild(reservaUI)
                        const descripcionUI = document.createElement("textarea")
                        descripcionUI.classList.add("detallesEnlace_descripcion")
                        descripcionUI.setAttribute("campo", "descripcion")
                        descripcionUI.setAttribute("valorInicial", descripcion)
                        descripcionUI.addEventListener("input", casaVitini.administracion.enlacesDePago.controladorBotones)
                        descripcionUI.placeholder = "No es obligatorio escribir una descripción, pero si lo necesitas, puedes definir un poco más a este enlace aparte de por su nombre."
                        descripcionUI.value = descripcion
                        contenedorDetallesEnlace.appendChild(descripcionUI)
                        espacioDetallesEnlace.appendChild(contenedorDetallesEnlace)
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("detalesEnlace_contenedorBotones")
                        const botonGuardar = document.createElement("div")
                        botonGuardar.classList.add("detallesEnlace_botonV1")
                        botonGuardar.classList.add("ocultoInicial")
                        botonGuardar.setAttribute("boton", "guardarCambios")
                        botonGuardar.addEventListener("click", casaVitini.administracion.enlacesDePago.guardarCambios)
                        botonGuardar.textContent = "Guardar cambios"
                        contenedorBotones.appendChild(botonGuardar)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("detallesEnlace_botonV1")
                        botonCancelarCambios.classList.add("ocultoInicial")
                        botonCancelarCambios.setAttribute("boton", "cancelarCambios")
                        botonCancelarCambios.textContent = "Cancelar cambios"
                        botonCancelarCambios.addEventListener("click", casaVitini.administracion.enlacesDePago.cancelarCambios)
                        contenedorBotones.appendChild(botonCancelarCambios)
                        const botonEliminarEnlace = document.createElement("div")
                        botonEliminarEnlace.classList.add("detallesEnlace_botonV1")
                        botonEliminarEnlace.setAttribute("boton", "eliminarEnlace")
                        botonEliminarEnlace.addEventListener("click", casaVitini.administracion.enlacesDePago.eliminarEnlace.UI)
                        botonEliminarEnlace.textContent = "Eliminar enlace"
                        contenedorBotones.appendChild(botonEliminarEnlace)
                        espacioDetallesEnlace.appendChild(contenedorBotones)
                    }

                }
            },
            eliminarEnlace: {
                UI: async () => {
                    const advertenciaInmersivaIU = document.createElement("div")
                    advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                    advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                    const contenedorAdvertenciaInmersiva = document.createElement("div")
                    contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                    const tituloCancelarReserva = document.createElement("p")
                    tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                    tituloCancelarReserva.textContent = "Eliminar enlae de pago"
                    contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)
                    const bloqueBloqueoApartamentos = document.createElement("div")
                    bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")
                    const tituloBloquoApartamentos = document.createElement("div")
                    tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                    tituloBloquoApartamentos.textContent = "¿Quieres confirmar la eliminación de este enlace de pago? Sus implicaciones serán inmediatas y el enlace de acceso temporal pasará a ser obsoleto."
                    bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)
                    const bloqueBotones = document.createElement("div")
                    bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("detallesReservaCancelarBoton")
                    botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                    botonCancelar.textContent = "Confirmar y eliminar enlace"
                    botonCancelar.addEventListener("click", casaVitini.administracion.enlacesDePago.eliminarEnlace.confirmar)
                    bloqueBotones.appendChild(botonCancelar)
                    const botonCancelarProcesoCancelacion = document.createElement("div")
                    botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                    botonCancelarProcesoCancelacion.textContent = "Cancelar la eliminacion del enlace"
                    botonCancelarProcesoCancelacion.addEventListener("click", () => {
                        let selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                        selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                    })
                    bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                    contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                    advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                    document.body.appendChild(advertenciaInmersivaIU)
                },
                confirmar: async () => {
                    let comportamientoUID = document.querySelector("[comportamientoUID]").getAttribute("comportamientoUID")
                    const transaccion = {
                        zona: "administracion/comportamientoDePrecios/eliminarComportamiento",
                        "comportamientoUID": Number(comportamientoUID)
                    }
                    let respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        let selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                        selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                            advertenciaInmersiva.remove()
                        })
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        let vista = `/administracion/comportamiento_de_precios`
                        let navegacion = {
                            "vista": vista,
                            "tipoOrigen": "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                }
            },
        },
        bloqueos_temporales: {
            arranque: async () => {
                const main = document.querySelector("main")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]

                if (comandoInicial === "gestion_de_bloqueos_temporales") {
                    main.setAttribute("zonaCSS", "administracion/gestion_de_bloqueos")
                    casaVitini.administracion.bloqueos_temporales.portadaUI()
                    return

                }
                let interruptor = "ignorar"
                const directoriosFiltrados = []
                granuladoURL.directorios.forEach((directorio) => {
                    if (interruptor === "noIgnorar") {
                        directoriosFiltrados.push(directorio)
                    }
                    if (directorio === "gestion_de_bloqueos_temporales") {
                        interruptor = "noIgnorar"
                    }
                })

                if (directoriosFiltrados.length === 1) {

                    main.setAttribute("zonaCSS", "administracion/gestion_de_bloqueos/por_apartamento")
                    return casaVitini.administracion.bloqueos_temporales.bloqueosPorApartamento.UI(directoriosFiltrados[0])
                } else if (directoriosFiltrados.length === 2) {

                    main.setAttribute("zonaCSS", "administracion/gestion_de_bloqueos/bloqueoUI")
                    return casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.UI(directoriosFiltrados)
                } else {
                    const info = {
                        titulo: "No existe ningún bloqueo temporal con ese identificador.",
                        descripcion: "El bloqueo temporal que buscas con ese identificador no existe.Comprueba el identificador de la reserva"
                    }
                    casaVitini.ui.componentes.mensajeSimple(info)
                }

            },
            portadaUI: async () => {
                const selectorEspacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")
                const selectorTitulo = document.querySelector("[componente=titulo]")
                selectorTitulo.textContent = "Bloqueos de los Apartamentos"
                const contenedorBotonesPortada = document.createElement("div")
                contenedorBotonesPortada.classList.add("portadaBloqueos_espacioBotones")
                const botonCrearBloqueoUI = document.createElement("a")
                botonCrearBloqueoUI.classList.add("portadaBloqueos_botonV1")
                botonCrearBloqueoUI.innerHTML = "Crear un bloqueo"
                botonCrearBloqueoUI.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/crear_bloqueo")
                botonCrearBloqueoUI.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/crear_bloqueo")
                botonCrearBloqueoUI.addEventListener("click", (boton) => {
                    boton.preventDefault()
                    const vista = boton.target.getAttribute("vista")
                    const navegacion = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(navegacion)
                })
                contenedorBotonesPortada.appendChild(botonCrearBloqueoUI)
                selectorEspacioBotonesGlobales.appendChild(contenedorBotonesPortada)
                const transaccion = {
                    zona: "administracion/bloqueos/listarApartamentosConBloqueos"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const apartamentosConBloqueos = respuestaServidor?.ok
                    if (apartamentosConBloqueos.length === 0) {
                        const informacionUI = document.createElement("div")
                        informacionUI.textContent = "No hay ningun bloqueo configurado"
                        selectorEspacioBloqueos.appendChild(informacionUI)
                    }
                    apartamentosConBloqueos.forEach((detalleDelApartamento) => {
                        const apartamentoIDV = detalleDelApartamento.apartamentoIDV
                        const apartamentoUI = detalleDelApartamento.apartamentoUI
                        const numeroDeBloqueos = detalleDelApartamento.numeroDeBloqueos
                        let mensajeNumeroBloqueos
                        if (numeroDeBloqueos === 1) {
                            mensajeNumeroBloqueos = `Hay ${numeroDeBloqueos} bloqueo configurado para este apartamento`
                        }
                        if (numeroDeBloqueos > 1) {
                            mensajeNumeroBloqueos = `Hay ${numeroDeBloqueos} bloqueos configurados para este apartamento`
                        }
                        const bloqueApartamentoUI = document.createElement("a")
                        bloqueApartamentoUI.classList.add("gestionBloqueoApartamento_bloqueApartamentoUI")
                        bloqueApartamentoUI.setAttribute("apartamentoIDV", apartamentoIDV)
                        bloqueApartamentoUI.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV)
                        bloqueApartamentoUI.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV)
                        bloqueApartamentoUI.addEventListener("click", casaVitini.administracion.bloqueos_temporales.traductorCambioVista)
                        const tituloApartamentoUI = document.createElement("div")
                        tituloApartamentoUI.classList.add("gestionBloqueoApartamento_tituloApartamentoUI")
                        tituloApartamentoUI.classList.add("negrita")
                        tituloApartamentoUI.textContent = apartamentoUI
                        bloqueApartamentoUI.appendChild(tituloApartamentoUI)
                        const numeroBloqueosUI = document.createElement("div")
                        numeroBloqueosUI.classList.add("gestionBloqueoApartamento_numeroBloqueosUI")
                        numeroBloqueosUI.textContent = mensajeNumeroBloqueos
                        bloqueApartamentoUI.appendChild(numeroBloqueosUI)
                        selectorEspacioBloqueos.appendChild(bloqueApartamentoUI)
                    })
                }
            },
            traductorCambioVista: (apartamento) => {
                apartamento.preventDefault()
                apartamento.stopPropagation()
                const vista = apartamento.target.closest("[vista]").getAttribute("vista")
                const entrada = {
                    vista: vista,
                    tipoOrigen: "menuNavegador"
                }
                casaVitini.shell.navegacion.controladorVista(entrada)
            },
            bloqueosPorApartamento: {
                UI: async (apartamento) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const selectorTitulo = document.querySelector("[componente=titulo]")
                    selectorTitulo.textContent = "Bloqueos temporales"
                    const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")
                    const transaccion = {
                        zona: "administracion/bloqueos/listaBloquoeosDelApartamento",
                        apartamentoIDV: apartamento
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada)
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe el identificador del apartamento",
                                descripcion: respuestaServidor.error
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                    if (respuestaServidor?.ok) {
                        const apartamentoIDV = respuestaServidor?.apartamentoIDV
                        const apartamentoUI = respuestaServidor?.apartamentoUI
                        const bloqueos = respuestaServidor?.ok
                        selectorTitulo.textContent = "Bloqueos temporales del " + apartamentoUI
                        if (bloqueos.length === 0) {

                            const mensaje = document.createElement("p")
                            mensaje.textContent = "El apartamento no tiene ningún bloqueo definido"
                            seccionRenderizadaOrigen.appendChild(mensaje)

                        }


                        bloqueos.forEach((detalleBloqueo) => {
                            const tipoBloqueoIDV = detalleBloqueo.tipoBloqueoIDV
                            const fechaInicio = detalleBloqueo.fechaInicio
                            const fechaFin = detalleBloqueo.fechaFin
                            const motivo = detalleBloqueo.motivo
                            const zonaIDV = detalleBloqueo.zonaIDV
                            const bloqueoUID = detalleBloqueo.bloqueoUID



                            const bloqueBloqueoUI = document.createElement("a")
                            bloqueBloqueoUI.classList.add("listaBloqueos_bloqueBloqueoUI")
                            bloqueBloqueoUI.setAttribute("bloqueoUID", bloqueoUID)
                            bloqueBloqueoUI.setAttribute("href", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV + "/" + bloqueoUID)
                            bloqueBloqueoUI.setAttribute("vista", "/administracion/gestion_de_bloqueos_temporales/" + apartamentoIDV + "/" + bloqueoUID)
                            bloqueBloqueoUI.addEventListener("click", casaVitini.administracion.bloqueos_temporales.bloqueosPorApartamento.traductorCambioVista)
                            let tipoBloqueoDefinicion
                            if (tipoBloqueoIDV === "rangoTemporal") {
                                tipoBloqueoDefinicion = "Rango temporal"
                            }
                            if (tipoBloqueoIDV === "permanente") {
                                tipoBloqueoDefinicion = "Permanente"
                            }
                            if (tipoBloqueoIDV === "rangoTemporal") {

                                const fechaInicio_huamna = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio)
                                const fechaFin_huamna = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFin)


                                const contenedorFecha = document.createElement("div")
                                contenedorFecha.classList.add("listaBloqueo_contenedorFecha")
                                const contenedorFechaInicio = document.createElement("div")
                                contenedorFechaInicio.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual")
                                const tipoEntradaUITituloUI = document.createElement("div")
                                tipoEntradaUITituloUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_titulo")
                                tipoEntradaUITituloUI.classList.add("negrita")
                                tipoEntradaUITituloUI.textContent = "Fecha de inicio del bloqueo 1"
                                contenedorFechaInicio.appendChild(tipoEntradaUITituloUI)
                                const entradaUI = document.createElement("div")
                                entradaUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_fecha")
                                entradaUI.textContent = fechaInicio_huamna
                                contenedorFechaInicio.appendChild(entradaUI)
                                contenedorFecha.appendChild(contenedorFechaInicio)
                                const contenedorFechaFin = document.createElement("div")
                                contenedorFechaFin.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual")
                                const tipoSalidaUITituloUI = document.createElement("div")
                                tipoSalidaUITituloUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_titulo")
                                tipoSalidaUITituloUI.classList.add("negrita")
                                tipoSalidaUITituloUI.textContent = "Fecha de fin del bloqueo"
                                contenedorFechaFin.appendChild(tipoSalidaUITituloUI)
                                const salidaUI = document.createElement("div")
                                salidaUI.classList.add("administracion_bloqueos_detallesBloqueo_contenedorFechaIndividual_fecha")
                                salidaUI.textContent = fechaFin_huamna
                                contenedorFechaFin.appendChild(salidaUI)
                                contenedorFecha.appendChild(contenedorFechaFin)
                                bloqueBloqueoUI.appendChild(contenedorFecha)
                            }

                            const contenedorTipoBloqueo = document.createElement("div")
                            contenedorTipoBloqueo.classList.add("listaBloqueos_contenedorTipoBloqueo")
                            const tipoBloqueoTituloUI = document.createElement("div")
                            tipoBloqueoTituloUI.classList.add("administracion_bloqueos_listaBloqueos_titutloTipoBloqueo")
                            tipoBloqueoTituloUI.classList.add("negrita")
                            tipoBloqueoTituloUI.textContent = "Tipo bloqueo"
                            contenedorTipoBloqueo.appendChild(tipoBloqueoTituloUI)
                            const tipoBloqueoUI = document.createElement("div")
                            tipoBloqueoUI.classList.add("listaBloqueos_tipoBloqueo")
                            tipoBloqueoUI.textContent = tipoBloqueoDefinicion
                            contenedorTipoBloqueo.appendChild(tipoBloqueoUI)
                            bloqueBloqueoUI.appendChild(contenedorTipoBloqueo)

                            const contenedorZonaUI = document.createElement("div")
                            contenedorZonaUI.classList.add("listaBloqueo_contenedorZonaUI")
                            const tituloZonaUI = document.createElement("div")
                            tituloZonaUI.classList.add("litaBloqueos_tituloZona")
                            tituloZonaUI.classList.add("negrita")
                            tituloZonaUI.textContent = "Contexto de aplicación"
                            contenedorZonaUI.appendChild(tituloZonaUI)
                            let zonaDefinicionUI
                            if (zonaIDV === "privado") {
                                zonaDefinicionUI = "Privado - Solo se aplica a la zona de administración"
                            }
                            if (zonaIDV === "publico") {
                                zonaDefinicionUI = "Público - Solo se aplica a la zona publica"
                            } if (zonaIDV === "global") {
                                zonaDefinicionUI = "Global - Se aplica a toda la zona, tando pública como administrativa"
                            }
                            const zonaUI = document.createElement("div")
                            zonaUI.classList.add("listaBloqueos_zonaUI")
                            zonaUI.textContent = zonaDefinicionUI
                            contenedorZonaUI.appendChild(zonaUI)
                            bloqueBloqueoUI.appendChild(contenedorZonaUI)
                            let motivoFinal
                            if (motivo === null) {
                                motivoFinal = "Este bloqueo no tiene ningún motivo definido, sería recomendable definir un motivo para poder identificar rápidamente porque existe este bloqueo"
                            } else {
                                motivoFinal = motivo
                            }


                            const contenedorMotivoBloqueo = document.createElement("div")
                            contenedorMotivoBloqueo.classList.add("listaBloqueos_contenedorTipoBloqueo")
                            const motivoBloqueoTituloUI = document.createElement("div")
                            motivoBloqueoTituloUI.classList.add("administracion_bloqueos_listaBloqueos_titutloTipoBloqueo")
                            motivoBloqueoTituloUI.classList.add("negrita")
                            motivoBloqueoTituloUI.textContent = "Motivo del bloqueo"
                            contenedorMotivoBloqueo.appendChild(motivoBloqueoTituloUI)
                            const motivoUI = document.createElement("div")
                            motivoUI.classList.add("listaBloqueos_motivo")
                            motivoUI.textContent = motivoFinal
                            contenedorMotivoBloqueo.appendChild(motivoUI)
                            bloqueBloqueoUI.appendChild(contenedorMotivoBloqueo)
                            selectorEspacioBloqueos.appendChild(bloqueBloqueoUI)
                        })
                    }
                },
                traductorCambioVista: (uidBloqueo) => {
                    uidBloqueo.preventDefault()
                    uidBloqueo.stopPropagation()
                    const vista = uidBloqueo.target.closest("[vista]").getAttribute("vista")
                    const entrada = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(entrada)
                }
            },
            detallesDelBloqueo: {
                UI: async (url) => {
                    const seccionRenderizadaOrigen = document.querySelector("main")
                    const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                    const apartmentoIDV = url[0]
                    const bloqueoUID = url[1]
                    const selectorTitulo = document.querySelector("[componente=titulo]")
                    selectorTitulo.textContent = "Detalles del bloqueo"
                    const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")
                    const transaccion = {
                        zona: "administracion/bloqueos/detallesDelBloqueo",
                        apartamentoIDV: apartmentoIDV,
                        bloqueoUID: String(bloqueoUID)
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                    if (!seccionRenderizada) { return }
                    if (respuestaServidor?.error) {
                        const info = {
                            titulo: "No existe el bloqueo del apartamento",
                            descripcion: respuestaServidor.error
                        }
                        casaVitini.ui.componentes.mensajeSimple(info)
                    }
                    if (respuestaServidor?.ok) {
                        const apartamentoIDV = respuestaServidor?.apartamentoIDV
                        const apartamentoUI = respuestaServidor?.apartamentoUI
                        const detallesDelBloqueo = respuestaServidor?.ok
                        const tipoBloqueoIDV = detallesDelBloqueo.tipoBloqueoIDV
                        const fechaInicio = detallesDelBloqueo.fechaInicio
                        const fechaFin = detallesDelBloqueo.fechaFin
                        const motivo = detallesDelBloqueo.motivo
                        const zonaIDV = detallesDelBloqueo.zonaIDV
                        const bloqueoUID = detallesDelBloqueo.bloqueoUID
                        selectorTitulo.textContent = "Detalles del bloqueo " + bloqueoUID + " del " + apartamentoUI
                        const contenedorGlobal = document.createElement("div")
                        contenedorGlobal.classList.add("detallesBloqueos_contenedorGlobal")
                        contenedorGlobal.setAttribute("componente", "contenedorGlobal")

                        const bloqueBloqueoUI = document.createElement("div")
                        bloqueBloqueoUI.classList.add("detallesBloqueos_bloqueBloqueoUI")
                        bloqueBloqueoUI.setAttribute("componente", "contenedorDelBloqueo")
                        bloqueBloqueoUI.style.pointerEvents = "none"
                        bloqueBloqueoUI.setAttribute("bloqueoUID", bloqueoUID)
                        bloqueBloqueoUI.setAttribute("apartamentoIDV", apartamentoIDV)
                        let tipoBloqueoDefinicion
                        if (tipoBloqueoIDV === "rangoTemporal") {
                            tipoBloqueoDefinicion = "Rango temporal"
                        }
                        if (tipoBloqueoIDV === "permanente") {
                            tipoBloqueoDefinicion = "Permanente"
                        }

                        const contenedorTipoBloqueo = document.createElement("div")
                        contenedorTipoBloqueo.classList.add("detallesloqueos_contenedorBloquesGlobales")
                        const contenedorTipoBloqueoV2 = document.createElement("div")
                        contenedorTipoBloqueoV2.classList.add("detallesBloqueo_contenedorTipoBloqueoV2")
                        const tipoBloqueoTituloUI = document.createElement("div")
                        tipoBloqueoTituloUI.classList.add("listaBloqueos_titulo")
                        tipoBloqueoTituloUI.classList.add("negrita")
                        tipoBloqueoTituloUI.textContent = "Tipo bloqueo"
                        contenedorTipoBloqueoV2.appendChild(tipoBloqueoTituloUI)
                        const tipoBloqueoUI = document.createElement("select")
                        tipoBloqueoUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                        tipoBloqueoUI.setAttribute("datoBloqueo", "tipoBloqueoIDV")
                        tipoBloqueoUI.setAttribute("datoInicial", tipoBloqueoIDV)
                        tipoBloqueoUI.textContent = tipoBloqueoDefinicion
                        tipoBloqueoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)
                        const opcion_permamente = document.createElement("option");
                        opcion_permamente.value = "permanente";
                        if (tipoBloqueoIDV === "permanente") {
                            opcion_permamente.selected = true;
                        }
                        opcion_permamente.text = "Permanente";
                        tipoBloqueoUI.add(opcion_permamente);
                        const opcion_rangoTemporal = document.createElement("option");
                        if (tipoBloqueoIDV === "rangoTemporal") {
                            opcion_rangoTemporal.selected = true;
                        }
                        opcion_rangoTemporal.value = "rangoTemporal";
                        opcion_rangoTemporal.text = "Rango temporal";
                        tipoBloqueoUI.add(opcion_rangoTemporal);
                        contenedorTipoBloqueoV2.appendChild(tipoBloqueoUI)
                        contenedorTipoBloqueo.appendChild(contenedorTipoBloqueoV2)
                        bloqueBloqueoUI.appendChild(contenedorTipoBloqueo)
                        const contenedorZonaUI = document.createElement("div")
                        contenedorZonaUI.classList.add("detallesBloqueo_contenedorZonaUI")
                        const tituloZonaUI = document.createElement("div")
                        tituloZonaUI.classList.add("listaBloqueos_titulo")
                        tituloZonaUI.classList.add("negrita")
                        tituloZonaUI.textContent = "Contexto de aplicación"
                        contenedorZonaUI.appendChild(tituloZonaUI)
                        let zonaDefinicionUI
                        if (zonaIDV === "privado") {
                            zonaDefinicionUI = "Privado - Solo se aplica a la zona de administración"
                        }
                        if (zonaIDV === "publico") {
                            zonaDefinicionUI = "Público - Solo se aplica a la zona publica"
                        } if (zonaIDV === "global") {
                            zonaDefinicionUI = "Global - Se aplica a toda la zona, tando pública como administrativa"
                        }
                        const zonaUI = document.createElement("select")
                        zonaUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                        zonaUI.setAttribute("datoBloqueo", "zonaIDV")
                        zonaUI.setAttribute("datoInicial", zonaIDV)
                        const opcion_publico = document.createElement("option");
                        if (zonaIDV === "publico") {
                            opcion_publico.selected = true;
                        }
                        opcion_publico.value = "publico";
                        opcion_publico.text = "Público - Zona pública";
                        zonaUI.add(opcion_publico);
                        const opcion_privado = document.createElement("option");
                        if (zonaIDV === "privado") {
                            opcion_privado.selected = true;
                        }
                        opcion_privado.value = "privado";
                        opcion_privado.text = "Privado - Zona administrativa";
                        zonaUI.add(opcion_privado);
                        const opcion_global = document.createElement("option");
                        if (zonaIDV === "global") {
                            opcion_global.selected = true;
                        }
                        opcion_global.value = "global";
                        opcion_global.text = "Global - Zona pública y administrativa";
                        zonaUI.add(opcion_global);
                        contenedorZonaUI.appendChild(zonaUI)
                        contenedorTipoBloqueo.appendChild(contenedorZonaUI)
                        if (tipoBloqueoIDV === "rangoTemporal") {
                            const metadatosconstructorRangoTemporalUI = {
                                fechaInicio,
                                fechaFin,
                                modo: "estadoConDatos"
                            }
                            const selectorRangoUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.selectorRangoTemporalUI(metadatosconstructorRangoTemporalUI)
                            bloqueBloqueoUI.appendChild(selectorRangoUI)
                        }
                        if (tipoBloqueoIDV === "permanente") {
                            const metadatosconstructorRangoTemporalUI = {
                                modo: "estadoInicial"
                            }
                            const selectorRangoUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.selectorRangoTemporalUI(metadatosconstructorRangoTemporalUI)
                            bloqueBloqueoUI.appendChild(selectorRangoUI)
                        }

                        const motivoUI = document.createElement("textarea")
                        motivoUI.classList.add("detalleBloqueos_motivo")
                        motivoUI.setAttribute("componente", "contenedorMotivo")
                        motivoUI.setAttribute("datoBloqueo", "motivoUI")
                        if (motivo === null) {
                            motivoUI.setAttribute("datoInicial", "")
                        } else {
                            motivoUI.setAttribute("datoInicial", motivo)
                        }
                        motivoUI.textContent = motivo
                        motivoUI.rows = 10
                        if (motivo === null) {
                            motivoUI.placeholder = "Este bloqueo no tiene ningún motivo definido, sería recomendable definir un motivo para poder identificar rápidamente porque existe este bloqueo"
                        }
                        bloqueBloqueoUI.appendChild(motivoUI)
                        contenedorGlobal.appendChild(bloqueBloqueoUI)
                        selectorEspacioBloqueos.appendChild(contenedorGlobal)
                        casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.modificar()
                    }
                },
                traductorCambioVista: (uidBloqueo) => {
                    uidBloqueo.preventDefault()
                    uidBloqueo.stopPropagation()
                    const vista = uidBloqueo.target.closest("[vista]").getAttribute("vista")
                    const entrada = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(entrada)
                },
                traductorConstructorCalendario: (calendario) => {
                    const componente = calendario.target.closest("[calendario]")
                    casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.constructorCalendario(componente)
                },


                selectorRangoTemporalUI: (rango) => {
                    const fechaInicio = rango.fechaInicio
                    const fechaFin = rango.fechaFin
                    const modo = rango.modo
                    const instanciaUID_contenedorFechas = casaVitini.utilidades.codigoFechaInstancia()

                    if (modo !== "estadoInicial" && modo !== "estadoConDatos") {
                        const error = "selectorRAngoTemporalUI necesita un modo, puede ser estadoInicial o estadoConDatos"
                        casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }

                    let memoriaVolatilEntrada;
                    let memoriaVolatilSalida;
                    let fechaInicioUI = ""
                    let fechaFinUI = ""
                    if (modo === "estadoConDatos") {
                        fechaInicioUI = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio)
                        fechaFinUI = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFin)
                    }
                    if (modo === "estadoInicial") {
                        fechaInicioUI = "(Seleccionar fecha de inicio)"
                        fechaFinUI = "(Seleccionar fecha de fin)"
                    }
                    const contenedorFecha = document.createElement("div")
                    contenedorFecha.classList.add("detallesDelBloqueo_contenedorFecha")
                    contenedorFecha.setAttribute("componente", "contenedorFechas")
                    contenedorFecha.setAttribute("instanciaUID_contenedorFechas", instanciaUID_contenedorFechas)

                    if (modo === "estadoInicial") {
                        contenedorFecha.style.display = "none"
                    }
                    const contenedorFechaEntrada = document.createElement("div")
                    contenedorFechaEntrada.classList.add("detallesBloqueo_contenedorFechaEntrada")
                    contenedorFechaEntrada.setAttribute("calendario", "entrada")
                    contenedorFechaEntrada.setAttribute("componente", "fechaEntrada")
                    contenedorFechaEntrada.setAttribute("paralizadorEvento", "ocultadorCalendarios")
                    if (modo === "estadoConDatos") {
                        contenedorFechaEntrada.setAttribute("memoriaVolatil", fechaInicio)
                        contenedorFechaEntrada.setAttribute("valorInicial", fechaInicio)
                    }

                    contenedorFechaEntrada.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_entrada_perfilSimple",
                            contenedorOrigenIDV: "[calendario=entrada]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "inicioRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Selecciona la fecha de inicio del rango de bloqueo"

                        })
                    })

                    const tipoEntradaUITituloUI = document.createElement("div")
                    tipoEntradaUITituloUI.classList.add("listaBloqueos_titulo")
                    tipoEntradaUITituloUI.classList.add("negrita")
                    tipoEntradaUITituloUI.textContent = "Fecha de inicio del bloqueo 2"
                    contenedorFechaEntrada.appendChild(tipoEntradaUITituloUI)
                    const entradaUI = document.createElement("div")
                    entradaUI.classList.add("listaBloqueos_fecha")
                    entradaUI.setAttribute("fechaUI", "fechaInicio")
                    entradaUI.textContent = fechaInicioUI
                    contenedorFechaEntrada.appendChild(entradaUI)
                    contenedorFecha.appendChild(contenedorFechaEntrada)
                    const contenedorFechaSalida = document.createElement("div")
                    contenedorFechaSalida.classList.add("detallesBloqueo_contenedorFechaSalida")
                    contenedorFechaSalida.setAttribute("calendario", "salida")
                    contenedorFechaSalida.setAttribute("componente", "fechaSalida")
                    contenedorFechaSalida.setAttribute("paralizadorEvento", "ocultadorCalendarios")
                    if (modo === "estadoConDatos") {
                        contenedorFechaSalida.setAttribute("memoriaVolatil", fechaFin)
                        contenedorFechaSalida.setAttribute("valorInicial", fechaFin)
                    }

                    contenedorFechaSalida.addEventListener("click", async () => {
                        await casaVitini.ui.componentes.calendario.configurarCalendario({
                            perfilMes: "calendario_salida_perfilSimple",
                            contenedorOrigenIDV: "[calendario=salida]",
                            instanciaUID_contenedorFechas,
                            rangoIDV: "finalRango",
                            metodoSelectorDia: null,
                            tituloCalendario: "Selecciona la fecha del fin del rango de bloqueo"
                        })
                    })
                    const tipoSalidaUITituloUI = document.createElement("div")
                    tipoSalidaUITituloUI.classList.add("listaBloqueos_titulo")
                    tipoSalidaUITituloUI.classList.add("negrita")
                    tipoSalidaUITituloUI.textContent = "Fecha de fin del bloqueo"
                    contenedorFechaSalida.appendChild(tipoSalidaUITituloUI)
                    const salidaUI = document.createElement("div")
                    salidaUI.classList.add("listaBloqueos_fecha")
                    salidaUI.setAttribute("fechaUI", "fechaFin")
                    salidaUI.textContent = fechaFinUI
                    contenedorFechaSalida.appendChild(salidaUI)
                    contenedorFecha.appendChild(contenedorFechaSalida)
                    return contenedorFecha
                },
                controladorSelectorRangoTemporalUI: (tipoBloqueoUI) => {
                    const tipoBloqueo = tipoBloqueoUI.target.value
                    const selectorContenedorFechas = document.querySelector("[componente=contenedorFechas]")
                    if (tipoBloqueo === "permanente") {
                        if (selectorContenedorFechas) {
                            selectorContenedorFechas.style.display = "none"
                        }
                    }
                    if (tipoBloqueo === "rangoTemporal") {
                        if (selectorContenedorFechas) {
                            selectorContenedorFechas.style.display = "flex"
                        }
                    }
                },
                botonesDetallesBloqueoUI: (configuracion) => {
                    if (configuracion !== "crear" && configuracion !== "modificar" && configuracion !== "guardarEliminar") {
                        const error = "Este componente necesita un tipo de configuración, esta puede ser, crear, modificar o guardarEliminar"
                        casaVitini.ui.componentes.advertenciaInmersiva(error)
                    }
                    const selectorContenedorBotonesRenderizado = document.querySelector("[componente=contenedorBotones]")
                    selectorContenedorBotonesRenderizado?.remove()
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("detallesBloqueo_contenedorBotones")
                    contenedorBotones.setAttribute("componente", "contenedorBotones")
                    if (configuracion === "crear") {
                        const botonCrear = document.createElement("div")
                        botonCrear.classList.add("detallesBloqueo_botonV1")
                        botonCrear.textContent = "Crear bloqueo"
                        botonCrear.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.crearBloqueo.transactor()
                        })
                        contenedorBotones.appendChild(botonCrear)
                    }
                    if (configuracion === "modificar") {
                        const botonModificiar = document.createElement("div")
                        botonModificiar.classList.add("detallesBloqueo_botonV1")
                        botonModificiar.textContent = "Modificiar bloqueo"
                        botonModificiar.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.guardarEliminar()
                        })
                        contenedorBotones.appendChild(botonModificiar)
                    }
                    if (configuracion === "guardarEliminar") {
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("detallesBloqueo_botonV1")
                        botonGuardarCambios.textContent = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.guardarCambios()
                        })
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonEliminarBloqueo = document.createElement("div")
                        botonEliminarBloqueo.classList.add("detallesBloqueo_botonV1")
                        botonEliminarBloqueo.textContent = "Eliminar bloqueo"
                        botonEliminarBloqueo.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.eliminarBloqueo.UI()
                        })
                        contenedorBotones.appendChild(botonEliminarBloqueo)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("detallesBloqueo_botonV1")
                        botonCancelarCambios.textContent = "Cancelar cambios"
                        botonCancelarCambios.addEventListener("click", () => {
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.modificar()
                            casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.cancelarCambios()
                        })
                        contenedorBotones.appendChild(botonCancelarCambios)
                    }
                    return contenedorBotones
                },
                controladorBotonesGlobales: {

                    crear: () => {
                        const selectorContendorGlobal = document.querySelector("[componente=contenedorGlobal]")
                        const botonesGlobalesUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.botonesDetallesBloqueoUI("crear")
                        selectorContendorGlobal.append(botonesGlobalesUI)
                    },
                    modificar: () => {
                        const selectorContendorGlobal = document.querySelector("[componente=contenedorGlobal]")
                        const botonesGlobalesUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.botonesDetallesBloqueoUI("modificar")
                        selectorContendorGlobal.append(botonesGlobalesUI)
                        const selectorContendorBloqueo = document.querySelector("[componente=contenedorDelBloqueo]")
                        selectorContendorBloqueo.style.pointerEvents = "none"
                    },
                    guardarEliminar: () => {
                        const selectorContendorGlobal = document.querySelector("[componente=contenedorGlobal]")
                        const botonesGlobalesUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.botonesDetallesBloqueoUI("guardarEliminar")
                        selectorContendorGlobal.append(botonesGlobalesUI)
                        const selectorContendorBloqueo = document.querySelector("[componente=contenedorDelBloqueo]")
                        selectorContendorBloqueo.style.pointerEvents = "all"
                    }
                },
                guardarCambios: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Actualizando bloqueo..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const selectorBloqueUID = document.querySelector("[bloqueoUID]")
                    const bloqueUID = selectorBloqueUID.getAttribute("bloqueoUID")
                    const selectorTipoBloqueo = document.querySelector("[datoBloqueo=tipoBloqueoIDV]")
                    const selectorZona = document.querySelector("[datoBloqueo=zonaIDV]")
                    const bloqueoParaActualizar = casaVitini.administracion.bloqueos_temporales.contructorObjeto()
                    bloqueoParaActualizar.zona = "administracion/bloqueos/modificarBloqueo"
                    bloqueoParaActualizar.bloqueoUID = String(bloqueUID)
                    const selectorMotivo = document.querySelector("[datoBloqueo=motivoUI]")

                    const respuestaServidor = await casaVitini.shell.servidor(bloqueoParaActualizar)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const bloqueoActualizado = respuestaServidor.bloqueo
                        const tipoBloqueoIDV = bloqueoActualizado.tipoBloqueoIDV
                        const fechaInicio = bloqueoActualizado.fechaInicio
                        const fechaFin = bloqueoActualizado.fechaFin
                        const motivo = bloqueoActualizado.motivo || ""
                        const zonaIDV = bloqueoActualizado.zonaIDV

                        if (tipoBloqueoIDV === "rangoTemporal") {
                            const fechaInicio_elemento = document.querySelector("[calendario=entrada]")
                            const fechaFin_elemento = document.querySelector("[calendario=salida]")
                            const fechaInicio_ISO = fechaInicio_elemento.getAttribute("memoriaVolatil")
                            const fechaFin_ISO = fechaFin_elemento.getAttribute("memoriaVolatil")

                            const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio)
                            const fechaFin_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFin)

                            document.querySelector("[fechaUI=fechaInicio]").textContent = fechaInicio_humana
                            fechaInicio_elemento.setAttribute("valorInicial", fechaInicio_ISO)

                            document.querySelector("[fechaUI=fechaFin]").textContent = fechaFin_humana
                            fechaFin_elemento.setAttribute("valorInicial", fechaFin_ISO)
                        } else if (tipoBloqueoIDV === "permanente") {
                            const fechaInicio_elemento = document.querySelector("[calendario=entrada]")
                            const fechaFin_elemento = document.querySelector("[calendario=salida]")
                            fechaInicio_elemento.removeAttribute("memoriaVolatil")
                            fechaFin_elemento.removeAttribute("memoriaVolatil")

                            document.querySelector("[fechaUI=fechaInicio]").textContent = "(Seleccionar)"
                            fechaInicio_elemento.removeAttribute("valorInicial")

                            document.querySelector("[fechaUI=fechaFin]").textContent = "(Seleccionar)"
                            fechaFin_elemento.removeAttribute("valorInicial")
                        }
                        selectorTipoBloqueo.setAttribute("datoInicial", tipoBloqueoIDV)
                        selectorTipoBloqueo.value = tipoBloqueoIDV
                        selectorZona.setAttribute("datoInicial", zonaIDV)
                        selectorZona.value = zonaIDV
                        selectorMotivo.setAttribute("datoInicial", motivo)
                        selectorMotivo.value = motivo
                        casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.modificar()
                        const selectorContendorBloqueo = document.querySelector("[componente=contenedorDelBloqueo]")
                        selectorContendorBloqueo.style.pointerEvents = "none"
                    }
                },
                eliminarBloqueo: {
                    UI: async () => {

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = "Confirmar eliminar el bloqueo"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = "Vas a eliminar el bloqueo y sus implicaciones serán inmediatas. ¿Estás de acuerdo?"

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.textContent = "Confirmar la eliminación"
                        botonAceptar.addEventListener("click", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.eliminarBloqueo.confirmar)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Cancelar la eliminación"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    confirmar: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Elimiando bloqueo..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const bloqueoUID = document.querySelector("[bloqueoUID]").getAttribute("bloqueoUID")
                        const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                        const transaccion = {
                            zona: "administracion/bloqueos/eliminarBloqueo",
                            bloqueoUID: String(bloqueoUID)
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()

                        if (respuestaServidor?.error) {
                            casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const tipoRetroceso = respuestaServidor?.tipoRetroceso
                            let vistaFinal
                            if (tipoRetroceso === "aPortada") {
                                vistaFinal = `/administracion/gestion_de_bloqueos_temporales`
                            }
                            if (tipoRetroceso === "aApartamento") {
                                vistaFinal = `/administracion/gestion_de_bloqueos_temporales/` + apartamentoIDV
                            }
                            const navegacion = {
                                vista: vistaFinal,

                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                cancelarCambios: () => {

                    const tipoBloqueo = document.querySelector("[datoBloqueo=tipoBloqueoIDV]")
                    const zona = document.querySelector("[datoBloqueo=zonaIDV]")
                    const motivo = document.querySelector("[datoBloqueo=motivoUI]")
                    const fechaInicio = document.querySelector("[calendario=entrada]")
                    const fechaFin = document.querySelector("[calendario=salida]")
                    const tipoBloqueoInicial = tipoBloqueo.getAttribute("datoInicial")
                    const zonaInicial = zona.getAttribute("datoInicial")
                    const motivoInicial = motivo.getAttribute("datoInicial") || ""
                    const fechaInicio_valorInicial = fechaInicio.getAttribute("valorInicial")
                    const fechaFin_valorInicial = fechaFin.getAttribute("valorInicial")

                    if (tipoBloqueoInicial === "rangoTemporal") {
                        const fechaInicio_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaInicio_valorInicial)
                        const fechaFinal_humana = casaVitini.utilidades.conversor.fecha_ISO_hacia_humana(fechaFin_valorInicial)

                        fechaInicio.querySelector("[fechaUI=fechaInicio]").textContent = fechaInicio_humana
                        fechaFin.querySelector("[fechaUI=fechaFin]").textContent = fechaFinal_humana
                    }

                    tipoBloqueo.value = tipoBloqueoInicial
                    zona.value = zonaInicial
                    motivo.value = motivoInicial
                    const contenedorFechas = document.querySelector("[componente=contenedorFechas]")
                    if (tipoBloqueoInicial === "rangoTemporal") {
                        contenedorFechas.style.display = "flex"
                    }
                    if (tipoBloqueoInicial === "permanente") {
                        contenedorFechas.style.display = "none"
                    }

                    const selectorNuevasPropuestas = document.querySelectorAll("[componente=bloqueNuevaPropuesta]")
                    selectorNuevasPropuestas.forEach((nuevaPropuesta) => {
                        nuevaPropuesta.remove()
                    })
                }
            },
            componentes: {
                seleccionarDia_antiguo: (dia) => {
                    let diaSeleccionadoComoElemento = dia.target;
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    let diaSeleccionado = dia.target.getAttribute("dia")
                    const diaSeleccionadoTexto = diaSeleccionado.padStart(2, "0")
                    const diaSeleccionadoNumero = Number(diaSeleccionado)
                    let mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes")
                    const mesSeleccionadoTexto = mesSeleccionado.padStart(2, "0")
                    const mesmesSeleccionadoNumero = Number(mesSeleccionado)
                    const anoSeleccionado = Number(document.querySelector("[componente=mesReferencia]").getAttribute("ano"))
                    let fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    const fechaSeleccionadaTexto = `${diaSeleccionadoTexto}/${mesSeleccionadoTexto}/${anoSeleccionado}`
                    let selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                    const memoriaVolatilInicialEntrada = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatilInicial")
                    let diaInicialEntrada
                    let mesInicialEntrada
                    let anoInicialEntrada
                    if (memoriaVolatilInicialEntrada) {
                        const memoriaVolatilInicialEntradaFormateada = memoriaVolatilInicialEntrada.split("/")
                        diaInicialEntrada = memoriaVolatilInicialEntradaFormateada[0]
                        mesInicialEntrada = memoriaVolatilInicialEntradaFormateada[1]
                        anoInicialEntrada = memoriaVolatilInicialEntradaFormateada[2]
                    }
                    const memoriaVolatilInicialSalida = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatilInicial")
                    let diaSalidaEntrada
                    let mesSalidaEntrada
                    let anoSalidaEntrada
                    if (memoriaVolatilInicialSalida) {
                        const memoriaVolatilInicialSalidaFormateada = memoriaVolatilInicialSalida.split("/")
                        diaSalidaEntrada = memoriaVolatilInicialSalidaFormateada[0]
                        mesSalidaEntrada = memoriaVolatilInicialSalidaFormateada[1]
                        anoSalidaEntrada = memoriaVolatilInicialSalidaFormateada[2]
                    }
                    const fechaEntradaVolatil_Humana = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    if (fechaEntradaVolatil_Humana) {
                        const fechaEntradaAarray = fechaEntradaVolatil_Humana.split("/")
                        diaSeleccionadoEntrada = Number(fechaEntradaAarray[0])
                        mesSeleccionadoEntrada = Number(fechaEntradaAarray[1])
                        anoSeleccionadoEntrada = Number(fechaEntradaAarray[2])
                        datosFechaEntradaSeleccionada = "existen"
                    }
                    const fechaSalidaVolatil_Humana = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    let datosFechaSalidaSeleccionada
                    if (fechaSalidaVolatil_Humana) {
                        const fechaSaliraArray = fechaSalidaVolatil_Humana.split("/")
                        diaSeleccionadoSalida = Number(fechaSaliraArray[0])
                        mesSeleccionadoSalida = Number(fechaSaliraArray[1])
                        anoSeleccionadoSalida = Number(fechaSaliraArray[2])
                        datosFechaSalidaSeleccionada = "existen"
                    }
                    selectorDias.forEach((dia) => {

                        dia.classList.remove("calendarioDiaReserva")
                        dia.classList.remove("calendarioDiaSeleccionado")
                    })
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        if (calendarioIO === "entrada") {
                            document.querySelector("[calendario=entrada][componente=fechaEntrada] [componente=bloqueNuevaPropuesta]")?.remove()
                            if (!memoriaVolatilInicialEntrada) {
                                document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")
                            }
                            if (memoriaVolatilInicialEntrada) {
                                document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", memoriaVolatilInicialEntrada)
                                if (mesInicialEntrada === mesSeleccionado && anoSeleccionado === anoInicialEntrada) {
                                    selectorDias.forEach((dia) => {
                                        if (Number(dia.getAttribute("dia")) === Number(diaInicialEntrada)) {
                                            dia.classList.add("calendarioDiaSeleccionado")
                                        }
                                        if (Number(dia.getAttribute("dia")) > Number(diaInicialEntrada) && Number(dia.getAttribute("dia")) < diaSalidaEntrada) {
                                            dia.classList.add("calendarioDiaReserva")
                                        }
                                    })
                                }
                            }
                        }
                        if (calendarioIO === "salida") {
                            document.querySelector("[calendario=salida][componente=fechaSalida] [componente=bloqueNuevaPropuesta]")?.remove()
                            if (!memoriaVolatilInicialSalida) {
                                document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")
                            }
                            if (memoriaVolatilInicialSalida) {
                                document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", memoriaVolatilInicialSalida)
                                if (mesSalidaEntrada === mesSeleccionado && anoSeleccionado === anoSalidaEntrada) {
                                    selectorDias.forEach((dia) => {
                                        if (Number(dia.getAttribute("dia")) === Number(diaSalidaEntrada)) {
                                            dia.classList.add("calendarioDiaSeleccionado")
                                        }
                                        if (Number(dia.getAttribute("dia")) < Number(diaSalidaEntrada) && Number(dia.getAttribute("dia")) > diaInicialEntrada) {
                                            dia.classList.add("calendarioDiaReserva")
                                        }
                                    })
                                }
                            }
                        }
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                    }
                    let diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    diasDisponibles.forEach(diaDisponible => {
                        diaDisponible.removeAttribute("estadoDia")
                        diaDisponible.style.background = ""
                        diaDisponible.style.color = ""
                    })
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaTexto)
                        if (fechaSalidaVolatil_Humana) {
                            if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) < diaSeleccionadoSalida) {
                                        dia.classList.remove("calendarioDiaDisponible")
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                        dia.classList.remove("calendarioDiaDisponible")
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                        const selectorBloqueFechaEntrada = document.querySelector("[calendario=entrada][componente=fechaEntrada]")
                        document.querySelector("[calendario=entrada][componente=fechaEntrada] [componente=bloqueNuevaPropuesta]")?.remove()
                        const bloqueNuevaPropuesta = document.createElement("div")
                        bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaInicio")
                        bloqueNuevaPropuesta.setAttribute("fechaInicioPropuesta", fechaSeleccionadaTexto)
                        bloqueNuevaPropuesta.textContent = `Nueva fecha de inicio de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propueda, guarde los cambios. Para cancelar pulse ne cancelar cambios.`
                        selectorBloqueFechaEntrada.appendChild(bloqueNuevaPropuesta)
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaTexto)

                        if (fechaEntradaVolatil_Humana) {
                            if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) > diaSeleccionadoEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                        const selectorBloqueFechaSalida = document.querySelector("[calendario=salida][componente=fechaSalida]")
                        document.querySelector("[calendario=salida][componente=fechaSalida] [componente=bloqueNuevaPropuesta]")?.remove()
                        const bloqueNuevaPropuesta = document.createElement("div")
                        bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaFin")
                        bloqueNuevaPropuesta.setAttribute("fechaFinPropuesta", fechaSeleccionadaTexto)
                        bloqueNuevaPropuesta.textContent = `Nueva fecha de fin de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propuesta, guarde los cambios. Para cancelar, pulse en cancelar cambios.`
                        selectorBloqueFechaSalida.appendChild(bloqueNuevaPropuesta)
                    }
                },
                seleccionarDia: (dia) => {
                    let diaSeleccionadoComoElemento = dia.target;
                    let calendario = document.querySelector("[componente=bloqueCalendario] [componente=marcoCalendario]")
                    let calendarioIO = calendario.getAttribute("calendarioIO")
                    const diaSeleccionado = dia.target.getAttribute("dia").padStart(2, "0")
                    const anoSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("ano").padStart(4, "0")
                    const mesSeleccionado = document.querySelector("[componente=mesReferencia]").getAttribute("mes").padStart(2, "0")
                    let fechaSeleccionada = {
                        dia: diaSeleccionado,
                        mes: mesSeleccionado,
                        ano: anoSeleccionado
                    }
                    const fechaSeleccionadaUI = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    const fechaSeleccionadaTexto = `${diaSeleccionado}/${mesSeleccionado}/${anoSeleccionado}`
                    let selectorDias = document.querySelectorAll("[calendarioIO] [dia]")
                    selectorDias.forEach((dia) => {

                        dia.classList.remove("calendarioDiaReserva")
                        dia.classList.remove("calendarioDiaSeleccionado")
                    })
                    if (diaSeleccionadoComoElemento.getAttribute("estadoDia") === "seleccionado") {
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        if (calendarioIO === "entrada") {
                            document.querySelector("[calendario=entrada]").removeAttribute("memoriaVolatil")

                        }
                        if (calendarioIO === "salida") {
                            document.querySelector("[calendario=salida]").removeAttribute("memoriaVolatil")

                        }
                        diaSeleccionadoComoElemento.classList.remove("calendarioDiaSeleccionado")
                        diaSeleccionadoComoElemento.removeAttribute("estadoDia")

                    }
                    let diasDisponibles = document.querySelectorAll("[estado=disponible]")
                    diasDisponibles.forEach(diaDisponible => {
                        diaDisponible.removeAttribute("estadoDia")
                        diaDisponible.style.background = ""
                        diaDisponible.style.color = ""
                    })
                    diaSeleccionadoComoElemento.setAttribute("estadoDia", "seleccionado")
                    diaSeleccionadoComoElemento.classList.add("calendarioDiaSeleccionado")
                    let fechaEntradaSelecionda = document.querySelector("[calendario=entrada]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoEntrada
                    let mesSeleccionadoEntrada
                    let anoSeleccionadoEntrada
                    let datosFechaEntradaSeleccionada
                    if (fechaEntradaSelecionda) {
                        const fechaEntradaSelecionda_array = fechaEntradaSelecionda.split("/")
                        diaSeleccionadoEntrada = fechaEntradaSelecionda_array[0]
                        diaSeleccionadoEntrada = Number(diaSeleccionadoEntrada)
                        mesSeleccionadoEntrada = fechaEntradaSelecionda_array[1]
                        mesSeleccionadoEntrada = Number(mesSeleccionadoEntrada)
                        anoSeleccionadoEntrada = fechaEntradaSelecionda_array[2]
                        anoSeleccionadoEntrada = Number(anoSeleccionadoEntrada)
                        datosFechaEntradaSeleccionada = "existen"
                    }
                    let fechaSalidaSelecionda = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                    let diaSeleccionadoSalida
                    let mesSeleccionadoSalida
                    let anoSeleccionadoSalida
                    let datosFechaSalidaSeleccionada
                    if (fechaSalidaSelecionda) {
                        const fechaSalidaSelecionda_array = fechaSalidaSelecionda.split("/")
                        diaSeleccionadoSalida = fechaSalidaSelecionda_array[0]
                        diaSeleccionadoSalida = Number(diaSeleccionadoSalida)
                        mesSeleccionadoSalida = fechaSalidaSelecionda_array[1]
                        mesSeleccionadoSalida = Number(mesSeleccionadoSalida)
                        anoSeleccionadoSalida = fechaSalidaSelecionda_array[2]
                        anoSeleccionadoSalida = Number(anoSeleccionadoSalida)
                        datosFechaSalidaSeleccionada = "existen"
                    }
                    if (calendarioIO === "entrada") {
                        document.querySelector("[calendario=entrada]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("[calendario=entrada]").setAttribute("fechaInicioFinal", fechaSeleccionadaUI)

                        if (fechaSalidaSelecionda) {
                            if (mesSeleccionadoSalida === mesSeleccionado && anoSeleccionado === anoSeleccionadoSalida) {
                                selectorDias.forEachEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado && Number(dia.getAttribute("dia")) <= diaSeleccionadoSalida) {

                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) > diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                        const selectorBloqueFechaEntrada = document.querySelector("[calendario=entrada][componente=fechaEntrada]")
                        document.querySelector("[calendario=entrada][componente=fechaEntrada] [componente=bloqueNuevaPropuesta]")?.remove()
                        const bloqueNuevaPropuesta = document.createElement("div")
                        bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaInicio")
                        bloqueNuevaPropuesta.setAttribute("fechaInicioPropuesta", fechaSeleccionadaTexto)
                        bloqueNuevaPropuesta.textContent = `Nueva fecha de inicio de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propuesta, guarde los cambios. Para cancelar, pulse en cancelar cambios.`
                        selectorBloqueFechaEntrada.appendChild(bloqueNuevaPropuesta)
                    }
                    if (calendarioIO === "salida") {
                        document.querySelector("[calendario=salida]").setAttribute("memoriaVolatil", fechaSeleccionadaUI)
                        document.querySelector("[calendario=salida]").setAttribute("fechaFinFinal", fechaSeleccionadaUI)

                        if (fechaEntradaSelecionda) {
                            if (mesSeleccionadoEntrada === mesSeleccionado && anoSeleccionado === anoSeleccionadoEntrada) {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado && Number(dia.getAttribute("dia")) >= diaSeleccionadoEntrada) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            } else {
                                selectorDias.forEach((dia) => {
                                    if (Number(dia.getAttribute("dia")) < diaSeleccionado) {
                                        dia.classList.add("calendarioDiaReserva")
                                    }
                                })
                            }
                        }
                        const selectorBloqueFechaSalida = document.querySelector("[calendario=salida][componente=fechaSalida]")
                        document.querySelector("[calendario=salida][componente=fechaSalida] [componente=bloqueNuevaPropuesta]")?.remove()
                        const bloqueNuevaPropuesta = document.createElement("div")
                        bloqueNuevaPropuesta.classList.add("adminsitracion_bloqueos_detallesBloquoes_contenedorNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("componente", "bloqueNuevaPropuesta")
                        bloqueNuevaPropuesta.setAttribute("datoBloqueo", "fechaFin")
                        bloqueNuevaPropuesta.setAttribute("fechaFinPropuesta", fechaSeleccionadaTexto)
                        bloqueNuevaPropuesta.textContent = `Nueva fecha de fin de bloqueo propuesta: ${fechaSeleccionadaUI}. Para guardar la propuesta, guarde los cambios. Para cancelar pulse en cancelar cambios.`
                        selectorBloqueFechaSalida.appendChild(bloqueNuevaPropuesta)
                    }
                },
            },
            crearBloqueo: {
                arranque: () => {
                    casaVitini.administracion.bloqueos_temporales.crearBloqueo.UI()
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/gestion_de_bloqueos/bloqueoUI")
                },
                UI: async () => {
                    const selectorEspacioBloqueos = document.querySelector("[componente=bloqueosTemporales]")
                    const contenedorGlobal = document.createElement("div")
                    contenedorGlobal.classList.add("detallesBloqueos_contenedorGlobal")
                    contenedorGlobal.setAttribute("componente", "contenedorGlobal")

                    const bloqueBloqueoUI = document.createElement("div")
                    bloqueBloqueoUI.classList.add("detallesBloqueos_bloqueBloqueoUI")
                    bloqueBloqueoUI.setAttribute("componente", "contenedorDelBloqueo")

                    const contenedorOpcionesTroncales = document.createElement("div")
                    contenedorOpcionesTroncales.classList.add("detallesloqueos_contenedorBloquesGlobales")
                    const contenedorApartamentosV2 = document.createElement("div")
                    contenedorApartamentosV2.classList.add("detallesBloqueo_contenedorTipoBloqueoV2")
                    const tipoApartamentoTituloUI = document.createElement("div")
                    tipoApartamentoTituloUI.classList.add("listaBloqueos_titulo")
                    tipoApartamentoTituloUI.classList.add("negrita")
                    tipoApartamentoTituloUI.textContent = "Apartamento: "
                    contenedorApartamentosV2.appendChild(tipoApartamentoTituloUI)
                    const tipoApartamentoUI = document.createElement("select")
                    tipoApartamentoUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                    tipoApartamentoUI.setAttribute("datoBloqueo", "apartamento")
                    tipoApartamentoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)
                    const tipoApartamentoInicio = document.createElement("option");
                    tipoApartamentoInicio.value = "";
                    tipoApartamentoInicio.selected = true;
                    tipoApartamentoInicio.disabled = true;
                    tipoApartamentoInicio.text = "Seleccionar el apartamento";
                    tipoApartamentoUI.add(tipoApartamentoInicio);
                    const apartamentosArray = await casaVitini.administracion.bloqueos_temporales.crearBloqueo.obtenerApartamentos()
                    if (apartamentosArray.length === 0) {
                        const opcion = document.createElement("option");
                        opcion.value = "";
                        opcion.disabled = true;
                        opcion.text = "No hay ningun apartamento disponible";
                        tipoApartamentoUI.add(opcion);
                    }
                    if (apartamentosArray.length > 0) {
                        apartamentosArray.forEach((detallesApartamento) => {
                            const apartamentoIDV = detallesApartamento.apartamentoIDV
                            const aparatmentoUI = detallesApartamento.apartamentoUI
                            const opcion = document.createElement("option");
                            opcion.value = apartamentoIDV;
                            opcion.text = aparatmentoUI;
                            tipoApartamentoUI.add(opcion);
                        })
                    }
                    contenedorApartamentosV2.appendChild(tipoApartamentoUI)
                    contenedorOpcionesTroncales.appendChild(contenedorApartamentosV2)
                    const contenedorTipoBloqueoV2 = document.createElement("div")
                    contenedorTipoBloqueoV2.classList.add("detallesBloqueo_contenedorTipoBloqueoV2")
                    const tipoBloqueoTituloUI = document.createElement("div")
                    tipoBloqueoTituloUI.classList.add("listaBloqueos_titulo")
                    tipoBloqueoTituloUI.classList.add("negrita")
                    tipoBloqueoTituloUI.textContent = "Tipo bloqueo"
                    contenedorTipoBloqueoV2.appendChild(tipoBloqueoTituloUI)
                    const tipoBloqueoUI = document.createElement("select")
                    tipoBloqueoUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                    tipoBloqueoUI.setAttribute("datoBloqueo", "tipoBloqueoIDV")
                    tipoBloqueoUI.addEventListener("change", casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorSelectorRangoTemporalUI)
                    const tipoBloqueoInicio = document.createElement("option");
                    tipoBloqueoInicio.value = "";
                    tipoBloqueoInicio.selected = true;
                    tipoBloqueoInicio.disabled = true;
                    tipoBloqueoInicio.text = "Seleccionar el tipo de bloqueo";
                    tipoBloqueoUI.add(tipoBloqueoInicio);
                    const opcion_permamente = document.createElement("option");
                    opcion_permamente.value = "permanente";
                    opcion_permamente.text = "Permanente";
                    tipoBloqueoUI.add(opcion_permamente);
                    const opcion_rangoTemporal = document.createElement("option");
                    opcion_rangoTemporal.value = "rangoTemporal";
                    opcion_rangoTemporal.text = "Rango temporal";
                    tipoBloqueoUI.add(opcion_rangoTemporal);
                    contenedorTipoBloqueoV2.appendChild(tipoBloqueoUI)
                    contenedorOpcionesTroncales.appendChild(contenedorTipoBloqueoV2)
                    const contenedorZonaUI = document.createElement("div")
                    contenedorZonaUI.classList.add("detallesBloqueo_contenedorZonaUI")
                    const tituloZonaUI = document.createElement("div")
                    tituloZonaUI.classList.add("litaBloqueos_tituloZona")
                    tituloZonaUI.classList.add("negrita")
                    tituloZonaUI.textContent = "Contexto de aplicación"
                    contenedorZonaUI.appendChild(tituloZonaUI)
                    const zonaUI = document.createElement("select")
                    zonaUI.classList.add("administracion_bloqueos_detallesBloqueo_listaSelec")
                    zonaUI.setAttribute("datoBloqueo", "zonaIDV")
                    const zonaInicio = document.createElement("option");
                    zonaInicio.value = "";
                    zonaInicio.selected = true;
                    zonaInicio.disabled = true;
                    zonaInicio.text = "Seleccionar en que zona se aplica en bloqueo";
                    zonaUI.add(zonaInicio);
                    const opcion_publico = document.createElement("option");
                    opcion_publico.value = "publico";
                    opcion_publico.text = "Público - Zona pública";
                    zonaUI.add(opcion_publico);
                    const opcion_privado = document.createElement("option");
                    opcion_privado.value = "privado";
                    opcion_privado.text = "Privado - Zona administrativa";
                    zonaUI.add(opcion_privado);
                    const opcion_global = document.createElement("option");
                    opcion_global.value = "global";
                    opcion_global.text = "Global - Zona pública y administrativa";
                    zonaUI.add(opcion_global);
                    contenedorZonaUI.appendChild(zonaUI)
                    contenedorOpcionesTroncales.appendChild(contenedorZonaUI)
                    bloqueBloqueoUI.appendChild(contenedorOpcionesTroncales)
                    const metadatosconstructorRangoTemporalUI = {
                        modo: "estadoInicial"
                    }
                    const selectorRangoUI = casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.selectorRangoTemporalUI(metadatosconstructorRangoTemporalUI)
                    bloqueBloqueoUI.appendChild(selectorRangoUI)

                    const motivoUI = document.createElement("textarea")
                    motivoUI.classList.add("detalleBloqueos_motivo")
                    motivoUI.setAttribute("componente", "contenedorMotivo")
                    motivoUI.setAttribute("datoBloqueo", "motivoUI")
                    motivoUI.rows = 10
                    motivoUI.placeholder = "Escriba una breve descripción de por qué existe este bloqueo. Esto ayudará a recordar rápidamente por qué existe este bloqueo, no es obligatorio pero sí recomendable."
                    bloqueBloqueoUI.appendChild(motivoUI)
                    contenedorGlobal.appendChild(bloqueBloqueoUI)
                    selectorEspacioBloqueos.appendChild(contenedorGlobal)
                    casaVitini.administracion.bloqueos_temporales.detallesDelBloqueo.controladorBotonesGlobales.crear()
                },
                transactor: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando bloqueo..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)


                    const bloqueNuevo = casaVitini.administracion.bloqueos_temporales.contructorObjeto()
                    bloqueNuevo.zona = "administracion/bloqueos/crearNuevoBloqueo"

                    const respuestaServidor = await casaVitini.shell.servidor(bloqueNuevo)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {

                        const nuevoUID = respuestaServidor?.nuevoBloqueoUID
                        const apartamentoIDV = respuestaServidor.apartamentoIDV
                        const vistaFinal = `/administracion/gestion_de_bloqueos_temporales/` + apartamentoIDV + "/" + nuevoUID
                        const navegacion = {
                            vista: vistaFinal,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                },
                obtenerApartamentos: async () => {
                    const transaccion = {
                        zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        return respuestaServidor?.ok
                    }
                }
            },
            contructorObjeto: () => {
                const apartamentoIDV = document.querySelector("[datoBloqueo=apartamento]")?.value
                const selectorTipoBloqueo = document.querySelector("[datoBloqueo=tipoBloqueoIDV]")
                const tipoBloqueoIDV = selectorTipoBloqueo.value
                const selectorZona = document.querySelector("[datoBloqueo=zonaIDV]")
                const zonaIDV = selectorZona.value
                const fechaInicio = document.querySelector("[calendario=entrada").getAttribute("memoriaVolatil")
                const fechaFin = document.querySelector("[calendario=salida]").getAttribute("memoriaVolatil")
                const selectorMotivo = document.querySelector("[datoBloqueo=motivoUI]")
                const motivo = selectorMotivo.value
                const transaccion = {
                    apartamentoIDV,
                    tipoBloqueoIDV,
                    zonaIDV,
                    motivo
                }
                if (tipoBloqueoIDV === "rangoTemporal") {
                    transaccion.fechaInicio = fechaInicio
                    transaccion.fechaFin = fechaFin
                }
                return transaccion
            }
        },
        arquitectura_del_alojamiento: {
            arranque: async () => {
                const main = document.querySelector("main")
                main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento")
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                casaVitini.administracion.arquitectura_del_alojamiento.portadaUI()
            },
            portadaUI: () => {
                const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                const contenedorBotonesPortada = document.createElement("dv")
                contenedorBotonesPortada.classList.add("confAlojamiento_contenedor")
                const botonAlojameintoUI = document.createElement("a")
                botonAlojameintoUI.classList.add("confAlojamiento_botonPortadaUI")
                botonAlojameintoUI.textContent = "Configuración del alojamiento"
                botonAlojameintoUI.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones")
                botonAlojameintoUI.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones")
                botonAlojameintoUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                contenedorBotonesPortada.appendChild(botonAlojameintoUI)
                const botonEntidadesAlojamientoUI = document.createElement("a")
                botonEntidadesAlojamientoUI.classList.add("confAlojamiento_botonPortadaUI")
                botonEntidadesAlojamientoUI.textContent = "Entidades de alojamiento"
                botonEntidadesAlojamientoUI.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades")
                botonEntidadesAlojamientoUI.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades")
                botonEntidadesAlojamientoUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                contenedorBotonesPortada.appendChild(botonEntidadesAlojamientoUI)
                espacioConfiguracionDelAlojamiento.appendChild(contenedorBotonesPortada)
            },
            entidades: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento/entidades")
                    const urlRaw = window.location.pathname;
                    let url = urlRaw.toLowerCase()
                    url = url.split("/")
                    url = url.filter((url) => url)
                    delete url[0]
                    delete url[1]
                    delete url[2]
                    url = url.filter((url) => url)
                    if (url.length === 0) {

                        casaVitini.administracion.arquitectura_del_alojamiento.entidades.portadaUI()

                    } else if (url.length === 1) {


                    } else if (url.length === 2) {


                    }
                },
                portadaUI: async () => {
                    const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                    const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                    const transaccion = {
                        zona: "administracion/arquitectura/entidades/listarEntidadesAlojamiento"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const apartamentos = respuestaServidor?.ok?.apartamentos || []
                        const habitaciones = respuestaServidor?.ok?.habitaciones || []
                        const camas = respuestaServidor?.ok?.camas || []

                        const contenedorGlobal = document.createElement("div")
                        contenedorGlobal.classList.add("confAlojamiento_entidades_contenedorGlobal")

                        const contenedorApartamentos = document.createElement("div")
                        contenedorApartamentos.classList.add("confAlojamiento_entidades_contenedor")
                        const contenedorBotonSeccionEntidad = document.createElement("div")
                        contenedorBotonSeccionEntidad.classList.add("confAlojamiento_entidades_contenedorBotones")
                        const botonAnadirApartamento = document.createElement("a")
                        botonAnadirApartamento.classList.add("confAlojamiento_entidades_botonContenedor")
                        botonAnadirApartamento.textContent = "Crear un nuevo apartamento"
                        botonAnadirApartamento.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                        botonAnadirApartamento.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                        botonAnadirApartamento.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        contenedorBotonSeccionEntidad.appendChild(botonAnadirApartamento)
                        contenedorApartamentos.appendChild(contenedorBotonSeccionEntidad)
                        const contenedorApartamentosExistentes = document.createElement("div")
                        contenedorApartamentosExistentes.classList.add("confAlojamiento_entidades_contenedorEntidades")
                        if (apartamentos.length === 0) {
                            const infoNoApartamentoUI = document.createElement("div")
                            infoNoApartamentoUI.classList.add("confAlojamiento_entidades_carteInfo")
                            infoNoApartamentoUI.textContent = "No hay nigún apartamto"
                            contenedorApartamentosExistentes.appendChild(infoNoApartamentoUI)
                        }
                        if (apartamentos.length > 0) {
                            apartamentos.forEach((detalleApartamento) => {
                                const apartamentoIDV = detalleApartamento.apartamentoIDV
                                const apartamentoUI = detalleApartamento.apartamentoUI
                                const estado = detalleApartamento.estado
                                const contenedorDetalleApartamento = document.createElement("a")
                                contenedorDetalleApartamento.classList.add("confAlojamiento_entidades_contenedorDetalles")
                                contenedorDetalleApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                contenedorDetalleApartamento.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/apartamento:" + apartamentoIDV)
                                contenedorDetalleApartamento.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/apartamento:" + apartamentoIDV)
                                contenedorDetalleApartamento.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)
                                const tituloApartamento = document.createElement("div")
                                tituloApartamento.classList.add("confAlojamiento_entidades_titulo")
                                tituloApartamento.classList.add("negrita")
                                tituloApartamento.textContent = apartamentoUI
                                contenedorDetalleApartamento.appendChild(tituloApartamento)
                                const tituloApartamentoIDV = document.createElement("div")
                                tituloApartamentoIDV.classList.add("confAlojamiento_entidades_tituloIDV")
                                tituloApartamentoIDV.textContent = apartamentoIDV
                                contenedorDetalleApartamento.appendChild(tituloApartamentoIDV)
                                contenedorApartamentosExistentes.appendChild(contenedorDetalleApartamento)
                            })
                            contenedorApartamentos.appendChild(contenedorApartamentosExistentes)
                        }
                        contenedorGlobal.appendChild(contenedorApartamentos)

                        const contenedorHabitaciones = document.createElement("div")
                        contenedorHabitaciones.classList.add("confAlojamiento_entidades_contenedor")
                        const contenedorBotonSeccionHabitacion = document.createElement("div")
                        contenedorBotonSeccionHabitacion.classList.add("confAlojamiento_entidades_contenedorBotones")
                        const botonAnadirHabitacion = document.createElement("a")
                        botonAnadirHabitacion.classList.add("confAlojamiento_entidades_botonContenedor")
                        botonAnadirHabitacion.textContent = "Crear una nueva habitación"
                        botonAnadirHabitacion.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:habitacion")
                        botonAnadirHabitacion.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:habitacion")
                        botonAnadirHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)
                        contenedorBotonSeccionHabitacion.appendChild(botonAnadirHabitacion)
                        contenedorHabitaciones.appendChild(contenedorBotonSeccionHabitacion)
                        const contenedorHabitacionesExistentes = document.createElement("div")
                        contenedorHabitacionesExistentes.classList.add("confAlojamiento_entidades_contenedorEntidades")
                        if (habitaciones.length === 0) {
                            const infoNoApartamentoUI = document.createElement("div")
                            infoNoApartamentoUI.classList.add("confAlojamiento_entidades_carteInfo")
                            infoNoApartamentoUI.textContent = "No hay ninguna habitacion construida"
                            contenedorHabitacionesExistentes.appendChild(infoNoApartamentoUI)
                        }
                        if (habitaciones.length > 0) {
                            habitaciones.forEach((detallesHabitacion) => {
                                const habitacionIDV = detallesHabitacion.habitacionIDV
                                const habitacionUI = detallesHabitacion.habitacionUI
                                const contenedorDetalleHabitacion = document.createElement("a")
                                contenedorDetalleHabitacion.classList.add("confAlojamiento_entidades_contenedorDetalles")
                                contenedorDetalleHabitacion.setAttribute("habitacionIDV", habitacionIDV)
                                contenedorDetalleHabitacion.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/habitacion:" + habitacionIDV)
                                contenedorDetalleHabitacion.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/habitacion:" + habitacionIDV)
                                contenedorDetalleHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)
                                const tituloHabitacion = document.createElement("div")
                                tituloHabitacion.classList.add("confAlojamiento_entidades_titulo")
                                tituloHabitacion.classList.add("negrita")
                                tituloHabitacion.textContent = habitacionUI
                                contenedorDetalleHabitacion.appendChild(tituloHabitacion)
                                const titulohabitacionIDV = document.createElement("div")
                                titulohabitacionIDV.classList.add("confAlojamiento_entidades_tituloIDV")
                                titulohabitacionIDV.textContent = habitacionIDV
                                contenedorDetalleHabitacion.appendChild(titulohabitacionIDV)
                                contenedorHabitacionesExistentes.appendChild(contenedorDetalleHabitacion)
                            })
                            contenedorHabitaciones.appendChild(contenedorHabitacionesExistentes)
                        }
                        contenedorGlobal.appendChild(contenedorHabitaciones)

                        const contenedorCamas = document.createElement("div")
                        contenedorCamas.classList.add("confAlojamiento_entidades_contenedor")
                        const contenedorBotonSeccionCamas = document.createElement("div")
                        contenedorBotonSeccionCamas.classList.add("confAlojamiento_entidades_contenedorBotones")
                        const botonAnadirCamas = document.createElement("a")
                        botonAnadirCamas.classList.add("confAlojamiento_entidades_botonContenedor")
                        botonAnadirCamas.textContent = "Crear una nueva cama"
                        botonAnadirCamas.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:cama")
                        botonAnadirCamas.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:cama")
                        botonAnadirCamas.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                        contenedorBotonSeccionCamas.appendChild(botonAnadirCamas)
                        contenedorCamas.appendChild(contenedorBotonSeccionCamas)
                        const contenedorCamasExistentes = document.createElement("div")
                        contenedorCamasExistentes.classList.add("confAlojamiento_entidades_contenedorEntidades")
                        if (camas.length === 0) {
                            const infoNoApartamentoUI = document.createElement("div")
                            infoNoApartamentoUI.classList.add("confAlojamiento_entidades_carteInfo")
                            infoNoApartamentoUI.textContent = "No hay ninguna habitacion construida"
                            contenedorCamasExistentes.appendChild(infoNoApartamentoUI)
                        }
                        if (camas.length > 0) {
                            camas.forEach((detallesCama) => {
                                const camaIDV = detallesCama.camaIDV
                                const camaUI = detallesCama.camaUI
                                const contenedorDetalleCama = document.createElement("a")
                                contenedorDetalleCama.classList.add("confAlojamiento_entidades_contenedorDetalles")
                                contenedorDetalleCama.setAttribute("camaIDV", camaIDV)
                                contenedorDetalleCama.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/cama:" + camaIDV)
                                contenedorDetalleCama.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/cama:" + camaIDV)
                                contenedorDetalleCama.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.traductorCambioVista)
                                const tituloCama = document.createElement("div")
                                tituloCama.classList.add("confAlojamiento_entidades_titulo")
                                tituloCama.classList.add("negrita")
                                tituloCama.textContent = camaUI
                                contenedorDetalleCama.appendChild(tituloCama)
                                const tituloCamaIDV = document.createElement("div")
                                tituloCamaIDV.classList.add("confAlojamiento_entidades_tituloIDV")
                                tituloCamaIDV.textContent = camaIDV
                                contenedorDetalleCama.appendChild(tituloCamaIDV)
                                contenedorCamasExistentes.appendChild(contenedorDetalleCama)
                            })
                            contenedorCamas.appendChild(contenedorCamasExistentes)
                        }
                        contenedorGlobal.appendChild(contenedorCamas)
                        espacioConfiguracionDelAlojamiento.appendChild(contenedorGlobal)
                    }
                },
                traductorCambioVista: (entidad) => {
                    entidad.preventDefault()
                    entidad.stopPropagation()
                    const vista = entidad.target.closest("[vista]").getAttribute("vista")
                    const entrada = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(entrada)
                },
                crearEntidad: {
                    arranque: () => {
                        const main = document.querySelector("main")
                        main.setAttribute("zonaCSS", "administracion/arquitectura_del_alojamiento/entidades/entidadUI")
                        const urlRaw = window.location.pathname;
                        let url = urlRaw.toLowerCase()
                        url = url.split("/")
                        url = url.filter((url) => url)
                        delete url[0]
                        delete url[1]
                        delete url[2]
                        delete url[3]
                        url = url.filter((url) => url)
                        const entradaTipoEntidad = url[0].split(":")
                        if (entradaTipoEntidad[0] === "tipo") {
                            const tipoEntidad = entradaTipoEntidad[1]
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.portadaUI(tipoEntidad)
                        } else {

                        }
                    },
                    portadaUI: async (entidad) => {
                        const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                        const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                        const selectorTitulo = document.querySelector("[componente=titulo]")
                        if (entidad === "apartamento") {
                            selectorTitulo.textContent = "Crear un nuevo apartamento como entidad"

                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                            contenedorEntidad.setAttribute("tipoEntidad", "apartamento")
                            const bloqueTituloApartamento = document.createElement("div")
                            bloqueTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoTituloApartamento = document.createElement("div")
                            infoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoTituloApartamento.textContent = "Escriba el nombre del apartamento. El nombre debe de ser único, no pueden existir dos apartamentos con el mismo nombre."
                            bloqueTituloApartamento.appendChild(infoTituloApartamento)
                            const campoTituloApartamento = document.createElement("input")
                            campoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoTituloApartamento.setAttribute("campo", "apartamentoUI")
                            campoTituloApartamento.placeholder = "Nombre del apartamento"
                            bloqueTituloApartamento.appendChild(campoTituloApartamento)
                            contenedorEntidad.appendChild(bloqueTituloApartamento)
                            const bloqueApartamentoIDV = document.createElement("div")
                            bloqueApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoApartamentoIDV = document.createElement("div")
                            infoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoApartamentoIDV.textContent = "Escriba un identificador visual para el apartamento, este solo puede estar compuesto por minúsculas y números, nada más ni siquiera espacios o caracteres de puntuación. Si quiere, puede dejar en blanco este campo y el sistema lo rellenará con un identificador visual automáticamente. Pero es recomendable que lo haga usted y haga un patrón sencillo para poder identificar visualmente el apartamento y si por alguna situación no se pudiera acceder al identificador de interfaz de usuario."
                            bloqueApartamentoIDV.appendChild(infoApartamentoIDV)
                            const campoApartamentoIDV = document.createElement("input")
                            campoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoApartamentoIDV.setAttribute("campo", "apartamentoIDV")
                            campoApartamentoIDV.placeholder = "Identificador visual del apartamento(ApartamentoIDV)"
                            bloqueApartamentoIDV.appendChild(campoApartamentoIDV)
                            contenedorEntidad.appendChild(bloqueApartamentoIDV)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                            const botonCrearEntidad = document.createElement("div")
                            botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                            botonCrearEntidad.textContent = "Crear nuevo apartamento como entidad"
                            botonCrearEntidad.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.crearEntidadTransactor)
                            contenedorBotones.appendChild(botonCrearEntidad)
                            contenedorEntidad.appendChild(contenedorBotones)
                            espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                        }
                        if (entidad === "habitacion") {
                            selectorTitulo.textContent = "Crear una nueva habitación como entidad"

                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                            contenedorEntidad.setAttribute("tipoEntidad", "habitacion")
                            const bloqueTituloHabitacion = document.createElement("div")
                            bloqueTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoTituloHabitacion = document.createElement("div")
                            infoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoTituloHabitacion.textContent = "Escriba el nombre de la nueva habitación. El nombre debe de ser único e irrepetible."
                            bloqueTituloHabitacion.appendChild(infoTituloHabitacion)
                            const campoTituloHabitacion = document.createElement("input")
                            campoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoTituloHabitacion.setAttribute("campo", "habitacionUI")
                            campoTituloHabitacion.placeholder = "Nombre del la habitación"
                            bloqueTituloHabitacion.appendChild(campoTituloHabitacion)
                            contenedorEntidad.appendChild(bloqueTituloHabitacion)
                            const bloqueHabitacionIDV = document.createElement("div")
                            bloqueHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoHabitacionIDV = document.createElement("div")
                            infoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoHabitacionIDV.textContent = "Escriba un identificador visual para la nueva habitación, este solo puede estar compuesto por minúsculas y números, nada más ni siquiera espacios o caracteres de puntuación. Si quiere, puede dejar en blanco este campo y el sistema lo rellenará con identificador visual automáticamente. Pero es recomendable que lo hagan ustedes y siga un patrón sencillo para poder identificar visualmente el apartamento y, por alguna situación, no se pudiera acceder al identificador de interfaz."
                            bloqueHabitacionIDV.appendChild(infoHabitacionIDV)
                            const campoHabitacionIDV = document.createElement("input")
                            campoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoHabitacionIDV.setAttribute("campo", "habitacionIDV")
                            campoHabitacionIDV.placeholder = "Identificador visual de la habitación(HabitacionIDV)"
                            bloqueHabitacionIDV.appendChild(campoHabitacionIDV)
                            contenedorEntidad.appendChild(bloqueHabitacionIDV)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                            const botonCrearEntidad = document.createElement("div")
                            botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                            botonCrearEntidad.textContent = "Crear nueva habitación como entidad"
                            botonCrearEntidad.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.crearEntidadTransactor)
                            contenedorBotones.appendChild(botonCrearEntidad)
                            contenedorEntidad.appendChild(contenedorBotones)
                            espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                        }
                        if (entidad === "cama") {
                            selectorTitulo.textContent = "Crear una nueva cama como entidad"

                            const contenedorEntidad = document.createElement("div")
                            contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                            contenedorEntidad.setAttribute("tipoEntidad", "cama")
                            const bloqueTituloCama = document.createElement("div")
                            bloqueTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoTituloCama = document.createElement("div")
                            infoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoTituloCama.textContent = "Escriba el nombre de la nueva cama.El nombre debe de ser único e irrepetible"
                            bloqueTituloCama.appendChild(infoTituloCama)
                            const campoTituloCama = document.createElement("input")
                            campoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoTituloCama.setAttribute("campo", "camaUI")
                            campoTituloCama.placeholder = "Nombre del la cama"
                            bloqueTituloCama.appendChild(campoTituloCama)
                            contenedorEntidad.appendChild(bloqueTituloCama)
                            const bloqueCamaIDV = document.createElement("div")
                            bloqueCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoCamaIDV = document.createElement("div")
                            infoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoCamaIDV.textContent = "Escriba un identificador visual para la nueva cama, este solo puede estar compuesto por minúsculas y números, nada más ni siquiera espacios o caracteres de puntuación. Si quiere, puede dejar en blanco este campo y el sistema lo rellenará con identificador visual automáticamente. Pero es recomendable que lo hagan ustedes y siga un patrón sencillo para poder identificar visualmente el apartamento y, por alguna situación, no se pudiera acceder al identificador de interfaz."
                            bloqueCamaIDV.appendChild(infoCamaIDV)
                            const campoCamaIDV = document.createElement("input")
                            campoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoCamaIDV.placeholder = "Identificador visual de la cama(CamaIDV)"
                            campoCamaIDV.setAttribute("campo", "camaIDV")
                            bloqueCamaIDV.appendChild(campoCamaIDV)
                            contenedorEntidad.appendChild(bloqueCamaIDV)
                            const bloqueCapacidadPernoctativa = document.createElement("div")
                            bloqueCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                            const infoCaapacidadPernoctativa = document.createElement("div")
                            infoCaapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_info")
                            infoCaapacidadPernoctativa.textContent = "Escriba la capacidad pernoctativa de la cama."
                            bloqueCapacidadPernoctativa.appendChild(infoCaapacidadPernoctativa)
                            const campoCapacidadPernoctativa = document.createElement("input")
                            campoCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                            campoCapacidadPernoctativa.placeholder = "Escriba el número de plazas de la cama, por ejemplo: 2."
                            campoCapacidadPernoctativa.setAttribute("campo", "capacidad")
                            bloqueCapacidadPernoctativa.appendChild(campoCapacidadPernoctativa)
                            contenedorEntidad.appendChild(bloqueCapacidadPernoctativa)

                            const contenedorSelector = document.createElement("div")
                            contenedorSelector.classList.add(
                                "padding6",
                                "flexVertical",
                                "gap6"
                            )
                            contenedorEntidad.appendChild(contenedorSelector)

                            const infoSelector = document.createElement("div")
                            infoSelector.textContent = "Selecciona el tipo de cama. La cama compartida es aquella que puede ser insertada en varias configuraciones de alojamiento diferentes, mientras que la cama del tipo físico es aquella que, es usada como cama extra."
                            contenedorSelector.appendChild(infoSelector)

                            const selectorTipoCama = document.createElement("select")
                            selectorTipoCama.setAttribute("campo", "tipoCama")
                            selectorTipoCama.classList.add(
                                "padding10",
                                "borderRadius10",
                                "backgroundGrey1",
                                "simplificadorCampo"
                            )
                            const opcion = document.createElement("option");
                            opcion.value = "";
                            opcion.disabled = true;
                            opcion.selected = true;
                            opcion.text = "Selecciona el tipo de cama";
                            selectorTipoCama.add(opcion);
                            const opcionCamaCompartida = document.createElement("option");
                            opcionCamaCompartida.value = "compartida";
                            opcionCamaCompartida.text = "Compartida";
                            selectorTipoCama.add(opcionCamaCompartida);
                            const opcionCamaFisica = document.createElement("option");
                            opcionCamaFisica.value = "fisica";
                            opcionCamaFisica.text = "Física";
                            selectorTipoCama.add(opcionCamaFisica);
                            contenedorSelector.appendChild(selectorTipoCama)

                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                            const botonCrearEntidad = document.createElement("div")
                            botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                            botonCrearEntidad.textContent = "Crear nueva cama como entidad"
                            botonCrearEntidad.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.crearEntidad.crearEntidadTransactor)
                            contenedorBotones.appendChild(botonCrearEntidad)
                            contenedorEntidad.appendChild(contenedorBotones)
                            espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                        }
                    },
                    crearEntidadTransactor: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Creando entidad..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const transaccion = {
                            zona: "administracion/arquitectura/entidades/crearEntidadAlojamiento"
                        }
                        const selectorTipoEntidad = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                        transaccion.tipoEntidad = selectorTipoEntidad
                        const selectorCampos = document.querySelectorAll("[campo]")
                        selectorCampos.forEach((campo) => {
                            const nombreCampo = campo.getAttribute("campo")
                            const datoCampo = campo.value
                            transaccion[nombreCampo] = datoCampo
                        })

                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const nuevoUID = respuestaServidor?.nuevoUID
                            const vista = `/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/${selectorTipoEntidad}:${nuevoUID}`
                            const navegacion = {
                                vista: vista,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                editarEntidad: {
                    arranque: () => {
                        const main = document.querySelector("main")

                        main.setAttribute("zonaCSS", "administracion/arquitectura_del_alojamiento/entidades/entidadUI")
                        const granuladorURL = casaVitini.utilidades.granuladorURL()
                        const parametros = granuladorURL.parametros
                        casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.portadaUI(Object.entries(parametros)[0])
                    },
                    portadaUI: async (entidadMatriz) => {
                        const seccionRenderizadaOrigen = document.querySelector("main")
                        const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                        const espacioBotonesGlobales = document.querySelector("[componente=espacioBotonesGlobales]")
                        const espacioConfiguracionDelAlojamiento = document.querySelector("[componente=configuracionDelAlojamiento]")
                        const selectorTitulo = document.querySelector("[componente=titulo]")
                        const tipoEntidad = entidadMatriz[0]
                        const entidadIDV = entidadMatriz[1]
                        if (tipoEntidad === "apartamento") {
                            if (!entidadIDV) {

                            }
                            const transaccion = {
                                zona: "administracion/arquitectura/entidades/detallesDeEntidadDeAlojamiento",
                                tipoEntidad: "apartamento",
                                entidadIDV: entidadIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                            const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)

                            if (!seccionRenderizada) { return }
                            if (respuestaServidor?.error) {
                                const info = {
                                    titulo: "No existe ningún apartamento como entidad con ese identificadorIDV",
                                    descripcion: "No existe la entidad que buscas. Por favor, revisa el identificadorIDV que solicitaste porque este no existe. Quizás este identificador fue de una entidad de alojamiento que tuviste en el pasado y que borraste."
                                }
                                casaVitini.ui.componentes.mensajeSimple(info)
                            }
                            if (respuestaServidor?.ok) {

                                const apartamentoIDV = respuestaServidor?.ok.apartamentoIDV
                                const apartamentoUI = respuestaServidor?.ok.apartamentoUI

                                const caracteristicas = respuestaServidor.caracteristicas
                                selectorTitulo.textContent = "Editar apartamento como entidad"
                                const contenedorEntidad = document.createElement("div")
                                contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                                contenedorEntidad.setAttribute("tipoEntidad", "apartamento")
                                contenedorEntidad.setAttribute("entidadIDV", apartamentoIDV)
                                const contenedorEntidadDatos = document.createElement("div")
                                contenedorEntidadDatos.classList.add("confAlojamiento_entidades_editarEntidad_contenedorEntidadDatos")
                                contenedorEntidadDatos.setAttribute("componente", "contenedorEntidadDatos")
                                const bloqueTituloApartamento = document.createElement("div")
                                bloqueTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoTituloApartamento = document.createElement("div")
                                infoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoTituloApartamento.textContent = "Nombre del apartamento"
                                bloqueTituloApartamento.appendChild(infoTituloApartamento)
                                const campoTituloApartamento = document.createElement("input")
                                campoTituloApartamento.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoTituloApartamento.placeholder = "Escriba un nombre para el apartamento"
                                campoTituloApartamento.setAttribute("valorInicial", apartamentoUI)
                                campoTituloApartamento.setAttribute("campo", "apartamentoUI")
                                campoTituloApartamento.value = apartamentoUI
                                bloqueTituloApartamento.appendChild(campoTituloApartamento)
                                contenedorEntidadDatos.appendChild(bloqueTituloApartamento)
                                const bloqueApartamentoIDV = document.createElement("div")
                                bloqueApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoApartamentoIDV = document.createElement("div")
                                infoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoApartamentoIDV.textContent = "Identificador visual del apartamento"
                                bloqueApartamentoIDV.appendChild(infoApartamentoIDV)
                                const campoApartamentoIDV = document.createElement("input")
                                campoApartamentoIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoApartamentoIDV.placeholder = "Identificador visual del apartamento(apartamentoIDV)"
                                campoApartamentoIDV.setAttribute("valorInicial", apartamentoIDV)
                                campoApartamentoIDV.setAttribute("componente", "entidadIDV")
                                campoApartamentoIDV.setAttribute("campo", "apartamentoIDV")
                                campoApartamentoIDV.value = apartamentoIDV
                                bloqueApartamentoIDV.appendChild(campoApartamentoIDV)
                                contenedorEntidadDatos.appendChild(bloqueApartamentoIDV)
                                const superBloqueCaracteristicas = document.createElement("div")
                                superBloqueCaracteristicas.classList.add("contenedorCaracteristicas")
                                const infoSuperficie = document.createElement("div")
                                infoSuperficie.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoSuperficie.textContent = "Características del apartamento"
                                superBloqueCaracteristicas.appendChild(infoSuperficie)
                                const contenedorCaracteristicas = document.createElement("div")
                                contenedorCaracteristicas.classList.add("administracion_arquitectura_entidades_detallesEntidad_contenedorCaracteristicas")
                                contenedorCaracteristicas.setAttribute("contenedor", "caracteristicas")
                                contenedorCaracteristicas.setAttribute("caracteristicasIniciales", JSON.stringify(caracteristicas))
                                for (const caracteristica of caracteristicas) {
                                    const filaCaracteristicaUI = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.caracteristicasUI(caracteristica)
                                    contenedorCaracteristicas.appendChild(filaCaracteristicaUI)
                                }
                                superBloqueCaracteristicas.appendChild(contenedorCaracteristicas)
                                const botonAnadirCaracteristica = document.createElement("div")
                                botonAnadirCaracteristica.classList.add("administracion_arquitectura_entidades_detallesEntidad_botonAnadir")
                                botonAnadirCaracteristica.textContent = "Añadir caracteristica"
                                botonAnadirCaracteristica.addEventListener("click", () => {
                                    const selectorContenedorCaracteristicas = document.querySelector("[contenedor=caracteristicas]")
                                    const filaCaracteristicaUI = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.caracteristicasUI()
                                    selectorContenedorCaracteristicas.appendChild(filaCaracteristicaUI)
                                })
                                superBloqueCaracteristicas.appendChild(botonAnadirCaracteristica)
                                contenedorEntidadDatos.appendChild(superBloqueCaracteristicas)
                                contenedorEntidad.appendChild(contenedorEntidadDatos)
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                                contenedorBotones.setAttribute("componente", "contenedorBotonEditar")
                                const botonCrearEntidad = document.createElement("div")
                                botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                                botonCrearEntidad.textContent = "Editar apartamento como entidad"
                                botonCrearEntidad.addEventListener("click", () => {
                                    casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("editar")
                                })
                                contenedorBotones.appendChild(botonCrearEntidad)
                                contenedorEntidad.appendChild(contenedorBotones)
                                const botonesOpcionesEdicion = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.botonesEdicion()
                                contenedorEntidad.appendChild(botonesOpcionesEdicion)
                                espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                            }

                        } else if (tipoEntidad === "habitacion") {
                            if (!entidadIDV) {

                            }
                            const transaccion = {
                                zona: "administracion/arquitectura/entidades/detallesDeEntidadDeAlojamiento",
                                tipoEntidad: "habitacion",
                                entidadIDV: entidadIDV
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                            if (!seccionRenderizada) { return }
                            if (respuestaServidor?.error) {
                                const info = {
                                    titulo: "No existe ninguna habitación como entidad con ese identificador",
                                    descripcion: "No existe la entidad que buscas. Por favor, revisa el identificador que solicitaste porque este no existe. Quizás este identificador fue de una entidad de alojamiento que tuviste en el pasado y que borraste."
                                }
                                casaVitini.ui.componentes.mensajeSimple(info)
                            }
                            if (respuestaServidor?.ok) {
                                const habitacionIDV = respuestaServidor?.ok.habitacionIDV
                                const habitacionUI = respuestaServidor?.ok.habitacionUI
                                selectorTitulo.textContent = "Editar habitación como entidad"
                                const contenedorEntidad = document.createElement("div")
                                contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                                contenedorEntidad.setAttribute("tipoEntidad", "habitacion")
                                contenedorEntidad.setAttribute("entidadIDV", habitacionIDV)
                                const contenedorEntidadDatos = document.createElement("div")
                                contenedorEntidadDatos.classList.add("confAlojamiento_entidades_editarEntidad_contenedorEntidadDatos")
                                contenedorEntidadDatos.setAttribute("componente", "contenedorEntidadDatos")
                                const bloqueTituloHabitacion = document.createElement("div")
                                bloqueTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoTituloHabitacion = document.createElement("div")
                                infoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoTituloHabitacion.textContent = "Nombre de la habitación"
                                bloqueTituloHabitacion.appendChild(infoTituloHabitacion)
                                const campoTituloHabitacion = document.createElement("input")
                                campoTituloHabitacion.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoTituloHabitacion.placeholder = "Escriba un nombre para la habitación"
                                campoTituloHabitacion.setAttribute("valorInicial", habitacionUI)
                                campoTituloHabitacion.setAttribute("campo", "habitacionUI")
                                campoTituloHabitacion.value = habitacionUI
                                bloqueTituloHabitacion.appendChild(campoTituloHabitacion)
                                contenedorEntidadDatos.appendChild(bloqueTituloHabitacion)
                                const bloqueHabitacionIDV = document.createElement("div")
                                bloqueHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoHabitacionIDV = document.createElement("div")
                                infoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoHabitacionIDV.textContent = "Identificador visual de la nueva habitación"
                                bloqueHabitacionIDV.appendChild(infoHabitacionIDV)
                                const campoHabitacionIDV = document.createElement("input")
                                campoHabitacionIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoHabitacionIDV.placeholder = "Identificador visual de la habitación(HabitacionIDV)"
                                campoHabitacionIDV.setAttribute("valorInicial", habitacionIDV)
                                campoHabitacionIDV.setAttribute("componente", "entidadIDV")
                                campoHabitacionIDV.setAttribute("campo", "habitacionIDV")
                                campoHabitacionIDV.value = habitacionIDV
                                bloqueHabitacionIDV.appendChild(campoHabitacionIDV)
                                contenedorEntidadDatos.appendChild(bloqueHabitacionIDV)
                                contenedorEntidad.appendChild(contenedorEntidadDatos)
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                                contenedorBotones.setAttribute("componente", "contenedorBotonEditar")
                                const botonCrearEntidad = document.createElement("div")
                                botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                                botonCrearEntidad.textContent = "Editar habitación como entidad"
                                botonCrearEntidad.addEventListener("click", () => {
                                    casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("editar")
                                })
                                contenedorBotones.appendChild(botonCrearEntidad)
                                contenedorEntidad.appendChild(contenedorBotones)
                                const botonesOpcionesEdicion = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.botonesEdicion()
                                contenedorEntidad.appendChild(botonesOpcionesEdicion)
                                espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                            }

                        } else if (tipoEntidad === "cama") {
                            if (!entidadIDV) {

                            }
                            const transaccion = {
                                zona: "administracion/arquitectura/entidades/detallesDeEntidadDeAlojamiento",
                                tipoEntidad: "cama",
                                entidadIDV: entidadIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                            if (!seccionRenderizada) { return }
                            if (respuestaServidor?.error) {
                                const info = {
                                    titulo: "No existe ninguna cama como entidad con ese identificador",
                                    descripcion: "No existe la entidad que buscas. Por favor, revisa el identificador que solicitaste porque este no existe. Quizás este identificador fue de una entidad de alojamiento que tuviste en el pasado y que borraste."
                                }
                                casaVitini.ui.componentes.mensajeSimple(info)
                            }
                            if (respuestaServidor?.ok) {
                                const camaIDV = respuestaServidor?.ok.camaIDV
                                const tipoIDV = respuestaServidor?.ok.tipoIDV
                                const camaUI = respuestaServidor?.ok.camaUI
                                const capacidad = respuestaServidor?.ok.capacidad



                                const tipoCamaUI = (tipoIDV) => {
                                    if (tipoIDV === "compartida") {
                                        return "Compartida"
                                    } else if (tipoIDV === "fisica") {
                                        return "Física"
                                    }
                                }



                                selectorTitulo.textContent = "Editar cama como entidad"
                                const contenedorEntidad = document.createElement("div")
                                contenedorEntidad.classList.add("confAlojamiento_entidades_crearEntidad_contenedorEntidad")
                                contenedorEntidad.setAttribute("tipoEntidad", "cama")
                                contenedorEntidad.setAttribute("entidadIDV", camaIDV)
                                const contenedorEntidadDatos = document.createElement("div")
                                contenedorEntidadDatos.classList.add("confAlojamiento_entidades_editarEntidad_contenedorEntidadDatos")
                                contenedorEntidadDatos.setAttribute("componente", "contenedorEntidadDatos")
                                const bloqueTituloCama = document.createElement("div")
                                bloqueTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")


                                const infoDescription = document.createElement("div")
                                infoDescription.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoDescription.textContent = "Editar una cama como entidad creada, actualizará el nombre de la cama y su identificador visual si se cambian en las reservas activas presentes y futuras para preservas la integridad de los datos."
                                bloqueTituloCama.appendChild(infoDescription)

                                const infoTituloCama = document.createElement("div")
                                infoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoTituloCama.textContent = "Nombre de la cama"
                                bloqueTituloCama.appendChild(infoTituloCama)

                                const campoTituloCama = document.createElement("input")
                                campoTituloCama.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoTituloCama.placeholder = "Escriba un nombre para la cama"
                                campoTituloCama.setAttribute("valorInicial", camaUI)
                                campoTituloCama.setAttribute("campo", "camaUI")
                                campoTituloCama.value = camaUI
                                bloqueTituloCama.appendChild(campoTituloCama)
                                contenedorEntidadDatos.appendChild(bloqueTituloCama)
                                const bloqueCamaIDV = document.createElement("div")
                                bloqueCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoCamaIDV = document.createElement("div")
                                infoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoCamaIDV.textContent = "Identificador visual de la nueva cama"
                                bloqueCamaIDV.appendChild(infoCamaIDV)
                                const campoCamaIDV = document.createElement("input")
                                campoCamaIDV.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoCamaIDV.placeholder = "Identificador visual de la cama(camaIDV)"
                                campoCamaIDV.setAttribute("valorInicial", camaIDV)
                                campoCamaIDV.setAttribute("componente", "entidadIDV")
                                campoCamaIDV.setAttribute("campo", "camaIDV")
                                campoCamaIDV.value = camaIDV
                                bloqueCamaIDV.appendChild(campoCamaIDV)
                                contenedorEntidadDatos.appendChild(bloqueCamaIDV)
                                contenedorEntidad.appendChild(contenedorEntidadDatos)
                                const bloqueCapacidadPernoctativa = document.createElement("div")
                                bloqueCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_bloqueTitulo")
                                const infoCapacidadPernoctativa = document.createElement("div")
                                infoCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_info")
                                infoCapacidadPernoctativa.textContent = "Capacidad pernoctativa de la cama"
                                bloqueCapacidadPernoctativa.appendChild(infoCapacidadPernoctativa)
                                const campoCapacidadPernoctativa = document.createElement("input")
                                campoCapacidadPernoctativa.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                                campoCapacidadPernoctativa.placeholder = "Escriba la capaciad pernoctativa de la cama por ejemplo 2"
                                campoCapacidadPernoctativa.setAttribute("valorInicial", capacidad)
                                campoCapacidadPernoctativa.setAttribute("campo", "capacidad")
                                campoCapacidadPernoctativa.value = capacidad
                                bloqueCapacidadPernoctativa.appendChild(campoCapacidadPernoctativa)
                                contenedorEntidadDatos.appendChild(bloqueCapacidadPernoctativa)

                                const contenedorTipoInfoCama = document.createElement("div")
                                contenedorTipoInfoCama.classList.add(
                                    "flexVertical",
                                    "padding6",
                                )
                                contenedorEntidadDatos.appendChild(contenedorTipoInfoCama)

                                const tituloTipoCama = document.createElement("div")
                                tituloTipoCama.classList.add(
                                    "negrita",
                                    "padding6"
                                )
                                tituloTipoCama.textContent = "Tipo cama"

                                contenedorTipoInfoCama.appendChild(tituloTipoCama)

                                const infoSelector = document.createElement("div")
                                infoSelector.classList.add(
                                    "padding6"
                                )
                                infoSelector.textContent = tipoCamaUI(tipoIDV)
                                infoSelector.setAttribute("tipoIDV", tipoIDV)

                                contenedorTipoInfoCama.appendChild(infoSelector)

                                contenedorEntidad.appendChild(contenedorEntidadDatos)
                                const contenedorBotones = document.createElement("div")
                                contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                                contenedorBotones.setAttribute("componente", "contenedorBotonEditar")
                                const botonCrearEntidad = document.createElement("div")
                                botonCrearEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                                botonCrearEntidad.textContent = "Editar cama como entidad"
                                botonCrearEntidad.addEventListener("click", () => {
                                    casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("editar")
                                })
                                contenedorBotones.appendChild(botonCrearEntidad)
                                contenedorEntidad.appendChild(contenedorBotones)
                                const botonesOpcionesEdicion = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.botonesEdicion()
                                contenedorEntidad.appendChild(botonesOpcionesEdicion)
                                espacioConfiguracionDelAlojamiento.appendChild(contenedorEntidad)
                            }

                        } else {
                            const info = {
                                titulo: "No existe ninguna entidad con ese identificador",
                                descripcion: "No existe la entidad que buscas. Por favor, revisa el identificador que solicitaste porque este no existe. Quizás este identificador fue de una entidad de alojamiento que tuviste en el pasado y que borraste."
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }




                    },
                    botonesEdicion: () => {
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("confAlojamiento_entidades_crearEntidad_contenedorBotones")
                        contenedorBotones.setAttribute("componente", "contenedorOpcionesDeEdicion")
                        contenedorBotones.style.display = "none"
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonGuardarCambios.textContent = "Guardar cambios"
                        botonGuardarCambios.addEventListener("click", () => {
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.guardarCambios()
                        })
                        contenedorBotones.appendChild(botonGuardarCambios)
                        const botonEliminarEntidad = document.createElement("div")
                        botonEliminarEntidad.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonEliminarEntidad.textContent = "Eliminar entidad"
                        botonEliminarEntidad.addEventListener("click", () => {
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.eliminarEntidad.UI()
                        })
                        contenedorBotones.appendChild(botonEliminarEntidad)
                        const botonCancelarCambios = document.createElement("div")
                        botonCancelarCambios.classList.add("confAlojamiento_entidades_createEntiad_boton")
                        botonCancelarCambios.textContent = "Cancelar cambios"
                        botonCancelarCambios.addEventListener("click", () => {
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("cancelar")
                        })
                        contenedorBotones.appendChild(botonCancelarCambios)
                        return contenedorBotones
                    },
                    controladorModoEditar: (modo) => {
                        if (modo !== "editar" && modo !== "cancelar" && modo !== "guardado") {
                            const error = "El componente controladorModoEditar no comprende el parámetro"
                            casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                        const selectorContenedorBotonEditar = document.querySelector("[componente=contenedorBotonEditar]")
                        const selectorContenedorOpcionesEdicion = document.querySelector("[componente=contenedorOpcionesDeEdicion]")
                        const selectorContenedorEntidadDatos = document.querySelector("[componente=contenedorEntidadDatos]")
                        if (modo === "editar") {
                            selectorContenedorBotonEditar.style.display = "none"
                            selectorContenedorOpcionesEdicion.style.display = "flex"
                            selectorContenedorEntidadDatos.style.pointerEvents = "all"
                        }
                        if (modo === "guardado") {
                            selectorContenedorBotonEditar.style.display = "flex"
                            selectorContenedorOpcionesEdicion.style.display = "none"
                            selectorContenedorEntidadDatos.style.pointerEvents = "none"
                        }
                        if (modo === "cancelar") {
                            selectorContenedorBotonEditar.style.display = "flex"
                            selectorContenedorOpcionesEdicion.style.display = "none"
                            selectorContenedorEntidadDatos.removeAttribute("style")
                            const selectorCampos = document.querySelectorAll("[campo]")
                            selectorCampos.forEach((campo) => {
                                const valorInicial = campo.getAttribute("valorInicial")
                                if (valorInicial) {
                                    campo.value = valorInicial
                                } else {
                                    campo.parentElement.remove()
                                }
                            })
                            const contenedorCaracteristicas = document.querySelector("[contenedor=caracteristicas]")
                            if (contenedorCaracteristicas) {
                                const caracteristicasApartamento = contenedorCaracteristicas.getAttribute("caracteristicasIniciales")
                                const caracteristicasParseadas = caracteristicasApartamento ? JSON.parse(caracteristicasApartamento) : []
                                contenedorCaracteristicas.innerHTML = null
                                for (const caracteristica of caracteristicasParseadas) {

                                    const filaCaracteristicaUI = casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.caracteristicasUI(caracteristica)
                                    contenedorCaracteristicas.appendChild(filaCaracteristicaUI)
                                }
                            }
                        }
                    },
                    guardarCambios: async () => {

                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando entidad..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const selectorTipoEntidada = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                        const entidadIDV = document.querySelector("[entidadIDV]").getAttribute("entidadIDV")
                        const metadatos = {
                            zona: "administracion/arquitectura/entidades/modificarEntidadAlojamiento",
                            tipoEntidad: selectorTipoEntidada,
                            entidadIDV
                        }

                        const selectorCampos = document.querySelectorAll("[campo]")
                        selectorCampos.forEach((campo) => {
                            const nombreCampo = campo.getAttribute("campo")
                            if (nombreCampo !== "caracteristica") {
                                const datoCampo = campo.value
                                metadatos[nombreCampo] = datoCampo
                            }
                        })

                        if (selectorTipoEntidada === "apartamento") {
                            metadatos.caracteristicas = []
                            const selectorCaracteristicas = document.querySelectorAll("[campo=caracteristica]")
                            selectorCaracteristicas.forEach((caracteristica) => {
                                const valorActual = caracteristica.value.trim()
                                if (valorActual) {
                                    metadatos.caracteristicas.push(valorActual)
                                }

                            })
                        }

                        const respuestaServidor = await casaVitini.shell.servidor(metadatos)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const selectorComponenteEntidadIDV = document.querySelector("[componente=entidadIDV]").value
                            document.querySelector("[entidadIDV]").setAttribute("entidadIDV", selectorComponenteEntidadIDV)
                            const selectorCampos = document.querySelectorAll("[campo]")
                            selectorCampos.forEach((campo) => {
                                const datoCampo = campo.value
                                campo.setAttribute("valorInicial", datoCampo)
                            })
                            const listaCaracteristicas = respuestaServidor.apartamentoComoEntidadActualziado?.caracteristicas

                            if (selectorTipoEntidada === "apartamento" && listaCaracteristicas) {
                                const contenedorCaracteristicas = document.querySelector("[contenedor=caracteristicas]")
                                contenedorCaracteristicas.setAttribute("caracteristicasIniciales", JSON.stringify(listaCaracteristicas))
                            }




                            const entidadIDV = document.querySelector("[entidadIDV]").getAttribute("entidadIDV")
                            const urlVista = "/administracion/arquitectura_del_alojamiento/entidades/editar_entidad/" + selectorTipoEntidada + ":" + entidadIDV;
                            const navegacion = {
                                vista: urlVista,
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                            casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.controladorModoEditar("guardado")
                        }
                    },
                    eliminarEntidad: {
                        UI: async () => {
                            const tipoEntidad = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                            let entidadUI
                            let textoDescriptivo
                            let tituloAdvertencia
                            if (tipoEntidad === "apartamento") {
                                entidadUI = document.querySelector("[campo=apartamentoUI]").getAttribute("valorInicial")
                                tituloAdvertencia = "Confirmar eliminar el apartamento como entidad"
                                textoDescriptivo = "Vas a eliminar este apartamento como entidad. Esto implica eliminar el apartamento como entidad, el perfil de precio del apartamento, los comportamientos de precios y los bloqueos asociados a este apartamento. Sus implicaciones son inmediatas. ¿Quieres confirmar la eliminación de este apartamento como entidad? "
                            }
                            if (tipoEntidad === "habitacion") {
                                entidadUI = document.querySelector("[campo=habitacionUI]").getAttribute("valorInicial")
                                tituloAdvertencia = "Confirmar eliminar la habitación como entidad"
                                textoDescriptivo = "Vas a eliminar esta habitación como entidad. Esto implica eliminar la habitación como entidad y su existencia en las configuraciones de alojamiento. Esto implica que el apartamento que contenía esta habitación dejará de mostrarla por su inexistencia. Sus implicaciones son inmediatas. ¿Quieres confirmar la eliminación de esta habitación como entidad ?"
                            }
                            if (tipoEntidad === "cama") {
                                entidadUI = document.querySelector("[campo=camaUI]").getAttribute("valorInicial")
                                tituloAdvertencia = "Confirmar eliminar la cama como entidad"
                                textoDescriptivo = "Vas a eliminar esta cama como entidad. Esto implica eliminar la cama como entidad y su existencia en las configuraciones de alojamiento. Esto implica que las habitaciones que contenían esta cama dejarán de mostrarla por su inexistencia. Sus implicaciones son inmediatas. ¿Quieres confirmar la eliminación de esta cama como entidad? "
                            }

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = tituloAdvertencia
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = textoDescriptivo

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = "Comfirmar la eliminacion"
                            botonAceptar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.entidades.editarEntidad.eliminarEntidad.confirmar)
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar la eliminacion"

                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        confirmar: async () => {


                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Eliminado..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)

                            const tipoEntidad = document.querySelector("[tipoEntidad]").getAttribute("tipoEntidad")
                            const entidadIDV = document.querySelector("[entidadIDV]").getAttribute("entidadIDV")
                            const transaccion = {
                                zona: "administracion/arquitectura/entidades/eliminarEntidadAlojamiento",
                                tipoEntidad: tipoEntidad,
                                entidadIDV: entidadIDV
                            }

                            if (tipoEntidad === "cama") {
                                const tipoIDV = document.querySelector("[tipoIDV]").getAttribute("tipoIDV")
                                transaccion.tipoIDV = tipoIDV

                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()

                            if (respuestaServidor?.error) {
                                let selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                    advertenciaInmersiva.remove()
                                })
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const vista = `/administracion/arquitectura_del_alojamiento/entidades`
                                const navegacion = {
                                    vista: vista,

                                }
                                casaVitini.shell.navegacion.controladorVista(navegacion)
                            }
                        }
                    },
                    caracteristicasUI: (data) => {
                        const caracteristicaUI = data?.caracteristicaUI || ""
                        const caracteristicaFila = document.createElement("div")
                        caracteristicaFila.classList.add("administracion_arquitectura_entidades_detallesEntidad_filaCaracteristica")
                        caracteristicaFila.setAttribute("contenedor", "caracteristica")
                        const campoCaracteristica = document.createElement("input")
                        campoCaracteristica.classList.add("confAlojamiento_entidades_crearEntidad_campoEntrada")
                        campoCaracteristica.placeholder = "Escriba la superficie del apartamento"
                        campoCaracteristica.setAttribute("valorInicial", caracteristicaUI)
                        campoCaracteristica.placeholder = "Escriba la característica"
                        campoCaracteristica.setAttribute("campo", "caracteristica")
                        campoCaracteristica.value = caracteristicaUI || ""
                        caracteristicaFila.appendChild(campoCaracteristica)
                        const botonBorrar = document.createElement("div")
                        botonBorrar.classList.add("administracion_arquitectura_entidades_detallesEntidad_botonBorrarFila")
                        botonBorrar.textContent = "Borrar"
                        botonBorrar.addEventListener("click", (e) => {
                            e.target.closest("[contenedor=caracteristica]").remove()
                        })
                        caracteristicaFila.appendChild(botonBorrar)
                        return caracteristicaFila
                    }
                }
            },
            configuraciones: {
                arranque: async () => {
                    const main = document.querySelector("main")
                    const urlRaw = window.location.pathname;
                    let url = urlRaw.toLowerCase()
                    url = url.split("/")
                    url = url.filter((url) => url)
                    delete url[0]
                    delete url[1]
                    delete url[2]
                    url = url.filter((url) => url)
                    if (url.length === 0) {
                        main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento/configuraciones")
                        casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.portadaUI()
                    } else if (url.length === 1) {
                        main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento/configuraciones/detalles")
                        const apartamentoIDV = url
                        casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.portadaUI(apartamentoIDV)
                    } else if (url.length === 2) {

                    }
                },
                portadaUI: async () => {
                    const selectorEspacioConfiguracionDelALojamiento = document.querySelector(" [componente=espacioConfiguracionDelAlojamiento]")
                    const espacioBotonesGlobales = document.createElement("div")
                    espacioBotonesGlobales.classList.add("espacioBotonesGlobales")
                    espacioBotonesGlobales.setAttribute("componente", "espacioBotonesGlobales")
                    const botonCrearConfiguracion = document.createElement("a")
                    botonCrearConfiguracion.classList.add("arquitecturaConfApartamento_portada_boton")
                    botonCrearConfiguracion.textContent = "Crear nueva configuración de alojamiento"
                    botonCrearConfiguracion.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones/crear")
                    botonCrearConfiguracion.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones/crear")
                    botonCrearConfiguracion.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    espacioBotonesGlobales.appendChild(botonCrearConfiguracion)
                    selectorEspacioConfiguracionDelALojamiento.appendChild(espacioBotonesGlobales)
                    const contenedorConfiguracionesPortada = document.createElement("div")
                    contenedorConfiguracionesPortada.classList.add("adminsitracion_arquitectura_configruaciones_portada_contenedorCongfiguraciones")

                    const respuestaServidor = await casaVitini.shell.servidor({
                        zona: "administracion/arquitectura/configuraciones/listarConfiguracionApartamentos"
                    })
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const configuracionesApartamentos = respuestaServidor?.ok
                        if (configuracionesApartamentos.length === 0) {

                        }
                        if (configuracionesApartamentos.length > 0) {
                            for (const detalleApartamento of configuracionesApartamentos) {
                                const apartamentoIDV = detalleApartamento.apartamentoIDV
                                const apartamentoUI = detalleApartamento.apartamentoUI
                                const zonaIDV = detalleApartamento.zonaIDV
                                const estadoConfiguracion = detalleApartamento.estadoConfiguracion
                                let estadoConfiguracionUI
                                if (estadoConfiguracion === "disponible") {
                                    estadoConfiguracionUI = "Disponible"
                                }
                                if (estadoConfiguracion === "nodisponible") {
                                    estadoConfiguracionUI = "No disponible"
                                }
                                const zonaUI = {
                                    privada: "Zona privada",
                                    global: "Zona global",
                                    publica: "Zona pública"
                                }
                                const contenedorApartamento = document.createElement("a")
                                contenedorApartamento.classList.add("arquitecturaConfiguracionesAlojamiento_contenedorConfiguracion")
                                contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                                contenedorApartamento.setAttribute("href", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                                contenedorApartamento.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/configuraciones/" + apartamentoIDV)
                                contenedorApartamento.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.traductorCambioVista)
                                const contenedorTitulo = document.createElement("div")
                                contenedorTitulo.classList.add("arquitecturaConfAlojamiento_configuracionesTitulo")
                                contenedorTitulo.classList.add("negrita")
                                contenedorTitulo.textContent = apartamentoUI
                                contenedorApartamento.appendChild(contenedorTitulo)
                                const contenedorExplicacion = document.createElement("div")
                                contenedorExplicacion.classList.add("arquitecturaConfAlojamiento_configuracionesTitulo")
                                contenedorExplicacion.textContent = estadoConfiguracionUI
                                contenedorApartamento.appendChild(contenedorExplicacion)
                                const zona = document.createElement("div")
                                zona.classList.add("arquitecturaConfAlojamiento_configuracionesTitulo")
                                zona.textContent = zonaUI[zonaIDV]
                                contenedorApartamento.appendChild(zona)
                                contenedorConfiguracionesPortada.appendChild(contenedorApartamento)
                            }
                            selectorEspacioConfiguracionDelALojamiento.appendChild(contenedorConfiguracionesPortada)
                        }

                    }
                },
                traductorCambioVista: (configuracion) => {
                    configuracion.preventDefault()
                    configuracion.stopPropagation()
                    const vista = configuracion.target.closest("[vista]").getAttribute("vista")
                    const entrada = {
                        "vista": vista,
                        "tipoOrigen": "menuNavegador"
                    }
                    casaVitini.shell.navegacion.controladorVista(entrada)
                },
                detallesConfiguracion: {
                    portadaUI: async (IDV) => {
                        const seccionRenderizadaOrigen = document.querySelector("main")
                        const instanciaUID = seccionRenderizadaOrigen.getAttribute("instanciaUID")
                        const apartamentoIDV = IDV[0]
                        const selectorTitulo = document.querySelector(" [componente=titulo]")
                        selectorTitulo.textContent = "Configuración del apartamento"
                        document.querySelector("[componente=espacioConfiguracionDelAlojamiento]").style.gap = "0"
                        const selectorEspacioConfiguracion = document.querySelector("[componente=espacioConfiguracionDelAlojamiento]")
                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/detalleConfiguracionAlojamiento",
                            apartamentoIDV: apartamentoIDV
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                        const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)

                        if (!seccionRenderizada) { return }
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe la configuración de alojamiento",
                                descripcion: respuestaServidor.error
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                        if (respuestaServidor?.ok) {


                            const apartamentoIDV = respuestaServidor?.apartamentoIDV
                            const apartamentoUI = respuestaServidor?.apartamentoUI
                            const zonaIDV = respuestaServidor.zonaIDV
                            const estadoConfiguracion = respuestaServidor?.estadoConfiguracion
                            const habitaciones = respuestaServidor?.habitaciones

                            let estadoConfiguracionUI
                            if (estadoConfiguracion === "nodisponible") {
                                estadoConfiguracionUI = "No disponible"
                            }
                            if (estadoConfiguracion === "disponible") {
                                estadoConfiguracionUI = "Disponible"
                            }
                            let zonaUI
                            if (zonaIDV === "publica") {
                                zonaUI = "Publica"
                            }
                            if (zonaIDV === "global") {
                                zonaUI = "Global"
                            }
                            if (zonaIDV === "privada") {
                                zonaUI = "Privada"
                            }

                            const contenedorApartamento = document.createElement("div")
                            contenedorApartamento.classList.add("arquitecturaConfApartamento_contenedor")
                            contenedorApartamento.setAttribute("apartamentoIDV", apartamentoIDV)
                            contenedorApartamento.setAttribute("contenedor", "configuracionAlojamiento")

                            const contenedorTituloYBoton = document.createElement("div")
                            contenedorTituloYBoton.classList.add("arquitecturaConfApartamento_contenedorTituloYBotones")
                            const tituloApartamento = document.createElement("div")
                            tituloApartamento.classList.add("arquitecturaConfApartamento_titulo")
                            tituloApartamento.classList.add("negrita")
                            tituloApartamento.textContent = apartamentoUI
                            contenedorTituloYBoton.appendChild(tituloApartamento)
                            const contenedorBotonesGlobalesApartamento = document.createElement("div")
                            contenedorBotonesGlobalesApartamento.classList.add("arquitecturaConfApartamento_contenedorBotonesGlobales")
                            const botonIrPerfilPrecio = document.createElement("a")
                            botonIrPerfilPrecio.classList.add("arquitecturaConfApartamento_boton")
                            botonIrPerfilPrecio.textContent = "Ir al perfil del precio"
                            botonIrPerfilPrecio.setAttribute("vista", "/administracion/precios/apartamentos:" + apartamentoIDV)
                            botonIrPerfilPrecio.setAttribute("href", "/administracion/precios/apartamentos:" + apartamentoIDV)
                            botonIrPerfilPrecio.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            contenedorBotonesGlobalesApartamento.appendChild(botonIrPerfilPrecio)
                            const botonAddHabitacion = document.createElement("div")
                            botonAddHabitacion.classList.add("arquitecturaConfApartamento_boton")
                            botonAddHabitacion.textContent = "Añadir habitación"
                            botonAddHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addHabitacion.UI)
                            contenedorBotonesGlobalesApartamento.appendChild(botonAddHabitacion)
                            contenedorTituloYBoton.appendChild(contenedorBotonesGlobalesApartamento)
                            const botonEstadoApartamento = document.createElement("div")
                            botonEstadoApartamento.classList.add("arquitecturaConfApartamento_boton")
                            botonEstadoApartamento.setAttribute("estadoActual", estadoConfiguracion)
                            botonEstadoApartamento.addEventListener("click", (e) => {
                                const estadoActual = e.target.closest("[estadoActual]").getAttribute("estadoActual")

                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.actualizarEstadoConfiguracion.UI({
                                    estadoActual
                                })
                            })
                            const tituloEstado = document.createElement("p")
                            tituloEstado.classList.add("arquitecturaConfApartamento_infoEstadoV")
                            tituloEstado.classList.add("negrita")
                            tituloEstado.textContent = "Estado"
                            const infoEstado = document.createElement("p")
                            infoEstado.classList.add("arquitecturaConfApartamento_infoEstado")
                            infoEstado.classList.add("negrita")
                            infoEstado.setAttribute("componente", "estadoActualUI")
                            infoEstado.textContent = estadoConfiguracionUI
                            botonEstadoApartamento.appendChild(infoEstado)
                            contenedorBotonesGlobalesApartamento.appendChild(botonEstadoApartamento)

                            const botonZonaPublicacion = document.createElement("div")
                            botonZonaPublicacion.classList.add("arquitecturaConfApartamento_boton")
                            botonZonaPublicacion.setAttribute("data", "zonaPublicacion")
                            botonZonaPublicacion.textContent = zonaUI
                            botonZonaPublicacion.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionZona.ui({
                                    apartamentoIDV
                                })
                            })
                            contenedorBotonesGlobalesApartamento.appendChild(botonZonaPublicacion)


                            contenedorApartamento.appendChild(contenedorTituloYBoton)
                            const contenedorImg = document.createElement("div")
                            contenedorImg.classList.add("arquitecturaConfApartamento_contenedorImg")
                            contenedorImg.setAttribute("componente", "contenedorImagenConfiguracion")
                            contenedorApartamento.appendChild(contenedorImg)
                            const contenedorHabitaciones = document.createElement("div")
                            contenedorHabitaciones.classList.add("arquitecturaConfApartamento_contenedorHabitaciones")
                            contenedorHabitaciones.setAttribute("componente", "contenedorHabitaciones")
                            for (const habitacion of habitaciones) {
                                const habitacionUID = habitacion.componenteUID
                                const habitacionIDV = habitacion.habitacionIDV
                                const habitacionUI = habitacion.habitacionUI
                                const camas = habitacion.camas
                                const metadatosHabitacion = {
                                    habitacionUI: habitacionUI,
                                    habitacionIDV: habitacionIDV,
                                    habitacionUID: habitacionUID,
                                }

                                const contenedorHabitacionUI = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.habitacionUI(metadatosHabitacion)
                                const contenedorCamas = document.createElement("div")
                                contenedorCamas.classList.add("arquitecturaConfApartamento_contenedorCamas")
                                if (camas.length === 0) {

                                    const infoNoCamas = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.noCamaInfoUI()
                                    contenedorHabitacionUI.appendChild(infoNoCamas)
                                }
                                if (camas.length > 0) {
                                    for (const detallesCama of camas) {
                                        const tipoIDV = detallesCama.tipoIDV
                                        const camaIDV = detallesCama.camaIDV
                                        const camaUI = detallesCama.camaUI
                                        const capacidad = detallesCama.capacidad
                                        const camaUID = detallesCama.camaUID


                                        const metadatosCama = {
                                            tipoIDV: tipoIDV,
                                            camaIDV: camaIDV,
                                            camaUI: camaUI,
                                            capacidad: capacidad,
                                            camaUID: camaUID,
                                        }
                                        const contenedorCama = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.camaUI(metadatosCama)
                                        contenedorHabitacionUI.appendChild(contenedorCama)
                                    }
                                }

                                contenedorHabitaciones.appendChild(contenedorHabitacionUI)
                            }
                            contenedorApartamento.appendChild(contenedorHabitaciones)
                            selectorEspacioConfiguracion.appendChild(contenedorApartamento)
                            const contenedorBotonesGlobalesInferiores = document.createElement("div")
                            contenedorBotonesGlobalesInferiores.classList.add("arquitecturaConfApartamento_espacioEliminarConfiguracionApartamento")
                            const botonEliminarConfiguracion = document.createElement("div")
                            botonEliminarConfiguracion.classList.add("arquitecturaConfApartamento_eliminarConfiguracionApartamento")
                            botonEliminarConfiguracion.textContent = "Eliminar configuración del apartamento"
                            botonEliminarConfiguracion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarConfiguracion.UI)
                            contenedorBotonesGlobalesInferiores.appendChild(botonEliminarConfiguracion)
                            const selectorEspacioGlobalConfiguracion = document.querySelector("[componente=espacioConfiguracionDelAlojamiento]")
                            selectorEspacioGlobalConfiguracion.appendChild(contenedorBotonesGlobalesInferiores)


                            casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.obtenerImgen(apartamentoIDV)

                        }
                    },
                    addHabitacion: {
                        UI: async () => {
                            const main = document.querySelector("main")
                            const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const instanciaUID = ui.getAttribute("instanciaUID")
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            main.appendChild(ui)

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo habitaciones...",
                                textoBoton: "Cancelar"
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/listarHabitacionesDisponbilesApartamentoConfiguracion",
                                apartamentoIDV: apartamentoIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                contenedor.innerHTML = null
                                const habitacionesDisponbiles = respuestaServidor?.ok

                                if (habitacionesDisponbiles.length === 0) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const error = "Ya están todas las habitaciones insertadas en esta configuración de apartamento."
                                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                                }
                                if (habitacionesDisponbiles.length > 0) {
                                    for (const detallesHabitacion of habitacionesDisponbiles) {
                                        const habitacionIDV = detallesHabitacion.habitacionIDV
                                        const habitacionUI = detallesHabitacion.habitacionUI
                                        const tituloHabitacion = document.createElement("div")
                                        tituloHabitacion.classList.add("confApartamento_contenedorMenu_tituloApartamento")
                                        tituloHabitacion.setAttribute("habitacionIDV", habitacionIDV)
                                        tituloHabitacion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addHabitacion.transactor)
                                        tituloHabitacion.textContent = habitacionUI
                                        contenedor.appendChild(tituloHabitacion)
                                    }
                                }

                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.setAttribute("boton", "cancelar")
                                botonCancelar.textContent = "Cancelar y volver a tras"
                                botonCancelar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCancelar)
                            }
                        },
                        transactor: async (habitacion) => {
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Añadiendo cama ..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const habitacionIDV = habitacion.target.getAttribute("habitacionIDV")
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/addHabitacionToConfiguracionApartamento",
                                apartamentoIDV: apartamentoIDV,
                                habitacionIDV: habitacionIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()

                                const contenedorHabitacion = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.habitacionUI({
                                    habitacionUID: respuestaServidor?.habitacionUID,
                                    habitacionIDV: respuestaServidor?.habitacionIDV,
                                    habitacionUI: respuestaServidor?.habitacionUI
                                })
                                const infoNoCamas = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.noCamaInfoUI()
                                contenedorHabitacion.appendChild(infoNoCamas)
                                const selectorContenedorHabitaciones = document.querySelector("[componente=contenedorHabitaciones]")
                                selectorContenedorHabitaciones.appendChild(contenedorHabitacion)
                            }
                        }
                    },
                    addCama: {
                        UI: async function (data) {
                            const habitacionUID = data.habitacionUID
                            const main = document.querySelector("main")
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const instanciaUID = ui.getAttribute("instanciaUID")
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            main.appendChild(ui)

                            const spinner = casaVitini.ui.componentes.spinner({
                                mensaje: "Obteniendo camas...",
                                textoBoton: "Cancelar"
                            })
                            contenedor.appendChild(spinner)

                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/listarCamasDisponbilesApartamentoConfiguracion",
                                habitacionUID: String(habitacionUID)
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                contenedor.innerHTML = null
                                const camasDisponibles = respuestaServidor?.ok
                                if (camasDisponibles.length === 0) {
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    const error = "Ya están todas las camas insertadas en esta habitación"
                                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                                }
                                if (camasDisponibles.length > 0) {
                                    contenedor.textContent = null
                                    for (const detallesCama of camasDisponibles) {
                                        const camaIDV = detallesCama.camaIDV
                                        const camaUI = detallesCama.camaUI
                                        const tituloHabitacion = document.createElement("div")
                                        tituloHabitacion.classList.add("confApartamento_contenedorMenu_tituloApartamento")
                                        tituloHabitacion.addEventListener("click", () => {
                                            this.transactor({
                                                habitacionUID,
                                                camaIDV
                                            })
                                        })
                                        tituloHabitacion.textContent = camaUI
                                        contenedor.appendChild(tituloHabitacion)
                                    }

                                }

                                const botonCancelar = document.createElement("div")
                                botonCancelar.classList.add("boton")
                                botonCancelar.setAttribute("boton", "cancelar")
                                botonCancelar.textContent = "Cancelar y volver a tras"
                                botonCancelar.addEventListener("click", () => {
                                    return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                })
                                contenedor.appendChild(botonCancelar)
                            }
                        },
                        transactor: async (data) => {

                            const habitacionUID = data.habitacionUID
                            const camaIDV = data.camaIDV
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Añadiendo cama..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/addCamaToConfiguracionApartamentoHabitacion",
                                camaIDV: camaIDV,
                                habitacionUID: String(habitacionUID)
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                const metadatos = {
                                    camaUID: respuestaServidor?.nuevoUID,
                                    camaIDV: respuestaServidor?.camaIDV,
                                    camaUI: respuestaServidor?.camaUI,
                                    capacidad: respuestaServidor?.capaciad
                                }
                                const componenteCama = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.camaUI(metadatos)
                                const selectorContenedorHabitacion = document.querySelector(`[habitacionUID="${habitacionUID}"]`)
                                selectorContenedorHabitacion.querySelector("[componente=infoVolatilCamasHabitacion]")?.remove()
                                selectorContenedorHabitacion.appendChild(componenteCama)
                            }
                        }
                    },
                    eliminarConfiguracion: {
                        UI: async () => {

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = "Eliminar configuración de alojamiento"
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = "Confirmar la eliminación de toda la configuración del apartamento. Esto implica la configuración del apartamento, el perfil de precios y los bloqueos vigentes. Si este apartamento aparece en un comportamiento de precios, será eliminado el apartamento del comportamiento de precios, pero el resto del comportamiento seguirá vigente a no ser que sea el único apartamento en algún comportamiento de precios. Sus implicaciones serán inmediatas. Si esta configuración de alojamiento aparece en alguna reserva activa, no se podrá eliminar por temas de integridad. Si necesita editar la configuración de alojamiento, puede hacerlo libremente. Si esta configuración de alojamiento aparece en alguna simulación u oferta, no se eliminará de estas. Tendrá que revisar las ofertas. Si elimina este apartamento y aparece en alguna oferta, no podrá insertar esa oferta en ninguna simulación o reserva hasta que no elimine la referencia en esa oferta. Si esta configuración de alojamiento aparece en alguna reserva no activa, como son las reservas canceladas o reservas del pasado, esta referencia no se eliminara porque las reservas mantiene su información en instantáneas propias."
                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = "Comfirmar la eliminación"
                            botonAceptar.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarConfiguracion.confirmar)
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar la eliminación"
                            document.querySelector("main").appendChild(pantallaInmersiva)

                        },
                        confirmar: async () => {
                            const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Eliminado configuración de alojamiento..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/eliminarConfiguracionDeAlojamiento",
                                apartamentoIDV: apartamentoIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                const reservasActivas = respuestaServidor.reservasActivas


                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                                const contenedor = constructor.querySelector("[componente=contenedor]")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `No se puede borrar esta configuración de alojamiento`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = respuestaServidor?.error


                                const contenedorReservas = document.createElement("div")
                                contenedorReservas.classList.add(
                                    "flexVertical",
                                    "gap6",
                                )
                                contenedor.appendChild(contenedorReservas)

                                reservasActivas.forEach(reservaActiva => {
                                    const reservaUID = reservaActiva.reservaUID
                                    const apartamentoUI = reservaActiva.apartamentoUI

                                    const reservaActivaContenedorUI = document.createElement("a")
                                    reservaActivaContenedorUI.classList.add(
                                        "borderRadius10",
                                        "areaSinDecoracionPredeterminada",
                                        "backgroundGrey1",
                                        "padding12",
                                        "comportamientoBoton"
                                    )
                                    reservaActivaContenedorUI.setAttribute("href", `/administracion/reservas/reserva:${reservaUID}/alojamiento`)
                                    reservaActivaContenedorUI.setAttribute("vista", `/administracion/reservas/reserva:${reservaUID}/alojamiento`)
                                    reservaActivaContenedorUI.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                    contenedorReservas.appendChild(reservaActivaContenedorUI)

                                    const titulo = document.createElement("div")
                                    titulo.textContent = "Reserva UID"
                                    reservaActivaContenedorUI.appendChild(titulo)

                                    const reservaIdentificador = document.createElement("div")
                                    reservaIdentificador.classList.add(
                                        "negrita"
                                    )
                                    reservaIdentificador.textContent = reservaUID
                                    reservaActivaContenedorUI.appendChild(reservaIdentificador)


                                })



                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.remove()








                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)



                            }
                            if (respuestaServidor?.ok) {
                                const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                    advertenciaInmersiva.remove()
                                })
                                const navegacion = {
                                    "vista": "/administracion/arquitectura_del_alojamiento/configuraciones",
                                    "tipoOrigen": "menuNavegador"
                                }
                                casaVitini.shell.navegacion.controladorVista(navegacion)
                            }
                        }
                    },
                    eliminarHabitacion: {
                        UI: async function (data) {

                            const habitacionUID = data.habitacionUID
                            const habitacionUI = data.habitacionUI

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                            const instanciaUID = pantallaInmersiva.getAttribute("instanciaUID")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = `Eliminar ${habitacionUI}`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = `Confirmas eliminar ${habitacionUI} con identificador universal ${habitacionUID}`

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = `Comfirmar y eliminar ${habitacionUI}`
                            botonAceptar.addEventListener("click", () => {
                                this.confirmar({
                                    habitacionUID,
                                    instanciaUID
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar y volver"
                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        confirmar: async (data) => {
                            const habitacionUID = data.habitacionUID
                            const instanciaUID_pro = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Eliminando habitación..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID_pro,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/eliminarHabitacionDeConfiguracionDeAlojamiento",
                                habitacionUID: String(habitacionUID)
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_pro}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                document.querySelector(`[habitacionUID="${habitacionUID}"]`)?.remove()
                            }
                        }
                    },
                    eliminarCama: {
                        UI: async function (data) {

                            const camaUID = data.camaUID
                            const camaUI = data.camaUI
                            const camaIDV = data.camaIDV

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")
                            const instanciaUID = pantallaInmersiva.getAttribute("instanciaUID")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = `Eliminar ${camaUI}`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = `Confirmas eliminar ${camaUI} con identificador universal ${camaIDV}`

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = `Comfirmar y eliminar ${camaUI}`
                            botonAceptar.addEventListener("click", () => {
                                this.confirmar({
                                    camaUID,
                                    camaIDV,
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar y volver"
                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        confirmar: async (data) => {

                            const camaUID = data.camaUID
                            const habitacionUID = data.habitacionUID
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Eliminado cama..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/eliminarCamaDeConfiguracionDeAlojamiento",
                                camaUID: String(camaUID)
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }

                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                document.querySelector(`[camaUID="${camaUID}"]`)?.remove()
                                const selectorContenedoresHabitacion = document.querySelectorAll(`[habitacionUID]`)
                                selectorContenedoresHabitacion.forEach((habitacion) => {

                                    const camasDeLaHabitacion = habitacion.querySelectorAll("[camaUID]")
                                    const selectorInfoRenderizada = habitacion.querySelector("[componente=infoVolatilCamasHabitacion]")
                                    if (camasDeLaHabitacion.length === 0 && !selectorInfoRenderizada) {
                                        const infoNoCamas = casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.componentesUI.noCamaInfoUI()
                                        habitacion.appendChild(infoNoCamas)
                                    }


                                })
                            }
                        }
                    },
                    actualizarEstadoConfiguracion: {
                        UI: async function (data) {
                            const estadoActual = data.estadoActual
                            let tituloBoton
                            let nuevoEstado
                            if (estadoActual === "nodisponible") {
                                tituloBoton = "Cambiar estado a Disponible"
                                nuevoEstado = "disponible"
                            }
                            if (estadoActual === "disponible") {
                                tituloBoton = "Cambiar estado a No disponible"
                                nuevoEstado = "nodisponible"
                            }

                            const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                            const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                            const titulo = constructor.querySelector("[componente=titulo]")
                            titulo.textContent = `Actualizar el estado de la configuración`
                            const mensaje = constructor.querySelector("[componente=mensajeUI]")
                            mensaje.textContent = `Seleccione el nuevo estado de la configuración. Su aplicación será inmediata. Es recomendable que cambie al estado disponible cuando se asegure de que tiene la configuración del apartamento correctamente configurada.`

                            const botonAceptar = constructor.querySelector("[boton=aceptar]")
                            botonAceptar.textContent = tituloBoton
                            botonAceptar.addEventListener("click", () => {
                                this.transactor({
                                    nuevoEstado
                                })
                            })
                            const botonCancelar = constructor.querySelector("[boton=cancelar]")
                            botonCancelar.textContent = "Cancelar el cambio de estado"
                            document.querySelector("main").appendChild(pantallaInmersiva)
                        },
                        transactor: async (data) => {
                            const nuevoEstado = data.nuevoEstado
                            const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Actualizando estado..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const apartamentoIDV = document.querySelector(`[apartamentoIDV]`).getAttribute("apartamentoIDV")
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/cambiarEstadoConfiguracionAlojamiento",
                                apartamentoIDV,
                                nuevoEstado
                            }

                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                            if (!instanciaRenderizada) { return }
                            instanciaRenderizada.remove()
                            if (respuestaServidor?.error) {
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const selectorEstadoActualIDV = document.querySelector("[estadoActual]")
                                selectorEstadoActualIDV.setAttribute("estadoActual", nuevoEstado)
                                let estadoConfiguracionUI
                                if (nuevoEstado === "nodisponible") {
                                    estadoConfiguracionUI = "No disponible"
                                }
                                if (nuevoEstado === "disponible") {
                                    estadoConfiguracionUI = "Disponible"
                                }
                                const selectorEstadoActualUI = document.querySelector("[componente=estadoActualUI]")
                                selectorEstadoActualUI.textContent = estadoConfiguracionUI
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            }
                        }
                    },
                    gestionZona: {
                        ui: async function (data) {
                            const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                            const instanciaUID_gestionZonaUI = ui.getAttribute("instanciaUID")
                            const contenedor = ui.querySelector("[componente=contenedor]")
                            const apartamentoIDV = data.apartamentoIDV


                            const t1 = document.createElement("div")
                            t1.classList.add("tituloGris")
                            t1.textContent = "Cambiar zona de publicación"
                            contenedor.appendChild(t1)

                            const botonCancelar = document.createElement("div")
                            botonCancelar.classList.add("boton")
                            botonCancelar.setAttribute("boton", "cancelar")
                            botonCancelar.textContent = "Cancelar y volver a tras"
                            botonCancelar.addEventListener("click", () => {
                                return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                            })
                            contenedor.appendChild(botonCancelar)


                            const t2 = document.createElement("div")
                            t2.textContent = "La zona de publicación determina dónde se mostrará esta configuración de alojamiento. Existen tres zonas. La zona pública que determina que esta configuración se anuncie solo desde la plaza, para los clientes y fuera de la zona administrativa. La zona privada que establece que esta configuración solo se anuncie dentro de la zona administrativa y, por última, está la zona global, que anuncia esta configuración en toda Casa Vitini"
                            contenedor.appendChild(t2)


                            const botonZonaPublica = document.createElement("div")
                            botonZonaPublica.classList.add("boton")
                            botonZonaPublica.setAttribute("zona", "publica")
                            botonZonaPublica.textContent = "Cambiar a Zona Pública"
                            botonZonaPublica.addEventListener("click", () => {
                                this.cambiarZona({
                                    apartamentoIDV,
                                    nuevaZona: "publica",
                                    instanciaUID_gestionZonaUI
                                })
                            })
                            contenedor.appendChild(botonZonaPublica)

                            const botonZonaPrivada = document.createElement("div")
                            botonZonaPrivada.classList.add("boton")
                            botonZonaPrivada.setAttribute("zona", "privada")
                            botonZonaPrivada.textContent = "Cambiar a Zona Privada"
                            botonZonaPrivada.addEventListener("click", () => {
                                this.cambiarZona({
                                    apartamentoIDV,
                                    nuevaZona: "privada",
                                    instanciaUID_gestionZonaUI
                                })
                            })
                            contenedor.appendChild(botonZonaPrivada)

                            const botonZonaGlobal = document.createElement("div")
                            botonZonaGlobal.classList.add("boton")
                            botonZonaGlobal.setAttribute("zona", "global")
                            botonZonaGlobal.textContent = "Cambiar a Zona Global"
                            botonZonaGlobal.addEventListener("click", () => {
                                this.cambiarZona({
                                    apartamentoIDV,
                                    nuevaZona: "global",
                                    instanciaUID_gestionZonaUI
                                })
                            })
                            contenedor.appendChild(botonZonaGlobal)


                            document.querySelector("main").appendChild(ui)
                        },
                        cambiarZona: async (data) => {

                            const nuevaZona = data.nuevaZona
                            const apartamentoIDV = data.apartamentoIDV
                            const instanciaUID_gestionZonaUI = data.instanciaUID_gestionZonaUI


                            const instanciaUID_pantallaCargaSuperPuesta = casaVitini.utilidades.codigoFechaInstancia()
                            const mensaje = "Actualizando zona de la configuración de alojamiento..."
                            const datosPantallaSuperpuesta = {
                                instanciaUID: instanciaUID_pantallaCargaSuperPuesta,
                                mensaje: mensaje
                            }
                            casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/actualizarZonaDeLaConfiguracionApartamento",
                                nuevaZona,
                                apartamentoIDV
                            }
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID_gestionZonaUI}"]`)
                            if (!instanciaRenderizada) { return }

                            if (respuestaServidor?.error) {
                                document.querySelector(`[instanciaUID="${instanciaUID_pantallaCargaSuperPuesta}"]`)?.remove()
                                return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {
                                const nuevaZona = respuestaServidor.nuevaZona
                                const selectorZonaUI_renderizada = document.querySelector(`[instanciaUID="${instanciaUID_gestionZonaUI}"]`)
                                if (!selectorZonaUI_renderizada) {
                                    return
                                }
                                casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                const selectorZonaUI = document.querySelector(`[contenedor=configuracionAlojamiento][apartamentoIDV="${apartamentoIDV}"]`).querySelector("[data=zonaPublicacion]")

                                let zonaUI
                                if (nuevaZona === "publica") {
                                    zonaUI = "Publica"
                                }
                                if (nuevaZona === "global") {
                                    zonaUI = "Global"
                                }
                                if (nuevaZona === "privada") {
                                    zonaUI = "Privada"
                                }
                                selectorZonaUI.textContent = zonaUI
                            }
                        }
                    },
                    gestionImagen: {
                        subirImagen: () => {
                            const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                            const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const selectorEspacio = document.querySelector("[componente=espacioConfiguracionDelAlojamiento]")
                            const campoEntrada = document.createElement("input")
                            campoEntrada.id = "campoEntrada"
                            campoEntrada.type = "file"
                            campoEntrada.style.display = "none"
                            campoEntrada.addEventListener("change", (event) => {
                                const archivoSeleccionado = event.target.files[0];
                                if (archivoSeleccionado) {
                                    contenedorImagen.innerHTML = null
                                    const iconoProceso = casaVitini.ui.componentes.spinnerSimple()
                                    iconoProceso.style.background = "white"
                                    iconoProceso.style.paddingLeft = "4px"
                                    iconoProceso.style.background = "#ffffff7d"
                                    iconoProceso.style.borderRadius = "18px"
                                    iconoProceso.style.webkitBackdropFilter = "blur(20px)"
                                    iconoProceso.style.backdropFilter = "blur(20px)"
                                    contenedorImagen.appendChild(iconoProceso)

                                    const iconoProcesoRenderizado = document.querySelector("[componente=iconoProceso]")
                                    const lector = new FileReader();
                                    lector.onload = async (eventoCarga) => {
                                        const contenidoBuffer = eventoCarga.target.result;

                                        const contenidoBase64 = btoa(new Uint8Array(contenidoBuffer).reduce((datos, byte) => datos + String.fromCharCode(byte), ""));

                                        const transaccion = {
                                            zona: "administracion/arquitectura/configuraciones/gestionImagenConfiguracionApartamento",
                                            apartamentoIDV: apartamentoIDV,
                                            contenidoArchivo: contenidoBase64
                                        };
                                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                        if (respuestaServidor?.error) {
                                            iconoProceso.remove()
                                            document.getElementById("campoEntrada").remove()
                                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                            await casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.obtenerImgen()
                                        }
                                        if (respuestaServidor?.ok) {
                                            iconoProceso.remove()
                                            contenedorImagen.style.backgroundImage = `url(data:image/png;base64,${contenidoBase64})`;
                                            document.getElementById("campoEntrada").remove()
                                            casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.opcionesImagen()
                                        }
                                    }
                                    lector.readAsArrayBuffer(archivoSeleccionado);
                                };
                            })
                            const selectorCampoRederizado = document.getElementById("campoEntrada")
                            if (!selectorCampoRederizado) {
                                selectorEspacio.appendChild(campoEntrada)
                            }
                            document.getElementById("campoEntrada").click()
                        },
                        obtenerImgen: async (IDV) => {
                            const apartamentoIDV = IDV || document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                            const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                            contenedorImagen.innerHTML = null
                            const transaccion = {
                                zona: "administracion/arquitectura/configuraciones/obtenerImagenConfiguracionAdministracion",
                                apartamentoIDV: apartamentoIDV
                            }

                            const iconoProceso = casaVitini.ui.componentes.spinnerSimple()
                            iconoProceso.style.background = "white"
                            iconoProceso.style.paddingLeft = "4px"
                            iconoProceso.style.background = "#ffffff7d"
                            iconoProceso.style.borderRadius = "18px"
                            iconoProceso.style.webkitBackdropFilter = "blur(20px)"
                            iconoProceso.style.backdropFilter = "blur(20px)"
                            contenedorImagen.appendChild(iconoProceso)
                            const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                            iconoProceso?.remove()
                            if (respuestaServidor?.error) {

                                return casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                            if (respuestaServidor?.ok) {

                                const imagenBase64 = respuestaServidor?.imagen
                                if (!imagenBase64) {
                                    contenedorImagen.textContent = "Haz click para añadir una imagen del apartamento"
                                    contenedorImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.subirImagen)
                                    contenedorImagen.removeEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.mostrarOpciones)
                                } else {
                                    const detectarTipoDeImagen = (base64String) => {
                                        const binarioMagicoPNG = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);
                                        const binarioMagicoJPEG = new Uint8Array([255, 216, 255]);
                                        const binarioMagicoTIFF = new Uint8Array([73, 73, 42]);
                                        const arrayBuffer = Uint8Array.from(atob(base64String), c => c.charCodeAt(0));
                                        const buffer = new Uint8Array(arrayBuffer);
                                        if (buffer.subarray(0, 8).every((value, index) => value === binarioMagicoPNG[index])) {
                                            "PNG";
                                        } else if (buffer.subarray(0, 3).every((value, index) => value === binarioMagicoJPEG[index])) {
                                            "JPEG";
                                        } else if (buffer.subarray(0, 3).every((value, index) => value === binarioMagicoTIFF[index])) {
                                            "TIFF";
                                        } else {
                                            "Tipo de imagen desconocido";
                                        }
                                    };
                                    const tipoDeImagen = detectarTipoDeImagen(imagenBase64);
                                    contenedorImagen.style.backgroundImage = `url(data:image/${tipoDeImagen};base64,${imagenBase64})`;
                                    casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.opcionesImagen()
                                }
                            }
                        },
                        mostrarOpciones: (e) => {
                            const contenedorOpcionesImagen = document.querySelector("[componente=contenedorOpcionesImagen]")
                            const estadoVision = contenedorOpcionesImagen.style?.display
                            const componente = e.target.getAttribute("componente")
                            if (componente === "opcionImagen") {

                            }
                            if (estadoVision === "none" || !estadoVision) {
                                contenedorOpcionesImagen.style.display = "flex"
                            } else {
                                contenedorOpcionesImagen.style.display = "none"
                            }
                        },
                        eliminarImagen: {
                            UI: async function () {

                                const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                                const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                                const titulo = constructor.querySelector("[componente=titulo]")
                                titulo.textContent = `Eliminar imagen de la configuración del apartamento.`
                                const mensaje = constructor.querySelector("[componente=mensajeUI]")
                                mensaje.textContent = `¿Confirmas eliminar la imagen actual de la configuración de alojamiento?`

                                const botonAceptar = constructor.querySelector("[boton=aceptar]")
                                botonAceptar.textContent = `Confirmar y eliminar la imagen`
                                botonAceptar.addEventListener("click", this.confirmar)
                                const botonCancelar = constructor.querySelector("[boton=cancelar]")
                                botonCancelar.textContent = "Cancelar y volver"
                                document.querySelector("main").appendChild(pantallaInmersiva)
                            },
                            confirmar: async () => {
                                const apartamentoIDV = document.querySelector("[apartamentoIDV]").getAttribute("apartamentoIDV")
                                const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                                contenedorImagen.innerHTML = null
                                const iconoProceso = casaVitini.ui.componentes.spinnerSimple()
                                iconoProceso.style.background = "white"
                                iconoProceso.style.paddingLeft = "4px"
                                iconoProceso.style.background = "#ffffff7d"
                                iconoProceso.style.borderRadius = "18px"
                                iconoProceso.style.webkitBackdropFilter = "blur(20px)"
                                iconoProceso.style.backdropFilter = "blur(20px)"
                                contenedorImagen.appendChild(iconoProceso)
                                const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                                selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                    advertenciaInmersiva.remove()
                                })
                                const transaccion = {
                                    zona: "administracion/arquitectura/configuraciones/eliminarImagenConfiguracionApartamento",
                                    apartamentoIDV: apartamentoIDV
                                }
                                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                                if (respuestaServidor?.error) {
                                    iconoProceso?.remove()
                                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                                }
                                if (respuestaServidor?.ok) {
                                    iconoProceso.remove()
                                    contenedorImagen.removeAttribute("style")
                                    casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.obtenerImgen(apartamentoIDV)
                                }
                            }
                        },
                        opcionesImagen: () => {
                            const contenedorImagen = document.querySelector("[componente=contenedorImagenConfiguracion]")
                            contenedorImagen.removeEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.subirImagen)
                            contenedorImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.mostrarOpciones)
                            const contenedorOpciones = document.createElement("div")
                            contenedorOpciones.classList.add("arquitecturaConfApartamento_contenedorImg_opciones")
                            contenedorOpciones.setAttribute("componente", "contenedorOpcionesImagen")
                            const actualizarImagen = document.createElement("div")
                            actualizarImagen.classList.add("arquitecturaConfApartamento_contenedorImg_opcion")
                            actualizarImagen.setAttribute("componente", "opcionImagen")
                            actualizarImagen.textContent = "Actualiar imagen"
                            actualizarImagen.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.subirImagen)
                            contenedorOpciones.appendChild(actualizarImagen)
                            const eliminarImagen = document.createElement("div")
                            eliminarImagen.classList.add("arquitecturaConfApartamento_contenedorImg_opcion")
                            eliminarImagen.setAttribute("componente", "opcionImagen")
                            eliminarImagen.textContent = "Eliminar imagen"
                            eliminarImagen.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.gestionImagen.eliminarImagen.UI()
                            })
                            contenedorOpciones.appendChild(eliminarImagen)
                            const contenedorOpcionesRenderizado = document.querySelector("[componente=contenedorOpcionesImagen]")
                            if (!contenedorOpcionesRenderizado) {
                                contenedorImagen.appendChild(contenedorOpciones)
                            }
                        },
                    },
                    componentesUI: {
                        habitacionUI: (metadatos) => {
                            const habitacionUI = metadatos.habitacionUI
                            const habitacionIDV = metadatos.habitacionIDV
                            const habitacionUID = metadatos.habitacionUID
                            const contenedor = document.createElement("div")
                            contenedor.classList.add("arquitecturaConfApartamento_contenedorHabitacion")
                            contenedor.setAttribute("habitacionUID", habitacionUID)
                            contenedor.setAttribute("habitacionIDV", habitacionIDV)
                            const barraHerramientas = document.createElement("div")
                            barraHerramientas.classList.add("aquitecturaConfApartamento_barraHerrameintas")
                            const tituloHabitacion = document.createElement("div")
                            tituloHabitacion.classList.add("arquitecturaConfApartamento_tituloHabitacion")
                            tituloHabitacion.textContent = habitacionUI
                            barraHerramientas.appendChild(tituloHabitacion)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("arquitecturaConfApartamento_barraHerramientas_contenedorBotones")
                            const botonEliminarHabitacion = document.createElement("div")
                            botonEliminarHabitacion.classList.add("arquitecturaConfApartamento_botonV2")
                            botonEliminarHabitacion.textContent = "Eliminar habitación"
                            botonEliminarHabitacion.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarHabitacion.UI({
                                    habitacionUI,
                                    habitacionUID
                                })
                            })
                            contenedorBotones.appendChild(botonEliminarHabitacion)
                            const botonAddCama = document.createElement("div")
                            botonAddCama.classList.add("arquitecturaConfApartamento_botonV2")
                            botonAddCama.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.addCama.UI({
                                    habitacionUID
                                })
                            })
                            botonAddCama.textContent = "Anadir cama"
                            contenedorBotones.appendChild(botonAddCama)
                            barraHerramientas.appendChild(contenedorBotones)
                            contenedor.appendChild(barraHerramientas)
                            return contenedor
                        },
                        camaUI: (metadatos) => {
                            const camaIDV = metadatos.camaIDV
                            const camaUID = metadatos.camaUID
                            const camaUI = metadatos.camaUI
                            const capacidad = metadatos.capacidad
                            const contenedorCama = document.createElement("div")
                            contenedorCama.classList.add("arquitecturaConfApartamento_contenedorCama")
                            contenedorCama.setAttribute("camaIDV", camaIDV)
                            contenedorCama.setAttribute("camaUID", camaUID)
                            const contenedorInfo = document.createElement("div")
                            contenedorInfo.classList.add("arquitecturaConfApartamento_contenedorCamaInfo")
                            const tituloCama = document.createElement("div")
                            tituloCama.classList.add("arquitecturaConfApartamento_tituloCama")
                            tituloCama.classList.add("negrita")
                            tituloCama.textContent = camaUI
                            contenedorInfo.appendChild(tituloCama)
                            const tituloCapacidadCama = document.createElement("div")
                            tituloCapacidadCama.classList.add("arquitecturaConfApartamento_tituloCama")
                            tituloCapacidadCama.textContent = `Capacidad pernoctativa: ${capacidad}`
                            contenedorInfo.appendChild(tituloCapacidadCama)
                            contenedorCama.appendChild(contenedorInfo)
                            const contenedorOpciones = document.createElement("div")
                            contenedorOpciones.classList.add("arquitecturaConfApartamento_contenedorCamaOpciones")
                            const botonEliminar = document.createElement("div")
                            botonEliminar.classList.add("arquitecturaConfApartamento_botonV3")
                            botonEliminar.textContent = "Eliminar cama"
                            botonEliminar.addEventListener("click", () => {
                                casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.detallesConfiguracion.eliminarCama.UI({
                                    camaUID,
                                    camaUI,
                                    camaIDV
                                })
                            })
                            contenedorOpciones.appendChild(botonEliminar)
                            contenedorCama.appendChild(contenedorOpciones)
                            return contenedorCama
                        },
                        noCamaInfoUI: () => {
                            const infoNoCamas = document.createElement("div")
                            infoNoCamas.classList.add("arquitecturaConfApartamento_infoNoCama")
                            infoNoCamas.setAttribute("componente", "infoVolatilCamasHabitacion")
                            infoNoCamas.textContent = "Esta habitación no tiene ninguna cama configurada, añade una cama para hacer seleccionable esta habitación."
                            return infoNoCamas
                        }
                    }
                },
                crearConfiguracion: {
                    arranque: async () => {
                        const main = document.querySelector("main")
                        const instanciaUID = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")

                        main.setAttribute("zonaCSS", "administracion/arquitectura_de_alojamiento/configuraciones/nuevo")
                        const transaccion = {
                            zona: "administracion/arquitectura/entidades/listarApartamentosComoEntidades"
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const seccionRenderizada = document.querySelector(`main[instanciaUID="${instanciaUID}"]`)
                        if (!seccionRenderizada)

                            if (respuestaServidor?.error) {
                                casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                            }
                        if (respuestaServidor?.ok) {
                            const apartamentosEntidad = respuestaServidor?.apartamentosComoEntidadesDisponibles
                            const espacioInfo = document.querySelector("[componente=info]")
                            if (apartamentosEntidad.length === 0) {
                                espacioInfo.innerHTML = `No hay entidades de apartamento disponibles para crear configuraciones. Si necesita crear una nueva configuración, primero genere un nuevo apartamento como entidad. Para ello, dirígete a: Arquitectura de alojamiento > Entidades de alojamiento > Generar nuevo apartamento.`
                                const enlace = document.createElement("a")
                                enlace.classList.add("enlace")
                                enlace.textContent = "Ir directo a crear un nuevo apartamento como entidad"
                                enlace.setAttribute("href", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                                enlace.setAttribute("vista", "/administracion/arquitectura_del_alojamiento/entidades/crear_entidad/tipo:apartamento")
                                enlace.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                                main.appendChild(enlace)
                            }
                            if (apartamentosEntidad.length > 0) {
                                espacioInfo.innerHTML = `Escoge un apartamento como entidad para construir la base de la configuración. Luego podrás llenar este apartamento con habitaciones y asignarles camas. Recuerda que aquí se muestran los apartamentos como entidades que no has usado para construir configuraciones de alojamiento.`
                                const selectorZonaCreacionConfiguracion = document.querySelector("[componente=zonaCreacion]")
                                const contenedorOpciones = document.createElement("select")
                                contenedorOpciones.setAttribute("componente", "selectorApartamentoIDV")
                                contenedorOpciones.classList.add("arquitecturaConfCrearConfiguracion_selectorApartamento")
                                const opcion = document.createElement("option");
                                opcion.value = "";
                                opcion.disabled = true;
                                opcion.selected = true;
                                opcion.text = "Selecciona un apartamento como entidad para comenzar";
                                contenedorOpciones.add(opcion);
                                for (const detallesApartmentoComoEntidad of apartamentosEntidad) {
                                    const apartamentoUI = detallesApartmentoComoEntidad.apartamentoUI
                                    const apartamentoIDV = detallesApartmentoComoEntidad.apartamentoIDV
                                    const opcion = document.createElement("option");
                                    opcion.value = apartamentoIDV;
                                    opcion.text = `${apartamentoUI} (${apartamentoIDV})`;
                                    contenedorOpciones.add(opcion);
                                }
                                selectorZonaCreacionConfiguracion.appendChild(contenedorOpciones)
                                const botonCrearConfiguracion = document.createElement("div")
                                botonCrearConfiguracion.classList.add("arquitecturaConfCrearConfiguracion_botonCrearConfiguracion")
                                botonCrearConfiguracion.textContent = "Crear configuración"
                                botonCrearConfiguracion.addEventListener("click", casaVitini.administracion.arquitectura_del_alojamiento.configuraciones.crearConfiguracion.transactor)
                                selectorZonaCreacionConfiguracion.appendChild(botonCrearConfiguracion)
                            }
                        }
                    },
                    transactor: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Creando configuración de alojamiento..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const apartamentoSeleccionado = document.querySelector("[componente=selectorApartamentoIDV]").value
                        if (!apartamentoSeleccionado) {
                            const error = "Selecciona un apartamento primero desde el selector de lista"
                            casaVitini.ui.componentes.advertenciaInmersiva(error)
                        }
                        const transaccion = {
                            zona: "administracion/arquitectura/configuraciones/crearConfiguracionAlojamiento",
                            apartamentoIDV: apartamentoSeleccionado
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const apartamentoIDV = respuestaServidor?.apartamentoIDV
                            const vista = `/administracion/arquitectura_del_alojamiento/configuraciones/${apartamentoIDV}`
                            const navegacion = {
                                "vista": vista,
                                "tipoOrigen": "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                }
            }
        },
        usuarios: {
            arranque: async () => {
                const main = document.querySelector("main")
                const instanciaUID = main.getAttribute("instanciaUID")

                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const comandoInicial = granuladoURL.directorios[1]
                const numeroDirectorios = granuladoURL.directorios.length
                const parametroBuscar = granuladoURL.parametros.buscar
                const rawArray = granuladoURL.rawArray


                if (rawArray.length === 2) {

                    casaVitini.administracion.usuarios.portada.buscadorUI()
                } else if (parametroBuscar?.length > 0) {

                    main.setAttribute("zonaCSS", "administracion/usuarios/buscador")
                    casaVitini.administracion.usuarios.portada.buscadorUI()
                    if (!granuladoURL.parametros.buscar) {
                        return
                    }
                    const campoBuscador = document.querySelector("[componente=zonaNavegacionPaginadaUsuarios]")
                    campoBuscador.value = decodeURI(parametroBuscar)

                    const parametrosFormatoURL = granuladoURL.parametros
                    const parametrosFormatoIDV = {}
                    Object.entries(parametrosFormatoURL).forEach(([nombreParametroURL, valorParametroURL]) => {
                        const nombreParametroIDV = casaVitini.utilidades.cadenas.snakeToCamel(nombreParametroURL)
                        let nombreColumnaIDV
                        if ((valorParametroURL)?.toLowerCase() === "cliente_uid") {
                            nombreColumnaIDV = "clienteUID"
                        } else if (valorParametroURL) {
                            nombreColumnaIDV = casaVitini.utilidades.cadenas.snakeToCamel(valorParametroURL)
                        } else if ((nombreParametroIDV)?.toLowerCase() === "buscar") {
                            valorParametroURL = decodeURI(valorParametroURL)
                        }
                        parametrosFormatoIDV[nombreParametroIDV] = nombreColumnaIDV
                    })

                    casaVitini.administracion.usuarios.portada.mostrarUsuariosResueltos(parametrosFormatoIDV)
                } else if (rawArray.length > 2) {

                    casaVitini.administracion.usuarios.detallesUsuario.arranque()
                }
            },
            portada: {
                buscadorUI: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/usuarios/buscador")
                    const espacioClientes = document.querySelector("[componente=espacioUsuarios]")
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("usuarios_contenedorBotones")
                    const botonCrearCuenta = document.createElement("a")
                    botonCrearCuenta.classList.add("usuarios_botonV1")
                    botonCrearCuenta.setAttribute("href", "/administracion/usuarios/nuevo")
                    botonCrearCuenta.setAttribute("vista", "/administracion/usuarios/nuevo")
                    botonCrearCuenta.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                    botonCrearCuenta.textContent = "Crear cuenta de usuario"
                    contenedorBotones.appendChild(botonCrearCuenta)
                    espacioClientes.appendChild(contenedorBotones)
                    const campoBuscador = document.createElement("input")
                    campoBuscador.classList.add("campoBuscadorClientes")
                    campoBuscador.setAttribute("componente", "zonaNavegacionPaginadaUsuarios")
                    campoBuscador.setAttribute("componenteCampo", "buscadorUsuarios")
                    campoBuscador.setAttribute("placeholder", "Busque un usuario por nombre de usuario, por nombre, por pasaporte, por correo o por teléfono. También puedes hacer búsquedas combinadas.")
                    campoBuscador.addEventListener("input", casaVitini.administracion.usuarios.portada.buscadorUsuariosPorCampo)
                    espacioClientes.appendChild(campoBuscador)

                },
                buscadorUsuariosPorCampo: async (cliente) => {
                    const instanciaUID = document.querySelector("main[instanciaUID]").getAttribute("instanciaUID")
                    const campo = document.querySelector("[componente=zonaNavegacionPaginadaUsuarios]")

                    const gridUsuarios = document.querySelector("[areagrid=gridUsuarios]")
                    gridUsuarios?.remove()

                    const terminoBusqueda = cliente.target.value
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    document.querySelector("[gridUID=gridUsuarios]")?.remove()
                    document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                    document.querySelector("[contenedor=filtrosOrden]")?.remove()

                    const estadoBusquedaUI = document.createElement("div")
                    estadoBusquedaUI.classList.add("buscadorClientesEstadoBusqueda")
                    estadoBusquedaUI.setAttribute("componente", "estadoBusqueda")
                    estadoBusquedaUI.textContent = "Buscando usuarios..."
                    campo.parentNode.insertBefore(estadoBusquedaUI, campo.nextSibling);


                    const campoVacio = cliente.target.value.length
                    if (campoVacio === 0) {
                        clearTimeout(casaVitini.componentes.temporizador);
                        document.querySelector("[componente=estadoBusqueda]")?.remove()
                        document.querySelector("[componenteID=gridUsuarios]")?.remove()
                        document.querySelector("[componenteID=navegacionPaginacion]")?.remove()
                        const vistaActual = document.getElementById("uiNavegacion").getAttribute("vistaActual")
                        const resetUrl = "/administracion/usuarios"
                        const titulo = "casavitini"
                        const estado = {
                            zona: vistaActual,
                            estadoInternoZona: "estado",
                            tipoCambio: "total"
                        }
                        window.history.replaceState(estado, titulo, resetUrl);
                        return;
                    }
                    clearTimeout(casaVitini.componentes.temporizador);
                    casaVitini.componentes.temporizador = setTimeout(async () => {
                        const transaccion = {
                            zona: "administracion/usuarios/buscarUsuarios",
                            tipoBusqueda: "rapido",
                            pagina: 1,
                            buscar: terminoBusqueda,
                            origen: "botonMostrarUsuarios",
                            tipoConstruccionGrid: "total",
                            instanciaUID: instanciaUID
                        }
                        casaVitini.administracion.usuarios.portada.mostrarUsuariosResueltos(transaccion)
                    }, 1500);
                },
                mostrarUsuariosResueltos: async function (transaccion) {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const selectorEspacio = document.querySelector("[componente=espacioComportamiento]")
                    selectorEspacio.setAttribute("instanciaBusqueda", instanciaUID)
                    delete transaccion.instanciaUID
                    const origen = transaccion.origen
                    delete transaccion.origen
                    const granuladoURL = casaVitini.utilidades.granuladorURL()

                    const paginaTipo = transaccion.paginaTipo
                    delete transaccion.paginaTipo

                    const selectorAlmacen = document.querySelector("[areaGrid=gridUsuarios]")?.getAttribute("almacen") || "{}"
                    const almacen = JSON.parse(selectorAlmacen)
                    const busquedaInicial = transaccion.buscar || almacen?.buscar

                    let nombreColumnaURL
                    const nombreColumna = transaccion.nombreColumna
                    if (nombreColumna) {
                        nombreColumnaURL = casaVitini.utilidades.cadenas.camelToSnake(nombreColumna)
                    }

                    const resolverUsuarios = await casaVitini.shell.servidor({
                        zona: "administracion/usuarios/buscarUsuarios",
                        tipoBusqueda: "rapido",
                        buscar: busquedaInicial,
                        nombreColumna: transaccion.nombreColumna,
                        sentidoColumna: transaccion.sentidoColumna,
                        pagina: Number(transaccion?.pagina || 1)

                    })
                    const instanciaRenderizada = document.querySelector(`[instanciaBusqueda="${instanciaUID}"]`)
                    if (!instanciaRenderizada) {
                        return
                    }


                    if (resolverUsuarios?.error) {
                        document.querySelector("[componente=estadoBusqueda]").textContent = resolverUsuarios?.error
                        return
                    }

                    if (resolverUsuarios.totalUsuarios === 0) {
                        document.querySelector("[componente=estadoBusqueda]").textContent = "No se han encontrado usuarios"
                        return
                    }
                    document.querySelector("[componente=estadoBusqueda]")?.remove()
                    const usuarios = resolverUsuarios.usuarios
                    const buscar = resolverUsuarios.buscar
                    const paginasTotales = resolverUsuarios.paginasTotales
                    const pagina = resolverUsuarios.pagina
                    const sentidoColumna = resolverUsuarios.sentidoColumna
                    const columnasGrid = [
                        {
                            columnaUI: "Usuario",
                            columnaIDV: "usuario",
                        },
                        {
                            columnaUI: "Correo",
                            columnaIDV: "mail",
                        },
                        {
                            columnaUI: "Nombre",
                            columnaIDV: "nombre",
                        },
                        {
                            columnaUI: "Primer apellido",
                            columnaIDV: "primerApellido",
                        },
                        {
                            columnaUI: "Segundo Apellido",
                            columnaIDV: "segundoApellido",
                        },
                        {
                            columnaUI: "Pasaporte",
                            columnaIDV: "pasaporte",
                        },
                        {
                            columnaUI: "Teléfono",
                            columnaIDV: "telefono",
                        },
                    ]
                    const parametrosFinales = {
                        buscar: buscar
                    }

                    if (nombreColumna) {
                        parametrosFinales.nombre_columna = nombreColumnaURL
                        parametrosFinales.sentido_columna = sentidoColumna
                    }
                    if (pagina > 1 && paginasTotales > 1) {
                        parametrosFinales.pagina = pagina
                    }
                    const estructuraParametrosFinales = []
                    for (const [parametroFinal, valorFinal] of Object.entries(parametrosFinales)) {
                        const estructura = `${parametroFinal}:${valorFinal}`
                        estructuraParametrosFinales.push(estructura)
                    }
                    let parametrosURLFInal = ""
                    if (estructuraParametrosFinales.length > 0) {
                        parametrosURLFInal = "/" + estructuraParametrosFinales.join("/")
                    }

                    const constructorURLFinal = granuladoURL.directoriosFusion + parametrosURLFInal

                    casaVitini.ui.componentes.componentesComplejos.grid.despliegue({
                        metodoSalida: "administracion.usuarios.portada.mostrarUsuariosResueltos",
                        configuracionGrid: {
                            filas: usuarios,
                            almacen: {
                                buscar: buscar,
                            },
                            sentidoColumna: sentidoColumna,
                            nombreColumna: nombreColumna,
                            pagina: pagina,
                            destino: "[componente=espacioUsuarios]",
                            columnasGrid: columnasGrid,
                            gridUID: "gridUsuarios",
                            mascaraURL: {
                                mascara: "/administracion/usuarios/",
                                parametro: "usuario"
                            },
                        },
                        configuracionPaginador: {
                            paginasTotales: paginasTotales,
                            granuladoURL: {
                                parametros: parametrosFinales,
                                directoriosFusion: granuladoURL.directoriosFusion
                            },
                        }
                    })

                    const titulo = "ADminstar reservas"
                    const estado = {
                        zona: constructorURLFinal,
                        EstadoInternoZona: "estado",
                        tipoCambio: "parcial",
                        componenteExistente: "zonaNavegacionPaginadaUsuarios",
                        funcionPersonalizada: "administracion.usuarios.portada.mostrarUsuariosResueltos",
                        args: transaccion
                    }
                    if (origen === "url" || origen === "botonMostrarUsuarios") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }
                    if ((origen === "botonNumeroPagina" && paginaTipo === "otra") || origen === "tituloColumna") {
                        window.history.pushState(estado, titulo, constructorURLFinal);
                    }
                    if (origen === "botonNumeroPagina" && paginaTipo === "actual") {
                        window.history.replaceState(estado, titulo, constructorURLFinal);
                    }
                },
            },
            detallesUsuario: {
                arranque: () => {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/usuarios/detallesDelUsuario")
                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const comandoInicial = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    if (comandoInicial === "datos_personales") {
                        const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        casaVitini.administracion.usuarios.detallesUsuario.datosUsuario.UI(usuarioUID)
                    } else if (comandoInicial === "modificar_idx") {
                        const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        casaVitini.administracion.usuarios.detallesUsuario.modificarIDX.UI(usuarioUID)
                    } else if (comandoInicial === "cambiar_clave") {
                        const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        casaVitini.administracion.usuarios.detallesUsuario.cambiarClave.UI(usuarioUID)
                    } else if (comandoInicial === "rol") {
                        const usuarioUID = granuladoURL.directorios[granuladoURL.directorios.length - 2]
                        casaVitini.administracion.usuarios.detallesUsuario.rol.UI(usuarioUID)
                    } else {
                        casaVitini.administracion.usuarios.detallesUsuario.portada.UI(comandoInicial)
                    }

                },
                portada: {
                    UI: async (usuarioIDX) => {
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "administracion/usuarios/datosCuentaIDX",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            const info = {
                                titulo: "No existe ningun usuario con ese identificador",
                                descripcion: "El usuario no existe.Prueba con otro identificador"
                            }
                            casaVitini.ui.componentes.mensajeSimple(info)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesUsuario = respuestaServidor?.ok
                            const usuarioIDX = detallesUsuario.usuario
                            const rol = detallesUsuario.rol
                            const estadoCuenta = detallesUsuario.estadoCuenta
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                            let estadoCuentaUI
                            if (estadoCuenta === "activado") {
                                estadoCuentaUI = "Desactivar cuenta"
                            }
                            if (estadoCuenta === "desactivado") {
                                estadoCuentaUI = "Activar cuenta"
                            }
                            const contenedorOpciones = document.createElement("div")
                            contenedorOpciones.classList.add("detallesUsuario_contenedorOpciones")
                            const opcionInformacion = document.createElement("a")
                            opcionInformacion.classList.add("detallesUsuario_opcionInformacion")
                            opcionInformacion.textContent = "Sus datos personales"
                            opcionInformacion.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/datos_personales`)
                            opcionInformacion.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/datos_personales`)
                            opcionInformacion.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            contenedorOpciones.appendChild(opcionInformacion)
                            const opcionCambiarIDX = document.createElement("a")
                            opcionCambiarIDX.classList.add("detallesUsuario_opcionInformacion")
                            opcionCambiarIDX.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/modificar_idx`)
                            opcionCambiarIDX.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/modificar_idx`)
                            opcionCambiarIDX.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            opcionCambiarIDX.textContent = "Modificar su VitiniID"
                            contenedorOpciones.appendChild(opcionCambiarIDX)
                            const opcionCambiarRol = document.createElement("a")
                            opcionCambiarRol.classList.add("detallesUsuario_opcionInformacion")
                            opcionCambiarRol.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/rol`)
                            opcionCambiarRol.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/rol`)
                            opcionCambiarRol.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            opcionCambiarRol.textContent = "Cambiar su rol"
                            contenedorOpciones.appendChild(opcionCambiarRol)
                            const opcionClave = document.createElement("a")
                            opcionClave.classList.add("detallesUsuario_opcionInformacion")
                            opcionClave.setAttribute("href", `/administracion/usuarios/${usuarioIDX}/cambiar_clave`)
                            opcionClave.setAttribute("vista", `/administracion/usuarios/${usuarioIDX}/cambiar_clave`)
                            opcionClave.addEventListener("click", casaVitini.shell.navegacion.cambiarVista)
                            opcionClave.textContent = "Cambiar su contrasena"
                            contenedorOpciones.appendChild(opcionClave)
                            const opcionCambiarEstado = document.createElement("a")
                            opcionCambiarEstado.classList.add("detallesUsuario_opcionInformacion")
                            opcionCambiarEstado.setAttribute("estadoCuenta", estadoCuenta)
                            opcionCambiarEstado.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarEstadoCuenta.UI)
                            opcionCambiarEstado.textContent = estadoCuentaUI
                            contenedorOpciones.appendChild(opcionCambiarEstado)
                            const opcionEliminarCuenta = document.createElement("a")
                            opcionEliminarCuenta.classList.add("detallesUsuario_opcionInformacion")
                            opcionEliminarCuenta.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.eliminarCuenta.UI)
                            opcionEliminarCuenta.textContent = "Eliminar su cuenta"
                            contenedorOpciones.appendChild(opcionEliminarCuenta)
                            espacioUsuario.appendChild(contenedorOpciones)
                        }
                    },
                },
                datosUsuario: {
                    UI: async (usuarioIDX) => {
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "/administracion/usuarios/detallesUsuario",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesUsuario = respuestaServidor?.ok
                            const usuarioIDX = detallesUsuario.usuarioIDX
                            const rol = detallesUsuario.rol
                            const datosUsuario = detallesUsuario.datosUsuario
                            const nombre = datosUsuario.nombre || ""
                            const primerApellido = datosUsuario.primerApellido || ""
                            const segundoApellido = datosUsuario.segundoApellido || ""
                            const pasaporte = datosUsuario.pasaporte || ""
                            const telefono = datosUsuario.telefono || ""
                            const mail = datosUsuario.mail || ""
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                            const contenedorDatosUsuario = document.createElement("div")
                            contenedorDatosUsuario.classList.add("detallesUsuario_contenedorDatosUsuario")
                            const nombreUI = document.createElement("a")
                            nombreUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            let titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.textContent = "Nombre"
                            nombreUI.appendChild(titulo)
                            const campoNombre = document.createElement("input")
                            campoNombre.classList.add("detallesUsuario_campoDatosUsuario")
                            campoNombre.setAttribute("campo", "nombre")
                            campoNombre.value = nombre
                            nombreUI.appendChild(campoNombre)
                            contenedorDatosUsuario.appendChild(nombreUI)
                            const primerApellidoUI = document.createElement("a")
                            primerApellidoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.textContent = "Primero apellido"
                            primerApellidoUI.appendChild(titulo)
                            const campoPrimerApellido = document.createElement("input")
                            campoPrimerApellido.classList.add("detallesUsuario_campoDatosUsuario")
                            campoPrimerApellido.setAttribute("campo", "primerApellido")
                            campoPrimerApellido.value = primerApellido
                            primerApellidoUI.appendChild(campoPrimerApellido)
                            contenedorDatosUsuario.appendChild(primerApellidoUI)
                            const segundoApellidoUI = document.createElement("a")
                            segundoApellidoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.textContent = "Segundo apellido"
                            segundoApellidoUI.appendChild(titulo)
                            const campoSegundoApellido = document.createElement("input")
                            campoSegundoApellido.classList.add("detallesUsuario_campoDatosUsuario")
                            campoSegundoApellido.setAttribute("campo", "segundoApellido")
                            campoSegundoApellido.value = segundoApellido
                            segundoApellidoUI.appendChild(campoSegundoApellido)
                            contenedorDatosUsuario.appendChild(segundoApellidoUI)
                            const pasaporteUI = document.createElement("a")
                            pasaporteUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.textContent = "Pasaporte"
                            pasaporteUI.appendChild(titulo)
                            const campoPasaporte = document.createElement("input")
                            campoPasaporte.classList.add("detallesUsuario_campoDatosUsuario")
                            campoPasaporte.setAttribute("campo", "pasaporte")
                            campoPasaporte.value = pasaporte
                            pasaporteUI.appendChild(campoPasaporte)
                            contenedorDatosUsuario.appendChild(pasaporteUI)
                            const telefonoUI = document.createElement("a")
                            telefonoUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.textContent = "Teléfono"
                            telefonoUI.appendChild(titulo)
                            const campoTelefono = document.createElement("input")
                            campoTelefono.classList.add("detallesUsuario_campoDatosUsuario")
                            campoTelefono.setAttribute("campo", "telefono")
                            campoTelefono.value = telefono
                            telefonoUI.appendChild(campoTelefono)
                            contenedorDatosUsuario.appendChild(telefonoUI)
                            const mailUI = document.createElement("a")
                            mailUI.classList.add("detallesUsuario_contenedorCampoEInfo")
                            titulo = document.createElement("p")
                            titulo.classList.add("tituloDato")
                            titulo.textContent = "Correo electroníco"
                            mailUI.appendChild(titulo)
                            const campomail = document.createElement("input")
                            campomail.classList.add("detallesUsuario_campoDatosUsuario")
                            campomail.setAttribute("campo", "mail")
                            campomail.value = mail
                            mailUI.appendChild(campomail)
                            contenedorDatosUsuario.appendChild(mailUI)
                            espacioUsuario.appendChild(contenedorDatosUsuario)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                            contenedorBotones.setAttribute("componente", "contenedorBotones")
                            const botonGuardarCambios = document.createElement("div")
                            botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                            botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.datosUsuario.guardarCambios)
                            botonGuardarCambios.textContent = "Guardar cambios"
                            contenedorBotones.appendChild(botonGuardarCambios)
                            const botonCancelarCambios = document.createElement("div")
                            botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                            botonCancelarCambios.textContent = "Cancelar cambios"
                            botonCancelarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.datosUsuario.cancelarCambios)
                            contenedorBotones.appendChild(botonCancelarCambios)
                            espacioUsuario.appendChild(contenedorBotones)
                            const campos = document.querySelectorAll("[campo]")
                            const controladorCampos = () => {
                                let estadoGlobalCampos = "vacios"
                                campos.forEach((campo) => {
                                    if (campo.value.length > 0) {
                                        estadoGlobalCampos = "noVacios"
                                    }
                                })
                                const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                                if (estadoGlobalCampos === "vacios") {
                                    selectorContenedorBotones.removeAttribute("style")
                                }
                                if (estadoGlobalCampos === "noVacios") {
                                    selectorContenedorBotones.style.display = "flex"
                                }
                            }
                            campos.forEach((campo) => {
                                campo.addEventListener("input", controladorCampos)
                            })
                        }
                    },
                    editar: () => {
                        let camposLectura = document.querySelectorAll("[componenteDetalle]")
                        camposLectura.forEach((campo) => {
                            let datoCampo = campo.textContent
                            let idCampo = campo.getAttribute("componenteDetalle")
                            campo.style.display = "none"
                            let tipoElemento
                            if (idCampo === "notas") {
                                tipoElemento = "textarea"
                            } else {
                                tipoElemento = "input"
                            }
                            let campoEditable = document.createElement(tipoElemento)
                            campoEditable.classList.add("detallesClienteCampoEditable")
                            campoEditable.value = datoCampo
                            campoEditable.setAttribute("componenteEditable", idCampo)
                            let selectorContenedor = campo.parentNode
                            selectorContenedor.appendChild(campoEditable)
                        })
                        document.querySelector("[boton=editar]").classList.add("estadoInicialInvisible")
                        document.querySelector("[boton=dejarDeEditar]").classList.remove("estadoInicialInvisible")
                        document.querySelector("[boton=guardarCambios]").classList.remove("estadoInicialInvisible")
                    },
                    cancelarCambios: () => {
                        const campos = document.querySelectorAll("[campo]")
                        campos.forEach((campo) => {
                            campo.value = null
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")
                    },
                    guardarCambios: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando datos del usuario..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const campos = document.querySelectorAll("[campo]")
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const datosParaActualizar = {
                            zona: "administracion/usuarios/actualizarDatosUsuarioDesdeAdministracion",
                            usuarioIDX: usuarioIDX
                        }
                        campos.forEach((campo) => {
                            const campoID = campo.getAttribute("campo")
                            const campoDato = campo.value
                            datosParaActualizar[campoID] = campoDato
                        })

                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const detallesUsuario = respuestaServidor?.datosActualizados
                            const nombre = detallesUsuario.nombre
                            const primerApellido = detallesUsuario.primerApellido
                            const segundoApellido = detallesUsuario.segundoApellido
                            const pasaporte = detallesUsuario.pasaporte
                            const telefono = detallesUsuario.telefono
                            const mail = detallesUsuario.mail
                            campos.forEach((campo) => {
                                const campoID = campo.getAttribute("campo")
                                campo.value = detallesUsuario[campoID]
                            })
                            const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                            selectorContenedorBotones.removeAttribute("style")
                        }
                    }
                },
                rol: {
                    UI: async (usuarioIDX) => {
                        let rol
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "administracion/usuarios/detallesUsuario",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            rol = respuestaServidor?.ok.rol
                            const usuariosIDX = respuestaServidor?.ok.usuarioIDX
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                        }
                        const contenedorCampos = document.createElement("div")
                        contenedorCampos.classList.add("detallesUsuario_contenedorCampos")
                        const infoModificarIDX = document.createElement("div")
                        infoModificarIDX.classList.add("detallesUsuario_infoModificarIDX")
                        infoModificarIDX.textContent = `Cambia el rol de esta cuenta al rol que quieras. Recuerda que el rol determina el grado de acceso y autoridad dentro del sistema. El rol cliente es el rol que tiene que tener la cuentas de los clientes de casa vitini. Este rolo solo permite acceder a sus datos de usuario. Controlar solo su cuenta y ver sus reservas. El rol empleado permite acceder al panel de administración, pero solo para gestionar reservas y clientes y nada más. No puede, por ejemplo, modificar precios. El rol administrador es el rol de más autoridad y puede hacer cualquier cosa y tener acceso a todo.`
                        contenedorCampos.appendChild(infoModificarIDX)
                        const selectorRoles = document.createElement("select");
                        selectorRoles.classList.add("detallesUsuario_rol_selector")
                        selectorRoles.setAttribute("selector", "roles")
                        selectorRoles.addEventListener("change", casaVitini.administracion.usuarios.detallesUsuario.rol.guardarCambios)
                        const roles = [
                            {
                                rolUI: "Administrador",
                                rol: "administrador"

                            },
                            {
                                rolUI: "Empleado",
                                rol: "empleado"

                            },
                            {
                                rolUI: "Cliente",
                                rol: "cliente"

                            },
                        ]

                        for (const detallesRol of roles) {
                            const rolUI = detallesRol.rolUI
                            const rolIDX = detallesRol.rol
                            const opcionRol = document.createElement("option");
                            opcionRol.value = rolIDX;
                            opcionRol.text = rolUI;
                            if (rol === rolIDX) {
                                opcionRol.selected = true;
                            }
                            selectorRoles.appendChild(opcionRol);
                        }
                        contenedorCampos.appendChild(selectorRoles);
                        espacioUsuario.appendChild(contenedorCampos)
                        const contenedorBotones = document.createElement("div")
                        contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                        contenedorBotones.setAttribute("componente", "contenedorBotones")
                        const botonGuardarCambios = document.createElement("div")
                        botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                        botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.rol.guardarCambios)
                        botonGuardarCambios.textContent = "Cambiar rol de la cuenta"
                        contenedorBotones.appendChild(botonGuardarCambios)
                        espacioUsuario.appendChild(contenedorBotones)

                    },
                    guardarCambios: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando rol del VitiniIDX..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const selectorRol = document.querySelector("[selector=roles]").value
                        const datosParaActualizar = {
                            zona: "administracion/usuarios/actualizarRolCuenta",
                            usuarioIDX: usuarioIDX,
                            nuevoRol: selectorRol
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const rolIDV = respuestaServidor?.rolIDV
                            const rolUI = respuestaServidor?.rolUI
                            document.querySelector("[componente=rolUI]").textContent = rolUI
                            document.querySelector("[selector=roles]").value = rolIDV
                        }
                    },
                    cancelarCambios: () => {
                        const campos = document.querySelectorAll("[campo]")
                        campos.forEach((campo) => {
                            campo.value = null
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")
                    },
                },
                cambiarEstadoCuenta: {
                    UI: async () => {
                        const estadoCuentaActual = document.querySelector("[estadoCuenta]").getAttribute("estadoCuenta")
                        let tituloBoton
                        let valorBoton
                        let textoDescriptivo
                        let tituloInformativo
                        if (estadoCuentaActual === "activado") {
                            tituloBoton = "Desactivar cuenta"
                            tituloInformativo = "Confirma la desactivacion de la cuenta"
                            textoDescriptivo = "¿Quieres Desactivar esta cuenta? El usuario de esta cuenta podra volver a logearse con ella. Sus implicaciones son inmediatas"
                            valorBoton = "desactivado"
                        }
                        if (estadoCuentaActual === "desactivado") {
                            tituloBoton = "Activar cuenta"
                            tituloInformativo = "Confirma la activacion de la cuenta"
                            textoDescriptivo = "¿Quieres Aactivar esta cuenta? El usuario de esta cuenta no podra volver a logearse con ella. Sus implicaciones son inmediatas"
                            valorBoton = "activado"
                        }
                        const advertenciaInmersivaIU = document.createElement("div")
                        advertenciaInmersivaIU.setAttribute("class", "advertenciaInmersiva")
                        advertenciaInmersivaIU.setAttribute("componente", "advertenciaInmersiva")
                        const contenedorAdvertenciaInmersiva = document.createElement("div")
                        contenedorAdvertenciaInmersiva.classList.add("contenedorAdvertencaiInmersiva")
                        const tituloCancelarReserva = document.createElement("p")
                        tituloCancelarReserva.classList.add("detallesReservaTituloCancelarReserva")
                        tituloCancelarReserva.textContent = tituloInformativo
                        contenedorAdvertenciaInmersiva.appendChild(tituloCancelarReserva)
                        const bloqueBloqueoApartamentos = document.createElement("div")
                        bloqueBloqueoApartamentos.classList.add("detallesReservaCancelarReservaBloqueBloqueoApartamentos")
                        const tituloBloquoApartamentos = document.createElement("div")
                        tituloBloquoApartamentos.classList.add("detallesReservaCancelarReservaTituloBloquoApartamentos")
                        tituloBloquoApartamentos.textContent = textoDescriptivo
                        bloqueBloqueoApartamentos.appendChild(tituloBloquoApartamentos)
                        contenedorAdvertenciaInmersiva.appendChild(bloqueBloqueoApartamentos)
                        const bloqueBotones = document.createElement("div")
                        bloqueBotones.classList.add("detallesReservaCancelarReservabloqueBotones")
                        const botonCancelar = document.createElement("div")
                        botonCancelar.classList.add("detallesReservaCancelarBoton")
                        botonCancelar.setAttribute("componente", "botonConfirmarCancelarReserva")
                        botonCancelar.textContent = tituloBoton
                        botonCancelar.setAttribute("nuevoEstado", valorBoton)
                        botonCancelar.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarEstadoCuenta.transactor)
                        bloqueBotones.appendChild(botonCancelar)
                        const botonCancelarProcesoCancelacion = document.createElement("div")
                        botonCancelarProcesoCancelacion.classList.add("detallesReservaCancelarBoton")
                        botonCancelarProcesoCancelacion.textContent = "Cancelar el cambio de estado"
                        botonCancelarProcesoCancelacion.addEventListener("click", () => {
                            let selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        })
                        bloqueBotones.appendChild(botonCancelarProcesoCancelacion)
                        contenedorAdvertenciaInmersiva.appendChild(bloqueBotones)
                        advertenciaInmersivaIU.appendChild(contenedorAdvertenciaInmersiva)
                        document.querySelector("main").appendChild(advertenciaInmersivaIU)
                    },
                    transactor: async (nuevoEstado) => {
                        const nuevoEstado_ = nuevoEstado.target.getAttribute("nuevoEstado")
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const transaccion = {
                            zona: "administracion/usuarios/actualizarEstadoCuentaDesdeAdministracion",
                            "usuarioIDX": usuarioIDX,
                            "nuevoEstado": nuevoEstado_
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const estadoActual = respuestaServidor?.estadoCuenta
                            let estadoCuentaUI
                            if (estadoActual === "activado") {
                                estadoCuentaUI = "Desactivar cuenta"
                            }
                            if (estadoActual === "desactivado") {
                                estadoCuentaUI = "Activar cuenta"
                            }
                            const selectorEstadoCuentaUI = document.querySelector("[estadoCuenta]")
                            selectorEstadoCuentaUI.textContent = estadoCuentaUI
                            selectorEstadoCuentaUI.setAttribute("estadoCuenta", estadoActual)
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        }
                    }
                },
                cambiarClave: {
                    UI: async (usuarioIDX) => {
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "administracion/usuarios/detallesUsuario",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const rol = respuestaServidor?.ok.rol
                            const usuariosIDX = respuestaServidor?.ok.usuarioIDX
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                            const contenedorCampos = document.createElement("div")
                            contenedorCampos.classList.add("detallesUsuario_contenedorCampos")
                            const infoModificarIDX = document.createElement("div")
                            infoModificarIDX.classList.add("detallesUsuario_infoModificarIDX")
                            infoModificarIDX.textContent = `Escriba la nueva clave que quiera establecer`
                            contenedorCampos.appendChild(infoModificarIDX)

                            const campoNuevaClave = document.createElement("input")
                            campoNuevaClave.classList.add("detallesUsuario_campoNuevoIDX")
                            campoNuevaClave.setAttribute("campo", "claveNueva")
                            campoNuevaClave.setAttribute("componente", "claveNueva")
                            campoNuevaClave.placeholder = "Escriba la nueva contrasena"
                            contenedorCampos.appendChild(campoNuevaClave)
                            const campoVerificaClave = document.createElement("input")
                            campoVerificaClave.classList.add("detallesUsuario_campoNuevoIDX")
                            campoVerificaClave.setAttribute("campo", "claveNuevaDos")
                            campoVerificaClave.setAttribute("componente", "claveNuevaDos")
                            campoVerificaClave.placeholder = "Escriba de nueva la nueva contrasena"
                            contenedorCampos.appendChild(campoVerificaClave)
                            espacioUsuario.appendChild(contenedorCampos)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                            contenedorBotones.setAttribute("componente", "contenedorBotones")
                            const botonGuardarCambios = document.createElement("div")
                            botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                            botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarClave.guardarCambios)
                            botonGuardarCambios.textContent = "Cambiar contrasena"
                            contenedorBotones.appendChild(botonGuardarCambios)
                            const botonCancelarCambios = document.createElement("div")
                            botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                            botonCancelarCambios.textContent = "Cancelar cambio"
                            botonCancelarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarClave.cancelarCambios)
                            contenedorBotones.appendChild(botonCancelarCambios)
                            espacioUsuario.appendChild(contenedorBotones)
                            const controladorCampos = () => {
                                let estadoGlobalCampos = "vacios"
                                campos.forEach((campo) => {
                                    if (campo.value.length > 0) {
                                        estadoGlobalCampos = "noVacios"
                                    }
                                })
                                const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                                if (estadoGlobalCampos === "vacios") {
                                    selectorContenedorBotones.removeAttribute("style")
                                }
                                if (estadoGlobalCampos === "noVacios") {
                                    selectorContenedorBotones.style.display = "flex"
                                }
                            }
                            const campos = document.querySelectorAll("[campo]")
                            campos.forEach((campo) => {
                                campo.addEventListener("input", controladorCampos)
                            })
                        }
                    },
                    guardarCambios: async () => {
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")

                        const instanciaUIDPantallaDeCarga = casaVitini.utilidades.codigoFechaInstancia()
                        const instanciaUID = document.querySelector("main").getAttribute("instanciaUID")
                        const mensaje = `Actualizando contraseña del usuario ${usuarioIDX}...`
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUIDPantallaDeCarga,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const claveNueva = document.querySelector("[componente=claveNueva]")
                        const claveNuevaDos = document.querySelector("[componente=claveNuevaDos]")
                        const datosParaActualizar = {
                            zona: "administracion/usuarios/actualizarClaveUsuarioAdministracion",
                            usuarioIDX: usuarioIDX,
                            claveNueva: claveNueva.value,
                            claveNuevaDos: claveNuevaDos.value
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)
                        const pantallaDeCargaRenderizada = document.querySelector(`[instanciaUID="${instanciaUIDPantallaDeCarga}"]`)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)

                        if (!pantallaDeCargaRenderizada) { }
                        pantallaDeCargaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.error)
                        }
                        if (respuestaServidor?.ok) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor.ok)
                            const campos = instanciaRenderizada.querySelectorAll("[campo]")
                            campos.forEach((campo) => {
                                campo.value = ""
                            })

                        }
                    },
                    cancelarCambios: () => {
                        const campos = document.querySelectorAll("[campo]")
                        campos.forEach((campo) => {
                            campo.value = null
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")
                    },
                },
                cambiarEstadoCuenta: {
                    UI: async () => {
                        const estadoCuentaActual = document.querySelector("[estadoCuenta]").getAttribute("estadoCuenta")
                        let tituloBoton
                        let valorBoton
                        let textoDescriptivo
                        let tituloInformativo
                        if (estadoCuentaActual === "activado") {
                            tituloBoton = "Desactivar cuenta"
                            tituloInformativo = "Confirma la desactivación de la cuenta"
                            textoDescriptivo = "¿Quieres desactivar esta cuenta? El usuario de esta cuenta podría volver a loguearse con ella. Sus implicaciones son inmediatas."
                            valorBoton = "desactivado"
                        }
                        if (estadoCuentaActual === "desactivado") {
                            tituloBoton = "Activar cuenta"
                            tituloInformativo = "Confirma la activación de la cuenta"
                            textoDescriptivo = "¿Quieres activar esta cuenta? El usuario de esta cuenta no podrá volver a loguearse con ella. Sus implicaciones son inmediatas."
                            valorBoton = "activado"
                        }


                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = tituloInformativo
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = textoDescriptivo

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.textContent = tituloBoton
                        botonAceptar.setAttribute("nuevoEstado", valorBoton)
                        botonAceptar.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.cambiarEstadoCuenta.transactor)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Cancelar y volver"

                        document.querySelector("main").appendChild(pantallaInmersiva)
                    },
                    transactor: async (nuevoEstado) => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando estado del VitiniIDX..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const nuevoEstado_ = nuevoEstado.target.getAttribute("nuevoEstado")
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const transaccion = {
                            zona: "administracion/usuarios/actualizarEstadoCuentaDesdeAdministracion",
                            "usuarioIDX": usuarioIDX,
                            "nuevoEstado": nuevoEstado_
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const estadoActual = respuestaServidor?.estadoCuenta
                            let estadoCuentaUI
                            if (estadoActual === "activado") {
                                estadoCuentaUI = "Desactivar cuenta"
                            }
                            if (estadoActual === "desactivado") {
                                estadoCuentaUI = "Activar cuenta"
                            }
                            const selectorEstadoCuentaUI = document.querySelector("[estadoCuenta]")
                            selectorEstadoCuentaUI.textContent = estadoCuentaUI
                            selectorEstadoCuentaUI.setAttribute("estadoCuenta", estadoActual)
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                        }
                    }
                },
                eliminarCuenta: {
                    UI: async () => {

                        const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizadaMoldeada()
                        const constructor = pantallaInmersiva.querySelector("[componente=constructor]")

                        const titulo = constructor.querySelector("[componente=titulo]")
                        titulo.textContent = "Confirma la eliminación de esta cuenta"
                        const mensaje = constructor.querySelector("[componente=mensajeUI]")
                        mensaje.textContent = "Si quieres eliminar esta cuenta, confirma su eliminación. Esta operación es inmediata e irreversible. Una vez eliminada la cuenta, sus datos son irrecuperables. Si deseas mantener los datos de esta cuenta, pero a su vez congelar su funcionalidad, es recomendable desactivar la cuenta antes que eliminarla."

                        const botonAceptar = constructor.querySelector("[boton=aceptar]")
                        botonAceptar.textContent = "Comfirmar la eliminacion de la cuenta"
                        botonAceptar.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.eliminarCuenta.transactor)
                        const botonCancelar = constructor.querySelector("[boton=cancelar]")
                        botonCancelar.textContent = "Cancelar la eliminacion y volver"

                        document.querySelector("main").appendChild(pantallaInmersiva)

                    },
                    transactor: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Elimiando el VitiniIDX..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const usuarioIDX = document.querySelector("[usuarioIDX]").getAttribute("usuarioIDX")
                        const transaccion = {
                            zona: "administracion/usuarios/eliminarCuentaDesdeAdministracion",
                            "usuarioIDX": usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const selectorAdvertenciaInmersiva = document.querySelectorAll("[componente=advertenciaInmersiva]")
                            selectorAdvertenciaInmersiva.forEach((advertenciaInmersiva) => {
                                advertenciaInmersiva.remove()
                            })
                            const navegacion = {
                                "vista": "/administracion/usuarios",
                                "tipoOrigen": "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    }
                },
                componentes: {
                    bannerIDX: (metadatos) => {
                        const usuarioIDX = metadatos.usuarioIDX
                        const rol = metadatos.rol
                        const rolUITexto = rol.substring(0, 1).toUpperCase() + rol.substring(1);
                        const contenedorUsuarioIDX = document.createElement("div")
                        contenedorUsuarioIDX.classList.add("detallesUsuario_contenedorUsuarioIDX")
                        contenedorUsuarioIDX.setAttribute("componente", "contenedorUsuarioUX")
                        const esferaUsuario = document.createElement("div")
                        esferaUsuario.classList.add("detallesUsuario_esferaUsuario")
                        esferaUsuario.setAttribute("componente", "esferaUsuario")
                        contenedorUsuarioIDX.appendChild(esferaUsuario)
                        const contenedorDatosGlobales = document.createElement("div")
                        contenedorDatosGlobales.classList.add("detallesUsuario_contenedorDatosGlobales")
                        contenedorDatosGlobales.setAttribute("componente", "contenedorDatosGlobales")
                        const usuarioIDXUI = document.createElement("div")
                        usuarioIDXUI.classList.add("detallesUsuario_usuarioUI")
                        usuarioIDXUI.setAttribute("usuarioIDX", usuarioIDX)
                        usuarioIDXUI.textContent = usuarioIDX
                        contenedorDatosGlobales.appendChild(usuarioIDXUI)
                        const rolUI = document.createElement("div")
                        rolUI.classList.add("detallesUsuario_rolUI")
                        rolUI.setAttribute("componente", "rolUI")
                        rolUI.textContent = rolUITexto
                        contenedorDatosGlobales.appendChild(rolUI)
                        contenedorUsuarioIDX.appendChild(contenedorDatosGlobales)
                        return contenedorUsuarioIDX
                    }
                },
                modificarIDX: {
                    UI: async (usuarioIDX) => {
                        const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                        const transaccion = {
                            zona: "administracion/usuarios/detallesUsuario",
                            usuarioIDX: usuarioIDX
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const rol = respuestaServidor?.ok.rol
                            const usuariosIDX = respuestaServidor?.ok.usuarioIDX
                            const datosBanner = {
                                usuarioIDX: usuarioIDX,
                                rol: rol
                            }
                            const contenedorDetallesUsuario = document.createElement("div")
                            contenedorDetallesUsuario.classList.add("detallesUsuario_contenedorGlobal")
                            contenedorDetallesUsuario.setAttribute("componente", "contenedorGlobal")
                            const contenedorUsuarioIDX = casaVitini.administracion.usuarios.detallesUsuario.componentes.bannerIDX(datosBanner)
                            contenedorDetallesUsuario.appendChild(contenedorUsuarioIDX)
                            espacioUsuario.appendChild(contenedorDetallesUsuario)
                            const contenedorCampos = document.createElement("div")
                            contenedorCampos.classList.add("detallesUsuario_contenedorCampos")
                            const infoModificarIDX = document.createElement("div")
                            infoModificarIDX.classList.add("detallesUsuario_infoModificarIDX")
                            infoModificarIDX.textContent = `Escriba el nuevo VitiniID para este usuario en el campo de abajo. Recuerde que modificar el IDX deja libre el anterior IDX para que otro usuario, si quiere, lo obtenga.`
                            contenedorCampos.appendChild(infoModificarIDX)
                            const campoNuevoIDX = document.createElement("input")
                            campoNuevoIDX.classList.add("detallesUsuario_campoNuevoIDX")
                            campoNuevoIDX.setAttribute("campo", "nuevoIDX")
                            campoNuevoIDX.setAttribute("componente", "nuevoIDX")
                            campoNuevoIDX.placeholder = usuariosIDX
                            contenedorCampos.appendChild(campoNuevoIDX)
                            espacioUsuario.appendChild(contenedorCampos)
                            const contenedorBotones = document.createElement("div")
                            contenedorBotones.classList.add("detallesUsuario_contenedorBotones")
                            contenedorBotones.setAttribute("componente", "contenedorBotones")
                            const botonGuardarCambios = document.createElement("div")
                            botonGuardarCambios.classList.add("detallesUsuario_botonV1")
                            botonGuardarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.modificarIDX.guardarCambios)
                            botonGuardarCambios.textContent = "Guardar el nuevo VitiniID"
                            contenedorBotones.appendChild(botonGuardarCambios)
                            const botonCancelarCambios = document.createElement("div")
                            botonCancelarCambios.classList.add("detallesUsuario_botonV1")
                            botonCancelarCambios.textContent = "Cancelar cambios"
                            botonCancelarCambios.addEventListener("click", casaVitini.administracion.usuarios.detallesUsuario.modificarIDX.cancelarCambios)
                            contenedorBotones.appendChild(botonCancelarCambios)
                            espacioUsuario.appendChild(contenedorBotones)
                            const controladorCampos = () => {
                                let estadoGlobalCampos = "vacios"
                                campos.forEach((campo) => {
                                    if (campo.value.length > 0) {
                                        estadoGlobalCampos = "noVacios"
                                    }
                                })
                                const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                                if (estadoGlobalCampos === "vacios") {
                                    selectorContenedorBotones.removeAttribute("style")
                                }
                                if (estadoGlobalCampos === "noVacios") {
                                    selectorContenedorBotones.style.display = "flex"
                                }
                            }
                            const campos = document.querySelectorAll("[campo]")
                            campos.forEach((campo) => {
                                campo.addEventListener("input", controladorCampos)
                            })
                        }
                    },
                    guardarCambios: async () => {
                        const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                        const mensaje = "Actualizando el VitiniIDX..."
                        const datosPantallaSuperpuesta = {
                            instanciaUID: instanciaUID,
                            mensaje: mensaje
                        }
                        casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                        const usuarioIDX = document.querySelector("[usuarioIDX]")
                        const nuevoIDX = document.querySelector("[componente=nuevoIDX]")
                        const datosParaActualizar = {
                            zona: "administracion/usuarios/actualizarIDXAdministracion",
                            usuarioIDX: usuarioIDX.getAttribute("usuarioIDX"),
                            nuevoIDX: nuevoIDX.value
                        }
                        const respuestaServidor = await casaVitini.shell.servidor(datosParaActualizar)

                        const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                        if (!instanciaRenderizada) { return }
                        instanciaRenderizada.remove()
                        if (respuestaServidor?.error) {
                            casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                        }
                        if (respuestaServidor?.ok) {
                            const IDXEstablecido = respuestaServidor?.usuarioIDX
                            nuevoIDX.value = null
                            nuevoIDX.placeholder = IDXEstablecido
                            usuarioIDX.innerHTML = IDXEstablecido
                            usuarioIDX.setAttribute("usuarioIDX", IDXEstablecido)
                            const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                            selectorContenedorBotones.removeAttribute("style")
                            const vistaActual = `/administracion/usuarios/${IDXEstablecido}/modificar_idx`
                            const estado = {
                                zona: vistaActual,
                                estadoInternoZona: "estado",
                                tipoCambio: "total"
                            }
                            const titulo = "Casa Vitini"
                            window.history.replaceState(estado, titulo, vistaActual);
                            casaVitini.shell.controladoresUI.controladorEstadoIDX()

                        }
                    },
                    cancelarCambios: () => {
                        const campos = document.querySelectorAll("[campo]")
                        campos.forEach((campo) => {
                            campo.value = null
                        })
                        const selectorContenedorBotones = document.querySelector("[componente=contenedorBotones]")
                        selectorContenedorBotones.removeAttribute("style")
                    },
                },
            },
            nuevoUsuario: {
                arranque: function () {
                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/usuarios/nuevo")
                    const espacioUsuario = document.querySelector("[componente=espacioUsuarios]")
                    const contenedorGlobal = document.createElement("div")
                    contenedorGlobal.classList.add("usuariosCrearCuenta_contenedorGlobal")
                    const informacionCuenta = document.createElement("div")
                    informacionCuenta.classList.add("usuariosCrearCuenta_informacion")
                    informacionCuenta.textContent = `Escriba el nombre de usuario de la nueva cuenta, este será el VitiniID de la nueva cuenta. Luego pulse en el botón crear cuenta y, tras crearse la cuenta, irá al panel de la cuenta creada donde podrá seguir con las modificaciones pertinentes. Una vez establezca la contraseña, deberá activar la cuenta.`
                    contenedorGlobal.appendChild(informacionCuenta)
                    const campoNuevoUsuario = document.createElement("input")
                    campoNuevoUsuario.classList.add("usuariosCrearCuenta_campoUsuario")
                    campoNuevoUsuario.setAttribute("campo", "usuarioIDX")
                    campoNuevoUsuario.placeholder = "Escriba el nuevo VitiniID"
                    contenedorGlobal.appendChild(campoNuevoUsuario)
                    const infoPass = document.createElement("div")
                    infoPass.classList.add("usuariosCrearCuenta_informacion")
                    infoPass.textContent = `Escribe la contraseña de esta cuenta. Una vez creada la cuenta, siempre puedes cambiar la contraseña desde el panel del usuario. Es recomendable escribir una contraseña compleja creada con un generador de contraseñas para que sea irrecordable y usar un gestor de contraseñas para gestionar las contraseñas.  `
                    contenedorGlobal.appendChild(infoPass)
                    const campoClave = document.createElement("input")
                    campoClave.classList.add("usuariosCrearCuenta_campoUsuario")
                    campoClave.setAttribute("campo", "clave")
                    campoClave.placeholder = "Escriba una contraseña para este nuevo usuario"
                    campoClave.type = "password"
                    contenedorGlobal.appendChild(campoClave)
                    const informacionRol = document.createElement("div")
                    informacionRol.classList.add("usuariosCrearCuenta_informacion")
                    informacionRol.textContent = `Selecciona el rol de la nueva cuenta. Si es una cuenta para un cliente de Casa Vitini escoge el rol Cliente. Si es una cuenta para un Empleado de Casa Vitini escoge el rol Empleado y, si es para un administrador de Casa Vitini escoge el rol Administrador. Cada rol otorga un acceso y autoridad distintos. Por ejemplo, el rol Cliente solo permite administrar la propia cuenta, no da acceso al panel de control de administración. El rol empleado sí da acceso al panel de administración, pero hay ciertas operaciones que no puede hacer, como por ejemplo alterar precios, ofertas o configuraciones de alojamiento. Si puede realizar reservas, modificar reservas, cancelar reservas, pero no eliminarlas. El rol de Administrador puede hacer cualquier cosa.`
                    contenedorGlobal.appendChild(informacionRol)
                    const selectorRol = document.createElement("select")
                    selectorRol.classList.add("usuariosCrearCuenta_campoUsuario")
                    selectorRol.setAttribute("campo", "selectorRol")
                    const opcionInical = document.createElement("option");
                    opcionInical.value = "";
                    opcionInical.selected = "true"
                    opcionInical.disabled = "true"
                    opcionInical.text = "Selecciona el rol de la nueva cuenta";
                    selectorRol.add(opcionInical);
                    const rolAdministrador = document.createElement("option");
                    rolAdministrador.value = "administrador";
                    rolAdministrador.text = "Administrador";
                    selectorRol.add(rolAdministrador);
                    const rolEmpleado = document.createElement("option");
                    rolEmpleado.value = "empleado";
                    rolEmpleado.text = "Empleado";
                    selectorRol.add(rolEmpleado);
                    const rolCliente = document.createElement("option");
                    rolCliente.value = "cliente";
                    rolCliente.text = "Cliente";
                    selectorRol.add(rolCliente);
                    contenedorGlobal.appendChild(selectorRol)
                    espacioUsuario.appendChild(contenedorGlobal)
                    const contenedorBotones = document.createElement("div")
                    contenedorBotones.classList.add("usuariosCrearCuenta_contenedorBotones")
                    const botonCrearUsuario = document.createElement("div")
                    botonCrearUsuario.classList.add("usuarioCrearCuenta_botonV1")
                    botonCrearUsuario.textContent = "Crear nueva cuenta de usuario"
                    botonCrearUsuario.addEventListener("click", this.transactor)
                    contenedorBotones.appendChild(botonCrearUsuario)
                    espacioUsuario.appendChild(contenedorBotones)
                },
                transactor: async () => {
                    const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                    const mensaje = "Creando usuarios..."
                    const datosPantallaSuperpuesta = {
                        instanciaUID: instanciaUID,
                        mensaje: mensaje
                    }
                    casaVitini.ui.componentes.pantallaDeCargaSuperPuesta(datosPantallaSuperpuesta)
                    const nuevoUsuarioIDX = document.querySelector("[campo=usuarioIDX]").value
                    const clave = document.querySelector("[campo=clave]").value
                    const rol = document.querySelector("[campo=selectorRol]").value
                    const metadatos = {
                        zona: "administracion/usuarios/crearCuentaDesdeAdministracion",
                        usuarioIDX: nuevoUsuarioIDX,
                        clave: clave,
                        rolIDV: rol
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(metadatos)
                    const instanciaRenderizada = document.querySelector(`[instanciaUID="${instanciaUID}"]`)
                    if (!instanciaRenderizada) { return }
                    instanciaRenderizada.remove()
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const usuarioIDX = respuestaServidor?.usuarioIDX
                        const navegacion = {
                            "vista": "/administracion/usuarios/" + usuarioIDX,
                            "tipoOrigen": "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    }
                }
            }
        },
        calendario: {
            arranque: async function () {
                try {
                    const html = document.querySelector("html")
                    html.style.height = "100%"

                    const main = document.querySelector("main")
                    main.setAttribute("zonaCSS", "administracion/calendario")

                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const parametros = granuladoURL.parametros
                    const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                    const ultimoDirectorio = granuladoURL.directorios[granuladoURL.directorios.length - 1]
                    const sectionRenderizada = document.querySelector("main")
                    const instanciaUID_main = sectionRenderizada.getAttribute("instanciaUID")
                    sectionRenderizada.style.maxWidth = "100%"

                    const configuracionCalendario = {}
                    const configuracionControladorRegistros = {}

                    const contenedorCapas = {
                        capas: [],
                        capasCompuestas: {}
                    }
                    if (parametros.fecha) {
                        const fecha = parametros.fecha.split("-")
                        const mes = Number(fecha[0])
                        const ano = Number(fecha[1])
                        configuracionCalendario.tipoResolucion = "personalizado"

                        configuracionCalendario.ano = ano
                        configuracionCalendario.mes = mes
                        let parametrosURL = []
                        for (const conjunto of contenedorSeguroParaParametros) {
                            const par = conjunto.split(":")
                            const parametro = par[0]
                            const valor = par[1]
                            const estructuraURLParametro = `${parametro}:${valor}`
                            parametrosURL.push(estructuraURLParametro)
                            if (parametro === "capa") {
                                const capaEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(valor)
                                contenedorCapas.capas.push(capaEnCamel)
                            }
                            if (parametro !== "fecha" && parametro !== "capa") {
                                const parametroEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(parametro)
                                const composicionCapa = valor.split("=")
                                contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                            }
                        }
                        if (parametrosURL.length === 0) {
                            configuracionControladorRegistros.url = ""
                        } else {
                            configuracionControladorRegistros.url = parametrosURL.join("/")
                        }
                    } else if (ultimoDirectorio === "calendario") {
                        configuracionCalendario.tipoResolucion = "actual"
                        contenedorCapas.capas = ["global"]
                    }
                    casaVitini.administracion.calendario.constructorCalendarioNuevo({
                        almacenamientoCalendarioID: "calendarioGlobal",
                        instanciaUID_main: instanciaUID_main
                    })
                    const mesRenderizado = await this.irAFecha({
                        ...configuracionCalendario,
                        instanciaUID_main: instanciaUID_main,
                        contenedorCapas: contenedorCapas,

                    })
                    const calendarioResuelto = mesRenderizado?.calendarioResuelto

                    casaVitini.administracion.calendario.controladorRegistros({
                        tipoRegistro: "actualizar",
                        ano: calendarioResuelto?.ano,
                        mes: calendarioResuelto?.mes,
                        contenedorCapas: contenedorCapas
                    })
                } catch (error) {

                }
            },
            constructorCalendarioNuevo: (metadatos) => {
                const almacenamientoVolatilUID = metadatos.almacenamientoCalendarioID
                const instanciaUID_main = metadatos.instanciaUID_main
                if (!almacenamientoVolatilUID) {
                    let error = "El constructor del calendario, necesita un nombre para el almacenamiento volátil"
                    casaVitini.ui.componentes.advertenciaInmersiva(error)
                }
                const instanciaUID = casaVitini.utilidades.codigoFechaInstancia()
                const calendario = document.createElement("div")
                calendario.setAttribute("class", "administracion_calendario_calendarioUI")
                calendario.setAttribute("campo", "calendario")
                calendario.setAttribute("contenedor", "calendario")
                calendario.setAttribute("componente", "marcoCalendarioGlobal")
                calendario.setAttribute("almacenamientoCalendarioID", almacenamientoVolatilUID)


                calendario.setAttribute("elemento", "flotante")


                const cartelInfoCalendarioEstado = document.createElement("div")
                cartelInfoCalendarioEstado.setAttribute("class", "cartelInfoCalendarioEstado")
                cartelInfoCalendarioEstado.setAttribute("componente", "infoCalendario")
                cartelInfoCalendarioEstado.setAttribute("campo", "calendario")

                const marcoBotonesGlobales = document.createElement("nav")
                marcoBotonesGlobales.setAttribute("class", "marcoBotonesGlobales")
                const botonSelectorMultiCapa = document.createElement("div")
                botonSelectorMultiCapa.classList.add("botonSelectorMulticapa")
                botonSelectorMultiCapa.textContent = "Capas del calendario"
                botonSelectorMultiCapa.addEventListener("click", async () => {
                    casaVitini.administracion.calendario.componentesUI.capas()
                })
                marcoBotonesGlobales.appendChild(botonSelectorMultiCapa)
                calendario.appendChild(marcoBotonesGlobales)
                const navegacionMes = document.createElement("nav")
                navegacionMes.setAttribute("class", "administracion_calendario_navegacionMes")
                calendario.appendChild(navegacionMes)

                const botonNavegacionMesAtras = document.createElement("div")
                botonNavegacionMesAtras.setAttribute("class", "administracion_calendario_botonNavegacion")
                botonNavegacionMesAtras.setAttribute("id", "botonAtras")
                botonNavegacionMesAtras.setAttribute("sentido", "atras")
                botonNavegacionMesAtras.textContent = "Atras"
                botonNavegacionMesAtras.addEventListener("click", () => {
                    casaVitini.administracion.calendario.navegacionCalendarioNuevo({
                        sentido: "atras",
                        instanciaUID_main
                    })
                })
                navegacionMes.appendChild(botonNavegacionMesAtras)
                const contenedorCentralCalendario = document.createElement("div")
                contenedorCentralCalendario.classList.add("administracion_calendario_contenedorCentralCalendario")
                const contenedorHerramientasCalendario = document.createElement("div")
                contenedorHerramientasCalendario.classList.add("administracion_calendario_contenedorHerramientasCalendario")
                const botonHoy = document.createElement("div")
                botonHoy.classList.add("administracion_calendario_selectorCapa")
                botonHoy.textContent = "Hoy"
                botonHoy.addEventListener("click", (e) => {
                    casaVitini.administracion.calendario.verHoy(e)
                })
                contenedorHerramientasCalendario.appendChild(botonHoy)
                contenedorCentralCalendario.appendChild(contenedorHerramientasCalendario)
                const navegacionMesReferencia = document.createElement("div")
                navegacionMesReferencia.setAttribute("id", "navegacionMesReferencia")
                navegacionMesReferencia.setAttribute("class", "navegacionMesReferencia")
                navegacionMesReferencia.setAttribute("componente", "mesReferencia")
                contenedorCentralCalendario.appendChild(navegacionMesReferencia)
                navegacionMes.appendChild(contenedorCentralCalendario)
                const botonNavegacionMesAdelante = document.createElement("div")
                botonNavegacionMesAdelante.setAttribute("class", "administracion_calendario_botonNavegacion")
                botonNavegacionMesAdelante.setAttribute("id", "botonAdelante")
                botonNavegacionMesAdelante.textContent = "Adelante"
                botonNavegacionMesAdelante.setAttribute("sentido", "adelante")
                botonNavegacionMesAdelante.addEventListener("click", () => {
                    casaVitini.administracion.calendario.navegacionCalendarioNuevo({
                        sentido: "adelante",
                        instanciaUID_main
                    })
                })
                navegacionMes.appendChild(botonNavegacionMesAdelante)
                const marcoMes = document.createElement("ol")
                marcoMes.setAttribute("id", "marcoMes")
                marcoMes.setAttribute("class", "administracion_calendario_marcoMes")
                marcoMes.setAttribute("componente", "marcoMes")
                marcoMes.setAttribute("instanciaUID", "uidInicialMes")
                const pilaDias = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"]
                for (const nombreDia of pilaDias) {
                    let diaSemana = document.createElement("li")
                    diaSemana.setAttribute("class", "nombreDia")
                    diaSemana.setAttribute("tipoNombreDia", "extendido")
                    diaSemana.textContent = nombreDia
                    marcoMes.appendChild(diaSemana)
                }
                const pilaDiasAbreviados = ["L", "M", "X", "J", "V", "S", "D"]
                for (const nombreDia of pilaDiasAbreviados) {
                    let diaSemana = document.createElement("li")
                    diaSemana.setAttribute("class", "nombreDia")
                    diaSemana.setAttribute("tipoNombreDia", "abreviado")
                    diaSemana.textContent = nombreDia
                    marcoMes.appendChild(diaSemana)
                }
                calendario.appendChild(marcoMes)
                const seccion = document.querySelector("main:not([estado=obsoleto])")
                const bloqueCalendario = document.createElement("div")
                bloqueCalendario.setAttribute("class", "adminsitracion_calendario_bloqueCalendario")
                bloqueCalendario.setAttribute("instanciaUID", instanciaUID)
                bloqueCalendario.setAttribute("componente", "calendarioGlobal")

                const contenedoCalendarioIntermedio = document.createElement("div")
                contenedoCalendarioIntermedio.setAttribute("class", "administracion_calendario_contenedorCalentadioIntermedio")


                const mensajeSpinner = "Construyendo calendario..."
                const spinner = casaVitini.ui.componentes.spinnerSimple(mensajeSpinner)
                const contenedorCarga = document.createElement("div")
                contenedorCarga.classList.add("administracion_calendario_componente_calendario_contenedoCarga")
                contenedorCarga.setAttribute("contenedor", "construyendoCalendario")

                contenedorCarga.appendChild(spinner)
                contenedoCalendarioIntermedio.appendChild(calendario)
                contenedoCalendarioIntermedio.appendChild(contenedorCarga)
                bloqueCalendario.appendChild(contenedoCalendarioIntermedio)
                contenedorCarga?.remove()
                contenedoCalendarioIntermedio.style.flex = "1"
                document.querySelector(`main[instanciaUID="${instanciaUID_main}"]`)?.appendChild(bloqueCalendario)
            },
            constructorMesNuevo: (calendario) => {
                const instanciaUIDMes = calendario.instanciaUIDMes
                const selectorMes_enEspera = document.querySelector(`[instanciaUID="${instanciaUIDMes}"]`)
                if (!selectorMes_enEspera) {
                    return
                }
                const selectorCalendarioRenderizado = selectorMes_enEspera.closest("[contenedor=calendario]")
                selectorCalendarioRenderizado.querySelector("#botonAtras").style.opacity = 1
                selectorCalendarioRenderizado.querySelector("#botonAtras").style.pointerEvents = "all"
                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.opacity = 1
                selectorCalendarioRenderizado.querySelector("#botonAdelante").style.pointerEvents = "all"
                const contenedorMes = selectorCalendarioRenderizado.querySelector(`[componente=marcoMes][instanciaUID="${instanciaUIDMes}"]`)
                if (contenedorMes) {
                    selectorCalendarioRenderizado.querySelector("[contenedor=construyendoCalendario]")?.remove()
                }
                contenedorMes?.removeAttribute("style")
                selectorCalendarioRenderizado.removeAttribute("style")

                const nombreMes = ["Enero", "Febrero", "Marzo", "Abrir", "Mayo", "Junio", "Julio", "Agost", "Septiembre", "Octubre", "Noviembre", "Diciembre"]
                const nombreMesFinal = nombreMes[calendario.mes - 1]
                const indicadorMesAno = nombreMesFinal + " " + calendario.ano



                const navegacionMesReferencia = selectorCalendarioRenderizado.querySelector("[componente=mesReferencia]")
                if (!navegacionMesReferencia) {
                    return
                }

                navegacionMesReferencia.textContent = indicadorMesAno
                navegacionMesReferencia.setAttribute("ano", calendario.ano)
                navegacionMesReferencia.setAttribute("mes", calendario.mes)
                const posicionDia1 = calendario.posicionDia1
                const numeroDiasPorMes = calendario.numeroDiasPorMes;
                const diaActual = calendario.dia







                const perfilMes = selectorCalendarioRenderizado?.getAttribute("perfilMes")















                let mesActual = calendario.mes
                let anoActual = calendario.ano
                mesActual = String(mesActual).padStart(2, "0");
                mesActual = Number(mesActual)
                anoActual = Number(anoActual)
                const marcoMes = selectorCalendarioRenderizado.querySelector(`[componente=marcoMes][instanciaUID="${instanciaUIDMes}"]`)
                for (let index = 1; index < posicionDia1; index++) {
                    const bloqueDia = document.createElement("li")
                    bloqueDia.setAttribute("componente", "diaVacio")
                    const numeroDiaUI = document.createElement("div")
                    numeroDiaUI.classList.add("administracion_calendario_numeroDiaUI")

                    bloqueDia.appendChild(numeroDiaUI)
                    marcoMes?.appendChild(bloqueDia)
                }
                selectorCalendarioRenderizado?.setAttribute("perfilMes", perfilMes)
                for (let numeroDia = 0; numeroDia < numeroDiasPorMes; numeroDia++) {
                    let diaFinal = numeroDia + 1;
                    diaFinal = Number(diaFinal)
                    const bloqueDia = document.createElement("li")
                    bloqueDia.setAttribute("class", "administracion_calendario_componenteCalendario_dia")
                    const contenedorDia = document.createElement("div")
                    contenedorDia.classList.add("administracion_calendario_contenedorInformacionDia")
                    contenedorDia.setAttribute("componente", "contenedorDia")
                    const numeroDiaUI = document.createElement("div")
                    numeroDiaUI.classList.add("administracion_calendario_numeroDiaUI")
                    numeroDiaUI.textContent = diaFinal
                    contenedorDia.appendChild(numeroDiaUI)
                    const contenedorCapa = document.createElement("div")
                    contenedorCapa.classList.add("administracion_calendario_contenedorCapa")
                    contenedorCapa.setAttribute("contenedor", "capa")


                    if (diaFinal === 1) {

                    }
                    bloqueDia.setAttribute("dia", diaFinal)
                    bloqueDia.setAttribute("estado", "disponible")

                    if (calendario.tiempo === "presente") {
                        if (diaFinal === diaActual) {
                            bloqueDia.classList.add("diaDeHoy")
                        }
                    }







                    bloqueDia.appendChild(contenedorDia)
                    marcoMes?.appendChild(bloqueDia)
                }

            },
            navegacionCalendarioNuevo: async function (data) {
                const boton = data.sentido
                const instanciaUID_main = data.instanciaUID_main

                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const instanciaUIDMes = casaVitini.utilidades.codigoFechaInstancia()
                const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                document.querySelector(`[instanciaUID="${instanciaUID_main}"] [componente=marcoMes]`)
                    .setAttribute("instanciaUID", instanciaUIDMes)
                let mesActual = Number(document.querySelector("[componente=mesReferencia]").getAttribute("mes"))
                let anoActual = Number(document.querySelector("[componente=mesReferencia]").getAttribute("ano"))
                if (boton === "adelante") {
                    if (mesActual + 1 < 13) {
                        mesActual = mesActual + 1
                    } else {
                        mesActual = 1
                        anoActual = anoActual + 1
                    }
                }
                if (boton === "atras") {
                    if (mesActual - 1 > 0) {
                        mesActual = mesActual - 1
                    } else {
                        mesActual = 12
                        anoActual = anoActual - 1
                    }
                }

                let parametrosURL = []
                const contenedorCapas = {
                    capas: [],
                    capasCompuestas: {}
                }
                for (const conjunto of contenedorSeguroParaParametros) {
                    const par = conjunto.split(":")
                    const parametro = par[0]
                    const valor = par[1]
                    const estructuraURLParametro = `${parametro}:${valor}`
                    if (parametro.toLowerCase() !== "fecha") {
                        parametrosURL.push(estructuraURLParametro)
                    }
                    if (parametro === "capa") {
                        const capaEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(valor)
                        contenedorCapas.capas.push(capaEnCamel)
                    }
                    if (parametro !== "fecha" && parametro !== "capa") {
                        const parametroEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(parametro)
                        const composicionCapa = valor.split("=")
                        contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                    }
                }
                casaVitini.administracion.calendario.controladorRegistros({
                    tipoRegistro: "crear",
                    ano: anoActual,
                    mes: mesActual,
                    contenedorCapas: contenedorCapas
                })

                await this.irAFecha({
                    tipoRegistro: "crear",
                    tipoResolucion: "personalizado",
                    ano: anoActual,
                    mes: mesActual,
                    instanciaUID_main: instanciaUID_main,
                    contenedorCapas: contenedorCapas
                })

            },
            verHoy: async function (calendarioActual) {
                const main = calendarioActual.target.closest("main")
                const instanciaUID_main = main.getAttribute("instanciaUID")
                const calendarioRenderizado = main.querySelector(`[componente=calendarioGlobal]`)
                const mesRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("mes"))
                const anoRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("ano"))
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                const instanciaUIDMes = casaVitini.utilidades.codigoFechaInstancia()
                const marcoMes = calendarioRenderizado.querySelector(`[componente=marcoMes]`)
                marcoMes.setAttribute("instanciaUID", instanciaUIDMes)
                marcoMes.style.flex = "0"
                const selectorDiasRenderizados = calendarioRenderizado.querySelectorAll("[dia], [componente=eventoUI], [componente=diaVacio]")
                selectorDiasRenderizados.forEach((e) => {
                    e?.remove()
                })
                const contenedorCalendario = calendarioRenderizado.querySelector(`[contenedor=calendario]`)

                const contenedorCarga = document.createElement("div")
                contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
                contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                contenedorCarga.setAttribute("elemento", "flotante")
                contenedorCarga.appendChild(casaVitini.ui.componentes.spinnerSimple())
                const construyendoCalendarioRenderizado = calendarioRenderizado.querySelector("[contenedor=construyendoCalendario]")
                if (!construyendoCalendarioRenderizado) {
                    contenedorCalendario.appendChild(contenedorCarga)
                }
                const contenedorCapas = {
                    capas: [],
                    capasCompuestas: {}
                }
                const parametrosURL = []
                for (const conjunto of contenedorSeguroParaParametros) {
                    const par = conjunto.split(":")
                    const parametro = par[0]
                    const valor = par[1]
                    const estructuraURLParametro = `${parametro}:${valor}`
                    parametrosURL.push(estructuraURLParametro)
                    if (parametro === "capa") {
                        const capaEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(valor)
                        contenedorCapas.capas.push(capaEnCamel)
                    }
                    if (parametro !== "fecha" && parametro !== "capa") {
                        const parametroEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(parametro)
                        const composicionCapa = valor.split("=")
                        contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                    }
                }
                const soloCapasURL = []
                for (const parDeParametro of parametrosURL) {
                    const parametro = parDeParametro.split(":")
                    if (parametro[0] !== "fecha") {
                        soloCapasURL.push(parDeParametro)
                    }
                }
                const mesRenderizado_data = await this.irAFecha({
                    tipoResolucion: "actual",
                    instanciaUID_main: instanciaUID_main,
                    contenedorCapas: contenedorCapas,
                })
                const calendarioResuelto = mesRenderizado_data?.calendarioResuelto
                const anoPresente = calendarioResuelto.ano
                const mesPresente = calendarioResuelto.mes

                const calendario = {
                    ano: calendarioResuelto?.ano,
                    mes: calendarioResuelto?.mes,
                    contenedorCapas: contenedorCapas
                }
                if ((mesRenderizado !== mesPresente && anoRenderizado === anoPresente) || (anoRenderizado !== anoPresente)) {

                    calendario.tipoRegistro = "crear"
                    casaVitini.administracion.calendario.controladorRegistros(calendario)
                } else {

                    calendario.tipoRegistro = "actualizar"
                    casaVitini.administracion.calendario.controladorRegistros(calendario)
                }
            },
            configuraMes: async (calendario) => {
                const ano = calendario.ano
                const mes = calendario.mes
                const tipo = calendario.tipo

                const instanciaUID_main = calendario.instanciaUID_main
                const instanciaUIDMes = casaVitini.utilidades.codigoFechaInstancia()

                const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID_main}"] [contenedor=calendario]`)

                const selectorDiasRenderizados = calendarioRenderizado.querySelectorAll("[dia], [componente=eventoUI], [componente=diaVacio]")
                selectorDiasRenderizados.forEach((e) => {
                    e.remove()
                })
                const contenedorMes = calendarioRenderizado.querySelector(`[componente=marcoMes]`)
                contenedorMes.style.flex = "0"
                contenedorMes.setAttribute("instanciaUID", instanciaUIDMes)

                const contenedorCarga = document.createElement("div")
                contenedorCarga.classList.add("componente_calendario_contenedoCarga_Mes")
                contenedorCarga.setAttribute("contenedor", "construyendoCalendario")
                contenedorCarga.setAttribute("elemento", "flotante")
                contenedorCarga.appendChild(casaVitini.ui.componentes.spinnerSimple())

                const construyendoCalendarioRenderizado = calendarioRenderizado.querySelector("[contenedor=construyendoCalendario]")

                if (!construyendoCalendarioRenderizado) {
                    calendarioRenderizado.appendChild(contenedorCarga)
                }


                const configuracionCalendario = {
                    tipo: tipo
                }
                if (tipo === "personalizado") {
                    configuracionCalendario.mes = mes
                    configuracionCalendario.ano = ano
                }

                const calendarioResuelto = await casaVitini.ui.componentes.calendario.resolverCalendarioNuevo(configuracionCalendario)
                const contenedorMes_enEspera = calendarioRenderizado.querySelector(`[componente=marcoMes][instanciaUID="${instanciaUIDMes}"]`)
                if (!contenedorMes_enEspera) { return }

                calendarioResuelto.instanciaUIDMes = instanciaUIDMes
                casaVitini.administracion.calendario.constructorMesNuevo(calendarioResuelto)
                return {
                    instanciaUIDMes,
                    calendarioResuelto
                }

            },
            controlVertical: () => {

                const selectorSeccion = document.querySelector("main")
                const selectorCalendarioGlobal = document.querySelector("[componente=calendarioGlobal]")
                if (!selectorCalendarioGlobal) {
                    window.removeEventListener("resize", casaVitini.administracion.calendario.controlVertical);

                }
                const altoRenderizadoSection = selectorSeccion.scrollHeight;
                const alturaVentana = window.innerHeight;
                if (alturaVentana > altoRenderizadoSection) {
                    selectorCalendarioGlobal.style.position = "absolute"
                } else if (alturaVentana < altoRenderizadoSection) {
                    selectorCalendarioGlobal.style.position = "relative"
                } else if (alturaVentana === altoRenderizadoSection) {
                    selectorCalendarioGlobal.style.position = "absolute"
                }
            },
            controladorRegistros: (metadatos) => {
                const tipoRegistro = metadatos.tipoRegistro
                const contenedorCapas = metadatos.contenedorCapas
                const ano = metadatos.ano
                const mes = metadatos.mes
                const capasSimples = contenedorCapas.capas || []
                const capasCompuestas = contenedorCapas.capasCompuestas || {}

                const constructoCapasSimples = capasSimples.map((capa) => {
                    const capaSnake = casaVitini.utilidades.cadenas.camelToSnake(capa)
                    return `capa:${capaSnake}`
                })
                const constructoFinalCS = constructoCapasSimples.length > 0 ? `/${constructoCapasSimples.join("/")}` : ""

                const constructoCapasCompuestas = Object.entries(capasCompuestas).map(capaCompuesta => {
                    const [nombreCapa, arrayValoresCapaCompuesta] = capaCompuesta
                    const nombreCapaSnake = casaVitini.utilidades.cadenas.camelToSnake(nombreCapa)
                    const valoresSnake = arrayValoresCapaCompuesta.map((valorCapa) => {
                        const valorCapaSnake = casaVitini.utilidades.cadenas.camelToSnake(valorCapa)
                        return valorCapaSnake
                    })
                    return `${nombreCapaSnake}:${valoresSnake.join("=")}`
                })
                const constructoFinalCC = constructoCapasCompuestas.length > 0 ? `/${constructoCapasCompuestas.join("/")}` : ""

                const constructoURL = "/administracion/calendario" + `/fecha:${mes}-${ano}` + constructoFinalCS + constructoFinalCC
                const configuracion = {
                    tipoResolucion: "personalizado",
                    ano: ano,
                    mes: mes,
                    origen: "historial",
                    contenedorCapas: contenedorCapas
                }
                const estado = {
                    zona: constructoURL,
                    EstadoInternoZona: "estado",
                    tipoCambio: "parcial",
                    componenteExistente: "marcoCalendarioGlobal",
                    funcionPersonalizada: "administracion.calendario.irAFecha",
                    args: configuracion
                }
                const titulo = "Administracion"
                if (tipoRegistro === "crear") {
                    window.history.pushState(estado, titulo, constructoURL);
                } else if (tipoRegistro === "actualizar") {
                    window.history.replaceState(estado, titulo, constructoURL);
                }
            },
            irAFecha: async (data) => {

                const instanciaUID_main_selector = document.querySelector("main").getAttribute("instanciaUID")
                const mes = data?.mes
                const ano = data?.ano
                const origen = data?.origen
                const instanciaUID_main = origen === "historial" ? instanciaUID_main_selector : data.instanciaUID_main
                const contenedorCapas = data.contenedorCapas
                const tipoResolucion = data.tipoResolucion

                const mesRenderizado = await casaVitini.administracion.calendario.configuraMes({
                    ano: ano,
                    mes: mes,
                    tipo: tipoResolucion,
                    instanciaUID_main: instanciaUID_main
                })
                const calendarioResuelto = mesRenderizado?.calendarioResuelto

                casaVitini.administracion.calendario.coloreoDias({
                    ano: calendarioResuelto?.ano,
                    mes: calendarioResuelto?.mes,
                    instanciaUIDMes: calendarioResuelto?.instanciaUIDMes,
                })

                casaVitini.administracion.calendario.capas({
                    instanciaUID_main: instanciaUID_main,
                    origen: "historial",
                    contenedorCapas: contenedorCapas,
                    instanciaUIDMes: calendarioResuelto?.instanciaUIDMes
                })

                return mesRenderizado
            },
            capas: async (metadatos) => {


                const contenedorCapas = metadatos.contenedorCapas
                const instanciaUID_main = metadatos.instanciaUID_main
                const instanciaUIDMes = metadatos.instanciaUIDMes
                const origen = metadatos.origen
                const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID_main}"]`)
                const mesRenderizado_enEspera = document.querySelector(`[instanciaUID="${instanciaUIDMes}"]`)
                if (!mesRenderizado_enEspera) { return }
                const mesRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("mes"))
                const anoRenderizado = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("ano"))
                const granuladoURL = casaVitini.utilidades.granuladorURL()
                const parametros = granuladoURL.parametros
                const selectorCapaRenderizada = calendarioRenderizado.querySelectorAll("[componente=eventoUI]")
                selectorCapaRenderizada.forEach((capaRenderizada) => {
                    capaRenderizada.remove()
                })
                let tipoRegistroFinal
                if (origen === "menuDesplegable" || origen === "navegacionEntreMeses") {
                    tipoRegistroFinal = "crear"
                }

                const ventanaDetallesDelEventoTruncado = (data) => {

                    const urlUI = data.urlUI
                    const eventoUID = data.eventoUID
                    const nombreEventoFinal = data.nombreEventoFinal
                    const detallesDelEventoUI = data.detallesDelEventoUI
                    const main = document.querySelector("main")
                    const ui = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                    main.appendChild(ui)
                    const contenedor = ui.querySelector("[componente=contenedor]")

                    const titulo = document.createElement("div")
                    titulo.classList.add(
                        "titulo"
                    )
                    titulo.textContent = `Detalles del evento`
                    contenedor.appendChild(titulo)

                    const info = document.createElement("p")
                    info.classList.add(
                        "textoCentrado"
                    )
                    info.textContent = "Se ha desplegado esta pantalla de información porque el texto del evento no cabía en la celda del evento y se mostraba truncado con elipsis."
                    contenedor.appendChild(info)

                    const infoDetallesDelEvento = document.createElement("p")
                    infoDetallesDelEvento.classList.add(
                        "textoCentrado"
                    )
                    infoDetallesDelEvento.textContent = detallesDelEventoUI
                    if (detallesDelEventoUI) {
                        contenedor.appendChild(infoDetallesDelEvento)
                    }

                    const nobreDelEvento = document.createElement("p")
                    nobreDelEvento.classList.add(
                        "textoCentrado",
                        "negrita"
                    )
                    nobreDelEvento.textContent = nombreEventoFinal
                    contenedor.appendChild(nobreDelEvento)

                    const botonIrAlEvento = document.createElement("div")
                    botonIrAlEvento.classList.add("boton")
                    botonIrAlEvento.setAttribute("boton", "cancelar")
                    botonIrAlEvento.textContent = "Ir al evento"
                    botonIrAlEvento.addEventListener("click", () => {
                        const navegacion = {
                            vista: urlUI,
                            tipoOrigen: "menuNavegador"
                        }
                        casaVitini.shell.navegacion.controladorVista(navegacion)
                    })
                    if (urlUI) {
                        contenedor.appendChild(botonIrAlEvento)
                    }

                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("boton")
                    botonCancelar.setAttribute("boton", "cancelar")
                    botonCancelar.textContent = "Cerrar y volver a la reserva"
                    botonCancelar.addEventListener("click", () => {
                        return casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    })
                    contenedor.appendChild(botonCancelar)
                }
                const obtenerCoordenadasCeldaGrid = (celdaGrid) => {
                    const selectorDiaRenderizado = document.querySelector(`[dia="${celdaGrid}"]`);
                    const gridContainer = selectorDiaRenderizado.parentElement;
                    const items = Array.from(gridContainer.children);
                    const index = items.indexOf(selectorDiaRenderizado);
                    const columns = parseInt(getComputedStyle(gridContainer).gridTemplateColumns.split(" ").length);
                    const row = Math.floor(index / columns) + 1;
                    const column = (index % columns) + 1;

                    const estructuraFinal = {
                        fila: row,
                        columna: column
                    }
                    return estructuraFinal
                }
                const obtenerNumeroDeCeldasEnFila = (filaDeseada) => {
                    const gridContainer = document.querySelector("[componente=marcoMes]");

                    const celdas = Array.from(gridContainer.children);

                    const columnas = parseInt(getComputedStyle(gridContainer).gridTemplateColumns.split(" ").length);

                    const indiceInicial = (filaDeseada - 1) * columnas;
                    const indiceFinal = filaDeseada * columnas;

                    const celdasEnFila = celdas.slice(indiceInicial, indiceFinal);

                    return celdasEnFila.length
                }
                const obtenerNumeroDeCeldasConAtributoEnFila = (filaDeseada, atributo) => {
                    const gridContainer = document.querySelector("[componente=marcoMes]");

                    const celdas = Array.from(gridContainer.children);

                    const columnas = parseInt(getComputedStyle(gridContainer).gridTemplateColumns.split(" ").length);

                    const indiceInicial = (filaDeseada - 1) * columnas;
                    const indiceFinal = filaDeseada * columnas;

                    const celdasEnFilaConAtributo = celdas.slice(indiceInicial, indiceFinal).filter(celda => celda.getAttribute(atributo) !== null);

                    return celdasEnFilaConAtributo.length;
                }
                const filaDeseada = 2; //Puedes cambiar esto según la fila que te interese
                const numeroDeFilasTotales = (gridUID) => {
                    const grid = document.querySelector("[componente=marcoMes]");
                    const gridStyles = window.getComputedStyle(grid);
                    const gridRows = gridStyles.gridTemplateRows.split(" ").length;
                    return gridRows
                }
                const numeroDeFilasConDia = () => {
                    const grid = document.querySelector("[componente=marcoMes]");


                    const celdasConDia = grid.querySelectorAll("[dia]");


                    const filasUnicas = new Set();

                    celdasConDia.forEach(celda => {

                        const numeroDeFila = window.getComputedStyle(celda).gridRowStart;
                        filasUnicas.add(numeroDeFila);
                    });


                    return filasUnicas.size;
                };
                const diferenciaDeDias = (fechaIncioMes_ISO, fechaSalidaEvento_ISO) => {
                    const fecha1 = new Date(fechaIncioMes_ISO); // Primera fecha en formato ISO
                    const fecha2 = new Date(fechaSalidaEvento_ISO); // Segunda fecha en formato ISO
                    fecha1.setHours(0, 0, 0, 0);
                    fecha2.setHours(0, 0, 0, 0);

                    const diferenciaEnMilisegundos = fecha2.getTime() - fecha1.getTime();

                    const diferenciaEnDiasSalida = diferenciaEnMilisegundos / (1000 * 60 * 60 * 24) + 1;
                    return diferenciaEnDiasSalida;
                }
                const constructorEventoUI = (metadatos) => {
                    const eventoUID = metadatos.eventoUID
                    const altura = metadatos.altura
                    const url = metadatos.url
                    const css = metadatos.css
                    const inicioColumna = metadatos.inicioColumna
                    const finalColumna = metadatos.finalColumna
                    const inicioFila = metadatos.inicioFila
                    const tipoEvento = metadatos.tipoEvento



                    const detallesDelEvento = metadatos.detallesDelEvento

                    let nombreEventoFinal = "Evento sin infomración"
                    let detallesDelEventoUI
                    let urlUI
                    if (tipoEvento === "reserva") {
                        const reservaUID = detallesDelEvento.reservaUID
                        nombreEventoFinal = "Reserva " + reservaUID
                        urlUI = "/administracion/reservas/reserva:" + reservaUID
                    } else if (tipoEvento === "todosLosApartamentos") {
                        const reservaUID = detallesDelEvento.reservaUID
                        const apartamentoUI = detallesDelEvento.apartamentoUI
                        nombreEventoFinal = apartamentoUI
                        urlUI = `/administracion/reservas/reserva:${reservaUID}`
                    } else if (tipoEvento === "porApartamento") {
                        const reservaUID = detallesDelEvento.reservaUID
                        const apartamentoUI = detallesDelEvento.apartamentoUI
                        nombreEventoFinal = apartamentoUI
                        urlUI = `/administracion/reservas/reserva:${reservaUID}`
                    } else if (tipoEvento === "todosLosBloqueos") {
                        const bloqueoUID = detallesDelEvento.bloqueoUID
                        const apartamentoIDV = detallesDelEvento.apartamentoIDV
                        const apartamentoUI = detallesDelEvento.apartamentoUI
                        nombreEventoFinal = `Bloqueo ${apartamentoUI}`
                        urlUI = `/administracion/gestion_de_bloqueos_temporales/${apartamentoIDV}/${bloqueoUID}`
                    } else if (tipoEvento === "calendarioAirbnb") {
                        const descripcion = detallesDelEvento.descripcion || ""
                        const apartamentoUI = detallesDelEvento.apartamentoUI
                        const regex = /Reservation URL: (https:\/\/www\.airbnb\.com\/hosting\/reservations\/details\/[A-Za-z0-9]+)/;
                        const match = descripcion.match(regex);
                        if (match) {
                            const urlEvento = match?.[1] ?? null;
                            nombreEventoFinal = `Airbnb (${apartamentoUI})`
                            urlUI = urlEvento
                        } else {
                            nombreEventoFinal = `Airbnb (${apartamentoUI}), sin información`
                            detallesDelEventoUI = "Este evento proviene de Airbnb y no proporciona más información. Esto suele ser debido cuando el evento de calendario de Airbnb proviene de otra fuente como Booking"

                        }
                    }

                    const nombreClaseDinamica = `evento_margin-top-${altura}`;
                    if (!document.querySelector(`.${nombreClaseDinamica}`)) {

                        const style = document.createElement('style');
                        style.innerHTML = `
                            .${nombreClaseDinamica} {
                                margin-top: ${altura}px;
                        `;
                        document.querySelector("main").appendChild(style);
                    }

                    const eventoUI = document.createElement("a")

                    const contenedorInfoEvento = document.createElement("div")
                    contenedorInfoEvento.classList.add(
                        "infoEvento"
                    )
                    contenedorInfoEvento.setAttribute("dato", "textoEvento")
                    contenedorInfoEvento.textContent = nombreEventoFinal
                    eventoUI.appendChild(contenedorInfoEvento)

                    eventoUI.classList.add(
                        nombreClaseDinamica,
                        css,
                        "animacion_eventoUI"
                    )


                    eventoUI.setAttribute("componente", "eventoUI")
                    eventoUI.setAttribute("eventoUID", eventoUID)
                    if (urlUI) {
                        eventoUI.setAttribute("vista", urlUI)
                        eventoUI.setAttribute("href", urlUI)
                    }
                    eventoUI.style.gridColumn = `${inicioColumna} /${finalColumna} span `
                    eventoUI.style.gridRow = `${inicioFila}`
                    eventoUI.addEventListener("mouseover", () => {
                        const selectorEventoUIRenderizado = document.querySelectorAll(`[eventoUID="${eventoUID}"]`)
                        selectorEventoUIRenderizado.forEach((eventoRenderizado) => {
                            eventoRenderizado.classList.add("administracion_calendario_eventoUI_selecionado")
                        })
                    })
                    eventoUI.addEventListener("mouseout", () => {
                        const selectorEventoUIRenderizado = document.querySelectorAll(`[eventoUID="${eventoUID}"]`)
                        selectorEventoUIRenderizado.forEach((eventoRenderizado) => {
                            eventoRenderizado.classList.remove("administracion_calendario_eventoUI_selecionado")
                        })
                    })
                    eventoUI.addEventListener("click", (e) => {
                        e.preventDefault()
                        const contnedorTexto = e.target.querySelector("[dato=textoEvento]")
                        const tieneElipsis = (elemento) => {
                            return elemento.scrollWidth > elemento.clientWidth;
                        }

                        if (tieneElipsis(contnedorTexto)) {
                            ventanaDetallesDelEventoTruncado({
                                urlUI,
                                eventoUID,
                                nombreEventoFinal,
                                detallesDelEventoUI
                            })
                        } else if (urlUI) {
                            const navegacion = {
                                vista: urlUI,
                                tipoOrigen: "menuNavegador"
                            }
                            casaVitini.shell.navegacion.controladorVista(navegacion)
                        }
                    })
                    return eventoUI
                }
                const siguienteLunes = (primerDiaDelMes) => {
                    if (primerDiaDelMes === 1) {
                        return 8;
                    }
                    else if (primerDiaDelMes > 1) {
                        return 8 - (primerDiaDelMes - 1);
                    }
                    else {
                        return 1 + (1 - primerDiaDelMes);
                    }
                }
                const renderizadorEventos = (contenedorEventos) => {
                    const eventosMes = contenedorEventos.eventosMes
                    const eventosEnDetalle = contenedorEventos.eventosEnDetalle
                    const instanciaUIDMes = contenedorEventos.instanciaUIDMes
                    const selectorMesDestino = calendarioRenderizado.querySelector(`[instanciaUID="${instanciaUIDMes}"]`)
                    if (selectorMesDestino) {

                        const selectorDias = selectorMesDestino.querySelectorAll("[dia]")
                        selectorDias.forEach((dia) => {
                            dia.removeAttribute("eventosContenedor")
                        })
                        for (const detallesDia of Object.entries(eventosMes)) {
                            const fechaDestino = detallesDia[0].split("-")
                            const diaDestino = Number(fechaDestino[2])
                            const selectorContenedorDia = selectorMesDestino.querySelector(`[dia="${diaDestino}"]`)

                            const selectorArrayRenderizado = selectorContenedorDia?.getAttribute("eventosContenedor")
                            const objetoEventos = JSON.parse(selectorArrayRenderizado) || {}
                            let posicionEvento = 0
                            const posicionColumnaDia = obtenerCoordenadasCeldaGrid(diaDestino).columna
                            const posicionesEventosReservadas = {}
                            if (!objetoEventos.eventos) {
                                objetoEventos.eventos = {}
                            }
                            if (diaDestino === 1) {
                                let posicionesIninical = posicionEvento
                                for (const eventosDiaActual of detallesDia[1]) {
                                    const reservaUID_diaActual = eventosDiaActual.eventoUID
                                    objetoEventos.eventos[reservaUID_diaActual] = posicionesIninical
                                    posicionesEventosReservadas[posicionesIninical] = "posicionReservada"
                                    posicionesIninical++
                                }
                            } else {
                                const numeroDiaAnterior = diaDestino - 1
                                const selectorContenedorDiaAnterior = selectorMesDestino
                                    .querySelector(`[dia="${numeroDiaAnterior}"]`)
                                    ?.getAttribute("eventosContenedor") || "{}"
                                const eventosDelDiaAnterior = JSON.parse(selectorContenedorDiaAnterior) || {}
                                const contenedorEventosDiaAnterior = eventosDelDiaAnterior.eventos ? eventosDelDiaAnterior.eventos : {}

                                for (const [eventoAnteriorUID, posicionEventoAnterior] of Object.entries(contenedorEventosDiaAnterior)) {
                                    for (const eventosDiaActual of detallesDia[1]) {
                                        const eventoActualUID = eventosDiaActual.eventoUID
                                        if (String(eventoActualUID) === String(eventoAnteriorUID)) {
                                            const posicionDelApartamentoDelDiaAnteior = contenedorEventosDiaAnterior[eventoActualUID]
                                            objetoEventos.eventos[eventoActualUID] = posicionDelApartamentoDelDiaAnteior
                                            posicionesEventosReservadas[posicionDelApartamentoDelDiaAnteior] = "posicionReservada"
                                        }
                                    }
                                }
                                if (posicionColumnaDia === 1) {
                                    let posicionesIninical = posicionEvento
                                    objetoEventos.eventos = {}
                                    Object.keys(posicionesEventosReservadas).forEach((posicion) => {
                                        delete posicionesEventosReservadas[posicion]
                                    })
                                    for (const eventosDiaActual of detallesDia[1]) {
                                        const evendoDiaActualUID = eventosDiaActual.eventoUID
                                        objetoEventos.eventos[evendoDiaActualUID] = posicionesIninical
                                        posicionesEventosReservadas[posicionesIninical] = "posicionReservada"
                                        posicionesIninical++
                                    }
                                }
                            }
                            for (const eventosDelDia of detallesDia[1]) {
                                const eventoUID = eventosDelDia.eventoUID
                                if (posicionColumnaDia === 1) {
                                }
                                if (objetoEventos.eventos[eventoUID] === undefined) {
                                    while (posicionesEventosReservadas[posicionEvento] === "posicionReservada") {
                                        posicionEvento++;
                                    }
                                    objetoEventos.eventos[eventoUID] = Number(posicionEvento)
                                    posicionEvento++;
                                }
                            }
                            selectorMesDestino.querySelector(`[dia="${diaDestino}"]`)
                                .setAttribute("eventosContenedor", JSON.stringify(objetoEventos))
                        }

                        for (const detallesDelEvento of eventosEnDetalle) {
                            const reservaUID = detallesDelEvento.reservaUID
                            const eventoUID = detallesDelEvento.eventoUID
                            const reservaUI = detallesDelEvento.reserva
                            const nombreEventoUI = detallesDelEvento.nombreEventoUI
                            const fechaEntrada = detallesDelEvento.fechaEntrada
                            const fechaSalida = detallesDelEvento.fechaSalida
                            const duracion_en_dias = detallesDelEvento.duracion_en_dias

                            const tipoEvento = detallesDelEvento.tipoEvento
                            let diaEntrada
                            let mesEntrada
                            let anoEntrada
                            let diaSalida
                            let mesSalida
                            let anoSalida
                            if (fechaEntrada) {
                                const fechaEntradaArray = fechaEntrada.split("-")
                                diaEntrada = Number(fechaEntradaArray[2])
                                mesEntrada = Number(fechaEntradaArray[1])
                                anoEntrada = Number(fechaEntradaArray[0])
                            }
                            if (fechaSalida) {
                                const fechaSalidaArray = fechaSalida.split("-")
                                diaSalida = Number(fechaSalidaArray[2])
                                mesSalida = Number(fechaSalidaArray[1])
                                anoSalida = Number(fechaSalidaArray[0])
                            }
                            const configuracionEventoUI = {
                                eventoUID: eventoUID,
                                tipoEvento: tipoEvento,
                                detallesDelEvento: detallesDelEvento
                            }



                            if (mesRenderizado === mesEntrada && anoRenderizado === anoEntrada) {
                            } else {
                                diaEntrada = 1
                            }

                            const selectorContenedorDia = selectorMesDestino.querySelector(`[dia="${diaEntrada}"]`)
                            const eventosContenedor = selectorContenedorDia.getAttribute("eventosContenedor")
                            const posicionEventoUI = (JSON.parse(eventosContenedor)).eventos[eventoUID]
                            const conteoEventos = Object.keys(JSON.parse(eventosContenedor).eventos).length - 1
                            const coordenadasDiaInicio = obtenerCoordenadasCeldaGrid(diaEntrada);
                            const inicioFila = coordenadasDiaInicio.fila - 1
                            const celdasPorFilaConAtributo = obtenerNumeroDeCeldasConAtributoEnFila(inicioFila + 1, "dia")
                            const inicioColumna = coordenadasDiaInicio.columna
                            const celdasNoExistentes = 7 - celdasPorFilaConAtributo
                            const inicioColumnaSinPrimeraPosicion = inicioColumna - 1
                            const inicioFilaDia = inicioFila - 1
                            let restoDeCeldas
                            let diasRestantes

                            if (inicioFilaDia === 1 || inicioFilaDia < numeroDeFilasConDia()) {
                                restoDeCeldas = celdasPorFilaConAtributo - (inicioColumnaSinPrimeraPosicion - celdasNoExistentes)
                            } else if (inicioFilaDia === numeroDeFilasConDia()) {
                                restoDeCeldas = celdasPorFilaConAtributo - inicioColumnaSinPrimeraPosicion
                            }
                            let finalColumna

                            if (mesRenderizado === mesEntrada && anoRenderizado === anoEntrada) {
                                finalColumna = (duracion_en_dias) >= restoDeCeldas ? (restoDeCeldas) : (duracion_en_dias);

                            } else {
                                const fechaIncioMes_ISO = `${anoRenderizado}-${String(mesRenderizado).padStart(2, "0")}-01`
                                diasRestantes = diferenciaDeDias(fechaIncioMes_ISO, fechaSalida);
                                finalColumna = diasRestantes >= restoDeCeldas ? (restoDeCeldas) : (diasRestantes)

                            }

                            let filaSiguiente = inicioFila
                            let alturaFinal
                            if (posicionEventoUI === 0) {
                                alturaFinal = 40
                            } else if (posicionEventoUI === 1) {
                                alturaFinal = 90
                            } else if (posicionEventoUI > 1) {
                                alturaFinal = (posicionEventoUI * 40) + ((posicionEventoUI + 1) * 10) + 30
                            }
                            const numeroFilasTotales = numeroDeFilasConDia()

                            let restoDeDiasDelEvento
                            if (mesRenderizado === mesEntrada && anoRenderizado === anoEntrada) {
                                restoDeDiasDelEvento = restoDeCeldas > duracion_en_dias ? 0 : (duracion_en_dias) - restoDeCeldas

                                if (restoDeDiasDelEvento === 0) {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_inicioFinal"
                                } else {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_inicioSolo"
                                }
                            } else {
                                restoDeDiasDelEvento = restoDeCeldas > diasRestantes ? 0 : Math.abs((diasRestantes) - restoDeCeldas)
                                if (restoDeDiasDelEvento <= 0) {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_finalSolo"
                                } else {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_transicion"
                                }
                            }
                            configuracionEventoUI.altura = alturaFinal
                            configuracionEventoUI.inicioColumna = inicioColumna
                            configuracionEventoUI.finalColumna = finalColumna
                            configuracionEventoUI.inicioFila = inicioFila
                            const eventoUI = constructorEventoUI(configuracionEventoUI)
                            selectorMesDestino.appendChild(eventoUI)
                            const posicionDiaUno = obtenerCoordenadasCeldaGrid(1).columna
                            const filaInicialDelEvento = (obtenerCoordenadasCeldaGrid(diaEntrada).fila - 2)
                            let sumadorDiaFila

                            if (filaInicialDelEvento === 1) {
                                sumadorDiaFila = siguienteLunes(posicionDiaUno)
                            } else {
                                let sumaDias = 7 * (filaInicialDelEvento - 1)
                                sumadorDiaFila = siguienteLunes(posicionDiaUno) + sumaDias
                            }
                            while (restoDeDiasDelEvento > 0 && numeroFilasTotales >= filaSiguiente) {
                                filaSiguiente = filaSiguiente + 1

                                const selectorContenedorDia_loop = selectorMesDestino.querySelector(`[dia="${sumadorDiaFila}"]`)
                                const eventosContenedor_loop = selectorContenedorDia_loop.getAttribute("eventosContenedor")
                                sumadorDiaFila = 7 + sumadorDiaFila
                                const posicionEventoUI_loop = (JSON.parse(eventosContenedor_loop)).eventos[eventoUID]
                                let alturaFinal
                                if (posicionEventoUI_loop === 0) {
                                    alturaFinal = 40
                                } else if (posicionEventoUI_loop === 1) {
                                    alturaFinal = 90
                                } else if (posicionEventoUI_loop > 1) {
                                    alturaFinal = (posicionEventoUI_loop * 40) + ((posicionEventoUI_loop + 1) * 10) + 30
                                }
                                const celdasPorFilaConAtributo = obtenerNumeroDeCeldasConAtributoEnFila(filaSiguiente + 1, "dia")
                                const finalColumna_ = restoDeDiasDelEvento >= celdasPorFilaConAtributo ? celdasPorFilaConAtributo : (restoDeDiasDelEvento);
                                restoDeDiasDelEvento = Math.abs(restoDeDiasDelEvento - finalColumna_)
                                if (restoDeDiasDelEvento <= 0) {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_finalSolo"
                                } else {
                                    configuracionEventoUI.css = "administracion_calendario_eventoUI_transicion"
                                }
                                configuracionEventoUI.altura = alturaFinal
                                configuracionEventoUI.inicioColumna = 1
                                configuracionEventoUI.finalColumna = finalColumna_
                                configuracionEventoUI.inicioFila = filaSiguiente
                                const eventoUI = constructorEventoUI(configuracionEventoUI)
                                selectorMesDestino.appendChild(eventoUI)
                            }

                        }
                    }
                }
                const capasSimples = contenedorCapas.capas
                const capasCompuestas = contenedorCapas.capasCompuestas
                const primerFormatoURL = []
                for (const capaSimple of capasSimples) {
                    const capaSimpleURL = casaVitini.utilidades.cadenas.camelToSnake(capaSimple)
                    const composicioCapa = capasCompuestas[capaSimple]
                    let final
                    if (composicioCapa) {
                        final = `capa:${capaSimpleURL}/${capaSimpleURL}:${composicioCapa.join("=")}`
                    } else {
                        final = `capa:${capaSimpleURL}`
                    }
                    primerFormatoURL.push(final)
                }





                const transaccion = {
                    zona: "administracion/calendario/capas/multiCapa",
                    fecha: `${mesRenderizado}-${anoRenderizado}`,
                    contenedorCapas: contenedorCapas
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const contenedorEventos = {
                        eventosMes: respuestaServidor.eventosMes,
                        eventosEnDetalle: respuestaServidor.eventosEnDetalle,
                        instanciaUIDMes: instanciaUIDMes
                    }

                    renderizadorEventos({
                        eventosMes: respuestaServidor.eventosMes,
                        eventosEnDetalle: respuestaServidor.eventosEnDetalle,
                        instanciaUIDMes: instanciaUIDMes
                    })
                }


            },
            coloreoDias: async (data) => {
                const mes = data.mes
                const ano = data.ano
                const instanciaUIDMes = data.instanciaUIDMes

                const resuelveDiasCompletos = await casaVitini.shell.servidor({
                    zona: "componentes/diasOcupadosTotalmentePorMes",
                    mes: Number(mes),
                    ano: Number(ano)
                })
                const marcoMes = document.querySelector(`[instanciaUID="${instanciaUIDMes}"]`)
                if (!marcoMes) { return }
                if (resuelveDiasCompletos?.error) {
                    casaVitini.shell.controladoresUI.limpiarMain()
                    casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                    return casaVitini.ui.componentes.mensajeSimple({
                        titulo: resuelveDiasCompletos.error
                    })

                }
                const detallesDiasOcupacion = resuelveDiasCompletos.ok.dias

                const diasRenderizados = marcoMes.querySelectorAll("[dia]")
                diasRenderizados.forEach((diaRenderizado) => {
                    const numeroDia = diaRenderizado.getAttribute("dia")

                    if (detallesDiasOcupacion[numeroDia]?.estadoDia === "diaParcial") {
                        diaRenderizado.classList.add("diaParcial")
                    } else if (detallesDiasOcupacion[numeroDia]?.estadoDia === "diaCompleto") {
                        diaRenderizado.classList.add("diaCompleto")
                    } else {
                        diaRenderizado.classList.add("diaDisponible")
                    }
                })
            },
            obtenerConfiguracionesApartamento: async () => {
                const transaccion = {
                    zona: "administracion/arquitectura/configuraciones/listarConfiguracionApartamentos"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)

                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    const estructuraFinal = []
                    const configuracionesApartamentos = respuestaServidor?.ok
                    if (configuracionesApartamentos.length > 0) {
                        for (const detalleApartamento of configuracionesApartamentos) {
                            const apartamentoIDV = detalleApartamento.apartamentoIDV
                            const apartamentoUI = detalleApartamento.apartamentoUI
                            const estadoConfiguracion = detalleApartamento.estadoConfiguracion
                            const detallesApartamento = {
                                apartamentoIDV: apartamentoIDV,
                                apartamentoUI: apartamentoUI,
                                estadoConfiguracion: estadoConfiguracion,
                            }
                            estructuraFinal.push(detallesApartamento)
                        }
                    }
                    return estructuraFinal
                }
            },
            obtenerCalendariosSincronizados: {
                airbnb: async () => {
                    const transaccion = {
                        zona: "administracion/calendario/obtenerNombresCalendarios/airbnb"
                    }
                    const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                    if (respuestaServidor?.error) {
                        casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                    }
                    if (respuestaServidor?.ok) {
                        const estructuraFinal = []
                        const calendariosSincronizados = respuestaServidor?.calendariosSincronizados
                        if (calendariosSincronizados.length > 0) {
                            for (const detallesDelCalendario of calendariosSincronizados) {
                                const apartamentoIDV = detallesDelCalendario.apartamentoIDV
                                const apartamentoUI = detallesDelCalendario.apartamentoUI
                                const nombre = detallesDelCalendario.nombre
                                const calendarioUID = detallesDelCalendario.calendarioUID
                                const detallesApartamento = {
                                    apartamentoIDV: apartamentoIDV,
                                    apartamentoUI: apartamentoUI,
                                    nombre: nombre,
                                    calendarioUID: calendarioUID
                                }
                                estructuraFinal.push(detallesApartamento)
                            }
                        }
                        return estructuraFinal
                    }
                }
            },
            componentesUI: {
                capas: async function () {

                    const granuladoURL = casaVitini.utilidades.granuladorURL()
                    const contenedorSeguroParaParametros = granuladoURL.contenedorSeguroParaParametros
                    const contenedorCapas = {
                        capas: [],
                        capasCompuestas: {}
                    }
                    for (const conjunto of contenedorSeguroParaParametros) {
                        const par = conjunto.split(":")
                        const parametro = par[0]
                        const valor = par[1]
                        if (parametro === "capa") {
                            const capaEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(valor)
                            contenedorCapas.capas.push(capaEnCamel)
                        }
                        if (parametro !== "fecha" && parametro !== "capa") {
                            const parametroEnCamel = casaVitini.utilidades.cadenas.snakeToCamel(parametro)
                            const composicionCapa = valor.split("=")
                            contenedorCapas.capasCompuestas[parametroEnCamel] = composicionCapa
                        }
                    }
                    const contenedorMenuCapas = document.createElement("div")
                    contenedorMenuCapas.classList.add("contenedorMenuCapas")
                    contenedorMenuCapas.setAttribute("componente", "contenedorMenuCapas")
                    const titulo = document.createElement("div")
                    titulo.classList.add("tituloGris")
                    titulo.textContent = "Capas del calendario"
                    contenedorMenuCapas.appendChild(titulo)

                    const botonAplicar = document.createElement("div")
                    botonAplicar.classList.add("boton")
                    botonAplicar.textContent = "Aplicar y cerrar"
                    botonAplicar.addEventListener("click", () => {
                        const instanciaUID_main = document.querySelector("main").getAttribute("instanciaUID")
                        const instanciaUIDMes = casaVitini.utilidades.codigoFechaInstancia()
                        document.querySelector(`[instanciaUID="${instanciaUID_main}"] [componente=marcoMes]`)
                            .setAttribute("instanciaUID", instanciaUIDMes)
                        const calendarioRenderizado = document.querySelector(`[instanciaUID="${instanciaUID_main}"]`)
                        const mesActual = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("mes"))
                        const anoActual = Number(calendarioRenderizado.querySelector("[componente=mesReferencia]").getAttribute("ano"))
                        const capasSelecionadas = []
                        const estructura = {
                            capas: [],
                            capasCompuestas: {}
                        }
                        const elementosSeleccionados = document.querySelectorAll("[componente=contenedorMenuCapas] [estado=seleccionado]")
                        for (const elementoSeleccionado of elementosSeleccionados) {
                            const capaUID = elementoSeleccionado.getAttribute("capaUID")
                            capasSelecionadas.push(capaUID)
                        }
                        if (capasSelecionadas.includes("global")) {
                            estructura.capas.push("global")
                        } else {
                            const capasSimples = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID][tipo=capaSimple][estado=seleccionado]")
                            capasSimples.forEach((capa) => {
                                const capaUID = capa.getAttribute("capaUID")
                                estructura.capas.push(capaUID)
                            })
                            if (!capasSelecionadas.includes("todosLosApartamentos")) {
                                const apartametnosSeleccionados = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID=porApartamento][estado=seleccionado]")
                                const porApartamento = []
                                apartametnosSeleccionados.forEach((apartamento) => {
                                    const apartamentoIDV = apartamento.getAttribute("porApartamento")
                                    porApartamento.push(apartamentoIDV)
                                })
                                if (apartametnosSeleccionados.length > 0) {
                                    estructura.capasCompuestas.porApartamento = porApartamento
                                    estructura.capas.push("porApartamento")
                                }
                            } else {
                                estructura.capas.push("todosLosApartamentos")
                            }
                            if (!capasSelecionadas.includes("todoAirbnb")) {
                                const calendariosAirBnbSeleccionados = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID=calendariosAirbnb][estado=seleccionado]")
                                const calendariosAirbnb = []
                                calendariosAirBnbSeleccionados.forEach((calendario) => {
                                    const calendarioUID = calendario.getAttribute("calendariosAirbnb")
                                    calendariosAirbnb.push(calendarioUID)
                                })
                                if (calendariosAirBnbSeleccionados.length > 0) {
                                    estructura.capasCompuestas.calendariosAirbnb = calendariosAirbnb
                                    estructura.capas.push("calendariosAirbnb")
                                }
                            } else {
                                estructura.capas.push("todoAirbnb")
                            }
                        }
                        if (estructura.capas.length === 0) {
                            const mensaje = "Selecciona alguna capa para aplicarla en el calendario. No has seleccionado ninguna capa. Sí, por el contrario, lo que quieres es cerrar la pantalla de capas. Pulsa en el botón cerrar"
                            return casaVitini.ui.componentes.advertenciaInmersivaSuperPuesta(mensaje)
                        }
                        casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas()
                        casaVitini.administracion.calendario.capas({
                            contenedorCapas: estructura,
                            instanciaUID_main: instanciaUID_main,
                            origen: "menuDesplegable",
                            instanciaUIDMes: instanciaUIDMes
                        })

                        casaVitini.administracion.calendario.controladorRegistros({
                            tipoRegistro: "crear",
                            ano: anoActual,
                            mes: mesActual,
                            contenedorCapas: estructura
                        })


                    })
                    contenedorMenuCapas.appendChild(botonAplicar)
                    const botonCancelar = document.createElement("div")
                    botonCancelar.classList.add("boton")
                    botonCancelar.textContent = "Cerrar"
                    botonCancelar.addEventListener("click", casaVitini.shell.controladoresUI.limpiarAdvertenciasInmersivas)
                    contenedorMenuCapas.appendChild(botonCancelar)
                    const grupoGlobalCapas = document.createElement("div")
                    grupoGlobalCapas.classList.add("contenedorGrupoSinFondo")
                    const contenedorCapaGlobal = document.createElement("div")
                    contenedorCapaGlobal.classList.add("contenedorCapa")
                    contenedorCapaGlobal.setAttribute("capaUID", "global")
                    let filaIconoTitulo = document.createElement("div")
                    filaIconoTitulo.classList.add("filaIconoTexto")
                    const iconoGlobal = document.createElement("div")
                    iconoGlobal.classList.add("icono")
                    let estadoSelector = document.createElement("div")
                    estadoSelector.classList.add("estadoSelector")
                    estadoSelector.setAttribute("componente", "icono")
                    iconoGlobal.appendChild(estadoSelector)
                    filaIconoTitulo.appendChild(iconoGlobal)
                    const tituloGlobal = document.createElement("div")
                    tituloGlobal.classList.add("tituloCapa")
                    tituloGlobal.classList.add("negrita")
                    tituloGlobal.textContent = "Global"
                    filaIconoTitulo.appendChild(tituloGlobal)
                    contenedorCapaGlobal.appendChild(filaIconoTitulo)
                    grupoGlobalCapas.appendChild(contenedorCapaGlobal)
                    const contenedorCapaReservas = document.createElement("div")
                    contenedorCapaReservas.classList.add("contenedorCapa")
                    contenedorCapaReservas.setAttribute("capaUID", "reservas")
                    contenedorCapaReservas.setAttribute("tipo", "capaSimple")
                    filaIconoTitulo = document.createElement("div")
                    filaIconoTitulo.classList.add("filaIconoTexto")
                    const iconoReservas = document.createElement("div")
                    iconoReservas.classList.add("icono")
                    estadoSelector = document.createElement("div")
                    estadoSelector.classList.add("estadoSelector")
                    estadoSelector.setAttribute("componente", "icono")
                    iconoReservas.appendChild(estadoSelector)
                    filaIconoTitulo.appendChild(iconoReservas)
                    const tituloReservas = document.createElement("div")
                    tituloReservas.classList.add("tituloCapa")
                    tituloReservas.classList.add("negrita")
                    tituloReservas.textContent = "Reservas"
                    filaIconoTitulo.appendChild(tituloReservas)
                    contenedorCapaReservas.appendChild(filaIconoTitulo)
                    grupoGlobalCapas.appendChild(contenedorCapaReservas)
                    const contenedorTodosLosBloqueos = document.createElement("div")
                    contenedorTodosLosBloqueos.classList.add("contenedorCapa")
                    contenedorTodosLosBloqueos.setAttribute("capaUID", "todosLosBloqueos")
                    contenedorTodosLosBloqueos.setAttribute("tipo", "capaSimple")
                    filaIconoTitulo = document.createElement("div")
                    filaIconoTitulo.classList.add("filaIconoTexto")
                    const iconoTodosLosBloqueos = document.createElement("div")
                    iconoTodosLosBloqueos.classList.add("icono")
                    estadoSelector = document.createElement("div")
                    estadoSelector.classList.add("estadoSelector")
                    estadoSelector.setAttribute("componente", "icono")
                    iconoTodosLosBloqueos.appendChild(estadoSelector)
                    filaIconoTitulo.appendChild(iconoTodosLosBloqueos)
                    const tituloTodosLosBloqueos = document.createElement("div")
                    tituloTodosLosBloqueos.classList.add("tituloCapa")
                    tituloTodosLosBloqueos.classList.add("negrita")
                    tituloTodosLosBloqueos.textContent = "Todos los bloqueos"
                    filaIconoTitulo.appendChild(tituloTodosLosBloqueos)
                    contenedorTodosLosBloqueos.appendChild(filaIconoTitulo)
                    grupoGlobalCapas.appendChild(contenedorTodosLosBloqueos)
                    contenedorMenuCapas.appendChild(grupoGlobalCapas)
                    const apartamentosLista = await casaVitini.administracion.calendario.obtenerConfiguracionesApartamento()

                    if (apartamentosLista.length > 0) {
                        const contenedorTodosLosApartamentos = document.createElement("div")
                        contenedorTodosLosApartamentos.classList.add("contenedorGrupoFondo")
                        contenedorTodosLosApartamentos.setAttribute("grupo", "campo")
                        filaIconoTitulo = document.createElement("div")
                        filaIconoTitulo.classList.add("filaIconoTexto")
                        filaIconoTitulo.setAttribute("capaUID", "todosLosApartamentos")
                        filaIconoTitulo.setAttribute("tipo", "global")
                        filaIconoTitulo.setAttribute("grupo", "cabeza")
                        const iconoTodosLosApartamentos = document.createElement("div")
                        iconoTodosLosApartamentos.classList.add("icono")
                        estadoSelector = document.createElement("div")
                        estadoSelector.classList.add("estadoSelector")
                        estadoSelector.setAttribute("componente", "icono")
                        iconoTodosLosApartamentos.appendChild(estadoSelector)
                        filaIconoTitulo.appendChild(iconoTodosLosApartamentos)
                        const tituloTodosLosApartamentos = document.createElement("div")
                        tituloTodosLosApartamentos.classList.add("tituloCapa")
                        tituloTodosLosApartamentos.textContent = "Todos los apartamentos"
                        tituloTodosLosApartamentos.classList.add("negrita")
                        filaIconoTitulo.appendChild(tituloTodosLosApartamentos)
                        contenedorTodosLosApartamentos.appendChild(filaIconoTitulo)
                        const contenedorListaPorApartamento = document.createElement("div")
                        contenedorListaPorApartamento.classList.add("contenedorListaApartamentos")
                        for (const detallesApartamento of apartamentosLista) {
                            const apartamentoIDV = detallesApartamento.apartamentoIDV
                            const apartamentoUI = detallesApartamento.apartamentoUI
                            const contenedorApartamento = document.createElement("div")
                            contenedorApartamento.classList.add("contenedorCapa")
                            contenedorApartamento.setAttribute("porApartamento", apartamentoIDV)
                            contenedorApartamento.setAttribute("capaUID", "porApartamento")
                            contenedorApartamento.setAttribute("grupo", "elemento")
                            filaIconoTitulo = document.createElement("div")
                            filaIconoTitulo.classList.add("filaIconoTexto")
                            const iconoApartamento = document.createElement("div")
                            iconoApartamento.classList.add("icono")
                            estadoSelector = document.createElement("div")
                            estadoSelector.classList.add("estadoSelector")
                            estadoSelector.setAttribute("componente", "icono")
                            iconoApartamento.appendChild(estadoSelector)
                            filaIconoTitulo.appendChild(iconoApartamento)
                            const tituloApartamento = document.createElement("div")
                            tituloApartamento.classList.add("tituloCapa")
                            tituloApartamento.textContent = apartamentoUI
                            filaIconoTitulo.appendChild(tituloApartamento)
                            contenedorApartamento.appendChild(filaIconoTitulo)
                            contenedorListaPorApartamento.appendChild(contenedorApartamento)
                        }
                        contenedorTodosLosApartamentos.appendChild(contenedorListaPorApartamento)
                        contenedorMenuCapas.appendChild(contenedorTodosLosApartamentos)
                    }
                    const calendariosListaAirnbnb = await casaVitini.administracion.calendario.obtenerCalendariosSincronizados.airbnb()
                    if (calendariosListaAirnbnb.length > 0) {
                        const grupoAirbnb = document.createElement("div")
                        grupoAirbnb.classList.add("contenedorGrupoFondo")
                        grupoAirbnb.setAttribute("grupo", "campo")
                        filaIconoTitulo = document.createElement("div")
                        filaIconoTitulo.classList.add("filaIconoTexto")
                        filaIconoTitulo.setAttribute("capaUID", "todoAirbnb")
                        filaIconoTitulo.setAttribute("tipo", "global")
                        filaIconoTitulo.setAttribute("grupo", "cabeza")
                        const iconoTodosAirbnb = document.createElement("div")
                        iconoTodosAirbnb.classList.add("icono")
                        estadoSelector = document.createElement("div")
                        estadoSelector.classList.add("estadoSelector")
                        estadoSelector.setAttribute("componente", "icono")
                        iconoTodosAirbnb.appendChild(estadoSelector)
                        filaIconoTitulo.appendChild(iconoTodosAirbnb)
                        const tituloTodoAirbnb = document.createElement("div")
                        tituloTodoAirbnb.classList.add("tituloCapa")
                        tituloTodoAirbnb.classList.add("negrita")
                        tituloTodoAirbnb.textContent = "Todos los calendarios de Airbnb"
                        filaIconoTitulo.appendChild(tituloTodoAirbnb)
                        grupoAirbnb.appendChild(filaIconoTitulo)
                        const contenedorListaPorApartamento = document.createElement("div")
                        contenedorListaPorApartamento.classList.add("contenedorListaApartamentos")
                        for (const detallesCalendario of calendariosListaAirnbnb) {
                            const apartamentoIDV = detallesCalendario.apartamentoIDV
                            const apartamentoUI = detallesCalendario.apartamentoUI
                            const calendarioUID = detallesCalendario.calendarioUID
                            const nombre = detallesCalendario.nombre
                            const contenedorCalendarioAirbnb = document.createElement("div")
                            contenedorCalendarioAirbnb.classList.add("contenedorCapa")
                            contenedorCalendarioAirbnb.setAttribute("capaUID", "calendariosAirbnb")
                            contenedorCalendarioAirbnb.setAttribute("calendariosAirbnb", calendarioUID)
                            contenedorCalendarioAirbnb.setAttribute("grupo", "elemento")
                            filaIconoTitulo = document.createElement("div")
                            filaIconoTitulo.classList.add("filaIconoTexto")
                            const iconoCalendarioAirbnb = document.createElement("div")
                            iconoCalendarioAirbnb.classList.add("icono")
                            estadoSelector = document.createElement("div")
                            estadoSelector.classList.add("estadoSelector")
                            estadoSelector.setAttribute("componente", "icono")
                            iconoCalendarioAirbnb.appendChild(estadoSelector)
                            filaIconoTitulo.appendChild(iconoCalendarioAirbnb)
                            const tituloCalendarioAirbnb = document.createElement("div")
                            tituloCalendarioAirbnb.classList.add("tituloCapa")
                            tituloCalendarioAirbnb.textContent = nombre
                            filaIconoTitulo.appendChild(tituloCalendarioAirbnb)
                            contenedorCalendarioAirbnb.appendChild(filaIconoTitulo)
                            contenedorListaPorApartamento.appendChild(contenedorCalendarioAirbnb)
                        }
                        grupoAirbnb.appendChild(contenedorListaPorApartamento)
                        contenedorMenuCapas.appendChild(grupoAirbnb)
                    }
                    const pantallaInmersiva = casaVitini.ui.componentes.pantallaInmersivaPersonalizada()
                    const destino = pantallaInmersiva.querySelector("[destino=inyector]")
                    destino.appendChild(contenedorMenuCapas)
                    document.querySelector("main").appendChild(pantallaInmersiva)
                    const controladorSelectoresCapas = (selector) => {
                        const contenedorCapa = selector.target.closest("[capaUID]")
                        const todasLasCapas = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID]")
                        const capaUID = contenedorCapa.getAttribute("capaUID")
                        const todoLosIconos = document.querySelectorAll("[componente=contenedorMenuCapas] [componente=icono]")
                        const todasLasCapasGlobales = document.querySelectorAll("[componente=contenedorMenuCapas] [tipo=global]")
                        const grupo = contenedorCapa.getAttribute("grupo")
                        const iconoSelecionado = contenedorCapa.querySelector("[componente=icono]")
                        const estadoCapa = contenedorCapa.getAttribute("estado")
                        const controlBotonGlobal = () => {
                            const capasGlobales = document.querySelectorAll("[componente=contenedorMenuCapas] [tipo=global], [componente=contenedorMenuCapas] [tipo=capaSimple]")
                            const capaGlobal = document.querySelector("[componente=contenedorMenuCapas] [capaUID=global]")
                            const iconoCapa = capaGlobal.querySelector("[componente=icono]")
                            let estadoFinal = "seleccionado"
                            for (const capa of capasGlobales) {
                                const estado = capa.getAttribute("estado")
                                if (estado !== "seleccionado") {
                                    estadoFinal = "noSeleccionado"
                                    break
                                }
                            }
                            if (estadoFinal === "seleccionado") {
                                iconoCapa.style.background = "blue"
                                capaGlobal.setAttribute("estado", "seleccionado")
                            } else {
                                iconoCapa.removeAttribute("style")
                                capaGlobal.removeAttribute("estado")
                            }
                        }
                        if (estadoCapa === "seleccionado") {
                            iconoSelecionado.removeAttribute("style")
                            contenedorCapa.removeAttribute("estado")
                        } else {
                            iconoSelecionado.style.background = "blue"
                            contenedorCapa.setAttribute("estado", "seleccionado")
                        }
                        if (capaUID === "global") {
                            if (estadoCapa === "seleccionado") {
                                todasLasCapas.forEach((capa) => {
                                    capa.removeAttribute("estado")
                                    capa.querySelector("[componente=icono]").removeAttribute("style")
                                })
                            } else {
                                todasLasCapas.forEach((capa) => {
                                    capa.setAttribute("estado", "seleccionado")
                                    capa.querySelector("[componente=icono]").style.background = "blue"
                                })
                            }
                        }
                        if (grupo === "cabeza") {
                            const elementosDelGrupo = contenedorCapa.closest("[grupo=campo]").querySelectorAll("[grupo=elemento]")
                            if (estadoCapa === "seleccionado") {
                                elementosDelGrupo.forEach((capa) => {
                                    capa.removeAttribute("estado")
                                    capa.querySelectorAll("[componente=icono]").forEach((icono) => {
                                        icono.removeAttribute("style")
                                    })
                                })
                            } else {
                                elementosDelGrupo.forEach((capa) => {
                                    capa.setAttribute("estado", "seleccionado")
                                    capa.querySelectorAll("[componente=icono]").forEach((icono) => {
                                        icono.style.background = "blue"
                                    })
                                })
                            }
                        }
                        if (grupo === "elemento") {
                            const elementosDelGrupo = contenedorCapa.closest("[grupo=campo]").querySelectorAll("[grupo=elemento]")
                            const cabezaGrupo = contenedorCapa.closest("[grupo=campo]").querySelector("[grupo=cabeza]")
                            let estadoFinal = "seleccionado"
                            for (const elemento of elementosDelGrupo) {
                                const estado = elemento.getAttribute("estado")
                                if (estado !== "seleccionado") {
                                    estadoFinal = "noSeleccionado"
                                    cabezaGrupo.removeAttribute("estado")
                                    cabezaGrupo.querySelector("[componente=icono]").removeAttribute("style")
                                    break
                                }
                            }
                            if (estadoFinal === "seleccionado") {
                                cabezaGrupo.setAttribute("estado", "seleccionado")
                                cabezaGrupo.querySelector("[componente=icono]").style.background = "blue"
                            }
                        }
                        controlBotonGlobal()
                    }
                    const capasPorVerificar = contenedorCapas.capas
                    const composicionCapaCompuesta = contenedorCapas.capasCompuestas
                    const contenedorMenuCapasRenderizado = document.querySelector("[componente=contenedorMenuCapas]")
                    if (capasPorVerificar.includes("global")) {
                        contenedorMenuCapasRenderizado.querySelectorAll("[capaUID]").forEach((capa) => {
                            capa.setAttribute("estado", "seleccionado")
                            capa.querySelector("[componente=icono]").style.background = "blue"
                        })
                    } else {
                        for (const capaPorVeriticar of capasPorVerificar) {
                            if (composicionCapaCompuesta[capaPorVeriticar]) {
                                const capasSimplesEnCapaCompuesta = composicionCapaCompuesta[capaPorVeriticar]
                                for (const capaSimpleEnCapaCompuesta of capasSimplesEnCapaCompuesta) {
                                    const capaUIDConstructor = `[capaUID="${capaPorVeriticar}"][${capaPorVeriticar}="${capaSimpleEnCapaCompuesta}"]`
                                    const selectorCapaRenderizada = contenedorMenuCapasRenderizado.querySelector(capaUIDConstructor)
                                    selectorCapaRenderizada.setAttribute("estado", "seleccionado")
                                    selectorCapaRenderizada.querySelector("[componente=icono]").style.background = "blue"
                                }
                            } else {
                                const capaUIDConstructor = `[capaUID="${capaPorVeriticar}"]`
                                const selectorCapaRenderizada = contenedorMenuCapasRenderizado.querySelector(capaUIDConstructor)
                                selectorCapaRenderizada.setAttribute("estado", "seleccionado")
                                selectorCapaRenderizada.querySelector("[componente=icono]").style.background = "blue"
                                const tipoRolGrupo = selectorCapaRenderizada.getAttribute("grupo")
                                if (tipoRolGrupo === "cabeza") {
                                    selectorCapaRenderizada.closest("[grupo=campo]").querySelectorAll("[grupo=elemento]").forEach((elemento) => {
                                        elemento.setAttribute("estado", "seleccionado")
                                        elemento.querySelector("[componente=icono]").style.background = "blue"
                                    })
                                }
                            }
                        }
                    }
                    const selectorCapas = document.querySelectorAll("[componente=contenedorMenuCapas] [capaUID]")
                    selectorCapas.forEach((selector) => {
                        selector.addEventListener("click", controladorSelectoresCapas)
                    })

                }
            }
        },
        componentes: {
            obtenerApartamentos: async () => {
                const transaccion = {
                    zona: "administracion/componentes/apartamentosDisponiblesConfigurados"
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {
                    casaVitini.ui.componentes.advertenciaInmersiva(respuestaServidor?.error)
                }
                if (respuestaServidor?.ok) {
                    return respuestaServidor?.ok
                }
            },
            obtenerConfiguracionAlojamiento: async (apartamentoIDV) => {
                const transaccion = {
                    zona: "administracion/arquitectura/configuraciones/detalleConfiguracionAlojamiento",
                    apartamentoIDV
                }
                const respuestaServidor = await casaVitini.shell.servidor(transaccion)
                if (respuestaServidor?.error) {

                }
                if (respuestaServidor.ok) {
                    return respuestaServidor
                }
            }
        }
    }
}
casaVitini.shell.arranque()